
PDC_PDC_UART_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a5c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20000000  00402a5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000114  20000844  004032a0  00020844  2**2
                  ALLOC
  3 .stack        00003000  20000958  004033b4  00020844  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002086e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fd92  00000000  00000000  000208c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002542  00000000  00000000  00030659  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000395f  00000000  00000000  00032b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000908  00000000  00000000  000364fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000858  00000000  00000000  00036e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013f85  00000000  00000000  0003765a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a355  00000000  00000000  0004b5df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00055554  00000000  00000000  00055934  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c00  00000000  00000000  000aae88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 39 00 20 3d 08 40 00 39 08 40 00 39 08 40 00     X9. =.@.9.@.9.@.
  400010:	39 08 40 00 39 08 40 00 39 08 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  40002c:	39 08 40 00 39 08 40 00 00 00 00 00 39 08 40 00     9.@.9.@.....9.@.
  40003c:	39 08 40 00 39 08 40 00 39 08 40 00 39 08 40 00     9.@.9.@.9.@.9.@.
  40004c:	39 08 40 00 39 08 40 00 39 08 40 00 39 08 40 00     9.@.9.@.9.@.9.@.
  40005c:	00 00 00 00 c5 0b 40 00 39 08 40 00 00 00 00 00     ......@.9.@.....
  40006c:	19 06 40 00 2d 06 40 00 41 06 40 00 39 08 40 00     ..@.-.@.A.@.9.@.
  40007c:	39 08 40 00 00 00 00 00 00 00 00 00 39 08 40 00     9.@.........9.@.
  40008c:	39 08 40 00 39 08 40 00 39 08 40 00 39 08 40 00     9.@.9.@.9.@.9.@.
  40009c:	39 08 40 00 39 08 40 00 39 08 40 00 39 08 40 00     9.@.9.@.9.@.9.@.
  4000ac:	39 08 40 00 39 08 40 00 39 08 40 00 39 08 40 00     9.@.9.@.9.@.9.@.
  4000bc:	39 08 40 00 39 08 40 00 39 08 40 00 39 08 40 00     9.@.9.@.9.@.9.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000844 	.word	0x20000844
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402a5c 	.word	0x00402a5c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00402a5c 	.word	0x00402a5c
  40012c:	20000848 	.word	0x20000848
  400130:	00402a5c 	.word	0x00402a5c
  400134:	00000000 	.word	0x00000000

00400138 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400138:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40013a:	480e      	ldr	r0, [pc, #56]	; (400174 <sysclk_init+0x3c>)
  40013c:	4b0e      	ldr	r3, [pc, #56]	; (400178 <sysclk_init+0x40>)
  40013e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400140:	213e      	movs	r1, #62	; 0x3e
  400142:	2000      	movs	r0, #0
  400144:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x44>)
  400146:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400148:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x48>)
  40014a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40014c:	2800      	cmp	r0, #0
  40014e:	d0fc      	beq.n	40014a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400150:	4b0c      	ldr	r3, [pc, #48]	; (400184 <sysclk_init+0x4c>)
  400152:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400154:	4a0c      	ldr	r2, [pc, #48]	; (400188 <sysclk_init+0x50>)
  400156:	4b0d      	ldr	r3, [pc, #52]	; (40018c <sysclk_init+0x54>)
  400158:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40015a:	4c0d      	ldr	r4, [pc, #52]	; (400190 <sysclk_init+0x58>)
  40015c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40015e:	2800      	cmp	r0, #0
  400160:	d0fc      	beq.n	40015c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400162:	2010      	movs	r0, #16
  400164:	4b0b      	ldr	r3, [pc, #44]	; (400194 <sysclk_init+0x5c>)
  400166:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400168:	4b0b      	ldr	r3, [pc, #44]	; (400198 <sysclk_init+0x60>)
  40016a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40016c:	4801      	ldr	r0, [pc, #4]	; (400174 <sysclk_init+0x3c>)
  40016e:	4b02      	ldr	r3, [pc, #8]	; (400178 <sysclk_init+0x40>)
  400170:	4798      	blx	r3
  400172:	bd10      	pop	{r4, pc}
  400174:	07270e00 	.word	0x07270e00
  400178:	004009f9 	.word	0x004009f9
  40017c:	004006b9 	.word	0x004006b9
  400180:	0040070d 	.word	0x0040070d
  400184:	0040071d 	.word	0x0040071d
  400188:	20133f01 	.word	0x20133f01
  40018c:	400e0400 	.word	0x400e0400
  400190:	0040072d 	.word	0x0040072d
  400194:	00400655 	.word	0x00400655
  400198:	004008e9 	.word	0x004008e9

0040019c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40019c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001a0:	b980      	cbnz	r0, 4001c4 <_read+0x28>
  4001a2:	460c      	mov	r4, r1
  4001a4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001a6:	2a00      	cmp	r2, #0
  4001a8:	dd0f      	ble.n	4001ca <_read+0x2e>
  4001aa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001ac:	4e08      	ldr	r6, [pc, #32]	; (4001d0 <_read+0x34>)
  4001ae:	4d09      	ldr	r5, [pc, #36]	; (4001d4 <_read+0x38>)
  4001b0:	6830      	ldr	r0, [r6, #0]
  4001b2:	4621      	mov	r1, r4
  4001b4:	682b      	ldr	r3, [r5, #0]
  4001b6:	4798      	blx	r3
		ptr++;
  4001b8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001ba:	42bc      	cmp	r4, r7
  4001bc:	d1f8      	bne.n	4001b0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001be:	4640      	mov	r0, r8
  4001c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001c4:	f04f 38ff 	mov.w	r8, #4294967295
  4001c8:	e7f9      	b.n	4001be <_read+0x22>
	for (; len > 0; --len) {
  4001ca:	4680      	mov	r8, r0
  4001cc:	e7f7      	b.n	4001be <_read+0x22>
  4001ce:	bf00      	nop
  4001d0:	20000914 	.word	0x20000914
  4001d4:	2000090c 	.word	0x2000090c

004001d8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001d8:	3801      	subs	r0, #1
  4001da:	2802      	cmp	r0, #2
  4001dc:	d815      	bhi.n	40020a <_write+0x32>
{
  4001de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001e2:	460e      	mov	r6, r1
  4001e4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4001e6:	b19a      	cbz	r2, 400210 <_write+0x38>
  4001e8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001ea:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400224 <_write+0x4c>
  4001ee:	4f0c      	ldr	r7, [pc, #48]	; (400220 <_write+0x48>)
  4001f0:	f8d8 0000 	ldr.w	r0, [r8]
  4001f4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001f8:	683b      	ldr	r3, [r7, #0]
  4001fa:	4798      	blx	r3
  4001fc:	2800      	cmp	r0, #0
  4001fe:	db0a      	blt.n	400216 <_write+0x3e>
  400200:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400202:	3c01      	subs	r4, #1
  400204:	d1f4      	bne.n	4001f0 <_write+0x18>
  400206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40020a:	f04f 30ff 	mov.w	r0, #4294967295
  40020e:	4770      	bx	lr
	for (; len != 0; --len) {
  400210:	4610      	mov	r0, r2
  400212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400216:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40021a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40021e:	bf00      	nop
  400220:	20000910 	.word	0x20000910
  400224:	20000914 	.word	0x20000914

00400228 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400228:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40022a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40022e:	4b10      	ldr	r3, [pc, #64]	; (400270 <board_init+0x48>)
  400230:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400232:	200b      	movs	r0, #11
  400234:	4c0f      	ldr	r4, [pc, #60]	; (400274 <board_init+0x4c>)
  400236:	47a0      	blx	r4
  400238:	200c      	movs	r0, #12
  40023a:	47a0      	blx	r4
  40023c:	200d      	movs	r0, #13
  40023e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400240:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400244:	2013      	movs	r0, #19
  400246:	4c0c      	ldr	r4, [pc, #48]	; (400278 <board_init+0x50>)
  400248:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40024a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40024e:	2014      	movs	r0, #20
  400250:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400252:	490a      	ldr	r1, [pc, #40]	; (40027c <board_init+0x54>)
  400254:	2023      	movs	r0, #35	; 0x23
  400256:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400258:	4909      	ldr	r1, [pc, #36]	; (400280 <board_init+0x58>)
  40025a:	204c      	movs	r0, #76	; 0x4c
  40025c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40025e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400262:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400266:	4807      	ldr	r0, [pc, #28]	; (400284 <board_init+0x5c>)
  400268:	4b07      	ldr	r3, [pc, #28]	; (400288 <board_init+0x60>)
  40026a:	4798      	blx	r3
  40026c:	bd10      	pop	{r4, pc}
  40026e:	bf00      	nop
  400270:	400e1450 	.word	0x400e1450
  400274:	0040073d 	.word	0x0040073d
  400278:	004003b9 	.word	0x004003b9
  40027c:	28000079 	.word	0x28000079
  400280:	28000059 	.word	0x28000059
  400284:	400e0e00 	.word	0x400e0e00
  400288:	004004d9 	.word	0x004004d9

0040028c <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  40028c:	460b      	mov	r3, r1
  40028e:	b119      	cbz	r1, 400298 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  400290:	6809      	ldr	r1, [r1, #0]
  400292:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  400294:	685b      	ldr	r3, [r3, #4]
  400296:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
  400298:	b11a      	cbz	r2, 4002a2 <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  40029a:	6813      	ldr	r3, [r2, #0]
  40029c:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  40029e:	6853      	ldr	r3, [r2, #4]
  4002a0:	61c3      	str	r3, [r0, #28]
  4002a2:	4770      	bx	lr

004002a4 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4002a4:	460b      	mov	r3, r1
  4002a6:	b119      	cbz	r1, 4002b0 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  4002a8:	6809      	ldr	r1, [r1, #0]
  4002aa:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  4002ac:	685b      	ldr	r3, [r3, #4]
  4002ae:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  4002b0:	b11a      	cbz	r2, 4002ba <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  4002b2:	6813      	ldr	r3, [r2, #0]
  4002b4:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  4002b6:	6853      	ldr	r3, [r2, #4]
  4002b8:	6143      	str	r3, [r0, #20]
  4002ba:	4770      	bx	lr

004002bc <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4002bc:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  4002c0:	05c9      	lsls	r1, r1, #23
  4002c2:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
  4002c4:	6201      	str	r1, [r0, #32]
  4002c6:	4770      	bx	lr

004002c8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4002c8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4002ca:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4002ce:	d039      	beq.n	400344 <pio_set_peripheral+0x7c>
  4002d0:	d813      	bhi.n	4002fa <pio_set_peripheral+0x32>
  4002d2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4002d6:	d025      	beq.n	400324 <pio_set_peripheral+0x5c>
  4002d8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4002dc:	d10a      	bne.n	4002f4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002de:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4002e0:	4313      	orrs	r3, r2
  4002e2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002e6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4002e8:	400b      	ands	r3, r1
  4002ea:	ea23 0302 	bic.w	r3, r3, r2
  4002ee:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4002f0:	6042      	str	r2, [r0, #4]
  4002f2:	4770      	bx	lr
	switch (ul_type) {
  4002f4:	2900      	cmp	r1, #0
  4002f6:	d1fb      	bne.n	4002f0 <pio_set_peripheral+0x28>
  4002f8:	4770      	bx	lr
  4002fa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4002fe:	d020      	beq.n	400342 <pio_set_peripheral+0x7a>
  400300:	d809      	bhi.n	400316 <pio_set_peripheral+0x4e>
  400302:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400306:	d1f3      	bne.n	4002f0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400308:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40030a:	4313      	orrs	r3, r2
  40030c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40030e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400310:	4313      	orrs	r3, r2
  400312:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400314:	e7ec      	b.n	4002f0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400316:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40031a:	d012      	beq.n	400342 <pio_set_peripheral+0x7a>
  40031c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400320:	d00f      	beq.n	400342 <pio_set_peripheral+0x7a>
  400322:	e7e5      	b.n	4002f0 <pio_set_peripheral+0x28>
{
  400324:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400326:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400328:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40032a:	43d3      	mvns	r3, r2
  40032c:	4021      	ands	r1, r4
  40032e:	461c      	mov	r4, r3
  400330:	4019      	ands	r1, r3
  400332:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400334:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400336:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400338:	400b      	ands	r3, r1
  40033a:	4023      	ands	r3, r4
  40033c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40033e:	6042      	str	r2, [r0, #4]
}
  400340:	bc10      	pop	{r4}
  400342:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400344:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400346:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400348:	400b      	ands	r3, r1
  40034a:	ea23 0302 	bic.w	r3, r3, r2
  40034e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400350:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400352:	4313      	orrs	r3, r2
  400354:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400356:	e7cb      	b.n	4002f0 <pio_set_peripheral+0x28>

00400358 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400358:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40035a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40035e:	bf14      	ite	ne
  400360:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400362:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400364:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400368:	bf14      	ite	ne
  40036a:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  40036c:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  40036e:	f012 0f02 	tst.w	r2, #2
  400372:	d107      	bne.n	400384 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400374:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400378:	bf18      	it	ne
  40037a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  40037e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400380:	6001      	str	r1, [r0, #0]
  400382:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400384:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400388:	e7f9      	b.n	40037e <pio_set_input+0x26>

0040038a <pio_set_output>:
{
  40038a:	b410      	push	{r4}
  40038c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40038e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400390:	b944      	cbnz	r4, 4003a4 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400392:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400394:	b143      	cbz	r3, 4003a8 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  400396:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400398:	b942      	cbnz	r2, 4003ac <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40039a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40039c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40039e:	6001      	str	r1, [r0, #0]
}
  4003a0:	bc10      	pop	{r4}
  4003a2:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4003a4:	6641      	str	r1, [r0, #100]	; 0x64
  4003a6:	e7f5      	b.n	400394 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4003a8:	6541      	str	r1, [r0, #84]	; 0x54
  4003aa:	e7f5      	b.n	400398 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4003ac:	6301      	str	r1, [r0, #48]	; 0x30
  4003ae:	e7f5      	b.n	40039c <pio_set_output+0x12>

004003b0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4003b0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4003b2:	4770      	bx	lr

004003b4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4003b4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4003b6:	4770      	bx	lr

004003b8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4003b8:	b570      	push	{r4, r5, r6, lr}
  4003ba:	b082      	sub	sp, #8
  4003bc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4003be:	0943      	lsrs	r3, r0, #5
  4003c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4003c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4003c8:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4003ca:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4003ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4003d2:	d053      	beq.n	40047c <pio_configure_pin+0xc4>
  4003d4:	d80a      	bhi.n	4003ec <pio_configure_pin+0x34>
  4003d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4003da:	d02d      	beq.n	400438 <pio_configure_pin+0x80>
  4003dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4003e0:	d03b      	beq.n	40045a <pio_configure_pin+0xa2>
  4003e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4003e6:	d015      	beq.n	400414 <pio_configure_pin+0x5c>
		return 0;
  4003e8:	2000      	movs	r0, #0
  4003ea:	e023      	b.n	400434 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4003ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4003f0:	d055      	beq.n	40049e <pio_configure_pin+0xe6>
  4003f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4003f6:	d052      	beq.n	40049e <pio_configure_pin+0xe6>
  4003f8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4003fc:	d1f4      	bne.n	4003e8 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4003fe:	f000 011f 	and.w	r1, r0, #31
  400402:	2601      	movs	r6, #1
  400404:	462a      	mov	r2, r5
  400406:	fa06 f101 	lsl.w	r1, r6, r1
  40040a:	4620      	mov	r0, r4
  40040c:	4b2f      	ldr	r3, [pc, #188]	; (4004cc <pio_configure_pin+0x114>)
  40040e:	4798      	blx	r3
	return 1;
  400410:	4630      	mov	r0, r6
		break;
  400412:	e00f      	b.n	400434 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400414:	f000 001f 	and.w	r0, r0, #31
  400418:	2601      	movs	r6, #1
  40041a:	4086      	lsls	r6, r0
  40041c:	4632      	mov	r2, r6
  40041e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400422:	4620      	mov	r0, r4
  400424:	4b2a      	ldr	r3, [pc, #168]	; (4004d0 <pio_configure_pin+0x118>)
  400426:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400428:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40042c:	bf14      	ite	ne
  40042e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400430:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400432:	2001      	movs	r0, #1
}
  400434:	b002      	add	sp, #8
  400436:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400438:	f000 001f 	and.w	r0, r0, #31
  40043c:	2601      	movs	r6, #1
  40043e:	4086      	lsls	r6, r0
  400440:	4632      	mov	r2, r6
  400442:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400446:	4620      	mov	r0, r4
  400448:	4b21      	ldr	r3, [pc, #132]	; (4004d0 <pio_configure_pin+0x118>)
  40044a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40044c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400450:	bf14      	ite	ne
  400452:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400454:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400456:	2001      	movs	r0, #1
  400458:	e7ec      	b.n	400434 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40045a:	f000 001f 	and.w	r0, r0, #31
  40045e:	2601      	movs	r6, #1
  400460:	4086      	lsls	r6, r0
  400462:	4632      	mov	r2, r6
  400464:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400468:	4620      	mov	r0, r4
  40046a:	4b19      	ldr	r3, [pc, #100]	; (4004d0 <pio_configure_pin+0x118>)
  40046c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40046e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400472:	bf14      	ite	ne
  400474:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400476:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400478:	2001      	movs	r0, #1
  40047a:	e7db      	b.n	400434 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40047c:	f000 001f 	and.w	r0, r0, #31
  400480:	2601      	movs	r6, #1
  400482:	4086      	lsls	r6, r0
  400484:	4632      	mov	r2, r6
  400486:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40048a:	4620      	mov	r0, r4
  40048c:	4b10      	ldr	r3, [pc, #64]	; (4004d0 <pio_configure_pin+0x118>)
  40048e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400490:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400494:	bf14      	ite	ne
  400496:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400498:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40049a:	2001      	movs	r0, #1
  40049c:	e7ca      	b.n	400434 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40049e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4004a2:	f000 011f 	and.w	r1, r0, #31
  4004a6:	2601      	movs	r6, #1
  4004a8:	ea05 0306 	and.w	r3, r5, r6
  4004ac:	9300      	str	r3, [sp, #0]
  4004ae:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4004b2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4004b6:	bf14      	ite	ne
  4004b8:	2200      	movne	r2, #0
  4004ba:	2201      	moveq	r2, #1
  4004bc:	fa06 f101 	lsl.w	r1, r6, r1
  4004c0:	4620      	mov	r0, r4
  4004c2:	4c04      	ldr	r4, [pc, #16]	; (4004d4 <pio_configure_pin+0x11c>)
  4004c4:	47a0      	blx	r4
	return 1;
  4004c6:	4630      	mov	r0, r6
		break;
  4004c8:	e7b4      	b.n	400434 <pio_configure_pin+0x7c>
  4004ca:	bf00      	nop
  4004cc:	00400359 	.word	0x00400359
  4004d0:	004002c9 	.word	0x004002c9
  4004d4:	0040038b 	.word	0x0040038b

004004d8 <pio_configure_pin_group>:
{
  4004d8:	b570      	push	{r4, r5, r6, lr}
  4004da:	b082      	sub	sp, #8
  4004dc:	4605      	mov	r5, r0
  4004de:	460e      	mov	r6, r1
  4004e0:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  4004e2:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4004e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4004ea:	d03d      	beq.n	400568 <pio_configure_pin_group+0x90>
  4004ec:	d80a      	bhi.n	400504 <pio_configure_pin_group+0x2c>
  4004ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4004f2:	d021      	beq.n	400538 <pio_configure_pin_group+0x60>
  4004f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4004f8:	d02a      	beq.n	400550 <pio_configure_pin_group+0x78>
  4004fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4004fe:	d00e      	beq.n	40051e <pio_configure_pin_group+0x46>
		return 0;
  400500:	2000      	movs	r0, #0
  400502:	e017      	b.n	400534 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  400504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400508:	d03a      	beq.n	400580 <pio_configure_pin_group+0xa8>
  40050a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40050e:	d037      	beq.n	400580 <pio_configure_pin_group+0xa8>
  400510:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400514:	d1f4      	bne.n	400500 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  400516:	4b23      	ldr	r3, [pc, #140]	; (4005a4 <pio_configure_pin_group+0xcc>)
  400518:	4798      	blx	r3
	return 1;
  40051a:	2001      	movs	r0, #1
		break;
  40051c:	e00a      	b.n	400534 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40051e:	460a      	mov	r2, r1
  400520:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400524:	4b20      	ldr	r3, [pc, #128]	; (4005a8 <pio_configure_pin_group+0xd0>)
  400526:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400528:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40052c:	bf14      	ite	ne
  40052e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400530:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400532:	2001      	movs	r0, #1
}
  400534:	b002      	add	sp, #8
  400536:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400538:	460a      	mov	r2, r1
  40053a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40053e:	4b1a      	ldr	r3, [pc, #104]	; (4005a8 <pio_configure_pin_group+0xd0>)
  400540:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400542:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400546:	bf14      	ite	ne
  400548:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40054a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40054c:	2001      	movs	r0, #1
  40054e:	e7f1      	b.n	400534 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400550:	460a      	mov	r2, r1
  400552:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400556:	4b14      	ldr	r3, [pc, #80]	; (4005a8 <pio_configure_pin_group+0xd0>)
  400558:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40055a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40055e:	bf14      	ite	ne
  400560:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400562:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400564:	2001      	movs	r0, #1
  400566:	e7e5      	b.n	400534 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400568:	460a      	mov	r2, r1
  40056a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40056e:	4b0e      	ldr	r3, [pc, #56]	; (4005a8 <pio_configure_pin_group+0xd0>)
  400570:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400572:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400576:	bf14      	ite	ne
  400578:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40057a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40057c:	2001      	movs	r0, #1
  40057e:	e7d9      	b.n	400534 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400580:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  400584:	f004 0301 	and.w	r3, r4, #1
  400588:	9300      	str	r3, [sp, #0]
  40058a:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40058e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400592:	bf14      	ite	ne
  400594:	2200      	movne	r2, #0
  400596:	2201      	moveq	r2, #1
  400598:	4631      	mov	r1, r6
  40059a:	4628      	mov	r0, r5
  40059c:	4c03      	ldr	r4, [pc, #12]	; (4005ac <pio_configure_pin_group+0xd4>)
  40059e:	47a0      	blx	r4
	return 1;
  4005a0:	2001      	movs	r0, #1
		break;
  4005a2:	e7c7      	b.n	400534 <pio_configure_pin_group+0x5c>
  4005a4:	00400359 	.word	0x00400359
  4005a8:	004002c9 	.word	0x004002c9
  4005ac:	0040038b 	.word	0x0040038b

004005b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4005b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4005b4:	4681      	mov	r9, r0
  4005b6:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4005b8:	4b12      	ldr	r3, [pc, #72]	; (400604 <pio_handler_process+0x54>)
  4005ba:	4798      	blx	r3
  4005bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4005be:	4648      	mov	r0, r9
  4005c0:	4b11      	ldr	r3, [pc, #68]	; (400608 <pio_handler_process+0x58>)
  4005c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4005c4:	4005      	ands	r5, r0
  4005c6:	d013      	beq.n	4005f0 <pio_handler_process+0x40>
  4005c8:	4c10      	ldr	r4, [pc, #64]	; (40060c <pio_handler_process+0x5c>)
  4005ca:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4005ce:	e003      	b.n	4005d8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4005d0:	42b4      	cmp	r4, r6
  4005d2:	d00d      	beq.n	4005f0 <pio_handler_process+0x40>
  4005d4:	3410      	adds	r4, #16
		while (status != 0) {
  4005d6:	b15d      	cbz	r5, 4005f0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4005d8:	6820      	ldr	r0, [r4, #0]
  4005da:	42b8      	cmp	r0, r7
  4005dc:	d1f8      	bne.n	4005d0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4005de:	6861      	ldr	r1, [r4, #4]
  4005e0:	4229      	tst	r1, r5
  4005e2:	d0f5      	beq.n	4005d0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4005e4:	68e3      	ldr	r3, [r4, #12]
  4005e6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4005e8:	6863      	ldr	r3, [r4, #4]
  4005ea:	ea25 0503 	bic.w	r5, r5, r3
  4005ee:	e7ef      	b.n	4005d0 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4005f0:	4b07      	ldr	r3, [pc, #28]	; (400610 <pio_handler_process+0x60>)
  4005f2:	681b      	ldr	r3, [r3, #0]
  4005f4:	b123      	cbz	r3, 400600 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4005f6:	4b07      	ldr	r3, [pc, #28]	; (400614 <pio_handler_process+0x64>)
  4005f8:	681b      	ldr	r3, [r3, #0]
  4005fa:	b10b      	cbz	r3, 400600 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4005fc:	4648      	mov	r0, r9
  4005fe:	4798      	blx	r3
  400600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400604:	004003b1 	.word	0x004003b1
  400608:	004003b5 	.word	0x004003b5
  40060c:	20000860 	.word	0x20000860
  400610:	20000918 	.word	0x20000918
  400614:	200008d0 	.word	0x200008d0

00400618 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400618:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40061a:	210b      	movs	r1, #11
  40061c:	4801      	ldr	r0, [pc, #4]	; (400624 <PIOA_Handler+0xc>)
  40061e:	4b02      	ldr	r3, [pc, #8]	; (400628 <PIOA_Handler+0x10>)
  400620:	4798      	blx	r3
  400622:	bd08      	pop	{r3, pc}
  400624:	400e0e00 	.word	0x400e0e00
  400628:	004005b1 	.word	0x004005b1

0040062c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40062c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40062e:	210c      	movs	r1, #12
  400630:	4801      	ldr	r0, [pc, #4]	; (400638 <PIOB_Handler+0xc>)
  400632:	4b02      	ldr	r3, [pc, #8]	; (40063c <PIOB_Handler+0x10>)
  400634:	4798      	blx	r3
  400636:	bd08      	pop	{r3, pc}
  400638:	400e1000 	.word	0x400e1000
  40063c:	004005b1 	.word	0x004005b1

00400640 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400640:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400642:	210d      	movs	r1, #13
  400644:	4801      	ldr	r0, [pc, #4]	; (40064c <PIOC_Handler+0xc>)
  400646:	4b02      	ldr	r3, [pc, #8]	; (400650 <PIOC_Handler+0x10>)
  400648:	4798      	blx	r3
  40064a:	bd08      	pop	{r3, pc}
  40064c:	400e1200 	.word	0x400e1200
  400650:	004005b1 	.word	0x004005b1

00400654 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400654:	4a17      	ldr	r2, [pc, #92]	; (4006b4 <pmc_switch_mck_to_pllack+0x60>)
  400656:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40065c:	4318      	orrs	r0, r3
  40065e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400660:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400662:	f013 0f08 	tst.w	r3, #8
  400666:	d10a      	bne.n	40067e <pmc_switch_mck_to_pllack+0x2a>
  400668:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40066c:	4911      	ldr	r1, [pc, #68]	; (4006b4 <pmc_switch_mck_to_pllack+0x60>)
  40066e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400670:	f012 0f08 	tst.w	r2, #8
  400674:	d103      	bne.n	40067e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400676:	3b01      	subs	r3, #1
  400678:	d1f9      	bne.n	40066e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40067a:	2001      	movs	r0, #1
  40067c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40067e:	4a0d      	ldr	r2, [pc, #52]	; (4006b4 <pmc_switch_mck_to_pllack+0x60>)
  400680:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400682:	f023 0303 	bic.w	r3, r3, #3
  400686:	f043 0302 	orr.w	r3, r3, #2
  40068a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40068c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40068e:	f013 0f08 	tst.w	r3, #8
  400692:	d10a      	bne.n	4006aa <pmc_switch_mck_to_pllack+0x56>
  400694:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400698:	4906      	ldr	r1, [pc, #24]	; (4006b4 <pmc_switch_mck_to_pllack+0x60>)
  40069a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40069c:	f012 0f08 	tst.w	r2, #8
  4006a0:	d105      	bne.n	4006ae <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006a2:	3b01      	subs	r3, #1
  4006a4:	d1f9      	bne.n	40069a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4006a6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4006a8:	4770      	bx	lr
	return 0;
  4006aa:	2000      	movs	r0, #0
  4006ac:	4770      	bx	lr
  4006ae:	2000      	movs	r0, #0
  4006b0:	4770      	bx	lr
  4006b2:	bf00      	nop
  4006b4:	400e0400 	.word	0x400e0400

004006b8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4006b8:	b9c8      	cbnz	r0, 4006ee <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4006ba:	4a11      	ldr	r2, [pc, #68]	; (400700 <pmc_switch_mainck_to_xtal+0x48>)
  4006bc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4006be:	0209      	lsls	r1, r1, #8
  4006c0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4006c2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4006c6:	f023 0303 	bic.w	r3, r3, #3
  4006ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4006ce:	f043 0301 	orr.w	r3, r3, #1
  4006d2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4006d4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4006d6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006d8:	f013 0f01 	tst.w	r3, #1
  4006dc:	d0fb      	beq.n	4006d6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4006de:	4a08      	ldr	r2, [pc, #32]	; (400700 <pmc_switch_mainck_to_xtal+0x48>)
  4006e0:	6a13      	ldr	r3, [r2, #32]
  4006e2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4006e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4006ea:	6213      	str	r3, [r2, #32]
  4006ec:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4006ee:	4904      	ldr	r1, [pc, #16]	; (400700 <pmc_switch_mainck_to_xtal+0x48>)
  4006f0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4006f2:	4a04      	ldr	r2, [pc, #16]	; (400704 <pmc_switch_mainck_to_xtal+0x4c>)
  4006f4:	401a      	ands	r2, r3
  4006f6:	4b04      	ldr	r3, [pc, #16]	; (400708 <pmc_switch_mainck_to_xtal+0x50>)
  4006f8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4006fa:	620b      	str	r3, [r1, #32]
  4006fc:	4770      	bx	lr
  4006fe:	bf00      	nop
  400700:	400e0400 	.word	0x400e0400
  400704:	fec8fffc 	.word	0xfec8fffc
  400708:	01370002 	.word	0x01370002

0040070c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40070c:	4b02      	ldr	r3, [pc, #8]	; (400718 <pmc_osc_is_ready_mainck+0xc>)
  40070e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400710:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400714:	4770      	bx	lr
  400716:	bf00      	nop
  400718:	400e0400 	.word	0x400e0400

0040071c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40071c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400720:	4b01      	ldr	r3, [pc, #4]	; (400728 <pmc_disable_pllack+0xc>)
  400722:	629a      	str	r2, [r3, #40]	; 0x28
  400724:	4770      	bx	lr
  400726:	bf00      	nop
  400728:	400e0400 	.word	0x400e0400

0040072c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40072c:	4b02      	ldr	r3, [pc, #8]	; (400738 <pmc_is_locked_pllack+0xc>)
  40072e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400730:	f000 0002 	and.w	r0, r0, #2
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	400e0400 	.word	0x400e0400

0040073c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40073c:	2822      	cmp	r0, #34	; 0x22
  40073e:	d81e      	bhi.n	40077e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400740:	281f      	cmp	r0, #31
  400742:	d80c      	bhi.n	40075e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400744:	4b11      	ldr	r3, [pc, #68]	; (40078c <pmc_enable_periph_clk+0x50>)
  400746:	699a      	ldr	r2, [r3, #24]
  400748:	2301      	movs	r3, #1
  40074a:	4083      	lsls	r3, r0
  40074c:	4393      	bics	r3, r2
  40074e:	d018      	beq.n	400782 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400750:	2301      	movs	r3, #1
  400752:	fa03 f000 	lsl.w	r0, r3, r0
  400756:	4b0d      	ldr	r3, [pc, #52]	; (40078c <pmc_enable_periph_clk+0x50>)
  400758:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40075a:	2000      	movs	r0, #0
  40075c:	4770      	bx	lr
		ul_id -= 32;
  40075e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400760:	4b0a      	ldr	r3, [pc, #40]	; (40078c <pmc_enable_periph_clk+0x50>)
  400762:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400766:	2301      	movs	r3, #1
  400768:	4083      	lsls	r3, r0
  40076a:	4393      	bics	r3, r2
  40076c:	d00b      	beq.n	400786 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40076e:	2301      	movs	r3, #1
  400770:	fa03 f000 	lsl.w	r0, r3, r0
  400774:	4b05      	ldr	r3, [pc, #20]	; (40078c <pmc_enable_periph_clk+0x50>)
  400776:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40077a:	2000      	movs	r0, #0
  40077c:	4770      	bx	lr
		return 1;
  40077e:	2001      	movs	r0, #1
  400780:	4770      	bx	lr
	return 0;
  400782:	2000      	movs	r0, #0
  400784:	4770      	bx	lr
  400786:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400788:	4770      	bx	lr
  40078a:	bf00      	nop
  40078c:	400e0400 	.word	0x400e0400

00400790 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400790:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400792:	23ac      	movs	r3, #172	; 0xac
  400794:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400796:	680b      	ldr	r3, [r1, #0]
  400798:	684a      	ldr	r2, [r1, #4]
  40079a:	fbb3 f3f2 	udiv	r3, r3, r2
  40079e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4007a0:	1e5c      	subs	r4, r3, #1
  4007a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4007a6:	4294      	cmp	r4, r2
  4007a8:	d80b      	bhi.n	4007c2 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  4007aa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4007ac:	688b      	ldr	r3, [r1, #8]
  4007ae:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4007b0:	f240 2302 	movw	r3, #514	; 0x202
  4007b4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4007b8:	2350      	movs	r3, #80	; 0x50
  4007ba:	6003      	str	r3, [r0, #0]

	return 0;
  4007bc:	2000      	movs	r0, #0
}
  4007be:	bc10      	pop	{r4}
  4007c0:	4770      	bx	lr
		return 1;
  4007c2:	2001      	movs	r0, #1
  4007c4:	e7fb      	b.n	4007be <uart_init+0x2e>

004007c6 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  4007c6:	6081      	str	r1, [r0, #8]
  4007c8:	4770      	bx	lr

004007ca <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  4007ca:	6940      	ldr	r0, [r0, #20]
}
  4007cc:	4770      	bx	lr

004007ce <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4007ce:	6943      	ldr	r3, [r0, #20]
  4007d0:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4007d4:	bf1a      	itte	ne
  4007d6:	61c1      	strne	r1, [r0, #28]
	return 0;
  4007d8:	2000      	movne	r0, #0
		return 1;
  4007da:	2001      	moveq	r0, #1
}
  4007dc:	4770      	bx	lr

004007de <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4007de:	6943      	ldr	r3, [r0, #20]
  4007e0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4007e4:	bf1d      	ittte	ne
  4007e6:	6983      	ldrne	r3, [r0, #24]
  4007e8:	700b      	strbne	r3, [r1, #0]
	return 0;
  4007ea:	2000      	movne	r0, #0
		return 1;
  4007ec:	2001      	moveq	r0, #1
}
  4007ee:	4770      	bx	lr

004007f0 <uart_get_pdc_base>:
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
}
  4007f0:	4b03      	ldr	r3, [pc, #12]	; (400800 <uart_get_pdc_base+0x10>)
  4007f2:	4a04      	ldr	r2, [pc, #16]	; (400804 <uart_get_pdc_base+0x14>)
  4007f4:	4904      	ldr	r1, [pc, #16]	; (400808 <uart_get_pdc_base+0x18>)
  4007f6:	4288      	cmp	r0, r1
  4007f8:	bf14      	ite	ne
  4007fa:	4610      	movne	r0, r2
  4007fc:	4618      	moveq	r0, r3
  4007fe:	4770      	bx	lr
  400800:	400e0900 	.word	0x400e0900
  400804:	400e0700 	.word	0x400e0700
  400808:	400e0800 	.word	0x400e0800

0040080c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40080c:	6943      	ldr	r3, [r0, #20]
  40080e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400812:	bf1d      	ittte	ne
  400814:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400818:	61c1      	strne	r1, [r0, #28]
	return 0;
  40081a:	2000      	movne	r0, #0
		return 1;
  40081c:	2001      	moveq	r0, #1
}
  40081e:	4770      	bx	lr

00400820 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400820:	6943      	ldr	r3, [r0, #20]
  400822:	f013 0f01 	tst.w	r3, #1
  400826:	d005      	beq.n	400834 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400828:	6983      	ldr	r3, [r0, #24]
  40082a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40082e:	600b      	str	r3, [r1, #0]

	return 0;
  400830:	2000      	movs	r0, #0
  400832:	4770      	bx	lr
		return 1;
  400834:	2001      	movs	r0, #1
}
  400836:	4770      	bx	lr

00400838 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400838:	e7fe      	b.n	400838 <Dummy_Handler>
	...

0040083c <Reset_Handler>:
{
  40083c:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  40083e:	4b21      	ldr	r3, [pc, #132]	; (4008c4 <Reset_Handler+0x88>)
  400840:	4a21      	ldr	r2, [pc, #132]	; (4008c8 <Reset_Handler+0x8c>)
  400842:	429a      	cmp	r2, r3
  400844:	d928      	bls.n	400898 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  400846:	4b21      	ldr	r3, [pc, #132]	; (4008cc <Reset_Handler+0x90>)
  400848:	4a1e      	ldr	r2, [pc, #120]	; (4008c4 <Reset_Handler+0x88>)
  40084a:	429a      	cmp	r2, r3
  40084c:	d20c      	bcs.n	400868 <Reset_Handler+0x2c>
  40084e:	3b01      	subs	r3, #1
  400850:	1a9b      	subs	r3, r3, r2
  400852:	f023 0303 	bic.w	r3, r3, #3
  400856:	3304      	adds	r3, #4
  400858:	4413      	add	r3, r2
  40085a:	491b      	ldr	r1, [pc, #108]	; (4008c8 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  40085c:	f851 0b04 	ldr.w	r0, [r1], #4
  400860:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400864:	429a      	cmp	r2, r3
  400866:	d1f9      	bne.n	40085c <Reset_Handler+0x20>
	__NOP();
  400868:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40086a:	4b19      	ldr	r3, [pc, #100]	; (4008d0 <Reset_Handler+0x94>)
  40086c:	4a19      	ldr	r2, [pc, #100]	; (4008d4 <Reset_Handler+0x98>)
  40086e:	429a      	cmp	r2, r3
  400870:	d20a      	bcs.n	400888 <Reset_Handler+0x4c>
  400872:	3b01      	subs	r3, #1
  400874:	1a9b      	subs	r3, r3, r2
  400876:	f023 0303 	bic.w	r3, r3, #3
  40087a:	3304      	adds	r3, #4
  40087c:	4413      	add	r3, r2
		*pDest++ = 0;
  40087e:	2100      	movs	r1, #0
  400880:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400884:	429a      	cmp	r2, r3
  400886:	d1fb      	bne.n	400880 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  400888:	4b13      	ldr	r3, [pc, #76]	; (4008d8 <Reset_Handler+0x9c>)
  40088a:	4a14      	ldr	r2, [pc, #80]	; (4008dc <Reset_Handler+0xa0>)
  40088c:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  40088e:	4b14      	ldr	r3, [pc, #80]	; (4008e0 <Reset_Handler+0xa4>)
  400890:	4798      	blx	r3
	main();
  400892:	4b14      	ldr	r3, [pc, #80]	; (4008e4 <Reset_Handler+0xa8>)
  400894:	4798      	blx	r3
  400896:	e7fe      	b.n	400896 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  400898:	4b0a      	ldr	r3, [pc, #40]	; (4008c4 <Reset_Handler+0x88>)
  40089a:	4a0b      	ldr	r2, [pc, #44]	; (4008c8 <Reset_Handler+0x8c>)
  40089c:	429a      	cmp	r2, r3
  40089e:	d2e3      	bcs.n	400868 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4008a0:	4b0a      	ldr	r3, [pc, #40]	; (4008cc <Reset_Handler+0x90>)
  4008a2:	4808      	ldr	r0, [pc, #32]	; (4008c4 <Reset_Handler+0x88>)
  4008a4:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4008a6:	4611      	mov	r1, r2
  4008a8:	3a04      	subs	r2, #4
  4008aa:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  4008ac:	2800      	cmp	r0, #0
  4008ae:	d0db      	beq.n	400868 <Reset_Handler+0x2c>
  4008b0:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  4008b4:	f852 0904 	ldr.w	r0, [r2], #-4
  4008b8:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  4008bc:	42ca      	cmn	r2, r1
  4008be:	d1f9      	bne.n	4008b4 <Reset_Handler+0x78>
  4008c0:	e7d2      	b.n	400868 <Reset_Handler+0x2c>
  4008c2:	bf00      	nop
  4008c4:	20000000 	.word	0x20000000
  4008c8:	00402a5c 	.word	0x00402a5c
  4008cc:	20000844 	.word	0x20000844
  4008d0:	20000958 	.word	0x20000958
  4008d4:	20000844 	.word	0x20000844
  4008d8:	e000ed00 	.word	0xe000ed00
  4008dc:	00400000 	.word	0x00400000
  4008e0:	00400cf9 	.word	0x00400cf9
  4008e4:	00400c09 	.word	0x00400c09

004008e8 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4008e8:	4b3c      	ldr	r3, [pc, #240]	; (4009dc <SystemCoreClockUpdate+0xf4>)
  4008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008ec:	f003 0303 	and.w	r3, r3, #3
  4008f0:	2b03      	cmp	r3, #3
  4008f2:	d80e      	bhi.n	400912 <SystemCoreClockUpdate+0x2a>
  4008f4:	e8df f003 	tbb	[pc, r3]
  4008f8:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4008fc:	4b38      	ldr	r3, [pc, #224]	; (4009e0 <SystemCoreClockUpdate+0xf8>)
  4008fe:	695b      	ldr	r3, [r3, #20]
  400900:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400904:	bf14      	ite	ne
  400906:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40090a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40090e:	4b35      	ldr	r3, [pc, #212]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
  400910:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400912:	4b32      	ldr	r3, [pc, #200]	; (4009dc <SystemCoreClockUpdate+0xf4>)
  400914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400916:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40091a:	2b70      	cmp	r3, #112	; 0x70
  40091c:	d055      	beq.n	4009ca <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40091e:	4b2f      	ldr	r3, [pc, #188]	; (4009dc <SystemCoreClockUpdate+0xf4>)
  400920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  400922:	4930      	ldr	r1, [pc, #192]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400924:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400928:	680b      	ldr	r3, [r1, #0]
  40092a:	40d3      	lsrs	r3, r2
  40092c:	600b      	str	r3, [r1, #0]
  40092e:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400930:	4b2a      	ldr	r3, [pc, #168]	; (4009dc <SystemCoreClockUpdate+0xf4>)
  400932:	6a1b      	ldr	r3, [r3, #32]
  400934:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400938:	d003      	beq.n	400942 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40093a:	4a2b      	ldr	r2, [pc, #172]	; (4009e8 <SystemCoreClockUpdate+0x100>)
  40093c:	4b29      	ldr	r3, [pc, #164]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
  40093e:	601a      	str	r2, [r3, #0]
  400940:	e7e7      	b.n	400912 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400942:	4a2a      	ldr	r2, [pc, #168]	; (4009ec <SystemCoreClockUpdate+0x104>)
  400944:	4b27      	ldr	r3, [pc, #156]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
  400946:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400948:	4b24      	ldr	r3, [pc, #144]	; (4009dc <SystemCoreClockUpdate+0xf4>)
  40094a:	6a1b      	ldr	r3, [r3, #32]
  40094c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400950:	2b10      	cmp	r3, #16
  400952:	d005      	beq.n	400960 <SystemCoreClockUpdate+0x78>
  400954:	2b20      	cmp	r3, #32
  400956:	d1dc      	bne.n	400912 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400958:	4a23      	ldr	r2, [pc, #140]	; (4009e8 <SystemCoreClockUpdate+0x100>)
  40095a:	4b22      	ldr	r3, [pc, #136]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
  40095c:	601a      	str	r2, [r3, #0]
			break;
  40095e:	e7d8      	b.n	400912 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400960:	4a23      	ldr	r2, [pc, #140]	; (4009f0 <SystemCoreClockUpdate+0x108>)
  400962:	4b20      	ldr	r3, [pc, #128]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
  400964:	601a      	str	r2, [r3, #0]
			break;
  400966:	e7d4      	b.n	400912 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400968:	4b1c      	ldr	r3, [pc, #112]	; (4009dc <SystemCoreClockUpdate+0xf4>)
  40096a:	6a1b      	ldr	r3, [r3, #32]
  40096c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400970:	d018      	beq.n	4009a4 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400972:	4a1d      	ldr	r2, [pc, #116]	; (4009e8 <SystemCoreClockUpdate+0x100>)
  400974:	4b1b      	ldr	r3, [pc, #108]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
  400976:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400978:	4b18      	ldr	r3, [pc, #96]	; (4009dc <SystemCoreClockUpdate+0xf4>)
  40097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40097c:	f003 0303 	and.w	r3, r3, #3
  400980:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400982:	4a16      	ldr	r2, [pc, #88]	; (4009dc <SystemCoreClockUpdate+0xf4>)
  400984:	bf07      	ittee	eq
  400986:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400988:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40098a:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40098c:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  40098e:	4815      	ldr	r0, [pc, #84]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400990:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400994:	6803      	ldr	r3, [r0, #0]
  400996:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  40099a:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40099c:	fbb3 f3f2 	udiv	r3, r3, r2
  4009a0:	6003      	str	r3, [r0, #0]
  4009a2:	e7b6      	b.n	400912 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009a4:	4a11      	ldr	r2, [pc, #68]	; (4009ec <SystemCoreClockUpdate+0x104>)
  4009a6:	4b0f      	ldr	r3, [pc, #60]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
  4009a8:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4009aa:	4b0c      	ldr	r3, [pc, #48]	; (4009dc <SystemCoreClockUpdate+0xf4>)
  4009ac:	6a1b      	ldr	r3, [r3, #32]
  4009ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009b2:	2b10      	cmp	r3, #16
  4009b4:	d005      	beq.n	4009c2 <SystemCoreClockUpdate+0xda>
  4009b6:	2b20      	cmp	r3, #32
  4009b8:	d1de      	bne.n	400978 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4009ba:	4a0b      	ldr	r2, [pc, #44]	; (4009e8 <SystemCoreClockUpdate+0x100>)
  4009bc:	4b09      	ldr	r3, [pc, #36]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
  4009be:	601a      	str	r2, [r3, #0]
					break;
  4009c0:	e7da      	b.n	400978 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4009c2:	4a0b      	ldr	r2, [pc, #44]	; (4009f0 <SystemCoreClockUpdate+0x108>)
  4009c4:	4b07      	ldr	r3, [pc, #28]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
  4009c6:	601a      	str	r2, [r3, #0]
					break;
  4009c8:	e7d6      	b.n	400978 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4009ca:	4a06      	ldr	r2, [pc, #24]	; (4009e4 <SystemCoreClockUpdate+0xfc>)
  4009cc:	6813      	ldr	r3, [r2, #0]
  4009ce:	4909      	ldr	r1, [pc, #36]	; (4009f4 <SystemCoreClockUpdate+0x10c>)
  4009d0:	fba1 1303 	umull	r1, r3, r1, r3
  4009d4:	085b      	lsrs	r3, r3, #1
  4009d6:	6013      	str	r3, [r2, #0]
  4009d8:	4770      	bx	lr
  4009da:	bf00      	nop
  4009dc:	400e0400 	.word	0x400e0400
  4009e0:	400e1410 	.word	0x400e1410
  4009e4:	20000000 	.word	0x20000000
  4009e8:	00b71b00 	.word	0x00b71b00
  4009ec:	003d0900 	.word	0x003d0900
  4009f0:	007a1200 	.word	0x007a1200
  4009f4:	aaaaaaab 	.word	0xaaaaaaab

004009f8 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4009f8:	4b12      	ldr	r3, [pc, #72]	; (400a44 <system_init_flash+0x4c>)
  4009fa:	4298      	cmp	r0, r3
  4009fc:	d911      	bls.n	400a22 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4009fe:	4b12      	ldr	r3, [pc, #72]	; (400a48 <system_init_flash+0x50>)
  400a00:	4298      	cmp	r0, r3
  400a02:	d913      	bls.n	400a2c <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400a04:	4b11      	ldr	r3, [pc, #68]	; (400a4c <system_init_flash+0x54>)
  400a06:	4298      	cmp	r0, r3
  400a08:	d914      	bls.n	400a34 <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400a0a:	4b11      	ldr	r3, [pc, #68]	; (400a50 <system_init_flash+0x58>)
  400a0c:	4298      	cmp	r0, r3
  400a0e:	d915      	bls.n	400a3c <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400a10:	4b10      	ldr	r3, [pc, #64]	; (400a54 <system_init_flash+0x5c>)
  400a12:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a14:	bf94      	ite	ls
  400a16:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a1a:	4a0f      	ldrhi	r2, [pc, #60]	; (400a58 <system_init_flash+0x60>)
  400a1c:	4b0f      	ldr	r3, [pc, #60]	; (400a5c <system_init_flash+0x64>)
  400a1e:	601a      	str	r2, [r3, #0]
  400a20:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a26:	4b0d      	ldr	r3, [pc, #52]	; (400a5c <system_init_flash+0x64>)
  400a28:	601a      	str	r2, [r3, #0]
  400a2a:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a2c:	4a0c      	ldr	r2, [pc, #48]	; (400a60 <system_init_flash+0x68>)
  400a2e:	4b0b      	ldr	r3, [pc, #44]	; (400a5c <system_init_flash+0x64>)
  400a30:	601a      	str	r2, [r3, #0]
  400a32:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a34:	4a0b      	ldr	r2, [pc, #44]	; (400a64 <system_init_flash+0x6c>)
  400a36:	4b09      	ldr	r3, [pc, #36]	; (400a5c <system_init_flash+0x64>)
  400a38:	601a      	str	r2, [r3, #0]
  400a3a:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a3c:	4a0a      	ldr	r2, [pc, #40]	; (400a68 <system_init_flash+0x70>)
  400a3e:	4b07      	ldr	r3, [pc, #28]	; (400a5c <system_init_flash+0x64>)
  400a40:	601a      	str	r2, [r3, #0]
  400a42:	4770      	bx	lr
  400a44:	01312cff 	.word	0x01312cff
  400a48:	026259ff 	.word	0x026259ff
  400a4c:	039386ff 	.word	0x039386ff
  400a50:	04c4b3ff 	.word	0x04c4b3ff
  400a54:	05f5e0ff 	.word	0x05f5e0ff
  400a58:	04000500 	.word	0x04000500
  400a5c:	400e0a00 	.word	0x400e0a00
  400a60:	04000100 	.word	0x04000100
  400a64:	04000200 	.word	0x04000200
  400a68:	04000300 	.word	0x04000300

00400a6c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400a6c:	4b0a      	ldr	r3, [pc, #40]	; (400a98 <_sbrk+0x2c>)
  400a6e:	681b      	ldr	r3, [r3, #0]
  400a70:	b153      	cbz	r3, 400a88 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400a72:	4b09      	ldr	r3, [pc, #36]	; (400a98 <_sbrk+0x2c>)
  400a74:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400a76:	181a      	adds	r2, r3, r0
  400a78:	4908      	ldr	r1, [pc, #32]	; (400a9c <_sbrk+0x30>)
  400a7a:	4291      	cmp	r1, r2
  400a7c:	db08      	blt.n	400a90 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400a7e:	4610      	mov	r0, r2
  400a80:	4a05      	ldr	r2, [pc, #20]	; (400a98 <_sbrk+0x2c>)
  400a82:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400a84:	4618      	mov	r0, r3
  400a86:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400a88:	4a05      	ldr	r2, [pc, #20]	; (400aa0 <_sbrk+0x34>)
  400a8a:	4b03      	ldr	r3, [pc, #12]	; (400a98 <_sbrk+0x2c>)
  400a8c:	601a      	str	r2, [r3, #0]
  400a8e:	e7f0      	b.n	400a72 <_sbrk+0x6>
		return (caddr_t) -1;	
  400a90:	f04f 30ff 	mov.w	r0, #4294967295
}
  400a94:	4770      	bx	lr
  400a96:	bf00      	nop
  400a98:	200008d4 	.word	0x200008d4
  400a9c:	2001fffc 	.word	0x2001fffc
  400aa0:	20003958 	.word	0x20003958

00400aa4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400aa4:	f04f 30ff 	mov.w	r0, #4294967295
  400aa8:	4770      	bx	lr

00400aaa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400aaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400aae:	604b      	str	r3, [r1, #4]

	return 0;
}
  400ab0:	2000      	movs	r0, #0
  400ab2:	4770      	bx	lr

00400ab4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400ab4:	2001      	movs	r0, #1
  400ab6:	4770      	bx	lr

00400ab8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400ab8:	2000      	movs	r0, #0
  400aba:	4770      	bx	lr

00400abc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400abc:	b5f0      	push	{r4, r5, r6, r7, lr}
  400abe:	b083      	sub	sp, #12
  400ac0:	4605      	mov	r5, r0
  400ac2:	460c      	mov	r4, r1
	uint32_t val = 0;
  400ac4:	2300      	movs	r3, #0
  400ac6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400ac8:	4b18      	ldr	r3, [pc, #96]	; (400b2c <usart_serial_getchar+0x70>)
  400aca:	4298      	cmp	r0, r3
  400acc:	d00a      	beq.n	400ae4 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400ace:	4b18      	ldr	r3, [pc, #96]	; (400b30 <usart_serial_getchar+0x74>)
  400ad0:	4298      	cmp	r0, r3
  400ad2:	d00f      	beq.n	400af4 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400ad4:	4b17      	ldr	r3, [pc, #92]	; (400b34 <usart_serial_getchar+0x78>)
  400ad6:	4298      	cmp	r0, r3
  400ad8:	d014      	beq.n	400b04 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400ada:	4b17      	ldr	r3, [pc, #92]	; (400b38 <usart_serial_getchar+0x7c>)
  400adc:	429d      	cmp	r5, r3
  400ade:	d01b      	beq.n	400b18 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400ae0:	b003      	add	sp, #12
  400ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400ae4:	461f      	mov	r7, r3
  400ae6:	4e15      	ldr	r6, [pc, #84]	; (400b3c <usart_serial_getchar+0x80>)
  400ae8:	4621      	mov	r1, r4
  400aea:	4638      	mov	r0, r7
  400aec:	47b0      	blx	r6
  400aee:	2800      	cmp	r0, #0
  400af0:	d1fa      	bne.n	400ae8 <usart_serial_getchar+0x2c>
  400af2:	e7f2      	b.n	400ada <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400af4:	461e      	mov	r6, r3
  400af6:	4d11      	ldr	r5, [pc, #68]	; (400b3c <usart_serial_getchar+0x80>)
  400af8:	4621      	mov	r1, r4
  400afa:	4630      	mov	r0, r6
  400afc:	47a8      	blx	r5
  400afe:	2800      	cmp	r0, #0
  400b00:	d1fa      	bne.n	400af8 <usart_serial_getchar+0x3c>
  400b02:	e7ed      	b.n	400ae0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400b04:	461e      	mov	r6, r3
  400b06:	4d0e      	ldr	r5, [pc, #56]	; (400b40 <usart_serial_getchar+0x84>)
  400b08:	a901      	add	r1, sp, #4
  400b0a:	4630      	mov	r0, r6
  400b0c:	47a8      	blx	r5
  400b0e:	2800      	cmp	r0, #0
  400b10:	d1fa      	bne.n	400b08 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400b12:	9b01      	ldr	r3, [sp, #4]
  400b14:	7023      	strb	r3, [r4, #0]
  400b16:	e7e3      	b.n	400ae0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400b18:	461e      	mov	r6, r3
  400b1a:	4d09      	ldr	r5, [pc, #36]	; (400b40 <usart_serial_getchar+0x84>)
  400b1c:	a901      	add	r1, sp, #4
  400b1e:	4630      	mov	r0, r6
  400b20:	47a8      	blx	r5
  400b22:	2800      	cmp	r0, #0
  400b24:	d1fa      	bne.n	400b1c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400b26:	9b01      	ldr	r3, [sp, #4]
  400b28:	7023      	strb	r3, [r4, #0]
}
  400b2a:	e7d9      	b.n	400ae0 <usart_serial_getchar+0x24>
  400b2c:	400e0600 	.word	0x400e0600
  400b30:	400e0800 	.word	0x400e0800
  400b34:	40024000 	.word	0x40024000
  400b38:	40028000 	.word	0x40028000
  400b3c:	004007df 	.word	0x004007df
  400b40:	00400821 	.word	0x00400821

00400b44 <usart_serial_putchar>:
{
  400b44:	b570      	push	{r4, r5, r6, lr}
  400b46:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400b48:	4b18      	ldr	r3, [pc, #96]	; (400bac <usart_serial_putchar+0x68>)
  400b4a:	4298      	cmp	r0, r3
  400b4c:	d00a      	beq.n	400b64 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400b4e:	4b18      	ldr	r3, [pc, #96]	; (400bb0 <usart_serial_putchar+0x6c>)
  400b50:	4298      	cmp	r0, r3
  400b52:	d010      	beq.n	400b76 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400b54:	4b17      	ldr	r3, [pc, #92]	; (400bb4 <usart_serial_putchar+0x70>)
  400b56:	4298      	cmp	r0, r3
  400b58:	d016      	beq.n	400b88 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400b5a:	4b17      	ldr	r3, [pc, #92]	; (400bb8 <usart_serial_putchar+0x74>)
  400b5c:	4298      	cmp	r0, r3
  400b5e:	d01c      	beq.n	400b9a <usart_serial_putchar+0x56>
	return 0;
  400b60:	2000      	movs	r0, #0
}
  400b62:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400b64:	461e      	mov	r6, r3
  400b66:	4d15      	ldr	r5, [pc, #84]	; (400bbc <usart_serial_putchar+0x78>)
  400b68:	4621      	mov	r1, r4
  400b6a:	4630      	mov	r0, r6
  400b6c:	47a8      	blx	r5
  400b6e:	2800      	cmp	r0, #0
  400b70:	d1fa      	bne.n	400b68 <usart_serial_putchar+0x24>
		return 1;
  400b72:	2001      	movs	r0, #1
  400b74:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400b76:	461e      	mov	r6, r3
  400b78:	4d10      	ldr	r5, [pc, #64]	; (400bbc <usart_serial_putchar+0x78>)
  400b7a:	4621      	mov	r1, r4
  400b7c:	4630      	mov	r0, r6
  400b7e:	47a8      	blx	r5
  400b80:	2800      	cmp	r0, #0
  400b82:	d1fa      	bne.n	400b7a <usart_serial_putchar+0x36>
		return 1;
  400b84:	2001      	movs	r0, #1
  400b86:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400b88:	461e      	mov	r6, r3
  400b8a:	4d0d      	ldr	r5, [pc, #52]	; (400bc0 <usart_serial_putchar+0x7c>)
  400b8c:	4621      	mov	r1, r4
  400b8e:	4630      	mov	r0, r6
  400b90:	47a8      	blx	r5
  400b92:	2800      	cmp	r0, #0
  400b94:	d1fa      	bne.n	400b8c <usart_serial_putchar+0x48>
		return 1;
  400b96:	2001      	movs	r0, #1
  400b98:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400b9a:	461e      	mov	r6, r3
  400b9c:	4d08      	ldr	r5, [pc, #32]	; (400bc0 <usart_serial_putchar+0x7c>)
  400b9e:	4621      	mov	r1, r4
  400ba0:	4630      	mov	r0, r6
  400ba2:	47a8      	blx	r5
  400ba4:	2800      	cmp	r0, #0
  400ba6:	d1fa      	bne.n	400b9e <usart_serial_putchar+0x5a>
		return 1;
  400ba8:	2001      	movs	r0, #1
  400baa:	bd70      	pop	{r4, r5, r6, pc}
  400bac:	400e0600 	.word	0x400e0600
  400bb0:	400e0800 	.word	0x400e0800
  400bb4:	40024000 	.word	0x40024000
  400bb8:	40028000 	.word	0x40028000
  400bbc:	004007cf 	.word	0x004007cf
  400bc0:	0040080d 	.word	0x0040080d

00400bc4 <UART0_Handler>:
 * \brief Interrupt handler for UART interrupt.
 */

//! [int_handler]
void console_uart_irq_handler(void)
{
  400bc4:	b538      	push	{r3, r4, r5, lr}
	/* Get UART status and check if PDC receive buffer is full */
	if ((uart_get_status(CONSOLE_UART) & UART_SR_RXBUFF) == UART_SR_RXBUFF) {
  400bc6:	480a      	ldr	r0, [pc, #40]	; (400bf0 <UART0_Handler+0x2c>)
  400bc8:	4b0a      	ldr	r3, [pc, #40]	; (400bf4 <UART0_Handler+0x30>)
  400bca:	4798      	blx	r3
  400bcc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
  400bd0:	d100      	bne.n	400bd4 <UART0_Handler+0x10>
  400bd2:	bd38      	pop	{r3, r4, r5, pc}
		/* Configure PDC for data transfer (RX and TX) */
		pdc_rx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);
  400bd4:	4d08      	ldr	r5, [pc, #32]	; (400bf8 <UART0_Handler+0x34>)
  400bd6:	4c09      	ldr	r4, [pc, #36]	; (400bfc <UART0_Handler+0x38>)
  400bd8:	2200      	movs	r2, #0
  400bda:	4629      	mov	r1, r5
  400bdc:	6820      	ldr	r0, [r4, #0]
  400bde:	4b08      	ldr	r3, [pc, #32]	; (400c00 <UART0_Handler+0x3c>)
  400be0:	4798      	blx	r3
		pdc_tx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);
  400be2:	2200      	movs	r2, #0
  400be4:	4629      	mov	r1, r5
  400be6:	6820      	ldr	r0, [r4, #0]
  400be8:	4b06      	ldr	r3, [pc, #24]	; (400c04 <UART0_Handler+0x40>)
  400bea:	4798      	blx	r3
	}
}
  400bec:	e7f1      	b.n	400bd2 <UART0_Handler+0xe>
  400bee:	bf00      	nop
  400bf0:	400e0600 	.word	0x400e0600
  400bf4:	004007cb 	.word	0x004007cb
  400bf8:	20000928 	.word	0x20000928
  400bfc:	20000924 	.word	0x20000924
  400c00:	004002a5 	.word	0x004002a5
  400c04:	0040028d 	.word	0x0040028d

00400c08 <main>:
 * \brief Application entry point for pdc_uart example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400c08:	b500      	push	{lr}
  400c0a:	b085      	sub	sp, #20
	/* Initialize the SAM system */

	//! [board_setup]
	sysclk_init();
  400c0c:	4b23      	ldr	r3, [pc, #140]	; (400c9c <main+0x94>)
  400c0e:	4798      	blx	r3
	board_init();
  400c10:	4b23      	ldr	r3, [pc, #140]	; (400ca0 <main+0x98>)
  400c12:	4798      	blx	r3
  400c14:	2008      	movs	r0, #8
  400c16:	4d23      	ldr	r5, [pc, #140]	; (400ca4 <main+0x9c>)
  400c18:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400c1a:	4c23      	ldr	r4, [pc, #140]	; (400ca8 <main+0xa0>)
  400c1c:	4b23      	ldr	r3, [pc, #140]	; (400cac <main+0xa4>)
  400c1e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400c20:	4a23      	ldr	r2, [pc, #140]	; (400cb0 <main+0xa8>)
  400c22:	4b24      	ldr	r3, [pc, #144]	; (400cb4 <main+0xac>)
  400c24:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400c26:	4a24      	ldr	r2, [pc, #144]	; (400cb8 <main+0xb0>)
  400c28:	4b24      	ldr	r3, [pc, #144]	; (400cbc <main+0xb4>)
  400c2a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400c2c:	4b24      	ldr	r3, [pc, #144]	; (400cc0 <main+0xb8>)
  400c2e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400c30:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400c34:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400c36:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400c3a:	9303      	str	r3, [sp, #12]
  400c3c:	2008      	movs	r0, #8
  400c3e:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  400c40:	a901      	add	r1, sp, #4
  400c42:	4620      	mov	r0, r4
  400c44:	4b1f      	ldr	r3, [pc, #124]	; (400cc4 <main+0xbc>)
  400c46:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400c48:	4e1f      	ldr	r6, [pc, #124]	; (400cc8 <main+0xc0>)
  400c4a:	6833      	ldr	r3, [r6, #0]
  400c4c:	2100      	movs	r1, #0
  400c4e:	6898      	ldr	r0, [r3, #8]
  400c50:	4d1e      	ldr	r5, [pc, #120]	; (400ccc <main+0xc4>)
  400c52:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400c54:	6833      	ldr	r3, [r6, #0]
  400c56:	2100      	movs	r1, #0
  400c58:	6858      	ldr	r0, [r3, #4]
  400c5a:	47a8      	blx	r5

	/* Initialize the UART console */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
  400c5c:	481c      	ldr	r0, [pc, #112]	; (400cd0 <main+0xc8>)
  400c5e:	4b1d      	ldr	r3, [pc, #116]	; (400cd4 <main+0xcc>)
  400c60:	4798      	blx	r3

	//! [pdc_config]
	/* Get pointer to UART PDC register base */
	g_p_uart_pdc = uart_get_pdc_base(CONSOLE_UART);
  400c62:	4620      	mov	r0, r4
  400c64:	4b1c      	ldr	r3, [pc, #112]	; (400cd8 <main+0xd0>)
  400c66:	4798      	blx	r3
  400c68:	4d1c      	ldr	r5, [pc, #112]	; (400cdc <main+0xd4>)
  400c6a:	6028      	str	r0, [r5, #0]

	/* Initialize PDC data packet for transfer */
	g_pdc_uart_packet.ul_addr = (uint32_t) g_uc_pdc_buffer;
  400c6c:	491c      	ldr	r1, [pc, #112]	; (400ce0 <main+0xd8>)
  400c6e:	4b1d      	ldr	r3, [pc, #116]	; (400ce4 <main+0xdc>)
  400c70:	600b      	str	r3, [r1, #0]
	g_pdc_uart_packet.ul_size = BUFFER_SIZE;
  400c72:	2305      	movs	r3, #5
  400c74:	604b      	str	r3, [r1, #4]

	/* Configure PDC for data receive */
	pdc_rx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);
  400c76:	2200      	movs	r2, #0
  400c78:	4b1b      	ldr	r3, [pc, #108]	; (400ce8 <main+0xe0>)
  400c7a:	4798      	blx	r3

	/* Enable PDC transfers */
	pdc_enable_transfer(g_p_uart_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400c7c:	f240 1101 	movw	r1, #257	; 0x101
  400c80:	6828      	ldr	r0, [r5, #0]
  400c82:	4b1a      	ldr	r3, [pc, #104]	; (400cec <main+0xe4>)
  400c84:	4798      	blx	r3
	//! [pdc_config]

	/* Enable UART IRQ */
	//! [uart_irq]
	uart_enable_interrupt(CONSOLE_UART, UART_IER_RXBUFF);
  400c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400c8a:	4620      	mov	r0, r4
  400c8c:	4b18      	ldr	r3, [pc, #96]	; (400cf0 <main+0xe8>)
  400c8e:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c90:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c94:	4b17      	ldr	r3, [pc, #92]	; (400cf4 <main+0xec>)
  400c96:	601a      	str	r2, [r3, #0]
  400c98:	e7fe      	b.n	400c98 <main+0x90>
  400c9a:	bf00      	nop
  400c9c:	00400139 	.word	0x00400139
  400ca0:	00400229 	.word	0x00400229
  400ca4:	0040073d 	.word	0x0040073d
  400ca8:	400e0600 	.word	0x400e0600
  400cac:	20000914 	.word	0x20000914
  400cb0:	00400b45 	.word	0x00400b45
  400cb4:	20000910 	.word	0x20000910
  400cb8:	00400abd 	.word	0x00400abd
  400cbc:	2000090c 	.word	0x2000090c
  400cc0:	07270e00 	.word	0x07270e00
  400cc4:	00400791 	.word	0x00400791
  400cc8:	20000004 	.word	0x20000004
  400ccc:	00400e91 	.word	0x00400e91
  400cd0:	004029e0 	.word	0x004029e0
  400cd4:	00400e81 	.word	0x00400e81
  400cd8:	004007f1 	.word	0x004007f1
  400cdc:	20000924 	.word	0x20000924
  400ce0:	20000928 	.word	0x20000928
  400ce4:	2000091c 	.word	0x2000091c
  400ce8:	004002a5 	.word	0x004002a5
  400cec:	004002bd 	.word	0x004002bd
  400cf0:	004007c7 	.word	0x004007c7
  400cf4:	e000e100 	.word	0xe000e100

00400cf8 <__libc_init_array>:
  400cf8:	b570      	push	{r4, r5, r6, lr}
  400cfa:	4e0f      	ldr	r6, [pc, #60]	; (400d38 <__libc_init_array+0x40>)
  400cfc:	4d0f      	ldr	r5, [pc, #60]	; (400d3c <__libc_init_array+0x44>)
  400cfe:	1b76      	subs	r6, r6, r5
  400d00:	10b6      	asrs	r6, r6, #2
  400d02:	bf18      	it	ne
  400d04:	2400      	movne	r4, #0
  400d06:	d005      	beq.n	400d14 <__libc_init_array+0x1c>
  400d08:	3401      	adds	r4, #1
  400d0a:	f855 3b04 	ldr.w	r3, [r5], #4
  400d0e:	4798      	blx	r3
  400d10:	42a6      	cmp	r6, r4
  400d12:	d1f9      	bne.n	400d08 <__libc_init_array+0x10>
  400d14:	4e0a      	ldr	r6, [pc, #40]	; (400d40 <__libc_init_array+0x48>)
  400d16:	4d0b      	ldr	r5, [pc, #44]	; (400d44 <__libc_init_array+0x4c>)
  400d18:	1b76      	subs	r6, r6, r5
  400d1a:	f001 fe8d 	bl	402a38 <_init>
  400d1e:	10b6      	asrs	r6, r6, #2
  400d20:	bf18      	it	ne
  400d22:	2400      	movne	r4, #0
  400d24:	d006      	beq.n	400d34 <__libc_init_array+0x3c>
  400d26:	3401      	adds	r4, #1
  400d28:	f855 3b04 	ldr.w	r3, [r5], #4
  400d2c:	4798      	blx	r3
  400d2e:	42a6      	cmp	r6, r4
  400d30:	d1f9      	bne.n	400d26 <__libc_init_array+0x2e>
  400d32:	bd70      	pop	{r4, r5, r6, pc}
  400d34:	bd70      	pop	{r4, r5, r6, pc}
  400d36:	bf00      	nop
  400d38:	00402a44 	.word	0x00402a44
  400d3c:	00402a44 	.word	0x00402a44
  400d40:	00402a4c 	.word	0x00402a4c
  400d44:	00402a44 	.word	0x00402a44

00400d48 <memset>:
  400d48:	b470      	push	{r4, r5, r6}
  400d4a:	0786      	lsls	r6, r0, #30
  400d4c:	d046      	beq.n	400ddc <memset+0x94>
  400d4e:	1e54      	subs	r4, r2, #1
  400d50:	2a00      	cmp	r2, #0
  400d52:	d041      	beq.n	400dd8 <memset+0x90>
  400d54:	b2ca      	uxtb	r2, r1
  400d56:	4603      	mov	r3, r0
  400d58:	e002      	b.n	400d60 <memset+0x18>
  400d5a:	f114 34ff 	adds.w	r4, r4, #4294967295
  400d5e:	d33b      	bcc.n	400dd8 <memset+0x90>
  400d60:	f803 2b01 	strb.w	r2, [r3], #1
  400d64:	079d      	lsls	r5, r3, #30
  400d66:	d1f8      	bne.n	400d5a <memset+0x12>
  400d68:	2c03      	cmp	r4, #3
  400d6a:	d92e      	bls.n	400dca <memset+0x82>
  400d6c:	b2cd      	uxtb	r5, r1
  400d6e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400d72:	2c0f      	cmp	r4, #15
  400d74:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400d78:	d919      	bls.n	400dae <memset+0x66>
  400d7a:	f103 0210 	add.w	r2, r3, #16
  400d7e:	4626      	mov	r6, r4
  400d80:	3e10      	subs	r6, #16
  400d82:	2e0f      	cmp	r6, #15
  400d84:	f842 5c10 	str.w	r5, [r2, #-16]
  400d88:	f842 5c0c 	str.w	r5, [r2, #-12]
  400d8c:	f842 5c08 	str.w	r5, [r2, #-8]
  400d90:	f842 5c04 	str.w	r5, [r2, #-4]
  400d94:	f102 0210 	add.w	r2, r2, #16
  400d98:	d8f2      	bhi.n	400d80 <memset+0x38>
  400d9a:	f1a4 0210 	sub.w	r2, r4, #16
  400d9e:	f022 020f 	bic.w	r2, r2, #15
  400da2:	f004 040f 	and.w	r4, r4, #15
  400da6:	3210      	adds	r2, #16
  400da8:	2c03      	cmp	r4, #3
  400daa:	4413      	add	r3, r2
  400dac:	d90d      	bls.n	400dca <memset+0x82>
  400dae:	461e      	mov	r6, r3
  400db0:	4622      	mov	r2, r4
  400db2:	3a04      	subs	r2, #4
  400db4:	2a03      	cmp	r2, #3
  400db6:	f846 5b04 	str.w	r5, [r6], #4
  400dba:	d8fa      	bhi.n	400db2 <memset+0x6a>
  400dbc:	1f22      	subs	r2, r4, #4
  400dbe:	f022 0203 	bic.w	r2, r2, #3
  400dc2:	3204      	adds	r2, #4
  400dc4:	4413      	add	r3, r2
  400dc6:	f004 0403 	and.w	r4, r4, #3
  400dca:	b12c      	cbz	r4, 400dd8 <memset+0x90>
  400dcc:	b2c9      	uxtb	r1, r1
  400dce:	441c      	add	r4, r3
  400dd0:	f803 1b01 	strb.w	r1, [r3], #1
  400dd4:	429c      	cmp	r4, r3
  400dd6:	d1fb      	bne.n	400dd0 <memset+0x88>
  400dd8:	bc70      	pop	{r4, r5, r6}
  400dda:	4770      	bx	lr
  400ddc:	4614      	mov	r4, r2
  400dde:	4603      	mov	r3, r0
  400de0:	e7c2      	b.n	400d68 <memset+0x20>
  400de2:	bf00      	nop

00400de4 <_puts_r>:
  400de4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400de6:	4605      	mov	r5, r0
  400de8:	b089      	sub	sp, #36	; 0x24
  400dea:	4608      	mov	r0, r1
  400dec:	460c      	mov	r4, r1
  400dee:	f000 f927 	bl	401040 <strlen>
  400df2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400df4:	4f21      	ldr	r7, [pc, #132]	; (400e7c <_puts_r+0x98>)
  400df6:	9404      	str	r4, [sp, #16]
  400df8:	2601      	movs	r6, #1
  400dfa:	1c44      	adds	r4, r0, #1
  400dfc:	a904      	add	r1, sp, #16
  400dfe:	2202      	movs	r2, #2
  400e00:	9403      	str	r4, [sp, #12]
  400e02:	9005      	str	r0, [sp, #20]
  400e04:	68ac      	ldr	r4, [r5, #8]
  400e06:	9706      	str	r7, [sp, #24]
  400e08:	9607      	str	r6, [sp, #28]
  400e0a:	9101      	str	r1, [sp, #4]
  400e0c:	9202      	str	r2, [sp, #8]
  400e0e:	b353      	cbz	r3, 400e66 <_puts_r+0x82>
  400e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400e12:	f013 0f01 	tst.w	r3, #1
  400e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400e1a:	b29a      	uxth	r2, r3
  400e1c:	d101      	bne.n	400e22 <_puts_r+0x3e>
  400e1e:	0590      	lsls	r0, r2, #22
  400e20:	d525      	bpl.n	400e6e <_puts_r+0x8a>
  400e22:	0491      	lsls	r1, r2, #18
  400e24:	d406      	bmi.n	400e34 <_puts_r+0x50>
  400e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
  400e28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400e30:	81a3      	strh	r3, [r4, #12]
  400e32:	6662      	str	r2, [r4, #100]	; 0x64
  400e34:	4628      	mov	r0, r5
  400e36:	aa01      	add	r2, sp, #4
  400e38:	4621      	mov	r1, r4
  400e3a:	f000 fbff 	bl	40163c <__sfvwrite_r>
  400e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400e40:	2800      	cmp	r0, #0
  400e42:	bf0c      	ite	eq
  400e44:	250a      	moveq	r5, #10
  400e46:	f04f 35ff 	movne.w	r5, #4294967295
  400e4a:	07da      	lsls	r2, r3, #31
  400e4c:	d402      	bmi.n	400e54 <_puts_r+0x70>
  400e4e:	89a3      	ldrh	r3, [r4, #12]
  400e50:	059b      	lsls	r3, r3, #22
  400e52:	d502      	bpl.n	400e5a <_puts_r+0x76>
  400e54:	4628      	mov	r0, r5
  400e56:	b009      	add	sp, #36	; 0x24
  400e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400e5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400e5c:	f000 fd96 	bl	40198c <__retarget_lock_release_recursive>
  400e60:	4628      	mov	r0, r5
  400e62:	b009      	add	sp, #36	; 0x24
  400e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400e66:	4628      	mov	r0, r5
  400e68:	f000 fa60 	bl	40132c <__sinit>
  400e6c:	e7d0      	b.n	400e10 <_puts_r+0x2c>
  400e6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400e70:	f000 fd8a 	bl	401988 <__retarget_lock_acquire_recursive>
  400e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400e78:	b29a      	uxth	r2, r3
  400e7a:	e7d2      	b.n	400e22 <_puts_r+0x3e>
  400e7c:	00402a34 	.word	0x00402a34

00400e80 <puts>:
  400e80:	4b02      	ldr	r3, [pc, #8]	; (400e8c <puts+0xc>)
  400e82:	4601      	mov	r1, r0
  400e84:	6818      	ldr	r0, [r3, #0]
  400e86:	f7ff bfad 	b.w	400de4 <_puts_r>
  400e8a:	bf00      	nop
  400e8c:	20000004 	.word	0x20000004

00400e90 <setbuf>:
  400e90:	2900      	cmp	r1, #0
  400e92:	bf0c      	ite	eq
  400e94:	2202      	moveq	r2, #2
  400e96:	2200      	movne	r2, #0
  400e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400e9c:	f000 b800 	b.w	400ea0 <setvbuf>

00400ea0 <setvbuf>:
  400ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400ea4:	4c61      	ldr	r4, [pc, #388]	; (40102c <setvbuf+0x18c>)
  400ea6:	6825      	ldr	r5, [r4, #0]
  400ea8:	b083      	sub	sp, #12
  400eaa:	4604      	mov	r4, r0
  400eac:	460f      	mov	r7, r1
  400eae:	4690      	mov	r8, r2
  400eb0:	461e      	mov	r6, r3
  400eb2:	b115      	cbz	r5, 400eba <setvbuf+0x1a>
  400eb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400eb6:	2b00      	cmp	r3, #0
  400eb8:	d064      	beq.n	400f84 <setvbuf+0xe4>
  400eba:	f1b8 0f02 	cmp.w	r8, #2
  400ebe:	d006      	beq.n	400ece <setvbuf+0x2e>
  400ec0:	f1b8 0f01 	cmp.w	r8, #1
  400ec4:	f200 809f 	bhi.w	401006 <setvbuf+0x166>
  400ec8:	2e00      	cmp	r6, #0
  400eca:	f2c0 809c 	blt.w	401006 <setvbuf+0x166>
  400ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400ed0:	07d8      	lsls	r0, r3, #31
  400ed2:	d534      	bpl.n	400f3e <setvbuf+0x9e>
  400ed4:	4621      	mov	r1, r4
  400ed6:	4628      	mov	r0, r5
  400ed8:	f000 f9d0 	bl	40127c <_fflush_r>
  400edc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  400ede:	b141      	cbz	r1, 400ef2 <setvbuf+0x52>
  400ee0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  400ee4:	4299      	cmp	r1, r3
  400ee6:	d002      	beq.n	400eee <setvbuf+0x4e>
  400ee8:	4628      	mov	r0, r5
  400eea:	f000 fac1 	bl	401470 <_free_r>
  400eee:	2300      	movs	r3, #0
  400ef0:	6323      	str	r3, [r4, #48]	; 0x30
  400ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400ef6:	2200      	movs	r2, #0
  400ef8:	61a2      	str	r2, [r4, #24]
  400efa:	6062      	str	r2, [r4, #4]
  400efc:	061a      	lsls	r2, r3, #24
  400efe:	d43a      	bmi.n	400f76 <setvbuf+0xd6>
  400f00:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  400f04:	f023 0303 	bic.w	r3, r3, #3
  400f08:	f1b8 0f02 	cmp.w	r8, #2
  400f0c:	81a3      	strh	r3, [r4, #12]
  400f0e:	d01d      	beq.n	400f4c <setvbuf+0xac>
  400f10:	ab01      	add	r3, sp, #4
  400f12:	466a      	mov	r2, sp
  400f14:	4621      	mov	r1, r4
  400f16:	4628      	mov	r0, r5
  400f18:	f000 fd3a 	bl	401990 <__swhatbuf_r>
  400f1c:	89a3      	ldrh	r3, [r4, #12]
  400f1e:	4318      	orrs	r0, r3
  400f20:	81a0      	strh	r0, [r4, #12]
  400f22:	2e00      	cmp	r6, #0
  400f24:	d132      	bne.n	400f8c <setvbuf+0xec>
  400f26:	9e00      	ldr	r6, [sp, #0]
  400f28:	4630      	mov	r0, r6
  400f2a:	f000 fda9 	bl	401a80 <malloc>
  400f2e:	4607      	mov	r7, r0
  400f30:	2800      	cmp	r0, #0
  400f32:	d06b      	beq.n	40100c <setvbuf+0x16c>
  400f34:	89a3      	ldrh	r3, [r4, #12]
  400f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400f3a:	81a3      	strh	r3, [r4, #12]
  400f3c:	e028      	b.n	400f90 <setvbuf+0xf0>
  400f3e:	89a3      	ldrh	r3, [r4, #12]
  400f40:	0599      	lsls	r1, r3, #22
  400f42:	d4c7      	bmi.n	400ed4 <setvbuf+0x34>
  400f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400f46:	f000 fd1f 	bl	401988 <__retarget_lock_acquire_recursive>
  400f4a:	e7c3      	b.n	400ed4 <setvbuf+0x34>
  400f4c:	2500      	movs	r5, #0
  400f4e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  400f50:	2600      	movs	r6, #0
  400f52:	f104 0243 	add.w	r2, r4, #67	; 0x43
  400f56:	f043 0302 	orr.w	r3, r3, #2
  400f5a:	2001      	movs	r0, #1
  400f5c:	60a6      	str	r6, [r4, #8]
  400f5e:	07ce      	lsls	r6, r1, #31
  400f60:	81a3      	strh	r3, [r4, #12]
  400f62:	6022      	str	r2, [r4, #0]
  400f64:	6122      	str	r2, [r4, #16]
  400f66:	6160      	str	r0, [r4, #20]
  400f68:	d401      	bmi.n	400f6e <setvbuf+0xce>
  400f6a:	0598      	lsls	r0, r3, #22
  400f6c:	d53e      	bpl.n	400fec <setvbuf+0x14c>
  400f6e:	4628      	mov	r0, r5
  400f70:	b003      	add	sp, #12
  400f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400f76:	6921      	ldr	r1, [r4, #16]
  400f78:	4628      	mov	r0, r5
  400f7a:	f000 fa79 	bl	401470 <_free_r>
  400f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400f82:	e7bd      	b.n	400f00 <setvbuf+0x60>
  400f84:	4628      	mov	r0, r5
  400f86:	f000 f9d1 	bl	40132c <__sinit>
  400f8a:	e796      	b.n	400eba <setvbuf+0x1a>
  400f8c:	2f00      	cmp	r7, #0
  400f8e:	d0cb      	beq.n	400f28 <setvbuf+0x88>
  400f90:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400f92:	2b00      	cmp	r3, #0
  400f94:	d033      	beq.n	400ffe <setvbuf+0x15e>
  400f96:	9b00      	ldr	r3, [sp, #0]
  400f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  400f9c:	6027      	str	r7, [r4, #0]
  400f9e:	429e      	cmp	r6, r3
  400fa0:	bf1c      	itt	ne
  400fa2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  400fa6:	81a2      	strhne	r2, [r4, #12]
  400fa8:	f1b8 0f01 	cmp.w	r8, #1
  400fac:	bf04      	itt	eq
  400fae:	f042 0201 	orreq.w	r2, r2, #1
  400fb2:	81a2      	strheq	r2, [r4, #12]
  400fb4:	b292      	uxth	r2, r2
  400fb6:	f012 0308 	ands.w	r3, r2, #8
  400fba:	6127      	str	r7, [r4, #16]
  400fbc:	6166      	str	r6, [r4, #20]
  400fbe:	d00e      	beq.n	400fde <setvbuf+0x13e>
  400fc0:	07d1      	lsls	r1, r2, #31
  400fc2:	d51a      	bpl.n	400ffa <setvbuf+0x15a>
  400fc4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  400fc6:	4276      	negs	r6, r6
  400fc8:	2300      	movs	r3, #0
  400fca:	f015 0501 	ands.w	r5, r5, #1
  400fce:	61a6      	str	r6, [r4, #24]
  400fd0:	60a3      	str	r3, [r4, #8]
  400fd2:	d009      	beq.n	400fe8 <setvbuf+0x148>
  400fd4:	2500      	movs	r5, #0
  400fd6:	4628      	mov	r0, r5
  400fd8:	b003      	add	sp, #12
  400fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400fde:	60a3      	str	r3, [r4, #8]
  400fe0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  400fe2:	f015 0501 	ands.w	r5, r5, #1
  400fe6:	d1f5      	bne.n	400fd4 <setvbuf+0x134>
  400fe8:	0593      	lsls	r3, r2, #22
  400fea:	d4c0      	bmi.n	400f6e <setvbuf+0xce>
  400fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400fee:	f000 fccd 	bl	40198c <__retarget_lock_release_recursive>
  400ff2:	4628      	mov	r0, r5
  400ff4:	b003      	add	sp, #12
  400ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400ffa:	60a6      	str	r6, [r4, #8]
  400ffc:	e7f0      	b.n	400fe0 <setvbuf+0x140>
  400ffe:	4628      	mov	r0, r5
  401000:	f000 f994 	bl	40132c <__sinit>
  401004:	e7c7      	b.n	400f96 <setvbuf+0xf6>
  401006:	f04f 35ff 	mov.w	r5, #4294967295
  40100a:	e7b0      	b.n	400f6e <setvbuf+0xce>
  40100c:	f8dd 9000 	ldr.w	r9, [sp]
  401010:	45b1      	cmp	r9, r6
  401012:	d004      	beq.n	40101e <setvbuf+0x17e>
  401014:	4648      	mov	r0, r9
  401016:	f000 fd33 	bl	401a80 <malloc>
  40101a:	4607      	mov	r7, r0
  40101c:	b920      	cbnz	r0, 401028 <setvbuf+0x188>
  40101e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401022:	f04f 35ff 	mov.w	r5, #4294967295
  401026:	e792      	b.n	400f4e <setvbuf+0xae>
  401028:	464e      	mov	r6, r9
  40102a:	e783      	b.n	400f34 <setvbuf+0x94>
  40102c:	20000004 	.word	0x20000004
	...

00401040 <strlen>:
  401040:	f890 f000 	pld	[r0]
  401044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401048:	f020 0107 	bic.w	r1, r0, #7
  40104c:	f06f 0c00 	mvn.w	ip, #0
  401050:	f010 0407 	ands.w	r4, r0, #7
  401054:	f891 f020 	pld	[r1, #32]
  401058:	f040 8049 	bne.w	4010ee <strlen+0xae>
  40105c:	f04f 0400 	mov.w	r4, #0
  401060:	f06f 0007 	mvn.w	r0, #7
  401064:	e9d1 2300 	ldrd	r2, r3, [r1]
  401068:	f891 f040 	pld	[r1, #64]	; 0x40
  40106c:	f100 0008 	add.w	r0, r0, #8
  401070:	fa82 f24c 	uadd8	r2, r2, ip
  401074:	faa4 f28c 	sel	r2, r4, ip
  401078:	fa83 f34c 	uadd8	r3, r3, ip
  40107c:	faa2 f38c 	sel	r3, r2, ip
  401080:	bb4b      	cbnz	r3, 4010d6 <strlen+0x96>
  401082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401086:	fa82 f24c 	uadd8	r2, r2, ip
  40108a:	f100 0008 	add.w	r0, r0, #8
  40108e:	faa4 f28c 	sel	r2, r4, ip
  401092:	fa83 f34c 	uadd8	r3, r3, ip
  401096:	faa2 f38c 	sel	r3, r2, ip
  40109a:	b9e3      	cbnz	r3, 4010d6 <strlen+0x96>
  40109c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4010a0:	fa82 f24c 	uadd8	r2, r2, ip
  4010a4:	f100 0008 	add.w	r0, r0, #8
  4010a8:	faa4 f28c 	sel	r2, r4, ip
  4010ac:	fa83 f34c 	uadd8	r3, r3, ip
  4010b0:	faa2 f38c 	sel	r3, r2, ip
  4010b4:	b97b      	cbnz	r3, 4010d6 <strlen+0x96>
  4010b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4010ba:	f101 0120 	add.w	r1, r1, #32
  4010be:	fa82 f24c 	uadd8	r2, r2, ip
  4010c2:	f100 0008 	add.w	r0, r0, #8
  4010c6:	faa4 f28c 	sel	r2, r4, ip
  4010ca:	fa83 f34c 	uadd8	r3, r3, ip
  4010ce:	faa2 f38c 	sel	r3, r2, ip
  4010d2:	2b00      	cmp	r3, #0
  4010d4:	d0c6      	beq.n	401064 <strlen+0x24>
  4010d6:	2a00      	cmp	r2, #0
  4010d8:	bf04      	itt	eq
  4010da:	3004      	addeq	r0, #4
  4010dc:	461a      	moveq	r2, r3
  4010de:	ba12      	rev	r2, r2
  4010e0:	fab2 f282 	clz	r2, r2
  4010e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4010e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4010ec:	4770      	bx	lr
  4010ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4010f2:	f004 0503 	and.w	r5, r4, #3
  4010f6:	f1c4 0000 	rsb	r0, r4, #0
  4010fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4010fe:	f014 0f04 	tst.w	r4, #4
  401102:	f891 f040 	pld	[r1, #64]	; 0x40
  401106:	fa0c f505 	lsl.w	r5, ip, r5
  40110a:	ea62 0205 	orn	r2, r2, r5
  40110e:	bf1c      	itt	ne
  401110:	ea63 0305 	ornne	r3, r3, r5
  401114:	4662      	movne	r2, ip
  401116:	f04f 0400 	mov.w	r4, #0
  40111a:	e7a9      	b.n	401070 <strlen+0x30>

0040111c <register_fini>:
  40111c:	4b02      	ldr	r3, [pc, #8]	; (401128 <register_fini+0xc>)
  40111e:	b113      	cbz	r3, 401126 <register_fini+0xa>
  401120:	4802      	ldr	r0, [pc, #8]	; (40112c <register_fini+0x10>)
  401122:	f000 b805 	b.w	401130 <atexit>
  401126:	4770      	bx	lr
  401128:	00000000 	.word	0x00000000
  40112c:	0040139d 	.word	0x0040139d

00401130 <atexit>:
  401130:	2300      	movs	r3, #0
  401132:	4601      	mov	r1, r0
  401134:	461a      	mov	r2, r3
  401136:	4618      	mov	r0, r3
  401138:	f001 bb2a 	b.w	402790 <__register_exitproc>

0040113c <__sflush_r>:
  40113c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401140:	b29a      	uxth	r2, r3
  401142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401146:	460d      	mov	r5, r1
  401148:	0711      	lsls	r1, r2, #28
  40114a:	4680      	mov	r8, r0
  40114c:	d43a      	bmi.n	4011c4 <__sflush_r+0x88>
  40114e:	686a      	ldr	r2, [r5, #4]
  401150:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401154:	2a00      	cmp	r2, #0
  401156:	81ab      	strh	r3, [r5, #12]
  401158:	dd6f      	ble.n	40123a <__sflush_r+0xfe>
  40115a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40115c:	2c00      	cmp	r4, #0
  40115e:	d049      	beq.n	4011f4 <__sflush_r+0xb8>
  401160:	2200      	movs	r2, #0
  401162:	b29b      	uxth	r3, r3
  401164:	f8d8 6000 	ldr.w	r6, [r8]
  401168:	f8c8 2000 	str.w	r2, [r8]
  40116c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  401170:	d067      	beq.n	401242 <__sflush_r+0x106>
  401172:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401174:	075f      	lsls	r7, r3, #29
  401176:	d505      	bpl.n	401184 <__sflush_r+0x48>
  401178:	6869      	ldr	r1, [r5, #4]
  40117a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40117c:	1a52      	subs	r2, r2, r1
  40117e:	b10b      	cbz	r3, 401184 <__sflush_r+0x48>
  401180:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401182:	1ad2      	subs	r2, r2, r3
  401184:	2300      	movs	r3, #0
  401186:	69e9      	ldr	r1, [r5, #28]
  401188:	4640      	mov	r0, r8
  40118a:	47a0      	blx	r4
  40118c:	1c44      	adds	r4, r0, #1
  40118e:	d03c      	beq.n	40120a <__sflush_r+0xce>
  401190:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401194:	692a      	ldr	r2, [r5, #16]
  401196:	602a      	str	r2, [r5, #0]
  401198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40119c:	2200      	movs	r2, #0
  40119e:	81ab      	strh	r3, [r5, #12]
  4011a0:	04db      	lsls	r3, r3, #19
  4011a2:	606a      	str	r2, [r5, #4]
  4011a4:	d447      	bmi.n	401236 <__sflush_r+0xfa>
  4011a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4011a8:	f8c8 6000 	str.w	r6, [r8]
  4011ac:	b311      	cbz	r1, 4011f4 <__sflush_r+0xb8>
  4011ae:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4011b2:	4299      	cmp	r1, r3
  4011b4:	d002      	beq.n	4011bc <__sflush_r+0x80>
  4011b6:	4640      	mov	r0, r8
  4011b8:	f000 f95a 	bl	401470 <_free_r>
  4011bc:	2000      	movs	r0, #0
  4011be:	6328      	str	r0, [r5, #48]	; 0x30
  4011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011c4:	692e      	ldr	r6, [r5, #16]
  4011c6:	b1ae      	cbz	r6, 4011f4 <__sflush_r+0xb8>
  4011c8:	682c      	ldr	r4, [r5, #0]
  4011ca:	602e      	str	r6, [r5, #0]
  4011cc:	0791      	lsls	r1, r2, #30
  4011ce:	bf0c      	ite	eq
  4011d0:	696b      	ldreq	r3, [r5, #20]
  4011d2:	2300      	movne	r3, #0
  4011d4:	1ba4      	subs	r4, r4, r6
  4011d6:	60ab      	str	r3, [r5, #8]
  4011d8:	e00a      	b.n	4011f0 <__sflush_r+0xb4>
  4011da:	4623      	mov	r3, r4
  4011dc:	4632      	mov	r2, r6
  4011de:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4011e0:	69e9      	ldr	r1, [r5, #28]
  4011e2:	4640      	mov	r0, r8
  4011e4:	47b8      	blx	r7
  4011e6:	2800      	cmp	r0, #0
  4011e8:	eba4 0400 	sub.w	r4, r4, r0
  4011ec:	4406      	add	r6, r0
  4011ee:	dd04      	ble.n	4011fa <__sflush_r+0xbe>
  4011f0:	2c00      	cmp	r4, #0
  4011f2:	dcf2      	bgt.n	4011da <__sflush_r+0x9e>
  4011f4:	2000      	movs	r0, #0
  4011f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011fa:	89ab      	ldrh	r3, [r5, #12]
  4011fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401200:	81ab      	strh	r3, [r5, #12]
  401202:	f04f 30ff 	mov.w	r0, #4294967295
  401206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40120a:	f8d8 4000 	ldr.w	r4, [r8]
  40120e:	2c1d      	cmp	r4, #29
  401210:	d8f3      	bhi.n	4011fa <__sflush_r+0xbe>
  401212:	4b19      	ldr	r3, [pc, #100]	; (401278 <__sflush_r+0x13c>)
  401214:	40e3      	lsrs	r3, r4
  401216:	43db      	mvns	r3, r3
  401218:	f013 0301 	ands.w	r3, r3, #1
  40121c:	d1ed      	bne.n	4011fa <__sflush_r+0xbe>
  40121e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  401222:	606b      	str	r3, [r5, #4]
  401224:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401228:	6929      	ldr	r1, [r5, #16]
  40122a:	81ab      	strh	r3, [r5, #12]
  40122c:	04da      	lsls	r2, r3, #19
  40122e:	6029      	str	r1, [r5, #0]
  401230:	d5b9      	bpl.n	4011a6 <__sflush_r+0x6a>
  401232:	2c00      	cmp	r4, #0
  401234:	d1b7      	bne.n	4011a6 <__sflush_r+0x6a>
  401236:	6528      	str	r0, [r5, #80]	; 0x50
  401238:	e7b5      	b.n	4011a6 <__sflush_r+0x6a>
  40123a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40123c:	2a00      	cmp	r2, #0
  40123e:	dc8c      	bgt.n	40115a <__sflush_r+0x1e>
  401240:	e7d8      	b.n	4011f4 <__sflush_r+0xb8>
  401242:	2301      	movs	r3, #1
  401244:	69e9      	ldr	r1, [r5, #28]
  401246:	4640      	mov	r0, r8
  401248:	47a0      	blx	r4
  40124a:	1c43      	adds	r3, r0, #1
  40124c:	4602      	mov	r2, r0
  40124e:	d002      	beq.n	401256 <__sflush_r+0x11a>
  401250:	89ab      	ldrh	r3, [r5, #12]
  401252:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401254:	e78e      	b.n	401174 <__sflush_r+0x38>
  401256:	f8d8 3000 	ldr.w	r3, [r8]
  40125a:	2b00      	cmp	r3, #0
  40125c:	d0f8      	beq.n	401250 <__sflush_r+0x114>
  40125e:	2b1d      	cmp	r3, #29
  401260:	d001      	beq.n	401266 <__sflush_r+0x12a>
  401262:	2b16      	cmp	r3, #22
  401264:	d102      	bne.n	40126c <__sflush_r+0x130>
  401266:	f8c8 6000 	str.w	r6, [r8]
  40126a:	e7c3      	b.n	4011f4 <__sflush_r+0xb8>
  40126c:	89ab      	ldrh	r3, [r5, #12]
  40126e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401272:	81ab      	strh	r3, [r5, #12]
  401274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401278:	20400001 	.word	0x20400001

0040127c <_fflush_r>:
  40127c:	b538      	push	{r3, r4, r5, lr}
  40127e:	460d      	mov	r5, r1
  401280:	4604      	mov	r4, r0
  401282:	b108      	cbz	r0, 401288 <_fflush_r+0xc>
  401284:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401286:	b1bb      	cbz	r3, 4012b8 <_fflush_r+0x3c>
  401288:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40128c:	b188      	cbz	r0, 4012b2 <_fflush_r+0x36>
  40128e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401290:	07db      	lsls	r3, r3, #31
  401292:	d401      	bmi.n	401298 <_fflush_r+0x1c>
  401294:	0581      	lsls	r1, r0, #22
  401296:	d517      	bpl.n	4012c8 <_fflush_r+0x4c>
  401298:	4620      	mov	r0, r4
  40129a:	4629      	mov	r1, r5
  40129c:	f7ff ff4e 	bl	40113c <__sflush_r>
  4012a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4012a2:	07da      	lsls	r2, r3, #31
  4012a4:	4604      	mov	r4, r0
  4012a6:	d402      	bmi.n	4012ae <_fflush_r+0x32>
  4012a8:	89ab      	ldrh	r3, [r5, #12]
  4012aa:	059b      	lsls	r3, r3, #22
  4012ac:	d507      	bpl.n	4012be <_fflush_r+0x42>
  4012ae:	4620      	mov	r0, r4
  4012b0:	bd38      	pop	{r3, r4, r5, pc}
  4012b2:	4604      	mov	r4, r0
  4012b4:	4620      	mov	r0, r4
  4012b6:	bd38      	pop	{r3, r4, r5, pc}
  4012b8:	f000 f838 	bl	40132c <__sinit>
  4012bc:	e7e4      	b.n	401288 <_fflush_r+0xc>
  4012be:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4012c0:	f000 fb64 	bl	40198c <__retarget_lock_release_recursive>
  4012c4:	4620      	mov	r0, r4
  4012c6:	bd38      	pop	{r3, r4, r5, pc}
  4012c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4012ca:	f000 fb5d 	bl	401988 <__retarget_lock_acquire_recursive>
  4012ce:	e7e3      	b.n	401298 <_fflush_r+0x1c>

004012d0 <_cleanup_r>:
  4012d0:	4901      	ldr	r1, [pc, #4]	; (4012d8 <_cleanup_r+0x8>)
  4012d2:	f000 bb2b 	b.w	40192c <_fwalk_reent>
  4012d6:	bf00      	nop
  4012d8:	00402879 	.word	0x00402879

004012dc <std.isra.0>:
  4012dc:	b510      	push	{r4, lr}
  4012de:	2300      	movs	r3, #0
  4012e0:	4604      	mov	r4, r0
  4012e2:	8181      	strh	r1, [r0, #12]
  4012e4:	81c2      	strh	r2, [r0, #14]
  4012e6:	6003      	str	r3, [r0, #0]
  4012e8:	6043      	str	r3, [r0, #4]
  4012ea:	6083      	str	r3, [r0, #8]
  4012ec:	6643      	str	r3, [r0, #100]	; 0x64
  4012ee:	6103      	str	r3, [r0, #16]
  4012f0:	6143      	str	r3, [r0, #20]
  4012f2:	6183      	str	r3, [r0, #24]
  4012f4:	4619      	mov	r1, r3
  4012f6:	2208      	movs	r2, #8
  4012f8:	305c      	adds	r0, #92	; 0x5c
  4012fa:	f7ff fd25 	bl	400d48 <memset>
  4012fe:	4807      	ldr	r0, [pc, #28]	; (40131c <std.isra.0+0x40>)
  401300:	4907      	ldr	r1, [pc, #28]	; (401320 <std.isra.0+0x44>)
  401302:	4a08      	ldr	r2, [pc, #32]	; (401324 <std.isra.0+0x48>)
  401304:	4b08      	ldr	r3, [pc, #32]	; (401328 <std.isra.0+0x4c>)
  401306:	6220      	str	r0, [r4, #32]
  401308:	61e4      	str	r4, [r4, #28]
  40130a:	6261      	str	r1, [r4, #36]	; 0x24
  40130c:	62a2      	str	r2, [r4, #40]	; 0x28
  40130e:	62e3      	str	r3, [r4, #44]	; 0x2c
  401310:	f104 0058 	add.w	r0, r4, #88	; 0x58
  401314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401318:	f000 bb32 	b.w	401980 <__retarget_lock_init_recursive>
  40131c:	00402615 	.word	0x00402615
  401320:	00402639 	.word	0x00402639
  401324:	00402675 	.word	0x00402675
  401328:	00402695 	.word	0x00402695

0040132c <__sinit>:
  40132c:	b510      	push	{r4, lr}
  40132e:	4604      	mov	r4, r0
  401330:	4812      	ldr	r0, [pc, #72]	; (40137c <__sinit+0x50>)
  401332:	f000 fb29 	bl	401988 <__retarget_lock_acquire_recursive>
  401336:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401338:	b9d2      	cbnz	r2, 401370 <__sinit+0x44>
  40133a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40133e:	4810      	ldr	r0, [pc, #64]	; (401380 <__sinit+0x54>)
  401340:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401344:	2103      	movs	r1, #3
  401346:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40134a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40134c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  401350:	6860      	ldr	r0, [r4, #4]
  401352:	2104      	movs	r1, #4
  401354:	f7ff ffc2 	bl	4012dc <std.isra.0>
  401358:	2201      	movs	r2, #1
  40135a:	2109      	movs	r1, #9
  40135c:	68a0      	ldr	r0, [r4, #8]
  40135e:	f7ff ffbd 	bl	4012dc <std.isra.0>
  401362:	2202      	movs	r2, #2
  401364:	2112      	movs	r1, #18
  401366:	68e0      	ldr	r0, [r4, #12]
  401368:	f7ff ffb8 	bl	4012dc <std.isra.0>
  40136c:	2301      	movs	r3, #1
  40136e:	63a3      	str	r3, [r4, #56]	; 0x38
  401370:	4802      	ldr	r0, [pc, #8]	; (40137c <__sinit+0x50>)
  401372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401376:	f000 bb09 	b.w	40198c <__retarget_lock_release_recursive>
  40137a:	bf00      	nop
  40137c:	2000093c 	.word	0x2000093c
  401380:	004012d1 	.word	0x004012d1

00401384 <__sfp_lock_acquire>:
  401384:	4801      	ldr	r0, [pc, #4]	; (40138c <__sfp_lock_acquire+0x8>)
  401386:	f000 baff 	b.w	401988 <__retarget_lock_acquire_recursive>
  40138a:	bf00      	nop
  40138c:	20000950 	.word	0x20000950

00401390 <__sfp_lock_release>:
  401390:	4801      	ldr	r0, [pc, #4]	; (401398 <__sfp_lock_release+0x8>)
  401392:	f000 bafb 	b.w	40198c <__retarget_lock_release_recursive>
  401396:	bf00      	nop
  401398:	20000950 	.word	0x20000950

0040139c <__libc_fini_array>:
  40139c:	b538      	push	{r3, r4, r5, lr}
  40139e:	4c0a      	ldr	r4, [pc, #40]	; (4013c8 <__libc_fini_array+0x2c>)
  4013a0:	4d0a      	ldr	r5, [pc, #40]	; (4013cc <__libc_fini_array+0x30>)
  4013a2:	1b64      	subs	r4, r4, r5
  4013a4:	10a4      	asrs	r4, r4, #2
  4013a6:	d00a      	beq.n	4013be <__libc_fini_array+0x22>
  4013a8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4013ac:	3b01      	subs	r3, #1
  4013ae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4013b2:	3c01      	subs	r4, #1
  4013b4:	f855 3904 	ldr.w	r3, [r5], #-4
  4013b8:	4798      	blx	r3
  4013ba:	2c00      	cmp	r4, #0
  4013bc:	d1f9      	bne.n	4013b2 <__libc_fini_array+0x16>
  4013be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4013c2:	f001 bb43 	b.w	402a4c <_fini>
  4013c6:	bf00      	nop
  4013c8:	00402a5c 	.word	0x00402a5c
  4013cc:	00402a58 	.word	0x00402a58

004013d0 <_malloc_trim_r>:
  4013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4013d2:	4f24      	ldr	r7, [pc, #144]	; (401464 <_malloc_trim_r+0x94>)
  4013d4:	460c      	mov	r4, r1
  4013d6:	4606      	mov	r6, r0
  4013d8:	f000 ff58 	bl	40228c <__malloc_lock>
  4013dc:	68bb      	ldr	r3, [r7, #8]
  4013de:	685d      	ldr	r5, [r3, #4]
  4013e0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4013e4:	310f      	adds	r1, #15
  4013e6:	f025 0503 	bic.w	r5, r5, #3
  4013ea:	4429      	add	r1, r5
  4013ec:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4013f0:	f021 010f 	bic.w	r1, r1, #15
  4013f4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4013f8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4013fc:	db07      	blt.n	40140e <_malloc_trim_r+0x3e>
  4013fe:	2100      	movs	r1, #0
  401400:	4630      	mov	r0, r6
  401402:	f001 f8f5 	bl	4025f0 <_sbrk_r>
  401406:	68bb      	ldr	r3, [r7, #8]
  401408:	442b      	add	r3, r5
  40140a:	4298      	cmp	r0, r3
  40140c:	d004      	beq.n	401418 <_malloc_trim_r+0x48>
  40140e:	4630      	mov	r0, r6
  401410:	f000 ff42 	bl	402298 <__malloc_unlock>
  401414:	2000      	movs	r0, #0
  401416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401418:	4261      	negs	r1, r4
  40141a:	4630      	mov	r0, r6
  40141c:	f001 f8e8 	bl	4025f0 <_sbrk_r>
  401420:	3001      	adds	r0, #1
  401422:	d00d      	beq.n	401440 <_malloc_trim_r+0x70>
  401424:	4b10      	ldr	r3, [pc, #64]	; (401468 <_malloc_trim_r+0x98>)
  401426:	68ba      	ldr	r2, [r7, #8]
  401428:	6819      	ldr	r1, [r3, #0]
  40142a:	1b2d      	subs	r5, r5, r4
  40142c:	f045 0501 	orr.w	r5, r5, #1
  401430:	4630      	mov	r0, r6
  401432:	1b09      	subs	r1, r1, r4
  401434:	6055      	str	r5, [r2, #4]
  401436:	6019      	str	r1, [r3, #0]
  401438:	f000 ff2e 	bl	402298 <__malloc_unlock>
  40143c:	2001      	movs	r0, #1
  40143e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401440:	2100      	movs	r1, #0
  401442:	4630      	mov	r0, r6
  401444:	f001 f8d4 	bl	4025f0 <_sbrk_r>
  401448:	68ba      	ldr	r2, [r7, #8]
  40144a:	1a83      	subs	r3, r0, r2
  40144c:	2b0f      	cmp	r3, #15
  40144e:	ddde      	ble.n	40140e <_malloc_trim_r+0x3e>
  401450:	4c06      	ldr	r4, [pc, #24]	; (40146c <_malloc_trim_r+0x9c>)
  401452:	4905      	ldr	r1, [pc, #20]	; (401468 <_malloc_trim_r+0x98>)
  401454:	6824      	ldr	r4, [r4, #0]
  401456:	f043 0301 	orr.w	r3, r3, #1
  40145a:	1b00      	subs	r0, r0, r4
  40145c:	6053      	str	r3, [r2, #4]
  40145e:	6008      	str	r0, [r1, #0]
  401460:	e7d5      	b.n	40140e <_malloc_trim_r+0x3e>
  401462:	bf00      	nop
  401464:	20000434 	.word	0x20000434
  401468:	200008d8 	.word	0x200008d8
  40146c:	2000083c 	.word	0x2000083c

00401470 <_free_r>:
  401470:	2900      	cmp	r1, #0
  401472:	d044      	beq.n	4014fe <_free_r+0x8e>
  401474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401478:	460d      	mov	r5, r1
  40147a:	4680      	mov	r8, r0
  40147c:	f000 ff06 	bl	40228c <__malloc_lock>
  401480:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401484:	4969      	ldr	r1, [pc, #420]	; (40162c <_free_r+0x1bc>)
  401486:	f027 0301 	bic.w	r3, r7, #1
  40148a:	f1a5 0408 	sub.w	r4, r5, #8
  40148e:	18e2      	adds	r2, r4, r3
  401490:	688e      	ldr	r6, [r1, #8]
  401492:	6850      	ldr	r0, [r2, #4]
  401494:	42b2      	cmp	r2, r6
  401496:	f020 0003 	bic.w	r0, r0, #3
  40149a:	d05e      	beq.n	40155a <_free_r+0xea>
  40149c:	07fe      	lsls	r6, r7, #31
  40149e:	6050      	str	r0, [r2, #4]
  4014a0:	d40b      	bmi.n	4014ba <_free_r+0x4a>
  4014a2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4014a6:	1be4      	subs	r4, r4, r7
  4014a8:	f101 0e08 	add.w	lr, r1, #8
  4014ac:	68a5      	ldr	r5, [r4, #8]
  4014ae:	4575      	cmp	r5, lr
  4014b0:	443b      	add	r3, r7
  4014b2:	d06d      	beq.n	401590 <_free_r+0x120>
  4014b4:	68e7      	ldr	r7, [r4, #12]
  4014b6:	60ef      	str	r7, [r5, #12]
  4014b8:	60bd      	str	r5, [r7, #8]
  4014ba:	1815      	adds	r5, r2, r0
  4014bc:	686d      	ldr	r5, [r5, #4]
  4014be:	07ed      	lsls	r5, r5, #31
  4014c0:	d53e      	bpl.n	401540 <_free_r+0xd0>
  4014c2:	f043 0201 	orr.w	r2, r3, #1
  4014c6:	6062      	str	r2, [r4, #4]
  4014c8:	50e3      	str	r3, [r4, r3]
  4014ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4014ce:	d217      	bcs.n	401500 <_free_r+0x90>
  4014d0:	08db      	lsrs	r3, r3, #3
  4014d2:	1c58      	adds	r0, r3, #1
  4014d4:	109a      	asrs	r2, r3, #2
  4014d6:	684d      	ldr	r5, [r1, #4]
  4014d8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4014dc:	60a7      	str	r7, [r4, #8]
  4014de:	2301      	movs	r3, #1
  4014e0:	4093      	lsls	r3, r2
  4014e2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4014e6:	432b      	orrs	r3, r5
  4014e8:	3a08      	subs	r2, #8
  4014ea:	60e2      	str	r2, [r4, #12]
  4014ec:	604b      	str	r3, [r1, #4]
  4014ee:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4014f2:	60fc      	str	r4, [r7, #12]
  4014f4:	4640      	mov	r0, r8
  4014f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4014fa:	f000 becd 	b.w	402298 <__malloc_unlock>
  4014fe:	4770      	bx	lr
  401500:	0a5a      	lsrs	r2, r3, #9
  401502:	2a04      	cmp	r2, #4
  401504:	d852      	bhi.n	4015ac <_free_r+0x13c>
  401506:	099a      	lsrs	r2, r3, #6
  401508:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40150c:	00ff      	lsls	r7, r7, #3
  40150e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  401512:	19c8      	adds	r0, r1, r7
  401514:	59ca      	ldr	r2, [r1, r7]
  401516:	3808      	subs	r0, #8
  401518:	4290      	cmp	r0, r2
  40151a:	d04f      	beq.n	4015bc <_free_r+0x14c>
  40151c:	6851      	ldr	r1, [r2, #4]
  40151e:	f021 0103 	bic.w	r1, r1, #3
  401522:	428b      	cmp	r3, r1
  401524:	d232      	bcs.n	40158c <_free_r+0x11c>
  401526:	6892      	ldr	r2, [r2, #8]
  401528:	4290      	cmp	r0, r2
  40152a:	d1f7      	bne.n	40151c <_free_r+0xac>
  40152c:	68c3      	ldr	r3, [r0, #12]
  40152e:	60a0      	str	r0, [r4, #8]
  401530:	60e3      	str	r3, [r4, #12]
  401532:	609c      	str	r4, [r3, #8]
  401534:	60c4      	str	r4, [r0, #12]
  401536:	4640      	mov	r0, r8
  401538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40153c:	f000 beac 	b.w	402298 <__malloc_unlock>
  401540:	6895      	ldr	r5, [r2, #8]
  401542:	4f3b      	ldr	r7, [pc, #236]	; (401630 <_free_r+0x1c0>)
  401544:	42bd      	cmp	r5, r7
  401546:	4403      	add	r3, r0
  401548:	d040      	beq.n	4015cc <_free_r+0x15c>
  40154a:	68d0      	ldr	r0, [r2, #12]
  40154c:	60e8      	str	r0, [r5, #12]
  40154e:	f043 0201 	orr.w	r2, r3, #1
  401552:	6085      	str	r5, [r0, #8]
  401554:	6062      	str	r2, [r4, #4]
  401556:	50e3      	str	r3, [r4, r3]
  401558:	e7b7      	b.n	4014ca <_free_r+0x5a>
  40155a:	07ff      	lsls	r7, r7, #31
  40155c:	4403      	add	r3, r0
  40155e:	d407      	bmi.n	401570 <_free_r+0x100>
  401560:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401564:	1aa4      	subs	r4, r4, r2
  401566:	4413      	add	r3, r2
  401568:	68a0      	ldr	r0, [r4, #8]
  40156a:	68e2      	ldr	r2, [r4, #12]
  40156c:	60c2      	str	r2, [r0, #12]
  40156e:	6090      	str	r0, [r2, #8]
  401570:	4a30      	ldr	r2, [pc, #192]	; (401634 <_free_r+0x1c4>)
  401572:	6812      	ldr	r2, [r2, #0]
  401574:	f043 0001 	orr.w	r0, r3, #1
  401578:	4293      	cmp	r3, r2
  40157a:	6060      	str	r0, [r4, #4]
  40157c:	608c      	str	r4, [r1, #8]
  40157e:	d3b9      	bcc.n	4014f4 <_free_r+0x84>
  401580:	4b2d      	ldr	r3, [pc, #180]	; (401638 <_free_r+0x1c8>)
  401582:	4640      	mov	r0, r8
  401584:	6819      	ldr	r1, [r3, #0]
  401586:	f7ff ff23 	bl	4013d0 <_malloc_trim_r>
  40158a:	e7b3      	b.n	4014f4 <_free_r+0x84>
  40158c:	4610      	mov	r0, r2
  40158e:	e7cd      	b.n	40152c <_free_r+0xbc>
  401590:	1811      	adds	r1, r2, r0
  401592:	6849      	ldr	r1, [r1, #4]
  401594:	07c9      	lsls	r1, r1, #31
  401596:	d444      	bmi.n	401622 <_free_r+0x1b2>
  401598:	6891      	ldr	r1, [r2, #8]
  40159a:	68d2      	ldr	r2, [r2, #12]
  40159c:	60ca      	str	r2, [r1, #12]
  40159e:	4403      	add	r3, r0
  4015a0:	f043 0001 	orr.w	r0, r3, #1
  4015a4:	6091      	str	r1, [r2, #8]
  4015a6:	6060      	str	r0, [r4, #4]
  4015a8:	50e3      	str	r3, [r4, r3]
  4015aa:	e7a3      	b.n	4014f4 <_free_r+0x84>
  4015ac:	2a14      	cmp	r2, #20
  4015ae:	d816      	bhi.n	4015de <_free_r+0x16e>
  4015b0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4015b4:	00ff      	lsls	r7, r7, #3
  4015b6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4015ba:	e7aa      	b.n	401512 <_free_r+0xa2>
  4015bc:	10aa      	asrs	r2, r5, #2
  4015be:	2301      	movs	r3, #1
  4015c0:	684d      	ldr	r5, [r1, #4]
  4015c2:	4093      	lsls	r3, r2
  4015c4:	432b      	orrs	r3, r5
  4015c6:	604b      	str	r3, [r1, #4]
  4015c8:	4603      	mov	r3, r0
  4015ca:	e7b0      	b.n	40152e <_free_r+0xbe>
  4015cc:	f043 0201 	orr.w	r2, r3, #1
  4015d0:	614c      	str	r4, [r1, #20]
  4015d2:	610c      	str	r4, [r1, #16]
  4015d4:	60e5      	str	r5, [r4, #12]
  4015d6:	60a5      	str	r5, [r4, #8]
  4015d8:	6062      	str	r2, [r4, #4]
  4015da:	50e3      	str	r3, [r4, r3]
  4015dc:	e78a      	b.n	4014f4 <_free_r+0x84>
  4015de:	2a54      	cmp	r2, #84	; 0x54
  4015e0:	d806      	bhi.n	4015f0 <_free_r+0x180>
  4015e2:	0b1a      	lsrs	r2, r3, #12
  4015e4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4015e8:	00ff      	lsls	r7, r7, #3
  4015ea:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4015ee:	e790      	b.n	401512 <_free_r+0xa2>
  4015f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4015f4:	d806      	bhi.n	401604 <_free_r+0x194>
  4015f6:	0bda      	lsrs	r2, r3, #15
  4015f8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4015fc:	00ff      	lsls	r7, r7, #3
  4015fe:	f102 0577 	add.w	r5, r2, #119	; 0x77
  401602:	e786      	b.n	401512 <_free_r+0xa2>
  401604:	f240 5054 	movw	r0, #1364	; 0x554
  401608:	4282      	cmp	r2, r0
  40160a:	d806      	bhi.n	40161a <_free_r+0x1aa>
  40160c:	0c9a      	lsrs	r2, r3, #18
  40160e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  401612:	00ff      	lsls	r7, r7, #3
  401614:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401618:	e77b      	b.n	401512 <_free_r+0xa2>
  40161a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40161e:	257e      	movs	r5, #126	; 0x7e
  401620:	e777      	b.n	401512 <_free_r+0xa2>
  401622:	f043 0101 	orr.w	r1, r3, #1
  401626:	6061      	str	r1, [r4, #4]
  401628:	6013      	str	r3, [r2, #0]
  40162a:	e763      	b.n	4014f4 <_free_r+0x84>
  40162c:	20000434 	.word	0x20000434
  401630:	2000043c 	.word	0x2000043c
  401634:	20000840 	.word	0x20000840
  401638:	20000908 	.word	0x20000908

0040163c <__sfvwrite_r>:
  40163c:	6893      	ldr	r3, [r2, #8]
  40163e:	2b00      	cmp	r3, #0
  401640:	d073      	beq.n	40172a <__sfvwrite_r+0xee>
  401642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401646:	898b      	ldrh	r3, [r1, #12]
  401648:	b083      	sub	sp, #12
  40164a:	460c      	mov	r4, r1
  40164c:	0719      	lsls	r1, r3, #28
  40164e:	9000      	str	r0, [sp, #0]
  401650:	4616      	mov	r6, r2
  401652:	d526      	bpl.n	4016a2 <__sfvwrite_r+0x66>
  401654:	6922      	ldr	r2, [r4, #16]
  401656:	b322      	cbz	r2, 4016a2 <__sfvwrite_r+0x66>
  401658:	f013 0002 	ands.w	r0, r3, #2
  40165c:	6835      	ldr	r5, [r6, #0]
  40165e:	d02c      	beq.n	4016ba <__sfvwrite_r+0x7e>
  401660:	f04f 0900 	mov.w	r9, #0
  401664:	4fb0      	ldr	r7, [pc, #704]	; (401928 <__sfvwrite_r+0x2ec>)
  401666:	46c8      	mov	r8, r9
  401668:	46b2      	mov	sl, r6
  40166a:	45b8      	cmp	r8, r7
  40166c:	4643      	mov	r3, r8
  40166e:	464a      	mov	r2, r9
  401670:	bf28      	it	cs
  401672:	463b      	movcs	r3, r7
  401674:	9800      	ldr	r0, [sp, #0]
  401676:	f1b8 0f00 	cmp.w	r8, #0
  40167a:	d050      	beq.n	40171e <__sfvwrite_r+0xe2>
  40167c:	69e1      	ldr	r1, [r4, #28]
  40167e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401680:	47b0      	blx	r6
  401682:	2800      	cmp	r0, #0
  401684:	dd58      	ble.n	401738 <__sfvwrite_r+0xfc>
  401686:	f8da 3008 	ldr.w	r3, [sl, #8]
  40168a:	1a1b      	subs	r3, r3, r0
  40168c:	4481      	add	r9, r0
  40168e:	eba8 0800 	sub.w	r8, r8, r0
  401692:	f8ca 3008 	str.w	r3, [sl, #8]
  401696:	2b00      	cmp	r3, #0
  401698:	d1e7      	bne.n	40166a <__sfvwrite_r+0x2e>
  40169a:	2000      	movs	r0, #0
  40169c:	b003      	add	sp, #12
  40169e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016a2:	4621      	mov	r1, r4
  4016a4:	9800      	ldr	r0, [sp, #0]
  4016a6:	f001 f80f 	bl	4026c8 <__swsetup_r>
  4016aa:	2800      	cmp	r0, #0
  4016ac:	f040 8133 	bne.w	401916 <__sfvwrite_r+0x2da>
  4016b0:	89a3      	ldrh	r3, [r4, #12]
  4016b2:	6835      	ldr	r5, [r6, #0]
  4016b4:	f013 0002 	ands.w	r0, r3, #2
  4016b8:	d1d2      	bne.n	401660 <__sfvwrite_r+0x24>
  4016ba:	f013 0901 	ands.w	r9, r3, #1
  4016be:	d145      	bne.n	40174c <__sfvwrite_r+0x110>
  4016c0:	464f      	mov	r7, r9
  4016c2:	9601      	str	r6, [sp, #4]
  4016c4:	b337      	cbz	r7, 401714 <__sfvwrite_r+0xd8>
  4016c6:	059a      	lsls	r2, r3, #22
  4016c8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4016cc:	f140 8083 	bpl.w	4017d6 <__sfvwrite_r+0x19a>
  4016d0:	4547      	cmp	r7, r8
  4016d2:	46c3      	mov	fp, r8
  4016d4:	f0c0 80ab 	bcc.w	40182e <__sfvwrite_r+0x1f2>
  4016d8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4016dc:	f040 80ac 	bne.w	401838 <__sfvwrite_r+0x1fc>
  4016e0:	6820      	ldr	r0, [r4, #0]
  4016e2:	46ba      	mov	sl, r7
  4016e4:	465a      	mov	r2, fp
  4016e6:	4649      	mov	r1, r9
  4016e8:	f000 fd6c 	bl	4021c4 <memmove>
  4016ec:	68a2      	ldr	r2, [r4, #8]
  4016ee:	6823      	ldr	r3, [r4, #0]
  4016f0:	eba2 0208 	sub.w	r2, r2, r8
  4016f4:	445b      	add	r3, fp
  4016f6:	60a2      	str	r2, [r4, #8]
  4016f8:	6023      	str	r3, [r4, #0]
  4016fa:	9a01      	ldr	r2, [sp, #4]
  4016fc:	6893      	ldr	r3, [r2, #8]
  4016fe:	eba3 030a 	sub.w	r3, r3, sl
  401702:	44d1      	add	r9, sl
  401704:	eba7 070a 	sub.w	r7, r7, sl
  401708:	6093      	str	r3, [r2, #8]
  40170a:	2b00      	cmp	r3, #0
  40170c:	d0c5      	beq.n	40169a <__sfvwrite_r+0x5e>
  40170e:	89a3      	ldrh	r3, [r4, #12]
  401710:	2f00      	cmp	r7, #0
  401712:	d1d8      	bne.n	4016c6 <__sfvwrite_r+0x8a>
  401714:	f8d5 9000 	ldr.w	r9, [r5]
  401718:	686f      	ldr	r7, [r5, #4]
  40171a:	3508      	adds	r5, #8
  40171c:	e7d2      	b.n	4016c4 <__sfvwrite_r+0x88>
  40171e:	f8d5 9000 	ldr.w	r9, [r5]
  401722:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401726:	3508      	adds	r5, #8
  401728:	e79f      	b.n	40166a <__sfvwrite_r+0x2e>
  40172a:	2000      	movs	r0, #0
  40172c:	4770      	bx	lr
  40172e:	4621      	mov	r1, r4
  401730:	9800      	ldr	r0, [sp, #0]
  401732:	f7ff fda3 	bl	40127c <_fflush_r>
  401736:	b370      	cbz	r0, 401796 <__sfvwrite_r+0x15a>
  401738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40173c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401740:	f04f 30ff 	mov.w	r0, #4294967295
  401744:	81a3      	strh	r3, [r4, #12]
  401746:	b003      	add	sp, #12
  401748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40174c:	4681      	mov	r9, r0
  40174e:	4633      	mov	r3, r6
  401750:	464e      	mov	r6, r9
  401752:	46a8      	mov	r8, r5
  401754:	469a      	mov	sl, r3
  401756:	464d      	mov	r5, r9
  401758:	b34e      	cbz	r6, 4017ae <__sfvwrite_r+0x172>
  40175a:	b380      	cbz	r0, 4017be <__sfvwrite_r+0x182>
  40175c:	6820      	ldr	r0, [r4, #0]
  40175e:	6923      	ldr	r3, [r4, #16]
  401760:	6962      	ldr	r2, [r4, #20]
  401762:	45b1      	cmp	r9, r6
  401764:	46cb      	mov	fp, r9
  401766:	bf28      	it	cs
  401768:	46b3      	movcs	fp, r6
  40176a:	4298      	cmp	r0, r3
  40176c:	465f      	mov	r7, fp
  40176e:	d904      	bls.n	40177a <__sfvwrite_r+0x13e>
  401770:	68a3      	ldr	r3, [r4, #8]
  401772:	4413      	add	r3, r2
  401774:	459b      	cmp	fp, r3
  401776:	f300 80a6 	bgt.w	4018c6 <__sfvwrite_r+0x28a>
  40177a:	4593      	cmp	fp, r2
  40177c:	db4b      	blt.n	401816 <__sfvwrite_r+0x1da>
  40177e:	4613      	mov	r3, r2
  401780:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401782:	69e1      	ldr	r1, [r4, #28]
  401784:	9800      	ldr	r0, [sp, #0]
  401786:	462a      	mov	r2, r5
  401788:	47b8      	blx	r7
  40178a:	1e07      	subs	r7, r0, #0
  40178c:	ddd4      	ble.n	401738 <__sfvwrite_r+0xfc>
  40178e:	ebb9 0907 	subs.w	r9, r9, r7
  401792:	d0cc      	beq.n	40172e <__sfvwrite_r+0xf2>
  401794:	2001      	movs	r0, #1
  401796:	f8da 3008 	ldr.w	r3, [sl, #8]
  40179a:	1bdb      	subs	r3, r3, r7
  40179c:	443d      	add	r5, r7
  40179e:	1bf6      	subs	r6, r6, r7
  4017a0:	f8ca 3008 	str.w	r3, [sl, #8]
  4017a4:	2b00      	cmp	r3, #0
  4017a6:	f43f af78 	beq.w	40169a <__sfvwrite_r+0x5e>
  4017aa:	2e00      	cmp	r6, #0
  4017ac:	d1d5      	bne.n	40175a <__sfvwrite_r+0x11e>
  4017ae:	f108 0308 	add.w	r3, r8, #8
  4017b2:	e913 0060 	ldmdb	r3, {r5, r6}
  4017b6:	4698      	mov	r8, r3
  4017b8:	3308      	adds	r3, #8
  4017ba:	2e00      	cmp	r6, #0
  4017bc:	d0f9      	beq.n	4017b2 <__sfvwrite_r+0x176>
  4017be:	4632      	mov	r2, r6
  4017c0:	210a      	movs	r1, #10
  4017c2:	4628      	mov	r0, r5
  4017c4:	f000 fc14 	bl	401ff0 <memchr>
  4017c8:	2800      	cmp	r0, #0
  4017ca:	f000 80a1 	beq.w	401910 <__sfvwrite_r+0x2d4>
  4017ce:	3001      	adds	r0, #1
  4017d0:	eba0 0905 	sub.w	r9, r0, r5
  4017d4:	e7c2      	b.n	40175c <__sfvwrite_r+0x120>
  4017d6:	6820      	ldr	r0, [r4, #0]
  4017d8:	6923      	ldr	r3, [r4, #16]
  4017da:	4298      	cmp	r0, r3
  4017dc:	d802      	bhi.n	4017e4 <__sfvwrite_r+0x1a8>
  4017de:	6963      	ldr	r3, [r4, #20]
  4017e0:	429f      	cmp	r7, r3
  4017e2:	d25d      	bcs.n	4018a0 <__sfvwrite_r+0x264>
  4017e4:	45b8      	cmp	r8, r7
  4017e6:	bf28      	it	cs
  4017e8:	46b8      	movcs	r8, r7
  4017ea:	4642      	mov	r2, r8
  4017ec:	4649      	mov	r1, r9
  4017ee:	f000 fce9 	bl	4021c4 <memmove>
  4017f2:	68a3      	ldr	r3, [r4, #8]
  4017f4:	6822      	ldr	r2, [r4, #0]
  4017f6:	eba3 0308 	sub.w	r3, r3, r8
  4017fa:	4442      	add	r2, r8
  4017fc:	60a3      	str	r3, [r4, #8]
  4017fe:	6022      	str	r2, [r4, #0]
  401800:	b10b      	cbz	r3, 401806 <__sfvwrite_r+0x1ca>
  401802:	46c2      	mov	sl, r8
  401804:	e779      	b.n	4016fa <__sfvwrite_r+0xbe>
  401806:	4621      	mov	r1, r4
  401808:	9800      	ldr	r0, [sp, #0]
  40180a:	f7ff fd37 	bl	40127c <_fflush_r>
  40180e:	2800      	cmp	r0, #0
  401810:	d192      	bne.n	401738 <__sfvwrite_r+0xfc>
  401812:	46c2      	mov	sl, r8
  401814:	e771      	b.n	4016fa <__sfvwrite_r+0xbe>
  401816:	465a      	mov	r2, fp
  401818:	4629      	mov	r1, r5
  40181a:	f000 fcd3 	bl	4021c4 <memmove>
  40181e:	68a2      	ldr	r2, [r4, #8]
  401820:	6823      	ldr	r3, [r4, #0]
  401822:	eba2 020b 	sub.w	r2, r2, fp
  401826:	445b      	add	r3, fp
  401828:	60a2      	str	r2, [r4, #8]
  40182a:	6023      	str	r3, [r4, #0]
  40182c:	e7af      	b.n	40178e <__sfvwrite_r+0x152>
  40182e:	6820      	ldr	r0, [r4, #0]
  401830:	46b8      	mov	r8, r7
  401832:	46ba      	mov	sl, r7
  401834:	46bb      	mov	fp, r7
  401836:	e755      	b.n	4016e4 <__sfvwrite_r+0xa8>
  401838:	6962      	ldr	r2, [r4, #20]
  40183a:	6820      	ldr	r0, [r4, #0]
  40183c:	6921      	ldr	r1, [r4, #16]
  40183e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  401842:	eba0 0a01 	sub.w	sl, r0, r1
  401846:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40184a:	f10a 0001 	add.w	r0, sl, #1
  40184e:	ea4f 0868 	mov.w	r8, r8, asr #1
  401852:	4438      	add	r0, r7
  401854:	4540      	cmp	r0, r8
  401856:	4642      	mov	r2, r8
  401858:	bf84      	itt	hi
  40185a:	4680      	movhi	r8, r0
  40185c:	4642      	movhi	r2, r8
  40185e:	055b      	lsls	r3, r3, #21
  401860:	d544      	bpl.n	4018ec <__sfvwrite_r+0x2b0>
  401862:	4611      	mov	r1, r2
  401864:	9800      	ldr	r0, [sp, #0]
  401866:	f000 f913 	bl	401a90 <_malloc_r>
  40186a:	4683      	mov	fp, r0
  40186c:	2800      	cmp	r0, #0
  40186e:	d055      	beq.n	40191c <__sfvwrite_r+0x2e0>
  401870:	4652      	mov	r2, sl
  401872:	6921      	ldr	r1, [r4, #16]
  401874:	f000 fc0c 	bl	402090 <memcpy>
  401878:	89a3      	ldrh	r3, [r4, #12]
  40187a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40187e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401882:	81a3      	strh	r3, [r4, #12]
  401884:	eb0b 000a 	add.w	r0, fp, sl
  401888:	eba8 030a 	sub.w	r3, r8, sl
  40188c:	f8c4 b010 	str.w	fp, [r4, #16]
  401890:	f8c4 8014 	str.w	r8, [r4, #20]
  401894:	6020      	str	r0, [r4, #0]
  401896:	60a3      	str	r3, [r4, #8]
  401898:	46b8      	mov	r8, r7
  40189a:	46ba      	mov	sl, r7
  40189c:	46bb      	mov	fp, r7
  40189e:	e721      	b.n	4016e4 <__sfvwrite_r+0xa8>
  4018a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4018a4:	42b9      	cmp	r1, r7
  4018a6:	bf28      	it	cs
  4018a8:	4639      	movcs	r1, r7
  4018aa:	464a      	mov	r2, r9
  4018ac:	fb91 f1f3 	sdiv	r1, r1, r3
  4018b0:	9800      	ldr	r0, [sp, #0]
  4018b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4018b4:	fb03 f301 	mul.w	r3, r3, r1
  4018b8:	69e1      	ldr	r1, [r4, #28]
  4018ba:	47b0      	blx	r6
  4018bc:	f1b0 0a00 	subs.w	sl, r0, #0
  4018c0:	f73f af1b 	bgt.w	4016fa <__sfvwrite_r+0xbe>
  4018c4:	e738      	b.n	401738 <__sfvwrite_r+0xfc>
  4018c6:	461a      	mov	r2, r3
  4018c8:	4629      	mov	r1, r5
  4018ca:	9301      	str	r3, [sp, #4]
  4018cc:	f000 fc7a 	bl	4021c4 <memmove>
  4018d0:	6822      	ldr	r2, [r4, #0]
  4018d2:	9b01      	ldr	r3, [sp, #4]
  4018d4:	9800      	ldr	r0, [sp, #0]
  4018d6:	441a      	add	r2, r3
  4018d8:	6022      	str	r2, [r4, #0]
  4018da:	4621      	mov	r1, r4
  4018dc:	f7ff fcce 	bl	40127c <_fflush_r>
  4018e0:	9b01      	ldr	r3, [sp, #4]
  4018e2:	2800      	cmp	r0, #0
  4018e4:	f47f af28 	bne.w	401738 <__sfvwrite_r+0xfc>
  4018e8:	461f      	mov	r7, r3
  4018ea:	e750      	b.n	40178e <__sfvwrite_r+0x152>
  4018ec:	9800      	ldr	r0, [sp, #0]
  4018ee:	f000 fcd9 	bl	4022a4 <_realloc_r>
  4018f2:	4683      	mov	fp, r0
  4018f4:	2800      	cmp	r0, #0
  4018f6:	d1c5      	bne.n	401884 <__sfvwrite_r+0x248>
  4018f8:	9d00      	ldr	r5, [sp, #0]
  4018fa:	6921      	ldr	r1, [r4, #16]
  4018fc:	4628      	mov	r0, r5
  4018fe:	f7ff fdb7 	bl	401470 <_free_r>
  401902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401906:	220c      	movs	r2, #12
  401908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40190c:	602a      	str	r2, [r5, #0]
  40190e:	e715      	b.n	40173c <__sfvwrite_r+0x100>
  401910:	f106 0901 	add.w	r9, r6, #1
  401914:	e722      	b.n	40175c <__sfvwrite_r+0x120>
  401916:	f04f 30ff 	mov.w	r0, #4294967295
  40191a:	e6bf      	b.n	40169c <__sfvwrite_r+0x60>
  40191c:	9a00      	ldr	r2, [sp, #0]
  40191e:	230c      	movs	r3, #12
  401920:	6013      	str	r3, [r2, #0]
  401922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401926:	e709      	b.n	40173c <__sfvwrite_r+0x100>
  401928:	7ffffc00 	.word	0x7ffffc00

0040192c <_fwalk_reent>:
  40192c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401930:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401934:	d01f      	beq.n	401976 <_fwalk_reent+0x4a>
  401936:	4688      	mov	r8, r1
  401938:	4606      	mov	r6, r0
  40193a:	f04f 0900 	mov.w	r9, #0
  40193e:	687d      	ldr	r5, [r7, #4]
  401940:	68bc      	ldr	r4, [r7, #8]
  401942:	3d01      	subs	r5, #1
  401944:	d411      	bmi.n	40196a <_fwalk_reent+0x3e>
  401946:	89a3      	ldrh	r3, [r4, #12]
  401948:	2b01      	cmp	r3, #1
  40194a:	f105 35ff 	add.w	r5, r5, #4294967295
  40194e:	d908      	bls.n	401962 <_fwalk_reent+0x36>
  401950:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401954:	3301      	adds	r3, #1
  401956:	4621      	mov	r1, r4
  401958:	4630      	mov	r0, r6
  40195a:	d002      	beq.n	401962 <_fwalk_reent+0x36>
  40195c:	47c0      	blx	r8
  40195e:	ea49 0900 	orr.w	r9, r9, r0
  401962:	1c6b      	adds	r3, r5, #1
  401964:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401968:	d1ed      	bne.n	401946 <_fwalk_reent+0x1a>
  40196a:	683f      	ldr	r7, [r7, #0]
  40196c:	2f00      	cmp	r7, #0
  40196e:	d1e6      	bne.n	40193e <_fwalk_reent+0x12>
  401970:	4648      	mov	r0, r9
  401972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401976:	46b9      	mov	r9, r7
  401978:	4648      	mov	r0, r9
  40197a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40197e:	bf00      	nop

00401980 <__retarget_lock_init_recursive>:
  401980:	4770      	bx	lr
  401982:	bf00      	nop

00401984 <__retarget_lock_close_recursive>:
  401984:	4770      	bx	lr
  401986:	bf00      	nop

00401988 <__retarget_lock_acquire_recursive>:
  401988:	4770      	bx	lr
  40198a:	bf00      	nop

0040198c <__retarget_lock_release_recursive>:
  40198c:	4770      	bx	lr
  40198e:	bf00      	nop

00401990 <__swhatbuf_r>:
  401990:	b570      	push	{r4, r5, r6, lr}
  401992:	460c      	mov	r4, r1
  401994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401998:	2900      	cmp	r1, #0
  40199a:	b090      	sub	sp, #64	; 0x40
  40199c:	4615      	mov	r5, r2
  40199e:	461e      	mov	r6, r3
  4019a0:	db14      	blt.n	4019cc <__swhatbuf_r+0x3c>
  4019a2:	aa01      	add	r2, sp, #4
  4019a4:	f000 ffca 	bl	40293c <_fstat_r>
  4019a8:	2800      	cmp	r0, #0
  4019aa:	db0f      	blt.n	4019cc <__swhatbuf_r+0x3c>
  4019ac:	9a02      	ldr	r2, [sp, #8]
  4019ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4019b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4019b6:	fab2 f282 	clz	r2, r2
  4019ba:	0952      	lsrs	r2, r2, #5
  4019bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4019c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4019c4:	6032      	str	r2, [r6, #0]
  4019c6:	602b      	str	r3, [r5, #0]
  4019c8:	b010      	add	sp, #64	; 0x40
  4019ca:	bd70      	pop	{r4, r5, r6, pc}
  4019cc:	89a2      	ldrh	r2, [r4, #12]
  4019ce:	2300      	movs	r3, #0
  4019d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4019d4:	6033      	str	r3, [r6, #0]
  4019d6:	d004      	beq.n	4019e2 <__swhatbuf_r+0x52>
  4019d8:	2240      	movs	r2, #64	; 0x40
  4019da:	4618      	mov	r0, r3
  4019dc:	602a      	str	r2, [r5, #0]
  4019de:	b010      	add	sp, #64	; 0x40
  4019e0:	bd70      	pop	{r4, r5, r6, pc}
  4019e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4019e6:	602b      	str	r3, [r5, #0]
  4019e8:	b010      	add	sp, #64	; 0x40
  4019ea:	bd70      	pop	{r4, r5, r6, pc}

004019ec <__smakebuf_r>:
  4019ec:	898a      	ldrh	r2, [r1, #12]
  4019ee:	0792      	lsls	r2, r2, #30
  4019f0:	460b      	mov	r3, r1
  4019f2:	d506      	bpl.n	401a02 <__smakebuf_r+0x16>
  4019f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4019f8:	2101      	movs	r1, #1
  4019fa:	601a      	str	r2, [r3, #0]
  4019fc:	611a      	str	r2, [r3, #16]
  4019fe:	6159      	str	r1, [r3, #20]
  401a00:	4770      	bx	lr
  401a02:	b5f0      	push	{r4, r5, r6, r7, lr}
  401a04:	b083      	sub	sp, #12
  401a06:	ab01      	add	r3, sp, #4
  401a08:	466a      	mov	r2, sp
  401a0a:	460c      	mov	r4, r1
  401a0c:	4606      	mov	r6, r0
  401a0e:	f7ff ffbf 	bl	401990 <__swhatbuf_r>
  401a12:	9900      	ldr	r1, [sp, #0]
  401a14:	4605      	mov	r5, r0
  401a16:	4630      	mov	r0, r6
  401a18:	f000 f83a 	bl	401a90 <_malloc_r>
  401a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a20:	b1d8      	cbz	r0, 401a5a <__smakebuf_r+0x6e>
  401a22:	9a01      	ldr	r2, [sp, #4]
  401a24:	4f15      	ldr	r7, [pc, #84]	; (401a7c <__smakebuf_r+0x90>)
  401a26:	9900      	ldr	r1, [sp, #0]
  401a28:	63f7      	str	r7, [r6, #60]	; 0x3c
  401a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a2e:	81a3      	strh	r3, [r4, #12]
  401a30:	6020      	str	r0, [r4, #0]
  401a32:	6120      	str	r0, [r4, #16]
  401a34:	6161      	str	r1, [r4, #20]
  401a36:	b91a      	cbnz	r2, 401a40 <__smakebuf_r+0x54>
  401a38:	432b      	orrs	r3, r5
  401a3a:	81a3      	strh	r3, [r4, #12]
  401a3c:	b003      	add	sp, #12
  401a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a40:	4630      	mov	r0, r6
  401a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401a46:	f000 ff8d 	bl	402964 <_isatty_r>
  401a4a:	b1a0      	cbz	r0, 401a76 <__smakebuf_r+0x8a>
  401a4c:	89a3      	ldrh	r3, [r4, #12]
  401a4e:	f023 0303 	bic.w	r3, r3, #3
  401a52:	f043 0301 	orr.w	r3, r3, #1
  401a56:	b21b      	sxth	r3, r3
  401a58:	e7ee      	b.n	401a38 <__smakebuf_r+0x4c>
  401a5a:	059a      	lsls	r2, r3, #22
  401a5c:	d4ee      	bmi.n	401a3c <__smakebuf_r+0x50>
  401a5e:	f023 0303 	bic.w	r3, r3, #3
  401a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401a66:	f043 0302 	orr.w	r3, r3, #2
  401a6a:	2101      	movs	r1, #1
  401a6c:	81a3      	strh	r3, [r4, #12]
  401a6e:	6022      	str	r2, [r4, #0]
  401a70:	6122      	str	r2, [r4, #16]
  401a72:	6161      	str	r1, [r4, #20]
  401a74:	e7e2      	b.n	401a3c <__smakebuf_r+0x50>
  401a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a7a:	e7dd      	b.n	401a38 <__smakebuf_r+0x4c>
  401a7c:	004012d1 	.word	0x004012d1

00401a80 <malloc>:
  401a80:	4b02      	ldr	r3, [pc, #8]	; (401a8c <malloc+0xc>)
  401a82:	4601      	mov	r1, r0
  401a84:	6818      	ldr	r0, [r3, #0]
  401a86:	f000 b803 	b.w	401a90 <_malloc_r>
  401a8a:	bf00      	nop
  401a8c:	20000004 	.word	0x20000004

00401a90 <_malloc_r>:
  401a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a94:	f101 060b 	add.w	r6, r1, #11
  401a98:	2e16      	cmp	r6, #22
  401a9a:	b083      	sub	sp, #12
  401a9c:	4605      	mov	r5, r0
  401a9e:	f240 809e 	bls.w	401bde <_malloc_r+0x14e>
  401aa2:	f036 0607 	bics.w	r6, r6, #7
  401aa6:	f100 80bd 	bmi.w	401c24 <_malloc_r+0x194>
  401aaa:	42b1      	cmp	r1, r6
  401aac:	f200 80ba 	bhi.w	401c24 <_malloc_r+0x194>
  401ab0:	f000 fbec 	bl	40228c <__malloc_lock>
  401ab4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401ab8:	f0c0 8293 	bcc.w	401fe2 <_malloc_r+0x552>
  401abc:	0a73      	lsrs	r3, r6, #9
  401abe:	f000 80b8 	beq.w	401c32 <_malloc_r+0x1a2>
  401ac2:	2b04      	cmp	r3, #4
  401ac4:	f200 8179 	bhi.w	401dba <_malloc_r+0x32a>
  401ac8:	09b3      	lsrs	r3, r6, #6
  401aca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401ace:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401ad2:	00c3      	lsls	r3, r0, #3
  401ad4:	4fbf      	ldr	r7, [pc, #764]	; (401dd4 <_malloc_r+0x344>)
  401ad6:	443b      	add	r3, r7
  401ad8:	f1a3 0108 	sub.w	r1, r3, #8
  401adc:	685c      	ldr	r4, [r3, #4]
  401ade:	42a1      	cmp	r1, r4
  401ae0:	d106      	bne.n	401af0 <_malloc_r+0x60>
  401ae2:	e00c      	b.n	401afe <_malloc_r+0x6e>
  401ae4:	2a00      	cmp	r2, #0
  401ae6:	f280 80aa 	bge.w	401c3e <_malloc_r+0x1ae>
  401aea:	68e4      	ldr	r4, [r4, #12]
  401aec:	42a1      	cmp	r1, r4
  401aee:	d006      	beq.n	401afe <_malloc_r+0x6e>
  401af0:	6863      	ldr	r3, [r4, #4]
  401af2:	f023 0303 	bic.w	r3, r3, #3
  401af6:	1b9a      	subs	r2, r3, r6
  401af8:	2a0f      	cmp	r2, #15
  401afa:	ddf3      	ble.n	401ae4 <_malloc_r+0x54>
  401afc:	4670      	mov	r0, lr
  401afe:	693c      	ldr	r4, [r7, #16]
  401b00:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401de8 <_malloc_r+0x358>
  401b04:	4574      	cmp	r4, lr
  401b06:	f000 81ab 	beq.w	401e60 <_malloc_r+0x3d0>
  401b0a:	6863      	ldr	r3, [r4, #4]
  401b0c:	f023 0303 	bic.w	r3, r3, #3
  401b10:	1b9a      	subs	r2, r3, r6
  401b12:	2a0f      	cmp	r2, #15
  401b14:	f300 8190 	bgt.w	401e38 <_malloc_r+0x3a8>
  401b18:	2a00      	cmp	r2, #0
  401b1a:	f8c7 e014 	str.w	lr, [r7, #20]
  401b1e:	f8c7 e010 	str.w	lr, [r7, #16]
  401b22:	f280 809d 	bge.w	401c60 <_malloc_r+0x1d0>
  401b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401b2a:	f080 8161 	bcs.w	401df0 <_malloc_r+0x360>
  401b2e:	08db      	lsrs	r3, r3, #3
  401b30:	f103 0c01 	add.w	ip, r3, #1
  401b34:	1099      	asrs	r1, r3, #2
  401b36:	687a      	ldr	r2, [r7, #4]
  401b38:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401b3c:	f8c4 8008 	str.w	r8, [r4, #8]
  401b40:	2301      	movs	r3, #1
  401b42:	408b      	lsls	r3, r1
  401b44:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401b48:	4313      	orrs	r3, r2
  401b4a:	3908      	subs	r1, #8
  401b4c:	60e1      	str	r1, [r4, #12]
  401b4e:	607b      	str	r3, [r7, #4]
  401b50:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401b54:	f8c8 400c 	str.w	r4, [r8, #12]
  401b58:	1082      	asrs	r2, r0, #2
  401b5a:	2401      	movs	r4, #1
  401b5c:	4094      	lsls	r4, r2
  401b5e:	429c      	cmp	r4, r3
  401b60:	f200 808b 	bhi.w	401c7a <_malloc_r+0x1ea>
  401b64:	421c      	tst	r4, r3
  401b66:	d106      	bne.n	401b76 <_malloc_r+0xe6>
  401b68:	f020 0003 	bic.w	r0, r0, #3
  401b6c:	0064      	lsls	r4, r4, #1
  401b6e:	421c      	tst	r4, r3
  401b70:	f100 0004 	add.w	r0, r0, #4
  401b74:	d0fa      	beq.n	401b6c <_malloc_r+0xdc>
  401b76:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401b7a:	46cc      	mov	ip, r9
  401b7c:	4680      	mov	r8, r0
  401b7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401b82:	459c      	cmp	ip, r3
  401b84:	d107      	bne.n	401b96 <_malloc_r+0x106>
  401b86:	e16d      	b.n	401e64 <_malloc_r+0x3d4>
  401b88:	2a00      	cmp	r2, #0
  401b8a:	f280 817b 	bge.w	401e84 <_malloc_r+0x3f4>
  401b8e:	68db      	ldr	r3, [r3, #12]
  401b90:	459c      	cmp	ip, r3
  401b92:	f000 8167 	beq.w	401e64 <_malloc_r+0x3d4>
  401b96:	6859      	ldr	r1, [r3, #4]
  401b98:	f021 0103 	bic.w	r1, r1, #3
  401b9c:	1b8a      	subs	r2, r1, r6
  401b9e:	2a0f      	cmp	r2, #15
  401ba0:	ddf2      	ble.n	401b88 <_malloc_r+0xf8>
  401ba2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401ba6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401baa:	9300      	str	r3, [sp, #0]
  401bac:	199c      	adds	r4, r3, r6
  401bae:	4628      	mov	r0, r5
  401bb0:	f046 0601 	orr.w	r6, r6, #1
  401bb4:	f042 0501 	orr.w	r5, r2, #1
  401bb8:	605e      	str	r6, [r3, #4]
  401bba:	f8c8 c00c 	str.w	ip, [r8, #12]
  401bbe:	f8cc 8008 	str.w	r8, [ip, #8]
  401bc2:	617c      	str	r4, [r7, #20]
  401bc4:	613c      	str	r4, [r7, #16]
  401bc6:	f8c4 e00c 	str.w	lr, [r4, #12]
  401bca:	f8c4 e008 	str.w	lr, [r4, #8]
  401bce:	6065      	str	r5, [r4, #4]
  401bd0:	505a      	str	r2, [r3, r1]
  401bd2:	f000 fb61 	bl	402298 <__malloc_unlock>
  401bd6:	9b00      	ldr	r3, [sp, #0]
  401bd8:	f103 0408 	add.w	r4, r3, #8
  401bdc:	e01e      	b.n	401c1c <_malloc_r+0x18c>
  401bde:	2910      	cmp	r1, #16
  401be0:	d820      	bhi.n	401c24 <_malloc_r+0x194>
  401be2:	f000 fb53 	bl	40228c <__malloc_lock>
  401be6:	2610      	movs	r6, #16
  401be8:	2318      	movs	r3, #24
  401bea:	2002      	movs	r0, #2
  401bec:	4f79      	ldr	r7, [pc, #484]	; (401dd4 <_malloc_r+0x344>)
  401bee:	443b      	add	r3, r7
  401bf0:	f1a3 0208 	sub.w	r2, r3, #8
  401bf4:	685c      	ldr	r4, [r3, #4]
  401bf6:	4294      	cmp	r4, r2
  401bf8:	f000 813d 	beq.w	401e76 <_malloc_r+0x3e6>
  401bfc:	6863      	ldr	r3, [r4, #4]
  401bfe:	68e1      	ldr	r1, [r4, #12]
  401c00:	68a6      	ldr	r6, [r4, #8]
  401c02:	f023 0303 	bic.w	r3, r3, #3
  401c06:	4423      	add	r3, r4
  401c08:	4628      	mov	r0, r5
  401c0a:	685a      	ldr	r2, [r3, #4]
  401c0c:	60f1      	str	r1, [r6, #12]
  401c0e:	f042 0201 	orr.w	r2, r2, #1
  401c12:	608e      	str	r6, [r1, #8]
  401c14:	605a      	str	r2, [r3, #4]
  401c16:	f000 fb3f 	bl	402298 <__malloc_unlock>
  401c1a:	3408      	adds	r4, #8
  401c1c:	4620      	mov	r0, r4
  401c1e:	b003      	add	sp, #12
  401c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c24:	2400      	movs	r4, #0
  401c26:	230c      	movs	r3, #12
  401c28:	4620      	mov	r0, r4
  401c2a:	602b      	str	r3, [r5, #0]
  401c2c:	b003      	add	sp, #12
  401c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c32:	2040      	movs	r0, #64	; 0x40
  401c34:	f44f 7300 	mov.w	r3, #512	; 0x200
  401c38:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401c3c:	e74a      	b.n	401ad4 <_malloc_r+0x44>
  401c3e:	4423      	add	r3, r4
  401c40:	68e1      	ldr	r1, [r4, #12]
  401c42:	685a      	ldr	r2, [r3, #4]
  401c44:	68a6      	ldr	r6, [r4, #8]
  401c46:	f042 0201 	orr.w	r2, r2, #1
  401c4a:	60f1      	str	r1, [r6, #12]
  401c4c:	4628      	mov	r0, r5
  401c4e:	608e      	str	r6, [r1, #8]
  401c50:	605a      	str	r2, [r3, #4]
  401c52:	f000 fb21 	bl	402298 <__malloc_unlock>
  401c56:	3408      	adds	r4, #8
  401c58:	4620      	mov	r0, r4
  401c5a:	b003      	add	sp, #12
  401c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c60:	4423      	add	r3, r4
  401c62:	4628      	mov	r0, r5
  401c64:	685a      	ldr	r2, [r3, #4]
  401c66:	f042 0201 	orr.w	r2, r2, #1
  401c6a:	605a      	str	r2, [r3, #4]
  401c6c:	f000 fb14 	bl	402298 <__malloc_unlock>
  401c70:	3408      	adds	r4, #8
  401c72:	4620      	mov	r0, r4
  401c74:	b003      	add	sp, #12
  401c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c7a:	68bc      	ldr	r4, [r7, #8]
  401c7c:	6863      	ldr	r3, [r4, #4]
  401c7e:	f023 0803 	bic.w	r8, r3, #3
  401c82:	45b0      	cmp	r8, r6
  401c84:	d304      	bcc.n	401c90 <_malloc_r+0x200>
  401c86:	eba8 0306 	sub.w	r3, r8, r6
  401c8a:	2b0f      	cmp	r3, #15
  401c8c:	f300 8085 	bgt.w	401d9a <_malloc_r+0x30a>
  401c90:	f8df 9158 	ldr.w	r9, [pc, #344]	; 401dec <_malloc_r+0x35c>
  401c94:	4b50      	ldr	r3, [pc, #320]	; (401dd8 <_malloc_r+0x348>)
  401c96:	f8d9 2000 	ldr.w	r2, [r9]
  401c9a:	681b      	ldr	r3, [r3, #0]
  401c9c:	3201      	adds	r2, #1
  401c9e:	4433      	add	r3, r6
  401ca0:	eb04 0a08 	add.w	sl, r4, r8
  401ca4:	f000 8155 	beq.w	401f52 <_malloc_r+0x4c2>
  401ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401cac:	330f      	adds	r3, #15
  401cae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401cb2:	f02b 0b0f 	bic.w	fp, fp, #15
  401cb6:	4659      	mov	r1, fp
  401cb8:	4628      	mov	r0, r5
  401cba:	f000 fc99 	bl	4025f0 <_sbrk_r>
  401cbe:	1c41      	adds	r1, r0, #1
  401cc0:	4602      	mov	r2, r0
  401cc2:	f000 80fc 	beq.w	401ebe <_malloc_r+0x42e>
  401cc6:	4582      	cmp	sl, r0
  401cc8:	f200 80f7 	bhi.w	401eba <_malloc_r+0x42a>
  401ccc:	4b43      	ldr	r3, [pc, #268]	; (401ddc <_malloc_r+0x34c>)
  401cce:	6819      	ldr	r1, [r3, #0]
  401cd0:	4459      	add	r1, fp
  401cd2:	6019      	str	r1, [r3, #0]
  401cd4:	f000 814d 	beq.w	401f72 <_malloc_r+0x4e2>
  401cd8:	f8d9 0000 	ldr.w	r0, [r9]
  401cdc:	3001      	adds	r0, #1
  401cde:	bf1b      	ittet	ne
  401ce0:	eba2 0a0a 	subne.w	sl, r2, sl
  401ce4:	4451      	addne	r1, sl
  401ce6:	f8c9 2000 	streq.w	r2, [r9]
  401cea:	6019      	strne	r1, [r3, #0]
  401cec:	f012 0107 	ands.w	r1, r2, #7
  401cf0:	f000 8115 	beq.w	401f1e <_malloc_r+0x48e>
  401cf4:	f1c1 0008 	rsb	r0, r1, #8
  401cf8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401cfc:	4402      	add	r2, r0
  401cfe:	3108      	adds	r1, #8
  401d00:	eb02 090b 	add.w	r9, r2, fp
  401d04:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401d08:	eba1 0909 	sub.w	r9, r1, r9
  401d0c:	4649      	mov	r1, r9
  401d0e:	4628      	mov	r0, r5
  401d10:	9301      	str	r3, [sp, #4]
  401d12:	9200      	str	r2, [sp, #0]
  401d14:	f000 fc6c 	bl	4025f0 <_sbrk_r>
  401d18:	1c43      	adds	r3, r0, #1
  401d1a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  401d1e:	f000 8143 	beq.w	401fa8 <_malloc_r+0x518>
  401d22:	1a80      	subs	r0, r0, r2
  401d24:	4448      	add	r0, r9
  401d26:	f040 0001 	orr.w	r0, r0, #1
  401d2a:	6819      	ldr	r1, [r3, #0]
  401d2c:	60ba      	str	r2, [r7, #8]
  401d2e:	4449      	add	r1, r9
  401d30:	42bc      	cmp	r4, r7
  401d32:	6050      	str	r0, [r2, #4]
  401d34:	6019      	str	r1, [r3, #0]
  401d36:	d017      	beq.n	401d68 <_malloc_r+0x2d8>
  401d38:	f1b8 0f0f 	cmp.w	r8, #15
  401d3c:	f240 80fb 	bls.w	401f36 <_malloc_r+0x4a6>
  401d40:	6860      	ldr	r0, [r4, #4]
  401d42:	f1a8 020c 	sub.w	r2, r8, #12
  401d46:	f022 0207 	bic.w	r2, r2, #7
  401d4a:	eb04 0e02 	add.w	lr, r4, r2
  401d4e:	f000 0001 	and.w	r0, r0, #1
  401d52:	f04f 0c05 	mov.w	ip, #5
  401d56:	4310      	orrs	r0, r2
  401d58:	2a0f      	cmp	r2, #15
  401d5a:	6060      	str	r0, [r4, #4]
  401d5c:	f8ce c004 	str.w	ip, [lr, #4]
  401d60:	f8ce c008 	str.w	ip, [lr, #8]
  401d64:	f200 8117 	bhi.w	401f96 <_malloc_r+0x506>
  401d68:	4b1d      	ldr	r3, [pc, #116]	; (401de0 <_malloc_r+0x350>)
  401d6a:	68bc      	ldr	r4, [r7, #8]
  401d6c:	681a      	ldr	r2, [r3, #0]
  401d6e:	4291      	cmp	r1, r2
  401d70:	bf88      	it	hi
  401d72:	6019      	strhi	r1, [r3, #0]
  401d74:	4b1b      	ldr	r3, [pc, #108]	; (401de4 <_malloc_r+0x354>)
  401d76:	681a      	ldr	r2, [r3, #0]
  401d78:	4291      	cmp	r1, r2
  401d7a:	6862      	ldr	r2, [r4, #4]
  401d7c:	bf88      	it	hi
  401d7e:	6019      	strhi	r1, [r3, #0]
  401d80:	f022 0203 	bic.w	r2, r2, #3
  401d84:	4296      	cmp	r6, r2
  401d86:	eba2 0306 	sub.w	r3, r2, r6
  401d8a:	d801      	bhi.n	401d90 <_malloc_r+0x300>
  401d8c:	2b0f      	cmp	r3, #15
  401d8e:	dc04      	bgt.n	401d9a <_malloc_r+0x30a>
  401d90:	4628      	mov	r0, r5
  401d92:	f000 fa81 	bl	402298 <__malloc_unlock>
  401d96:	2400      	movs	r4, #0
  401d98:	e740      	b.n	401c1c <_malloc_r+0x18c>
  401d9a:	19a2      	adds	r2, r4, r6
  401d9c:	f043 0301 	orr.w	r3, r3, #1
  401da0:	f046 0601 	orr.w	r6, r6, #1
  401da4:	6066      	str	r6, [r4, #4]
  401da6:	4628      	mov	r0, r5
  401da8:	60ba      	str	r2, [r7, #8]
  401daa:	6053      	str	r3, [r2, #4]
  401dac:	f000 fa74 	bl	402298 <__malloc_unlock>
  401db0:	3408      	adds	r4, #8
  401db2:	4620      	mov	r0, r4
  401db4:	b003      	add	sp, #12
  401db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dba:	2b14      	cmp	r3, #20
  401dbc:	d971      	bls.n	401ea2 <_malloc_r+0x412>
  401dbe:	2b54      	cmp	r3, #84	; 0x54
  401dc0:	f200 80a3 	bhi.w	401f0a <_malloc_r+0x47a>
  401dc4:	0b33      	lsrs	r3, r6, #12
  401dc6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  401dca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  401dce:	00c3      	lsls	r3, r0, #3
  401dd0:	e680      	b.n	401ad4 <_malloc_r+0x44>
  401dd2:	bf00      	nop
  401dd4:	20000434 	.word	0x20000434
  401dd8:	20000908 	.word	0x20000908
  401ddc:	200008d8 	.word	0x200008d8
  401de0:	20000900 	.word	0x20000900
  401de4:	20000904 	.word	0x20000904
  401de8:	2000043c 	.word	0x2000043c
  401dec:	2000083c 	.word	0x2000083c
  401df0:	0a5a      	lsrs	r2, r3, #9
  401df2:	2a04      	cmp	r2, #4
  401df4:	d95b      	bls.n	401eae <_malloc_r+0x41e>
  401df6:	2a14      	cmp	r2, #20
  401df8:	f200 80ae 	bhi.w	401f58 <_malloc_r+0x4c8>
  401dfc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401e00:	00c9      	lsls	r1, r1, #3
  401e02:	325b      	adds	r2, #91	; 0x5b
  401e04:	eb07 0c01 	add.w	ip, r7, r1
  401e08:	5879      	ldr	r1, [r7, r1]
  401e0a:	f1ac 0c08 	sub.w	ip, ip, #8
  401e0e:	458c      	cmp	ip, r1
  401e10:	f000 8088 	beq.w	401f24 <_malloc_r+0x494>
  401e14:	684a      	ldr	r2, [r1, #4]
  401e16:	f022 0203 	bic.w	r2, r2, #3
  401e1a:	4293      	cmp	r3, r2
  401e1c:	d273      	bcs.n	401f06 <_malloc_r+0x476>
  401e1e:	6889      	ldr	r1, [r1, #8]
  401e20:	458c      	cmp	ip, r1
  401e22:	d1f7      	bne.n	401e14 <_malloc_r+0x384>
  401e24:	f8dc 200c 	ldr.w	r2, [ip, #12]
  401e28:	687b      	ldr	r3, [r7, #4]
  401e2a:	60e2      	str	r2, [r4, #12]
  401e2c:	f8c4 c008 	str.w	ip, [r4, #8]
  401e30:	6094      	str	r4, [r2, #8]
  401e32:	f8cc 400c 	str.w	r4, [ip, #12]
  401e36:	e68f      	b.n	401b58 <_malloc_r+0xc8>
  401e38:	19a1      	adds	r1, r4, r6
  401e3a:	f046 0c01 	orr.w	ip, r6, #1
  401e3e:	f042 0601 	orr.w	r6, r2, #1
  401e42:	f8c4 c004 	str.w	ip, [r4, #4]
  401e46:	4628      	mov	r0, r5
  401e48:	6179      	str	r1, [r7, #20]
  401e4a:	6139      	str	r1, [r7, #16]
  401e4c:	f8c1 e00c 	str.w	lr, [r1, #12]
  401e50:	f8c1 e008 	str.w	lr, [r1, #8]
  401e54:	604e      	str	r6, [r1, #4]
  401e56:	50e2      	str	r2, [r4, r3]
  401e58:	f000 fa1e 	bl	402298 <__malloc_unlock>
  401e5c:	3408      	adds	r4, #8
  401e5e:	e6dd      	b.n	401c1c <_malloc_r+0x18c>
  401e60:	687b      	ldr	r3, [r7, #4]
  401e62:	e679      	b.n	401b58 <_malloc_r+0xc8>
  401e64:	f108 0801 	add.w	r8, r8, #1
  401e68:	f018 0f03 	tst.w	r8, #3
  401e6c:	f10c 0c08 	add.w	ip, ip, #8
  401e70:	f47f ae85 	bne.w	401b7e <_malloc_r+0xee>
  401e74:	e02d      	b.n	401ed2 <_malloc_r+0x442>
  401e76:	68dc      	ldr	r4, [r3, #12]
  401e78:	42a3      	cmp	r3, r4
  401e7a:	bf08      	it	eq
  401e7c:	3002      	addeq	r0, #2
  401e7e:	f43f ae3e 	beq.w	401afe <_malloc_r+0x6e>
  401e82:	e6bb      	b.n	401bfc <_malloc_r+0x16c>
  401e84:	4419      	add	r1, r3
  401e86:	461c      	mov	r4, r3
  401e88:	684a      	ldr	r2, [r1, #4]
  401e8a:	68db      	ldr	r3, [r3, #12]
  401e8c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  401e90:	f042 0201 	orr.w	r2, r2, #1
  401e94:	604a      	str	r2, [r1, #4]
  401e96:	4628      	mov	r0, r5
  401e98:	60f3      	str	r3, [r6, #12]
  401e9a:	609e      	str	r6, [r3, #8]
  401e9c:	f000 f9fc 	bl	402298 <__malloc_unlock>
  401ea0:	e6bc      	b.n	401c1c <_malloc_r+0x18c>
  401ea2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  401ea6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  401eaa:	00c3      	lsls	r3, r0, #3
  401eac:	e612      	b.n	401ad4 <_malloc_r+0x44>
  401eae:	099a      	lsrs	r2, r3, #6
  401eb0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  401eb4:	00c9      	lsls	r1, r1, #3
  401eb6:	3238      	adds	r2, #56	; 0x38
  401eb8:	e7a4      	b.n	401e04 <_malloc_r+0x374>
  401eba:	42bc      	cmp	r4, r7
  401ebc:	d054      	beq.n	401f68 <_malloc_r+0x4d8>
  401ebe:	68bc      	ldr	r4, [r7, #8]
  401ec0:	6862      	ldr	r2, [r4, #4]
  401ec2:	f022 0203 	bic.w	r2, r2, #3
  401ec6:	e75d      	b.n	401d84 <_malloc_r+0x2f4>
  401ec8:	f859 3908 	ldr.w	r3, [r9], #-8
  401ecc:	4599      	cmp	r9, r3
  401ece:	f040 8086 	bne.w	401fde <_malloc_r+0x54e>
  401ed2:	f010 0f03 	tst.w	r0, #3
  401ed6:	f100 30ff 	add.w	r0, r0, #4294967295
  401eda:	d1f5      	bne.n	401ec8 <_malloc_r+0x438>
  401edc:	687b      	ldr	r3, [r7, #4]
  401ede:	ea23 0304 	bic.w	r3, r3, r4
  401ee2:	607b      	str	r3, [r7, #4]
  401ee4:	0064      	lsls	r4, r4, #1
  401ee6:	429c      	cmp	r4, r3
  401ee8:	f63f aec7 	bhi.w	401c7a <_malloc_r+0x1ea>
  401eec:	2c00      	cmp	r4, #0
  401eee:	f43f aec4 	beq.w	401c7a <_malloc_r+0x1ea>
  401ef2:	421c      	tst	r4, r3
  401ef4:	4640      	mov	r0, r8
  401ef6:	f47f ae3e 	bne.w	401b76 <_malloc_r+0xe6>
  401efa:	0064      	lsls	r4, r4, #1
  401efc:	421c      	tst	r4, r3
  401efe:	f100 0004 	add.w	r0, r0, #4
  401f02:	d0fa      	beq.n	401efa <_malloc_r+0x46a>
  401f04:	e637      	b.n	401b76 <_malloc_r+0xe6>
  401f06:	468c      	mov	ip, r1
  401f08:	e78c      	b.n	401e24 <_malloc_r+0x394>
  401f0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401f0e:	d815      	bhi.n	401f3c <_malloc_r+0x4ac>
  401f10:	0bf3      	lsrs	r3, r6, #15
  401f12:	f103 0078 	add.w	r0, r3, #120	; 0x78
  401f16:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  401f1a:	00c3      	lsls	r3, r0, #3
  401f1c:	e5da      	b.n	401ad4 <_malloc_r+0x44>
  401f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401f22:	e6ed      	b.n	401d00 <_malloc_r+0x270>
  401f24:	687b      	ldr	r3, [r7, #4]
  401f26:	1092      	asrs	r2, r2, #2
  401f28:	2101      	movs	r1, #1
  401f2a:	fa01 f202 	lsl.w	r2, r1, r2
  401f2e:	4313      	orrs	r3, r2
  401f30:	607b      	str	r3, [r7, #4]
  401f32:	4662      	mov	r2, ip
  401f34:	e779      	b.n	401e2a <_malloc_r+0x39a>
  401f36:	2301      	movs	r3, #1
  401f38:	6053      	str	r3, [r2, #4]
  401f3a:	e729      	b.n	401d90 <_malloc_r+0x300>
  401f3c:	f240 5254 	movw	r2, #1364	; 0x554
  401f40:	4293      	cmp	r3, r2
  401f42:	d822      	bhi.n	401f8a <_malloc_r+0x4fa>
  401f44:	0cb3      	lsrs	r3, r6, #18
  401f46:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  401f4a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  401f4e:	00c3      	lsls	r3, r0, #3
  401f50:	e5c0      	b.n	401ad4 <_malloc_r+0x44>
  401f52:	f103 0b10 	add.w	fp, r3, #16
  401f56:	e6ae      	b.n	401cb6 <_malloc_r+0x226>
  401f58:	2a54      	cmp	r2, #84	; 0x54
  401f5a:	d829      	bhi.n	401fb0 <_malloc_r+0x520>
  401f5c:	0b1a      	lsrs	r2, r3, #12
  401f5e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  401f62:	00c9      	lsls	r1, r1, #3
  401f64:	326e      	adds	r2, #110	; 0x6e
  401f66:	e74d      	b.n	401e04 <_malloc_r+0x374>
  401f68:	4b20      	ldr	r3, [pc, #128]	; (401fec <_malloc_r+0x55c>)
  401f6a:	6819      	ldr	r1, [r3, #0]
  401f6c:	4459      	add	r1, fp
  401f6e:	6019      	str	r1, [r3, #0]
  401f70:	e6b2      	b.n	401cd8 <_malloc_r+0x248>
  401f72:	f3ca 000b 	ubfx	r0, sl, #0, #12
  401f76:	2800      	cmp	r0, #0
  401f78:	f47f aeae 	bne.w	401cd8 <_malloc_r+0x248>
  401f7c:	eb08 030b 	add.w	r3, r8, fp
  401f80:	68ba      	ldr	r2, [r7, #8]
  401f82:	f043 0301 	orr.w	r3, r3, #1
  401f86:	6053      	str	r3, [r2, #4]
  401f88:	e6ee      	b.n	401d68 <_malloc_r+0x2d8>
  401f8a:	207f      	movs	r0, #127	; 0x7f
  401f8c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  401f90:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  401f94:	e59e      	b.n	401ad4 <_malloc_r+0x44>
  401f96:	f104 0108 	add.w	r1, r4, #8
  401f9a:	4628      	mov	r0, r5
  401f9c:	9300      	str	r3, [sp, #0]
  401f9e:	f7ff fa67 	bl	401470 <_free_r>
  401fa2:	9b00      	ldr	r3, [sp, #0]
  401fa4:	6819      	ldr	r1, [r3, #0]
  401fa6:	e6df      	b.n	401d68 <_malloc_r+0x2d8>
  401fa8:	2001      	movs	r0, #1
  401faa:	f04f 0900 	mov.w	r9, #0
  401fae:	e6bc      	b.n	401d2a <_malloc_r+0x29a>
  401fb0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401fb4:	d805      	bhi.n	401fc2 <_malloc_r+0x532>
  401fb6:	0bda      	lsrs	r2, r3, #15
  401fb8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  401fbc:	00c9      	lsls	r1, r1, #3
  401fbe:	3277      	adds	r2, #119	; 0x77
  401fc0:	e720      	b.n	401e04 <_malloc_r+0x374>
  401fc2:	f240 5154 	movw	r1, #1364	; 0x554
  401fc6:	428a      	cmp	r2, r1
  401fc8:	d805      	bhi.n	401fd6 <_malloc_r+0x546>
  401fca:	0c9a      	lsrs	r2, r3, #18
  401fcc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  401fd0:	00c9      	lsls	r1, r1, #3
  401fd2:	327c      	adds	r2, #124	; 0x7c
  401fd4:	e716      	b.n	401e04 <_malloc_r+0x374>
  401fd6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  401fda:	227e      	movs	r2, #126	; 0x7e
  401fdc:	e712      	b.n	401e04 <_malloc_r+0x374>
  401fde:	687b      	ldr	r3, [r7, #4]
  401fe0:	e780      	b.n	401ee4 <_malloc_r+0x454>
  401fe2:	08f0      	lsrs	r0, r6, #3
  401fe4:	f106 0308 	add.w	r3, r6, #8
  401fe8:	e600      	b.n	401bec <_malloc_r+0x15c>
  401fea:	bf00      	nop
  401fec:	200008d8 	.word	0x200008d8

00401ff0 <memchr>:
  401ff0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401ff4:	2a10      	cmp	r2, #16
  401ff6:	db2b      	blt.n	402050 <memchr+0x60>
  401ff8:	f010 0f07 	tst.w	r0, #7
  401ffc:	d008      	beq.n	402010 <memchr+0x20>
  401ffe:	f810 3b01 	ldrb.w	r3, [r0], #1
  402002:	3a01      	subs	r2, #1
  402004:	428b      	cmp	r3, r1
  402006:	d02d      	beq.n	402064 <memchr+0x74>
  402008:	f010 0f07 	tst.w	r0, #7
  40200c:	b342      	cbz	r2, 402060 <memchr+0x70>
  40200e:	d1f6      	bne.n	401ffe <memchr+0xe>
  402010:	b4f0      	push	{r4, r5, r6, r7}
  402012:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402016:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40201a:	f022 0407 	bic.w	r4, r2, #7
  40201e:	f07f 0700 	mvns.w	r7, #0
  402022:	2300      	movs	r3, #0
  402024:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402028:	3c08      	subs	r4, #8
  40202a:	ea85 0501 	eor.w	r5, r5, r1
  40202e:	ea86 0601 	eor.w	r6, r6, r1
  402032:	fa85 f547 	uadd8	r5, r5, r7
  402036:	faa3 f587 	sel	r5, r3, r7
  40203a:	fa86 f647 	uadd8	r6, r6, r7
  40203e:	faa5 f687 	sel	r6, r5, r7
  402042:	b98e      	cbnz	r6, 402068 <memchr+0x78>
  402044:	d1ee      	bne.n	402024 <memchr+0x34>
  402046:	bcf0      	pop	{r4, r5, r6, r7}
  402048:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40204c:	f002 0207 	and.w	r2, r2, #7
  402050:	b132      	cbz	r2, 402060 <memchr+0x70>
  402052:	f810 3b01 	ldrb.w	r3, [r0], #1
  402056:	3a01      	subs	r2, #1
  402058:	ea83 0301 	eor.w	r3, r3, r1
  40205c:	b113      	cbz	r3, 402064 <memchr+0x74>
  40205e:	d1f8      	bne.n	402052 <memchr+0x62>
  402060:	2000      	movs	r0, #0
  402062:	4770      	bx	lr
  402064:	3801      	subs	r0, #1
  402066:	4770      	bx	lr
  402068:	2d00      	cmp	r5, #0
  40206a:	bf06      	itte	eq
  40206c:	4635      	moveq	r5, r6
  40206e:	3803      	subeq	r0, #3
  402070:	3807      	subne	r0, #7
  402072:	f015 0f01 	tst.w	r5, #1
  402076:	d107      	bne.n	402088 <memchr+0x98>
  402078:	3001      	adds	r0, #1
  40207a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40207e:	bf02      	ittt	eq
  402080:	3001      	addeq	r0, #1
  402082:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402086:	3001      	addeq	r0, #1
  402088:	bcf0      	pop	{r4, r5, r6, r7}
  40208a:	3801      	subs	r0, #1
  40208c:	4770      	bx	lr
  40208e:	bf00      	nop

00402090 <memcpy>:
  402090:	4684      	mov	ip, r0
  402092:	ea41 0300 	orr.w	r3, r1, r0
  402096:	f013 0303 	ands.w	r3, r3, #3
  40209a:	d16d      	bne.n	402178 <memcpy+0xe8>
  40209c:	3a40      	subs	r2, #64	; 0x40
  40209e:	d341      	bcc.n	402124 <memcpy+0x94>
  4020a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4020a4:	f840 3b04 	str.w	r3, [r0], #4
  4020a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4020ac:	f840 3b04 	str.w	r3, [r0], #4
  4020b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4020b4:	f840 3b04 	str.w	r3, [r0], #4
  4020b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4020bc:	f840 3b04 	str.w	r3, [r0], #4
  4020c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4020c4:	f840 3b04 	str.w	r3, [r0], #4
  4020c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4020cc:	f840 3b04 	str.w	r3, [r0], #4
  4020d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4020d4:	f840 3b04 	str.w	r3, [r0], #4
  4020d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4020dc:	f840 3b04 	str.w	r3, [r0], #4
  4020e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4020e4:	f840 3b04 	str.w	r3, [r0], #4
  4020e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4020ec:	f840 3b04 	str.w	r3, [r0], #4
  4020f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4020f4:	f840 3b04 	str.w	r3, [r0], #4
  4020f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4020fc:	f840 3b04 	str.w	r3, [r0], #4
  402100:	f851 3b04 	ldr.w	r3, [r1], #4
  402104:	f840 3b04 	str.w	r3, [r0], #4
  402108:	f851 3b04 	ldr.w	r3, [r1], #4
  40210c:	f840 3b04 	str.w	r3, [r0], #4
  402110:	f851 3b04 	ldr.w	r3, [r1], #4
  402114:	f840 3b04 	str.w	r3, [r0], #4
  402118:	f851 3b04 	ldr.w	r3, [r1], #4
  40211c:	f840 3b04 	str.w	r3, [r0], #4
  402120:	3a40      	subs	r2, #64	; 0x40
  402122:	d2bd      	bcs.n	4020a0 <memcpy+0x10>
  402124:	3230      	adds	r2, #48	; 0x30
  402126:	d311      	bcc.n	40214c <memcpy+0xbc>
  402128:	f851 3b04 	ldr.w	r3, [r1], #4
  40212c:	f840 3b04 	str.w	r3, [r0], #4
  402130:	f851 3b04 	ldr.w	r3, [r1], #4
  402134:	f840 3b04 	str.w	r3, [r0], #4
  402138:	f851 3b04 	ldr.w	r3, [r1], #4
  40213c:	f840 3b04 	str.w	r3, [r0], #4
  402140:	f851 3b04 	ldr.w	r3, [r1], #4
  402144:	f840 3b04 	str.w	r3, [r0], #4
  402148:	3a10      	subs	r2, #16
  40214a:	d2ed      	bcs.n	402128 <memcpy+0x98>
  40214c:	320c      	adds	r2, #12
  40214e:	d305      	bcc.n	40215c <memcpy+0xcc>
  402150:	f851 3b04 	ldr.w	r3, [r1], #4
  402154:	f840 3b04 	str.w	r3, [r0], #4
  402158:	3a04      	subs	r2, #4
  40215a:	d2f9      	bcs.n	402150 <memcpy+0xc0>
  40215c:	3204      	adds	r2, #4
  40215e:	d008      	beq.n	402172 <memcpy+0xe2>
  402160:	07d2      	lsls	r2, r2, #31
  402162:	bf1c      	itt	ne
  402164:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402168:	f800 3b01 	strbne.w	r3, [r0], #1
  40216c:	d301      	bcc.n	402172 <memcpy+0xe2>
  40216e:	880b      	ldrh	r3, [r1, #0]
  402170:	8003      	strh	r3, [r0, #0]
  402172:	4660      	mov	r0, ip
  402174:	4770      	bx	lr
  402176:	bf00      	nop
  402178:	2a08      	cmp	r2, #8
  40217a:	d313      	bcc.n	4021a4 <memcpy+0x114>
  40217c:	078b      	lsls	r3, r1, #30
  40217e:	d08d      	beq.n	40209c <memcpy+0xc>
  402180:	f010 0303 	ands.w	r3, r0, #3
  402184:	d08a      	beq.n	40209c <memcpy+0xc>
  402186:	f1c3 0304 	rsb	r3, r3, #4
  40218a:	1ad2      	subs	r2, r2, r3
  40218c:	07db      	lsls	r3, r3, #31
  40218e:	bf1c      	itt	ne
  402190:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402194:	f800 3b01 	strbne.w	r3, [r0], #1
  402198:	d380      	bcc.n	40209c <memcpy+0xc>
  40219a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40219e:	f820 3b02 	strh.w	r3, [r0], #2
  4021a2:	e77b      	b.n	40209c <memcpy+0xc>
  4021a4:	3a04      	subs	r2, #4
  4021a6:	d3d9      	bcc.n	40215c <memcpy+0xcc>
  4021a8:	3a01      	subs	r2, #1
  4021aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4021ae:	f800 3b01 	strb.w	r3, [r0], #1
  4021b2:	d2f9      	bcs.n	4021a8 <memcpy+0x118>
  4021b4:	780b      	ldrb	r3, [r1, #0]
  4021b6:	7003      	strb	r3, [r0, #0]
  4021b8:	784b      	ldrb	r3, [r1, #1]
  4021ba:	7043      	strb	r3, [r0, #1]
  4021bc:	788b      	ldrb	r3, [r1, #2]
  4021be:	7083      	strb	r3, [r0, #2]
  4021c0:	4660      	mov	r0, ip
  4021c2:	4770      	bx	lr

004021c4 <memmove>:
  4021c4:	4288      	cmp	r0, r1
  4021c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4021c8:	d90d      	bls.n	4021e6 <memmove+0x22>
  4021ca:	188b      	adds	r3, r1, r2
  4021cc:	4298      	cmp	r0, r3
  4021ce:	d20a      	bcs.n	4021e6 <memmove+0x22>
  4021d0:	1884      	adds	r4, r0, r2
  4021d2:	2a00      	cmp	r2, #0
  4021d4:	d051      	beq.n	40227a <memmove+0xb6>
  4021d6:	4622      	mov	r2, r4
  4021d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4021dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4021e0:	4299      	cmp	r1, r3
  4021e2:	d1f9      	bne.n	4021d8 <memmove+0x14>
  4021e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4021e6:	2a0f      	cmp	r2, #15
  4021e8:	d948      	bls.n	40227c <memmove+0xb8>
  4021ea:	ea41 0300 	orr.w	r3, r1, r0
  4021ee:	079b      	lsls	r3, r3, #30
  4021f0:	d146      	bne.n	402280 <memmove+0xbc>
  4021f2:	f100 0410 	add.w	r4, r0, #16
  4021f6:	f101 0310 	add.w	r3, r1, #16
  4021fa:	4615      	mov	r5, r2
  4021fc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  402200:	f844 6c10 	str.w	r6, [r4, #-16]
  402204:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  402208:	f844 6c0c 	str.w	r6, [r4, #-12]
  40220c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  402210:	f844 6c08 	str.w	r6, [r4, #-8]
  402214:	3d10      	subs	r5, #16
  402216:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40221a:	f844 6c04 	str.w	r6, [r4, #-4]
  40221e:	2d0f      	cmp	r5, #15
  402220:	f103 0310 	add.w	r3, r3, #16
  402224:	f104 0410 	add.w	r4, r4, #16
  402228:	d8e8      	bhi.n	4021fc <memmove+0x38>
  40222a:	f1a2 0310 	sub.w	r3, r2, #16
  40222e:	f023 030f 	bic.w	r3, r3, #15
  402232:	f002 0e0f 	and.w	lr, r2, #15
  402236:	3310      	adds	r3, #16
  402238:	f1be 0f03 	cmp.w	lr, #3
  40223c:	4419      	add	r1, r3
  40223e:	4403      	add	r3, r0
  402240:	d921      	bls.n	402286 <memmove+0xc2>
  402242:	1f1e      	subs	r6, r3, #4
  402244:	460d      	mov	r5, r1
  402246:	4674      	mov	r4, lr
  402248:	3c04      	subs	r4, #4
  40224a:	f855 7b04 	ldr.w	r7, [r5], #4
  40224e:	f846 7f04 	str.w	r7, [r6, #4]!
  402252:	2c03      	cmp	r4, #3
  402254:	d8f8      	bhi.n	402248 <memmove+0x84>
  402256:	f1ae 0404 	sub.w	r4, lr, #4
  40225a:	f024 0403 	bic.w	r4, r4, #3
  40225e:	3404      	adds	r4, #4
  402260:	4421      	add	r1, r4
  402262:	4423      	add	r3, r4
  402264:	f002 0203 	and.w	r2, r2, #3
  402268:	b162      	cbz	r2, 402284 <memmove+0xc0>
  40226a:	3b01      	subs	r3, #1
  40226c:	440a      	add	r2, r1
  40226e:	f811 4b01 	ldrb.w	r4, [r1], #1
  402272:	f803 4f01 	strb.w	r4, [r3, #1]!
  402276:	428a      	cmp	r2, r1
  402278:	d1f9      	bne.n	40226e <memmove+0xaa>
  40227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40227c:	4603      	mov	r3, r0
  40227e:	e7f3      	b.n	402268 <memmove+0xa4>
  402280:	4603      	mov	r3, r0
  402282:	e7f2      	b.n	40226a <memmove+0xa6>
  402284:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402286:	4672      	mov	r2, lr
  402288:	e7ee      	b.n	402268 <memmove+0xa4>
  40228a:	bf00      	nop

0040228c <__malloc_lock>:
  40228c:	4801      	ldr	r0, [pc, #4]	; (402294 <__malloc_lock+0x8>)
  40228e:	f7ff bb7b 	b.w	401988 <__retarget_lock_acquire_recursive>
  402292:	bf00      	nop
  402294:	20000940 	.word	0x20000940

00402298 <__malloc_unlock>:
  402298:	4801      	ldr	r0, [pc, #4]	; (4022a0 <__malloc_unlock+0x8>)
  40229a:	f7ff bb77 	b.w	40198c <__retarget_lock_release_recursive>
  40229e:	bf00      	nop
  4022a0:	20000940 	.word	0x20000940

004022a4 <_realloc_r>:
  4022a4:	2900      	cmp	r1, #0
  4022a6:	f000 8095 	beq.w	4023d4 <_realloc_r+0x130>
  4022aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4022ae:	460d      	mov	r5, r1
  4022b0:	4616      	mov	r6, r2
  4022b2:	b083      	sub	sp, #12
  4022b4:	4680      	mov	r8, r0
  4022b6:	f106 070b 	add.w	r7, r6, #11
  4022ba:	f7ff ffe7 	bl	40228c <__malloc_lock>
  4022be:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4022c2:	2f16      	cmp	r7, #22
  4022c4:	f02e 0403 	bic.w	r4, lr, #3
  4022c8:	f1a5 0908 	sub.w	r9, r5, #8
  4022cc:	d83c      	bhi.n	402348 <_realloc_r+0xa4>
  4022ce:	2210      	movs	r2, #16
  4022d0:	4617      	mov	r7, r2
  4022d2:	42be      	cmp	r6, r7
  4022d4:	d83d      	bhi.n	402352 <_realloc_r+0xae>
  4022d6:	4294      	cmp	r4, r2
  4022d8:	da43      	bge.n	402362 <_realloc_r+0xbe>
  4022da:	4bc4      	ldr	r3, [pc, #784]	; (4025ec <_realloc_r+0x348>)
  4022dc:	6899      	ldr	r1, [r3, #8]
  4022de:	eb09 0004 	add.w	r0, r9, r4
  4022e2:	4288      	cmp	r0, r1
  4022e4:	f000 80b4 	beq.w	402450 <_realloc_r+0x1ac>
  4022e8:	6843      	ldr	r3, [r0, #4]
  4022ea:	f023 0101 	bic.w	r1, r3, #1
  4022ee:	4401      	add	r1, r0
  4022f0:	6849      	ldr	r1, [r1, #4]
  4022f2:	07c9      	lsls	r1, r1, #31
  4022f4:	d54c      	bpl.n	402390 <_realloc_r+0xec>
  4022f6:	f01e 0f01 	tst.w	lr, #1
  4022fa:	f000 809b 	beq.w	402434 <_realloc_r+0x190>
  4022fe:	4631      	mov	r1, r6
  402300:	4640      	mov	r0, r8
  402302:	f7ff fbc5 	bl	401a90 <_malloc_r>
  402306:	4606      	mov	r6, r0
  402308:	2800      	cmp	r0, #0
  40230a:	d03a      	beq.n	402382 <_realloc_r+0xde>
  40230c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  402310:	f023 0301 	bic.w	r3, r3, #1
  402314:	444b      	add	r3, r9
  402316:	f1a0 0208 	sub.w	r2, r0, #8
  40231a:	429a      	cmp	r2, r3
  40231c:	f000 8121 	beq.w	402562 <_realloc_r+0x2be>
  402320:	1f22      	subs	r2, r4, #4
  402322:	2a24      	cmp	r2, #36	; 0x24
  402324:	f200 8107 	bhi.w	402536 <_realloc_r+0x292>
  402328:	2a13      	cmp	r2, #19
  40232a:	f200 80db 	bhi.w	4024e4 <_realloc_r+0x240>
  40232e:	4603      	mov	r3, r0
  402330:	462a      	mov	r2, r5
  402332:	6811      	ldr	r1, [r2, #0]
  402334:	6019      	str	r1, [r3, #0]
  402336:	6851      	ldr	r1, [r2, #4]
  402338:	6059      	str	r1, [r3, #4]
  40233a:	6892      	ldr	r2, [r2, #8]
  40233c:	609a      	str	r2, [r3, #8]
  40233e:	4629      	mov	r1, r5
  402340:	4640      	mov	r0, r8
  402342:	f7ff f895 	bl	401470 <_free_r>
  402346:	e01c      	b.n	402382 <_realloc_r+0xde>
  402348:	f027 0707 	bic.w	r7, r7, #7
  40234c:	2f00      	cmp	r7, #0
  40234e:	463a      	mov	r2, r7
  402350:	dabf      	bge.n	4022d2 <_realloc_r+0x2e>
  402352:	2600      	movs	r6, #0
  402354:	230c      	movs	r3, #12
  402356:	4630      	mov	r0, r6
  402358:	f8c8 3000 	str.w	r3, [r8]
  40235c:	b003      	add	sp, #12
  40235e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402362:	462e      	mov	r6, r5
  402364:	1be3      	subs	r3, r4, r7
  402366:	2b0f      	cmp	r3, #15
  402368:	d81e      	bhi.n	4023a8 <_realloc_r+0x104>
  40236a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40236e:	f003 0301 	and.w	r3, r3, #1
  402372:	4323      	orrs	r3, r4
  402374:	444c      	add	r4, r9
  402376:	f8c9 3004 	str.w	r3, [r9, #4]
  40237a:	6863      	ldr	r3, [r4, #4]
  40237c:	f043 0301 	orr.w	r3, r3, #1
  402380:	6063      	str	r3, [r4, #4]
  402382:	4640      	mov	r0, r8
  402384:	f7ff ff88 	bl	402298 <__malloc_unlock>
  402388:	4630      	mov	r0, r6
  40238a:	b003      	add	sp, #12
  40238c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402390:	f023 0303 	bic.w	r3, r3, #3
  402394:	18e1      	adds	r1, r4, r3
  402396:	4291      	cmp	r1, r2
  402398:	db1f      	blt.n	4023da <_realloc_r+0x136>
  40239a:	68c3      	ldr	r3, [r0, #12]
  40239c:	6882      	ldr	r2, [r0, #8]
  40239e:	462e      	mov	r6, r5
  4023a0:	60d3      	str	r3, [r2, #12]
  4023a2:	460c      	mov	r4, r1
  4023a4:	609a      	str	r2, [r3, #8]
  4023a6:	e7dd      	b.n	402364 <_realloc_r+0xc0>
  4023a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4023ac:	eb09 0107 	add.w	r1, r9, r7
  4023b0:	f002 0201 	and.w	r2, r2, #1
  4023b4:	444c      	add	r4, r9
  4023b6:	f043 0301 	orr.w	r3, r3, #1
  4023ba:	4317      	orrs	r7, r2
  4023bc:	f8c9 7004 	str.w	r7, [r9, #4]
  4023c0:	604b      	str	r3, [r1, #4]
  4023c2:	6863      	ldr	r3, [r4, #4]
  4023c4:	f043 0301 	orr.w	r3, r3, #1
  4023c8:	3108      	adds	r1, #8
  4023ca:	6063      	str	r3, [r4, #4]
  4023cc:	4640      	mov	r0, r8
  4023ce:	f7ff f84f 	bl	401470 <_free_r>
  4023d2:	e7d6      	b.n	402382 <_realloc_r+0xde>
  4023d4:	4611      	mov	r1, r2
  4023d6:	f7ff bb5b 	b.w	401a90 <_malloc_r>
  4023da:	f01e 0f01 	tst.w	lr, #1
  4023de:	d18e      	bne.n	4022fe <_realloc_r+0x5a>
  4023e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4023e4:	eba9 0a01 	sub.w	sl, r9, r1
  4023e8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4023ec:	f021 0103 	bic.w	r1, r1, #3
  4023f0:	440b      	add	r3, r1
  4023f2:	4423      	add	r3, r4
  4023f4:	4293      	cmp	r3, r2
  4023f6:	db25      	blt.n	402444 <_realloc_r+0x1a0>
  4023f8:	68c2      	ldr	r2, [r0, #12]
  4023fa:	6881      	ldr	r1, [r0, #8]
  4023fc:	4656      	mov	r6, sl
  4023fe:	60ca      	str	r2, [r1, #12]
  402400:	6091      	str	r1, [r2, #8]
  402402:	f8da 100c 	ldr.w	r1, [sl, #12]
  402406:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40240a:	1f22      	subs	r2, r4, #4
  40240c:	2a24      	cmp	r2, #36	; 0x24
  40240e:	60c1      	str	r1, [r0, #12]
  402410:	6088      	str	r0, [r1, #8]
  402412:	f200 8094 	bhi.w	40253e <_realloc_r+0x29a>
  402416:	2a13      	cmp	r2, #19
  402418:	d96f      	bls.n	4024fa <_realloc_r+0x256>
  40241a:	6829      	ldr	r1, [r5, #0]
  40241c:	f8ca 1008 	str.w	r1, [sl, #8]
  402420:	6869      	ldr	r1, [r5, #4]
  402422:	f8ca 100c 	str.w	r1, [sl, #12]
  402426:	2a1b      	cmp	r2, #27
  402428:	f200 80a2 	bhi.w	402570 <_realloc_r+0x2cc>
  40242c:	3508      	adds	r5, #8
  40242e:	f10a 0210 	add.w	r2, sl, #16
  402432:	e063      	b.n	4024fc <_realloc_r+0x258>
  402434:	f855 3c08 	ldr.w	r3, [r5, #-8]
  402438:	eba9 0a03 	sub.w	sl, r9, r3
  40243c:	f8da 1004 	ldr.w	r1, [sl, #4]
  402440:	f021 0103 	bic.w	r1, r1, #3
  402444:	1863      	adds	r3, r4, r1
  402446:	4293      	cmp	r3, r2
  402448:	f6ff af59 	blt.w	4022fe <_realloc_r+0x5a>
  40244c:	4656      	mov	r6, sl
  40244e:	e7d8      	b.n	402402 <_realloc_r+0x15e>
  402450:	6841      	ldr	r1, [r0, #4]
  402452:	f021 0b03 	bic.w	fp, r1, #3
  402456:	44a3      	add	fp, r4
  402458:	f107 0010 	add.w	r0, r7, #16
  40245c:	4583      	cmp	fp, r0
  40245e:	da56      	bge.n	40250e <_realloc_r+0x26a>
  402460:	f01e 0f01 	tst.w	lr, #1
  402464:	f47f af4b 	bne.w	4022fe <_realloc_r+0x5a>
  402468:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40246c:	eba9 0a01 	sub.w	sl, r9, r1
  402470:	f8da 1004 	ldr.w	r1, [sl, #4]
  402474:	f021 0103 	bic.w	r1, r1, #3
  402478:	448b      	add	fp, r1
  40247a:	4558      	cmp	r0, fp
  40247c:	dce2      	bgt.n	402444 <_realloc_r+0x1a0>
  40247e:	4656      	mov	r6, sl
  402480:	f8da 100c 	ldr.w	r1, [sl, #12]
  402484:	f856 0f08 	ldr.w	r0, [r6, #8]!
  402488:	1f22      	subs	r2, r4, #4
  40248a:	2a24      	cmp	r2, #36	; 0x24
  40248c:	60c1      	str	r1, [r0, #12]
  40248e:	6088      	str	r0, [r1, #8]
  402490:	f200 808f 	bhi.w	4025b2 <_realloc_r+0x30e>
  402494:	2a13      	cmp	r2, #19
  402496:	f240 808a 	bls.w	4025ae <_realloc_r+0x30a>
  40249a:	6829      	ldr	r1, [r5, #0]
  40249c:	f8ca 1008 	str.w	r1, [sl, #8]
  4024a0:	6869      	ldr	r1, [r5, #4]
  4024a2:	f8ca 100c 	str.w	r1, [sl, #12]
  4024a6:	2a1b      	cmp	r2, #27
  4024a8:	f200 808a 	bhi.w	4025c0 <_realloc_r+0x31c>
  4024ac:	3508      	adds	r5, #8
  4024ae:	f10a 0210 	add.w	r2, sl, #16
  4024b2:	6829      	ldr	r1, [r5, #0]
  4024b4:	6011      	str	r1, [r2, #0]
  4024b6:	6869      	ldr	r1, [r5, #4]
  4024b8:	6051      	str	r1, [r2, #4]
  4024ba:	68a9      	ldr	r1, [r5, #8]
  4024bc:	6091      	str	r1, [r2, #8]
  4024be:	eb0a 0107 	add.w	r1, sl, r7
  4024c2:	ebab 0207 	sub.w	r2, fp, r7
  4024c6:	f042 0201 	orr.w	r2, r2, #1
  4024ca:	6099      	str	r1, [r3, #8]
  4024cc:	604a      	str	r2, [r1, #4]
  4024ce:	f8da 3004 	ldr.w	r3, [sl, #4]
  4024d2:	f003 0301 	and.w	r3, r3, #1
  4024d6:	431f      	orrs	r7, r3
  4024d8:	4640      	mov	r0, r8
  4024da:	f8ca 7004 	str.w	r7, [sl, #4]
  4024de:	f7ff fedb 	bl	402298 <__malloc_unlock>
  4024e2:	e751      	b.n	402388 <_realloc_r+0xe4>
  4024e4:	682b      	ldr	r3, [r5, #0]
  4024e6:	6003      	str	r3, [r0, #0]
  4024e8:	686b      	ldr	r3, [r5, #4]
  4024ea:	6043      	str	r3, [r0, #4]
  4024ec:	2a1b      	cmp	r2, #27
  4024ee:	d82d      	bhi.n	40254c <_realloc_r+0x2a8>
  4024f0:	f100 0308 	add.w	r3, r0, #8
  4024f4:	f105 0208 	add.w	r2, r5, #8
  4024f8:	e71b      	b.n	402332 <_realloc_r+0x8e>
  4024fa:	4632      	mov	r2, r6
  4024fc:	6829      	ldr	r1, [r5, #0]
  4024fe:	6011      	str	r1, [r2, #0]
  402500:	6869      	ldr	r1, [r5, #4]
  402502:	6051      	str	r1, [r2, #4]
  402504:	68a9      	ldr	r1, [r5, #8]
  402506:	6091      	str	r1, [r2, #8]
  402508:	461c      	mov	r4, r3
  40250a:	46d1      	mov	r9, sl
  40250c:	e72a      	b.n	402364 <_realloc_r+0xc0>
  40250e:	eb09 0107 	add.w	r1, r9, r7
  402512:	ebab 0b07 	sub.w	fp, fp, r7
  402516:	f04b 0201 	orr.w	r2, fp, #1
  40251a:	6099      	str	r1, [r3, #8]
  40251c:	604a      	str	r2, [r1, #4]
  40251e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  402522:	f003 0301 	and.w	r3, r3, #1
  402526:	431f      	orrs	r7, r3
  402528:	4640      	mov	r0, r8
  40252a:	f845 7c04 	str.w	r7, [r5, #-4]
  40252e:	f7ff feb3 	bl	402298 <__malloc_unlock>
  402532:	462e      	mov	r6, r5
  402534:	e728      	b.n	402388 <_realloc_r+0xe4>
  402536:	4629      	mov	r1, r5
  402538:	f7ff fe44 	bl	4021c4 <memmove>
  40253c:	e6ff      	b.n	40233e <_realloc_r+0x9a>
  40253e:	4629      	mov	r1, r5
  402540:	4630      	mov	r0, r6
  402542:	461c      	mov	r4, r3
  402544:	46d1      	mov	r9, sl
  402546:	f7ff fe3d 	bl	4021c4 <memmove>
  40254a:	e70b      	b.n	402364 <_realloc_r+0xc0>
  40254c:	68ab      	ldr	r3, [r5, #8]
  40254e:	6083      	str	r3, [r0, #8]
  402550:	68eb      	ldr	r3, [r5, #12]
  402552:	60c3      	str	r3, [r0, #12]
  402554:	2a24      	cmp	r2, #36	; 0x24
  402556:	d017      	beq.n	402588 <_realloc_r+0x2e4>
  402558:	f100 0310 	add.w	r3, r0, #16
  40255c:	f105 0210 	add.w	r2, r5, #16
  402560:	e6e7      	b.n	402332 <_realloc_r+0x8e>
  402562:	f850 3c04 	ldr.w	r3, [r0, #-4]
  402566:	f023 0303 	bic.w	r3, r3, #3
  40256a:	441c      	add	r4, r3
  40256c:	462e      	mov	r6, r5
  40256e:	e6f9      	b.n	402364 <_realloc_r+0xc0>
  402570:	68a9      	ldr	r1, [r5, #8]
  402572:	f8ca 1010 	str.w	r1, [sl, #16]
  402576:	68e9      	ldr	r1, [r5, #12]
  402578:	f8ca 1014 	str.w	r1, [sl, #20]
  40257c:	2a24      	cmp	r2, #36	; 0x24
  40257e:	d00c      	beq.n	40259a <_realloc_r+0x2f6>
  402580:	3510      	adds	r5, #16
  402582:	f10a 0218 	add.w	r2, sl, #24
  402586:	e7b9      	b.n	4024fc <_realloc_r+0x258>
  402588:	692b      	ldr	r3, [r5, #16]
  40258a:	6103      	str	r3, [r0, #16]
  40258c:	696b      	ldr	r3, [r5, #20]
  40258e:	6143      	str	r3, [r0, #20]
  402590:	f105 0218 	add.w	r2, r5, #24
  402594:	f100 0318 	add.w	r3, r0, #24
  402598:	e6cb      	b.n	402332 <_realloc_r+0x8e>
  40259a:	692a      	ldr	r2, [r5, #16]
  40259c:	f8ca 2018 	str.w	r2, [sl, #24]
  4025a0:	696a      	ldr	r2, [r5, #20]
  4025a2:	f8ca 201c 	str.w	r2, [sl, #28]
  4025a6:	3518      	adds	r5, #24
  4025a8:	f10a 0220 	add.w	r2, sl, #32
  4025ac:	e7a6      	b.n	4024fc <_realloc_r+0x258>
  4025ae:	4632      	mov	r2, r6
  4025b0:	e77f      	b.n	4024b2 <_realloc_r+0x20e>
  4025b2:	4629      	mov	r1, r5
  4025b4:	4630      	mov	r0, r6
  4025b6:	9301      	str	r3, [sp, #4]
  4025b8:	f7ff fe04 	bl	4021c4 <memmove>
  4025bc:	9b01      	ldr	r3, [sp, #4]
  4025be:	e77e      	b.n	4024be <_realloc_r+0x21a>
  4025c0:	68a9      	ldr	r1, [r5, #8]
  4025c2:	f8ca 1010 	str.w	r1, [sl, #16]
  4025c6:	68e9      	ldr	r1, [r5, #12]
  4025c8:	f8ca 1014 	str.w	r1, [sl, #20]
  4025cc:	2a24      	cmp	r2, #36	; 0x24
  4025ce:	d003      	beq.n	4025d8 <_realloc_r+0x334>
  4025d0:	3510      	adds	r5, #16
  4025d2:	f10a 0218 	add.w	r2, sl, #24
  4025d6:	e76c      	b.n	4024b2 <_realloc_r+0x20e>
  4025d8:	692a      	ldr	r2, [r5, #16]
  4025da:	f8ca 2018 	str.w	r2, [sl, #24]
  4025de:	696a      	ldr	r2, [r5, #20]
  4025e0:	f8ca 201c 	str.w	r2, [sl, #28]
  4025e4:	3518      	adds	r5, #24
  4025e6:	f10a 0220 	add.w	r2, sl, #32
  4025ea:	e762      	b.n	4024b2 <_realloc_r+0x20e>
  4025ec:	20000434 	.word	0x20000434

004025f0 <_sbrk_r>:
  4025f0:	b538      	push	{r3, r4, r5, lr}
  4025f2:	4c07      	ldr	r4, [pc, #28]	; (402610 <_sbrk_r+0x20>)
  4025f4:	2300      	movs	r3, #0
  4025f6:	4605      	mov	r5, r0
  4025f8:	4608      	mov	r0, r1
  4025fa:	6023      	str	r3, [r4, #0]
  4025fc:	f7fe fa36 	bl	400a6c <_sbrk>
  402600:	1c43      	adds	r3, r0, #1
  402602:	d000      	beq.n	402606 <_sbrk_r+0x16>
  402604:	bd38      	pop	{r3, r4, r5, pc}
  402606:	6823      	ldr	r3, [r4, #0]
  402608:	2b00      	cmp	r3, #0
  40260a:	d0fb      	beq.n	402604 <_sbrk_r+0x14>
  40260c:	602b      	str	r3, [r5, #0]
  40260e:	bd38      	pop	{r3, r4, r5, pc}
  402610:	20000954 	.word	0x20000954

00402614 <__sread>:
  402614:	b510      	push	{r4, lr}
  402616:	460c      	mov	r4, r1
  402618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40261c:	f000 f9ca 	bl	4029b4 <_read_r>
  402620:	2800      	cmp	r0, #0
  402622:	db03      	blt.n	40262c <__sread+0x18>
  402624:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402626:	4403      	add	r3, r0
  402628:	6523      	str	r3, [r4, #80]	; 0x50
  40262a:	bd10      	pop	{r4, pc}
  40262c:	89a3      	ldrh	r3, [r4, #12]
  40262e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402632:	81a3      	strh	r3, [r4, #12]
  402634:	bd10      	pop	{r4, pc}
  402636:	bf00      	nop

00402638 <__swrite>:
  402638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40263c:	4616      	mov	r6, r2
  40263e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  402642:	461f      	mov	r7, r3
  402644:	05d3      	lsls	r3, r2, #23
  402646:	460c      	mov	r4, r1
  402648:	4605      	mov	r5, r0
  40264a:	d507      	bpl.n	40265c <__swrite+0x24>
  40264c:	2200      	movs	r2, #0
  40264e:	2302      	movs	r3, #2
  402650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402654:	f000 f998 	bl	402988 <_lseek_r>
  402658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40265c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402660:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402664:	81a2      	strh	r2, [r4, #12]
  402666:	463b      	mov	r3, r7
  402668:	4632      	mov	r2, r6
  40266a:	4628      	mov	r0, r5
  40266c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402670:	f000 b814 	b.w	40269c <_write_r>

00402674 <__sseek>:
  402674:	b510      	push	{r4, lr}
  402676:	460c      	mov	r4, r1
  402678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40267c:	f000 f984 	bl	402988 <_lseek_r>
  402680:	89a3      	ldrh	r3, [r4, #12]
  402682:	1c42      	adds	r2, r0, #1
  402684:	bf0e      	itee	eq
  402686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40268a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40268e:	6520      	strne	r0, [r4, #80]	; 0x50
  402690:	81a3      	strh	r3, [r4, #12]
  402692:	bd10      	pop	{r4, pc}

00402694 <__sclose>:
  402694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402698:	f000 b8dc 	b.w	402854 <_close_r>

0040269c <_write_r>:
  40269c:	b570      	push	{r4, r5, r6, lr}
  40269e:	460d      	mov	r5, r1
  4026a0:	4c08      	ldr	r4, [pc, #32]	; (4026c4 <_write_r+0x28>)
  4026a2:	4611      	mov	r1, r2
  4026a4:	4606      	mov	r6, r0
  4026a6:	461a      	mov	r2, r3
  4026a8:	4628      	mov	r0, r5
  4026aa:	2300      	movs	r3, #0
  4026ac:	6023      	str	r3, [r4, #0]
  4026ae:	f7fd fd93 	bl	4001d8 <_write>
  4026b2:	1c43      	adds	r3, r0, #1
  4026b4:	d000      	beq.n	4026b8 <_write_r+0x1c>
  4026b6:	bd70      	pop	{r4, r5, r6, pc}
  4026b8:	6823      	ldr	r3, [r4, #0]
  4026ba:	2b00      	cmp	r3, #0
  4026bc:	d0fb      	beq.n	4026b6 <_write_r+0x1a>
  4026be:	6033      	str	r3, [r6, #0]
  4026c0:	bd70      	pop	{r4, r5, r6, pc}
  4026c2:	bf00      	nop
  4026c4:	20000954 	.word	0x20000954

004026c8 <__swsetup_r>:
  4026c8:	b538      	push	{r3, r4, r5, lr}
  4026ca:	4b30      	ldr	r3, [pc, #192]	; (40278c <__swsetup_r+0xc4>)
  4026cc:	681b      	ldr	r3, [r3, #0]
  4026ce:	4605      	mov	r5, r0
  4026d0:	460c      	mov	r4, r1
  4026d2:	b113      	cbz	r3, 4026da <__swsetup_r+0x12>
  4026d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4026d6:	2a00      	cmp	r2, #0
  4026d8:	d038      	beq.n	40274c <__swsetup_r+0x84>
  4026da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4026de:	b293      	uxth	r3, r2
  4026e0:	0718      	lsls	r0, r3, #28
  4026e2:	d50c      	bpl.n	4026fe <__swsetup_r+0x36>
  4026e4:	6920      	ldr	r0, [r4, #16]
  4026e6:	b1a8      	cbz	r0, 402714 <__swsetup_r+0x4c>
  4026e8:	f013 0201 	ands.w	r2, r3, #1
  4026ec:	d01e      	beq.n	40272c <__swsetup_r+0x64>
  4026ee:	6963      	ldr	r3, [r4, #20]
  4026f0:	2200      	movs	r2, #0
  4026f2:	425b      	negs	r3, r3
  4026f4:	61a3      	str	r3, [r4, #24]
  4026f6:	60a2      	str	r2, [r4, #8]
  4026f8:	b1f0      	cbz	r0, 402738 <__swsetup_r+0x70>
  4026fa:	2000      	movs	r0, #0
  4026fc:	bd38      	pop	{r3, r4, r5, pc}
  4026fe:	06d9      	lsls	r1, r3, #27
  402700:	d53c      	bpl.n	40277c <__swsetup_r+0xb4>
  402702:	0758      	lsls	r0, r3, #29
  402704:	d426      	bmi.n	402754 <__swsetup_r+0x8c>
  402706:	6920      	ldr	r0, [r4, #16]
  402708:	f042 0308 	orr.w	r3, r2, #8
  40270c:	81a3      	strh	r3, [r4, #12]
  40270e:	b29b      	uxth	r3, r3
  402710:	2800      	cmp	r0, #0
  402712:	d1e9      	bne.n	4026e8 <__swsetup_r+0x20>
  402714:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402718:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40271c:	d0e4      	beq.n	4026e8 <__swsetup_r+0x20>
  40271e:	4628      	mov	r0, r5
  402720:	4621      	mov	r1, r4
  402722:	f7ff f963 	bl	4019ec <__smakebuf_r>
  402726:	89a3      	ldrh	r3, [r4, #12]
  402728:	6920      	ldr	r0, [r4, #16]
  40272a:	e7dd      	b.n	4026e8 <__swsetup_r+0x20>
  40272c:	0799      	lsls	r1, r3, #30
  40272e:	bf58      	it	pl
  402730:	6962      	ldrpl	r2, [r4, #20]
  402732:	60a2      	str	r2, [r4, #8]
  402734:	2800      	cmp	r0, #0
  402736:	d1e0      	bne.n	4026fa <__swsetup_r+0x32>
  402738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40273c:	061a      	lsls	r2, r3, #24
  40273e:	d5dd      	bpl.n	4026fc <__swsetup_r+0x34>
  402740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402744:	81a3      	strh	r3, [r4, #12]
  402746:	f04f 30ff 	mov.w	r0, #4294967295
  40274a:	bd38      	pop	{r3, r4, r5, pc}
  40274c:	4618      	mov	r0, r3
  40274e:	f7fe fded 	bl	40132c <__sinit>
  402752:	e7c2      	b.n	4026da <__swsetup_r+0x12>
  402754:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402756:	b151      	cbz	r1, 40276e <__swsetup_r+0xa6>
  402758:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40275c:	4299      	cmp	r1, r3
  40275e:	d004      	beq.n	40276a <__swsetup_r+0xa2>
  402760:	4628      	mov	r0, r5
  402762:	f7fe fe85 	bl	401470 <_free_r>
  402766:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40276a:	2300      	movs	r3, #0
  40276c:	6323      	str	r3, [r4, #48]	; 0x30
  40276e:	2300      	movs	r3, #0
  402770:	6920      	ldr	r0, [r4, #16]
  402772:	6063      	str	r3, [r4, #4]
  402774:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402778:	6020      	str	r0, [r4, #0]
  40277a:	e7c5      	b.n	402708 <__swsetup_r+0x40>
  40277c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402780:	2309      	movs	r3, #9
  402782:	602b      	str	r3, [r5, #0]
  402784:	f04f 30ff 	mov.w	r0, #4294967295
  402788:	81a2      	strh	r2, [r4, #12]
  40278a:	bd38      	pop	{r3, r4, r5, pc}
  40278c:	20000004 	.word	0x20000004

00402790 <__register_exitproc>:
  402790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402794:	4d2c      	ldr	r5, [pc, #176]	; (402848 <__register_exitproc+0xb8>)
  402796:	4606      	mov	r6, r0
  402798:	6828      	ldr	r0, [r5, #0]
  40279a:	4698      	mov	r8, r3
  40279c:	460f      	mov	r7, r1
  40279e:	4691      	mov	r9, r2
  4027a0:	f7ff f8f2 	bl	401988 <__retarget_lock_acquire_recursive>
  4027a4:	4b29      	ldr	r3, [pc, #164]	; (40284c <__register_exitproc+0xbc>)
  4027a6:	681c      	ldr	r4, [r3, #0]
  4027a8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4027ac:	2b00      	cmp	r3, #0
  4027ae:	d03e      	beq.n	40282e <__register_exitproc+0x9e>
  4027b0:	685a      	ldr	r2, [r3, #4]
  4027b2:	2a1f      	cmp	r2, #31
  4027b4:	dc1c      	bgt.n	4027f0 <__register_exitproc+0x60>
  4027b6:	f102 0e01 	add.w	lr, r2, #1
  4027ba:	b176      	cbz	r6, 4027da <__register_exitproc+0x4a>
  4027bc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4027c0:	2401      	movs	r4, #1
  4027c2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4027c6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4027ca:	4094      	lsls	r4, r2
  4027cc:	4320      	orrs	r0, r4
  4027ce:	2e02      	cmp	r6, #2
  4027d0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4027d4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4027d8:	d023      	beq.n	402822 <__register_exitproc+0x92>
  4027da:	3202      	adds	r2, #2
  4027dc:	f8c3 e004 	str.w	lr, [r3, #4]
  4027e0:	6828      	ldr	r0, [r5, #0]
  4027e2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4027e6:	f7ff f8d1 	bl	40198c <__retarget_lock_release_recursive>
  4027ea:	2000      	movs	r0, #0
  4027ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4027f0:	4b17      	ldr	r3, [pc, #92]	; (402850 <__register_exitproc+0xc0>)
  4027f2:	b30b      	cbz	r3, 402838 <__register_exitproc+0xa8>
  4027f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4027f8:	f7ff f942 	bl	401a80 <malloc>
  4027fc:	4603      	mov	r3, r0
  4027fe:	b1d8      	cbz	r0, 402838 <__register_exitproc+0xa8>
  402800:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402804:	6002      	str	r2, [r0, #0]
  402806:	2100      	movs	r1, #0
  402808:	6041      	str	r1, [r0, #4]
  40280a:	460a      	mov	r2, r1
  40280c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402810:	f04f 0e01 	mov.w	lr, #1
  402814:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402818:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40281c:	2e00      	cmp	r6, #0
  40281e:	d0dc      	beq.n	4027da <__register_exitproc+0x4a>
  402820:	e7cc      	b.n	4027bc <__register_exitproc+0x2c>
  402822:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402826:	430c      	orrs	r4, r1
  402828:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40282c:	e7d5      	b.n	4027da <__register_exitproc+0x4a>
  40282e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402832:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402836:	e7bb      	b.n	4027b0 <__register_exitproc+0x20>
  402838:	6828      	ldr	r0, [r5, #0]
  40283a:	f7ff f8a7 	bl	40198c <__retarget_lock_release_recursive>
  40283e:	f04f 30ff 	mov.w	r0, #4294967295
  402842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402846:	bf00      	nop
  402848:	20000430 	.word	0x20000430
  40284c:	00402a30 	.word	0x00402a30
  402850:	00401a81 	.word	0x00401a81

00402854 <_close_r>:
  402854:	b538      	push	{r3, r4, r5, lr}
  402856:	4c07      	ldr	r4, [pc, #28]	; (402874 <_close_r+0x20>)
  402858:	2300      	movs	r3, #0
  40285a:	4605      	mov	r5, r0
  40285c:	4608      	mov	r0, r1
  40285e:	6023      	str	r3, [r4, #0]
  402860:	f7fe f920 	bl	400aa4 <_close>
  402864:	1c43      	adds	r3, r0, #1
  402866:	d000      	beq.n	40286a <_close_r+0x16>
  402868:	bd38      	pop	{r3, r4, r5, pc}
  40286a:	6823      	ldr	r3, [r4, #0]
  40286c:	2b00      	cmp	r3, #0
  40286e:	d0fb      	beq.n	402868 <_close_r+0x14>
  402870:	602b      	str	r3, [r5, #0]
  402872:	bd38      	pop	{r3, r4, r5, pc}
  402874:	20000954 	.word	0x20000954

00402878 <_fclose_r>:
  402878:	b570      	push	{r4, r5, r6, lr}
  40287a:	b159      	cbz	r1, 402894 <_fclose_r+0x1c>
  40287c:	4605      	mov	r5, r0
  40287e:	460c      	mov	r4, r1
  402880:	b110      	cbz	r0, 402888 <_fclose_r+0x10>
  402882:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402884:	2b00      	cmp	r3, #0
  402886:	d03c      	beq.n	402902 <_fclose_r+0x8a>
  402888:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40288a:	07d8      	lsls	r0, r3, #31
  40288c:	d505      	bpl.n	40289a <_fclose_r+0x22>
  40288e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402892:	b92b      	cbnz	r3, 4028a0 <_fclose_r+0x28>
  402894:	2600      	movs	r6, #0
  402896:	4630      	mov	r0, r6
  402898:	bd70      	pop	{r4, r5, r6, pc}
  40289a:	89a3      	ldrh	r3, [r4, #12]
  40289c:	0599      	lsls	r1, r3, #22
  40289e:	d53c      	bpl.n	40291a <_fclose_r+0xa2>
  4028a0:	4621      	mov	r1, r4
  4028a2:	4628      	mov	r0, r5
  4028a4:	f7fe fc4a 	bl	40113c <__sflush_r>
  4028a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4028aa:	4606      	mov	r6, r0
  4028ac:	b133      	cbz	r3, 4028bc <_fclose_r+0x44>
  4028ae:	69e1      	ldr	r1, [r4, #28]
  4028b0:	4628      	mov	r0, r5
  4028b2:	4798      	blx	r3
  4028b4:	2800      	cmp	r0, #0
  4028b6:	bfb8      	it	lt
  4028b8:	f04f 36ff 	movlt.w	r6, #4294967295
  4028bc:	89a3      	ldrh	r3, [r4, #12]
  4028be:	061a      	lsls	r2, r3, #24
  4028c0:	d422      	bmi.n	402908 <_fclose_r+0x90>
  4028c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4028c4:	b141      	cbz	r1, 4028d8 <_fclose_r+0x60>
  4028c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4028ca:	4299      	cmp	r1, r3
  4028cc:	d002      	beq.n	4028d4 <_fclose_r+0x5c>
  4028ce:	4628      	mov	r0, r5
  4028d0:	f7fe fdce 	bl	401470 <_free_r>
  4028d4:	2300      	movs	r3, #0
  4028d6:	6323      	str	r3, [r4, #48]	; 0x30
  4028d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4028da:	b121      	cbz	r1, 4028e6 <_fclose_r+0x6e>
  4028dc:	4628      	mov	r0, r5
  4028de:	f7fe fdc7 	bl	401470 <_free_r>
  4028e2:	2300      	movs	r3, #0
  4028e4:	6463      	str	r3, [r4, #68]	; 0x44
  4028e6:	f7fe fd4d 	bl	401384 <__sfp_lock_acquire>
  4028ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4028ec:	2200      	movs	r2, #0
  4028ee:	07db      	lsls	r3, r3, #31
  4028f0:	81a2      	strh	r2, [r4, #12]
  4028f2:	d50e      	bpl.n	402912 <_fclose_r+0x9a>
  4028f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4028f6:	f7ff f845 	bl	401984 <__retarget_lock_close_recursive>
  4028fa:	f7fe fd49 	bl	401390 <__sfp_lock_release>
  4028fe:	4630      	mov	r0, r6
  402900:	bd70      	pop	{r4, r5, r6, pc}
  402902:	f7fe fd13 	bl	40132c <__sinit>
  402906:	e7bf      	b.n	402888 <_fclose_r+0x10>
  402908:	6921      	ldr	r1, [r4, #16]
  40290a:	4628      	mov	r0, r5
  40290c:	f7fe fdb0 	bl	401470 <_free_r>
  402910:	e7d7      	b.n	4028c2 <_fclose_r+0x4a>
  402912:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402914:	f7ff f83a 	bl	40198c <__retarget_lock_release_recursive>
  402918:	e7ec      	b.n	4028f4 <_fclose_r+0x7c>
  40291a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40291c:	f7ff f834 	bl	401988 <__retarget_lock_acquire_recursive>
  402920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402924:	2b00      	cmp	r3, #0
  402926:	d1bb      	bne.n	4028a0 <_fclose_r+0x28>
  402928:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40292a:	f016 0601 	ands.w	r6, r6, #1
  40292e:	d1b1      	bne.n	402894 <_fclose_r+0x1c>
  402930:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402932:	f7ff f82b 	bl	40198c <__retarget_lock_release_recursive>
  402936:	4630      	mov	r0, r6
  402938:	bd70      	pop	{r4, r5, r6, pc}
  40293a:	bf00      	nop

0040293c <_fstat_r>:
  40293c:	b538      	push	{r3, r4, r5, lr}
  40293e:	460b      	mov	r3, r1
  402940:	4c07      	ldr	r4, [pc, #28]	; (402960 <_fstat_r+0x24>)
  402942:	4605      	mov	r5, r0
  402944:	4611      	mov	r1, r2
  402946:	4618      	mov	r0, r3
  402948:	2300      	movs	r3, #0
  40294a:	6023      	str	r3, [r4, #0]
  40294c:	f7fe f8ad 	bl	400aaa <_fstat>
  402950:	1c43      	adds	r3, r0, #1
  402952:	d000      	beq.n	402956 <_fstat_r+0x1a>
  402954:	bd38      	pop	{r3, r4, r5, pc}
  402956:	6823      	ldr	r3, [r4, #0]
  402958:	2b00      	cmp	r3, #0
  40295a:	d0fb      	beq.n	402954 <_fstat_r+0x18>
  40295c:	602b      	str	r3, [r5, #0]
  40295e:	bd38      	pop	{r3, r4, r5, pc}
  402960:	20000954 	.word	0x20000954

00402964 <_isatty_r>:
  402964:	b538      	push	{r3, r4, r5, lr}
  402966:	4c07      	ldr	r4, [pc, #28]	; (402984 <_isatty_r+0x20>)
  402968:	2300      	movs	r3, #0
  40296a:	4605      	mov	r5, r0
  40296c:	4608      	mov	r0, r1
  40296e:	6023      	str	r3, [r4, #0]
  402970:	f7fe f8a0 	bl	400ab4 <_isatty>
  402974:	1c43      	adds	r3, r0, #1
  402976:	d000      	beq.n	40297a <_isatty_r+0x16>
  402978:	bd38      	pop	{r3, r4, r5, pc}
  40297a:	6823      	ldr	r3, [r4, #0]
  40297c:	2b00      	cmp	r3, #0
  40297e:	d0fb      	beq.n	402978 <_isatty_r+0x14>
  402980:	602b      	str	r3, [r5, #0]
  402982:	bd38      	pop	{r3, r4, r5, pc}
  402984:	20000954 	.word	0x20000954

00402988 <_lseek_r>:
  402988:	b570      	push	{r4, r5, r6, lr}
  40298a:	460d      	mov	r5, r1
  40298c:	4c08      	ldr	r4, [pc, #32]	; (4029b0 <_lseek_r+0x28>)
  40298e:	4611      	mov	r1, r2
  402990:	4606      	mov	r6, r0
  402992:	461a      	mov	r2, r3
  402994:	4628      	mov	r0, r5
  402996:	2300      	movs	r3, #0
  402998:	6023      	str	r3, [r4, #0]
  40299a:	f7fe f88d 	bl	400ab8 <_lseek>
  40299e:	1c43      	adds	r3, r0, #1
  4029a0:	d000      	beq.n	4029a4 <_lseek_r+0x1c>
  4029a2:	bd70      	pop	{r4, r5, r6, pc}
  4029a4:	6823      	ldr	r3, [r4, #0]
  4029a6:	2b00      	cmp	r3, #0
  4029a8:	d0fb      	beq.n	4029a2 <_lseek_r+0x1a>
  4029aa:	6033      	str	r3, [r6, #0]
  4029ac:	bd70      	pop	{r4, r5, r6, pc}
  4029ae:	bf00      	nop
  4029b0:	20000954 	.word	0x20000954

004029b4 <_read_r>:
  4029b4:	b570      	push	{r4, r5, r6, lr}
  4029b6:	460d      	mov	r5, r1
  4029b8:	4c08      	ldr	r4, [pc, #32]	; (4029dc <_read_r+0x28>)
  4029ba:	4611      	mov	r1, r2
  4029bc:	4606      	mov	r6, r0
  4029be:	461a      	mov	r2, r3
  4029c0:	4628      	mov	r0, r5
  4029c2:	2300      	movs	r3, #0
  4029c4:	6023      	str	r3, [r4, #0]
  4029c6:	f7fd fbe9 	bl	40019c <_read>
  4029ca:	1c43      	adds	r3, r0, #1
  4029cc:	d000      	beq.n	4029d0 <_read_r+0x1c>
  4029ce:	bd70      	pop	{r4, r5, r6, pc}
  4029d0:	6823      	ldr	r3, [r4, #0]
  4029d2:	2b00      	cmp	r3, #0
  4029d4:	d0fb      	beq.n	4029ce <_read_r+0x1a>
  4029d6:	6033      	str	r3, [r6, #0]
  4029d8:	bd70      	pop	{r4, r5, r6, pc}
  4029da:	bf00      	nop
  4029dc:	20000954 	.word	0x20000954
  4029e0:	50202d2d 	.word	0x50202d2d
  4029e4:	555f4344 	.word	0x555f4344
  4029e8:	20545241 	.word	0x20545241
  4029ec:	6d617845 	.word	0x6d617845
  4029f0:	20656c70 	.word	0x20656c70
  4029f4:	0a0d2d2d 	.word	0x0a0d2d2d
  4029f8:	53202d2d 	.word	0x53202d2d
  4029fc:	53344d41 	.word	0x53344d41
  402a00:	204b452d 	.word	0x204b452d
  402a04:	0a0d2d2d 	.word	0x0a0d2d2d
  402a08:	43202d2d 	.word	0x43202d2d
  402a0c:	69706d6f 	.word	0x69706d6f
  402a10:	3a64656c 	.word	0x3a64656c
  402a14:	62654620 	.word	0x62654620
  402a18:	20373220 	.word	0x20373220
  402a1c:	31323032 	.word	0x31323032
  402a20:	3a343120 	.word	0x3a343120
  402a24:	303a3235 	.word	0x303a3235
  402a28:	2d2d2039 	.word	0x2d2d2039
  402a2c:	0000000d 	.word	0x0000000d

00402a30 <_global_impure_ptr>:
  402a30:	20000008 0000000a                       ... ....

00402a38 <_init>:
  402a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402a3a:	bf00      	nop
  402a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402a3e:	bc08      	pop	{r3}
  402a40:	469e      	mov	lr, r3
  402a42:	4770      	bx	lr

00402a44 <__init_array_start>:
  402a44:	0040111d 	.word	0x0040111d

00402a48 <__frame_dummy_init_array_entry>:
  402a48:	004000f1                                ..@.

00402a4c <_fini>:
  402a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402a4e:	bf00      	nop
  402a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402a52:	bc08      	pop	{r3}
  402a54:	469e      	mov	lr, r3
  402a56:	4770      	bx	lr

00402a58 <__fini_array_start>:
  402a58:	004000cd 	.word	0x004000cd

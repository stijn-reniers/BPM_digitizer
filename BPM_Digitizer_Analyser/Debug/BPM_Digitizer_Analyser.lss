
BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004194  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404194  00404194  00014194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  0040419c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008428  200009b8  00404b54  000209b8  2**2
                  ALLOC
  4 .stack        00003000  20008de0  0040cf7c  000209b8  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014bb0  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003128  00000000  00000000  000355ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003ec7  00000000  00000000  00038717  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000908  00000000  00000000  0003c5de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000840  00000000  00000000  0003cee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019026  00000000  00000000  0003d726  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000bf79  00000000  00000000  0005674c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00065501  00000000  00000000  000626c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000200c  00000000  00000000  000c7bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 bd 00 20 b1 09 40 00 ad 09 40 00 ad 09 40 00     ... ..@...@...@.
  400010:	ad 09 40 00 ad 09 40 00 ad 09 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ad 09 40 00 ad 09 40 00 00 00 00 00 ad 09 40 00     ..@...@.......@.
  40003c:	ad 09 40 00 ad 09 40 00 ad 09 40 00 ad 09 40 00     ..@...@...@...@.
  40004c:	ad 09 40 00 ad 09 40 00 ad 09 40 00 ad 09 40 00     ..@...@...@...@.
  40005c:	ad 09 40 00 ad 09 40 00 ad 09 40 00 ad 09 40 00     ..@...@...@...@.
  40006c:	ad 09 40 00 ad 09 40 00 ad 09 40 00 49 0c 40 00     ..@...@...@.I.@.
  40007c:	ad 09 40 00 ad 09 40 00 ad 09 40 00 ad 09 40 00     ..@...@...@...@.
  40008c:	ad 09 40 00 ad 09 40 00 ad 09 40 00 ad 09 40 00     ..@...@...@...@.
  40009c:	ad 09 40 00 ad 09 40 00 ad 09 40 00 ad 09 40 00     ..@...@...@...@.
  4000ac:	ad 09 40 00 ad 09 40 00 ad 09 40 00 c5 06 40 00     ..@...@...@...@.
  4000bc:	d9 06 40 00 ad 09 40 00 ad 09 40 00 ad 09 40 00     ..@...@...@...@.
  4000cc:	ad 09 40 00 ad 09 40 00 ad 09 40 00 ad 09 40 00     ..@...@...@...@.
  4000dc:	ad 09 40 00 ad 09 40 00 ad 09 40 00 ad 09 40 00     ..@...@...@...@.
  4000ec:	ad 09 40 00 ad 09 40 00 ad 09 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009b8 	.word	0x200009b8
  400114:	00000000 	.word	0x00000000
  400118:	0040419c 	.word	0x0040419c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	0040419c 	.word	0x0040419c
  400158:	200009bc 	.word	0x200009bc
  40015c:	0040419c 	.word	0x0040419c
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	480b      	ldr	r0, [pc, #44]	; (4001c8 <sysclk_init+0x64>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	00400b85 	.word	0x00400b85
  4001a8:	004007b5 	.word	0x004007b5
  4001ac:	00400809 	.word	0x00400809
  4001b0:	00400819 	.word	0x00400819
  4001b4:	200f3f01 	.word	0x200f3f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	00400829 	.word	0x00400829
  4001c0:	00400751 	.word	0x00400751
  4001c4:	00400a79 	.word	0x00400a79
  4001c8:	05b8d800 	.word	0x05b8d800

004001cc <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  4001cc:	2a00      	cmp	r2, #0
  4001ce:	d037      	beq.n	400240 <usart_serial_write_packet+0x74>
{
  4001d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4001d4:	4693      	mov	fp, r2
  4001d6:	4605      	mov	r5, r0
  4001d8:	460f      	mov	r7, r1
  4001da:	448b      	add	fp, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001dc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 400250 <usart_serial_write_packet+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001e0:	4e18      	ldr	r6, [pc, #96]	; (400244 <usart_serial_write_packet+0x78>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001e2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400254 <usart_serial_write_packet+0x88>
  4001e6:	e006      	b.n	4001f6 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001e8:	4621      	mov	r1, r4
  4001ea:	4640      	mov	r0, r8
  4001ec:	47b0      	blx	r6
  4001ee:	2800      	cmp	r0, #0
  4001f0:	d1fa      	bne.n	4001e8 <usart_serial_write_packet+0x1c>
	while (len) {
  4001f2:	45bb      	cmp	fp, r7
  4001f4:	d021      	beq.n	40023a <usart_serial_write_packet+0x6e>
		usart_serial_putchar(usart, *data);
  4001f6:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  4001fa:	4545      	cmp	r5, r8
  4001fc:	d0f4      	beq.n	4001e8 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  4001fe:	454d      	cmp	r5, r9
  400200:	d00d      	beq.n	40021e <usart_serial_write_packet+0x52>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400202:	4b11      	ldr	r3, [pc, #68]	; (400248 <usart_serial_write_packet+0x7c>)
  400204:	429d      	cmp	r5, r3
  400206:	d010      	beq.n	40022a <usart_serial_write_packet+0x5e>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400208:	4b10      	ldr	r3, [pc, #64]	; (40024c <usart_serial_write_packet+0x80>)
  40020a:	429d      	cmp	r5, r3
  40020c:	d1f1      	bne.n	4001f2 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40020e:	f8df a048 	ldr.w	sl, [pc, #72]	; 400258 <usart_serial_write_packet+0x8c>
  400212:	4621      	mov	r1, r4
  400214:	480d      	ldr	r0, [pc, #52]	; (40024c <usart_serial_write_packet+0x80>)
  400216:	47d0      	blx	sl
  400218:	2800      	cmp	r0, #0
  40021a:	d1fa      	bne.n	400212 <usart_serial_write_packet+0x46>
  40021c:	e7e9      	b.n	4001f2 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40021e:	4621      	mov	r1, r4
  400220:	4648      	mov	r0, r9
  400222:	47b0      	blx	r6
  400224:	2800      	cmp	r0, #0
  400226:	d1fa      	bne.n	40021e <usart_serial_write_packet+0x52>
  400228:	e7e3      	b.n	4001f2 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40022a:	f8df a02c 	ldr.w	sl, [pc, #44]	; 400258 <usart_serial_write_packet+0x8c>
  40022e:	4621      	mov	r1, r4
  400230:	4805      	ldr	r0, [pc, #20]	; (400248 <usart_serial_write_packet+0x7c>)
  400232:	47d0      	blx	sl
  400234:	2800      	cmp	r0, #0
  400236:	d1fa      	bne.n	40022e <usart_serial_write_packet+0x62>
  400238:	e7db      	b.n	4001f2 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  40023a:	2000      	movs	r0, #0
  40023c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400240:	2000      	movs	r0, #0
  400242:	4770      	bx	lr
  400244:	0040095f 	.word	0x0040095f
  400248:	400a0000 	.word	0x400a0000
  40024c:	400a4000 	.word	0x400a4000
  400250:	400e0600 	.word	0x400e0600
  400254:	40060600 	.word	0x40060600
  400258:	00400981 	.word	0x00400981

0040025c <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  40025c:	2a00      	cmp	r2, #0
  40025e:	d03f      	beq.n	4002e0 <usart_serial_read_packet+0x84>
{
  400260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400264:	b083      	sub	sp, #12
  400266:	4606      	mov	r6, r0
  400268:	460c      	mov	r4, r1
  40026a:	4693      	mov	fp, r2
  40026c:	448b      	add	fp, r1
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40026e:	4f1d      	ldr	r7, [pc, #116]	; (4002e4 <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  400270:	4d1d      	ldr	r5, [pc, #116]	; (4002e8 <usart_serial_read_packet+0x8c>)
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400272:	f8df a080 	ldr.w	sl, [pc, #128]	; 4002f4 <usart_serial_read_packet+0x98>
  400276:	e00d      	b.n	400294 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  400278:	4621      	mov	r1, r4
  40027a:	4638      	mov	r0, r7
  40027c:	47a8      	blx	r5
  40027e:	2800      	cmp	r0, #0
  400280:	d1fa      	bne.n	400278 <usart_serial_read_packet+0x1c>
  400282:	e010      	b.n	4002a6 <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  400284:	4621      	mov	r1, r4
  400286:	4650      	mov	r0, sl
  400288:	47a8      	blx	r5
  40028a:	2800      	cmp	r0, #0
  40028c:	d1fa      	bne.n	400284 <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  40028e:	3401      	adds	r4, #1
	while (len) {
  400290:	455c      	cmp	r4, fp
  400292:	d021      	beq.n	4002d8 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400294:	2300      	movs	r3, #0
  400296:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400298:	42be      	cmp	r6, r7
  40029a:	d0ed      	beq.n	400278 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40029c:	4556      	cmp	r6, sl
  40029e:	d0f1      	beq.n	400284 <usart_serial_read_packet+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002a0:	4b12      	ldr	r3, [pc, #72]	; (4002ec <usart_serial_read_packet+0x90>)
  4002a2:	429e      	cmp	r6, r3
  4002a4:	d00d      	beq.n	4002c2 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002a6:	4b12      	ldr	r3, [pc, #72]	; (4002f0 <usart_serial_read_packet+0x94>)
  4002a8:	429e      	cmp	r6, r3
  4002aa:	d1f0      	bne.n	40028e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  4002ac:	4699      	mov	r9, r3
  4002ae:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4002f8 <usart_serial_read_packet+0x9c>
  4002b2:	a901      	add	r1, sp, #4
  4002b4:	4648      	mov	r0, r9
  4002b6:	47c0      	blx	r8
  4002b8:	2800      	cmp	r0, #0
  4002ba:	d1fa      	bne.n	4002b2 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  4002bc:	9b01      	ldr	r3, [sp, #4]
  4002be:	7023      	strb	r3, [r4, #0]
  4002c0:	e7e5      	b.n	40028e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  4002c2:	4699      	mov	r9, r3
  4002c4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4002f8 <usart_serial_read_packet+0x9c>
  4002c8:	a901      	add	r1, sp, #4
  4002ca:	4648      	mov	r0, r9
  4002cc:	47c0      	blx	r8
  4002ce:	2800      	cmp	r0, #0
  4002d0:	d1fa      	bne.n	4002c8 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  4002d2:	9b01      	ldr	r3, [sp, #4]
  4002d4:	7023      	strb	r3, [r4, #0]
  4002d6:	e7da      	b.n	40028e <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  4002d8:	2000      	movs	r0, #0
  4002da:	b003      	add	sp, #12
  4002dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002e0:	2000      	movs	r0, #0
  4002e2:	4770      	bx	lr
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	0040096f 	.word	0x0040096f
  4002ec:	400a0000 	.word	0x400a0000
  4002f0:	400a4000 	.word	0x400a4000
  4002f4:	40060600 	.word	0x40060600
  4002f8:	00400995 	.word	0x00400995

004002fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400300:	b980      	cbnz	r0, 400324 <_read+0x28>
  400302:	460c      	mov	r4, r1
  400304:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400306:	2a00      	cmp	r2, #0
  400308:	dd0f      	ble.n	40032a <_read+0x2e>
  40030a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40030c:	4e08      	ldr	r6, [pc, #32]	; (400330 <_read+0x34>)
  40030e:	4d09      	ldr	r5, [pc, #36]	; (400334 <_read+0x38>)
  400310:	6830      	ldr	r0, [r6, #0]
  400312:	4621      	mov	r1, r4
  400314:	682b      	ldr	r3, [r5, #0]
  400316:	4798      	blx	r3
		ptr++;
  400318:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40031a:	42bc      	cmp	r4, r7
  40031c:	d1f8      	bne.n	400310 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40031e:	4640      	mov	r0, r8
  400320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400324:	f04f 38ff 	mov.w	r8, #4294967295
  400328:	e7f9      	b.n	40031e <_read+0x22>
	for (; len > 0; --len) {
  40032a:	4680      	mov	r8, r0
  40032c:	e7f7      	b.n	40031e <_read+0x22>
  40032e:	bf00      	nop
  400330:	20000abc 	.word	0x20000abc
  400334:	20000ab4 	.word	0x20000ab4

00400338 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400338:	3801      	subs	r0, #1
  40033a:	2802      	cmp	r0, #2
  40033c:	d815      	bhi.n	40036a <_write+0x32>
{
  40033e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400342:	460e      	mov	r6, r1
  400344:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400346:	b19a      	cbz	r2, 400370 <_write+0x38>
  400348:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40034a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400384 <_write+0x4c>
  40034e:	4f0c      	ldr	r7, [pc, #48]	; (400380 <_write+0x48>)
  400350:	f8d8 0000 	ldr.w	r0, [r8]
  400354:	f815 1b01 	ldrb.w	r1, [r5], #1
  400358:	683b      	ldr	r3, [r7, #0]
  40035a:	4798      	blx	r3
  40035c:	2800      	cmp	r0, #0
  40035e:	db0a      	blt.n	400376 <_write+0x3e>
  400360:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400362:	3c01      	subs	r4, #1
  400364:	d1f4      	bne.n	400350 <_write+0x18>
  400366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40036a:	f04f 30ff 	mov.w	r0, #4294967295
  40036e:	4770      	bx	lr
	for (; len != 0; --len) {
  400370:	4610      	mov	r0, r2
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400376:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40037e:	bf00      	nop
  400380:	20000ab8 	.word	0x20000ab8
  400384:	20000abc 	.word	0x20000abc

00400388 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400388:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40038a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40038e:	4b21      	ldr	r3, [pc, #132]	; (400414 <board_init+0x8c>)
  400390:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	2009      	movs	r0, #9
  400394:	4c20      	ldr	r4, [pc, #128]	; (400418 <board_init+0x90>)
  400396:	47a0      	blx	r4
  400398:	200a      	movs	r0, #10
  40039a:	47a0      	blx	r4
  40039c:	200b      	movs	r0, #11
  40039e:	47a0      	blx	r4
  4003a0:	200c      	movs	r0, #12
  4003a2:	47a0      	blx	r4
  4003a4:	200d      	movs	r0, #13
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b1c      	ldr	r3, [pc, #112]	; (40041c <board_init+0x94>)
  4003aa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4003ba:	2204      	movs	r2, #4
  4003bc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003c8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003ca:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d2:	f021 0104 	bic.w	r1, r1, #4
  4003d6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003d8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003da:	f021 0104 	bic.w	r1, r1, #4
  4003de:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4003f0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003f8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400400:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400404:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400406:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400408:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40040c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40040e:	605a      	str	r2, [r3, #4]
  400410:	bd10      	pop	{r4, pc}
  400412:	bf00      	nop
  400414:	400e1850 	.word	0x400e1850
  400418:	00400839 	.word	0x00400839
  40041c:	400e1400 	.word	0x400e1400

00400420 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400420:	b570      	push	{r4, r5, r6, lr}
  400422:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400424:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400426:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400428:	4013      	ands	r3, r2
  40042a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40042c:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  40042e:	4d21      	ldr	r5, [pc, #132]	; (4004b4 <afec_process_callback+0x94>)
  400430:	42a8      	cmp	r0, r5
  400432:	bf14      	ite	ne
  400434:	2500      	movne	r5, #0
  400436:	2501      	moveq	r5, #1
  400438:	006e      	lsls	r6, r5, #1
  40043a:	442e      	add	r6, r5
  40043c:	e00b      	b.n	400456 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40043e:	2c14      	cmp	r4, #20
  400440:	d824      	bhi.n	40048c <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400442:	9a01      	ldr	r2, [sp, #4]
  400444:	f104 0108 	add.w	r1, r4, #8
  400448:	2301      	movs	r3, #1
  40044a:	408b      	lsls	r3, r1
  40044c:	4213      	tst	r3, r2
  40044e:	d113      	bne.n	400478 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400450:	3401      	adds	r4, #1
  400452:	2c17      	cmp	r4, #23
  400454:	d02b      	beq.n	4004ae <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400456:	2c0f      	cmp	r4, #15
  400458:	d8f1      	bhi.n	40043e <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40045a:	9a01      	ldr	r2, [sp, #4]
  40045c:	2301      	movs	r3, #1
  40045e:	40a3      	lsls	r3, r4
  400460:	4213      	tst	r3, r2
  400462:	d0f5      	beq.n	400450 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400464:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400468:	4423      	add	r3, r4
  40046a:	4a13      	ldr	r2, [pc, #76]	; (4004b8 <afec_process_callback+0x98>)
  40046c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400470:	2b00      	cmp	r3, #0
  400472:	d0ed      	beq.n	400450 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400474:	4798      	blx	r3
  400476:	e7eb      	b.n	400450 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400478:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  40047c:	4423      	add	r3, r4
  40047e:	4a0e      	ldr	r2, [pc, #56]	; (4004b8 <afec_process_callback+0x98>)
  400480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400484:	2b00      	cmp	r3, #0
  400486:	d0e3      	beq.n	400450 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400488:	4798      	blx	r3
  40048a:	e7e1      	b.n	400450 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40048c:	9a01      	ldr	r2, [sp, #4]
  40048e:	f104 0109 	add.w	r1, r4, #9
  400492:	2301      	movs	r3, #1
  400494:	408b      	lsls	r3, r1
  400496:	4213      	tst	r3, r2
  400498:	d0da      	beq.n	400450 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40049a:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  40049e:	4423      	add	r3, r4
  4004a0:	4a05      	ldr	r2, [pc, #20]	; (4004b8 <afec_process_callback+0x98>)
  4004a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004a6:	2b00      	cmp	r3, #0
  4004a8:	d0d2      	beq.n	400450 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004aa:	4798      	blx	r3
  4004ac:	e7d0      	b.n	400450 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4004ae:	b002      	add	sp, #8
  4004b0:	bd70      	pop	{r4, r5, r6, pc}
  4004b2:	bf00      	nop
  4004b4:	400b4000 	.word	0x400b4000
  4004b8:	20000ac0 	.word	0x20000ac0

004004bc <afec_ch_set_config>:
{
  4004bc:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4004be:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4004c0:	2301      	movs	r3, #1
  4004c2:	408b      	lsls	r3, r1
  4004c4:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004c8:	7815      	ldrb	r5, [r2, #0]
  4004ca:	2d00      	cmp	r5, #0
  4004cc:	bf08      	it	eq
  4004ce:	2300      	moveq	r3, #0
  4004d0:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4004d2:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4004d4:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4004d6:	004b      	lsls	r3, r1, #1
  4004d8:	2103      	movs	r1, #3
  4004da:	4099      	lsls	r1, r3
  4004dc:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4004e0:	7851      	ldrb	r1, [r2, #1]
  4004e2:	4099      	lsls	r1, r3
  4004e4:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4004e6:	6541      	str	r1, [r0, #84]	; 0x54
}
  4004e8:	bc30      	pop	{r4, r5}
  4004ea:	4770      	bx	lr

004004ec <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4004ec:	2200      	movs	r2, #0
  4004ee:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4004f0:	4b08      	ldr	r3, [pc, #32]	; (400514 <afec_get_config_defaults+0x28>)
  4004f2:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4004f4:	4b08      	ldr	r3, [pc, #32]	; (400518 <afec_get_config_defaults+0x2c>)
  4004f6:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4004f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4004fc:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  4004fe:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400500:	2302      	movs	r3, #2
  400502:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  400504:	2301      	movs	r3, #1
  400506:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400508:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  40050a:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  40050c:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  40050e:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400510:	7683      	strb	r3, [r0, #26]
  400512:	4770      	bx	lr
  400514:	05b8d800 	.word	0x05b8d800
  400518:	005b8d80 	.word	0x005b8d80

0040051c <afec_ch_get_config_defaults>:
	cfg->diff = false;
  40051c:	2300      	movs	r3, #0
  40051e:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400520:	2301      	movs	r3, #1
  400522:	7043      	strb	r3, [r0, #1]
  400524:	4770      	bx	lr
	...

00400528 <afec_init>:
	return afec->AFEC_ISR;
  400528:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40052a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40052e:	d001      	beq.n	400534 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400530:	2019      	movs	r0, #25
  400532:	4770      	bx	lr
{
  400534:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400536:	2301      	movs	r3, #1
  400538:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40053a:	7dcb      	ldrb	r3, [r1, #23]
  40053c:	2b00      	cmp	r3, #0
  40053e:	bf14      	ite	ne
  400540:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  400544:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  400546:	7d8b      	ldrb	r3, [r1, #22]
  400548:	2b00      	cmp	r3, #0
  40054a:	bf14      	ite	ne
  40054c:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  400550:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  400552:	7d0b      	ldrb	r3, [r1, #20]
  400554:	061b      	lsls	r3, r3, #24
  400556:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40055a:	690a      	ldr	r2, [r1, #16]
  40055c:	68ce      	ldr	r6, [r1, #12]
  40055e:	4332      	orrs	r2, r6
  400560:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  400562:	7d4a      	ldrb	r2, [r1, #21]
  400564:	0712      	lsls	r2, r2, #28
  400566:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40056a:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  40056c:	688a      	ldr	r2, [r1, #8]
  40056e:	0056      	lsls	r6, r2, #1
  400570:	684a      	ldr	r2, [r1, #4]
  400572:	fbb2 f2f6 	udiv	r2, r2, r6
  400576:	3a01      	subs	r2, #1
  400578:	0212      	lsls	r2, r2, #8
  40057a:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40057c:	4313      	orrs	r3, r2
  40057e:	432b      	orrs	r3, r5
  400580:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  400582:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400584:	7e0b      	ldrb	r3, [r1, #24]
  400586:	2b00      	cmp	r3, #0
  400588:	bf14      	ite	ne
  40058a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40058e:	2300      	moveq	r3, #0
  400590:	680a      	ldr	r2, [r1, #0]
  400592:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400594:	7e4a      	ldrb	r2, [r1, #25]
  400596:	2a00      	cmp	r2, #0
  400598:	bf14      	ite	ne
  40059a:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40059e:	2200      	moveq	r2, #0
			(config->resolution) |
  4005a0:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005a2:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  4005a4:	7e8b      	ldrb	r3, [r1, #26]
  4005a6:	021b      	lsls	r3, r3, #8
  4005a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4005ac:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4005b0:	4b0e      	ldr	r3, [pc, #56]	; (4005ec <afec_init+0xc4>)
  4005b2:	4298      	cmp	r0, r3
  4005b4:	d005      	beq.n	4005c2 <afec_init+0x9a>
	if(afec == AFEC1) {
  4005b6:	4b0e      	ldr	r3, [pc, #56]	; (4005f0 <afec_init+0xc8>)
  4005b8:	4298      	cmp	r0, r3
  4005ba:	d00c      	beq.n	4005d6 <afec_init+0xae>
	return STATUS_OK;
  4005bc:	2000      	movs	r0, #0
}
  4005be:	bc70      	pop	{r4, r5, r6}
  4005c0:	4770      	bx	lr
  4005c2:	4b0c      	ldr	r3, [pc, #48]	; (4005f4 <afec_init+0xcc>)
  4005c4:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  4005c8:	2200      	movs	r2, #0
  4005ca:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005ce:	428b      	cmp	r3, r1
  4005d0:	d1fb      	bne.n	4005ca <afec_init+0xa2>
	return STATUS_OK;
  4005d2:	2000      	movs	r0, #0
  4005d4:	e7f3      	b.n	4005be <afec_init+0x96>
  4005d6:	4b08      	ldr	r3, [pc, #32]	; (4005f8 <afec_init+0xd0>)
  4005d8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  4005dc:	2200      	movs	r2, #0
  4005de:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005e2:	428b      	cmp	r3, r1
  4005e4:	d1fb      	bne.n	4005de <afec_init+0xb6>
	return STATUS_OK;
  4005e6:	2000      	movs	r0, #0
  4005e8:	e7e9      	b.n	4005be <afec_init+0x96>
  4005ea:	bf00      	nop
  4005ec:	400b0000 	.word	0x400b0000
  4005f0:	400b4000 	.word	0x400b4000
  4005f4:	20000abc 	.word	0x20000abc
  4005f8:	20000b18 	.word	0x20000b18

004005fc <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4005fc:	4b0c      	ldr	r3, [pc, #48]	; (400630 <afec_enable_interrupt+0x34>)
  4005fe:	4299      	cmp	r1, r3
  400600:	d007      	beq.n	400612 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400602:	290f      	cmp	r1, #15
  400604:	d80b      	bhi.n	40061e <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  400606:	d006      	beq.n	400616 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400608:	2301      	movs	r3, #1
  40060a:	fa03 f101 	lsl.w	r1, r3, r1
  40060e:	6241      	str	r1, [r0, #36]	; 0x24
  400610:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400612:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400614:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  400616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40061a:	6243      	str	r3, [r0, #36]	; 0x24
  40061c:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40061e:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400620:	bf94      	ite	ls
  400622:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  400624:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400626:	2301      	movs	r3, #1
  400628:	fa03 f101 	lsl.w	r1, r3, r1
  40062c:	6241      	str	r1, [r0, #36]	; 0x24
  40062e:	4770      	bx	lr
  400630:	df00ffff 	.word	0xdf00ffff

00400634 <afec_set_callback>:
{
  400634:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400636:	4c11      	ldr	r4, [pc, #68]	; (40067c <afec_set_callback+0x48>)
  400638:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  40063a:	bf0c      	ite	eq
  40063c:	2417      	moveq	r4, #23
  40063e:	2400      	movne	r4, #0
  400640:	440c      	add	r4, r1
  400642:	4d0f      	ldr	r5, [pc, #60]	; (400680 <afec_set_callback+0x4c>)
  400644:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400648:	d10a      	bne.n	400660 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40064a:	4a0e      	ldr	r2, [pc, #56]	; (400684 <afec_set_callback+0x50>)
  40064c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  400650:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400654:	011b      	lsls	r3, r3, #4
  400656:	b2db      	uxtb	r3, r3
  400658:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40065c:	6014      	str	r4, [r2, #0]
  40065e:	e009      	b.n	400674 <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400660:	4a08      	ldr	r2, [pc, #32]	; (400684 <afec_set_callback+0x50>)
  400662:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400666:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40066a:	011b      	lsls	r3, r3, #4
  40066c:	b2db      	uxtb	r3, r3
  40066e:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400672:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400674:	4b04      	ldr	r3, [pc, #16]	; (400688 <afec_set_callback+0x54>)
  400676:	4798      	blx	r3
  400678:	bd38      	pop	{r3, r4, r5, pc}
  40067a:	bf00      	nop
  40067c:	400b4000 	.word	0x400b4000
  400680:	20000ac0 	.word	0x20000ac0
  400684:	e000e100 	.word	0xe000e100
  400688:	004005fd 	.word	0x004005fd

0040068c <afec_disable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  40068c:	4b0c      	ldr	r3, [pc, #48]	; (4006c0 <afec_disable_interrupt+0x34>)
  40068e:	4299      	cmp	r1, r3
  400690:	d007      	beq.n	4006a2 <afec_disable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400692:	290f      	cmp	r1, #15
  400694:	d80b      	bhi.n	4006ae <afec_disable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  400696:	d006      	beq.n	4006a6 <afec_disable_interrupt+0x1a>
			afec->AFEC_IDR = 1 << interrupt_source;
  400698:	2301      	movs	r3, #1
  40069a:	fa03 f101 	lsl.w	r1, r3, r1
  40069e:	6281      	str	r1, [r0, #40]	; 0x28
  4006a0:	4770      	bx	lr
		afec->AFEC_IDR = AFEC_INTERRUPT_ALL;
  4006a2:	6283      	str	r3, [r0, #40]	; 0x28
		return;
  4006a4:	4770      	bx	lr
			afec->AFEC_IDR = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  4006a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006aa:	6283      	str	r3, [r0, #40]	; 0x28
  4006ac:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4006ae:	2914      	cmp	r1, #20
		afec->AFEC_IDR = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4006b0:	bf94      	ite	ls
  4006b2:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  4006b4:	3109      	addhi	r1, #9
		afec->AFEC_IDR = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4006b6:	2301      	movs	r3, #1
  4006b8:	fa03 f101 	lsl.w	r1, r3, r1
  4006bc:	6281      	str	r1, [r0, #40]	; 0x28
  4006be:	4770      	bx	lr
  4006c0:	df00ffff 	.word	0xdf00ffff

004006c4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4006c4:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4006c6:	4802      	ldr	r0, [pc, #8]	; (4006d0 <AFEC0_Handler+0xc>)
  4006c8:	4b02      	ldr	r3, [pc, #8]	; (4006d4 <AFEC0_Handler+0x10>)
  4006ca:	4798      	blx	r3
  4006cc:	bd08      	pop	{r3, pc}
  4006ce:	bf00      	nop
  4006d0:	400b0000 	.word	0x400b0000
  4006d4:	00400421 	.word	0x00400421

004006d8 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4006d8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4006da:	4802      	ldr	r0, [pc, #8]	; (4006e4 <AFEC1_Handler+0xc>)
  4006dc:	4b02      	ldr	r3, [pc, #8]	; (4006e8 <AFEC1_Handler+0x10>)
  4006de:	4798      	blx	r3
  4006e0:	bd08      	pop	{r3, pc}
  4006e2:	bf00      	nop
  4006e4:	400b4000 	.word	0x400b4000
  4006e8:	00400421 	.word	0x00400421

004006ec <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4006ec:	b500      	push	{lr}
  4006ee:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4006f0:	4b13      	ldr	r3, [pc, #76]	; (400740 <afec_enable+0x54>)
  4006f2:	4298      	cmp	r0, r3
  4006f4:	bf0c      	ite	eq
  4006f6:	201f      	moveq	r0, #31
  4006f8:	201e      	movne	r0, #30
  4006fa:	4b12      	ldr	r3, [pc, #72]	; (400744 <afec_enable+0x58>)
  4006fc:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4006fe:	4b12      	ldr	r3, [pc, #72]	; (400748 <afec_enable+0x5c>)
  400700:	789b      	ldrb	r3, [r3, #2]
  400702:	2bff      	cmp	r3, #255	; 0xff
  400704:	d01a      	beq.n	40073c <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400706:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40070a:	fab3 f383 	clz	r3, r3
  40070e:	095b      	lsrs	r3, r3, #5
  400710:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400712:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400714:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400718:	2200      	movs	r2, #0
  40071a:	4b0c      	ldr	r3, [pc, #48]	; (40074c <afec_enable+0x60>)
  40071c:	701a      	strb	r2, [r3, #0]
	return flags;
  40071e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400720:	4a09      	ldr	r2, [pc, #36]	; (400748 <afec_enable+0x5c>)
  400722:	7893      	ldrb	r3, [r2, #2]
  400724:	3301      	adds	r3, #1
  400726:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400728:	b129      	cbz	r1, 400736 <afec_enable+0x4a>
		cpu_irq_enable();
  40072a:	2201      	movs	r2, #1
  40072c:	4b07      	ldr	r3, [pc, #28]	; (40074c <afec_enable+0x60>)
  40072e:	701a      	strb	r2, [r3, #0]
  400730:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400734:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400736:	b003      	add	sp, #12
  400738:	f85d fb04 	ldr.w	pc, [sp], #4
  40073c:	e7fe      	b.n	40073c <afec_enable+0x50>
  40073e:	bf00      	nop
  400740:	400b4000 	.word	0x400b4000
  400744:	00400839 	.word	0x00400839
  400748:	20000aac 	.word	0x20000aac
  40074c:	20000000 	.word	0x20000000

00400750 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400750:	4a17      	ldr	r2, [pc, #92]	; (4007b0 <pmc_switch_mck_to_pllack+0x60>)
  400752:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400758:	4318      	orrs	r0, r3
  40075a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40075c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40075e:	f013 0f08 	tst.w	r3, #8
  400762:	d10a      	bne.n	40077a <pmc_switch_mck_to_pllack+0x2a>
  400764:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400768:	4911      	ldr	r1, [pc, #68]	; (4007b0 <pmc_switch_mck_to_pllack+0x60>)
  40076a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40076c:	f012 0f08 	tst.w	r2, #8
  400770:	d103      	bne.n	40077a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400772:	3b01      	subs	r3, #1
  400774:	d1f9      	bne.n	40076a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400776:	2001      	movs	r0, #1
  400778:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40077a:	4a0d      	ldr	r2, [pc, #52]	; (4007b0 <pmc_switch_mck_to_pllack+0x60>)
  40077c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40077e:	f023 0303 	bic.w	r3, r3, #3
  400782:	f043 0302 	orr.w	r3, r3, #2
  400786:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400788:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40078a:	f013 0f08 	tst.w	r3, #8
  40078e:	d10a      	bne.n	4007a6 <pmc_switch_mck_to_pllack+0x56>
  400790:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400794:	4906      	ldr	r1, [pc, #24]	; (4007b0 <pmc_switch_mck_to_pllack+0x60>)
  400796:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400798:	f012 0f08 	tst.w	r2, #8
  40079c:	d105      	bne.n	4007aa <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40079e:	3b01      	subs	r3, #1
  4007a0:	d1f9      	bne.n	400796 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4007a2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007a4:	4770      	bx	lr
	return 0;
  4007a6:	2000      	movs	r0, #0
  4007a8:	4770      	bx	lr
  4007aa:	2000      	movs	r0, #0
  4007ac:	4770      	bx	lr
  4007ae:	bf00      	nop
  4007b0:	400e0400 	.word	0x400e0400

004007b4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4007b4:	b9c8      	cbnz	r0, 4007ea <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007b6:	4a11      	ldr	r2, [pc, #68]	; (4007fc <pmc_switch_mainck_to_xtal+0x48>)
  4007b8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4007ba:	0209      	lsls	r1, r1, #8
  4007bc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007be:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4007c2:	f023 0303 	bic.w	r3, r3, #3
  4007c6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4007ca:	f043 0301 	orr.w	r3, r3, #1
  4007ce:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007d0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4007d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007d4:	f013 0f01 	tst.w	r3, #1
  4007d8:	d0fb      	beq.n	4007d2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4007da:	4a08      	ldr	r2, [pc, #32]	; (4007fc <pmc_switch_mainck_to_xtal+0x48>)
  4007dc:	6a13      	ldr	r3, [r2, #32]
  4007de:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4007e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4007e6:	6213      	str	r3, [r2, #32]
  4007e8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007ea:	4904      	ldr	r1, [pc, #16]	; (4007fc <pmc_switch_mainck_to_xtal+0x48>)
  4007ec:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007ee:	4a04      	ldr	r2, [pc, #16]	; (400800 <pmc_switch_mainck_to_xtal+0x4c>)
  4007f0:	401a      	ands	r2, r3
  4007f2:	4b04      	ldr	r3, [pc, #16]	; (400804 <pmc_switch_mainck_to_xtal+0x50>)
  4007f4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007f6:	620b      	str	r3, [r1, #32]
  4007f8:	4770      	bx	lr
  4007fa:	bf00      	nop
  4007fc:	400e0400 	.word	0x400e0400
  400800:	fec8fffc 	.word	0xfec8fffc
  400804:	01370002 	.word	0x01370002

00400808 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400808:	4b02      	ldr	r3, [pc, #8]	; (400814 <pmc_osc_is_ready_mainck+0xc>)
  40080a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40080c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400810:	4770      	bx	lr
  400812:	bf00      	nop
  400814:	400e0400 	.word	0x400e0400

00400818 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400818:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40081c:	4b01      	ldr	r3, [pc, #4]	; (400824 <pmc_disable_pllack+0xc>)
  40081e:	629a      	str	r2, [r3, #40]	; 0x28
  400820:	4770      	bx	lr
  400822:	bf00      	nop
  400824:	400e0400 	.word	0x400e0400

00400828 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400828:	4b02      	ldr	r3, [pc, #8]	; (400834 <pmc_is_locked_pllack+0xc>)
  40082a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40082c:	f000 0002 	and.w	r0, r0, #2
  400830:	4770      	bx	lr
  400832:	bf00      	nop
  400834:	400e0400 	.word	0x400e0400

00400838 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400838:	282f      	cmp	r0, #47	; 0x2f
  40083a:	d81e      	bhi.n	40087a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40083c:	281f      	cmp	r0, #31
  40083e:	d80c      	bhi.n	40085a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400840:	4b11      	ldr	r3, [pc, #68]	; (400888 <pmc_enable_periph_clk+0x50>)
  400842:	699a      	ldr	r2, [r3, #24]
  400844:	2301      	movs	r3, #1
  400846:	4083      	lsls	r3, r0
  400848:	4393      	bics	r3, r2
  40084a:	d018      	beq.n	40087e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40084c:	2301      	movs	r3, #1
  40084e:	fa03 f000 	lsl.w	r0, r3, r0
  400852:	4b0d      	ldr	r3, [pc, #52]	; (400888 <pmc_enable_periph_clk+0x50>)
  400854:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400856:	2000      	movs	r0, #0
  400858:	4770      	bx	lr
		ul_id -= 32;
  40085a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40085c:	4b0a      	ldr	r3, [pc, #40]	; (400888 <pmc_enable_periph_clk+0x50>)
  40085e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400862:	2301      	movs	r3, #1
  400864:	4083      	lsls	r3, r0
  400866:	4393      	bics	r3, r2
  400868:	d00b      	beq.n	400882 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40086a:	2301      	movs	r3, #1
  40086c:	fa03 f000 	lsl.w	r0, r3, r0
  400870:	4b05      	ldr	r3, [pc, #20]	; (400888 <pmc_enable_periph_clk+0x50>)
  400872:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400876:	2000      	movs	r0, #0
  400878:	4770      	bx	lr
		return 1;
  40087a:	2001      	movs	r0, #1
  40087c:	4770      	bx	lr
	return 0;
  40087e:	2000      	movs	r0, #0
  400880:	4770      	bx	lr
  400882:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400884:	4770      	bx	lr
  400886:	bf00      	nop
  400888:	400e0400 	.word	0x400e0400

0040088c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40088c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40088e:	0189      	lsls	r1, r1, #6
  400890:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400892:	2402      	movs	r4, #2
  400894:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400896:	f04f 31ff 	mov.w	r1, #4294967295
  40089a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40089c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40089e:	605a      	str	r2, [r3, #4]
}
  4008a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008a4:	4770      	bx	lr

004008a6 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4008a6:	0189      	lsls	r1, r1, #6
  4008a8:	2305      	movs	r3, #5
  4008aa:	5043      	str	r3, [r0, r1]
  4008ac:	4770      	bx	lr

004008ae <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  4008ae:	0189      	lsls	r1, r1, #6
  4008b0:	2302      	movs	r3, #2
  4008b2:	5043      	str	r3, [r0, r1]
  4008b4:	4770      	bx	lr

004008b6 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4008b6:	b4f0      	push	{r4, r5, r6, r7}
  4008b8:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4008ba:	2402      	movs	r4, #2
  4008bc:	9401      	str	r4, [sp, #4]
  4008be:	2408      	movs	r4, #8
  4008c0:	9402      	str	r4, [sp, #8]
  4008c2:	2420      	movs	r4, #32
  4008c4:	9403      	str	r4, [sp, #12]
  4008c6:	2480      	movs	r4, #128	; 0x80
  4008c8:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4008ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4008cc:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4008ce:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4008d0:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4008d4:	d814      	bhi.n	400900 <tc_find_mck_divisor+0x4a>
  4008d6:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4008d8:	42a0      	cmp	r0, r4
  4008da:	d217      	bcs.n	40090c <tc_find_mck_divisor+0x56>
  4008dc:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4008de:	af01      	add	r7, sp, #4
  4008e0:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4008e4:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4008e8:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4008ea:	4284      	cmp	r4, r0
  4008ec:	d30a      	bcc.n	400904 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4008ee:	4286      	cmp	r6, r0
  4008f0:	d90d      	bls.n	40090e <tc_find_mck_divisor+0x58>
			ul_index++) {
  4008f2:	3501      	adds	r5, #1
	for (ul_index = 0;
  4008f4:	2d05      	cmp	r5, #5
  4008f6:	d1f3      	bne.n	4008e0 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4008f8:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4008fa:	b006      	add	sp, #24
  4008fc:	bcf0      	pop	{r4, r5, r6, r7}
  4008fe:	4770      	bx	lr
			return 0;
  400900:	2000      	movs	r0, #0
  400902:	e7fa      	b.n	4008fa <tc_find_mck_divisor+0x44>
  400904:	2000      	movs	r0, #0
  400906:	e7f8      	b.n	4008fa <tc_find_mck_divisor+0x44>
	return 1;
  400908:	2001      	movs	r0, #1
  40090a:	e7f6      	b.n	4008fa <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40090c:	2500      	movs	r5, #0
	if (p_uldiv) {
  40090e:	b12a      	cbz	r2, 40091c <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400910:	a906      	add	r1, sp, #24
  400912:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400916:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40091a:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40091c:	2b00      	cmp	r3, #0
  40091e:	d0f3      	beq.n	400908 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400920:	601d      	str	r5, [r3, #0]
	return 1;
  400922:	2001      	movs	r0, #1
  400924:	e7e9      	b.n	4008fa <tc_find_mck_divisor+0x44>

00400926 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400926:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400928:	23ac      	movs	r3, #172	; 0xac
  40092a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40092c:	680b      	ldr	r3, [r1, #0]
  40092e:	684a      	ldr	r2, [r1, #4]
  400930:	fbb3 f3f2 	udiv	r3, r3, r2
  400934:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400936:	1e5c      	subs	r4, r3, #1
  400938:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40093c:	4294      	cmp	r4, r2
  40093e:	d80c      	bhi.n	40095a <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400940:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400942:	688b      	ldr	r3, [r1, #8]
  400944:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400946:	f240 2302 	movw	r3, #514	; 0x202
  40094a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40094e:	2350      	movs	r3, #80	; 0x50
  400950:	6003      	str	r3, [r0, #0]

	return 0;
  400952:	2000      	movs	r0, #0
}
  400954:	f85d 4b04 	ldr.w	r4, [sp], #4
  400958:	4770      	bx	lr
		return 1;
  40095a:	2001      	movs	r0, #1
  40095c:	e7fa      	b.n	400954 <uart_init+0x2e>

0040095e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40095e:	6943      	ldr	r3, [r0, #20]
  400960:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400964:	bf1a      	itte	ne
  400966:	61c1      	strne	r1, [r0, #28]
	return 0;
  400968:	2000      	movne	r0, #0
		return 1;
  40096a:	2001      	moveq	r0, #1
}
  40096c:	4770      	bx	lr

0040096e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40096e:	6943      	ldr	r3, [r0, #20]
  400970:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400974:	bf1d      	ittte	ne
  400976:	6983      	ldrne	r3, [r0, #24]
  400978:	700b      	strbne	r3, [r1, #0]
	return 0;
  40097a:	2000      	movne	r0, #0
		return 1;
  40097c:	2001      	moveq	r0, #1
}
  40097e:	4770      	bx	lr

00400980 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400980:	6943      	ldr	r3, [r0, #20]
  400982:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400986:	bf1d      	ittte	ne
  400988:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  40098c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40098e:	2000      	movne	r0, #0
		return 1;
  400990:	2001      	moveq	r0, #1
}
  400992:	4770      	bx	lr

00400994 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400994:	6943      	ldr	r3, [r0, #20]
  400996:	f013 0f01 	tst.w	r3, #1
  40099a:	d005      	beq.n	4009a8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40099c:	6983      	ldr	r3, [r0, #24]
  40099e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4009a2:	600b      	str	r3, [r1, #0]

	return 0;
  4009a4:	2000      	movs	r0, #0
  4009a6:	4770      	bx	lr
		return 1;
  4009a8:	2001      	movs	r0, #1
}
  4009aa:	4770      	bx	lr

004009ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4009ac:	e7fe      	b.n	4009ac <Dummy_Handler>
	...

004009b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4009b0:	b500      	push	{lr}
  4009b2:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4009b4:	4b25      	ldr	r3, [pc, #148]	; (400a4c <Reset_Handler+0x9c>)
  4009b6:	4a26      	ldr	r2, [pc, #152]	; (400a50 <Reset_Handler+0xa0>)
  4009b8:	429a      	cmp	r2, r3
  4009ba:	d010      	beq.n	4009de <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  4009bc:	4b25      	ldr	r3, [pc, #148]	; (400a54 <Reset_Handler+0xa4>)
  4009be:	4a23      	ldr	r2, [pc, #140]	; (400a4c <Reset_Handler+0x9c>)
  4009c0:	429a      	cmp	r2, r3
  4009c2:	d20c      	bcs.n	4009de <Reset_Handler+0x2e>
  4009c4:	3b01      	subs	r3, #1
  4009c6:	1a9b      	subs	r3, r3, r2
  4009c8:	f023 0303 	bic.w	r3, r3, #3
  4009cc:	3304      	adds	r3, #4
  4009ce:	4413      	add	r3, r2
  4009d0:	491f      	ldr	r1, [pc, #124]	; (400a50 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  4009d2:	f851 0b04 	ldr.w	r0, [r1], #4
  4009d6:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4009da:	429a      	cmp	r2, r3
  4009dc:	d1f9      	bne.n	4009d2 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4009de:	4b1e      	ldr	r3, [pc, #120]	; (400a58 <Reset_Handler+0xa8>)
  4009e0:	4a1e      	ldr	r2, [pc, #120]	; (400a5c <Reset_Handler+0xac>)
  4009e2:	429a      	cmp	r2, r3
  4009e4:	d20a      	bcs.n	4009fc <Reset_Handler+0x4c>
  4009e6:	3b01      	subs	r3, #1
  4009e8:	1a9b      	subs	r3, r3, r2
  4009ea:	f023 0303 	bic.w	r3, r3, #3
  4009ee:	3304      	adds	r3, #4
  4009f0:	4413      	add	r3, r2
		*pDest++ = 0;
  4009f2:	2100      	movs	r1, #0
  4009f4:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4009f8:	4293      	cmp	r3, r2
  4009fa:	d1fb      	bne.n	4009f4 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4009fc:	4a18      	ldr	r2, [pc, #96]	; (400a60 <Reset_Handler+0xb0>)
  4009fe:	4b19      	ldr	r3, [pc, #100]	; (400a64 <Reset_Handler+0xb4>)
  400a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400a04:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400a06:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a0a:	fab3 f383 	clz	r3, r3
  400a0e:	095b      	lsrs	r3, r3, #5
  400a10:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400a12:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400a14:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a18:	2200      	movs	r2, #0
  400a1a:	4b13      	ldr	r3, [pc, #76]	; (400a68 <Reset_Handler+0xb8>)
  400a1c:	701a      	strb	r2, [r3, #0]
	return flags;
  400a1e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400a20:	4a12      	ldr	r2, [pc, #72]	; (400a6c <Reset_Handler+0xbc>)
  400a22:	6813      	ldr	r3, [r2, #0]
  400a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400a28:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400a2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a2e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400a32:	b129      	cbz	r1, 400a40 <Reset_Handler+0x90>
		cpu_irq_enable();
  400a34:	2201      	movs	r2, #1
  400a36:	4b0c      	ldr	r3, [pc, #48]	; (400a68 <Reset_Handler+0xb8>)
  400a38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400a3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a3e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400a40:	4b0b      	ldr	r3, [pc, #44]	; (400a70 <Reset_Handler+0xc0>)
  400a42:	4798      	blx	r3

	/* Branch to main function */
	main();
  400a44:	4b0b      	ldr	r3, [pc, #44]	; (400a74 <Reset_Handler+0xc4>)
  400a46:	4798      	blx	r3
  400a48:	e7fe      	b.n	400a48 <Reset_Handler+0x98>
  400a4a:	bf00      	nop
  400a4c:	20000000 	.word	0x20000000
  400a50:	0040419c 	.word	0x0040419c
  400a54:	200009b8 	.word	0x200009b8
  400a58:	20008de0 	.word	0x20008de0
  400a5c:	200009b8 	.word	0x200009b8
  400a60:	e000ed00 	.word	0xe000ed00
  400a64:	00400000 	.word	0x00400000
  400a68:	20000000 	.word	0x20000000
  400a6c:	e000ed88 	.word	0xe000ed88
  400a70:	00401075 	.word	0x00401075
  400a74:	00400e0d 	.word	0x00400e0d

00400a78 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400a78:	4b3b      	ldr	r3, [pc, #236]	; (400b68 <SystemCoreClockUpdate+0xf0>)
  400a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a7c:	f003 0303 	and.w	r3, r3, #3
  400a80:	2b01      	cmp	r3, #1
  400a82:	d01d      	beq.n	400ac0 <SystemCoreClockUpdate+0x48>
  400a84:	b183      	cbz	r3, 400aa8 <SystemCoreClockUpdate+0x30>
  400a86:	2b02      	cmp	r3, #2
  400a88:	d036      	beq.n	400af8 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400a8a:	4b37      	ldr	r3, [pc, #220]	; (400b68 <SystemCoreClockUpdate+0xf0>)
  400a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a92:	2b70      	cmp	r3, #112	; 0x70
  400a94:	d05f      	beq.n	400b56 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400a96:	4b34      	ldr	r3, [pc, #208]	; (400b68 <SystemCoreClockUpdate+0xf0>)
  400a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a9a:	4934      	ldr	r1, [pc, #208]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400a9c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400aa0:	680b      	ldr	r3, [r1, #0]
  400aa2:	40d3      	lsrs	r3, r2
  400aa4:	600b      	str	r3, [r1, #0]
  400aa6:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400aa8:	4b31      	ldr	r3, [pc, #196]	; (400b70 <SystemCoreClockUpdate+0xf8>)
  400aaa:	695b      	ldr	r3, [r3, #20]
  400aac:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ab0:	bf14      	ite	ne
  400ab2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ab6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400aba:	4b2c      	ldr	r3, [pc, #176]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400abc:	601a      	str	r2, [r3, #0]
  400abe:	e7e4      	b.n	400a8a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400ac0:	4b29      	ldr	r3, [pc, #164]	; (400b68 <SystemCoreClockUpdate+0xf0>)
  400ac2:	6a1b      	ldr	r3, [r3, #32]
  400ac4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ac8:	d003      	beq.n	400ad2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400aca:	4a2a      	ldr	r2, [pc, #168]	; (400b74 <SystemCoreClockUpdate+0xfc>)
  400acc:	4b27      	ldr	r3, [pc, #156]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400ace:	601a      	str	r2, [r3, #0]
  400ad0:	e7db      	b.n	400a8a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ad2:	4a29      	ldr	r2, [pc, #164]	; (400b78 <SystemCoreClockUpdate+0x100>)
  400ad4:	4b25      	ldr	r3, [pc, #148]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400ad6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ad8:	4b23      	ldr	r3, [pc, #140]	; (400b68 <SystemCoreClockUpdate+0xf0>)
  400ada:	6a1b      	ldr	r3, [r3, #32]
  400adc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ae0:	2b10      	cmp	r3, #16
  400ae2:	d005      	beq.n	400af0 <SystemCoreClockUpdate+0x78>
  400ae4:	2b20      	cmp	r3, #32
  400ae6:	d1d0      	bne.n	400a8a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400ae8:	4a22      	ldr	r2, [pc, #136]	; (400b74 <SystemCoreClockUpdate+0xfc>)
  400aea:	4b20      	ldr	r3, [pc, #128]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400aec:	601a      	str	r2, [r3, #0]
				break;
  400aee:	e7cc      	b.n	400a8a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400af0:	4a22      	ldr	r2, [pc, #136]	; (400b7c <SystemCoreClockUpdate+0x104>)
  400af2:	4b1e      	ldr	r3, [pc, #120]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400af4:	601a      	str	r2, [r3, #0]
				break;
  400af6:	e7c8      	b.n	400a8a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400af8:	4b1b      	ldr	r3, [pc, #108]	; (400b68 <SystemCoreClockUpdate+0xf0>)
  400afa:	6a1b      	ldr	r3, [r3, #32]
  400afc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b00:	d016      	beq.n	400b30 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400b02:	4a1c      	ldr	r2, [pc, #112]	; (400b74 <SystemCoreClockUpdate+0xfc>)
  400b04:	4b19      	ldr	r3, [pc, #100]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400b06:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400b08:	4b17      	ldr	r3, [pc, #92]	; (400b68 <SystemCoreClockUpdate+0xf0>)
  400b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b0c:	f003 0303 	and.w	r3, r3, #3
  400b10:	2b02      	cmp	r3, #2
  400b12:	d1ba      	bne.n	400a8a <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b14:	4a14      	ldr	r2, [pc, #80]	; (400b68 <SystemCoreClockUpdate+0xf0>)
  400b16:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b18:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400b1a:	4814      	ldr	r0, [pc, #80]	; (400b6c <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b1c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400b20:	6803      	ldr	r3, [r0, #0]
  400b22:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b26:	b2d2      	uxtb	r2, r2
  400b28:	fbb3 f3f2 	udiv	r3, r3, r2
  400b2c:	6003      	str	r3, [r0, #0]
  400b2e:	e7ac      	b.n	400a8a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b30:	4a11      	ldr	r2, [pc, #68]	; (400b78 <SystemCoreClockUpdate+0x100>)
  400b32:	4b0e      	ldr	r3, [pc, #56]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400b34:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b36:	4b0c      	ldr	r3, [pc, #48]	; (400b68 <SystemCoreClockUpdate+0xf0>)
  400b38:	6a1b      	ldr	r3, [r3, #32]
  400b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b3e:	2b10      	cmp	r3, #16
  400b40:	d005      	beq.n	400b4e <SystemCoreClockUpdate+0xd6>
  400b42:	2b20      	cmp	r3, #32
  400b44:	d1e0      	bne.n	400b08 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400b46:	4a0b      	ldr	r2, [pc, #44]	; (400b74 <SystemCoreClockUpdate+0xfc>)
  400b48:	4b08      	ldr	r3, [pc, #32]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400b4a:	601a      	str	r2, [r3, #0]
				break;
  400b4c:	e7dc      	b.n	400b08 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400b4e:	4a0b      	ldr	r2, [pc, #44]	; (400b7c <SystemCoreClockUpdate+0x104>)
  400b50:	4b06      	ldr	r3, [pc, #24]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400b52:	601a      	str	r2, [r3, #0]
				break;
  400b54:	e7d8      	b.n	400b08 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400b56:	4a05      	ldr	r2, [pc, #20]	; (400b6c <SystemCoreClockUpdate+0xf4>)
  400b58:	6813      	ldr	r3, [r2, #0]
  400b5a:	4909      	ldr	r1, [pc, #36]	; (400b80 <SystemCoreClockUpdate+0x108>)
  400b5c:	fba1 1303 	umull	r1, r3, r1, r3
  400b60:	085b      	lsrs	r3, r3, #1
  400b62:	6013      	str	r3, [r2, #0]
  400b64:	4770      	bx	lr
  400b66:	bf00      	nop
  400b68:	400e0400 	.word	0x400e0400
  400b6c:	20000004 	.word	0x20000004
  400b70:	400e1810 	.word	0x400e1810
  400b74:	00b71b00 	.word	0x00b71b00
  400b78:	003d0900 	.word	0x003d0900
  400b7c:	007a1200 	.word	0x007a1200
  400b80:	aaaaaaab 	.word	0xaaaaaaab

00400b84 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400b84:	4b12      	ldr	r3, [pc, #72]	; (400bd0 <system_init_flash+0x4c>)
  400b86:	4298      	cmp	r0, r3
  400b88:	d911      	bls.n	400bae <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400b8a:	4b12      	ldr	r3, [pc, #72]	; (400bd4 <system_init_flash+0x50>)
  400b8c:	4298      	cmp	r0, r3
  400b8e:	d913      	bls.n	400bb8 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400b90:	4b11      	ldr	r3, [pc, #68]	; (400bd8 <system_init_flash+0x54>)
  400b92:	4298      	cmp	r0, r3
  400b94:	d914      	bls.n	400bc0 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400b96:	4b11      	ldr	r3, [pc, #68]	; (400bdc <system_init_flash+0x58>)
  400b98:	4298      	cmp	r0, r3
  400b9a:	d915      	bls.n	400bc8 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400b9c:	4b10      	ldr	r3, [pc, #64]	; (400be0 <system_init_flash+0x5c>)
  400b9e:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400ba0:	bf94      	ite	ls
  400ba2:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400ba6:	4a0f      	ldrhi	r2, [pc, #60]	; (400be4 <system_init_flash+0x60>)
  400ba8:	4b0f      	ldr	r3, [pc, #60]	; (400be8 <system_init_flash+0x64>)
  400baa:	601a      	str	r2, [r3, #0]
  400bac:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400bae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400bb2:	4b0d      	ldr	r3, [pc, #52]	; (400be8 <system_init_flash+0x64>)
  400bb4:	601a      	str	r2, [r3, #0]
  400bb6:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400bb8:	4a0c      	ldr	r2, [pc, #48]	; (400bec <system_init_flash+0x68>)
  400bba:	4b0b      	ldr	r3, [pc, #44]	; (400be8 <system_init_flash+0x64>)
  400bbc:	601a      	str	r2, [r3, #0]
  400bbe:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400bc0:	4a0b      	ldr	r2, [pc, #44]	; (400bf0 <system_init_flash+0x6c>)
  400bc2:	4b09      	ldr	r3, [pc, #36]	; (400be8 <system_init_flash+0x64>)
  400bc4:	601a      	str	r2, [r3, #0]
  400bc6:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400bc8:	4a0a      	ldr	r2, [pc, #40]	; (400bf4 <system_init_flash+0x70>)
  400bca:	4b07      	ldr	r3, [pc, #28]	; (400be8 <system_init_flash+0x64>)
  400bcc:	601a      	str	r2, [r3, #0]
  400bce:	4770      	bx	lr
  400bd0:	01312cff 	.word	0x01312cff
  400bd4:	026259ff 	.word	0x026259ff
  400bd8:	039386ff 	.word	0x039386ff
  400bdc:	04c4b3ff 	.word	0x04c4b3ff
  400be0:	05f5e0ff 	.word	0x05f5e0ff
  400be4:	04000500 	.word	0x04000500
  400be8:	400e0a00 	.word	0x400e0a00
  400bec:	04000100 	.word	0x04000100
  400bf0:	04000200 	.word	0x04000200
  400bf4:	04000300 	.word	0x04000300

00400bf8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400bf8:	4b0a      	ldr	r3, [pc, #40]	; (400c24 <_sbrk+0x2c>)
  400bfa:	681b      	ldr	r3, [r3, #0]
  400bfc:	b153      	cbz	r3, 400c14 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400bfe:	4b09      	ldr	r3, [pc, #36]	; (400c24 <_sbrk+0x2c>)
  400c00:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400c02:	181a      	adds	r2, r3, r0
  400c04:	4908      	ldr	r1, [pc, #32]	; (400c28 <_sbrk+0x30>)
  400c06:	4291      	cmp	r1, r2
  400c08:	db08      	blt.n	400c1c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400c0a:	4610      	mov	r0, r2
  400c0c:	4a05      	ldr	r2, [pc, #20]	; (400c24 <_sbrk+0x2c>)
  400c0e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400c10:	4618      	mov	r0, r3
  400c12:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400c14:	4a05      	ldr	r2, [pc, #20]	; (400c2c <_sbrk+0x34>)
  400c16:	4b03      	ldr	r3, [pc, #12]	; (400c24 <_sbrk+0x2c>)
  400c18:	601a      	str	r2, [r3, #0]
  400c1a:	e7f0      	b.n	400bfe <_sbrk+0x6>
		return (caddr_t) -1;	
  400c1c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop
  400c24:	200009d4 	.word	0x200009d4
  400c28:	2001fffc 	.word	0x2001fffc
  400c2c:	2000bde0 	.word	0x2000bde0

00400c30 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400c30:	f04f 30ff 	mov.w	r0, #4294967295
  400c34:	4770      	bx	lr

00400c36 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400c3a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400c3c:	2000      	movs	r0, #0
  400c3e:	4770      	bx	lr

00400c40 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400c40:	2001      	movs	r0, #1
  400c42:	4770      	bx	lr

00400c44 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400c44:	2000      	movs	r0, #0
  400c46:	4770      	bx	lr

00400c48 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  400c48:	b500      	push	{lr}
  400c4a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  400c4c:	2201      	movs	r2, #1
  400c4e:	f10d 0107 	add.w	r1, sp, #7
  400c52:	4810      	ldr	r0, [pc, #64]	; (400c94 <USART0_Handler+0x4c>)
  400c54:	4b10      	ldr	r3, [pc, #64]	; (400c98 <USART0_Handler+0x50>)
  400c56:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400c58:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400c5a:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  400c5e:	2200      	movs	r2, #0
  400c60:	4b0e      	ldr	r3, [pc, #56]	; (400c9c <USART0_Handler+0x54>)
  400c62:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  400c64:	4b0e      	ldr	r3, [pc, #56]	; (400ca0 <USART0_Handler+0x58>)
  400c66:	781b      	ldrb	r3, [r3, #0]
  400c68:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400c6c:	4a0d      	ldr	r2, [pc, #52]	; (400ca4 <USART0_Handler+0x5c>)
  400c6e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  400c70:	2b9b      	cmp	r3, #155	; 0x9b
  400c72:	d00b      	beq.n	400c8c <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  400c74:	3301      	adds	r3, #1
  400c76:	4a0a      	ldr	r2, [pc, #40]	; (400ca0 <USART0_Handler+0x58>)
  400c78:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  400c7a:	2201      	movs	r2, #1
  400c7c:	4b07      	ldr	r3, [pc, #28]	; (400c9c <USART0_Handler+0x54>)
  400c7e:	701a      	strb	r2, [r3, #0]
  400c80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400c84:	b662      	cpsie	i
}
  400c86:	b003      	add	sp, #12
  400c88:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  400c8c:	2200      	movs	r2, #0
  400c8e:	4b04      	ldr	r3, [pc, #16]	; (400ca0 <USART0_Handler+0x58>)
  400c90:	701a      	strb	r2, [r3, #0]
  400c92:	e7f2      	b.n	400c7a <USART0_Handler+0x32>
  400c94:	400a0000 	.word	0x400a0000
  400c98:	0040025d 	.word	0x0040025d
  400c9c:	20000000 	.word	0x20000000
  400ca0:	20000a74 	.word	0x20000a74
  400ca4:	200009d8 	.word	0x200009d8

00400ca8 <afec0_data_ready>:
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  400ca8:	4b0a      	ldr	r3, [pc, #40]	; (400cd4 <afec0_data_ready+0x2c>)
  400caa:	6a1b      	ldr	r3, [r3, #32]
  400cac:	b29b      	uxth	r3, r3

/* brief AFEC0 DRDY interrupt callback function. */

static void afec0_data_ready(void)
{
	g_afec0_sample_data = afec_get_latest_value(AFEC0);					// Obtain latest sample from COLLECTOR signal (EXT3 - pin4 (ch6))
  400cae:	ee07 3a90 	vmov	s15, r3
  400cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
  400cb6:	4b08      	ldr	r3, [pc, #32]	; (400cd8 <afec0_data_ready+0x30>)
  400cb8:	edc3 7a00 	vstr	s15, [r3]
	buffer[bufferIndex]= g_afec0_sample_data;							// Transfer the sample to the buffer @ sample_index within the scanning wire cycle
  400cbc:	4907      	ldr	r1, [pc, #28]	; (400cdc <afec0_data_ready+0x34>)
  400cbe:	880a      	ldrh	r2, [r1, #0]
  400cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  400cc4:	ee17 3a90 	vmov	r3, s15
  400cc8:	4805      	ldr	r0, [pc, #20]	; (400ce0 <afec0_data_ready+0x38>)
  400cca:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
	bufferIndex++;														// adjust buffer index
  400cce:	3201      	adds	r2, #1
  400cd0:	800a      	strh	r2, [r1, #0]
  400cd2:	4770      	bx	lr
  400cd4:	400b0000 	.word	0x400b0000
  400cd8:	20008db4 	.word	0x20008db4
  400cdc:	20000a76 	.word	0x20000a76
  400ce0:	20000b7c 	.word	0x20000b7c

00400ce4 <afec1_data_ready>:
  400ce4:	4b05      	ldr	r3, [pc, #20]	; (400cfc <afec1_data_ready+0x18>)
  400ce6:	6a1b      	ldr	r3, [r3, #32]
  400ce8:	b29b      	uxth	r3, r3

/* brief AFEC1 DRDY interrupt callback function. */

static void afec1_data_ready(void)
{
	g_afec1_sample_data = afec_get_latest_value(AFEC1);					// Obtain latest sample from FIDUCIAL signal (EXT3 - pin3 (ch0))
  400cea:	ee07 3a90 	vmov	s15, r3
  400cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
  400cf2:	4b03      	ldr	r3, [pc, #12]	; (400d00 <afec1_data_ready+0x1c>)
  400cf4:	edc3 7a00 	vstr	s15, [r3]
  400cf8:	4770      	bx	lr
  400cfa:	bf00      	nop
  400cfc:	400b4000 	.word	0x400b4000
  400d00:	20000b78 	.word	0x20000b78

00400d04 <usart_serial_getchar>:
{
  400d04:	b5f0      	push	{r4, r5, r6, r7, lr}
  400d06:	b083      	sub	sp, #12
  400d08:	4605      	mov	r5, r0
  400d0a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400d0c:	2300      	movs	r3, #0
  400d0e:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400d10:	4b18      	ldr	r3, [pc, #96]	; (400d74 <usart_serial_getchar+0x70>)
  400d12:	4298      	cmp	r0, r3
  400d14:	d00a      	beq.n	400d2c <usart_serial_getchar+0x28>
	if (UART1 == (Uart*)p_usart) {
  400d16:	4b18      	ldr	r3, [pc, #96]	; (400d78 <usart_serial_getchar+0x74>)
  400d18:	4298      	cmp	r0, r3
  400d1a:	d00f      	beq.n	400d3c <usart_serial_getchar+0x38>
	if (USART0 == p_usart) {
  400d1c:	4b17      	ldr	r3, [pc, #92]	; (400d7c <usart_serial_getchar+0x78>)
  400d1e:	4298      	cmp	r0, r3
  400d20:	d014      	beq.n	400d4c <usart_serial_getchar+0x48>
	if (USART1 == p_usart) {
  400d22:	4b17      	ldr	r3, [pc, #92]	; (400d80 <usart_serial_getchar+0x7c>)
  400d24:	429d      	cmp	r5, r3
  400d26:	d01b      	beq.n	400d60 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400d28:	b003      	add	sp, #12
  400d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400d2c:	461f      	mov	r7, r3
  400d2e:	4e15      	ldr	r6, [pc, #84]	; (400d84 <usart_serial_getchar+0x80>)
  400d30:	4621      	mov	r1, r4
  400d32:	4638      	mov	r0, r7
  400d34:	47b0      	blx	r6
  400d36:	2800      	cmp	r0, #0
  400d38:	d1fa      	bne.n	400d30 <usart_serial_getchar+0x2c>
  400d3a:	e7f2      	b.n	400d22 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400d3c:	461e      	mov	r6, r3
  400d3e:	4d11      	ldr	r5, [pc, #68]	; (400d84 <usart_serial_getchar+0x80>)
  400d40:	4621      	mov	r1, r4
  400d42:	4630      	mov	r0, r6
  400d44:	47a8      	blx	r5
  400d46:	2800      	cmp	r0, #0
  400d48:	d1fa      	bne.n	400d40 <usart_serial_getchar+0x3c>
  400d4a:	e7ed      	b.n	400d28 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400d4c:	461e      	mov	r6, r3
  400d4e:	4d0e      	ldr	r5, [pc, #56]	; (400d88 <usart_serial_getchar+0x84>)
  400d50:	a901      	add	r1, sp, #4
  400d52:	4630      	mov	r0, r6
  400d54:	47a8      	blx	r5
  400d56:	2800      	cmp	r0, #0
  400d58:	d1fa      	bne.n	400d50 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400d5a:	9b01      	ldr	r3, [sp, #4]
  400d5c:	7023      	strb	r3, [r4, #0]
  400d5e:	e7e3      	b.n	400d28 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400d60:	461e      	mov	r6, r3
  400d62:	4d09      	ldr	r5, [pc, #36]	; (400d88 <usart_serial_getchar+0x84>)
  400d64:	a901      	add	r1, sp, #4
  400d66:	4630      	mov	r0, r6
  400d68:	47a8      	blx	r5
  400d6a:	2800      	cmp	r0, #0
  400d6c:	d1fa      	bne.n	400d64 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400d6e:	9b01      	ldr	r3, [sp, #4]
  400d70:	7023      	strb	r3, [r4, #0]
}
  400d72:	e7d9      	b.n	400d28 <usart_serial_getchar+0x24>
  400d74:	400e0600 	.word	0x400e0600
  400d78:	40060600 	.word	0x40060600
  400d7c:	400a0000 	.word	0x400a0000
  400d80:	400a4000 	.word	0x400a4000
  400d84:	0040096f 	.word	0x0040096f
  400d88:	00400995 	.word	0x00400995

00400d8c <usart_serial_putchar>:
{
  400d8c:	b570      	push	{r4, r5, r6, lr}
  400d8e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400d90:	4b18      	ldr	r3, [pc, #96]	; (400df4 <usart_serial_putchar+0x68>)
  400d92:	4298      	cmp	r0, r3
  400d94:	d00a      	beq.n	400dac <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400d96:	4b18      	ldr	r3, [pc, #96]	; (400df8 <usart_serial_putchar+0x6c>)
  400d98:	4298      	cmp	r0, r3
  400d9a:	d010      	beq.n	400dbe <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400d9c:	4b17      	ldr	r3, [pc, #92]	; (400dfc <usart_serial_putchar+0x70>)
  400d9e:	4298      	cmp	r0, r3
  400da0:	d016      	beq.n	400dd0 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400da2:	4b17      	ldr	r3, [pc, #92]	; (400e00 <usart_serial_putchar+0x74>)
  400da4:	4298      	cmp	r0, r3
  400da6:	d01c      	beq.n	400de2 <usart_serial_putchar+0x56>
	return 0;
  400da8:	2000      	movs	r0, #0
}
  400daa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400dac:	461e      	mov	r6, r3
  400dae:	4d15      	ldr	r5, [pc, #84]	; (400e04 <usart_serial_putchar+0x78>)
  400db0:	4621      	mov	r1, r4
  400db2:	4630      	mov	r0, r6
  400db4:	47a8      	blx	r5
  400db6:	2800      	cmp	r0, #0
  400db8:	d1fa      	bne.n	400db0 <usart_serial_putchar+0x24>
		return 1;
  400dba:	2001      	movs	r0, #1
  400dbc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400dbe:	461e      	mov	r6, r3
  400dc0:	4d10      	ldr	r5, [pc, #64]	; (400e04 <usart_serial_putchar+0x78>)
  400dc2:	4621      	mov	r1, r4
  400dc4:	4630      	mov	r0, r6
  400dc6:	47a8      	blx	r5
  400dc8:	2800      	cmp	r0, #0
  400dca:	d1fa      	bne.n	400dc2 <usart_serial_putchar+0x36>
		return 1;
  400dcc:	2001      	movs	r0, #1
  400dce:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400dd0:	461e      	mov	r6, r3
  400dd2:	4d0d      	ldr	r5, [pc, #52]	; (400e08 <usart_serial_putchar+0x7c>)
  400dd4:	4621      	mov	r1, r4
  400dd6:	4630      	mov	r0, r6
  400dd8:	47a8      	blx	r5
  400dda:	2800      	cmp	r0, #0
  400ddc:	d1fa      	bne.n	400dd4 <usart_serial_putchar+0x48>
		return 1;
  400dde:	2001      	movs	r0, #1
  400de0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400de2:	461e      	mov	r6, r3
  400de4:	4d08      	ldr	r5, [pc, #32]	; (400e08 <usart_serial_putchar+0x7c>)
  400de6:	4621      	mov	r1, r4
  400de8:	4630      	mov	r0, r6
  400dea:	47a8      	blx	r5
  400dec:	2800      	cmp	r0, #0
  400dee:	d1fa      	bne.n	400de6 <usart_serial_putchar+0x5a>
		return 1;
  400df0:	2001      	movs	r0, #1
  400df2:	bd70      	pop	{r4, r5, r6, pc}
  400df4:	400e0600 	.word	0x400e0600
  400df8:	40060600 	.word	0x40060600
  400dfc:	400a0000 	.word	0x400a0000
  400e00:	400a4000 	.word	0x400a4000
  400e04:	0040095f 	.word	0x0040095f
  400e08:	00400981 	.word	0x00400981

00400e0c <main>:




int main (void)
{
  400e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400e10:	b08d      	sub	sp, #52	; 0x34
	/* Initialize the SAM system. */
	sysclk_init();
  400e12:	4b70      	ldr	r3, [pc, #448]	; (400fd4 <main+0x1c8>)
  400e14:	4798      	blx	r3
	board_init();
  400e16:	4b70      	ldr	r3, [pc, #448]	; (400fd8 <main+0x1cc>)
  400e18:	4798      	blx	r3
  400e1a:	2007      	movs	r0, #7
  400e1c:	f8df 924c 	ldr.w	r9, [pc, #588]	; 40106c <main+0x260>
  400e20:	47c8      	blx	r9
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400e22:	4c6e      	ldr	r4, [pc, #440]	; (400fdc <main+0x1d0>)
  400e24:	4b6e      	ldr	r3, [pc, #440]	; (400fe0 <main+0x1d4>)
  400e26:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400e28:	4a6e      	ldr	r2, [pc, #440]	; (400fe4 <main+0x1d8>)
  400e2a:	4b6f      	ldr	r3, [pc, #444]	; (400fe8 <main+0x1dc>)
  400e2c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400e2e:	4a6f      	ldr	r2, [pc, #444]	; (400fec <main+0x1e0>)
  400e30:	4b6f      	ldr	r3, [pc, #444]	; (400ff0 <main+0x1e4>)
  400e32:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400e34:	4d6f      	ldr	r5, [pc, #444]	; (400ff4 <main+0x1e8>)
  400e36:	9505      	str	r5, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
  400e38:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400e3c:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
  400e3e:	f44f 6800 	mov.w	r8, #2048	; 0x800
  400e42:	f8cd 801c 	str.w	r8, [sp, #28]
  400e46:	2007      	movs	r0, #7
  400e48:	47c8      	blx	r9
		uart_init((Uart*)p_usart, &uart_settings);
  400e4a:	a905      	add	r1, sp, #20
  400e4c:	4620      	mov	r0, r4
  400e4e:	4b6a      	ldr	r3, [pc, #424]	; (400ff8 <main+0x1ec>)
  400e50:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400e52:	4e6a      	ldr	r6, [pc, #424]	; (400ffc <main+0x1f0>)
  400e54:	6833      	ldr	r3, [r6, #0]
  400e56:	2100      	movs	r1, #0
  400e58:	6898      	ldr	r0, [r3, #8]
  400e5a:	4c69      	ldr	r4, [pc, #420]	; (401000 <main+0x1f4>)
  400e5c:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400e5e:	6833      	ldr	r3, [r6, #0]
  400e60:	2100      	movs	r1, #0
  400e62:	6858      	ldr	r0, [r3, #4]
  400e64:	47a0      	blx	r4

	configure_console();


	g_afec0_sample_data = 0;
  400e66:	2300      	movs	r3, #0
  400e68:	4a66      	ldr	r2, [pc, #408]	; (401004 <main+0x1f8>)
  400e6a:	6013      	str	r3, [r2, #0]
	g_afec1_sample_data = 0;
  400e6c:	4a66      	ldr	r2, [pc, #408]	; (401008 <main+0x1fc>)
  400e6e:	6013      	str	r3, [r2, #0]
	afec_enable(AFEC0);
  400e70:	4c66      	ldr	r4, [pc, #408]	; (40100c <main+0x200>)
  400e72:	4620      	mov	r0, r4
  400e74:	4f66      	ldr	r7, [pc, #408]	; (401010 <main+0x204>)
  400e76:	47b8      	blx	r7
	afec_get_config_defaults(&afec_cfg);
  400e78:	a805      	add	r0, sp, #20
  400e7a:	4b66      	ldr	r3, [pc, #408]	; (401014 <main+0x208>)
  400e7c:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  400e7e:	a802      	add	r0, sp, #8
  400e80:	4b65      	ldr	r3, [pc, #404]	; (401018 <main+0x20c>)
  400e82:	4798      	blx	r3
		afec_enable(AFEC1);
  400e84:	4e65      	ldr	r6, [pc, #404]	; (40101c <main+0x210>)
  400e86:	4630      	mov	r0, r6
  400e88:	47b8      	blx	r7
		afec_init(AFEC0, &afec_cfg);
  400e8a:	a905      	add	r1, sp, #20
  400e8c:	4620      	mov	r0, r4
  400e8e:	4f64      	ldr	r7, [pc, #400]	; (401020 <main+0x214>)
  400e90:	47b8      	blx	r7
		afec_init(AFEC1, &afec_cfg);
  400e92:	a905      	add	r1, sp, #20
  400e94:	4630      	mov	r0, r6
  400e96:	47b8      	blx	r7
		afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  400e98:	aa02      	add	r2, sp, #8
  400e9a:	2106      	movs	r1, #6
  400e9c:	4620      	mov	r0, r4
  400e9e:	4f61      	ldr	r7, [pc, #388]	; (401024 <main+0x218>)
  400ea0:	47b8      	blx	r7
		afec_ch_set_config(AFEC1, AFEC_CHANNEL_0, &afec_ch_cfg);
  400ea2:	aa02      	add	r2, sp, #8
  400ea4:	2100      	movs	r1, #0
  400ea6:	4630      	mov	r0, r6
  400ea8:	47b8      	blx	r7
	afec->AFEC_CSELR = afec_ch;
  400eaa:	2700      	movs	r7, #0
  400eac:	6677      	str	r7, [r6, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400eae:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  400eb2:	2306      	movs	r3, #6
  400eb4:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400eb6:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	reg = afec->AFEC_MR;
  400eba:	6873      	ldr	r3, [r6, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400ebc:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  400ec0:	6073      	str	r3, [r6, #4]
    uint32_t ul_div = 0;
  400ec2:	9703      	str	r7, [sp, #12]
	uint32_t ul_tc_clks = 0;
  400ec4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  400ec8:	f848 7d20 	str.w	r7, [r8, #-32]!
	pmc_enable_periph_clk(ID_TC0);														// Enable peripheral clock of timer counter 0
  400ecc:	2015      	movs	r0, #21
  400ece:	47c8      	blx	r9
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  400ed0:	9500      	str	r5, [sp, #0]
  400ed2:	4643      	mov	r3, r8
  400ed4:	aa03      	add	r2, sp, #12
  400ed6:	4629      	mov	r1, r5
  400ed8:	4853      	ldr	r0, [pc, #332]	; (401028 <main+0x21c>)
  400eda:	f8df 8194 	ldr.w	r8, [pc, #404]	; 401070 <main+0x264>
  400ede:	47c0      	blx	r8
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  400ee0:	f8df 8174 	ldr.w	r8, [pc, #372]	; 401058 <main+0x24c>
  400ee4:	9a04      	ldr	r2, [sp, #16]
  400ee6:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  400eea:	4639      	mov	r1, r7
  400eec:	4640      	mov	r0, r8
  400eee:	4b4f      	ldr	r3, [pc, #316]	; (40102c <main+0x220>)
  400ef0:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  400ef2:	9b03      	ldr	r3, [sp, #12]
  400ef4:	fbb5 f3f3 	udiv	r3, r5, r3
  400ef8:	4a4d      	ldr	r2, [pc, #308]	; (401030 <main+0x224>)
  400efa:	fba2 2303 	umull	r2, r3, r2, r3
  400efe:	0c5a      	lsrs	r2, r3, #17
  400f00:	f8c8 2014 	str.w	r2, [r8, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  400f04:	0c1b      	lsrs	r3, r3, #16
  400f06:	f8c8 301c 	str.w	r3, [r8, #28]
	tc_start(TC0, 0);																	// Start the TC0 timer
  400f0a:	4639      	mov	r1, r7
  400f0c:	4640      	mov	r0, r8
  400f0e:	4b49      	ldr	r3, [pc, #292]	; (401034 <main+0x228>)
  400f10:	4798      	blx	r3
	reg = afec->AFEC_MR;
  400f12:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400f14:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  400f18:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  400f1c:	6063      	str	r3, [r4, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400f1e:	2501      	movs	r5, #1
  400f20:	6175      	str	r5, [r6, #20]
  400f22:	2340      	movs	r3, #64	; 0x40
  400f24:	6163      	str	r3, [r4, #20]
		afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  400f26:	462b      	mov	r3, r5
  400f28:	4a43      	ldr	r2, [pc, #268]	; (401038 <main+0x22c>)
  400f2a:	2110      	movs	r1, #16
  400f2c:	4620      	mov	r0, r4
  400f2e:	4f43      	ldr	r7, [pc, #268]	; (40103c <main+0x230>)
  400f30:	47b8      	blx	r7
		afec_set_callback(AFEC1, AFEC_INTERRUPT_DATA_READY, afec1_data_ready, 1);
  400f32:	462b      	mov	r3, r5
  400f34:	4a42      	ldr	r2, [pc, #264]	; (401040 <main+0x234>)
  400f36:	2110      	movs	r1, #16
  400f38:	4630      	mov	r0, r6
  400f3a:	47b8      	blx	r7
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  400f3c:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  400f3e:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  400f40:	6863      	ldr	r3, [r4, #4]
  400f42:	f013 0f80 	tst.w	r3, #128	; 0x80
  400f46:	d101      	bne.n	400f4c <main+0x140>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  400f48:	2208      	movs	r2, #8
  400f4a:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  400f4c:	4a2f      	ldr	r2, [pc, #188]	; (40100c <main+0x200>)
  400f4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
		while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  400f50:	2b00      	cmp	r3, #0
  400f52:	dafc      	bge.n	400f4e <main+0x142>
	reg = afec->AFEC_CHSR;
  400f54:	4b31      	ldr	r3, [pc, #196]	; (40101c <main+0x210>)
  400f56:	69da      	ldr	r2, [r3, #28]
	afec->AFEC_CDOR = reg;
  400f58:	65da      	str	r2, [r3, #92]	; 0x5c
	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  400f5a:	685b      	ldr	r3, [r3, #4]
  400f5c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400f60:	d102      	bne.n	400f68 <main+0x15c>
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  400f62:	2208      	movs	r2, #8
  400f64:	4b2d      	ldr	r3, [pc, #180]	; (40101c <main+0x210>)
  400f66:	601a      	str	r2, [r3, #0]
	return afec->AFEC_ISR;
  400f68:	4a2c      	ldr	r2, [pc, #176]	; (40101c <main+0x210>)
  400f6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
		while((afec_get_interrupt_status(AFEC1) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  400f6c:	2b00      	cmp	r3, #0
  400f6e:	dafc      	bge.n	400f6a <main+0x15e>
	g_max_digital = MAX_DIGITAL_12_BIT;
	bool test;
	set_afec_test();
			
	while (bufferIndex < buffersize) 
  400f70:	4b34      	ldr	r3, [pc, #208]	; (401044 <main+0x238>)
  400f72:	881a      	ldrh	r2, [r3, #0]
  400f74:	f244 131a 	movw	r3, #16666	; 0x411a
  400f78:	429a      	cmp	r2, r3
  400f7a:	d809      	bhi.n	400f90 <main+0x184>
		{			
			printf(".");
  400f7c:	4e32      	ldr	r6, [pc, #200]	; (401048 <main+0x23c>)
  400f7e:	4d33      	ldr	r5, [pc, #204]	; (40104c <main+0x240>)
	while (bufferIndex < buffersize) 
  400f80:	4c30      	ldr	r4, [pc, #192]	; (401044 <main+0x238>)
			printf(".");
  400f82:	4630      	mov	r0, r6
  400f84:	47a8      	blx	r5
	while (bufferIndex < buffersize) 
  400f86:	8822      	ldrh	r2, [r4, #0]
  400f88:	f244 131a 	movw	r3, #16666	; 0x411a
  400f8c:	429a      	cmp	r2, r3
  400f8e:	d9f8      	bls.n	400f82 <main+0x176>
		}
		
					
	afec_disable_interrupt(AFEC0, AFEC_INTERRUPT_ALL);
  400f90:	4d2f      	ldr	r5, [pc, #188]	; (401050 <main+0x244>)
  400f92:	4629      	mov	r1, r5
  400f94:	481d      	ldr	r0, [pc, #116]	; (40100c <main+0x200>)
  400f96:	4c2f      	ldr	r4, [pc, #188]	; (401054 <main+0x248>)
  400f98:	47a0      	blx	r4
	afec_disable_interrupt(AFEC1, AFEC_INTERRUPT_ALL);
  400f9a:	4629      	mov	r1, r5
  400f9c:	481f      	ldr	r0, [pc, #124]	; (40101c <main+0x210>)
  400f9e:	47a0      	blx	r4
	tc_stop(TC0, 0);
  400fa0:	2100      	movs	r1, #0
  400fa2:	482d      	ldr	r0, [pc, #180]	; (401058 <main+0x24c>)
  400fa4:	4b2d      	ldr	r3, [pc, #180]	; (40105c <main+0x250>)
  400fa6:	4798      	blx	r3
  400fa8:	4c2d      	ldr	r4, [pc, #180]	; (401060 <main+0x254>)
  400faa:	4f2e      	ldr	r7, [pc, #184]	; (401064 <main+0x258>)
	usart_serial_write_packet(CONF_UART, &sample_swapped_bytes ,2);
  400fac:	4e0b      	ldr	r6, [pc, #44]	; (400fdc <main+0x1d0>)
  400fae:	4d2e      	ldr	r5, [pc, #184]	; (401068 <main+0x25c>)
	
	uint16_t i=0;	
	while (i< buffersize)
		{
			print_sample(buffer[i]);
  400fb0:	f834 2f02 	ldrh.w	r2, [r4, #2]!
	uint16_t sample_swapped_bytes = ((sample<<8)&0xff00)|((sample>>8)&0x00ff);
  400fb4:	0a13      	lsrs	r3, r2, #8
  400fb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400fba:	f8ad 3014 	strh.w	r3, [sp, #20]
	usart_serial_write_packet(CONF_UART, &sample_swapped_bytes ,2);
  400fbe:	2202      	movs	r2, #2
  400fc0:	a905      	add	r1, sp, #20
  400fc2:	4630      	mov	r0, r6
  400fc4:	47a8      	blx	r5
	while (i< buffersize)
  400fc6:	42bc      	cmp	r4, r7
  400fc8:	d1f2      	bne.n	400fb0 <main+0x1a4>
			i++;
		}
		
  400fca:	2000      	movs	r0, #0
  400fcc:	b00d      	add	sp, #52	; 0x34
  400fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400fd2:	bf00      	nop
  400fd4:	00400165 	.word	0x00400165
  400fd8:	00400389 	.word	0x00400389
  400fdc:	400e0600 	.word	0x400e0600
  400fe0:	20000abc 	.word	0x20000abc
  400fe4:	00400d8d 	.word	0x00400d8d
  400fe8:	20000ab8 	.word	0x20000ab8
  400fec:	00400d05 	.word	0x00400d05
  400ff0:	20000ab4 	.word	0x20000ab4
  400ff4:	05b8d800 	.word	0x05b8d800
  400ff8:	00400927 	.word	0x00400927
  400ffc:	20000008 	.word	0x20000008
  401000:	00401189 	.word	0x00401189
  401004:	20008db4 	.word	0x20008db4
  401008:	20000b78 	.word	0x20000b78
  40100c:	400b0000 	.word	0x400b0000
  401010:	004006ed 	.word	0x004006ed
  401014:	004004ed 	.word	0x004004ed
  401018:	0040051d 	.word	0x0040051d
  40101c:	400b4000 	.word	0x400b4000
  401020:	00400529 	.word	0x00400529
  401024:	004004bd 	.word	0x004004bd
  401028:	0003d090 	.word	0x0003d090
  40102c:	0040088d 	.word	0x0040088d
  401030:	431bde83 	.word	0x431bde83
  401034:	004008a7 	.word	0x004008a7
  401038:	00400ca9 	.word	0x00400ca9
  40103c:	00400635 	.word	0x00400635
  401040:	00400ce5 	.word	0x00400ce5
  401044:	20000a76 	.word	0x20000a76
  401048:	00404008 	.word	0x00404008
  40104c:	004010c5 	.word	0x004010c5
  401050:	df00ffff 	.word	0xdf00ffff
  401054:	0040068d 	.word	0x0040068d
  401058:	40090000 	.word	0x40090000
  40105c:	004008af 	.word	0x004008af
  401060:	20000b7a 	.word	0x20000b7a
  401064:	20008db0 	.word	0x20008db0
  401068:	004001cd 	.word	0x004001cd
  40106c:	00400839 	.word	0x00400839
  401070:	004008b7 	.word	0x004008b7

00401074 <__libc_init_array>:
  401074:	b570      	push	{r4, r5, r6, lr}
  401076:	4e0f      	ldr	r6, [pc, #60]	; (4010b4 <__libc_init_array+0x40>)
  401078:	4d0f      	ldr	r5, [pc, #60]	; (4010b8 <__libc_init_array+0x44>)
  40107a:	1b76      	subs	r6, r6, r5
  40107c:	10b6      	asrs	r6, r6, #2
  40107e:	bf18      	it	ne
  401080:	2400      	movne	r4, #0
  401082:	d005      	beq.n	401090 <__libc_init_array+0x1c>
  401084:	3401      	adds	r4, #1
  401086:	f855 3b04 	ldr.w	r3, [r5], #4
  40108a:	4798      	blx	r3
  40108c:	42a6      	cmp	r6, r4
  40108e:	d1f9      	bne.n	401084 <__libc_init_array+0x10>
  401090:	4e0a      	ldr	r6, [pc, #40]	; (4010bc <__libc_init_array+0x48>)
  401092:	4d0b      	ldr	r5, [pc, #44]	; (4010c0 <__libc_init_array+0x4c>)
  401094:	1b76      	subs	r6, r6, r5
  401096:	f003 f86b 	bl	404170 <_init>
  40109a:	10b6      	asrs	r6, r6, #2
  40109c:	bf18      	it	ne
  40109e:	2400      	movne	r4, #0
  4010a0:	d006      	beq.n	4010b0 <__libc_init_array+0x3c>
  4010a2:	3401      	adds	r4, #1
  4010a4:	f855 3b04 	ldr.w	r3, [r5], #4
  4010a8:	4798      	blx	r3
  4010aa:	42a6      	cmp	r6, r4
  4010ac:	d1f9      	bne.n	4010a2 <__libc_init_array+0x2e>
  4010ae:	bd70      	pop	{r4, r5, r6, pc}
  4010b0:	bd70      	pop	{r4, r5, r6, pc}
  4010b2:	bf00      	nop
  4010b4:	0040417c 	.word	0x0040417c
  4010b8:	0040417c 	.word	0x0040417c
  4010bc:	00404184 	.word	0x00404184
  4010c0:	0040417c 	.word	0x0040417c

004010c4 <iprintf>:
  4010c4:	b40f      	push	{r0, r1, r2, r3}
  4010c6:	b500      	push	{lr}
  4010c8:	4907      	ldr	r1, [pc, #28]	; (4010e8 <iprintf+0x24>)
  4010ca:	b083      	sub	sp, #12
  4010cc:	ab04      	add	r3, sp, #16
  4010ce:	6808      	ldr	r0, [r1, #0]
  4010d0:	f853 2b04 	ldr.w	r2, [r3], #4
  4010d4:	6881      	ldr	r1, [r0, #8]
  4010d6:	9301      	str	r3, [sp, #4]
  4010d8:	f000 f966 	bl	4013a8 <_vfiprintf_r>
  4010dc:	b003      	add	sp, #12
  4010de:	f85d eb04 	ldr.w	lr, [sp], #4
  4010e2:	b004      	add	sp, #16
  4010e4:	4770      	bx	lr
  4010e6:	bf00      	nop
  4010e8:	20000008 	.word	0x20000008

004010ec <memset>:
  4010ec:	b470      	push	{r4, r5, r6}
  4010ee:	0786      	lsls	r6, r0, #30
  4010f0:	d046      	beq.n	401180 <memset+0x94>
  4010f2:	1e54      	subs	r4, r2, #1
  4010f4:	2a00      	cmp	r2, #0
  4010f6:	d041      	beq.n	40117c <memset+0x90>
  4010f8:	b2ca      	uxtb	r2, r1
  4010fa:	4603      	mov	r3, r0
  4010fc:	e002      	b.n	401104 <memset+0x18>
  4010fe:	f114 34ff 	adds.w	r4, r4, #4294967295
  401102:	d33b      	bcc.n	40117c <memset+0x90>
  401104:	f803 2b01 	strb.w	r2, [r3], #1
  401108:	079d      	lsls	r5, r3, #30
  40110a:	d1f8      	bne.n	4010fe <memset+0x12>
  40110c:	2c03      	cmp	r4, #3
  40110e:	d92e      	bls.n	40116e <memset+0x82>
  401110:	b2cd      	uxtb	r5, r1
  401112:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401116:	2c0f      	cmp	r4, #15
  401118:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40111c:	d919      	bls.n	401152 <memset+0x66>
  40111e:	f103 0210 	add.w	r2, r3, #16
  401122:	4626      	mov	r6, r4
  401124:	3e10      	subs	r6, #16
  401126:	2e0f      	cmp	r6, #15
  401128:	f842 5c10 	str.w	r5, [r2, #-16]
  40112c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401130:	f842 5c08 	str.w	r5, [r2, #-8]
  401134:	f842 5c04 	str.w	r5, [r2, #-4]
  401138:	f102 0210 	add.w	r2, r2, #16
  40113c:	d8f2      	bhi.n	401124 <memset+0x38>
  40113e:	f1a4 0210 	sub.w	r2, r4, #16
  401142:	f022 020f 	bic.w	r2, r2, #15
  401146:	f004 040f 	and.w	r4, r4, #15
  40114a:	3210      	adds	r2, #16
  40114c:	2c03      	cmp	r4, #3
  40114e:	4413      	add	r3, r2
  401150:	d90d      	bls.n	40116e <memset+0x82>
  401152:	461e      	mov	r6, r3
  401154:	4622      	mov	r2, r4
  401156:	3a04      	subs	r2, #4
  401158:	2a03      	cmp	r2, #3
  40115a:	f846 5b04 	str.w	r5, [r6], #4
  40115e:	d8fa      	bhi.n	401156 <memset+0x6a>
  401160:	1f22      	subs	r2, r4, #4
  401162:	f022 0203 	bic.w	r2, r2, #3
  401166:	3204      	adds	r2, #4
  401168:	4413      	add	r3, r2
  40116a:	f004 0403 	and.w	r4, r4, #3
  40116e:	b12c      	cbz	r4, 40117c <memset+0x90>
  401170:	b2c9      	uxtb	r1, r1
  401172:	441c      	add	r4, r3
  401174:	f803 1b01 	strb.w	r1, [r3], #1
  401178:	429c      	cmp	r4, r3
  40117a:	d1fb      	bne.n	401174 <memset+0x88>
  40117c:	bc70      	pop	{r4, r5, r6}
  40117e:	4770      	bx	lr
  401180:	4614      	mov	r4, r2
  401182:	4603      	mov	r3, r0
  401184:	e7c2      	b.n	40110c <memset+0x20>
  401186:	bf00      	nop

00401188 <setbuf>:
  401188:	2900      	cmp	r1, #0
  40118a:	bf0c      	ite	eq
  40118c:	2202      	moveq	r2, #2
  40118e:	2200      	movne	r2, #0
  401190:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401194:	f000 b800 	b.w	401198 <setvbuf>

00401198 <setvbuf>:
  401198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40119c:	4c61      	ldr	r4, [pc, #388]	; (401324 <setvbuf+0x18c>)
  40119e:	6825      	ldr	r5, [r4, #0]
  4011a0:	b083      	sub	sp, #12
  4011a2:	4604      	mov	r4, r0
  4011a4:	460f      	mov	r7, r1
  4011a6:	4690      	mov	r8, r2
  4011a8:	461e      	mov	r6, r3
  4011aa:	b115      	cbz	r5, 4011b2 <setvbuf+0x1a>
  4011ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4011ae:	2b00      	cmp	r3, #0
  4011b0:	d064      	beq.n	40127c <setvbuf+0xe4>
  4011b2:	f1b8 0f02 	cmp.w	r8, #2
  4011b6:	d006      	beq.n	4011c6 <setvbuf+0x2e>
  4011b8:	f1b8 0f01 	cmp.w	r8, #1
  4011bc:	f200 809f 	bhi.w	4012fe <setvbuf+0x166>
  4011c0:	2e00      	cmp	r6, #0
  4011c2:	f2c0 809c 	blt.w	4012fe <setvbuf+0x166>
  4011c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4011c8:	07d8      	lsls	r0, r3, #31
  4011ca:	d534      	bpl.n	401236 <setvbuf+0x9e>
  4011cc:	4621      	mov	r1, r4
  4011ce:	4628      	mov	r0, r5
  4011d0:	f001 f888 	bl	4022e4 <_fflush_r>
  4011d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4011d6:	b141      	cbz	r1, 4011ea <setvbuf+0x52>
  4011d8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4011dc:	4299      	cmp	r1, r3
  4011de:	d002      	beq.n	4011e6 <setvbuf+0x4e>
  4011e0:	4628      	mov	r0, r5
  4011e2:	f001 f9fd 	bl	4025e0 <_free_r>
  4011e6:	2300      	movs	r3, #0
  4011e8:	6323      	str	r3, [r4, #48]	; 0x30
  4011ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011ee:	2200      	movs	r2, #0
  4011f0:	61a2      	str	r2, [r4, #24]
  4011f2:	6062      	str	r2, [r4, #4]
  4011f4:	061a      	lsls	r2, r3, #24
  4011f6:	d43a      	bmi.n	40126e <setvbuf+0xd6>
  4011f8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4011fc:	f023 0303 	bic.w	r3, r3, #3
  401200:	f1b8 0f02 	cmp.w	r8, #2
  401204:	81a3      	strh	r3, [r4, #12]
  401206:	d01d      	beq.n	401244 <setvbuf+0xac>
  401208:	ab01      	add	r3, sp, #4
  40120a:	466a      	mov	r2, sp
  40120c:	4621      	mov	r1, r4
  40120e:	4628      	mov	r0, r5
  401210:	f001 fc84 	bl	402b1c <__swhatbuf_r>
  401214:	89a3      	ldrh	r3, [r4, #12]
  401216:	4318      	orrs	r0, r3
  401218:	81a0      	strh	r0, [r4, #12]
  40121a:	2e00      	cmp	r6, #0
  40121c:	d132      	bne.n	401284 <setvbuf+0xec>
  40121e:	9e00      	ldr	r6, [sp, #0]
  401220:	4630      	mov	r0, r6
  401222:	f001 fcf3 	bl	402c0c <malloc>
  401226:	4607      	mov	r7, r0
  401228:	2800      	cmp	r0, #0
  40122a:	d06b      	beq.n	401304 <setvbuf+0x16c>
  40122c:	89a3      	ldrh	r3, [r4, #12]
  40122e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401232:	81a3      	strh	r3, [r4, #12]
  401234:	e028      	b.n	401288 <setvbuf+0xf0>
  401236:	89a3      	ldrh	r3, [r4, #12]
  401238:	0599      	lsls	r1, r3, #22
  40123a:	d4c7      	bmi.n	4011cc <setvbuf+0x34>
  40123c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40123e:	f001 fc69 	bl	402b14 <__retarget_lock_acquire_recursive>
  401242:	e7c3      	b.n	4011cc <setvbuf+0x34>
  401244:	2500      	movs	r5, #0
  401246:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401248:	2600      	movs	r6, #0
  40124a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40124e:	f043 0302 	orr.w	r3, r3, #2
  401252:	2001      	movs	r0, #1
  401254:	60a6      	str	r6, [r4, #8]
  401256:	07ce      	lsls	r6, r1, #31
  401258:	81a3      	strh	r3, [r4, #12]
  40125a:	6022      	str	r2, [r4, #0]
  40125c:	6122      	str	r2, [r4, #16]
  40125e:	6160      	str	r0, [r4, #20]
  401260:	d401      	bmi.n	401266 <setvbuf+0xce>
  401262:	0598      	lsls	r0, r3, #22
  401264:	d53e      	bpl.n	4012e4 <setvbuf+0x14c>
  401266:	4628      	mov	r0, r5
  401268:	b003      	add	sp, #12
  40126a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40126e:	6921      	ldr	r1, [r4, #16]
  401270:	4628      	mov	r0, r5
  401272:	f001 f9b5 	bl	4025e0 <_free_r>
  401276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40127a:	e7bd      	b.n	4011f8 <setvbuf+0x60>
  40127c:	4628      	mov	r0, r5
  40127e:	f001 f889 	bl	402394 <__sinit>
  401282:	e796      	b.n	4011b2 <setvbuf+0x1a>
  401284:	2f00      	cmp	r7, #0
  401286:	d0cb      	beq.n	401220 <setvbuf+0x88>
  401288:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40128a:	2b00      	cmp	r3, #0
  40128c:	d033      	beq.n	4012f6 <setvbuf+0x15e>
  40128e:	9b00      	ldr	r3, [sp, #0]
  401290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401294:	6027      	str	r7, [r4, #0]
  401296:	429e      	cmp	r6, r3
  401298:	bf1c      	itt	ne
  40129a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40129e:	81a2      	strhne	r2, [r4, #12]
  4012a0:	f1b8 0f01 	cmp.w	r8, #1
  4012a4:	bf04      	itt	eq
  4012a6:	f042 0201 	orreq.w	r2, r2, #1
  4012aa:	81a2      	strheq	r2, [r4, #12]
  4012ac:	b292      	uxth	r2, r2
  4012ae:	f012 0308 	ands.w	r3, r2, #8
  4012b2:	6127      	str	r7, [r4, #16]
  4012b4:	6166      	str	r6, [r4, #20]
  4012b6:	d00e      	beq.n	4012d6 <setvbuf+0x13e>
  4012b8:	07d1      	lsls	r1, r2, #31
  4012ba:	d51a      	bpl.n	4012f2 <setvbuf+0x15a>
  4012bc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4012be:	4276      	negs	r6, r6
  4012c0:	2300      	movs	r3, #0
  4012c2:	f015 0501 	ands.w	r5, r5, #1
  4012c6:	61a6      	str	r6, [r4, #24]
  4012c8:	60a3      	str	r3, [r4, #8]
  4012ca:	d009      	beq.n	4012e0 <setvbuf+0x148>
  4012cc:	2500      	movs	r5, #0
  4012ce:	4628      	mov	r0, r5
  4012d0:	b003      	add	sp, #12
  4012d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4012d6:	60a3      	str	r3, [r4, #8]
  4012d8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4012da:	f015 0501 	ands.w	r5, r5, #1
  4012de:	d1f5      	bne.n	4012cc <setvbuf+0x134>
  4012e0:	0593      	lsls	r3, r2, #22
  4012e2:	d4c0      	bmi.n	401266 <setvbuf+0xce>
  4012e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4012e6:	f001 fc17 	bl	402b18 <__retarget_lock_release_recursive>
  4012ea:	4628      	mov	r0, r5
  4012ec:	b003      	add	sp, #12
  4012ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4012f2:	60a6      	str	r6, [r4, #8]
  4012f4:	e7f0      	b.n	4012d8 <setvbuf+0x140>
  4012f6:	4628      	mov	r0, r5
  4012f8:	f001 f84c 	bl	402394 <__sinit>
  4012fc:	e7c7      	b.n	40128e <setvbuf+0xf6>
  4012fe:	f04f 35ff 	mov.w	r5, #4294967295
  401302:	e7b0      	b.n	401266 <setvbuf+0xce>
  401304:	f8dd 9000 	ldr.w	r9, [sp]
  401308:	45b1      	cmp	r9, r6
  40130a:	d004      	beq.n	401316 <setvbuf+0x17e>
  40130c:	4648      	mov	r0, r9
  40130e:	f001 fc7d 	bl	402c0c <malloc>
  401312:	4607      	mov	r7, r0
  401314:	b920      	cbnz	r0, 401320 <setvbuf+0x188>
  401316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40131a:	f04f 35ff 	mov.w	r5, #4294967295
  40131e:	e792      	b.n	401246 <setvbuf+0xae>
  401320:	464e      	mov	r6, r9
  401322:	e783      	b.n	40122c <setvbuf+0x94>
  401324:	20000008 	.word	0x20000008

00401328 <__sprint_r.part.0>:
  401328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40132c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40132e:	049c      	lsls	r4, r3, #18
  401330:	4693      	mov	fp, r2
  401332:	d52f      	bpl.n	401394 <__sprint_r.part.0+0x6c>
  401334:	6893      	ldr	r3, [r2, #8]
  401336:	6812      	ldr	r2, [r2, #0]
  401338:	b353      	cbz	r3, 401390 <__sprint_r.part.0+0x68>
  40133a:	460e      	mov	r6, r1
  40133c:	4607      	mov	r7, r0
  40133e:	f102 0908 	add.w	r9, r2, #8
  401342:	e919 0420 	ldmdb	r9, {r5, sl}
  401346:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40134a:	d017      	beq.n	40137c <__sprint_r.part.0+0x54>
  40134c:	3d04      	subs	r5, #4
  40134e:	2400      	movs	r4, #0
  401350:	e001      	b.n	401356 <__sprint_r.part.0+0x2e>
  401352:	45a0      	cmp	r8, r4
  401354:	d010      	beq.n	401378 <__sprint_r.part.0+0x50>
  401356:	4632      	mov	r2, r6
  401358:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40135c:	4638      	mov	r0, r7
  40135e:	f001 f8bb 	bl	4024d8 <_fputwc_r>
  401362:	1c43      	adds	r3, r0, #1
  401364:	f104 0401 	add.w	r4, r4, #1
  401368:	d1f3      	bne.n	401352 <__sprint_r.part.0+0x2a>
  40136a:	2300      	movs	r3, #0
  40136c:	f8cb 3008 	str.w	r3, [fp, #8]
  401370:	f8cb 3004 	str.w	r3, [fp, #4]
  401374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401378:	f8db 3008 	ldr.w	r3, [fp, #8]
  40137c:	f02a 0a03 	bic.w	sl, sl, #3
  401380:	eba3 030a 	sub.w	r3, r3, sl
  401384:	f8cb 3008 	str.w	r3, [fp, #8]
  401388:	f109 0908 	add.w	r9, r9, #8
  40138c:	2b00      	cmp	r3, #0
  40138e:	d1d8      	bne.n	401342 <__sprint_r.part.0+0x1a>
  401390:	2000      	movs	r0, #0
  401392:	e7ea      	b.n	40136a <__sprint_r.part.0+0x42>
  401394:	f001 fa0a 	bl	4027ac <__sfvwrite_r>
  401398:	2300      	movs	r3, #0
  40139a:	f8cb 3008 	str.w	r3, [fp, #8]
  40139e:	f8cb 3004 	str.w	r3, [fp, #4]
  4013a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4013a6:	bf00      	nop

004013a8 <_vfiprintf_r>:
  4013a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013ac:	b0ad      	sub	sp, #180	; 0xb4
  4013ae:	461d      	mov	r5, r3
  4013b0:	468b      	mov	fp, r1
  4013b2:	4690      	mov	r8, r2
  4013b4:	9307      	str	r3, [sp, #28]
  4013b6:	9006      	str	r0, [sp, #24]
  4013b8:	b118      	cbz	r0, 4013c2 <_vfiprintf_r+0x1a>
  4013ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4013bc:	2b00      	cmp	r3, #0
  4013be:	f000 80f3 	beq.w	4015a8 <_vfiprintf_r+0x200>
  4013c2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4013c6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4013ca:	07df      	lsls	r7, r3, #31
  4013cc:	b281      	uxth	r1, r0
  4013ce:	d402      	bmi.n	4013d6 <_vfiprintf_r+0x2e>
  4013d0:	058e      	lsls	r6, r1, #22
  4013d2:	f140 80fc 	bpl.w	4015ce <_vfiprintf_r+0x226>
  4013d6:	048c      	lsls	r4, r1, #18
  4013d8:	d40a      	bmi.n	4013f0 <_vfiprintf_r+0x48>
  4013da:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4013de:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4013e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4013e6:	f8ab 100c 	strh.w	r1, [fp, #12]
  4013ea:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4013ee:	b289      	uxth	r1, r1
  4013f0:	0708      	lsls	r0, r1, #28
  4013f2:	f140 80b3 	bpl.w	40155c <_vfiprintf_r+0x1b4>
  4013f6:	f8db 3010 	ldr.w	r3, [fp, #16]
  4013fa:	2b00      	cmp	r3, #0
  4013fc:	f000 80ae 	beq.w	40155c <_vfiprintf_r+0x1b4>
  401400:	f001 031a 	and.w	r3, r1, #26
  401404:	2b0a      	cmp	r3, #10
  401406:	f000 80b5 	beq.w	401574 <_vfiprintf_r+0x1cc>
  40140a:	2300      	movs	r3, #0
  40140c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401410:	930b      	str	r3, [sp, #44]	; 0x2c
  401412:	9311      	str	r3, [sp, #68]	; 0x44
  401414:	9310      	str	r3, [sp, #64]	; 0x40
  401416:	9303      	str	r3, [sp, #12]
  401418:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40141c:	46ca      	mov	sl, r9
  40141e:	f8cd b010 	str.w	fp, [sp, #16]
  401422:	f898 3000 	ldrb.w	r3, [r8]
  401426:	4644      	mov	r4, r8
  401428:	b1fb      	cbz	r3, 40146a <_vfiprintf_r+0xc2>
  40142a:	2b25      	cmp	r3, #37	; 0x25
  40142c:	d102      	bne.n	401434 <_vfiprintf_r+0x8c>
  40142e:	e01c      	b.n	40146a <_vfiprintf_r+0xc2>
  401430:	2b25      	cmp	r3, #37	; 0x25
  401432:	d003      	beq.n	40143c <_vfiprintf_r+0x94>
  401434:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401438:	2b00      	cmp	r3, #0
  40143a:	d1f9      	bne.n	401430 <_vfiprintf_r+0x88>
  40143c:	eba4 0508 	sub.w	r5, r4, r8
  401440:	b19d      	cbz	r5, 40146a <_vfiprintf_r+0xc2>
  401442:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401444:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401446:	f8ca 8000 	str.w	r8, [sl]
  40144a:	3301      	adds	r3, #1
  40144c:	442a      	add	r2, r5
  40144e:	2b07      	cmp	r3, #7
  401450:	f8ca 5004 	str.w	r5, [sl, #4]
  401454:	9211      	str	r2, [sp, #68]	; 0x44
  401456:	9310      	str	r3, [sp, #64]	; 0x40
  401458:	dd7a      	ble.n	401550 <_vfiprintf_r+0x1a8>
  40145a:	2a00      	cmp	r2, #0
  40145c:	f040 84b0 	bne.w	401dc0 <_vfiprintf_r+0xa18>
  401460:	9b03      	ldr	r3, [sp, #12]
  401462:	9210      	str	r2, [sp, #64]	; 0x40
  401464:	442b      	add	r3, r5
  401466:	46ca      	mov	sl, r9
  401468:	9303      	str	r3, [sp, #12]
  40146a:	7823      	ldrb	r3, [r4, #0]
  40146c:	2b00      	cmp	r3, #0
  40146e:	f000 83e0 	beq.w	401c32 <_vfiprintf_r+0x88a>
  401472:	2000      	movs	r0, #0
  401474:	f04f 0300 	mov.w	r3, #0
  401478:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40147c:	f104 0801 	add.w	r8, r4, #1
  401480:	7862      	ldrb	r2, [r4, #1]
  401482:	4605      	mov	r5, r0
  401484:	4606      	mov	r6, r0
  401486:	4603      	mov	r3, r0
  401488:	f04f 34ff 	mov.w	r4, #4294967295
  40148c:	f108 0801 	add.w	r8, r8, #1
  401490:	f1a2 0120 	sub.w	r1, r2, #32
  401494:	2958      	cmp	r1, #88	; 0x58
  401496:	f200 82de 	bhi.w	401a56 <_vfiprintf_r+0x6ae>
  40149a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40149e:	0221      	.short	0x0221
  4014a0:	02dc02dc 	.word	0x02dc02dc
  4014a4:	02dc0229 	.word	0x02dc0229
  4014a8:	02dc02dc 	.word	0x02dc02dc
  4014ac:	02dc02dc 	.word	0x02dc02dc
  4014b0:	028902dc 	.word	0x028902dc
  4014b4:	02dc0295 	.word	0x02dc0295
  4014b8:	02bd00a2 	.word	0x02bd00a2
  4014bc:	019f02dc 	.word	0x019f02dc
  4014c0:	01a401a4 	.word	0x01a401a4
  4014c4:	01a401a4 	.word	0x01a401a4
  4014c8:	01a401a4 	.word	0x01a401a4
  4014cc:	01a401a4 	.word	0x01a401a4
  4014d0:	02dc01a4 	.word	0x02dc01a4
  4014d4:	02dc02dc 	.word	0x02dc02dc
  4014d8:	02dc02dc 	.word	0x02dc02dc
  4014dc:	02dc02dc 	.word	0x02dc02dc
  4014e0:	02dc02dc 	.word	0x02dc02dc
  4014e4:	01b202dc 	.word	0x01b202dc
  4014e8:	02dc02dc 	.word	0x02dc02dc
  4014ec:	02dc02dc 	.word	0x02dc02dc
  4014f0:	02dc02dc 	.word	0x02dc02dc
  4014f4:	02dc02dc 	.word	0x02dc02dc
  4014f8:	02dc02dc 	.word	0x02dc02dc
  4014fc:	02dc0197 	.word	0x02dc0197
  401500:	02dc02dc 	.word	0x02dc02dc
  401504:	02dc02dc 	.word	0x02dc02dc
  401508:	02dc019b 	.word	0x02dc019b
  40150c:	025302dc 	.word	0x025302dc
  401510:	02dc02dc 	.word	0x02dc02dc
  401514:	02dc02dc 	.word	0x02dc02dc
  401518:	02dc02dc 	.word	0x02dc02dc
  40151c:	02dc02dc 	.word	0x02dc02dc
  401520:	02dc02dc 	.word	0x02dc02dc
  401524:	021b025a 	.word	0x021b025a
  401528:	02dc02dc 	.word	0x02dc02dc
  40152c:	026e02dc 	.word	0x026e02dc
  401530:	02dc021b 	.word	0x02dc021b
  401534:	027302dc 	.word	0x027302dc
  401538:	01f502dc 	.word	0x01f502dc
  40153c:	02090182 	.word	0x02090182
  401540:	02dc02d7 	.word	0x02dc02d7
  401544:	02dc029a 	.word	0x02dc029a
  401548:	02dc00a7 	.word	0x02dc00a7
  40154c:	022e02dc 	.word	0x022e02dc
  401550:	f10a 0a08 	add.w	sl, sl, #8
  401554:	9b03      	ldr	r3, [sp, #12]
  401556:	442b      	add	r3, r5
  401558:	9303      	str	r3, [sp, #12]
  40155a:	e786      	b.n	40146a <_vfiprintf_r+0xc2>
  40155c:	4659      	mov	r1, fp
  40155e:	9806      	ldr	r0, [sp, #24]
  401560:	f000 fdac 	bl	4020bc <__swsetup_r>
  401564:	bb18      	cbnz	r0, 4015ae <_vfiprintf_r+0x206>
  401566:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40156a:	f001 031a 	and.w	r3, r1, #26
  40156e:	2b0a      	cmp	r3, #10
  401570:	f47f af4b 	bne.w	40140a <_vfiprintf_r+0x62>
  401574:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401578:	2b00      	cmp	r3, #0
  40157a:	f6ff af46 	blt.w	40140a <_vfiprintf_r+0x62>
  40157e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401582:	07db      	lsls	r3, r3, #31
  401584:	d405      	bmi.n	401592 <_vfiprintf_r+0x1ea>
  401586:	058f      	lsls	r7, r1, #22
  401588:	d403      	bmi.n	401592 <_vfiprintf_r+0x1ea>
  40158a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40158e:	f001 fac3 	bl	402b18 <__retarget_lock_release_recursive>
  401592:	462b      	mov	r3, r5
  401594:	4642      	mov	r2, r8
  401596:	4659      	mov	r1, fp
  401598:	9806      	ldr	r0, [sp, #24]
  40159a:	f000 fd4d 	bl	402038 <__sbprintf>
  40159e:	9003      	str	r0, [sp, #12]
  4015a0:	9803      	ldr	r0, [sp, #12]
  4015a2:	b02d      	add	sp, #180	; 0xb4
  4015a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015a8:	f000 fef4 	bl	402394 <__sinit>
  4015ac:	e709      	b.n	4013c2 <_vfiprintf_r+0x1a>
  4015ae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4015b2:	07d9      	lsls	r1, r3, #31
  4015b4:	d404      	bmi.n	4015c0 <_vfiprintf_r+0x218>
  4015b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4015ba:	059a      	lsls	r2, r3, #22
  4015bc:	f140 84aa 	bpl.w	401f14 <_vfiprintf_r+0xb6c>
  4015c0:	f04f 33ff 	mov.w	r3, #4294967295
  4015c4:	9303      	str	r3, [sp, #12]
  4015c6:	9803      	ldr	r0, [sp, #12]
  4015c8:	b02d      	add	sp, #180	; 0xb4
  4015ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015ce:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4015d2:	f001 fa9f 	bl	402b14 <__retarget_lock_acquire_recursive>
  4015d6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4015da:	b281      	uxth	r1, r0
  4015dc:	e6fb      	b.n	4013d6 <_vfiprintf_r+0x2e>
  4015de:	4276      	negs	r6, r6
  4015e0:	9207      	str	r2, [sp, #28]
  4015e2:	f043 0304 	orr.w	r3, r3, #4
  4015e6:	f898 2000 	ldrb.w	r2, [r8]
  4015ea:	e74f      	b.n	40148c <_vfiprintf_r+0xe4>
  4015ec:	9608      	str	r6, [sp, #32]
  4015ee:	069e      	lsls	r6, r3, #26
  4015f0:	f100 8450 	bmi.w	401e94 <_vfiprintf_r+0xaec>
  4015f4:	9907      	ldr	r1, [sp, #28]
  4015f6:	06dd      	lsls	r5, r3, #27
  4015f8:	460a      	mov	r2, r1
  4015fa:	f100 83ef 	bmi.w	401ddc <_vfiprintf_r+0xa34>
  4015fe:	0658      	lsls	r0, r3, #25
  401600:	f140 83ec 	bpl.w	401ddc <_vfiprintf_r+0xa34>
  401604:	880e      	ldrh	r6, [r1, #0]
  401606:	3104      	adds	r1, #4
  401608:	2700      	movs	r7, #0
  40160a:	2201      	movs	r2, #1
  40160c:	9107      	str	r1, [sp, #28]
  40160e:	f04f 0100 	mov.w	r1, #0
  401612:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401616:	2500      	movs	r5, #0
  401618:	1c61      	adds	r1, r4, #1
  40161a:	f000 8116 	beq.w	40184a <_vfiprintf_r+0x4a2>
  40161e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401622:	9102      	str	r1, [sp, #8]
  401624:	ea56 0107 	orrs.w	r1, r6, r7
  401628:	f040 8114 	bne.w	401854 <_vfiprintf_r+0x4ac>
  40162c:	2c00      	cmp	r4, #0
  40162e:	f040 835c 	bne.w	401cea <_vfiprintf_r+0x942>
  401632:	2a00      	cmp	r2, #0
  401634:	f040 83b7 	bne.w	401da6 <_vfiprintf_r+0x9fe>
  401638:	f013 0301 	ands.w	r3, r3, #1
  40163c:	9305      	str	r3, [sp, #20]
  40163e:	f000 8457 	beq.w	401ef0 <_vfiprintf_r+0xb48>
  401642:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401646:	2330      	movs	r3, #48	; 0x30
  401648:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40164c:	9b05      	ldr	r3, [sp, #20]
  40164e:	42a3      	cmp	r3, r4
  401650:	bfb8      	it	lt
  401652:	4623      	movlt	r3, r4
  401654:	9301      	str	r3, [sp, #4]
  401656:	b10d      	cbz	r5, 40165c <_vfiprintf_r+0x2b4>
  401658:	3301      	adds	r3, #1
  40165a:	9301      	str	r3, [sp, #4]
  40165c:	9b02      	ldr	r3, [sp, #8]
  40165e:	f013 0302 	ands.w	r3, r3, #2
  401662:	9309      	str	r3, [sp, #36]	; 0x24
  401664:	d002      	beq.n	40166c <_vfiprintf_r+0x2c4>
  401666:	9b01      	ldr	r3, [sp, #4]
  401668:	3302      	adds	r3, #2
  40166a:	9301      	str	r3, [sp, #4]
  40166c:	9b02      	ldr	r3, [sp, #8]
  40166e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401672:	930a      	str	r3, [sp, #40]	; 0x28
  401674:	f040 8217 	bne.w	401aa6 <_vfiprintf_r+0x6fe>
  401678:	9b08      	ldr	r3, [sp, #32]
  40167a:	9a01      	ldr	r2, [sp, #4]
  40167c:	1a9d      	subs	r5, r3, r2
  40167e:	2d00      	cmp	r5, #0
  401680:	f340 8211 	ble.w	401aa6 <_vfiprintf_r+0x6fe>
  401684:	2d10      	cmp	r5, #16
  401686:	f340 8490 	ble.w	401faa <_vfiprintf_r+0xc02>
  40168a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40168c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40168e:	4ec4      	ldr	r6, [pc, #784]	; (4019a0 <_vfiprintf_r+0x5f8>)
  401690:	46d6      	mov	lr, sl
  401692:	2710      	movs	r7, #16
  401694:	46a2      	mov	sl, r4
  401696:	4619      	mov	r1, r3
  401698:	9c06      	ldr	r4, [sp, #24]
  40169a:	e007      	b.n	4016ac <_vfiprintf_r+0x304>
  40169c:	f101 0c02 	add.w	ip, r1, #2
  4016a0:	f10e 0e08 	add.w	lr, lr, #8
  4016a4:	4601      	mov	r1, r0
  4016a6:	3d10      	subs	r5, #16
  4016a8:	2d10      	cmp	r5, #16
  4016aa:	dd11      	ble.n	4016d0 <_vfiprintf_r+0x328>
  4016ac:	1c48      	adds	r0, r1, #1
  4016ae:	3210      	adds	r2, #16
  4016b0:	2807      	cmp	r0, #7
  4016b2:	9211      	str	r2, [sp, #68]	; 0x44
  4016b4:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4016b8:	9010      	str	r0, [sp, #64]	; 0x40
  4016ba:	ddef      	ble.n	40169c <_vfiprintf_r+0x2f4>
  4016bc:	2a00      	cmp	r2, #0
  4016be:	f040 81e4 	bne.w	401a8a <_vfiprintf_r+0x6e2>
  4016c2:	3d10      	subs	r5, #16
  4016c4:	2d10      	cmp	r5, #16
  4016c6:	4611      	mov	r1, r2
  4016c8:	f04f 0c01 	mov.w	ip, #1
  4016cc:	46ce      	mov	lr, r9
  4016ce:	dced      	bgt.n	4016ac <_vfiprintf_r+0x304>
  4016d0:	4654      	mov	r4, sl
  4016d2:	4661      	mov	r1, ip
  4016d4:	46f2      	mov	sl, lr
  4016d6:	442a      	add	r2, r5
  4016d8:	2907      	cmp	r1, #7
  4016da:	9211      	str	r2, [sp, #68]	; 0x44
  4016dc:	f8ca 6000 	str.w	r6, [sl]
  4016e0:	f8ca 5004 	str.w	r5, [sl, #4]
  4016e4:	9110      	str	r1, [sp, #64]	; 0x40
  4016e6:	f300 82ec 	bgt.w	401cc2 <_vfiprintf_r+0x91a>
  4016ea:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4016ee:	f10a 0a08 	add.w	sl, sl, #8
  4016f2:	1c48      	adds	r0, r1, #1
  4016f4:	2d00      	cmp	r5, #0
  4016f6:	f040 81de 	bne.w	401ab6 <_vfiprintf_r+0x70e>
  4016fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4016fc:	2b00      	cmp	r3, #0
  4016fe:	f000 81f8 	beq.w	401af2 <_vfiprintf_r+0x74a>
  401702:	3202      	adds	r2, #2
  401704:	a90e      	add	r1, sp, #56	; 0x38
  401706:	2302      	movs	r3, #2
  401708:	2807      	cmp	r0, #7
  40170a:	9211      	str	r2, [sp, #68]	; 0x44
  40170c:	9010      	str	r0, [sp, #64]	; 0x40
  40170e:	e88a 000a 	stmia.w	sl, {r1, r3}
  401712:	f340 81ea 	ble.w	401aea <_vfiprintf_r+0x742>
  401716:	2a00      	cmp	r2, #0
  401718:	f040 838c 	bne.w	401e34 <_vfiprintf_r+0xa8c>
  40171c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40171e:	2b80      	cmp	r3, #128	; 0x80
  401720:	f04f 0001 	mov.w	r0, #1
  401724:	4611      	mov	r1, r2
  401726:	46ca      	mov	sl, r9
  401728:	f040 81e7 	bne.w	401afa <_vfiprintf_r+0x752>
  40172c:	9b08      	ldr	r3, [sp, #32]
  40172e:	9d01      	ldr	r5, [sp, #4]
  401730:	1b5e      	subs	r6, r3, r5
  401732:	2e00      	cmp	r6, #0
  401734:	f340 81e1 	ble.w	401afa <_vfiprintf_r+0x752>
  401738:	2e10      	cmp	r6, #16
  40173a:	4d9a      	ldr	r5, [pc, #616]	; (4019a4 <_vfiprintf_r+0x5fc>)
  40173c:	f340 8450 	ble.w	401fe0 <_vfiprintf_r+0xc38>
  401740:	46d4      	mov	ip, sl
  401742:	2710      	movs	r7, #16
  401744:	46a2      	mov	sl, r4
  401746:	9c06      	ldr	r4, [sp, #24]
  401748:	e007      	b.n	40175a <_vfiprintf_r+0x3b2>
  40174a:	f101 0e02 	add.w	lr, r1, #2
  40174e:	f10c 0c08 	add.w	ip, ip, #8
  401752:	4601      	mov	r1, r0
  401754:	3e10      	subs	r6, #16
  401756:	2e10      	cmp	r6, #16
  401758:	dd11      	ble.n	40177e <_vfiprintf_r+0x3d6>
  40175a:	1c48      	adds	r0, r1, #1
  40175c:	3210      	adds	r2, #16
  40175e:	2807      	cmp	r0, #7
  401760:	9211      	str	r2, [sp, #68]	; 0x44
  401762:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401766:	9010      	str	r0, [sp, #64]	; 0x40
  401768:	ddef      	ble.n	40174a <_vfiprintf_r+0x3a2>
  40176a:	2a00      	cmp	r2, #0
  40176c:	f040 829d 	bne.w	401caa <_vfiprintf_r+0x902>
  401770:	3e10      	subs	r6, #16
  401772:	2e10      	cmp	r6, #16
  401774:	f04f 0e01 	mov.w	lr, #1
  401778:	4611      	mov	r1, r2
  40177a:	46cc      	mov	ip, r9
  40177c:	dced      	bgt.n	40175a <_vfiprintf_r+0x3b2>
  40177e:	4654      	mov	r4, sl
  401780:	46e2      	mov	sl, ip
  401782:	4432      	add	r2, r6
  401784:	f1be 0f07 	cmp.w	lr, #7
  401788:	9211      	str	r2, [sp, #68]	; 0x44
  40178a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40178e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401792:	f300 8369 	bgt.w	401e68 <_vfiprintf_r+0xac0>
  401796:	f10a 0a08 	add.w	sl, sl, #8
  40179a:	f10e 0001 	add.w	r0, lr, #1
  40179e:	4671      	mov	r1, lr
  4017a0:	e1ab      	b.n	401afa <_vfiprintf_r+0x752>
  4017a2:	9608      	str	r6, [sp, #32]
  4017a4:	f013 0220 	ands.w	r2, r3, #32
  4017a8:	f040 838c 	bne.w	401ec4 <_vfiprintf_r+0xb1c>
  4017ac:	f013 0110 	ands.w	r1, r3, #16
  4017b0:	f040 831a 	bne.w	401de8 <_vfiprintf_r+0xa40>
  4017b4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4017b8:	f000 8316 	beq.w	401de8 <_vfiprintf_r+0xa40>
  4017bc:	9807      	ldr	r0, [sp, #28]
  4017be:	460a      	mov	r2, r1
  4017c0:	4601      	mov	r1, r0
  4017c2:	3104      	adds	r1, #4
  4017c4:	8806      	ldrh	r6, [r0, #0]
  4017c6:	9107      	str	r1, [sp, #28]
  4017c8:	2700      	movs	r7, #0
  4017ca:	e720      	b.n	40160e <_vfiprintf_r+0x266>
  4017cc:	9608      	str	r6, [sp, #32]
  4017ce:	f043 0310 	orr.w	r3, r3, #16
  4017d2:	e7e7      	b.n	4017a4 <_vfiprintf_r+0x3fc>
  4017d4:	9608      	str	r6, [sp, #32]
  4017d6:	f043 0310 	orr.w	r3, r3, #16
  4017da:	e708      	b.n	4015ee <_vfiprintf_r+0x246>
  4017dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4017e0:	f898 2000 	ldrb.w	r2, [r8]
  4017e4:	e652      	b.n	40148c <_vfiprintf_r+0xe4>
  4017e6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4017ea:	2600      	movs	r6, #0
  4017ec:	f818 2b01 	ldrb.w	r2, [r8], #1
  4017f0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4017f4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4017f8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4017fc:	2909      	cmp	r1, #9
  4017fe:	d9f5      	bls.n	4017ec <_vfiprintf_r+0x444>
  401800:	e646      	b.n	401490 <_vfiprintf_r+0xe8>
  401802:	9608      	str	r6, [sp, #32]
  401804:	2800      	cmp	r0, #0
  401806:	f040 8408 	bne.w	40201a <_vfiprintf_r+0xc72>
  40180a:	f043 0310 	orr.w	r3, r3, #16
  40180e:	069e      	lsls	r6, r3, #26
  401810:	f100 834c 	bmi.w	401eac <_vfiprintf_r+0xb04>
  401814:	06dd      	lsls	r5, r3, #27
  401816:	f100 82f3 	bmi.w	401e00 <_vfiprintf_r+0xa58>
  40181a:	0658      	lsls	r0, r3, #25
  40181c:	f140 82f0 	bpl.w	401e00 <_vfiprintf_r+0xa58>
  401820:	9d07      	ldr	r5, [sp, #28]
  401822:	f9b5 6000 	ldrsh.w	r6, [r5]
  401826:	462a      	mov	r2, r5
  401828:	17f7      	asrs	r7, r6, #31
  40182a:	3204      	adds	r2, #4
  40182c:	4630      	mov	r0, r6
  40182e:	4639      	mov	r1, r7
  401830:	9207      	str	r2, [sp, #28]
  401832:	2800      	cmp	r0, #0
  401834:	f171 0200 	sbcs.w	r2, r1, #0
  401838:	f2c0 835d 	blt.w	401ef6 <_vfiprintf_r+0xb4e>
  40183c:	1c61      	adds	r1, r4, #1
  40183e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401842:	f04f 0201 	mov.w	r2, #1
  401846:	f47f aeea 	bne.w	40161e <_vfiprintf_r+0x276>
  40184a:	ea56 0107 	orrs.w	r1, r6, r7
  40184e:	f000 824d 	beq.w	401cec <_vfiprintf_r+0x944>
  401852:	9302      	str	r3, [sp, #8]
  401854:	2a01      	cmp	r2, #1
  401856:	f000 828c 	beq.w	401d72 <_vfiprintf_r+0x9ca>
  40185a:	2a02      	cmp	r2, #2
  40185c:	f040 825c 	bne.w	401d18 <_vfiprintf_r+0x970>
  401860:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401862:	46cb      	mov	fp, r9
  401864:	0933      	lsrs	r3, r6, #4
  401866:	f006 010f 	and.w	r1, r6, #15
  40186a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40186e:	093a      	lsrs	r2, r7, #4
  401870:	461e      	mov	r6, r3
  401872:	4617      	mov	r7, r2
  401874:	5c43      	ldrb	r3, [r0, r1]
  401876:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40187a:	ea56 0307 	orrs.w	r3, r6, r7
  40187e:	d1f1      	bne.n	401864 <_vfiprintf_r+0x4bc>
  401880:	eba9 030b 	sub.w	r3, r9, fp
  401884:	9305      	str	r3, [sp, #20]
  401886:	e6e1      	b.n	40164c <_vfiprintf_r+0x2a4>
  401888:	2800      	cmp	r0, #0
  40188a:	f040 83c0 	bne.w	40200e <_vfiprintf_r+0xc66>
  40188e:	0699      	lsls	r1, r3, #26
  401890:	f100 8367 	bmi.w	401f62 <_vfiprintf_r+0xbba>
  401894:	06da      	lsls	r2, r3, #27
  401896:	f100 80f1 	bmi.w	401a7c <_vfiprintf_r+0x6d4>
  40189a:	065b      	lsls	r3, r3, #25
  40189c:	f140 80ee 	bpl.w	401a7c <_vfiprintf_r+0x6d4>
  4018a0:	9a07      	ldr	r2, [sp, #28]
  4018a2:	6813      	ldr	r3, [r2, #0]
  4018a4:	3204      	adds	r2, #4
  4018a6:	9207      	str	r2, [sp, #28]
  4018a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4018ac:	801a      	strh	r2, [r3, #0]
  4018ae:	e5b8      	b.n	401422 <_vfiprintf_r+0x7a>
  4018b0:	9807      	ldr	r0, [sp, #28]
  4018b2:	4a3d      	ldr	r2, [pc, #244]	; (4019a8 <_vfiprintf_r+0x600>)
  4018b4:	9608      	str	r6, [sp, #32]
  4018b6:	920b      	str	r2, [sp, #44]	; 0x2c
  4018b8:	6806      	ldr	r6, [r0, #0]
  4018ba:	2278      	movs	r2, #120	; 0x78
  4018bc:	2130      	movs	r1, #48	; 0x30
  4018be:	3004      	adds	r0, #4
  4018c0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4018c4:	f043 0302 	orr.w	r3, r3, #2
  4018c8:	9007      	str	r0, [sp, #28]
  4018ca:	2700      	movs	r7, #0
  4018cc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4018d0:	2202      	movs	r2, #2
  4018d2:	e69c      	b.n	40160e <_vfiprintf_r+0x266>
  4018d4:	9608      	str	r6, [sp, #32]
  4018d6:	2800      	cmp	r0, #0
  4018d8:	d099      	beq.n	40180e <_vfiprintf_r+0x466>
  4018da:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4018de:	e796      	b.n	40180e <_vfiprintf_r+0x466>
  4018e0:	f898 2000 	ldrb.w	r2, [r8]
  4018e4:	2d00      	cmp	r5, #0
  4018e6:	f47f add1 	bne.w	40148c <_vfiprintf_r+0xe4>
  4018ea:	2001      	movs	r0, #1
  4018ec:	2520      	movs	r5, #32
  4018ee:	e5cd      	b.n	40148c <_vfiprintf_r+0xe4>
  4018f0:	f043 0301 	orr.w	r3, r3, #1
  4018f4:	f898 2000 	ldrb.w	r2, [r8]
  4018f8:	e5c8      	b.n	40148c <_vfiprintf_r+0xe4>
  4018fa:	9608      	str	r6, [sp, #32]
  4018fc:	2800      	cmp	r0, #0
  4018fe:	f040 8393 	bne.w	402028 <_vfiprintf_r+0xc80>
  401902:	4929      	ldr	r1, [pc, #164]	; (4019a8 <_vfiprintf_r+0x600>)
  401904:	910b      	str	r1, [sp, #44]	; 0x2c
  401906:	069f      	lsls	r7, r3, #26
  401908:	f100 82e8 	bmi.w	401edc <_vfiprintf_r+0xb34>
  40190c:	9807      	ldr	r0, [sp, #28]
  40190e:	06de      	lsls	r6, r3, #27
  401910:	4601      	mov	r1, r0
  401912:	f100 8270 	bmi.w	401df6 <_vfiprintf_r+0xa4e>
  401916:	065d      	lsls	r5, r3, #25
  401918:	f140 826d 	bpl.w	401df6 <_vfiprintf_r+0xa4e>
  40191c:	3104      	adds	r1, #4
  40191e:	8806      	ldrh	r6, [r0, #0]
  401920:	9107      	str	r1, [sp, #28]
  401922:	2700      	movs	r7, #0
  401924:	07d8      	lsls	r0, r3, #31
  401926:	f140 8222 	bpl.w	401d6e <_vfiprintf_r+0x9c6>
  40192a:	ea56 0107 	orrs.w	r1, r6, r7
  40192e:	f000 821e 	beq.w	401d6e <_vfiprintf_r+0x9c6>
  401932:	2130      	movs	r1, #48	; 0x30
  401934:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401938:	f043 0302 	orr.w	r3, r3, #2
  40193c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401940:	2202      	movs	r2, #2
  401942:	e664      	b.n	40160e <_vfiprintf_r+0x266>
  401944:	9608      	str	r6, [sp, #32]
  401946:	2800      	cmp	r0, #0
  401948:	f040 836b 	bne.w	402022 <_vfiprintf_r+0xc7a>
  40194c:	4917      	ldr	r1, [pc, #92]	; (4019ac <_vfiprintf_r+0x604>)
  40194e:	910b      	str	r1, [sp, #44]	; 0x2c
  401950:	e7d9      	b.n	401906 <_vfiprintf_r+0x55e>
  401952:	9907      	ldr	r1, [sp, #28]
  401954:	9608      	str	r6, [sp, #32]
  401956:	680a      	ldr	r2, [r1, #0]
  401958:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40195c:	f04f 0000 	mov.w	r0, #0
  401960:	460a      	mov	r2, r1
  401962:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401966:	3204      	adds	r2, #4
  401968:	2001      	movs	r0, #1
  40196a:	9001      	str	r0, [sp, #4]
  40196c:	9207      	str	r2, [sp, #28]
  40196e:	9005      	str	r0, [sp, #20]
  401970:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401974:	9302      	str	r3, [sp, #8]
  401976:	2400      	movs	r4, #0
  401978:	e670      	b.n	40165c <_vfiprintf_r+0x2b4>
  40197a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40197e:	f898 2000 	ldrb.w	r2, [r8]
  401982:	e583      	b.n	40148c <_vfiprintf_r+0xe4>
  401984:	f898 2000 	ldrb.w	r2, [r8]
  401988:	2a6c      	cmp	r2, #108	; 0x6c
  40198a:	bf03      	ittte	eq
  40198c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401990:	f043 0320 	orreq.w	r3, r3, #32
  401994:	f108 0801 	addeq.w	r8, r8, #1
  401998:	f043 0310 	orrne.w	r3, r3, #16
  40199c:	e576      	b.n	40148c <_vfiprintf_r+0xe4>
  40199e:	bf00      	nop
  4019a0:	00404040 	.word	0x00404040
  4019a4:	00404050 	.word	0x00404050
  4019a8:	00404024 	.word	0x00404024
  4019ac:	00404010 	.word	0x00404010
  4019b0:	9907      	ldr	r1, [sp, #28]
  4019b2:	680e      	ldr	r6, [r1, #0]
  4019b4:	460a      	mov	r2, r1
  4019b6:	2e00      	cmp	r6, #0
  4019b8:	f102 0204 	add.w	r2, r2, #4
  4019bc:	f6ff ae0f 	blt.w	4015de <_vfiprintf_r+0x236>
  4019c0:	9207      	str	r2, [sp, #28]
  4019c2:	f898 2000 	ldrb.w	r2, [r8]
  4019c6:	e561      	b.n	40148c <_vfiprintf_r+0xe4>
  4019c8:	f898 2000 	ldrb.w	r2, [r8]
  4019cc:	2001      	movs	r0, #1
  4019ce:	252b      	movs	r5, #43	; 0x2b
  4019d0:	e55c      	b.n	40148c <_vfiprintf_r+0xe4>
  4019d2:	9907      	ldr	r1, [sp, #28]
  4019d4:	9608      	str	r6, [sp, #32]
  4019d6:	f8d1 b000 	ldr.w	fp, [r1]
  4019da:	f04f 0200 	mov.w	r2, #0
  4019de:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4019e2:	1d0e      	adds	r6, r1, #4
  4019e4:	f1bb 0f00 	cmp.w	fp, #0
  4019e8:	f000 82e5 	beq.w	401fb6 <_vfiprintf_r+0xc0e>
  4019ec:	1c67      	adds	r7, r4, #1
  4019ee:	f000 82c4 	beq.w	401f7a <_vfiprintf_r+0xbd2>
  4019f2:	4622      	mov	r2, r4
  4019f4:	2100      	movs	r1, #0
  4019f6:	4658      	mov	r0, fp
  4019f8:	9301      	str	r3, [sp, #4]
  4019fa:	f001 fbd9 	bl	4031b0 <memchr>
  4019fe:	9b01      	ldr	r3, [sp, #4]
  401a00:	2800      	cmp	r0, #0
  401a02:	f000 82e5 	beq.w	401fd0 <_vfiprintf_r+0xc28>
  401a06:	eba0 020b 	sub.w	r2, r0, fp
  401a0a:	9205      	str	r2, [sp, #20]
  401a0c:	9607      	str	r6, [sp, #28]
  401a0e:	9302      	str	r3, [sp, #8]
  401a10:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401a14:	2400      	movs	r4, #0
  401a16:	e619      	b.n	40164c <_vfiprintf_r+0x2a4>
  401a18:	f898 2000 	ldrb.w	r2, [r8]
  401a1c:	2a2a      	cmp	r2, #42	; 0x2a
  401a1e:	f108 0701 	add.w	r7, r8, #1
  401a22:	f000 82e9 	beq.w	401ff8 <_vfiprintf_r+0xc50>
  401a26:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401a2a:	2909      	cmp	r1, #9
  401a2c:	46b8      	mov	r8, r7
  401a2e:	f04f 0400 	mov.w	r4, #0
  401a32:	f63f ad2d 	bhi.w	401490 <_vfiprintf_r+0xe8>
  401a36:	f818 2b01 	ldrb.w	r2, [r8], #1
  401a3a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401a3e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401a42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401a46:	2909      	cmp	r1, #9
  401a48:	d9f5      	bls.n	401a36 <_vfiprintf_r+0x68e>
  401a4a:	e521      	b.n	401490 <_vfiprintf_r+0xe8>
  401a4c:	f043 0320 	orr.w	r3, r3, #32
  401a50:	f898 2000 	ldrb.w	r2, [r8]
  401a54:	e51a      	b.n	40148c <_vfiprintf_r+0xe4>
  401a56:	9608      	str	r6, [sp, #32]
  401a58:	2800      	cmp	r0, #0
  401a5a:	f040 82db 	bne.w	402014 <_vfiprintf_r+0xc6c>
  401a5e:	2a00      	cmp	r2, #0
  401a60:	f000 80e7 	beq.w	401c32 <_vfiprintf_r+0x88a>
  401a64:	2101      	movs	r1, #1
  401a66:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401a6a:	f04f 0200 	mov.w	r2, #0
  401a6e:	9101      	str	r1, [sp, #4]
  401a70:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401a74:	9105      	str	r1, [sp, #20]
  401a76:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401a7a:	e77b      	b.n	401974 <_vfiprintf_r+0x5cc>
  401a7c:	9a07      	ldr	r2, [sp, #28]
  401a7e:	6813      	ldr	r3, [r2, #0]
  401a80:	3204      	adds	r2, #4
  401a82:	9207      	str	r2, [sp, #28]
  401a84:	9a03      	ldr	r2, [sp, #12]
  401a86:	601a      	str	r2, [r3, #0]
  401a88:	e4cb      	b.n	401422 <_vfiprintf_r+0x7a>
  401a8a:	aa0f      	add	r2, sp, #60	; 0x3c
  401a8c:	9904      	ldr	r1, [sp, #16]
  401a8e:	4620      	mov	r0, r4
  401a90:	f7ff fc4a 	bl	401328 <__sprint_r.part.0>
  401a94:	2800      	cmp	r0, #0
  401a96:	f040 8139 	bne.w	401d0c <_vfiprintf_r+0x964>
  401a9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401a9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401a9e:	f101 0c01 	add.w	ip, r1, #1
  401aa2:	46ce      	mov	lr, r9
  401aa4:	e5ff      	b.n	4016a6 <_vfiprintf_r+0x2fe>
  401aa6:	9910      	ldr	r1, [sp, #64]	; 0x40
  401aa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401aaa:	1c48      	adds	r0, r1, #1
  401aac:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401ab0:	2d00      	cmp	r5, #0
  401ab2:	f43f ae22 	beq.w	4016fa <_vfiprintf_r+0x352>
  401ab6:	3201      	adds	r2, #1
  401ab8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401abc:	2101      	movs	r1, #1
  401abe:	2807      	cmp	r0, #7
  401ac0:	9211      	str	r2, [sp, #68]	; 0x44
  401ac2:	9010      	str	r0, [sp, #64]	; 0x40
  401ac4:	f8ca 5000 	str.w	r5, [sl]
  401ac8:	f8ca 1004 	str.w	r1, [sl, #4]
  401acc:	f340 8108 	ble.w	401ce0 <_vfiprintf_r+0x938>
  401ad0:	2a00      	cmp	r2, #0
  401ad2:	f040 81bc 	bne.w	401e4e <_vfiprintf_r+0xaa6>
  401ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ad8:	2b00      	cmp	r3, #0
  401ada:	f43f ae1f 	beq.w	40171c <_vfiprintf_r+0x374>
  401ade:	ab0e      	add	r3, sp, #56	; 0x38
  401ae0:	2202      	movs	r2, #2
  401ae2:	4608      	mov	r0, r1
  401ae4:	931c      	str	r3, [sp, #112]	; 0x70
  401ae6:	921d      	str	r2, [sp, #116]	; 0x74
  401ae8:	46ca      	mov	sl, r9
  401aea:	4601      	mov	r1, r0
  401aec:	f10a 0a08 	add.w	sl, sl, #8
  401af0:	3001      	adds	r0, #1
  401af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401af4:	2b80      	cmp	r3, #128	; 0x80
  401af6:	f43f ae19 	beq.w	40172c <_vfiprintf_r+0x384>
  401afa:	9b05      	ldr	r3, [sp, #20]
  401afc:	1ae4      	subs	r4, r4, r3
  401afe:	2c00      	cmp	r4, #0
  401b00:	dd2e      	ble.n	401b60 <_vfiprintf_r+0x7b8>
  401b02:	2c10      	cmp	r4, #16
  401b04:	4db3      	ldr	r5, [pc, #716]	; (401dd4 <_vfiprintf_r+0xa2c>)
  401b06:	dd1e      	ble.n	401b46 <_vfiprintf_r+0x79e>
  401b08:	46d6      	mov	lr, sl
  401b0a:	2610      	movs	r6, #16
  401b0c:	9f06      	ldr	r7, [sp, #24]
  401b0e:	f8dd a010 	ldr.w	sl, [sp, #16]
  401b12:	e006      	b.n	401b22 <_vfiprintf_r+0x77a>
  401b14:	1c88      	adds	r0, r1, #2
  401b16:	f10e 0e08 	add.w	lr, lr, #8
  401b1a:	4619      	mov	r1, r3
  401b1c:	3c10      	subs	r4, #16
  401b1e:	2c10      	cmp	r4, #16
  401b20:	dd10      	ble.n	401b44 <_vfiprintf_r+0x79c>
  401b22:	1c4b      	adds	r3, r1, #1
  401b24:	3210      	adds	r2, #16
  401b26:	2b07      	cmp	r3, #7
  401b28:	9211      	str	r2, [sp, #68]	; 0x44
  401b2a:	e88e 0060 	stmia.w	lr, {r5, r6}
  401b2e:	9310      	str	r3, [sp, #64]	; 0x40
  401b30:	ddf0      	ble.n	401b14 <_vfiprintf_r+0x76c>
  401b32:	2a00      	cmp	r2, #0
  401b34:	d165      	bne.n	401c02 <_vfiprintf_r+0x85a>
  401b36:	3c10      	subs	r4, #16
  401b38:	2c10      	cmp	r4, #16
  401b3a:	f04f 0001 	mov.w	r0, #1
  401b3e:	4611      	mov	r1, r2
  401b40:	46ce      	mov	lr, r9
  401b42:	dcee      	bgt.n	401b22 <_vfiprintf_r+0x77a>
  401b44:	46f2      	mov	sl, lr
  401b46:	4422      	add	r2, r4
  401b48:	2807      	cmp	r0, #7
  401b4a:	9211      	str	r2, [sp, #68]	; 0x44
  401b4c:	f8ca 5000 	str.w	r5, [sl]
  401b50:	f8ca 4004 	str.w	r4, [sl, #4]
  401b54:	9010      	str	r0, [sp, #64]	; 0x40
  401b56:	f300 8085 	bgt.w	401c64 <_vfiprintf_r+0x8bc>
  401b5a:	f10a 0a08 	add.w	sl, sl, #8
  401b5e:	3001      	adds	r0, #1
  401b60:	9905      	ldr	r1, [sp, #20]
  401b62:	f8ca b000 	str.w	fp, [sl]
  401b66:	440a      	add	r2, r1
  401b68:	2807      	cmp	r0, #7
  401b6a:	9211      	str	r2, [sp, #68]	; 0x44
  401b6c:	f8ca 1004 	str.w	r1, [sl, #4]
  401b70:	9010      	str	r0, [sp, #64]	; 0x40
  401b72:	f340 8082 	ble.w	401c7a <_vfiprintf_r+0x8d2>
  401b76:	2a00      	cmp	r2, #0
  401b78:	f040 8118 	bne.w	401dac <_vfiprintf_r+0xa04>
  401b7c:	9b02      	ldr	r3, [sp, #8]
  401b7e:	9210      	str	r2, [sp, #64]	; 0x40
  401b80:	0758      	lsls	r0, r3, #29
  401b82:	d535      	bpl.n	401bf0 <_vfiprintf_r+0x848>
  401b84:	9b08      	ldr	r3, [sp, #32]
  401b86:	9901      	ldr	r1, [sp, #4]
  401b88:	1a5c      	subs	r4, r3, r1
  401b8a:	2c00      	cmp	r4, #0
  401b8c:	f340 80e7 	ble.w	401d5e <_vfiprintf_r+0x9b6>
  401b90:	46ca      	mov	sl, r9
  401b92:	2c10      	cmp	r4, #16
  401b94:	f340 8218 	ble.w	401fc8 <_vfiprintf_r+0xc20>
  401b98:	9910      	ldr	r1, [sp, #64]	; 0x40
  401b9a:	4e8f      	ldr	r6, [pc, #572]	; (401dd8 <_vfiprintf_r+0xa30>)
  401b9c:	9f06      	ldr	r7, [sp, #24]
  401b9e:	f8dd b010 	ldr.w	fp, [sp, #16]
  401ba2:	2510      	movs	r5, #16
  401ba4:	e006      	b.n	401bb4 <_vfiprintf_r+0x80c>
  401ba6:	1c88      	adds	r0, r1, #2
  401ba8:	f10a 0a08 	add.w	sl, sl, #8
  401bac:	4619      	mov	r1, r3
  401bae:	3c10      	subs	r4, #16
  401bb0:	2c10      	cmp	r4, #16
  401bb2:	dd11      	ble.n	401bd8 <_vfiprintf_r+0x830>
  401bb4:	1c4b      	adds	r3, r1, #1
  401bb6:	3210      	adds	r2, #16
  401bb8:	2b07      	cmp	r3, #7
  401bba:	9211      	str	r2, [sp, #68]	; 0x44
  401bbc:	f8ca 6000 	str.w	r6, [sl]
  401bc0:	f8ca 5004 	str.w	r5, [sl, #4]
  401bc4:	9310      	str	r3, [sp, #64]	; 0x40
  401bc6:	ddee      	ble.n	401ba6 <_vfiprintf_r+0x7fe>
  401bc8:	bb42      	cbnz	r2, 401c1c <_vfiprintf_r+0x874>
  401bca:	3c10      	subs	r4, #16
  401bcc:	2c10      	cmp	r4, #16
  401bce:	f04f 0001 	mov.w	r0, #1
  401bd2:	4611      	mov	r1, r2
  401bd4:	46ca      	mov	sl, r9
  401bd6:	dced      	bgt.n	401bb4 <_vfiprintf_r+0x80c>
  401bd8:	4422      	add	r2, r4
  401bda:	2807      	cmp	r0, #7
  401bdc:	9211      	str	r2, [sp, #68]	; 0x44
  401bde:	f8ca 6000 	str.w	r6, [sl]
  401be2:	f8ca 4004 	str.w	r4, [sl, #4]
  401be6:	9010      	str	r0, [sp, #64]	; 0x40
  401be8:	dd51      	ble.n	401c8e <_vfiprintf_r+0x8e6>
  401bea:	2a00      	cmp	r2, #0
  401bec:	f040 819b 	bne.w	401f26 <_vfiprintf_r+0xb7e>
  401bf0:	9b03      	ldr	r3, [sp, #12]
  401bf2:	9a08      	ldr	r2, [sp, #32]
  401bf4:	9901      	ldr	r1, [sp, #4]
  401bf6:	428a      	cmp	r2, r1
  401bf8:	bfac      	ite	ge
  401bfa:	189b      	addge	r3, r3, r2
  401bfc:	185b      	addlt	r3, r3, r1
  401bfe:	9303      	str	r3, [sp, #12]
  401c00:	e04e      	b.n	401ca0 <_vfiprintf_r+0x8f8>
  401c02:	aa0f      	add	r2, sp, #60	; 0x3c
  401c04:	4651      	mov	r1, sl
  401c06:	4638      	mov	r0, r7
  401c08:	f7ff fb8e 	bl	401328 <__sprint_r.part.0>
  401c0c:	2800      	cmp	r0, #0
  401c0e:	f040 813f 	bne.w	401e90 <_vfiprintf_r+0xae8>
  401c12:	9910      	ldr	r1, [sp, #64]	; 0x40
  401c14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c16:	1c48      	adds	r0, r1, #1
  401c18:	46ce      	mov	lr, r9
  401c1a:	e77f      	b.n	401b1c <_vfiprintf_r+0x774>
  401c1c:	aa0f      	add	r2, sp, #60	; 0x3c
  401c1e:	4659      	mov	r1, fp
  401c20:	4638      	mov	r0, r7
  401c22:	f7ff fb81 	bl	401328 <__sprint_r.part.0>
  401c26:	b960      	cbnz	r0, 401c42 <_vfiprintf_r+0x89a>
  401c28:	9910      	ldr	r1, [sp, #64]	; 0x40
  401c2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c2c:	1c48      	adds	r0, r1, #1
  401c2e:	46ca      	mov	sl, r9
  401c30:	e7bd      	b.n	401bae <_vfiprintf_r+0x806>
  401c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401c34:	f8dd b010 	ldr.w	fp, [sp, #16]
  401c38:	2b00      	cmp	r3, #0
  401c3a:	f040 81d4 	bne.w	401fe6 <_vfiprintf_r+0xc3e>
  401c3e:	2300      	movs	r3, #0
  401c40:	9310      	str	r3, [sp, #64]	; 0x40
  401c42:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401c46:	f013 0f01 	tst.w	r3, #1
  401c4a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401c4e:	d102      	bne.n	401c56 <_vfiprintf_r+0x8ae>
  401c50:	059a      	lsls	r2, r3, #22
  401c52:	f140 80de 	bpl.w	401e12 <_vfiprintf_r+0xa6a>
  401c56:	065b      	lsls	r3, r3, #25
  401c58:	f53f acb2 	bmi.w	4015c0 <_vfiprintf_r+0x218>
  401c5c:	9803      	ldr	r0, [sp, #12]
  401c5e:	b02d      	add	sp, #180	; 0xb4
  401c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c64:	2a00      	cmp	r2, #0
  401c66:	f040 8106 	bne.w	401e76 <_vfiprintf_r+0xace>
  401c6a:	9a05      	ldr	r2, [sp, #20]
  401c6c:	921d      	str	r2, [sp, #116]	; 0x74
  401c6e:	2301      	movs	r3, #1
  401c70:	9211      	str	r2, [sp, #68]	; 0x44
  401c72:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401c76:	9310      	str	r3, [sp, #64]	; 0x40
  401c78:	46ca      	mov	sl, r9
  401c7a:	f10a 0a08 	add.w	sl, sl, #8
  401c7e:	9b02      	ldr	r3, [sp, #8]
  401c80:	0759      	lsls	r1, r3, #29
  401c82:	d504      	bpl.n	401c8e <_vfiprintf_r+0x8e6>
  401c84:	9b08      	ldr	r3, [sp, #32]
  401c86:	9901      	ldr	r1, [sp, #4]
  401c88:	1a5c      	subs	r4, r3, r1
  401c8a:	2c00      	cmp	r4, #0
  401c8c:	dc81      	bgt.n	401b92 <_vfiprintf_r+0x7ea>
  401c8e:	9b03      	ldr	r3, [sp, #12]
  401c90:	9908      	ldr	r1, [sp, #32]
  401c92:	9801      	ldr	r0, [sp, #4]
  401c94:	4281      	cmp	r1, r0
  401c96:	bfac      	ite	ge
  401c98:	185b      	addge	r3, r3, r1
  401c9a:	181b      	addlt	r3, r3, r0
  401c9c:	9303      	str	r3, [sp, #12]
  401c9e:	bb72      	cbnz	r2, 401cfe <_vfiprintf_r+0x956>
  401ca0:	2300      	movs	r3, #0
  401ca2:	9310      	str	r3, [sp, #64]	; 0x40
  401ca4:	46ca      	mov	sl, r9
  401ca6:	f7ff bbbc 	b.w	401422 <_vfiprintf_r+0x7a>
  401caa:	aa0f      	add	r2, sp, #60	; 0x3c
  401cac:	9904      	ldr	r1, [sp, #16]
  401cae:	4620      	mov	r0, r4
  401cb0:	f7ff fb3a 	bl	401328 <__sprint_r.part.0>
  401cb4:	bb50      	cbnz	r0, 401d0c <_vfiprintf_r+0x964>
  401cb6:	9910      	ldr	r1, [sp, #64]	; 0x40
  401cb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401cba:	f101 0e01 	add.w	lr, r1, #1
  401cbe:	46cc      	mov	ip, r9
  401cc0:	e548      	b.n	401754 <_vfiprintf_r+0x3ac>
  401cc2:	2a00      	cmp	r2, #0
  401cc4:	f040 8140 	bne.w	401f48 <_vfiprintf_r+0xba0>
  401cc8:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401ccc:	2900      	cmp	r1, #0
  401cce:	f000 811b 	beq.w	401f08 <_vfiprintf_r+0xb60>
  401cd2:	2201      	movs	r2, #1
  401cd4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401cd8:	4610      	mov	r0, r2
  401cda:	921d      	str	r2, [sp, #116]	; 0x74
  401cdc:	911c      	str	r1, [sp, #112]	; 0x70
  401cde:	46ca      	mov	sl, r9
  401ce0:	4601      	mov	r1, r0
  401ce2:	f10a 0a08 	add.w	sl, sl, #8
  401ce6:	3001      	adds	r0, #1
  401ce8:	e507      	b.n	4016fa <_vfiprintf_r+0x352>
  401cea:	9b02      	ldr	r3, [sp, #8]
  401cec:	2a01      	cmp	r2, #1
  401cee:	f000 8098 	beq.w	401e22 <_vfiprintf_r+0xa7a>
  401cf2:	2a02      	cmp	r2, #2
  401cf4:	d10d      	bne.n	401d12 <_vfiprintf_r+0x96a>
  401cf6:	9302      	str	r3, [sp, #8]
  401cf8:	2600      	movs	r6, #0
  401cfa:	2700      	movs	r7, #0
  401cfc:	e5b0      	b.n	401860 <_vfiprintf_r+0x4b8>
  401cfe:	aa0f      	add	r2, sp, #60	; 0x3c
  401d00:	9904      	ldr	r1, [sp, #16]
  401d02:	9806      	ldr	r0, [sp, #24]
  401d04:	f7ff fb10 	bl	401328 <__sprint_r.part.0>
  401d08:	2800      	cmp	r0, #0
  401d0a:	d0c9      	beq.n	401ca0 <_vfiprintf_r+0x8f8>
  401d0c:	f8dd b010 	ldr.w	fp, [sp, #16]
  401d10:	e797      	b.n	401c42 <_vfiprintf_r+0x89a>
  401d12:	9302      	str	r3, [sp, #8]
  401d14:	2600      	movs	r6, #0
  401d16:	2700      	movs	r7, #0
  401d18:	4649      	mov	r1, r9
  401d1a:	e000      	b.n	401d1e <_vfiprintf_r+0x976>
  401d1c:	4659      	mov	r1, fp
  401d1e:	08f2      	lsrs	r2, r6, #3
  401d20:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401d24:	08f8      	lsrs	r0, r7, #3
  401d26:	f006 0307 	and.w	r3, r6, #7
  401d2a:	4607      	mov	r7, r0
  401d2c:	4616      	mov	r6, r2
  401d2e:	3330      	adds	r3, #48	; 0x30
  401d30:	ea56 0207 	orrs.w	r2, r6, r7
  401d34:	f801 3c01 	strb.w	r3, [r1, #-1]
  401d38:	f101 3bff 	add.w	fp, r1, #4294967295
  401d3c:	d1ee      	bne.n	401d1c <_vfiprintf_r+0x974>
  401d3e:	9a02      	ldr	r2, [sp, #8]
  401d40:	07d6      	lsls	r6, r2, #31
  401d42:	f57f ad9d 	bpl.w	401880 <_vfiprintf_r+0x4d8>
  401d46:	2b30      	cmp	r3, #48	; 0x30
  401d48:	f43f ad9a 	beq.w	401880 <_vfiprintf_r+0x4d8>
  401d4c:	3902      	subs	r1, #2
  401d4e:	2330      	movs	r3, #48	; 0x30
  401d50:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401d54:	eba9 0301 	sub.w	r3, r9, r1
  401d58:	9305      	str	r3, [sp, #20]
  401d5a:	468b      	mov	fp, r1
  401d5c:	e476      	b.n	40164c <_vfiprintf_r+0x2a4>
  401d5e:	9b03      	ldr	r3, [sp, #12]
  401d60:	9a08      	ldr	r2, [sp, #32]
  401d62:	428a      	cmp	r2, r1
  401d64:	bfac      	ite	ge
  401d66:	189b      	addge	r3, r3, r2
  401d68:	185b      	addlt	r3, r3, r1
  401d6a:	9303      	str	r3, [sp, #12]
  401d6c:	e798      	b.n	401ca0 <_vfiprintf_r+0x8f8>
  401d6e:	2202      	movs	r2, #2
  401d70:	e44d      	b.n	40160e <_vfiprintf_r+0x266>
  401d72:	2f00      	cmp	r7, #0
  401d74:	bf08      	it	eq
  401d76:	2e0a      	cmpeq	r6, #10
  401d78:	d352      	bcc.n	401e20 <_vfiprintf_r+0xa78>
  401d7a:	46cb      	mov	fp, r9
  401d7c:	4630      	mov	r0, r6
  401d7e:	4639      	mov	r1, r7
  401d80:	220a      	movs	r2, #10
  401d82:	2300      	movs	r3, #0
  401d84:	f001 ffb8 	bl	403cf8 <__aeabi_uldivmod>
  401d88:	3230      	adds	r2, #48	; 0x30
  401d8a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  401d8e:	4630      	mov	r0, r6
  401d90:	4639      	mov	r1, r7
  401d92:	2300      	movs	r3, #0
  401d94:	220a      	movs	r2, #10
  401d96:	f001 ffaf 	bl	403cf8 <__aeabi_uldivmod>
  401d9a:	4606      	mov	r6, r0
  401d9c:	460f      	mov	r7, r1
  401d9e:	ea56 0307 	orrs.w	r3, r6, r7
  401da2:	d1eb      	bne.n	401d7c <_vfiprintf_r+0x9d4>
  401da4:	e56c      	b.n	401880 <_vfiprintf_r+0x4d8>
  401da6:	9405      	str	r4, [sp, #20]
  401da8:	46cb      	mov	fp, r9
  401daa:	e44f      	b.n	40164c <_vfiprintf_r+0x2a4>
  401dac:	aa0f      	add	r2, sp, #60	; 0x3c
  401dae:	9904      	ldr	r1, [sp, #16]
  401db0:	9806      	ldr	r0, [sp, #24]
  401db2:	f7ff fab9 	bl	401328 <__sprint_r.part.0>
  401db6:	2800      	cmp	r0, #0
  401db8:	d1a8      	bne.n	401d0c <_vfiprintf_r+0x964>
  401dba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401dbc:	46ca      	mov	sl, r9
  401dbe:	e75e      	b.n	401c7e <_vfiprintf_r+0x8d6>
  401dc0:	aa0f      	add	r2, sp, #60	; 0x3c
  401dc2:	9904      	ldr	r1, [sp, #16]
  401dc4:	9806      	ldr	r0, [sp, #24]
  401dc6:	f7ff faaf 	bl	401328 <__sprint_r.part.0>
  401dca:	2800      	cmp	r0, #0
  401dcc:	d19e      	bne.n	401d0c <_vfiprintf_r+0x964>
  401dce:	46ca      	mov	sl, r9
  401dd0:	f7ff bbc0 	b.w	401554 <_vfiprintf_r+0x1ac>
  401dd4:	00404050 	.word	0x00404050
  401dd8:	00404040 	.word	0x00404040
  401ddc:	3104      	adds	r1, #4
  401dde:	6816      	ldr	r6, [r2, #0]
  401de0:	9107      	str	r1, [sp, #28]
  401de2:	2201      	movs	r2, #1
  401de4:	2700      	movs	r7, #0
  401de6:	e412      	b.n	40160e <_vfiprintf_r+0x266>
  401de8:	9807      	ldr	r0, [sp, #28]
  401dea:	4601      	mov	r1, r0
  401dec:	3104      	adds	r1, #4
  401dee:	6806      	ldr	r6, [r0, #0]
  401df0:	9107      	str	r1, [sp, #28]
  401df2:	2700      	movs	r7, #0
  401df4:	e40b      	b.n	40160e <_vfiprintf_r+0x266>
  401df6:	680e      	ldr	r6, [r1, #0]
  401df8:	3104      	adds	r1, #4
  401dfa:	9107      	str	r1, [sp, #28]
  401dfc:	2700      	movs	r7, #0
  401dfe:	e591      	b.n	401924 <_vfiprintf_r+0x57c>
  401e00:	9907      	ldr	r1, [sp, #28]
  401e02:	680e      	ldr	r6, [r1, #0]
  401e04:	460a      	mov	r2, r1
  401e06:	17f7      	asrs	r7, r6, #31
  401e08:	3204      	adds	r2, #4
  401e0a:	9207      	str	r2, [sp, #28]
  401e0c:	4630      	mov	r0, r6
  401e0e:	4639      	mov	r1, r7
  401e10:	e50f      	b.n	401832 <_vfiprintf_r+0x48a>
  401e12:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401e16:	f000 fe7f 	bl	402b18 <__retarget_lock_release_recursive>
  401e1a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401e1e:	e71a      	b.n	401c56 <_vfiprintf_r+0x8ae>
  401e20:	9b02      	ldr	r3, [sp, #8]
  401e22:	9302      	str	r3, [sp, #8]
  401e24:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401e28:	3630      	adds	r6, #48	; 0x30
  401e2a:	2301      	movs	r3, #1
  401e2c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  401e30:	9305      	str	r3, [sp, #20]
  401e32:	e40b      	b.n	40164c <_vfiprintf_r+0x2a4>
  401e34:	aa0f      	add	r2, sp, #60	; 0x3c
  401e36:	9904      	ldr	r1, [sp, #16]
  401e38:	9806      	ldr	r0, [sp, #24]
  401e3a:	f7ff fa75 	bl	401328 <__sprint_r.part.0>
  401e3e:	2800      	cmp	r0, #0
  401e40:	f47f af64 	bne.w	401d0c <_vfiprintf_r+0x964>
  401e44:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e46:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e48:	1c48      	adds	r0, r1, #1
  401e4a:	46ca      	mov	sl, r9
  401e4c:	e651      	b.n	401af2 <_vfiprintf_r+0x74a>
  401e4e:	aa0f      	add	r2, sp, #60	; 0x3c
  401e50:	9904      	ldr	r1, [sp, #16]
  401e52:	9806      	ldr	r0, [sp, #24]
  401e54:	f7ff fa68 	bl	401328 <__sprint_r.part.0>
  401e58:	2800      	cmp	r0, #0
  401e5a:	f47f af57 	bne.w	401d0c <_vfiprintf_r+0x964>
  401e5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e62:	1c48      	adds	r0, r1, #1
  401e64:	46ca      	mov	sl, r9
  401e66:	e448      	b.n	4016fa <_vfiprintf_r+0x352>
  401e68:	2a00      	cmp	r2, #0
  401e6a:	f040 8091 	bne.w	401f90 <_vfiprintf_r+0xbe8>
  401e6e:	2001      	movs	r0, #1
  401e70:	4611      	mov	r1, r2
  401e72:	46ca      	mov	sl, r9
  401e74:	e641      	b.n	401afa <_vfiprintf_r+0x752>
  401e76:	aa0f      	add	r2, sp, #60	; 0x3c
  401e78:	9904      	ldr	r1, [sp, #16]
  401e7a:	9806      	ldr	r0, [sp, #24]
  401e7c:	f7ff fa54 	bl	401328 <__sprint_r.part.0>
  401e80:	2800      	cmp	r0, #0
  401e82:	f47f af43 	bne.w	401d0c <_vfiprintf_r+0x964>
  401e86:	9810      	ldr	r0, [sp, #64]	; 0x40
  401e88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e8a:	3001      	adds	r0, #1
  401e8c:	46ca      	mov	sl, r9
  401e8e:	e667      	b.n	401b60 <_vfiprintf_r+0x7b8>
  401e90:	46d3      	mov	fp, sl
  401e92:	e6d6      	b.n	401c42 <_vfiprintf_r+0x89a>
  401e94:	9e07      	ldr	r6, [sp, #28]
  401e96:	3607      	adds	r6, #7
  401e98:	f026 0207 	bic.w	r2, r6, #7
  401e9c:	f102 0108 	add.w	r1, r2, #8
  401ea0:	e9d2 6700 	ldrd	r6, r7, [r2]
  401ea4:	9107      	str	r1, [sp, #28]
  401ea6:	2201      	movs	r2, #1
  401ea8:	f7ff bbb1 	b.w	40160e <_vfiprintf_r+0x266>
  401eac:	9e07      	ldr	r6, [sp, #28]
  401eae:	3607      	adds	r6, #7
  401eb0:	f026 0607 	bic.w	r6, r6, #7
  401eb4:	e9d6 0100 	ldrd	r0, r1, [r6]
  401eb8:	f106 0208 	add.w	r2, r6, #8
  401ebc:	9207      	str	r2, [sp, #28]
  401ebe:	4606      	mov	r6, r0
  401ec0:	460f      	mov	r7, r1
  401ec2:	e4b6      	b.n	401832 <_vfiprintf_r+0x48a>
  401ec4:	9e07      	ldr	r6, [sp, #28]
  401ec6:	3607      	adds	r6, #7
  401ec8:	f026 0207 	bic.w	r2, r6, #7
  401ecc:	f102 0108 	add.w	r1, r2, #8
  401ed0:	e9d2 6700 	ldrd	r6, r7, [r2]
  401ed4:	9107      	str	r1, [sp, #28]
  401ed6:	2200      	movs	r2, #0
  401ed8:	f7ff bb99 	b.w	40160e <_vfiprintf_r+0x266>
  401edc:	9e07      	ldr	r6, [sp, #28]
  401ede:	3607      	adds	r6, #7
  401ee0:	f026 0107 	bic.w	r1, r6, #7
  401ee4:	f101 0008 	add.w	r0, r1, #8
  401ee8:	9007      	str	r0, [sp, #28]
  401eea:	e9d1 6700 	ldrd	r6, r7, [r1]
  401eee:	e519      	b.n	401924 <_vfiprintf_r+0x57c>
  401ef0:	46cb      	mov	fp, r9
  401ef2:	f7ff bbab 	b.w	40164c <_vfiprintf_r+0x2a4>
  401ef6:	252d      	movs	r5, #45	; 0x2d
  401ef8:	4276      	negs	r6, r6
  401efa:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401efe:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f02:	2201      	movs	r2, #1
  401f04:	f7ff bb88 	b.w	401618 <_vfiprintf_r+0x270>
  401f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f0a:	b9b3      	cbnz	r3, 401f3a <_vfiprintf_r+0xb92>
  401f0c:	4611      	mov	r1, r2
  401f0e:	2001      	movs	r0, #1
  401f10:	46ca      	mov	sl, r9
  401f12:	e5f2      	b.n	401afa <_vfiprintf_r+0x752>
  401f14:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401f18:	f000 fdfe 	bl	402b18 <__retarget_lock_release_recursive>
  401f1c:	f04f 33ff 	mov.w	r3, #4294967295
  401f20:	9303      	str	r3, [sp, #12]
  401f22:	f7ff bb50 	b.w	4015c6 <_vfiprintf_r+0x21e>
  401f26:	aa0f      	add	r2, sp, #60	; 0x3c
  401f28:	9904      	ldr	r1, [sp, #16]
  401f2a:	9806      	ldr	r0, [sp, #24]
  401f2c:	f7ff f9fc 	bl	401328 <__sprint_r.part.0>
  401f30:	2800      	cmp	r0, #0
  401f32:	f47f aeeb 	bne.w	401d0c <_vfiprintf_r+0x964>
  401f36:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f38:	e6a9      	b.n	401c8e <_vfiprintf_r+0x8e6>
  401f3a:	ab0e      	add	r3, sp, #56	; 0x38
  401f3c:	2202      	movs	r2, #2
  401f3e:	931c      	str	r3, [sp, #112]	; 0x70
  401f40:	921d      	str	r2, [sp, #116]	; 0x74
  401f42:	2001      	movs	r0, #1
  401f44:	46ca      	mov	sl, r9
  401f46:	e5d0      	b.n	401aea <_vfiprintf_r+0x742>
  401f48:	aa0f      	add	r2, sp, #60	; 0x3c
  401f4a:	9904      	ldr	r1, [sp, #16]
  401f4c:	9806      	ldr	r0, [sp, #24]
  401f4e:	f7ff f9eb 	bl	401328 <__sprint_r.part.0>
  401f52:	2800      	cmp	r0, #0
  401f54:	f47f aeda 	bne.w	401d0c <_vfiprintf_r+0x964>
  401f58:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f5c:	1c48      	adds	r0, r1, #1
  401f5e:	46ca      	mov	sl, r9
  401f60:	e5a4      	b.n	401aac <_vfiprintf_r+0x704>
  401f62:	9a07      	ldr	r2, [sp, #28]
  401f64:	9903      	ldr	r1, [sp, #12]
  401f66:	6813      	ldr	r3, [r2, #0]
  401f68:	17cd      	asrs	r5, r1, #31
  401f6a:	4608      	mov	r0, r1
  401f6c:	3204      	adds	r2, #4
  401f6e:	4629      	mov	r1, r5
  401f70:	9207      	str	r2, [sp, #28]
  401f72:	e9c3 0100 	strd	r0, r1, [r3]
  401f76:	f7ff ba54 	b.w	401422 <_vfiprintf_r+0x7a>
  401f7a:	4658      	mov	r0, fp
  401f7c:	9607      	str	r6, [sp, #28]
  401f7e:	9302      	str	r3, [sp, #8]
  401f80:	f001 fc7e 	bl	403880 <strlen>
  401f84:	2400      	movs	r4, #0
  401f86:	9005      	str	r0, [sp, #20]
  401f88:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f8c:	f7ff bb5e 	b.w	40164c <_vfiprintf_r+0x2a4>
  401f90:	aa0f      	add	r2, sp, #60	; 0x3c
  401f92:	9904      	ldr	r1, [sp, #16]
  401f94:	9806      	ldr	r0, [sp, #24]
  401f96:	f7ff f9c7 	bl	401328 <__sprint_r.part.0>
  401f9a:	2800      	cmp	r0, #0
  401f9c:	f47f aeb6 	bne.w	401d0c <_vfiprintf_r+0x964>
  401fa0:	9910      	ldr	r1, [sp, #64]	; 0x40
  401fa2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401fa4:	1c48      	adds	r0, r1, #1
  401fa6:	46ca      	mov	sl, r9
  401fa8:	e5a7      	b.n	401afa <_vfiprintf_r+0x752>
  401faa:	9910      	ldr	r1, [sp, #64]	; 0x40
  401fac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401fae:	4e20      	ldr	r6, [pc, #128]	; (402030 <_vfiprintf_r+0xc88>)
  401fb0:	3101      	adds	r1, #1
  401fb2:	f7ff bb90 	b.w	4016d6 <_vfiprintf_r+0x32e>
  401fb6:	2c06      	cmp	r4, #6
  401fb8:	bf28      	it	cs
  401fba:	2406      	movcs	r4, #6
  401fbc:	9405      	str	r4, [sp, #20]
  401fbe:	9607      	str	r6, [sp, #28]
  401fc0:	9401      	str	r4, [sp, #4]
  401fc2:	f8df b070 	ldr.w	fp, [pc, #112]	; 402034 <_vfiprintf_r+0xc8c>
  401fc6:	e4d5      	b.n	401974 <_vfiprintf_r+0x5cc>
  401fc8:	9810      	ldr	r0, [sp, #64]	; 0x40
  401fca:	4e19      	ldr	r6, [pc, #100]	; (402030 <_vfiprintf_r+0xc88>)
  401fcc:	3001      	adds	r0, #1
  401fce:	e603      	b.n	401bd8 <_vfiprintf_r+0x830>
  401fd0:	9405      	str	r4, [sp, #20]
  401fd2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401fd6:	9607      	str	r6, [sp, #28]
  401fd8:	9302      	str	r3, [sp, #8]
  401fda:	4604      	mov	r4, r0
  401fdc:	f7ff bb36 	b.w	40164c <_vfiprintf_r+0x2a4>
  401fe0:	4686      	mov	lr, r0
  401fe2:	f7ff bbce 	b.w	401782 <_vfiprintf_r+0x3da>
  401fe6:	9806      	ldr	r0, [sp, #24]
  401fe8:	aa0f      	add	r2, sp, #60	; 0x3c
  401fea:	4659      	mov	r1, fp
  401fec:	f7ff f99c 	bl	401328 <__sprint_r.part.0>
  401ff0:	2800      	cmp	r0, #0
  401ff2:	f43f ae24 	beq.w	401c3e <_vfiprintf_r+0x896>
  401ff6:	e624      	b.n	401c42 <_vfiprintf_r+0x89a>
  401ff8:	9907      	ldr	r1, [sp, #28]
  401ffa:	f898 2001 	ldrb.w	r2, [r8, #1]
  401ffe:	680c      	ldr	r4, [r1, #0]
  402000:	3104      	adds	r1, #4
  402002:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402006:	46b8      	mov	r8, r7
  402008:	9107      	str	r1, [sp, #28]
  40200a:	f7ff ba3f 	b.w	40148c <_vfiprintf_r+0xe4>
  40200e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402012:	e43c      	b.n	40188e <_vfiprintf_r+0x4e6>
  402014:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402018:	e521      	b.n	401a5e <_vfiprintf_r+0x6b6>
  40201a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40201e:	f7ff bbf4 	b.w	40180a <_vfiprintf_r+0x462>
  402022:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402026:	e491      	b.n	40194c <_vfiprintf_r+0x5a4>
  402028:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40202c:	e469      	b.n	401902 <_vfiprintf_r+0x55a>
  40202e:	bf00      	nop
  402030:	00404040 	.word	0x00404040
  402034:	00404038 	.word	0x00404038

00402038 <__sbprintf>:
  402038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40203c:	460c      	mov	r4, r1
  40203e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402042:	8989      	ldrh	r1, [r1, #12]
  402044:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402046:	89e5      	ldrh	r5, [r4, #14]
  402048:	9619      	str	r6, [sp, #100]	; 0x64
  40204a:	f021 0102 	bic.w	r1, r1, #2
  40204e:	4606      	mov	r6, r0
  402050:	69e0      	ldr	r0, [r4, #28]
  402052:	f8ad 100c 	strh.w	r1, [sp, #12]
  402056:	4617      	mov	r7, r2
  402058:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40205c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40205e:	f8ad 500e 	strh.w	r5, [sp, #14]
  402062:	4698      	mov	r8, r3
  402064:	ad1a      	add	r5, sp, #104	; 0x68
  402066:	2300      	movs	r3, #0
  402068:	9007      	str	r0, [sp, #28]
  40206a:	a816      	add	r0, sp, #88	; 0x58
  40206c:	9209      	str	r2, [sp, #36]	; 0x24
  40206e:	9306      	str	r3, [sp, #24]
  402070:	9500      	str	r5, [sp, #0]
  402072:	9504      	str	r5, [sp, #16]
  402074:	9102      	str	r1, [sp, #8]
  402076:	9105      	str	r1, [sp, #20]
  402078:	f000 fd48 	bl	402b0c <__retarget_lock_init_recursive>
  40207c:	4643      	mov	r3, r8
  40207e:	463a      	mov	r2, r7
  402080:	4669      	mov	r1, sp
  402082:	4630      	mov	r0, r6
  402084:	f7ff f990 	bl	4013a8 <_vfiprintf_r>
  402088:	1e05      	subs	r5, r0, #0
  40208a:	db07      	blt.n	40209c <__sbprintf+0x64>
  40208c:	4630      	mov	r0, r6
  40208e:	4669      	mov	r1, sp
  402090:	f000 f928 	bl	4022e4 <_fflush_r>
  402094:	2800      	cmp	r0, #0
  402096:	bf18      	it	ne
  402098:	f04f 35ff 	movne.w	r5, #4294967295
  40209c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4020a0:	065b      	lsls	r3, r3, #25
  4020a2:	d503      	bpl.n	4020ac <__sbprintf+0x74>
  4020a4:	89a3      	ldrh	r3, [r4, #12]
  4020a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4020aa:	81a3      	strh	r3, [r4, #12]
  4020ac:	9816      	ldr	r0, [sp, #88]	; 0x58
  4020ae:	f000 fd2f 	bl	402b10 <__retarget_lock_close_recursive>
  4020b2:	4628      	mov	r0, r5
  4020b4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4020b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004020bc <__swsetup_r>:
  4020bc:	b538      	push	{r3, r4, r5, lr}
  4020be:	4b30      	ldr	r3, [pc, #192]	; (402180 <__swsetup_r+0xc4>)
  4020c0:	681b      	ldr	r3, [r3, #0]
  4020c2:	4605      	mov	r5, r0
  4020c4:	460c      	mov	r4, r1
  4020c6:	b113      	cbz	r3, 4020ce <__swsetup_r+0x12>
  4020c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4020ca:	2a00      	cmp	r2, #0
  4020cc:	d038      	beq.n	402140 <__swsetup_r+0x84>
  4020ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4020d2:	b293      	uxth	r3, r2
  4020d4:	0718      	lsls	r0, r3, #28
  4020d6:	d50c      	bpl.n	4020f2 <__swsetup_r+0x36>
  4020d8:	6920      	ldr	r0, [r4, #16]
  4020da:	b1a8      	cbz	r0, 402108 <__swsetup_r+0x4c>
  4020dc:	f013 0201 	ands.w	r2, r3, #1
  4020e0:	d01e      	beq.n	402120 <__swsetup_r+0x64>
  4020e2:	6963      	ldr	r3, [r4, #20]
  4020e4:	2200      	movs	r2, #0
  4020e6:	425b      	negs	r3, r3
  4020e8:	61a3      	str	r3, [r4, #24]
  4020ea:	60a2      	str	r2, [r4, #8]
  4020ec:	b1f0      	cbz	r0, 40212c <__swsetup_r+0x70>
  4020ee:	2000      	movs	r0, #0
  4020f0:	bd38      	pop	{r3, r4, r5, pc}
  4020f2:	06d9      	lsls	r1, r3, #27
  4020f4:	d53c      	bpl.n	402170 <__swsetup_r+0xb4>
  4020f6:	0758      	lsls	r0, r3, #29
  4020f8:	d426      	bmi.n	402148 <__swsetup_r+0x8c>
  4020fa:	6920      	ldr	r0, [r4, #16]
  4020fc:	f042 0308 	orr.w	r3, r2, #8
  402100:	81a3      	strh	r3, [r4, #12]
  402102:	b29b      	uxth	r3, r3
  402104:	2800      	cmp	r0, #0
  402106:	d1e9      	bne.n	4020dc <__swsetup_r+0x20>
  402108:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40210c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402110:	d0e4      	beq.n	4020dc <__swsetup_r+0x20>
  402112:	4628      	mov	r0, r5
  402114:	4621      	mov	r1, r4
  402116:	f000 fd2f 	bl	402b78 <__smakebuf_r>
  40211a:	89a3      	ldrh	r3, [r4, #12]
  40211c:	6920      	ldr	r0, [r4, #16]
  40211e:	e7dd      	b.n	4020dc <__swsetup_r+0x20>
  402120:	0799      	lsls	r1, r3, #30
  402122:	bf58      	it	pl
  402124:	6962      	ldrpl	r2, [r4, #20]
  402126:	60a2      	str	r2, [r4, #8]
  402128:	2800      	cmp	r0, #0
  40212a:	d1e0      	bne.n	4020ee <__swsetup_r+0x32>
  40212c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402130:	061a      	lsls	r2, r3, #24
  402132:	d5dd      	bpl.n	4020f0 <__swsetup_r+0x34>
  402134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402138:	81a3      	strh	r3, [r4, #12]
  40213a:	f04f 30ff 	mov.w	r0, #4294967295
  40213e:	bd38      	pop	{r3, r4, r5, pc}
  402140:	4618      	mov	r0, r3
  402142:	f000 f927 	bl	402394 <__sinit>
  402146:	e7c2      	b.n	4020ce <__swsetup_r+0x12>
  402148:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40214a:	b151      	cbz	r1, 402162 <__swsetup_r+0xa6>
  40214c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402150:	4299      	cmp	r1, r3
  402152:	d004      	beq.n	40215e <__swsetup_r+0xa2>
  402154:	4628      	mov	r0, r5
  402156:	f000 fa43 	bl	4025e0 <_free_r>
  40215a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40215e:	2300      	movs	r3, #0
  402160:	6323      	str	r3, [r4, #48]	; 0x30
  402162:	2300      	movs	r3, #0
  402164:	6920      	ldr	r0, [r4, #16]
  402166:	6063      	str	r3, [r4, #4]
  402168:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40216c:	6020      	str	r0, [r4, #0]
  40216e:	e7c5      	b.n	4020fc <__swsetup_r+0x40>
  402170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402174:	2309      	movs	r3, #9
  402176:	602b      	str	r3, [r5, #0]
  402178:	f04f 30ff 	mov.w	r0, #4294967295
  40217c:	81a2      	strh	r2, [r4, #12]
  40217e:	bd38      	pop	{r3, r4, r5, pc}
  402180:	20000008 	.word	0x20000008

00402184 <register_fini>:
  402184:	4b02      	ldr	r3, [pc, #8]	; (402190 <register_fini+0xc>)
  402186:	b113      	cbz	r3, 40218e <register_fini+0xa>
  402188:	4802      	ldr	r0, [pc, #8]	; (402194 <register_fini+0x10>)
  40218a:	f000 b805 	b.w	402198 <atexit>
  40218e:	4770      	bx	lr
  402190:	00000000 	.word	0x00000000
  402194:	00402405 	.word	0x00402405

00402198 <atexit>:
  402198:	2300      	movs	r3, #0
  40219a:	4601      	mov	r1, r0
  40219c:	461a      	mov	r2, r3
  40219e:	4618      	mov	r0, r3
  4021a0:	f001 bc82 	b.w	403aa8 <__register_exitproc>

004021a4 <__sflush_r>:
  4021a4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4021a8:	b29a      	uxth	r2, r3
  4021aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4021ae:	460d      	mov	r5, r1
  4021b0:	0711      	lsls	r1, r2, #28
  4021b2:	4680      	mov	r8, r0
  4021b4:	d43a      	bmi.n	40222c <__sflush_r+0x88>
  4021b6:	686a      	ldr	r2, [r5, #4]
  4021b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4021bc:	2a00      	cmp	r2, #0
  4021be:	81ab      	strh	r3, [r5, #12]
  4021c0:	dd6f      	ble.n	4022a2 <__sflush_r+0xfe>
  4021c2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4021c4:	2c00      	cmp	r4, #0
  4021c6:	d049      	beq.n	40225c <__sflush_r+0xb8>
  4021c8:	2200      	movs	r2, #0
  4021ca:	b29b      	uxth	r3, r3
  4021cc:	f8d8 6000 	ldr.w	r6, [r8]
  4021d0:	f8c8 2000 	str.w	r2, [r8]
  4021d4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4021d8:	d067      	beq.n	4022aa <__sflush_r+0x106>
  4021da:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4021dc:	075f      	lsls	r7, r3, #29
  4021de:	d505      	bpl.n	4021ec <__sflush_r+0x48>
  4021e0:	6869      	ldr	r1, [r5, #4]
  4021e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4021e4:	1a52      	subs	r2, r2, r1
  4021e6:	b10b      	cbz	r3, 4021ec <__sflush_r+0x48>
  4021e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4021ea:	1ad2      	subs	r2, r2, r3
  4021ec:	2300      	movs	r3, #0
  4021ee:	69e9      	ldr	r1, [r5, #28]
  4021f0:	4640      	mov	r0, r8
  4021f2:	47a0      	blx	r4
  4021f4:	1c44      	adds	r4, r0, #1
  4021f6:	d03c      	beq.n	402272 <__sflush_r+0xce>
  4021f8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4021fc:	692a      	ldr	r2, [r5, #16]
  4021fe:	602a      	str	r2, [r5, #0]
  402200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402204:	2200      	movs	r2, #0
  402206:	81ab      	strh	r3, [r5, #12]
  402208:	04db      	lsls	r3, r3, #19
  40220a:	606a      	str	r2, [r5, #4]
  40220c:	d447      	bmi.n	40229e <__sflush_r+0xfa>
  40220e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402210:	f8c8 6000 	str.w	r6, [r8]
  402214:	b311      	cbz	r1, 40225c <__sflush_r+0xb8>
  402216:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40221a:	4299      	cmp	r1, r3
  40221c:	d002      	beq.n	402224 <__sflush_r+0x80>
  40221e:	4640      	mov	r0, r8
  402220:	f000 f9de 	bl	4025e0 <_free_r>
  402224:	2000      	movs	r0, #0
  402226:	6328      	str	r0, [r5, #48]	; 0x30
  402228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40222c:	692e      	ldr	r6, [r5, #16]
  40222e:	b1ae      	cbz	r6, 40225c <__sflush_r+0xb8>
  402230:	682c      	ldr	r4, [r5, #0]
  402232:	602e      	str	r6, [r5, #0]
  402234:	0791      	lsls	r1, r2, #30
  402236:	bf0c      	ite	eq
  402238:	696b      	ldreq	r3, [r5, #20]
  40223a:	2300      	movne	r3, #0
  40223c:	1ba4      	subs	r4, r4, r6
  40223e:	60ab      	str	r3, [r5, #8]
  402240:	e00a      	b.n	402258 <__sflush_r+0xb4>
  402242:	4623      	mov	r3, r4
  402244:	4632      	mov	r2, r6
  402246:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402248:	69e9      	ldr	r1, [r5, #28]
  40224a:	4640      	mov	r0, r8
  40224c:	47b8      	blx	r7
  40224e:	2800      	cmp	r0, #0
  402250:	eba4 0400 	sub.w	r4, r4, r0
  402254:	4406      	add	r6, r0
  402256:	dd04      	ble.n	402262 <__sflush_r+0xbe>
  402258:	2c00      	cmp	r4, #0
  40225a:	dcf2      	bgt.n	402242 <__sflush_r+0x9e>
  40225c:	2000      	movs	r0, #0
  40225e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402262:	89ab      	ldrh	r3, [r5, #12]
  402264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402268:	81ab      	strh	r3, [r5, #12]
  40226a:	f04f 30ff 	mov.w	r0, #4294967295
  40226e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402272:	f8d8 4000 	ldr.w	r4, [r8]
  402276:	2c1d      	cmp	r4, #29
  402278:	d8f3      	bhi.n	402262 <__sflush_r+0xbe>
  40227a:	4b19      	ldr	r3, [pc, #100]	; (4022e0 <__sflush_r+0x13c>)
  40227c:	40e3      	lsrs	r3, r4
  40227e:	43db      	mvns	r3, r3
  402280:	f013 0301 	ands.w	r3, r3, #1
  402284:	d1ed      	bne.n	402262 <__sflush_r+0xbe>
  402286:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40228a:	606b      	str	r3, [r5, #4]
  40228c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402290:	6929      	ldr	r1, [r5, #16]
  402292:	81ab      	strh	r3, [r5, #12]
  402294:	04da      	lsls	r2, r3, #19
  402296:	6029      	str	r1, [r5, #0]
  402298:	d5b9      	bpl.n	40220e <__sflush_r+0x6a>
  40229a:	2c00      	cmp	r4, #0
  40229c:	d1b7      	bne.n	40220e <__sflush_r+0x6a>
  40229e:	6528      	str	r0, [r5, #80]	; 0x50
  4022a0:	e7b5      	b.n	40220e <__sflush_r+0x6a>
  4022a2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4022a4:	2a00      	cmp	r2, #0
  4022a6:	dc8c      	bgt.n	4021c2 <__sflush_r+0x1e>
  4022a8:	e7d8      	b.n	40225c <__sflush_r+0xb8>
  4022aa:	2301      	movs	r3, #1
  4022ac:	69e9      	ldr	r1, [r5, #28]
  4022ae:	4640      	mov	r0, r8
  4022b0:	47a0      	blx	r4
  4022b2:	1c43      	adds	r3, r0, #1
  4022b4:	4602      	mov	r2, r0
  4022b6:	d002      	beq.n	4022be <__sflush_r+0x11a>
  4022b8:	89ab      	ldrh	r3, [r5, #12]
  4022ba:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4022bc:	e78e      	b.n	4021dc <__sflush_r+0x38>
  4022be:	f8d8 3000 	ldr.w	r3, [r8]
  4022c2:	2b00      	cmp	r3, #0
  4022c4:	d0f8      	beq.n	4022b8 <__sflush_r+0x114>
  4022c6:	2b1d      	cmp	r3, #29
  4022c8:	d001      	beq.n	4022ce <__sflush_r+0x12a>
  4022ca:	2b16      	cmp	r3, #22
  4022cc:	d102      	bne.n	4022d4 <__sflush_r+0x130>
  4022ce:	f8c8 6000 	str.w	r6, [r8]
  4022d2:	e7c3      	b.n	40225c <__sflush_r+0xb8>
  4022d4:	89ab      	ldrh	r3, [r5, #12]
  4022d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4022da:	81ab      	strh	r3, [r5, #12]
  4022dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4022e0:	20400001 	.word	0x20400001

004022e4 <_fflush_r>:
  4022e4:	b538      	push	{r3, r4, r5, lr}
  4022e6:	460d      	mov	r5, r1
  4022e8:	4604      	mov	r4, r0
  4022ea:	b108      	cbz	r0, 4022f0 <_fflush_r+0xc>
  4022ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4022ee:	b1bb      	cbz	r3, 402320 <_fflush_r+0x3c>
  4022f0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4022f4:	b188      	cbz	r0, 40231a <_fflush_r+0x36>
  4022f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4022f8:	07db      	lsls	r3, r3, #31
  4022fa:	d401      	bmi.n	402300 <_fflush_r+0x1c>
  4022fc:	0581      	lsls	r1, r0, #22
  4022fe:	d517      	bpl.n	402330 <_fflush_r+0x4c>
  402300:	4620      	mov	r0, r4
  402302:	4629      	mov	r1, r5
  402304:	f7ff ff4e 	bl	4021a4 <__sflush_r>
  402308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40230a:	07da      	lsls	r2, r3, #31
  40230c:	4604      	mov	r4, r0
  40230e:	d402      	bmi.n	402316 <_fflush_r+0x32>
  402310:	89ab      	ldrh	r3, [r5, #12]
  402312:	059b      	lsls	r3, r3, #22
  402314:	d507      	bpl.n	402326 <_fflush_r+0x42>
  402316:	4620      	mov	r0, r4
  402318:	bd38      	pop	{r3, r4, r5, pc}
  40231a:	4604      	mov	r4, r0
  40231c:	4620      	mov	r0, r4
  40231e:	bd38      	pop	{r3, r4, r5, pc}
  402320:	f000 f838 	bl	402394 <__sinit>
  402324:	e7e4      	b.n	4022f0 <_fflush_r+0xc>
  402326:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402328:	f000 fbf6 	bl	402b18 <__retarget_lock_release_recursive>
  40232c:	4620      	mov	r0, r4
  40232e:	bd38      	pop	{r3, r4, r5, pc}
  402330:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402332:	f000 fbef 	bl	402b14 <__retarget_lock_acquire_recursive>
  402336:	e7e3      	b.n	402300 <_fflush_r+0x1c>

00402338 <_cleanup_r>:
  402338:	4901      	ldr	r1, [pc, #4]	; (402340 <_cleanup_r+0x8>)
  40233a:	f000 bbaf 	b.w	402a9c <_fwalk_reent>
  40233e:	bf00      	nop
  402340:	00403b91 	.word	0x00403b91

00402344 <std.isra.0>:
  402344:	b510      	push	{r4, lr}
  402346:	2300      	movs	r3, #0
  402348:	4604      	mov	r4, r0
  40234a:	8181      	strh	r1, [r0, #12]
  40234c:	81c2      	strh	r2, [r0, #14]
  40234e:	6003      	str	r3, [r0, #0]
  402350:	6043      	str	r3, [r0, #4]
  402352:	6083      	str	r3, [r0, #8]
  402354:	6643      	str	r3, [r0, #100]	; 0x64
  402356:	6103      	str	r3, [r0, #16]
  402358:	6143      	str	r3, [r0, #20]
  40235a:	6183      	str	r3, [r0, #24]
  40235c:	4619      	mov	r1, r3
  40235e:	2208      	movs	r2, #8
  402360:	305c      	adds	r0, #92	; 0x5c
  402362:	f7fe fec3 	bl	4010ec <memset>
  402366:	4807      	ldr	r0, [pc, #28]	; (402384 <std.isra.0+0x40>)
  402368:	4907      	ldr	r1, [pc, #28]	; (402388 <std.isra.0+0x44>)
  40236a:	4a08      	ldr	r2, [pc, #32]	; (40238c <std.isra.0+0x48>)
  40236c:	4b08      	ldr	r3, [pc, #32]	; (402390 <std.isra.0+0x4c>)
  40236e:	6220      	str	r0, [r4, #32]
  402370:	61e4      	str	r4, [r4, #28]
  402372:	6261      	str	r1, [r4, #36]	; 0x24
  402374:	62a2      	str	r2, [r4, #40]	; 0x28
  402376:	62e3      	str	r3, [r4, #44]	; 0x2c
  402378:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40237c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402380:	f000 bbc4 	b.w	402b0c <__retarget_lock_init_recursive>
  402384:	004037d5 	.word	0x004037d5
  402388:	004037f9 	.word	0x004037f9
  40238c:	00403835 	.word	0x00403835
  402390:	00403855 	.word	0x00403855

00402394 <__sinit>:
  402394:	b510      	push	{r4, lr}
  402396:	4604      	mov	r4, r0
  402398:	4812      	ldr	r0, [pc, #72]	; (4023e4 <__sinit+0x50>)
  40239a:	f000 fbbb 	bl	402b14 <__retarget_lock_acquire_recursive>
  40239e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4023a0:	b9d2      	cbnz	r2, 4023d8 <__sinit+0x44>
  4023a2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4023a6:	4810      	ldr	r0, [pc, #64]	; (4023e8 <__sinit+0x54>)
  4023a8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4023ac:	2103      	movs	r1, #3
  4023ae:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4023b2:	63e0      	str	r0, [r4, #60]	; 0x3c
  4023b4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4023b8:	6860      	ldr	r0, [r4, #4]
  4023ba:	2104      	movs	r1, #4
  4023bc:	f7ff ffc2 	bl	402344 <std.isra.0>
  4023c0:	2201      	movs	r2, #1
  4023c2:	2109      	movs	r1, #9
  4023c4:	68a0      	ldr	r0, [r4, #8]
  4023c6:	f7ff ffbd 	bl	402344 <std.isra.0>
  4023ca:	2202      	movs	r2, #2
  4023cc:	2112      	movs	r1, #18
  4023ce:	68e0      	ldr	r0, [r4, #12]
  4023d0:	f7ff ffb8 	bl	402344 <std.isra.0>
  4023d4:	2301      	movs	r3, #1
  4023d6:	63a3      	str	r3, [r4, #56]	; 0x38
  4023d8:	4802      	ldr	r0, [pc, #8]	; (4023e4 <__sinit+0x50>)
  4023da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4023de:	f000 bb9b 	b.w	402b18 <__retarget_lock_release_recursive>
  4023e2:	bf00      	nop
  4023e4:	20008dc4 	.word	0x20008dc4
  4023e8:	00402339 	.word	0x00402339

004023ec <__sfp_lock_acquire>:
  4023ec:	4801      	ldr	r0, [pc, #4]	; (4023f4 <__sfp_lock_acquire+0x8>)
  4023ee:	f000 bb91 	b.w	402b14 <__retarget_lock_acquire_recursive>
  4023f2:	bf00      	nop
  4023f4:	20008dd8 	.word	0x20008dd8

004023f8 <__sfp_lock_release>:
  4023f8:	4801      	ldr	r0, [pc, #4]	; (402400 <__sfp_lock_release+0x8>)
  4023fa:	f000 bb8d 	b.w	402b18 <__retarget_lock_release_recursive>
  4023fe:	bf00      	nop
  402400:	20008dd8 	.word	0x20008dd8

00402404 <__libc_fini_array>:
  402404:	b538      	push	{r3, r4, r5, lr}
  402406:	4c0a      	ldr	r4, [pc, #40]	; (402430 <__libc_fini_array+0x2c>)
  402408:	4d0a      	ldr	r5, [pc, #40]	; (402434 <__libc_fini_array+0x30>)
  40240a:	1b64      	subs	r4, r4, r5
  40240c:	10a4      	asrs	r4, r4, #2
  40240e:	d00a      	beq.n	402426 <__libc_fini_array+0x22>
  402410:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402414:	3b01      	subs	r3, #1
  402416:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40241a:	3c01      	subs	r4, #1
  40241c:	f855 3904 	ldr.w	r3, [r5], #-4
  402420:	4798      	blx	r3
  402422:	2c00      	cmp	r4, #0
  402424:	d1f9      	bne.n	40241a <__libc_fini_array+0x16>
  402426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40242a:	f001 beab 	b.w	404184 <_fini>
  40242e:	bf00      	nop
  402430:	00404194 	.word	0x00404194
  402434:	00404190 	.word	0x00404190

00402438 <__fputwc>:
  402438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40243c:	b082      	sub	sp, #8
  40243e:	4680      	mov	r8, r0
  402440:	4689      	mov	r9, r1
  402442:	4614      	mov	r4, r2
  402444:	f000 fb54 	bl	402af0 <__locale_mb_cur_max>
  402448:	2801      	cmp	r0, #1
  40244a:	d036      	beq.n	4024ba <__fputwc+0x82>
  40244c:	464a      	mov	r2, r9
  40244e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402452:	a901      	add	r1, sp, #4
  402454:	4640      	mov	r0, r8
  402456:	f001 fad9 	bl	403a0c <_wcrtomb_r>
  40245a:	1c42      	adds	r2, r0, #1
  40245c:	4606      	mov	r6, r0
  40245e:	d025      	beq.n	4024ac <__fputwc+0x74>
  402460:	b3a8      	cbz	r0, 4024ce <__fputwc+0x96>
  402462:	f89d e004 	ldrb.w	lr, [sp, #4]
  402466:	2500      	movs	r5, #0
  402468:	f10d 0a04 	add.w	sl, sp, #4
  40246c:	e009      	b.n	402482 <__fputwc+0x4a>
  40246e:	6823      	ldr	r3, [r4, #0]
  402470:	1c5a      	adds	r2, r3, #1
  402472:	6022      	str	r2, [r4, #0]
  402474:	f883 e000 	strb.w	lr, [r3]
  402478:	3501      	adds	r5, #1
  40247a:	42b5      	cmp	r5, r6
  40247c:	d227      	bcs.n	4024ce <__fputwc+0x96>
  40247e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402482:	68a3      	ldr	r3, [r4, #8]
  402484:	3b01      	subs	r3, #1
  402486:	2b00      	cmp	r3, #0
  402488:	60a3      	str	r3, [r4, #8]
  40248a:	daf0      	bge.n	40246e <__fputwc+0x36>
  40248c:	69a7      	ldr	r7, [r4, #24]
  40248e:	42bb      	cmp	r3, r7
  402490:	4671      	mov	r1, lr
  402492:	4622      	mov	r2, r4
  402494:	4640      	mov	r0, r8
  402496:	db02      	blt.n	40249e <__fputwc+0x66>
  402498:	f1be 0f0a 	cmp.w	lr, #10
  40249c:	d1e7      	bne.n	40246e <__fputwc+0x36>
  40249e:	f001 fa5d 	bl	40395c <__swbuf_r>
  4024a2:	1c43      	adds	r3, r0, #1
  4024a4:	d1e8      	bne.n	402478 <__fputwc+0x40>
  4024a6:	b002      	add	sp, #8
  4024a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024ac:	89a3      	ldrh	r3, [r4, #12]
  4024ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024b2:	81a3      	strh	r3, [r4, #12]
  4024b4:	b002      	add	sp, #8
  4024b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024ba:	f109 33ff 	add.w	r3, r9, #4294967295
  4024be:	2bfe      	cmp	r3, #254	; 0xfe
  4024c0:	d8c4      	bhi.n	40244c <__fputwc+0x14>
  4024c2:	fa5f fe89 	uxtb.w	lr, r9
  4024c6:	4606      	mov	r6, r0
  4024c8:	f88d e004 	strb.w	lr, [sp, #4]
  4024cc:	e7cb      	b.n	402466 <__fputwc+0x2e>
  4024ce:	4648      	mov	r0, r9
  4024d0:	b002      	add	sp, #8
  4024d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024d6:	bf00      	nop

004024d8 <_fputwc_r>:
  4024d8:	b530      	push	{r4, r5, lr}
  4024da:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4024dc:	f013 0f01 	tst.w	r3, #1
  4024e0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4024e4:	4614      	mov	r4, r2
  4024e6:	b083      	sub	sp, #12
  4024e8:	4605      	mov	r5, r0
  4024ea:	b29a      	uxth	r2, r3
  4024ec:	d101      	bne.n	4024f2 <_fputwc_r+0x1a>
  4024ee:	0590      	lsls	r0, r2, #22
  4024f0:	d51c      	bpl.n	40252c <_fputwc_r+0x54>
  4024f2:	0490      	lsls	r0, r2, #18
  4024f4:	d406      	bmi.n	402504 <_fputwc_r+0x2c>
  4024f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4024f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4024fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402500:	81a3      	strh	r3, [r4, #12]
  402502:	6662      	str	r2, [r4, #100]	; 0x64
  402504:	4628      	mov	r0, r5
  402506:	4622      	mov	r2, r4
  402508:	f7ff ff96 	bl	402438 <__fputwc>
  40250c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40250e:	07da      	lsls	r2, r3, #31
  402510:	4605      	mov	r5, r0
  402512:	d402      	bmi.n	40251a <_fputwc_r+0x42>
  402514:	89a3      	ldrh	r3, [r4, #12]
  402516:	059b      	lsls	r3, r3, #22
  402518:	d502      	bpl.n	402520 <_fputwc_r+0x48>
  40251a:	4628      	mov	r0, r5
  40251c:	b003      	add	sp, #12
  40251e:	bd30      	pop	{r4, r5, pc}
  402520:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402522:	f000 faf9 	bl	402b18 <__retarget_lock_release_recursive>
  402526:	4628      	mov	r0, r5
  402528:	b003      	add	sp, #12
  40252a:	bd30      	pop	{r4, r5, pc}
  40252c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40252e:	9101      	str	r1, [sp, #4]
  402530:	f000 faf0 	bl	402b14 <__retarget_lock_acquire_recursive>
  402534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402538:	9901      	ldr	r1, [sp, #4]
  40253a:	b29a      	uxth	r2, r3
  40253c:	e7d9      	b.n	4024f2 <_fputwc_r+0x1a>
  40253e:	bf00      	nop

00402540 <_malloc_trim_r>:
  402540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402542:	4f24      	ldr	r7, [pc, #144]	; (4025d4 <_malloc_trim_r+0x94>)
  402544:	460c      	mov	r4, r1
  402546:	4606      	mov	r6, r0
  402548:	f000 ff80 	bl	40344c <__malloc_lock>
  40254c:	68bb      	ldr	r3, [r7, #8]
  40254e:	685d      	ldr	r5, [r3, #4]
  402550:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402554:	310f      	adds	r1, #15
  402556:	f025 0503 	bic.w	r5, r5, #3
  40255a:	4429      	add	r1, r5
  40255c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402560:	f021 010f 	bic.w	r1, r1, #15
  402564:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402568:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40256c:	db07      	blt.n	40257e <_malloc_trim_r+0x3e>
  40256e:	2100      	movs	r1, #0
  402570:	4630      	mov	r0, r6
  402572:	f001 f91d 	bl	4037b0 <_sbrk_r>
  402576:	68bb      	ldr	r3, [r7, #8]
  402578:	442b      	add	r3, r5
  40257a:	4298      	cmp	r0, r3
  40257c:	d004      	beq.n	402588 <_malloc_trim_r+0x48>
  40257e:	4630      	mov	r0, r6
  402580:	f000 ff6a 	bl	403458 <__malloc_unlock>
  402584:	2000      	movs	r0, #0
  402586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402588:	4261      	negs	r1, r4
  40258a:	4630      	mov	r0, r6
  40258c:	f001 f910 	bl	4037b0 <_sbrk_r>
  402590:	3001      	adds	r0, #1
  402592:	d00d      	beq.n	4025b0 <_malloc_trim_r+0x70>
  402594:	4b10      	ldr	r3, [pc, #64]	; (4025d8 <_malloc_trim_r+0x98>)
  402596:	68ba      	ldr	r2, [r7, #8]
  402598:	6819      	ldr	r1, [r3, #0]
  40259a:	1b2d      	subs	r5, r5, r4
  40259c:	f045 0501 	orr.w	r5, r5, #1
  4025a0:	4630      	mov	r0, r6
  4025a2:	1b09      	subs	r1, r1, r4
  4025a4:	6055      	str	r5, [r2, #4]
  4025a6:	6019      	str	r1, [r3, #0]
  4025a8:	f000 ff56 	bl	403458 <__malloc_unlock>
  4025ac:	2001      	movs	r0, #1
  4025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025b0:	2100      	movs	r1, #0
  4025b2:	4630      	mov	r0, r6
  4025b4:	f001 f8fc 	bl	4037b0 <_sbrk_r>
  4025b8:	68ba      	ldr	r2, [r7, #8]
  4025ba:	1a83      	subs	r3, r0, r2
  4025bc:	2b0f      	cmp	r3, #15
  4025be:	ddde      	ble.n	40257e <_malloc_trim_r+0x3e>
  4025c0:	4c06      	ldr	r4, [pc, #24]	; (4025dc <_malloc_trim_r+0x9c>)
  4025c2:	4905      	ldr	r1, [pc, #20]	; (4025d8 <_malloc_trim_r+0x98>)
  4025c4:	6824      	ldr	r4, [r4, #0]
  4025c6:	f043 0301 	orr.w	r3, r3, #1
  4025ca:	1b00      	subs	r0, r0, r4
  4025cc:	6053      	str	r3, [r2, #4]
  4025ce:	6008      	str	r0, [r1, #0]
  4025d0:	e7d5      	b.n	40257e <_malloc_trim_r+0x3e>
  4025d2:	bf00      	nop
  4025d4:	200005a8 	.word	0x200005a8
  4025d8:	20000a78 	.word	0x20000a78
  4025dc:	200009b0 	.word	0x200009b0

004025e0 <_free_r>:
  4025e0:	2900      	cmp	r1, #0
  4025e2:	d044      	beq.n	40266e <_free_r+0x8e>
  4025e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025e8:	460d      	mov	r5, r1
  4025ea:	4680      	mov	r8, r0
  4025ec:	f000 ff2e 	bl	40344c <__malloc_lock>
  4025f0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4025f4:	4969      	ldr	r1, [pc, #420]	; (40279c <_free_r+0x1bc>)
  4025f6:	f027 0301 	bic.w	r3, r7, #1
  4025fa:	f1a5 0408 	sub.w	r4, r5, #8
  4025fe:	18e2      	adds	r2, r4, r3
  402600:	688e      	ldr	r6, [r1, #8]
  402602:	6850      	ldr	r0, [r2, #4]
  402604:	42b2      	cmp	r2, r6
  402606:	f020 0003 	bic.w	r0, r0, #3
  40260a:	d05e      	beq.n	4026ca <_free_r+0xea>
  40260c:	07fe      	lsls	r6, r7, #31
  40260e:	6050      	str	r0, [r2, #4]
  402610:	d40b      	bmi.n	40262a <_free_r+0x4a>
  402612:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402616:	1be4      	subs	r4, r4, r7
  402618:	f101 0e08 	add.w	lr, r1, #8
  40261c:	68a5      	ldr	r5, [r4, #8]
  40261e:	4575      	cmp	r5, lr
  402620:	443b      	add	r3, r7
  402622:	d06d      	beq.n	402700 <_free_r+0x120>
  402624:	68e7      	ldr	r7, [r4, #12]
  402626:	60ef      	str	r7, [r5, #12]
  402628:	60bd      	str	r5, [r7, #8]
  40262a:	1815      	adds	r5, r2, r0
  40262c:	686d      	ldr	r5, [r5, #4]
  40262e:	07ed      	lsls	r5, r5, #31
  402630:	d53e      	bpl.n	4026b0 <_free_r+0xd0>
  402632:	f043 0201 	orr.w	r2, r3, #1
  402636:	6062      	str	r2, [r4, #4]
  402638:	50e3      	str	r3, [r4, r3]
  40263a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40263e:	d217      	bcs.n	402670 <_free_r+0x90>
  402640:	08db      	lsrs	r3, r3, #3
  402642:	1c58      	adds	r0, r3, #1
  402644:	109a      	asrs	r2, r3, #2
  402646:	684d      	ldr	r5, [r1, #4]
  402648:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40264c:	60a7      	str	r7, [r4, #8]
  40264e:	2301      	movs	r3, #1
  402650:	4093      	lsls	r3, r2
  402652:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402656:	432b      	orrs	r3, r5
  402658:	3a08      	subs	r2, #8
  40265a:	60e2      	str	r2, [r4, #12]
  40265c:	604b      	str	r3, [r1, #4]
  40265e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402662:	60fc      	str	r4, [r7, #12]
  402664:	4640      	mov	r0, r8
  402666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40266a:	f000 bef5 	b.w	403458 <__malloc_unlock>
  40266e:	4770      	bx	lr
  402670:	0a5a      	lsrs	r2, r3, #9
  402672:	2a04      	cmp	r2, #4
  402674:	d852      	bhi.n	40271c <_free_r+0x13c>
  402676:	099a      	lsrs	r2, r3, #6
  402678:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40267c:	00ff      	lsls	r7, r7, #3
  40267e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402682:	19c8      	adds	r0, r1, r7
  402684:	59ca      	ldr	r2, [r1, r7]
  402686:	3808      	subs	r0, #8
  402688:	4290      	cmp	r0, r2
  40268a:	d04f      	beq.n	40272c <_free_r+0x14c>
  40268c:	6851      	ldr	r1, [r2, #4]
  40268e:	f021 0103 	bic.w	r1, r1, #3
  402692:	428b      	cmp	r3, r1
  402694:	d232      	bcs.n	4026fc <_free_r+0x11c>
  402696:	6892      	ldr	r2, [r2, #8]
  402698:	4290      	cmp	r0, r2
  40269a:	d1f7      	bne.n	40268c <_free_r+0xac>
  40269c:	68c3      	ldr	r3, [r0, #12]
  40269e:	60a0      	str	r0, [r4, #8]
  4026a0:	60e3      	str	r3, [r4, #12]
  4026a2:	609c      	str	r4, [r3, #8]
  4026a4:	60c4      	str	r4, [r0, #12]
  4026a6:	4640      	mov	r0, r8
  4026a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4026ac:	f000 bed4 	b.w	403458 <__malloc_unlock>
  4026b0:	6895      	ldr	r5, [r2, #8]
  4026b2:	4f3b      	ldr	r7, [pc, #236]	; (4027a0 <_free_r+0x1c0>)
  4026b4:	42bd      	cmp	r5, r7
  4026b6:	4403      	add	r3, r0
  4026b8:	d040      	beq.n	40273c <_free_r+0x15c>
  4026ba:	68d0      	ldr	r0, [r2, #12]
  4026bc:	60e8      	str	r0, [r5, #12]
  4026be:	f043 0201 	orr.w	r2, r3, #1
  4026c2:	6085      	str	r5, [r0, #8]
  4026c4:	6062      	str	r2, [r4, #4]
  4026c6:	50e3      	str	r3, [r4, r3]
  4026c8:	e7b7      	b.n	40263a <_free_r+0x5a>
  4026ca:	07ff      	lsls	r7, r7, #31
  4026cc:	4403      	add	r3, r0
  4026ce:	d407      	bmi.n	4026e0 <_free_r+0x100>
  4026d0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4026d4:	1aa4      	subs	r4, r4, r2
  4026d6:	4413      	add	r3, r2
  4026d8:	68a0      	ldr	r0, [r4, #8]
  4026da:	68e2      	ldr	r2, [r4, #12]
  4026dc:	60c2      	str	r2, [r0, #12]
  4026de:	6090      	str	r0, [r2, #8]
  4026e0:	4a30      	ldr	r2, [pc, #192]	; (4027a4 <_free_r+0x1c4>)
  4026e2:	6812      	ldr	r2, [r2, #0]
  4026e4:	f043 0001 	orr.w	r0, r3, #1
  4026e8:	4293      	cmp	r3, r2
  4026ea:	6060      	str	r0, [r4, #4]
  4026ec:	608c      	str	r4, [r1, #8]
  4026ee:	d3b9      	bcc.n	402664 <_free_r+0x84>
  4026f0:	4b2d      	ldr	r3, [pc, #180]	; (4027a8 <_free_r+0x1c8>)
  4026f2:	4640      	mov	r0, r8
  4026f4:	6819      	ldr	r1, [r3, #0]
  4026f6:	f7ff ff23 	bl	402540 <_malloc_trim_r>
  4026fa:	e7b3      	b.n	402664 <_free_r+0x84>
  4026fc:	4610      	mov	r0, r2
  4026fe:	e7cd      	b.n	40269c <_free_r+0xbc>
  402700:	1811      	adds	r1, r2, r0
  402702:	6849      	ldr	r1, [r1, #4]
  402704:	07c9      	lsls	r1, r1, #31
  402706:	d444      	bmi.n	402792 <_free_r+0x1b2>
  402708:	6891      	ldr	r1, [r2, #8]
  40270a:	68d2      	ldr	r2, [r2, #12]
  40270c:	60ca      	str	r2, [r1, #12]
  40270e:	4403      	add	r3, r0
  402710:	f043 0001 	orr.w	r0, r3, #1
  402714:	6091      	str	r1, [r2, #8]
  402716:	6060      	str	r0, [r4, #4]
  402718:	50e3      	str	r3, [r4, r3]
  40271a:	e7a3      	b.n	402664 <_free_r+0x84>
  40271c:	2a14      	cmp	r2, #20
  40271e:	d816      	bhi.n	40274e <_free_r+0x16e>
  402720:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402724:	00ff      	lsls	r7, r7, #3
  402726:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40272a:	e7aa      	b.n	402682 <_free_r+0xa2>
  40272c:	10aa      	asrs	r2, r5, #2
  40272e:	2301      	movs	r3, #1
  402730:	684d      	ldr	r5, [r1, #4]
  402732:	4093      	lsls	r3, r2
  402734:	432b      	orrs	r3, r5
  402736:	604b      	str	r3, [r1, #4]
  402738:	4603      	mov	r3, r0
  40273a:	e7b0      	b.n	40269e <_free_r+0xbe>
  40273c:	f043 0201 	orr.w	r2, r3, #1
  402740:	614c      	str	r4, [r1, #20]
  402742:	610c      	str	r4, [r1, #16]
  402744:	60e5      	str	r5, [r4, #12]
  402746:	60a5      	str	r5, [r4, #8]
  402748:	6062      	str	r2, [r4, #4]
  40274a:	50e3      	str	r3, [r4, r3]
  40274c:	e78a      	b.n	402664 <_free_r+0x84>
  40274e:	2a54      	cmp	r2, #84	; 0x54
  402750:	d806      	bhi.n	402760 <_free_r+0x180>
  402752:	0b1a      	lsrs	r2, r3, #12
  402754:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402758:	00ff      	lsls	r7, r7, #3
  40275a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40275e:	e790      	b.n	402682 <_free_r+0xa2>
  402760:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402764:	d806      	bhi.n	402774 <_free_r+0x194>
  402766:	0bda      	lsrs	r2, r3, #15
  402768:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40276c:	00ff      	lsls	r7, r7, #3
  40276e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402772:	e786      	b.n	402682 <_free_r+0xa2>
  402774:	f240 5054 	movw	r0, #1364	; 0x554
  402778:	4282      	cmp	r2, r0
  40277a:	d806      	bhi.n	40278a <_free_r+0x1aa>
  40277c:	0c9a      	lsrs	r2, r3, #18
  40277e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402782:	00ff      	lsls	r7, r7, #3
  402784:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402788:	e77b      	b.n	402682 <_free_r+0xa2>
  40278a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40278e:	257e      	movs	r5, #126	; 0x7e
  402790:	e777      	b.n	402682 <_free_r+0xa2>
  402792:	f043 0101 	orr.w	r1, r3, #1
  402796:	6061      	str	r1, [r4, #4]
  402798:	6013      	str	r3, [r2, #0]
  40279a:	e763      	b.n	402664 <_free_r+0x84>
  40279c:	200005a8 	.word	0x200005a8
  4027a0:	200005b0 	.word	0x200005b0
  4027a4:	200009b4 	.word	0x200009b4
  4027a8:	20000aa8 	.word	0x20000aa8

004027ac <__sfvwrite_r>:
  4027ac:	6893      	ldr	r3, [r2, #8]
  4027ae:	2b00      	cmp	r3, #0
  4027b0:	d073      	beq.n	40289a <__sfvwrite_r+0xee>
  4027b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027b6:	898b      	ldrh	r3, [r1, #12]
  4027b8:	b083      	sub	sp, #12
  4027ba:	460c      	mov	r4, r1
  4027bc:	0719      	lsls	r1, r3, #28
  4027be:	9000      	str	r0, [sp, #0]
  4027c0:	4616      	mov	r6, r2
  4027c2:	d526      	bpl.n	402812 <__sfvwrite_r+0x66>
  4027c4:	6922      	ldr	r2, [r4, #16]
  4027c6:	b322      	cbz	r2, 402812 <__sfvwrite_r+0x66>
  4027c8:	f013 0002 	ands.w	r0, r3, #2
  4027cc:	6835      	ldr	r5, [r6, #0]
  4027ce:	d02c      	beq.n	40282a <__sfvwrite_r+0x7e>
  4027d0:	f04f 0900 	mov.w	r9, #0
  4027d4:	4fb0      	ldr	r7, [pc, #704]	; (402a98 <__sfvwrite_r+0x2ec>)
  4027d6:	46c8      	mov	r8, r9
  4027d8:	46b2      	mov	sl, r6
  4027da:	45b8      	cmp	r8, r7
  4027dc:	4643      	mov	r3, r8
  4027de:	464a      	mov	r2, r9
  4027e0:	bf28      	it	cs
  4027e2:	463b      	movcs	r3, r7
  4027e4:	9800      	ldr	r0, [sp, #0]
  4027e6:	f1b8 0f00 	cmp.w	r8, #0
  4027ea:	d050      	beq.n	40288e <__sfvwrite_r+0xe2>
  4027ec:	69e1      	ldr	r1, [r4, #28]
  4027ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4027f0:	47b0      	blx	r6
  4027f2:	2800      	cmp	r0, #0
  4027f4:	dd58      	ble.n	4028a8 <__sfvwrite_r+0xfc>
  4027f6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4027fa:	1a1b      	subs	r3, r3, r0
  4027fc:	4481      	add	r9, r0
  4027fe:	eba8 0800 	sub.w	r8, r8, r0
  402802:	f8ca 3008 	str.w	r3, [sl, #8]
  402806:	2b00      	cmp	r3, #0
  402808:	d1e7      	bne.n	4027da <__sfvwrite_r+0x2e>
  40280a:	2000      	movs	r0, #0
  40280c:	b003      	add	sp, #12
  40280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402812:	4621      	mov	r1, r4
  402814:	9800      	ldr	r0, [sp, #0]
  402816:	f7ff fc51 	bl	4020bc <__swsetup_r>
  40281a:	2800      	cmp	r0, #0
  40281c:	f040 8133 	bne.w	402a86 <__sfvwrite_r+0x2da>
  402820:	89a3      	ldrh	r3, [r4, #12]
  402822:	6835      	ldr	r5, [r6, #0]
  402824:	f013 0002 	ands.w	r0, r3, #2
  402828:	d1d2      	bne.n	4027d0 <__sfvwrite_r+0x24>
  40282a:	f013 0901 	ands.w	r9, r3, #1
  40282e:	d145      	bne.n	4028bc <__sfvwrite_r+0x110>
  402830:	464f      	mov	r7, r9
  402832:	9601      	str	r6, [sp, #4]
  402834:	b337      	cbz	r7, 402884 <__sfvwrite_r+0xd8>
  402836:	059a      	lsls	r2, r3, #22
  402838:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40283c:	f140 8083 	bpl.w	402946 <__sfvwrite_r+0x19a>
  402840:	4547      	cmp	r7, r8
  402842:	46c3      	mov	fp, r8
  402844:	f0c0 80ab 	bcc.w	40299e <__sfvwrite_r+0x1f2>
  402848:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40284c:	f040 80ac 	bne.w	4029a8 <__sfvwrite_r+0x1fc>
  402850:	6820      	ldr	r0, [r4, #0]
  402852:	46ba      	mov	sl, r7
  402854:	465a      	mov	r2, fp
  402856:	4649      	mov	r1, r9
  402858:	f000 fd94 	bl	403384 <memmove>
  40285c:	68a2      	ldr	r2, [r4, #8]
  40285e:	6823      	ldr	r3, [r4, #0]
  402860:	eba2 0208 	sub.w	r2, r2, r8
  402864:	445b      	add	r3, fp
  402866:	60a2      	str	r2, [r4, #8]
  402868:	6023      	str	r3, [r4, #0]
  40286a:	9a01      	ldr	r2, [sp, #4]
  40286c:	6893      	ldr	r3, [r2, #8]
  40286e:	eba3 030a 	sub.w	r3, r3, sl
  402872:	44d1      	add	r9, sl
  402874:	eba7 070a 	sub.w	r7, r7, sl
  402878:	6093      	str	r3, [r2, #8]
  40287a:	2b00      	cmp	r3, #0
  40287c:	d0c5      	beq.n	40280a <__sfvwrite_r+0x5e>
  40287e:	89a3      	ldrh	r3, [r4, #12]
  402880:	2f00      	cmp	r7, #0
  402882:	d1d8      	bne.n	402836 <__sfvwrite_r+0x8a>
  402884:	f8d5 9000 	ldr.w	r9, [r5]
  402888:	686f      	ldr	r7, [r5, #4]
  40288a:	3508      	adds	r5, #8
  40288c:	e7d2      	b.n	402834 <__sfvwrite_r+0x88>
  40288e:	f8d5 9000 	ldr.w	r9, [r5]
  402892:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402896:	3508      	adds	r5, #8
  402898:	e79f      	b.n	4027da <__sfvwrite_r+0x2e>
  40289a:	2000      	movs	r0, #0
  40289c:	4770      	bx	lr
  40289e:	4621      	mov	r1, r4
  4028a0:	9800      	ldr	r0, [sp, #0]
  4028a2:	f7ff fd1f 	bl	4022e4 <_fflush_r>
  4028a6:	b370      	cbz	r0, 402906 <__sfvwrite_r+0x15a>
  4028a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4028ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028b0:	f04f 30ff 	mov.w	r0, #4294967295
  4028b4:	81a3      	strh	r3, [r4, #12]
  4028b6:	b003      	add	sp, #12
  4028b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4028bc:	4681      	mov	r9, r0
  4028be:	4633      	mov	r3, r6
  4028c0:	464e      	mov	r6, r9
  4028c2:	46a8      	mov	r8, r5
  4028c4:	469a      	mov	sl, r3
  4028c6:	464d      	mov	r5, r9
  4028c8:	b34e      	cbz	r6, 40291e <__sfvwrite_r+0x172>
  4028ca:	b380      	cbz	r0, 40292e <__sfvwrite_r+0x182>
  4028cc:	6820      	ldr	r0, [r4, #0]
  4028ce:	6923      	ldr	r3, [r4, #16]
  4028d0:	6962      	ldr	r2, [r4, #20]
  4028d2:	45b1      	cmp	r9, r6
  4028d4:	46cb      	mov	fp, r9
  4028d6:	bf28      	it	cs
  4028d8:	46b3      	movcs	fp, r6
  4028da:	4298      	cmp	r0, r3
  4028dc:	465f      	mov	r7, fp
  4028de:	d904      	bls.n	4028ea <__sfvwrite_r+0x13e>
  4028e0:	68a3      	ldr	r3, [r4, #8]
  4028e2:	4413      	add	r3, r2
  4028e4:	459b      	cmp	fp, r3
  4028e6:	f300 80a6 	bgt.w	402a36 <__sfvwrite_r+0x28a>
  4028ea:	4593      	cmp	fp, r2
  4028ec:	db4b      	blt.n	402986 <__sfvwrite_r+0x1da>
  4028ee:	4613      	mov	r3, r2
  4028f0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4028f2:	69e1      	ldr	r1, [r4, #28]
  4028f4:	9800      	ldr	r0, [sp, #0]
  4028f6:	462a      	mov	r2, r5
  4028f8:	47b8      	blx	r7
  4028fa:	1e07      	subs	r7, r0, #0
  4028fc:	ddd4      	ble.n	4028a8 <__sfvwrite_r+0xfc>
  4028fe:	ebb9 0907 	subs.w	r9, r9, r7
  402902:	d0cc      	beq.n	40289e <__sfvwrite_r+0xf2>
  402904:	2001      	movs	r0, #1
  402906:	f8da 3008 	ldr.w	r3, [sl, #8]
  40290a:	1bdb      	subs	r3, r3, r7
  40290c:	443d      	add	r5, r7
  40290e:	1bf6      	subs	r6, r6, r7
  402910:	f8ca 3008 	str.w	r3, [sl, #8]
  402914:	2b00      	cmp	r3, #0
  402916:	f43f af78 	beq.w	40280a <__sfvwrite_r+0x5e>
  40291a:	2e00      	cmp	r6, #0
  40291c:	d1d5      	bne.n	4028ca <__sfvwrite_r+0x11e>
  40291e:	f108 0308 	add.w	r3, r8, #8
  402922:	e913 0060 	ldmdb	r3, {r5, r6}
  402926:	4698      	mov	r8, r3
  402928:	3308      	adds	r3, #8
  40292a:	2e00      	cmp	r6, #0
  40292c:	d0f9      	beq.n	402922 <__sfvwrite_r+0x176>
  40292e:	4632      	mov	r2, r6
  402930:	210a      	movs	r1, #10
  402932:	4628      	mov	r0, r5
  402934:	f000 fc3c 	bl	4031b0 <memchr>
  402938:	2800      	cmp	r0, #0
  40293a:	f000 80a1 	beq.w	402a80 <__sfvwrite_r+0x2d4>
  40293e:	3001      	adds	r0, #1
  402940:	eba0 0905 	sub.w	r9, r0, r5
  402944:	e7c2      	b.n	4028cc <__sfvwrite_r+0x120>
  402946:	6820      	ldr	r0, [r4, #0]
  402948:	6923      	ldr	r3, [r4, #16]
  40294a:	4298      	cmp	r0, r3
  40294c:	d802      	bhi.n	402954 <__sfvwrite_r+0x1a8>
  40294e:	6963      	ldr	r3, [r4, #20]
  402950:	429f      	cmp	r7, r3
  402952:	d25d      	bcs.n	402a10 <__sfvwrite_r+0x264>
  402954:	45b8      	cmp	r8, r7
  402956:	bf28      	it	cs
  402958:	46b8      	movcs	r8, r7
  40295a:	4642      	mov	r2, r8
  40295c:	4649      	mov	r1, r9
  40295e:	f000 fd11 	bl	403384 <memmove>
  402962:	68a3      	ldr	r3, [r4, #8]
  402964:	6822      	ldr	r2, [r4, #0]
  402966:	eba3 0308 	sub.w	r3, r3, r8
  40296a:	4442      	add	r2, r8
  40296c:	60a3      	str	r3, [r4, #8]
  40296e:	6022      	str	r2, [r4, #0]
  402970:	b10b      	cbz	r3, 402976 <__sfvwrite_r+0x1ca>
  402972:	46c2      	mov	sl, r8
  402974:	e779      	b.n	40286a <__sfvwrite_r+0xbe>
  402976:	4621      	mov	r1, r4
  402978:	9800      	ldr	r0, [sp, #0]
  40297a:	f7ff fcb3 	bl	4022e4 <_fflush_r>
  40297e:	2800      	cmp	r0, #0
  402980:	d192      	bne.n	4028a8 <__sfvwrite_r+0xfc>
  402982:	46c2      	mov	sl, r8
  402984:	e771      	b.n	40286a <__sfvwrite_r+0xbe>
  402986:	465a      	mov	r2, fp
  402988:	4629      	mov	r1, r5
  40298a:	f000 fcfb 	bl	403384 <memmove>
  40298e:	68a2      	ldr	r2, [r4, #8]
  402990:	6823      	ldr	r3, [r4, #0]
  402992:	eba2 020b 	sub.w	r2, r2, fp
  402996:	445b      	add	r3, fp
  402998:	60a2      	str	r2, [r4, #8]
  40299a:	6023      	str	r3, [r4, #0]
  40299c:	e7af      	b.n	4028fe <__sfvwrite_r+0x152>
  40299e:	6820      	ldr	r0, [r4, #0]
  4029a0:	46b8      	mov	r8, r7
  4029a2:	46ba      	mov	sl, r7
  4029a4:	46bb      	mov	fp, r7
  4029a6:	e755      	b.n	402854 <__sfvwrite_r+0xa8>
  4029a8:	6962      	ldr	r2, [r4, #20]
  4029aa:	6820      	ldr	r0, [r4, #0]
  4029ac:	6921      	ldr	r1, [r4, #16]
  4029ae:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4029b2:	eba0 0a01 	sub.w	sl, r0, r1
  4029b6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4029ba:	f10a 0001 	add.w	r0, sl, #1
  4029be:	ea4f 0868 	mov.w	r8, r8, asr #1
  4029c2:	4438      	add	r0, r7
  4029c4:	4540      	cmp	r0, r8
  4029c6:	4642      	mov	r2, r8
  4029c8:	bf84      	itt	hi
  4029ca:	4680      	movhi	r8, r0
  4029cc:	4642      	movhi	r2, r8
  4029ce:	055b      	lsls	r3, r3, #21
  4029d0:	d544      	bpl.n	402a5c <__sfvwrite_r+0x2b0>
  4029d2:	4611      	mov	r1, r2
  4029d4:	9800      	ldr	r0, [sp, #0]
  4029d6:	f000 f921 	bl	402c1c <_malloc_r>
  4029da:	4683      	mov	fp, r0
  4029dc:	2800      	cmp	r0, #0
  4029de:	d055      	beq.n	402a8c <__sfvwrite_r+0x2e0>
  4029e0:	4652      	mov	r2, sl
  4029e2:	6921      	ldr	r1, [r4, #16]
  4029e4:	f000 fc34 	bl	403250 <memcpy>
  4029e8:	89a3      	ldrh	r3, [r4, #12]
  4029ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4029ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4029f2:	81a3      	strh	r3, [r4, #12]
  4029f4:	eb0b 000a 	add.w	r0, fp, sl
  4029f8:	eba8 030a 	sub.w	r3, r8, sl
  4029fc:	f8c4 b010 	str.w	fp, [r4, #16]
  402a00:	f8c4 8014 	str.w	r8, [r4, #20]
  402a04:	6020      	str	r0, [r4, #0]
  402a06:	60a3      	str	r3, [r4, #8]
  402a08:	46b8      	mov	r8, r7
  402a0a:	46ba      	mov	sl, r7
  402a0c:	46bb      	mov	fp, r7
  402a0e:	e721      	b.n	402854 <__sfvwrite_r+0xa8>
  402a10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402a14:	42b9      	cmp	r1, r7
  402a16:	bf28      	it	cs
  402a18:	4639      	movcs	r1, r7
  402a1a:	464a      	mov	r2, r9
  402a1c:	fb91 f1f3 	sdiv	r1, r1, r3
  402a20:	9800      	ldr	r0, [sp, #0]
  402a22:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402a24:	fb03 f301 	mul.w	r3, r3, r1
  402a28:	69e1      	ldr	r1, [r4, #28]
  402a2a:	47b0      	blx	r6
  402a2c:	f1b0 0a00 	subs.w	sl, r0, #0
  402a30:	f73f af1b 	bgt.w	40286a <__sfvwrite_r+0xbe>
  402a34:	e738      	b.n	4028a8 <__sfvwrite_r+0xfc>
  402a36:	461a      	mov	r2, r3
  402a38:	4629      	mov	r1, r5
  402a3a:	9301      	str	r3, [sp, #4]
  402a3c:	f000 fca2 	bl	403384 <memmove>
  402a40:	6822      	ldr	r2, [r4, #0]
  402a42:	9b01      	ldr	r3, [sp, #4]
  402a44:	9800      	ldr	r0, [sp, #0]
  402a46:	441a      	add	r2, r3
  402a48:	6022      	str	r2, [r4, #0]
  402a4a:	4621      	mov	r1, r4
  402a4c:	f7ff fc4a 	bl	4022e4 <_fflush_r>
  402a50:	9b01      	ldr	r3, [sp, #4]
  402a52:	2800      	cmp	r0, #0
  402a54:	f47f af28 	bne.w	4028a8 <__sfvwrite_r+0xfc>
  402a58:	461f      	mov	r7, r3
  402a5a:	e750      	b.n	4028fe <__sfvwrite_r+0x152>
  402a5c:	9800      	ldr	r0, [sp, #0]
  402a5e:	f000 fd01 	bl	403464 <_realloc_r>
  402a62:	4683      	mov	fp, r0
  402a64:	2800      	cmp	r0, #0
  402a66:	d1c5      	bne.n	4029f4 <__sfvwrite_r+0x248>
  402a68:	9d00      	ldr	r5, [sp, #0]
  402a6a:	6921      	ldr	r1, [r4, #16]
  402a6c:	4628      	mov	r0, r5
  402a6e:	f7ff fdb7 	bl	4025e0 <_free_r>
  402a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a76:	220c      	movs	r2, #12
  402a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402a7c:	602a      	str	r2, [r5, #0]
  402a7e:	e715      	b.n	4028ac <__sfvwrite_r+0x100>
  402a80:	f106 0901 	add.w	r9, r6, #1
  402a84:	e722      	b.n	4028cc <__sfvwrite_r+0x120>
  402a86:	f04f 30ff 	mov.w	r0, #4294967295
  402a8a:	e6bf      	b.n	40280c <__sfvwrite_r+0x60>
  402a8c:	9a00      	ldr	r2, [sp, #0]
  402a8e:	230c      	movs	r3, #12
  402a90:	6013      	str	r3, [r2, #0]
  402a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a96:	e709      	b.n	4028ac <__sfvwrite_r+0x100>
  402a98:	7ffffc00 	.word	0x7ffffc00

00402a9c <_fwalk_reent>:
  402a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402aa0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402aa4:	d01f      	beq.n	402ae6 <_fwalk_reent+0x4a>
  402aa6:	4688      	mov	r8, r1
  402aa8:	4606      	mov	r6, r0
  402aaa:	f04f 0900 	mov.w	r9, #0
  402aae:	687d      	ldr	r5, [r7, #4]
  402ab0:	68bc      	ldr	r4, [r7, #8]
  402ab2:	3d01      	subs	r5, #1
  402ab4:	d411      	bmi.n	402ada <_fwalk_reent+0x3e>
  402ab6:	89a3      	ldrh	r3, [r4, #12]
  402ab8:	2b01      	cmp	r3, #1
  402aba:	f105 35ff 	add.w	r5, r5, #4294967295
  402abe:	d908      	bls.n	402ad2 <_fwalk_reent+0x36>
  402ac0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402ac4:	3301      	adds	r3, #1
  402ac6:	4621      	mov	r1, r4
  402ac8:	4630      	mov	r0, r6
  402aca:	d002      	beq.n	402ad2 <_fwalk_reent+0x36>
  402acc:	47c0      	blx	r8
  402ace:	ea49 0900 	orr.w	r9, r9, r0
  402ad2:	1c6b      	adds	r3, r5, #1
  402ad4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402ad8:	d1ed      	bne.n	402ab6 <_fwalk_reent+0x1a>
  402ada:	683f      	ldr	r7, [r7, #0]
  402adc:	2f00      	cmp	r7, #0
  402ade:	d1e6      	bne.n	402aae <_fwalk_reent+0x12>
  402ae0:	4648      	mov	r0, r9
  402ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ae6:	46b9      	mov	r9, r7
  402ae8:	4648      	mov	r0, r9
  402aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402aee:	bf00      	nop

00402af0 <__locale_mb_cur_max>:
  402af0:	4b04      	ldr	r3, [pc, #16]	; (402b04 <__locale_mb_cur_max+0x14>)
  402af2:	4a05      	ldr	r2, [pc, #20]	; (402b08 <__locale_mb_cur_max+0x18>)
  402af4:	681b      	ldr	r3, [r3, #0]
  402af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402af8:	2b00      	cmp	r3, #0
  402afa:	bf08      	it	eq
  402afc:	4613      	moveq	r3, r2
  402afe:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402b02:	4770      	bx	lr
  402b04:	20000008 	.word	0x20000008
  402b08:	2000043c 	.word	0x2000043c

00402b0c <__retarget_lock_init_recursive>:
  402b0c:	4770      	bx	lr
  402b0e:	bf00      	nop

00402b10 <__retarget_lock_close_recursive>:
  402b10:	4770      	bx	lr
  402b12:	bf00      	nop

00402b14 <__retarget_lock_acquire_recursive>:
  402b14:	4770      	bx	lr
  402b16:	bf00      	nop

00402b18 <__retarget_lock_release_recursive>:
  402b18:	4770      	bx	lr
  402b1a:	bf00      	nop

00402b1c <__swhatbuf_r>:
  402b1c:	b570      	push	{r4, r5, r6, lr}
  402b1e:	460c      	mov	r4, r1
  402b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402b24:	2900      	cmp	r1, #0
  402b26:	b090      	sub	sp, #64	; 0x40
  402b28:	4615      	mov	r5, r2
  402b2a:	461e      	mov	r6, r3
  402b2c:	db14      	blt.n	402b58 <__swhatbuf_r+0x3c>
  402b2e:	aa01      	add	r2, sp, #4
  402b30:	f001 f890 	bl	403c54 <_fstat_r>
  402b34:	2800      	cmp	r0, #0
  402b36:	db0f      	blt.n	402b58 <__swhatbuf_r+0x3c>
  402b38:	9a02      	ldr	r2, [sp, #8]
  402b3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402b3e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402b42:	fab2 f282 	clz	r2, r2
  402b46:	0952      	lsrs	r2, r2, #5
  402b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402b4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402b50:	6032      	str	r2, [r6, #0]
  402b52:	602b      	str	r3, [r5, #0]
  402b54:	b010      	add	sp, #64	; 0x40
  402b56:	bd70      	pop	{r4, r5, r6, pc}
  402b58:	89a2      	ldrh	r2, [r4, #12]
  402b5a:	2300      	movs	r3, #0
  402b5c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402b60:	6033      	str	r3, [r6, #0]
  402b62:	d004      	beq.n	402b6e <__swhatbuf_r+0x52>
  402b64:	2240      	movs	r2, #64	; 0x40
  402b66:	4618      	mov	r0, r3
  402b68:	602a      	str	r2, [r5, #0]
  402b6a:	b010      	add	sp, #64	; 0x40
  402b6c:	bd70      	pop	{r4, r5, r6, pc}
  402b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402b72:	602b      	str	r3, [r5, #0]
  402b74:	b010      	add	sp, #64	; 0x40
  402b76:	bd70      	pop	{r4, r5, r6, pc}

00402b78 <__smakebuf_r>:
  402b78:	898a      	ldrh	r2, [r1, #12]
  402b7a:	0792      	lsls	r2, r2, #30
  402b7c:	460b      	mov	r3, r1
  402b7e:	d506      	bpl.n	402b8e <__smakebuf_r+0x16>
  402b80:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402b84:	2101      	movs	r1, #1
  402b86:	601a      	str	r2, [r3, #0]
  402b88:	611a      	str	r2, [r3, #16]
  402b8a:	6159      	str	r1, [r3, #20]
  402b8c:	4770      	bx	lr
  402b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b90:	b083      	sub	sp, #12
  402b92:	ab01      	add	r3, sp, #4
  402b94:	466a      	mov	r2, sp
  402b96:	460c      	mov	r4, r1
  402b98:	4606      	mov	r6, r0
  402b9a:	f7ff ffbf 	bl	402b1c <__swhatbuf_r>
  402b9e:	9900      	ldr	r1, [sp, #0]
  402ba0:	4605      	mov	r5, r0
  402ba2:	4630      	mov	r0, r6
  402ba4:	f000 f83a 	bl	402c1c <_malloc_r>
  402ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402bac:	b1d8      	cbz	r0, 402be6 <__smakebuf_r+0x6e>
  402bae:	9a01      	ldr	r2, [sp, #4]
  402bb0:	4f15      	ldr	r7, [pc, #84]	; (402c08 <__smakebuf_r+0x90>)
  402bb2:	9900      	ldr	r1, [sp, #0]
  402bb4:	63f7      	str	r7, [r6, #60]	; 0x3c
  402bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402bba:	81a3      	strh	r3, [r4, #12]
  402bbc:	6020      	str	r0, [r4, #0]
  402bbe:	6120      	str	r0, [r4, #16]
  402bc0:	6161      	str	r1, [r4, #20]
  402bc2:	b91a      	cbnz	r2, 402bcc <__smakebuf_r+0x54>
  402bc4:	432b      	orrs	r3, r5
  402bc6:	81a3      	strh	r3, [r4, #12]
  402bc8:	b003      	add	sp, #12
  402bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402bcc:	4630      	mov	r0, r6
  402bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402bd2:	f001 f853 	bl	403c7c <_isatty_r>
  402bd6:	b1a0      	cbz	r0, 402c02 <__smakebuf_r+0x8a>
  402bd8:	89a3      	ldrh	r3, [r4, #12]
  402bda:	f023 0303 	bic.w	r3, r3, #3
  402bde:	f043 0301 	orr.w	r3, r3, #1
  402be2:	b21b      	sxth	r3, r3
  402be4:	e7ee      	b.n	402bc4 <__smakebuf_r+0x4c>
  402be6:	059a      	lsls	r2, r3, #22
  402be8:	d4ee      	bmi.n	402bc8 <__smakebuf_r+0x50>
  402bea:	f023 0303 	bic.w	r3, r3, #3
  402bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402bf2:	f043 0302 	orr.w	r3, r3, #2
  402bf6:	2101      	movs	r1, #1
  402bf8:	81a3      	strh	r3, [r4, #12]
  402bfa:	6022      	str	r2, [r4, #0]
  402bfc:	6122      	str	r2, [r4, #16]
  402bfe:	6161      	str	r1, [r4, #20]
  402c00:	e7e2      	b.n	402bc8 <__smakebuf_r+0x50>
  402c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c06:	e7dd      	b.n	402bc4 <__smakebuf_r+0x4c>
  402c08:	00402339 	.word	0x00402339

00402c0c <malloc>:
  402c0c:	4b02      	ldr	r3, [pc, #8]	; (402c18 <malloc+0xc>)
  402c0e:	4601      	mov	r1, r0
  402c10:	6818      	ldr	r0, [r3, #0]
  402c12:	f000 b803 	b.w	402c1c <_malloc_r>
  402c16:	bf00      	nop
  402c18:	20000008 	.word	0x20000008

00402c1c <_malloc_r>:
  402c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c20:	f101 060b 	add.w	r6, r1, #11
  402c24:	2e16      	cmp	r6, #22
  402c26:	b083      	sub	sp, #12
  402c28:	4605      	mov	r5, r0
  402c2a:	f240 809e 	bls.w	402d6a <_malloc_r+0x14e>
  402c2e:	f036 0607 	bics.w	r6, r6, #7
  402c32:	f100 80bd 	bmi.w	402db0 <_malloc_r+0x194>
  402c36:	42b1      	cmp	r1, r6
  402c38:	f200 80ba 	bhi.w	402db0 <_malloc_r+0x194>
  402c3c:	f000 fc06 	bl	40344c <__malloc_lock>
  402c40:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402c44:	f0c0 8293 	bcc.w	40316e <_malloc_r+0x552>
  402c48:	0a73      	lsrs	r3, r6, #9
  402c4a:	f000 80b8 	beq.w	402dbe <_malloc_r+0x1a2>
  402c4e:	2b04      	cmp	r3, #4
  402c50:	f200 8179 	bhi.w	402f46 <_malloc_r+0x32a>
  402c54:	09b3      	lsrs	r3, r6, #6
  402c56:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402c5a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402c5e:	00c3      	lsls	r3, r0, #3
  402c60:	4fbf      	ldr	r7, [pc, #764]	; (402f60 <_malloc_r+0x344>)
  402c62:	443b      	add	r3, r7
  402c64:	f1a3 0108 	sub.w	r1, r3, #8
  402c68:	685c      	ldr	r4, [r3, #4]
  402c6a:	42a1      	cmp	r1, r4
  402c6c:	d106      	bne.n	402c7c <_malloc_r+0x60>
  402c6e:	e00c      	b.n	402c8a <_malloc_r+0x6e>
  402c70:	2a00      	cmp	r2, #0
  402c72:	f280 80aa 	bge.w	402dca <_malloc_r+0x1ae>
  402c76:	68e4      	ldr	r4, [r4, #12]
  402c78:	42a1      	cmp	r1, r4
  402c7a:	d006      	beq.n	402c8a <_malloc_r+0x6e>
  402c7c:	6863      	ldr	r3, [r4, #4]
  402c7e:	f023 0303 	bic.w	r3, r3, #3
  402c82:	1b9a      	subs	r2, r3, r6
  402c84:	2a0f      	cmp	r2, #15
  402c86:	ddf3      	ble.n	402c70 <_malloc_r+0x54>
  402c88:	4670      	mov	r0, lr
  402c8a:	693c      	ldr	r4, [r7, #16]
  402c8c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402f74 <_malloc_r+0x358>
  402c90:	4574      	cmp	r4, lr
  402c92:	f000 81ab 	beq.w	402fec <_malloc_r+0x3d0>
  402c96:	6863      	ldr	r3, [r4, #4]
  402c98:	f023 0303 	bic.w	r3, r3, #3
  402c9c:	1b9a      	subs	r2, r3, r6
  402c9e:	2a0f      	cmp	r2, #15
  402ca0:	f300 8190 	bgt.w	402fc4 <_malloc_r+0x3a8>
  402ca4:	2a00      	cmp	r2, #0
  402ca6:	f8c7 e014 	str.w	lr, [r7, #20]
  402caa:	f8c7 e010 	str.w	lr, [r7, #16]
  402cae:	f280 809d 	bge.w	402dec <_malloc_r+0x1d0>
  402cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402cb6:	f080 8161 	bcs.w	402f7c <_malloc_r+0x360>
  402cba:	08db      	lsrs	r3, r3, #3
  402cbc:	f103 0c01 	add.w	ip, r3, #1
  402cc0:	1099      	asrs	r1, r3, #2
  402cc2:	687a      	ldr	r2, [r7, #4]
  402cc4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402cc8:	f8c4 8008 	str.w	r8, [r4, #8]
  402ccc:	2301      	movs	r3, #1
  402cce:	408b      	lsls	r3, r1
  402cd0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402cd4:	4313      	orrs	r3, r2
  402cd6:	3908      	subs	r1, #8
  402cd8:	60e1      	str	r1, [r4, #12]
  402cda:	607b      	str	r3, [r7, #4]
  402cdc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402ce0:	f8c8 400c 	str.w	r4, [r8, #12]
  402ce4:	1082      	asrs	r2, r0, #2
  402ce6:	2401      	movs	r4, #1
  402ce8:	4094      	lsls	r4, r2
  402cea:	429c      	cmp	r4, r3
  402cec:	f200 808b 	bhi.w	402e06 <_malloc_r+0x1ea>
  402cf0:	421c      	tst	r4, r3
  402cf2:	d106      	bne.n	402d02 <_malloc_r+0xe6>
  402cf4:	f020 0003 	bic.w	r0, r0, #3
  402cf8:	0064      	lsls	r4, r4, #1
  402cfa:	421c      	tst	r4, r3
  402cfc:	f100 0004 	add.w	r0, r0, #4
  402d00:	d0fa      	beq.n	402cf8 <_malloc_r+0xdc>
  402d02:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402d06:	46cc      	mov	ip, r9
  402d08:	4680      	mov	r8, r0
  402d0a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402d0e:	459c      	cmp	ip, r3
  402d10:	d107      	bne.n	402d22 <_malloc_r+0x106>
  402d12:	e16d      	b.n	402ff0 <_malloc_r+0x3d4>
  402d14:	2a00      	cmp	r2, #0
  402d16:	f280 817b 	bge.w	403010 <_malloc_r+0x3f4>
  402d1a:	68db      	ldr	r3, [r3, #12]
  402d1c:	459c      	cmp	ip, r3
  402d1e:	f000 8167 	beq.w	402ff0 <_malloc_r+0x3d4>
  402d22:	6859      	ldr	r1, [r3, #4]
  402d24:	f021 0103 	bic.w	r1, r1, #3
  402d28:	1b8a      	subs	r2, r1, r6
  402d2a:	2a0f      	cmp	r2, #15
  402d2c:	ddf2      	ble.n	402d14 <_malloc_r+0xf8>
  402d2e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402d32:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402d36:	9300      	str	r3, [sp, #0]
  402d38:	199c      	adds	r4, r3, r6
  402d3a:	4628      	mov	r0, r5
  402d3c:	f046 0601 	orr.w	r6, r6, #1
  402d40:	f042 0501 	orr.w	r5, r2, #1
  402d44:	605e      	str	r6, [r3, #4]
  402d46:	f8c8 c00c 	str.w	ip, [r8, #12]
  402d4a:	f8cc 8008 	str.w	r8, [ip, #8]
  402d4e:	617c      	str	r4, [r7, #20]
  402d50:	613c      	str	r4, [r7, #16]
  402d52:	f8c4 e00c 	str.w	lr, [r4, #12]
  402d56:	f8c4 e008 	str.w	lr, [r4, #8]
  402d5a:	6065      	str	r5, [r4, #4]
  402d5c:	505a      	str	r2, [r3, r1]
  402d5e:	f000 fb7b 	bl	403458 <__malloc_unlock>
  402d62:	9b00      	ldr	r3, [sp, #0]
  402d64:	f103 0408 	add.w	r4, r3, #8
  402d68:	e01e      	b.n	402da8 <_malloc_r+0x18c>
  402d6a:	2910      	cmp	r1, #16
  402d6c:	d820      	bhi.n	402db0 <_malloc_r+0x194>
  402d6e:	f000 fb6d 	bl	40344c <__malloc_lock>
  402d72:	2610      	movs	r6, #16
  402d74:	2318      	movs	r3, #24
  402d76:	2002      	movs	r0, #2
  402d78:	4f79      	ldr	r7, [pc, #484]	; (402f60 <_malloc_r+0x344>)
  402d7a:	443b      	add	r3, r7
  402d7c:	f1a3 0208 	sub.w	r2, r3, #8
  402d80:	685c      	ldr	r4, [r3, #4]
  402d82:	4294      	cmp	r4, r2
  402d84:	f000 813d 	beq.w	403002 <_malloc_r+0x3e6>
  402d88:	6863      	ldr	r3, [r4, #4]
  402d8a:	68e1      	ldr	r1, [r4, #12]
  402d8c:	68a6      	ldr	r6, [r4, #8]
  402d8e:	f023 0303 	bic.w	r3, r3, #3
  402d92:	4423      	add	r3, r4
  402d94:	4628      	mov	r0, r5
  402d96:	685a      	ldr	r2, [r3, #4]
  402d98:	60f1      	str	r1, [r6, #12]
  402d9a:	f042 0201 	orr.w	r2, r2, #1
  402d9e:	608e      	str	r6, [r1, #8]
  402da0:	605a      	str	r2, [r3, #4]
  402da2:	f000 fb59 	bl	403458 <__malloc_unlock>
  402da6:	3408      	adds	r4, #8
  402da8:	4620      	mov	r0, r4
  402daa:	b003      	add	sp, #12
  402dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402db0:	2400      	movs	r4, #0
  402db2:	230c      	movs	r3, #12
  402db4:	4620      	mov	r0, r4
  402db6:	602b      	str	r3, [r5, #0]
  402db8:	b003      	add	sp, #12
  402dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402dbe:	2040      	movs	r0, #64	; 0x40
  402dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
  402dc4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402dc8:	e74a      	b.n	402c60 <_malloc_r+0x44>
  402dca:	4423      	add	r3, r4
  402dcc:	68e1      	ldr	r1, [r4, #12]
  402dce:	685a      	ldr	r2, [r3, #4]
  402dd0:	68a6      	ldr	r6, [r4, #8]
  402dd2:	f042 0201 	orr.w	r2, r2, #1
  402dd6:	60f1      	str	r1, [r6, #12]
  402dd8:	4628      	mov	r0, r5
  402dda:	608e      	str	r6, [r1, #8]
  402ddc:	605a      	str	r2, [r3, #4]
  402dde:	f000 fb3b 	bl	403458 <__malloc_unlock>
  402de2:	3408      	adds	r4, #8
  402de4:	4620      	mov	r0, r4
  402de6:	b003      	add	sp, #12
  402de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402dec:	4423      	add	r3, r4
  402dee:	4628      	mov	r0, r5
  402df0:	685a      	ldr	r2, [r3, #4]
  402df2:	f042 0201 	orr.w	r2, r2, #1
  402df6:	605a      	str	r2, [r3, #4]
  402df8:	f000 fb2e 	bl	403458 <__malloc_unlock>
  402dfc:	3408      	adds	r4, #8
  402dfe:	4620      	mov	r0, r4
  402e00:	b003      	add	sp, #12
  402e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e06:	68bc      	ldr	r4, [r7, #8]
  402e08:	6863      	ldr	r3, [r4, #4]
  402e0a:	f023 0803 	bic.w	r8, r3, #3
  402e0e:	45b0      	cmp	r8, r6
  402e10:	d304      	bcc.n	402e1c <_malloc_r+0x200>
  402e12:	eba8 0306 	sub.w	r3, r8, r6
  402e16:	2b0f      	cmp	r3, #15
  402e18:	f300 8085 	bgt.w	402f26 <_malloc_r+0x30a>
  402e1c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402f78 <_malloc_r+0x35c>
  402e20:	4b50      	ldr	r3, [pc, #320]	; (402f64 <_malloc_r+0x348>)
  402e22:	f8d9 2000 	ldr.w	r2, [r9]
  402e26:	681b      	ldr	r3, [r3, #0]
  402e28:	3201      	adds	r2, #1
  402e2a:	4433      	add	r3, r6
  402e2c:	eb04 0a08 	add.w	sl, r4, r8
  402e30:	f000 8155 	beq.w	4030de <_malloc_r+0x4c2>
  402e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402e38:	330f      	adds	r3, #15
  402e3a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402e3e:	f02b 0b0f 	bic.w	fp, fp, #15
  402e42:	4659      	mov	r1, fp
  402e44:	4628      	mov	r0, r5
  402e46:	f000 fcb3 	bl	4037b0 <_sbrk_r>
  402e4a:	1c41      	adds	r1, r0, #1
  402e4c:	4602      	mov	r2, r0
  402e4e:	f000 80fc 	beq.w	40304a <_malloc_r+0x42e>
  402e52:	4582      	cmp	sl, r0
  402e54:	f200 80f7 	bhi.w	403046 <_malloc_r+0x42a>
  402e58:	4b43      	ldr	r3, [pc, #268]	; (402f68 <_malloc_r+0x34c>)
  402e5a:	6819      	ldr	r1, [r3, #0]
  402e5c:	4459      	add	r1, fp
  402e5e:	6019      	str	r1, [r3, #0]
  402e60:	f000 814d 	beq.w	4030fe <_malloc_r+0x4e2>
  402e64:	f8d9 0000 	ldr.w	r0, [r9]
  402e68:	3001      	adds	r0, #1
  402e6a:	bf1b      	ittet	ne
  402e6c:	eba2 0a0a 	subne.w	sl, r2, sl
  402e70:	4451      	addne	r1, sl
  402e72:	f8c9 2000 	streq.w	r2, [r9]
  402e76:	6019      	strne	r1, [r3, #0]
  402e78:	f012 0107 	ands.w	r1, r2, #7
  402e7c:	f000 8115 	beq.w	4030aa <_malloc_r+0x48e>
  402e80:	f1c1 0008 	rsb	r0, r1, #8
  402e84:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402e88:	4402      	add	r2, r0
  402e8a:	3108      	adds	r1, #8
  402e8c:	eb02 090b 	add.w	r9, r2, fp
  402e90:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402e94:	eba1 0909 	sub.w	r9, r1, r9
  402e98:	4649      	mov	r1, r9
  402e9a:	4628      	mov	r0, r5
  402e9c:	9301      	str	r3, [sp, #4]
  402e9e:	9200      	str	r2, [sp, #0]
  402ea0:	f000 fc86 	bl	4037b0 <_sbrk_r>
  402ea4:	1c43      	adds	r3, r0, #1
  402ea6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402eaa:	f000 8143 	beq.w	403134 <_malloc_r+0x518>
  402eae:	1a80      	subs	r0, r0, r2
  402eb0:	4448      	add	r0, r9
  402eb2:	f040 0001 	orr.w	r0, r0, #1
  402eb6:	6819      	ldr	r1, [r3, #0]
  402eb8:	60ba      	str	r2, [r7, #8]
  402eba:	4449      	add	r1, r9
  402ebc:	42bc      	cmp	r4, r7
  402ebe:	6050      	str	r0, [r2, #4]
  402ec0:	6019      	str	r1, [r3, #0]
  402ec2:	d017      	beq.n	402ef4 <_malloc_r+0x2d8>
  402ec4:	f1b8 0f0f 	cmp.w	r8, #15
  402ec8:	f240 80fb 	bls.w	4030c2 <_malloc_r+0x4a6>
  402ecc:	6860      	ldr	r0, [r4, #4]
  402ece:	f1a8 020c 	sub.w	r2, r8, #12
  402ed2:	f022 0207 	bic.w	r2, r2, #7
  402ed6:	eb04 0e02 	add.w	lr, r4, r2
  402eda:	f000 0001 	and.w	r0, r0, #1
  402ede:	f04f 0c05 	mov.w	ip, #5
  402ee2:	4310      	orrs	r0, r2
  402ee4:	2a0f      	cmp	r2, #15
  402ee6:	6060      	str	r0, [r4, #4]
  402ee8:	f8ce c004 	str.w	ip, [lr, #4]
  402eec:	f8ce c008 	str.w	ip, [lr, #8]
  402ef0:	f200 8117 	bhi.w	403122 <_malloc_r+0x506>
  402ef4:	4b1d      	ldr	r3, [pc, #116]	; (402f6c <_malloc_r+0x350>)
  402ef6:	68bc      	ldr	r4, [r7, #8]
  402ef8:	681a      	ldr	r2, [r3, #0]
  402efa:	4291      	cmp	r1, r2
  402efc:	bf88      	it	hi
  402efe:	6019      	strhi	r1, [r3, #0]
  402f00:	4b1b      	ldr	r3, [pc, #108]	; (402f70 <_malloc_r+0x354>)
  402f02:	681a      	ldr	r2, [r3, #0]
  402f04:	4291      	cmp	r1, r2
  402f06:	6862      	ldr	r2, [r4, #4]
  402f08:	bf88      	it	hi
  402f0a:	6019      	strhi	r1, [r3, #0]
  402f0c:	f022 0203 	bic.w	r2, r2, #3
  402f10:	4296      	cmp	r6, r2
  402f12:	eba2 0306 	sub.w	r3, r2, r6
  402f16:	d801      	bhi.n	402f1c <_malloc_r+0x300>
  402f18:	2b0f      	cmp	r3, #15
  402f1a:	dc04      	bgt.n	402f26 <_malloc_r+0x30a>
  402f1c:	4628      	mov	r0, r5
  402f1e:	f000 fa9b 	bl	403458 <__malloc_unlock>
  402f22:	2400      	movs	r4, #0
  402f24:	e740      	b.n	402da8 <_malloc_r+0x18c>
  402f26:	19a2      	adds	r2, r4, r6
  402f28:	f043 0301 	orr.w	r3, r3, #1
  402f2c:	f046 0601 	orr.w	r6, r6, #1
  402f30:	6066      	str	r6, [r4, #4]
  402f32:	4628      	mov	r0, r5
  402f34:	60ba      	str	r2, [r7, #8]
  402f36:	6053      	str	r3, [r2, #4]
  402f38:	f000 fa8e 	bl	403458 <__malloc_unlock>
  402f3c:	3408      	adds	r4, #8
  402f3e:	4620      	mov	r0, r4
  402f40:	b003      	add	sp, #12
  402f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f46:	2b14      	cmp	r3, #20
  402f48:	d971      	bls.n	40302e <_malloc_r+0x412>
  402f4a:	2b54      	cmp	r3, #84	; 0x54
  402f4c:	f200 80a3 	bhi.w	403096 <_malloc_r+0x47a>
  402f50:	0b33      	lsrs	r3, r6, #12
  402f52:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402f56:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402f5a:	00c3      	lsls	r3, r0, #3
  402f5c:	e680      	b.n	402c60 <_malloc_r+0x44>
  402f5e:	bf00      	nop
  402f60:	200005a8 	.word	0x200005a8
  402f64:	20000aa8 	.word	0x20000aa8
  402f68:	20000a78 	.word	0x20000a78
  402f6c:	20000aa0 	.word	0x20000aa0
  402f70:	20000aa4 	.word	0x20000aa4
  402f74:	200005b0 	.word	0x200005b0
  402f78:	200009b0 	.word	0x200009b0
  402f7c:	0a5a      	lsrs	r2, r3, #9
  402f7e:	2a04      	cmp	r2, #4
  402f80:	d95b      	bls.n	40303a <_malloc_r+0x41e>
  402f82:	2a14      	cmp	r2, #20
  402f84:	f200 80ae 	bhi.w	4030e4 <_malloc_r+0x4c8>
  402f88:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402f8c:	00c9      	lsls	r1, r1, #3
  402f8e:	325b      	adds	r2, #91	; 0x5b
  402f90:	eb07 0c01 	add.w	ip, r7, r1
  402f94:	5879      	ldr	r1, [r7, r1]
  402f96:	f1ac 0c08 	sub.w	ip, ip, #8
  402f9a:	458c      	cmp	ip, r1
  402f9c:	f000 8088 	beq.w	4030b0 <_malloc_r+0x494>
  402fa0:	684a      	ldr	r2, [r1, #4]
  402fa2:	f022 0203 	bic.w	r2, r2, #3
  402fa6:	4293      	cmp	r3, r2
  402fa8:	d273      	bcs.n	403092 <_malloc_r+0x476>
  402faa:	6889      	ldr	r1, [r1, #8]
  402fac:	458c      	cmp	ip, r1
  402fae:	d1f7      	bne.n	402fa0 <_malloc_r+0x384>
  402fb0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402fb4:	687b      	ldr	r3, [r7, #4]
  402fb6:	60e2      	str	r2, [r4, #12]
  402fb8:	f8c4 c008 	str.w	ip, [r4, #8]
  402fbc:	6094      	str	r4, [r2, #8]
  402fbe:	f8cc 400c 	str.w	r4, [ip, #12]
  402fc2:	e68f      	b.n	402ce4 <_malloc_r+0xc8>
  402fc4:	19a1      	adds	r1, r4, r6
  402fc6:	f046 0c01 	orr.w	ip, r6, #1
  402fca:	f042 0601 	orr.w	r6, r2, #1
  402fce:	f8c4 c004 	str.w	ip, [r4, #4]
  402fd2:	4628      	mov	r0, r5
  402fd4:	6179      	str	r1, [r7, #20]
  402fd6:	6139      	str	r1, [r7, #16]
  402fd8:	f8c1 e00c 	str.w	lr, [r1, #12]
  402fdc:	f8c1 e008 	str.w	lr, [r1, #8]
  402fe0:	604e      	str	r6, [r1, #4]
  402fe2:	50e2      	str	r2, [r4, r3]
  402fe4:	f000 fa38 	bl	403458 <__malloc_unlock>
  402fe8:	3408      	adds	r4, #8
  402fea:	e6dd      	b.n	402da8 <_malloc_r+0x18c>
  402fec:	687b      	ldr	r3, [r7, #4]
  402fee:	e679      	b.n	402ce4 <_malloc_r+0xc8>
  402ff0:	f108 0801 	add.w	r8, r8, #1
  402ff4:	f018 0f03 	tst.w	r8, #3
  402ff8:	f10c 0c08 	add.w	ip, ip, #8
  402ffc:	f47f ae85 	bne.w	402d0a <_malloc_r+0xee>
  403000:	e02d      	b.n	40305e <_malloc_r+0x442>
  403002:	68dc      	ldr	r4, [r3, #12]
  403004:	42a3      	cmp	r3, r4
  403006:	bf08      	it	eq
  403008:	3002      	addeq	r0, #2
  40300a:	f43f ae3e 	beq.w	402c8a <_malloc_r+0x6e>
  40300e:	e6bb      	b.n	402d88 <_malloc_r+0x16c>
  403010:	4419      	add	r1, r3
  403012:	461c      	mov	r4, r3
  403014:	684a      	ldr	r2, [r1, #4]
  403016:	68db      	ldr	r3, [r3, #12]
  403018:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40301c:	f042 0201 	orr.w	r2, r2, #1
  403020:	604a      	str	r2, [r1, #4]
  403022:	4628      	mov	r0, r5
  403024:	60f3      	str	r3, [r6, #12]
  403026:	609e      	str	r6, [r3, #8]
  403028:	f000 fa16 	bl	403458 <__malloc_unlock>
  40302c:	e6bc      	b.n	402da8 <_malloc_r+0x18c>
  40302e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403032:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403036:	00c3      	lsls	r3, r0, #3
  403038:	e612      	b.n	402c60 <_malloc_r+0x44>
  40303a:	099a      	lsrs	r2, r3, #6
  40303c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403040:	00c9      	lsls	r1, r1, #3
  403042:	3238      	adds	r2, #56	; 0x38
  403044:	e7a4      	b.n	402f90 <_malloc_r+0x374>
  403046:	42bc      	cmp	r4, r7
  403048:	d054      	beq.n	4030f4 <_malloc_r+0x4d8>
  40304a:	68bc      	ldr	r4, [r7, #8]
  40304c:	6862      	ldr	r2, [r4, #4]
  40304e:	f022 0203 	bic.w	r2, r2, #3
  403052:	e75d      	b.n	402f10 <_malloc_r+0x2f4>
  403054:	f859 3908 	ldr.w	r3, [r9], #-8
  403058:	4599      	cmp	r9, r3
  40305a:	f040 8086 	bne.w	40316a <_malloc_r+0x54e>
  40305e:	f010 0f03 	tst.w	r0, #3
  403062:	f100 30ff 	add.w	r0, r0, #4294967295
  403066:	d1f5      	bne.n	403054 <_malloc_r+0x438>
  403068:	687b      	ldr	r3, [r7, #4]
  40306a:	ea23 0304 	bic.w	r3, r3, r4
  40306e:	607b      	str	r3, [r7, #4]
  403070:	0064      	lsls	r4, r4, #1
  403072:	429c      	cmp	r4, r3
  403074:	f63f aec7 	bhi.w	402e06 <_malloc_r+0x1ea>
  403078:	2c00      	cmp	r4, #0
  40307a:	f43f aec4 	beq.w	402e06 <_malloc_r+0x1ea>
  40307e:	421c      	tst	r4, r3
  403080:	4640      	mov	r0, r8
  403082:	f47f ae3e 	bne.w	402d02 <_malloc_r+0xe6>
  403086:	0064      	lsls	r4, r4, #1
  403088:	421c      	tst	r4, r3
  40308a:	f100 0004 	add.w	r0, r0, #4
  40308e:	d0fa      	beq.n	403086 <_malloc_r+0x46a>
  403090:	e637      	b.n	402d02 <_malloc_r+0xe6>
  403092:	468c      	mov	ip, r1
  403094:	e78c      	b.n	402fb0 <_malloc_r+0x394>
  403096:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40309a:	d815      	bhi.n	4030c8 <_malloc_r+0x4ac>
  40309c:	0bf3      	lsrs	r3, r6, #15
  40309e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4030a2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4030a6:	00c3      	lsls	r3, r0, #3
  4030a8:	e5da      	b.n	402c60 <_malloc_r+0x44>
  4030aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4030ae:	e6ed      	b.n	402e8c <_malloc_r+0x270>
  4030b0:	687b      	ldr	r3, [r7, #4]
  4030b2:	1092      	asrs	r2, r2, #2
  4030b4:	2101      	movs	r1, #1
  4030b6:	fa01 f202 	lsl.w	r2, r1, r2
  4030ba:	4313      	orrs	r3, r2
  4030bc:	607b      	str	r3, [r7, #4]
  4030be:	4662      	mov	r2, ip
  4030c0:	e779      	b.n	402fb6 <_malloc_r+0x39a>
  4030c2:	2301      	movs	r3, #1
  4030c4:	6053      	str	r3, [r2, #4]
  4030c6:	e729      	b.n	402f1c <_malloc_r+0x300>
  4030c8:	f240 5254 	movw	r2, #1364	; 0x554
  4030cc:	4293      	cmp	r3, r2
  4030ce:	d822      	bhi.n	403116 <_malloc_r+0x4fa>
  4030d0:	0cb3      	lsrs	r3, r6, #18
  4030d2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4030d6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4030da:	00c3      	lsls	r3, r0, #3
  4030dc:	e5c0      	b.n	402c60 <_malloc_r+0x44>
  4030de:	f103 0b10 	add.w	fp, r3, #16
  4030e2:	e6ae      	b.n	402e42 <_malloc_r+0x226>
  4030e4:	2a54      	cmp	r2, #84	; 0x54
  4030e6:	d829      	bhi.n	40313c <_malloc_r+0x520>
  4030e8:	0b1a      	lsrs	r2, r3, #12
  4030ea:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4030ee:	00c9      	lsls	r1, r1, #3
  4030f0:	326e      	adds	r2, #110	; 0x6e
  4030f2:	e74d      	b.n	402f90 <_malloc_r+0x374>
  4030f4:	4b20      	ldr	r3, [pc, #128]	; (403178 <_malloc_r+0x55c>)
  4030f6:	6819      	ldr	r1, [r3, #0]
  4030f8:	4459      	add	r1, fp
  4030fa:	6019      	str	r1, [r3, #0]
  4030fc:	e6b2      	b.n	402e64 <_malloc_r+0x248>
  4030fe:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403102:	2800      	cmp	r0, #0
  403104:	f47f aeae 	bne.w	402e64 <_malloc_r+0x248>
  403108:	eb08 030b 	add.w	r3, r8, fp
  40310c:	68ba      	ldr	r2, [r7, #8]
  40310e:	f043 0301 	orr.w	r3, r3, #1
  403112:	6053      	str	r3, [r2, #4]
  403114:	e6ee      	b.n	402ef4 <_malloc_r+0x2d8>
  403116:	207f      	movs	r0, #127	; 0x7f
  403118:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40311c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403120:	e59e      	b.n	402c60 <_malloc_r+0x44>
  403122:	f104 0108 	add.w	r1, r4, #8
  403126:	4628      	mov	r0, r5
  403128:	9300      	str	r3, [sp, #0]
  40312a:	f7ff fa59 	bl	4025e0 <_free_r>
  40312e:	9b00      	ldr	r3, [sp, #0]
  403130:	6819      	ldr	r1, [r3, #0]
  403132:	e6df      	b.n	402ef4 <_malloc_r+0x2d8>
  403134:	2001      	movs	r0, #1
  403136:	f04f 0900 	mov.w	r9, #0
  40313a:	e6bc      	b.n	402eb6 <_malloc_r+0x29a>
  40313c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403140:	d805      	bhi.n	40314e <_malloc_r+0x532>
  403142:	0bda      	lsrs	r2, r3, #15
  403144:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403148:	00c9      	lsls	r1, r1, #3
  40314a:	3277      	adds	r2, #119	; 0x77
  40314c:	e720      	b.n	402f90 <_malloc_r+0x374>
  40314e:	f240 5154 	movw	r1, #1364	; 0x554
  403152:	428a      	cmp	r2, r1
  403154:	d805      	bhi.n	403162 <_malloc_r+0x546>
  403156:	0c9a      	lsrs	r2, r3, #18
  403158:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40315c:	00c9      	lsls	r1, r1, #3
  40315e:	327c      	adds	r2, #124	; 0x7c
  403160:	e716      	b.n	402f90 <_malloc_r+0x374>
  403162:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403166:	227e      	movs	r2, #126	; 0x7e
  403168:	e712      	b.n	402f90 <_malloc_r+0x374>
  40316a:	687b      	ldr	r3, [r7, #4]
  40316c:	e780      	b.n	403070 <_malloc_r+0x454>
  40316e:	08f0      	lsrs	r0, r6, #3
  403170:	f106 0308 	add.w	r3, r6, #8
  403174:	e600      	b.n	402d78 <_malloc_r+0x15c>
  403176:	bf00      	nop
  403178:	20000a78 	.word	0x20000a78

0040317c <__ascii_mbtowc>:
  40317c:	b082      	sub	sp, #8
  40317e:	b149      	cbz	r1, 403194 <__ascii_mbtowc+0x18>
  403180:	b15a      	cbz	r2, 40319a <__ascii_mbtowc+0x1e>
  403182:	b16b      	cbz	r3, 4031a0 <__ascii_mbtowc+0x24>
  403184:	7813      	ldrb	r3, [r2, #0]
  403186:	600b      	str	r3, [r1, #0]
  403188:	7812      	ldrb	r2, [r2, #0]
  40318a:	1c10      	adds	r0, r2, #0
  40318c:	bf18      	it	ne
  40318e:	2001      	movne	r0, #1
  403190:	b002      	add	sp, #8
  403192:	4770      	bx	lr
  403194:	a901      	add	r1, sp, #4
  403196:	2a00      	cmp	r2, #0
  403198:	d1f3      	bne.n	403182 <__ascii_mbtowc+0x6>
  40319a:	4610      	mov	r0, r2
  40319c:	b002      	add	sp, #8
  40319e:	4770      	bx	lr
  4031a0:	f06f 0001 	mvn.w	r0, #1
  4031a4:	e7f4      	b.n	403190 <__ascii_mbtowc+0x14>
  4031a6:	bf00      	nop
	...

004031b0 <memchr>:
  4031b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4031b4:	2a10      	cmp	r2, #16
  4031b6:	db2b      	blt.n	403210 <memchr+0x60>
  4031b8:	f010 0f07 	tst.w	r0, #7
  4031bc:	d008      	beq.n	4031d0 <memchr+0x20>
  4031be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4031c2:	3a01      	subs	r2, #1
  4031c4:	428b      	cmp	r3, r1
  4031c6:	d02d      	beq.n	403224 <memchr+0x74>
  4031c8:	f010 0f07 	tst.w	r0, #7
  4031cc:	b342      	cbz	r2, 403220 <memchr+0x70>
  4031ce:	d1f6      	bne.n	4031be <memchr+0xe>
  4031d0:	b4f0      	push	{r4, r5, r6, r7}
  4031d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4031d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4031da:	f022 0407 	bic.w	r4, r2, #7
  4031de:	f07f 0700 	mvns.w	r7, #0
  4031e2:	2300      	movs	r3, #0
  4031e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4031e8:	3c08      	subs	r4, #8
  4031ea:	ea85 0501 	eor.w	r5, r5, r1
  4031ee:	ea86 0601 	eor.w	r6, r6, r1
  4031f2:	fa85 f547 	uadd8	r5, r5, r7
  4031f6:	faa3 f587 	sel	r5, r3, r7
  4031fa:	fa86 f647 	uadd8	r6, r6, r7
  4031fe:	faa5 f687 	sel	r6, r5, r7
  403202:	b98e      	cbnz	r6, 403228 <memchr+0x78>
  403204:	d1ee      	bne.n	4031e4 <memchr+0x34>
  403206:	bcf0      	pop	{r4, r5, r6, r7}
  403208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40320c:	f002 0207 	and.w	r2, r2, #7
  403210:	b132      	cbz	r2, 403220 <memchr+0x70>
  403212:	f810 3b01 	ldrb.w	r3, [r0], #1
  403216:	3a01      	subs	r2, #1
  403218:	ea83 0301 	eor.w	r3, r3, r1
  40321c:	b113      	cbz	r3, 403224 <memchr+0x74>
  40321e:	d1f8      	bne.n	403212 <memchr+0x62>
  403220:	2000      	movs	r0, #0
  403222:	4770      	bx	lr
  403224:	3801      	subs	r0, #1
  403226:	4770      	bx	lr
  403228:	2d00      	cmp	r5, #0
  40322a:	bf06      	itte	eq
  40322c:	4635      	moveq	r5, r6
  40322e:	3803      	subeq	r0, #3
  403230:	3807      	subne	r0, #7
  403232:	f015 0f01 	tst.w	r5, #1
  403236:	d107      	bne.n	403248 <memchr+0x98>
  403238:	3001      	adds	r0, #1
  40323a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40323e:	bf02      	ittt	eq
  403240:	3001      	addeq	r0, #1
  403242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403246:	3001      	addeq	r0, #1
  403248:	bcf0      	pop	{r4, r5, r6, r7}
  40324a:	3801      	subs	r0, #1
  40324c:	4770      	bx	lr
  40324e:	bf00      	nop

00403250 <memcpy>:
  403250:	4684      	mov	ip, r0
  403252:	ea41 0300 	orr.w	r3, r1, r0
  403256:	f013 0303 	ands.w	r3, r3, #3
  40325a:	d16d      	bne.n	403338 <memcpy+0xe8>
  40325c:	3a40      	subs	r2, #64	; 0x40
  40325e:	d341      	bcc.n	4032e4 <memcpy+0x94>
  403260:	f851 3b04 	ldr.w	r3, [r1], #4
  403264:	f840 3b04 	str.w	r3, [r0], #4
  403268:	f851 3b04 	ldr.w	r3, [r1], #4
  40326c:	f840 3b04 	str.w	r3, [r0], #4
  403270:	f851 3b04 	ldr.w	r3, [r1], #4
  403274:	f840 3b04 	str.w	r3, [r0], #4
  403278:	f851 3b04 	ldr.w	r3, [r1], #4
  40327c:	f840 3b04 	str.w	r3, [r0], #4
  403280:	f851 3b04 	ldr.w	r3, [r1], #4
  403284:	f840 3b04 	str.w	r3, [r0], #4
  403288:	f851 3b04 	ldr.w	r3, [r1], #4
  40328c:	f840 3b04 	str.w	r3, [r0], #4
  403290:	f851 3b04 	ldr.w	r3, [r1], #4
  403294:	f840 3b04 	str.w	r3, [r0], #4
  403298:	f851 3b04 	ldr.w	r3, [r1], #4
  40329c:	f840 3b04 	str.w	r3, [r0], #4
  4032a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032a4:	f840 3b04 	str.w	r3, [r0], #4
  4032a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032ac:	f840 3b04 	str.w	r3, [r0], #4
  4032b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032b4:	f840 3b04 	str.w	r3, [r0], #4
  4032b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032bc:	f840 3b04 	str.w	r3, [r0], #4
  4032c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032c4:	f840 3b04 	str.w	r3, [r0], #4
  4032c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032cc:	f840 3b04 	str.w	r3, [r0], #4
  4032d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032d4:	f840 3b04 	str.w	r3, [r0], #4
  4032d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032dc:	f840 3b04 	str.w	r3, [r0], #4
  4032e0:	3a40      	subs	r2, #64	; 0x40
  4032e2:	d2bd      	bcs.n	403260 <memcpy+0x10>
  4032e4:	3230      	adds	r2, #48	; 0x30
  4032e6:	d311      	bcc.n	40330c <memcpy+0xbc>
  4032e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032ec:	f840 3b04 	str.w	r3, [r0], #4
  4032f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032f4:	f840 3b04 	str.w	r3, [r0], #4
  4032f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032fc:	f840 3b04 	str.w	r3, [r0], #4
  403300:	f851 3b04 	ldr.w	r3, [r1], #4
  403304:	f840 3b04 	str.w	r3, [r0], #4
  403308:	3a10      	subs	r2, #16
  40330a:	d2ed      	bcs.n	4032e8 <memcpy+0x98>
  40330c:	320c      	adds	r2, #12
  40330e:	d305      	bcc.n	40331c <memcpy+0xcc>
  403310:	f851 3b04 	ldr.w	r3, [r1], #4
  403314:	f840 3b04 	str.w	r3, [r0], #4
  403318:	3a04      	subs	r2, #4
  40331a:	d2f9      	bcs.n	403310 <memcpy+0xc0>
  40331c:	3204      	adds	r2, #4
  40331e:	d008      	beq.n	403332 <memcpy+0xe2>
  403320:	07d2      	lsls	r2, r2, #31
  403322:	bf1c      	itt	ne
  403324:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403328:	f800 3b01 	strbne.w	r3, [r0], #1
  40332c:	d301      	bcc.n	403332 <memcpy+0xe2>
  40332e:	880b      	ldrh	r3, [r1, #0]
  403330:	8003      	strh	r3, [r0, #0]
  403332:	4660      	mov	r0, ip
  403334:	4770      	bx	lr
  403336:	bf00      	nop
  403338:	2a08      	cmp	r2, #8
  40333a:	d313      	bcc.n	403364 <memcpy+0x114>
  40333c:	078b      	lsls	r3, r1, #30
  40333e:	d08d      	beq.n	40325c <memcpy+0xc>
  403340:	f010 0303 	ands.w	r3, r0, #3
  403344:	d08a      	beq.n	40325c <memcpy+0xc>
  403346:	f1c3 0304 	rsb	r3, r3, #4
  40334a:	1ad2      	subs	r2, r2, r3
  40334c:	07db      	lsls	r3, r3, #31
  40334e:	bf1c      	itt	ne
  403350:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403354:	f800 3b01 	strbne.w	r3, [r0], #1
  403358:	d380      	bcc.n	40325c <memcpy+0xc>
  40335a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40335e:	f820 3b02 	strh.w	r3, [r0], #2
  403362:	e77b      	b.n	40325c <memcpy+0xc>
  403364:	3a04      	subs	r2, #4
  403366:	d3d9      	bcc.n	40331c <memcpy+0xcc>
  403368:	3a01      	subs	r2, #1
  40336a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40336e:	f800 3b01 	strb.w	r3, [r0], #1
  403372:	d2f9      	bcs.n	403368 <memcpy+0x118>
  403374:	780b      	ldrb	r3, [r1, #0]
  403376:	7003      	strb	r3, [r0, #0]
  403378:	784b      	ldrb	r3, [r1, #1]
  40337a:	7043      	strb	r3, [r0, #1]
  40337c:	788b      	ldrb	r3, [r1, #2]
  40337e:	7083      	strb	r3, [r0, #2]
  403380:	4660      	mov	r0, ip
  403382:	4770      	bx	lr

00403384 <memmove>:
  403384:	4288      	cmp	r0, r1
  403386:	b5f0      	push	{r4, r5, r6, r7, lr}
  403388:	d90d      	bls.n	4033a6 <memmove+0x22>
  40338a:	188b      	adds	r3, r1, r2
  40338c:	4298      	cmp	r0, r3
  40338e:	d20a      	bcs.n	4033a6 <memmove+0x22>
  403390:	1884      	adds	r4, r0, r2
  403392:	2a00      	cmp	r2, #0
  403394:	d051      	beq.n	40343a <memmove+0xb6>
  403396:	4622      	mov	r2, r4
  403398:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40339c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4033a0:	4299      	cmp	r1, r3
  4033a2:	d1f9      	bne.n	403398 <memmove+0x14>
  4033a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4033a6:	2a0f      	cmp	r2, #15
  4033a8:	d948      	bls.n	40343c <memmove+0xb8>
  4033aa:	ea41 0300 	orr.w	r3, r1, r0
  4033ae:	079b      	lsls	r3, r3, #30
  4033b0:	d146      	bne.n	403440 <memmove+0xbc>
  4033b2:	f100 0410 	add.w	r4, r0, #16
  4033b6:	f101 0310 	add.w	r3, r1, #16
  4033ba:	4615      	mov	r5, r2
  4033bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4033c0:	f844 6c10 	str.w	r6, [r4, #-16]
  4033c4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4033c8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4033cc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4033d0:	f844 6c08 	str.w	r6, [r4, #-8]
  4033d4:	3d10      	subs	r5, #16
  4033d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4033da:	f844 6c04 	str.w	r6, [r4, #-4]
  4033de:	2d0f      	cmp	r5, #15
  4033e0:	f103 0310 	add.w	r3, r3, #16
  4033e4:	f104 0410 	add.w	r4, r4, #16
  4033e8:	d8e8      	bhi.n	4033bc <memmove+0x38>
  4033ea:	f1a2 0310 	sub.w	r3, r2, #16
  4033ee:	f023 030f 	bic.w	r3, r3, #15
  4033f2:	f002 0e0f 	and.w	lr, r2, #15
  4033f6:	3310      	adds	r3, #16
  4033f8:	f1be 0f03 	cmp.w	lr, #3
  4033fc:	4419      	add	r1, r3
  4033fe:	4403      	add	r3, r0
  403400:	d921      	bls.n	403446 <memmove+0xc2>
  403402:	1f1e      	subs	r6, r3, #4
  403404:	460d      	mov	r5, r1
  403406:	4674      	mov	r4, lr
  403408:	3c04      	subs	r4, #4
  40340a:	f855 7b04 	ldr.w	r7, [r5], #4
  40340e:	f846 7f04 	str.w	r7, [r6, #4]!
  403412:	2c03      	cmp	r4, #3
  403414:	d8f8      	bhi.n	403408 <memmove+0x84>
  403416:	f1ae 0404 	sub.w	r4, lr, #4
  40341a:	f024 0403 	bic.w	r4, r4, #3
  40341e:	3404      	adds	r4, #4
  403420:	4421      	add	r1, r4
  403422:	4423      	add	r3, r4
  403424:	f002 0203 	and.w	r2, r2, #3
  403428:	b162      	cbz	r2, 403444 <memmove+0xc0>
  40342a:	3b01      	subs	r3, #1
  40342c:	440a      	add	r2, r1
  40342e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403432:	f803 4f01 	strb.w	r4, [r3, #1]!
  403436:	428a      	cmp	r2, r1
  403438:	d1f9      	bne.n	40342e <memmove+0xaa>
  40343a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40343c:	4603      	mov	r3, r0
  40343e:	e7f3      	b.n	403428 <memmove+0xa4>
  403440:	4603      	mov	r3, r0
  403442:	e7f2      	b.n	40342a <memmove+0xa6>
  403444:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403446:	4672      	mov	r2, lr
  403448:	e7ee      	b.n	403428 <memmove+0xa4>
  40344a:	bf00      	nop

0040344c <__malloc_lock>:
  40344c:	4801      	ldr	r0, [pc, #4]	; (403454 <__malloc_lock+0x8>)
  40344e:	f7ff bb61 	b.w	402b14 <__retarget_lock_acquire_recursive>
  403452:	bf00      	nop
  403454:	20008dc8 	.word	0x20008dc8

00403458 <__malloc_unlock>:
  403458:	4801      	ldr	r0, [pc, #4]	; (403460 <__malloc_unlock+0x8>)
  40345a:	f7ff bb5d 	b.w	402b18 <__retarget_lock_release_recursive>
  40345e:	bf00      	nop
  403460:	20008dc8 	.word	0x20008dc8

00403464 <_realloc_r>:
  403464:	2900      	cmp	r1, #0
  403466:	f000 8095 	beq.w	403594 <_realloc_r+0x130>
  40346a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40346e:	460d      	mov	r5, r1
  403470:	4616      	mov	r6, r2
  403472:	b083      	sub	sp, #12
  403474:	4680      	mov	r8, r0
  403476:	f106 070b 	add.w	r7, r6, #11
  40347a:	f7ff ffe7 	bl	40344c <__malloc_lock>
  40347e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403482:	2f16      	cmp	r7, #22
  403484:	f02e 0403 	bic.w	r4, lr, #3
  403488:	f1a5 0908 	sub.w	r9, r5, #8
  40348c:	d83c      	bhi.n	403508 <_realloc_r+0xa4>
  40348e:	2210      	movs	r2, #16
  403490:	4617      	mov	r7, r2
  403492:	42be      	cmp	r6, r7
  403494:	d83d      	bhi.n	403512 <_realloc_r+0xae>
  403496:	4294      	cmp	r4, r2
  403498:	da43      	bge.n	403522 <_realloc_r+0xbe>
  40349a:	4bc4      	ldr	r3, [pc, #784]	; (4037ac <_realloc_r+0x348>)
  40349c:	6899      	ldr	r1, [r3, #8]
  40349e:	eb09 0004 	add.w	r0, r9, r4
  4034a2:	4288      	cmp	r0, r1
  4034a4:	f000 80b4 	beq.w	403610 <_realloc_r+0x1ac>
  4034a8:	6843      	ldr	r3, [r0, #4]
  4034aa:	f023 0101 	bic.w	r1, r3, #1
  4034ae:	4401      	add	r1, r0
  4034b0:	6849      	ldr	r1, [r1, #4]
  4034b2:	07c9      	lsls	r1, r1, #31
  4034b4:	d54c      	bpl.n	403550 <_realloc_r+0xec>
  4034b6:	f01e 0f01 	tst.w	lr, #1
  4034ba:	f000 809b 	beq.w	4035f4 <_realloc_r+0x190>
  4034be:	4631      	mov	r1, r6
  4034c0:	4640      	mov	r0, r8
  4034c2:	f7ff fbab 	bl	402c1c <_malloc_r>
  4034c6:	4606      	mov	r6, r0
  4034c8:	2800      	cmp	r0, #0
  4034ca:	d03a      	beq.n	403542 <_realloc_r+0xde>
  4034cc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4034d0:	f023 0301 	bic.w	r3, r3, #1
  4034d4:	444b      	add	r3, r9
  4034d6:	f1a0 0208 	sub.w	r2, r0, #8
  4034da:	429a      	cmp	r2, r3
  4034dc:	f000 8121 	beq.w	403722 <_realloc_r+0x2be>
  4034e0:	1f22      	subs	r2, r4, #4
  4034e2:	2a24      	cmp	r2, #36	; 0x24
  4034e4:	f200 8107 	bhi.w	4036f6 <_realloc_r+0x292>
  4034e8:	2a13      	cmp	r2, #19
  4034ea:	f200 80db 	bhi.w	4036a4 <_realloc_r+0x240>
  4034ee:	4603      	mov	r3, r0
  4034f0:	462a      	mov	r2, r5
  4034f2:	6811      	ldr	r1, [r2, #0]
  4034f4:	6019      	str	r1, [r3, #0]
  4034f6:	6851      	ldr	r1, [r2, #4]
  4034f8:	6059      	str	r1, [r3, #4]
  4034fa:	6892      	ldr	r2, [r2, #8]
  4034fc:	609a      	str	r2, [r3, #8]
  4034fe:	4629      	mov	r1, r5
  403500:	4640      	mov	r0, r8
  403502:	f7ff f86d 	bl	4025e0 <_free_r>
  403506:	e01c      	b.n	403542 <_realloc_r+0xde>
  403508:	f027 0707 	bic.w	r7, r7, #7
  40350c:	2f00      	cmp	r7, #0
  40350e:	463a      	mov	r2, r7
  403510:	dabf      	bge.n	403492 <_realloc_r+0x2e>
  403512:	2600      	movs	r6, #0
  403514:	230c      	movs	r3, #12
  403516:	4630      	mov	r0, r6
  403518:	f8c8 3000 	str.w	r3, [r8]
  40351c:	b003      	add	sp, #12
  40351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403522:	462e      	mov	r6, r5
  403524:	1be3      	subs	r3, r4, r7
  403526:	2b0f      	cmp	r3, #15
  403528:	d81e      	bhi.n	403568 <_realloc_r+0x104>
  40352a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40352e:	f003 0301 	and.w	r3, r3, #1
  403532:	4323      	orrs	r3, r4
  403534:	444c      	add	r4, r9
  403536:	f8c9 3004 	str.w	r3, [r9, #4]
  40353a:	6863      	ldr	r3, [r4, #4]
  40353c:	f043 0301 	orr.w	r3, r3, #1
  403540:	6063      	str	r3, [r4, #4]
  403542:	4640      	mov	r0, r8
  403544:	f7ff ff88 	bl	403458 <__malloc_unlock>
  403548:	4630      	mov	r0, r6
  40354a:	b003      	add	sp, #12
  40354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403550:	f023 0303 	bic.w	r3, r3, #3
  403554:	18e1      	adds	r1, r4, r3
  403556:	4291      	cmp	r1, r2
  403558:	db1f      	blt.n	40359a <_realloc_r+0x136>
  40355a:	68c3      	ldr	r3, [r0, #12]
  40355c:	6882      	ldr	r2, [r0, #8]
  40355e:	462e      	mov	r6, r5
  403560:	60d3      	str	r3, [r2, #12]
  403562:	460c      	mov	r4, r1
  403564:	609a      	str	r2, [r3, #8]
  403566:	e7dd      	b.n	403524 <_realloc_r+0xc0>
  403568:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40356c:	eb09 0107 	add.w	r1, r9, r7
  403570:	f002 0201 	and.w	r2, r2, #1
  403574:	444c      	add	r4, r9
  403576:	f043 0301 	orr.w	r3, r3, #1
  40357a:	4317      	orrs	r7, r2
  40357c:	f8c9 7004 	str.w	r7, [r9, #4]
  403580:	604b      	str	r3, [r1, #4]
  403582:	6863      	ldr	r3, [r4, #4]
  403584:	f043 0301 	orr.w	r3, r3, #1
  403588:	3108      	adds	r1, #8
  40358a:	6063      	str	r3, [r4, #4]
  40358c:	4640      	mov	r0, r8
  40358e:	f7ff f827 	bl	4025e0 <_free_r>
  403592:	e7d6      	b.n	403542 <_realloc_r+0xde>
  403594:	4611      	mov	r1, r2
  403596:	f7ff bb41 	b.w	402c1c <_malloc_r>
  40359a:	f01e 0f01 	tst.w	lr, #1
  40359e:	d18e      	bne.n	4034be <_realloc_r+0x5a>
  4035a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4035a4:	eba9 0a01 	sub.w	sl, r9, r1
  4035a8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4035ac:	f021 0103 	bic.w	r1, r1, #3
  4035b0:	440b      	add	r3, r1
  4035b2:	4423      	add	r3, r4
  4035b4:	4293      	cmp	r3, r2
  4035b6:	db25      	blt.n	403604 <_realloc_r+0x1a0>
  4035b8:	68c2      	ldr	r2, [r0, #12]
  4035ba:	6881      	ldr	r1, [r0, #8]
  4035bc:	4656      	mov	r6, sl
  4035be:	60ca      	str	r2, [r1, #12]
  4035c0:	6091      	str	r1, [r2, #8]
  4035c2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4035c6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4035ca:	1f22      	subs	r2, r4, #4
  4035cc:	2a24      	cmp	r2, #36	; 0x24
  4035ce:	60c1      	str	r1, [r0, #12]
  4035d0:	6088      	str	r0, [r1, #8]
  4035d2:	f200 8094 	bhi.w	4036fe <_realloc_r+0x29a>
  4035d6:	2a13      	cmp	r2, #19
  4035d8:	d96f      	bls.n	4036ba <_realloc_r+0x256>
  4035da:	6829      	ldr	r1, [r5, #0]
  4035dc:	f8ca 1008 	str.w	r1, [sl, #8]
  4035e0:	6869      	ldr	r1, [r5, #4]
  4035e2:	f8ca 100c 	str.w	r1, [sl, #12]
  4035e6:	2a1b      	cmp	r2, #27
  4035e8:	f200 80a2 	bhi.w	403730 <_realloc_r+0x2cc>
  4035ec:	3508      	adds	r5, #8
  4035ee:	f10a 0210 	add.w	r2, sl, #16
  4035f2:	e063      	b.n	4036bc <_realloc_r+0x258>
  4035f4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4035f8:	eba9 0a03 	sub.w	sl, r9, r3
  4035fc:	f8da 1004 	ldr.w	r1, [sl, #4]
  403600:	f021 0103 	bic.w	r1, r1, #3
  403604:	1863      	adds	r3, r4, r1
  403606:	4293      	cmp	r3, r2
  403608:	f6ff af59 	blt.w	4034be <_realloc_r+0x5a>
  40360c:	4656      	mov	r6, sl
  40360e:	e7d8      	b.n	4035c2 <_realloc_r+0x15e>
  403610:	6841      	ldr	r1, [r0, #4]
  403612:	f021 0b03 	bic.w	fp, r1, #3
  403616:	44a3      	add	fp, r4
  403618:	f107 0010 	add.w	r0, r7, #16
  40361c:	4583      	cmp	fp, r0
  40361e:	da56      	bge.n	4036ce <_realloc_r+0x26a>
  403620:	f01e 0f01 	tst.w	lr, #1
  403624:	f47f af4b 	bne.w	4034be <_realloc_r+0x5a>
  403628:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40362c:	eba9 0a01 	sub.w	sl, r9, r1
  403630:	f8da 1004 	ldr.w	r1, [sl, #4]
  403634:	f021 0103 	bic.w	r1, r1, #3
  403638:	448b      	add	fp, r1
  40363a:	4558      	cmp	r0, fp
  40363c:	dce2      	bgt.n	403604 <_realloc_r+0x1a0>
  40363e:	4656      	mov	r6, sl
  403640:	f8da 100c 	ldr.w	r1, [sl, #12]
  403644:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403648:	1f22      	subs	r2, r4, #4
  40364a:	2a24      	cmp	r2, #36	; 0x24
  40364c:	60c1      	str	r1, [r0, #12]
  40364e:	6088      	str	r0, [r1, #8]
  403650:	f200 808f 	bhi.w	403772 <_realloc_r+0x30e>
  403654:	2a13      	cmp	r2, #19
  403656:	f240 808a 	bls.w	40376e <_realloc_r+0x30a>
  40365a:	6829      	ldr	r1, [r5, #0]
  40365c:	f8ca 1008 	str.w	r1, [sl, #8]
  403660:	6869      	ldr	r1, [r5, #4]
  403662:	f8ca 100c 	str.w	r1, [sl, #12]
  403666:	2a1b      	cmp	r2, #27
  403668:	f200 808a 	bhi.w	403780 <_realloc_r+0x31c>
  40366c:	3508      	adds	r5, #8
  40366e:	f10a 0210 	add.w	r2, sl, #16
  403672:	6829      	ldr	r1, [r5, #0]
  403674:	6011      	str	r1, [r2, #0]
  403676:	6869      	ldr	r1, [r5, #4]
  403678:	6051      	str	r1, [r2, #4]
  40367a:	68a9      	ldr	r1, [r5, #8]
  40367c:	6091      	str	r1, [r2, #8]
  40367e:	eb0a 0107 	add.w	r1, sl, r7
  403682:	ebab 0207 	sub.w	r2, fp, r7
  403686:	f042 0201 	orr.w	r2, r2, #1
  40368a:	6099      	str	r1, [r3, #8]
  40368c:	604a      	str	r2, [r1, #4]
  40368e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403692:	f003 0301 	and.w	r3, r3, #1
  403696:	431f      	orrs	r7, r3
  403698:	4640      	mov	r0, r8
  40369a:	f8ca 7004 	str.w	r7, [sl, #4]
  40369e:	f7ff fedb 	bl	403458 <__malloc_unlock>
  4036a2:	e751      	b.n	403548 <_realloc_r+0xe4>
  4036a4:	682b      	ldr	r3, [r5, #0]
  4036a6:	6003      	str	r3, [r0, #0]
  4036a8:	686b      	ldr	r3, [r5, #4]
  4036aa:	6043      	str	r3, [r0, #4]
  4036ac:	2a1b      	cmp	r2, #27
  4036ae:	d82d      	bhi.n	40370c <_realloc_r+0x2a8>
  4036b0:	f100 0308 	add.w	r3, r0, #8
  4036b4:	f105 0208 	add.w	r2, r5, #8
  4036b8:	e71b      	b.n	4034f2 <_realloc_r+0x8e>
  4036ba:	4632      	mov	r2, r6
  4036bc:	6829      	ldr	r1, [r5, #0]
  4036be:	6011      	str	r1, [r2, #0]
  4036c0:	6869      	ldr	r1, [r5, #4]
  4036c2:	6051      	str	r1, [r2, #4]
  4036c4:	68a9      	ldr	r1, [r5, #8]
  4036c6:	6091      	str	r1, [r2, #8]
  4036c8:	461c      	mov	r4, r3
  4036ca:	46d1      	mov	r9, sl
  4036cc:	e72a      	b.n	403524 <_realloc_r+0xc0>
  4036ce:	eb09 0107 	add.w	r1, r9, r7
  4036d2:	ebab 0b07 	sub.w	fp, fp, r7
  4036d6:	f04b 0201 	orr.w	r2, fp, #1
  4036da:	6099      	str	r1, [r3, #8]
  4036dc:	604a      	str	r2, [r1, #4]
  4036de:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4036e2:	f003 0301 	and.w	r3, r3, #1
  4036e6:	431f      	orrs	r7, r3
  4036e8:	4640      	mov	r0, r8
  4036ea:	f845 7c04 	str.w	r7, [r5, #-4]
  4036ee:	f7ff feb3 	bl	403458 <__malloc_unlock>
  4036f2:	462e      	mov	r6, r5
  4036f4:	e728      	b.n	403548 <_realloc_r+0xe4>
  4036f6:	4629      	mov	r1, r5
  4036f8:	f7ff fe44 	bl	403384 <memmove>
  4036fc:	e6ff      	b.n	4034fe <_realloc_r+0x9a>
  4036fe:	4629      	mov	r1, r5
  403700:	4630      	mov	r0, r6
  403702:	461c      	mov	r4, r3
  403704:	46d1      	mov	r9, sl
  403706:	f7ff fe3d 	bl	403384 <memmove>
  40370a:	e70b      	b.n	403524 <_realloc_r+0xc0>
  40370c:	68ab      	ldr	r3, [r5, #8]
  40370e:	6083      	str	r3, [r0, #8]
  403710:	68eb      	ldr	r3, [r5, #12]
  403712:	60c3      	str	r3, [r0, #12]
  403714:	2a24      	cmp	r2, #36	; 0x24
  403716:	d017      	beq.n	403748 <_realloc_r+0x2e4>
  403718:	f100 0310 	add.w	r3, r0, #16
  40371c:	f105 0210 	add.w	r2, r5, #16
  403720:	e6e7      	b.n	4034f2 <_realloc_r+0x8e>
  403722:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403726:	f023 0303 	bic.w	r3, r3, #3
  40372a:	441c      	add	r4, r3
  40372c:	462e      	mov	r6, r5
  40372e:	e6f9      	b.n	403524 <_realloc_r+0xc0>
  403730:	68a9      	ldr	r1, [r5, #8]
  403732:	f8ca 1010 	str.w	r1, [sl, #16]
  403736:	68e9      	ldr	r1, [r5, #12]
  403738:	f8ca 1014 	str.w	r1, [sl, #20]
  40373c:	2a24      	cmp	r2, #36	; 0x24
  40373e:	d00c      	beq.n	40375a <_realloc_r+0x2f6>
  403740:	3510      	adds	r5, #16
  403742:	f10a 0218 	add.w	r2, sl, #24
  403746:	e7b9      	b.n	4036bc <_realloc_r+0x258>
  403748:	692b      	ldr	r3, [r5, #16]
  40374a:	6103      	str	r3, [r0, #16]
  40374c:	696b      	ldr	r3, [r5, #20]
  40374e:	6143      	str	r3, [r0, #20]
  403750:	f105 0218 	add.w	r2, r5, #24
  403754:	f100 0318 	add.w	r3, r0, #24
  403758:	e6cb      	b.n	4034f2 <_realloc_r+0x8e>
  40375a:	692a      	ldr	r2, [r5, #16]
  40375c:	f8ca 2018 	str.w	r2, [sl, #24]
  403760:	696a      	ldr	r2, [r5, #20]
  403762:	f8ca 201c 	str.w	r2, [sl, #28]
  403766:	3518      	adds	r5, #24
  403768:	f10a 0220 	add.w	r2, sl, #32
  40376c:	e7a6      	b.n	4036bc <_realloc_r+0x258>
  40376e:	4632      	mov	r2, r6
  403770:	e77f      	b.n	403672 <_realloc_r+0x20e>
  403772:	4629      	mov	r1, r5
  403774:	4630      	mov	r0, r6
  403776:	9301      	str	r3, [sp, #4]
  403778:	f7ff fe04 	bl	403384 <memmove>
  40377c:	9b01      	ldr	r3, [sp, #4]
  40377e:	e77e      	b.n	40367e <_realloc_r+0x21a>
  403780:	68a9      	ldr	r1, [r5, #8]
  403782:	f8ca 1010 	str.w	r1, [sl, #16]
  403786:	68e9      	ldr	r1, [r5, #12]
  403788:	f8ca 1014 	str.w	r1, [sl, #20]
  40378c:	2a24      	cmp	r2, #36	; 0x24
  40378e:	d003      	beq.n	403798 <_realloc_r+0x334>
  403790:	3510      	adds	r5, #16
  403792:	f10a 0218 	add.w	r2, sl, #24
  403796:	e76c      	b.n	403672 <_realloc_r+0x20e>
  403798:	692a      	ldr	r2, [r5, #16]
  40379a:	f8ca 2018 	str.w	r2, [sl, #24]
  40379e:	696a      	ldr	r2, [r5, #20]
  4037a0:	f8ca 201c 	str.w	r2, [sl, #28]
  4037a4:	3518      	adds	r5, #24
  4037a6:	f10a 0220 	add.w	r2, sl, #32
  4037aa:	e762      	b.n	403672 <_realloc_r+0x20e>
  4037ac:	200005a8 	.word	0x200005a8

004037b0 <_sbrk_r>:
  4037b0:	b538      	push	{r3, r4, r5, lr}
  4037b2:	4c07      	ldr	r4, [pc, #28]	; (4037d0 <_sbrk_r+0x20>)
  4037b4:	2300      	movs	r3, #0
  4037b6:	4605      	mov	r5, r0
  4037b8:	4608      	mov	r0, r1
  4037ba:	6023      	str	r3, [r4, #0]
  4037bc:	f7fd fa1c 	bl	400bf8 <_sbrk>
  4037c0:	1c43      	adds	r3, r0, #1
  4037c2:	d000      	beq.n	4037c6 <_sbrk_r+0x16>
  4037c4:	bd38      	pop	{r3, r4, r5, pc}
  4037c6:	6823      	ldr	r3, [r4, #0]
  4037c8:	2b00      	cmp	r3, #0
  4037ca:	d0fb      	beq.n	4037c4 <_sbrk_r+0x14>
  4037cc:	602b      	str	r3, [r5, #0]
  4037ce:	bd38      	pop	{r3, r4, r5, pc}
  4037d0:	20008ddc 	.word	0x20008ddc

004037d4 <__sread>:
  4037d4:	b510      	push	{r4, lr}
  4037d6:	460c      	mov	r4, r1
  4037d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037dc:	f000 fa76 	bl	403ccc <_read_r>
  4037e0:	2800      	cmp	r0, #0
  4037e2:	db03      	blt.n	4037ec <__sread+0x18>
  4037e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4037e6:	4403      	add	r3, r0
  4037e8:	6523      	str	r3, [r4, #80]	; 0x50
  4037ea:	bd10      	pop	{r4, pc}
  4037ec:	89a3      	ldrh	r3, [r4, #12]
  4037ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4037f2:	81a3      	strh	r3, [r4, #12]
  4037f4:	bd10      	pop	{r4, pc}
  4037f6:	bf00      	nop

004037f8 <__swrite>:
  4037f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4037fc:	4616      	mov	r6, r2
  4037fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403802:	461f      	mov	r7, r3
  403804:	05d3      	lsls	r3, r2, #23
  403806:	460c      	mov	r4, r1
  403808:	4605      	mov	r5, r0
  40380a:	d507      	bpl.n	40381c <__swrite+0x24>
  40380c:	2200      	movs	r2, #0
  40380e:	2302      	movs	r3, #2
  403810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403814:	f000 fa44 	bl	403ca0 <_lseek_r>
  403818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40381c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403820:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403824:	81a2      	strh	r2, [r4, #12]
  403826:	463b      	mov	r3, r7
  403828:	4632      	mov	r2, r6
  40382a:	4628      	mov	r0, r5
  40382c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403830:	f000 b924 	b.w	403a7c <_write_r>

00403834 <__sseek>:
  403834:	b510      	push	{r4, lr}
  403836:	460c      	mov	r4, r1
  403838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40383c:	f000 fa30 	bl	403ca0 <_lseek_r>
  403840:	89a3      	ldrh	r3, [r4, #12]
  403842:	1c42      	adds	r2, r0, #1
  403844:	bf0e      	itee	eq
  403846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40384a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40384e:	6520      	strne	r0, [r4, #80]	; 0x50
  403850:	81a3      	strh	r3, [r4, #12]
  403852:	bd10      	pop	{r4, pc}

00403854 <__sclose>:
  403854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403858:	f000 b988 	b.w	403b6c <_close_r>
	...

00403880 <strlen>:
  403880:	f890 f000 	pld	[r0]
  403884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403888:	f020 0107 	bic.w	r1, r0, #7
  40388c:	f06f 0c00 	mvn.w	ip, #0
  403890:	f010 0407 	ands.w	r4, r0, #7
  403894:	f891 f020 	pld	[r1, #32]
  403898:	f040 8049 	bne.w	40392e <strlen+0xae>
  40389c:	f04f 0400 	mov.w	r4, #0
  4038a0:	f06f 0007 	mvn.w	r0, #7
  4038a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4038a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4038ac:	f100 0008 	add.w	r0, r0, #8
  4038b0:	fa82 f24c 	uadd8	r2, r2, ip
  4038b4:	faa4 f28c 	sel	r2, r4, ip
  4038b8:	fa83 f34c 	uadd8	r3, r3, ip
  4038bc:	faa2 f38c 	sel	r3, r2, ip
  4038c0:	bb4b      	cbnz	r3, 403916 <strlen+0x96>
  4038c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4038c6:	fa82 f24c 	uadd8	r2, r2, ip
  4038ca:	f100 0008 	add.w	r0, r0, #8
  4038ce:	faa4 f28c 	sel	r2, r4, ip
  4038d2:	fa83 f34c 	uadd8	r3, r3, ip
  4038d6:	faa2 f38c 	sel	r3, r2, ip
  4038da:	b9e3      	cbnz	r3, 403916 <strlen+0x96>
  4038dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4038e0:	fa82 f24c 	uadd8	r2, r2, ip
  4038e4:	f100 0008 	add.w	r0, r0, #8
  4038e8:	faa4 f28c 	sel	r2, r4, ip
  4038ec:	fa83 f34c 	uadd8	r3, r3, ip
  4038f0:	faa2 f38c 	sel	r3, r2, ip
  4038f4:	b97b      	cbnz	r3, 403916 <strlen+0x96>
  4038f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4038fa:	f101 0120 	add.w	r1, r1, #32
  4038fe:	fa82 f24c 	uadd8	r2, r2, ip
  403902:	f100 0008 	add.w	r0, r0, #8
  403906:	faa4 f28c 	sel	r2, r4, ip
  40390a:	fa83 f34c 	uadd8	r3, r3, ip
  40390e:	faa2 f38c 	sel	r3, r2, ip
  403912:	2b00      	cmp	r3, #0
  403914:	d0c6      	beq.n	4038a4 <strlen+0x24>
  403916:	2a00      	cmp	r2, #0
  403918:	bf04      	itt	eq
  40391a:	3004      	addeq	r0, #4
  40391c:	461a      	moveq	r2, r3
  40391e:	ba12      	rev	r2, r2
  403920:	fab2 f282 	clz	r2, r2
  403924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40392c:	4770      	bx	lr
  40392e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403932:	f004 0503 	and.w	r5, r4, #3
  403936:	f1c4 0000 	rsb	r0, r4, #0
  40393a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40393e:	f014 0f04 	tst.w	r4, #4
  403942:	f891 f040 	pld	[r1, #64]	; 0x40
  403946:	fa0c f505 	lsl.w	r5, ip, r5
  40394a:	ea62 0205 	orn	r2, r2, r5
  40394e:	bf1c      	itt	ne
  403950:	ea63 0305 	ornne	r3, r3, r5
  403954:	4662      	movne	r2, ip
  403956:	f04f 0400 	mov.w	r4, #0
  40395a:	e7a9      	b.n	4038b0 <strlen+0x30>

0040395c <__swbuf_r>:
  40395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40395e:	460d      	mov	r5, r1
  403960:	4614      	mov	r4, r2
  403962:	4606      	mov	r6, r0
  403964:	b110      	cbz	r0, 40396c <__swbuf_r+0x10>
  403966:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403968:	2b00      	cmp	r3, #0
  40396a:	d04b      	beq.n	403a04 <__swbuf_r+0xa8>
  40396c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403970:	69a3      	ldr	r3, [r4, #24]
  403972:	60a3      	str	r3, [r4, #8]
  403974:	b291      	uxth	r1, r2
  403976:	0708      	lsls	r0, r1, #28
  403978:	d539      	bpl.n	4039ee <__swbuf_r+0x92>
  40397a:	6923      	ldr	r3, [r4, #16]
  40397c:	2b00      	cmp	r3, #0
  40397e:	d036      	beq.n	4039ee <__swbuf_r+0x92>
  403980:	b2ed      	uxtb	r5, r5
  403982:	0489      	lsls	r1, r1, #18
  403984:	462f      	mov	r7, r5
  403986:	d515      	bpl.n	4039b4 <__swbuf_r+0x58>
  403988:	6822      	ldr	r2, [r4, #0]
  40398a:	6961      	ldr	r1, [r4, #20]
  40398c:	1ad3      	subs	r3, r2, r3
  40398e:	428b      	cmp	r3, r1
  403990:	da1c      	bge.n	4039cc <__swbuf_r+0x70>
  403992:	3301      	adds	r3, #1
  403994:	68a1      	ldr	r1, [r4, #8]
  403996:	1c50      	adds	r0, r2, #1
  403998:	3901      	subs	r1, #1
  40399a:	60a1      	str	r1, [r4, #8]
  40399c:	6020      	str	r0, [r4, #0]
  40399e:	7015      	strb	r5, [r2, #0]
  4039a0:	6962      	ldr	r2, [r4, #20]
  4039a2:	429a      	cmp	r2, r3
  4039a4:	d01a      	beq.n	4039dc <__swbuf_r+0x80>
  4039a6:	89a3      	ldrh	r3, [r4, #12]
  4039a8:	07db      	lsls	r3, r3, #31
  4039aa:	d501      	bpl.n	4039b0 <__swbuf_r+0x54>
  4039ac:	2d0a      	cmp	r5, #10
  4039ae:	d015      	beq.n	4039dc <__swbuf_r+0x80>
  4039b0:	4638      	mov	r0, r7
  4039b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4039b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4039ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4039be:	81a2      	strh	r2, [r4, #12]
  4039c0:	6822      	ldr	r2, [r4, #0]
  4039c2:	6661      	str	r1, [r4, #100]	; 0x64
  4039c4:	6961      	ldr	r1, [r4, #20]
  4039c6:	1ad3      	subs	r3, r2, r3
  4039c8:	428b      	cmp	r3, r1
  4039ca:	dbe2      	blt.n	403992 <__swbuf_r+0x36>
  4039cc:	4621      	mov	r1, r4
  4039ce:	4630      	mov	r0, r6
  4039d0:	f7fe fc88 	bl	4022e4 <_fflush_r>
  4039d4:	b940      	cbnz	r0, 4039e8 <__swbuf_r+0x8c>
  4039d6:	6822      	ldr	r2, [r4, #0]
  4039d8:	2301      	movs	r3, #1
  4039da:	e7db      	b.n	403994 <__swbuf_r+0x38>
  4039dc:	4621      	mov	r1, r4
  4039de:	4630      	mov	r0, r6
  4039e0:	f7fe fc80 	bl	4022e4 <_fflush_r>
  4039e4:	2800      	cmp	r0, #0
  4039e6:	d0e3      	beq.n	4039b0 <__swbuf_r+0x54>
  4039e8:	f04f 37ff 	mov.w	r7, #4294967295
  4039ec:	e7e0      	b.n	4039b0 <__swbuf_r+0x54>
  4039ee:	4621      	mov	r1, r4
  4039f0:	4630      	mov	r0, r6
  4039f2:	f7fe fb63 	bl	4020bc <__swsetup_r>
  4039f6:	2800      	cmp	r0, #0
  4039f8:	d1f6      	bne.n	4039e8 <__swbuf_r+0x8c>
  4039fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4039fe:	6923      	ldr	r3, [r4, #16]
  403a00:	b291      	uxth	r1, r2
  403a02:	e7bd      	b.n	403980 <__swbuf_r+0x24>
  403a04:	f7fe fcc6 	bl	402394 <__sinit>
  403a08:	e7b0      	b.n	40396c <__swbuf_r+0x10>
  403a0a:	bf00      	nop

00403a0c <_wcrtomb_r>:
  403a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a0e:	4606      	mov	r6, r0
  403a10:	b085      	sub	sp, #20
  403a12:	461f      	mov	r7, r3
  403a14:	b189      	cbz	r1, 403a3a <_wcrtomb_r+0x2e>
  403a16:	4c10      	ldr	r4, [pc, #64]	; (403a58 <_wcrtomb_r+0x4c>)
  403a18:	4d10      	ldr	r5, [pc, #64]	; (403a5c <_wcrtomb_r+0x50>)
  403a1a:	6824      	ldr	r4, [r4, #0]
  403a1c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403a1e:	2c00      	cmp	r4, #0
  403a20:	bf08      	it	eq
  403a22:	462c      	moveq	r4, r5
  403a24:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403a28:	47a0      	blx	r4
  403a2a:	1c43      	adds	r3, r0, #1
  403a2c:	d103      	bne.n	403a36 <_wcrtomb_r+0x2a>
  403a2e:	2200      	movs	r2, #0
  403a30:	238a      	movs	r3, #138	; 0x8a
  403a32:	603a      	str	r2, [r7, #0]
  403a34:	6033      	str	r3, [r6, #0]
  403a36:	b005      	add	sp, #20
  403a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403a3a:	460c      	mov	r4, r1
  403a3c:	4906      	ldr	r1, [pc, #24]	; (403a58 <_wcrtomb_r+0x4c>)
  403a3e:	4a07      	ldr	r2, [pc, #28]	; (403a5c <_wcrtomb_r+0x50>)
  403a40:	6809      	ldr	r1, [r1, #0]
  403a42:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403a44:	2900      	cmp	r1, #0
  403a46:	bf08      	it	eq
  403a48:	4611      	moveq	r1, r2
  403a4a:	4622      	mov	r2, r4
  403a4c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403a50:	a901      	add	r1, sp, #4
  403a52:	47a0      	blx	r4
  403a54:	e7e9      	b.n	403a2a <_wcrtomb_r+0x1e>
  403a56:	bf00      	nop
  403a58:	20000008 	.word	0x20000008
  403a5c:	2000043c 	.word	0x2000043c

00403a60 <__ascii_wctomb>:
  403a60:	b121      	cbz	r1, 403a6c <__ascii_wctomb+0xc>
  403a62:	2aff      	cmp	r2, #255	; 0xff
  403a64:	d804      	bhi.n	403a70 <__ascii_wctomb+0x10>
  403a66:	700a      	strb	r2, [r1, #0]
  403a68:	2001      	movs	r0, #1
  403a6a:	4770      	bx	lr
  403a6c:	4608      	mov	r0, r1
  403a6e:	4770      	bx	lr
  403a70:	238a      	movs	r3, #138	; 0x8a
  403a72:	6003      	str	r3, [r0, #0]
  403a74:	f04f 30ff 	mov.w	r0, #4294967295
  403a78:	4770      	bx	lr
  403a7a:	bf00      	nop

00403a7c <_write_r>:
  403a7c:	b570      	push	{r4, r5, r6, lr}
  403a7e:	460d      	mov	r5, r1
  403a80:	4c08      	ldr	r4, [pc, #32]	; (403aa4 <_write_r+0x28>)
  403a82:	4611      	mov	r1, r2
  403a84:	4606      	mov	r6, r0
  403a86:	461a      	mov	r2, r3
  403a88:	4628      	mov	r0, r5
  403a8a:	2300      	movs	r3, #0
  403a8c:	6023      	str	r3, [r4, #0]
  403a8e:	f7fc fc53 	bl	400338 <_write>
  403a92:	1c43      	adds	r3, r0, #1
  403a94:	d000      	beq.n	403a98 <_write_r+0x1c>
  403a96:	bd70      	pop	{r4, r5, r6, pc}
  403a98:	6823      	ldr	r3, [r4, #0]
  403a9a:	2b00      	cmp	r3, #0
  403a9c:	d0fb      	beq.n	403a96 <_write_r+0x1a>
  403a9e:	6033      	str	r3, [r6, #0]
  403aa0:	bd70      	pop	{r4, r5, r6, pc}
  403aa2:	bf00      	nop
  403aa4:	20008ddc 	.word	0x20008ddc

00403aa8 <__register_exitproc>:
  403aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403aac:	4d2c      	ldr	r5, [pc, #176]	; (403b60 <__register_exitproc+0xb8>)
  403aae:	4606      	mov	r6, r0
  403ab0:	6828      	ldr	r0, [r5, #0]
  403ab2:	4698      	mov	r8, r3
  403ab4:	460f      	mov	r7, r1
  403ab6:	4691      	mov	r9, r2
  403ab8:	f7ff f82c 	bl	402b14 <__retarget_lock_acquire_recursive>
  403abc:	4b29      	ldr	r3, [pc, #164]	; (403b64 <__register_exitproc+0xbc>)
  403abe:	681c      	ldr	r4, [r3, #0]
  403ac0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403ac4:	2b00      	cmp	r3, #0
  403ac6:	d03e      	beq.n	403b46 <__register_exitproc+0x9e>
  403ac8:	685a      	ldr	r2, [r3, #4]
  403aca:	2a1f      	cmp	r2, #31
  403acc:	dc1c      	bgt.n	403b08 <__register_exitproc+0x60>
  403ace:	f102 0e01 	add.w	lr, r2, #1
  403ad2:	b176      	cbz	r6, 403af2 <__register_exitproc+0x4a>
  403ad4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403ad8:	2401      	movs	r4, #1
  403ada:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403ade:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403ae2:	4094      	lsls	r4, r2
  403ae4:	4320      	orrs	r0, r4
  403ae6:	2e02      	cmp	r6, #2
  403ae8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403aec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403af0:	d023      	beq.n	403b3a <__register_exitproc+0x92>
  403af2:	3202      	adds	r2, #2
  403af4:	f8c3 e004 	str.w	lr, [r3, #4]
  403af8:	6828      	ldr	r0, [r5, #0]
  403afa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403afe:	f7ff f80b 	bl	402b18 <__retarget_lock_release_recursive>
  403b02:	2000      	movs	r0, #0
  403b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403b08:	4b17      	ldr	r3, [pc, #92]	; (403b68 <__register_exitproc+0xc0>)
  403b0a:	b30b      	cbz	r3, 403b50 <__register_exitproc+0xa8>
  403b0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403b10:	f7ff f87c 	bl	402c0c <malloc>
  403b14:	4603      	mov	r3, r0
  403b16:	b1d8      	cbz	r0, 403b50 <__register_exitproc+0xa8>
  403b18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403b1c:	6002      	str	r2, [r0, #0]
  403b1e:	2100      	movs	r1, #0
  403b20:	6041      	str	r1, [r0, #4]
  403b22:	460a      	mov	r2, r1
  403b24:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403b28:	f04f 0e01 	mov.w	lr, #1
  403b2c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403b30:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403b34:	2e00      	cmp	r6, #0
  403b36:	d0dc      	beq.n	403af2 <__register_exitproc+0x4a>
  403b38:	e7cc      	b.n	403ad4 <__register_exitproc+0x2c>
  403b3a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403b3e:	430c      	orrs	r4, r1
  403b40:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403b44:	e7d5      	b.n	403af2 <__register_exitproc+0x4a>
  403b46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403b4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403b4e:	e7bb      	b.n	403ac8 <__register_exitproc+0x20>
  403b50:	6828      	ldr	r0, [r5, #0]
  403b52:	f7fe ffe1 	bl	402b18 <__retarget_lock_release_recursive>
  403b56:	f04f 30ff 	mov.w	r0, #4294967295
  403b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403b5e:	bf00      	nop
  403b60:	20000438 	.word	0x20000438
  403b64:	0040400c 	.word	0x0040400c
  403b68:	00402c0d 	.word	0x00402c0d

00403b6c <_close_r>:
  403b6c:	b538      	push	{r3, r4, r5, lr}
  403b6e:	4c07      	ldr	r4, [pc, #28]	; (403b8c <_close_r+0x20>)
  403b70:	2300      	movs	r3, #0
  403b72:	4605      	mov	r5, r0
  403b74:	4608      	mov	r0, r1
  403b76:	6023      	str	r3, [r4, #0]
  403b78:	f7fd f85a 	bl	400c30 <_close>
  403b7c:	1c43      	adds	r3, r0, #1
  403b7e:	d000      	beq.n	403b82 <_close_r+0x16>
  403b80:	bd38      	pop	{r3, r4, r5, pc}
  403b82:	6823      	ldr	r3, [r4, #0]
  403b84:	2b00      	cmp	r3, #0
  403b86:	d0fb      	beq.n	403b80 <_close_r+0x14>
  403b88:	602b      	str	r3, [r5, #0]
  403b8a:	bd38      	pop	{r3, r4, r5, pc}
  403b8c:	20008ddc 	.word	0x20008ddc

00403b90 <_fclose_r>:
  403b90:	b570      	push	{r4, r5, r6, lr}
  403b92:	b159      	cbz	r1, 403bac <_fclose_r+0x1c>
  403b94:	4605      	mov	r5, r0
  403b96:	460c      	mov	r4, r1
  403b98:	b110      	cbz	r0, 403ba0 <_fclose_r+0x10>
  403b9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403b9c:	2b00      	cmp	r3, #0
  403b9e:	d03c      	beq.n	403c1a <_fclose_r+0x8a>
  403ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ba2:	07d8      	lsls	r0, r3, #31
  403ba4:	d505      	bpl.n	403bb2 <_fclose_r+0x22>
  403ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403baa:	b92b      	cbnz	r3, 403bb8 <_fclose_r+0x28>
  403bac:	2600      	movs	r6, #0
  403bae:	4630      	mov	r0, r6
  403bb0:	bd70      	pop	{r4, r5, r6, pc}
  403bb2:	89a3      	ldrh	r3, [r4, #12]
  403bb4:	0599      	lsls	r1, r3, #22
  403bb6:	d53c      	bpl.n	403c32 <_fclose_r+0xa2>
  403bb8:	4621      	mov	r1, r4
  403bba:	4628      	mov	r0, r5
  403bbc:	f7fe faf2 	bl	4021a4 <__sflush_r>
  403bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403bc2:	4606      	mov	r6, r0
  403bc4:	b133      	cbz	r3, 403bd4 <_fclose_r+0x44>
  403bc6:	69e1      	ldr	r1, [r4, #28]
  403bc8:	4628      	mov	r0, r5
  403bca:	4798      	blx	r3
  403bcc:	2800      	cmp	r0, #0
  403bce:	bfb8      	it	lt
  403bd0:	f04f 36ff 	movlt.w	r6, #4294967295
  403bd4:	89a3      	ldrh	r3, [r4, #12]
  403bd6:	061a      	lsls	r2, r3, #24
  403bd8:	d422      	bmi.n	403c20 <_fclose_r+0x90>
  403bda:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403bdc:	b141      	cbz	r1, 403bf0 <_fclose_r+0x60>
  403bde:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403be2:	4299      	cmp	r1, r3
  403be4:	d002      	beq.n	403bec <_fclose_r+0x5c>
  403be6:	4628      	mov	r0, r5
  403be8:	f7fe fcfa 	bl	4025e0 <_free_r>
  403bec:	2300      	movs	r3, #0
  403bee:	6323      	str	r3, [r4, #48]	; 0x30
  403bf0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403bf2:	b121      	cbz	r1, 403bfe <_fclose_r+0x6e>
  403bf4:	4628      	mov	r0, r5
  403bf6:	f7fe fcf3 	bl	4025e0 <_free_r>
  403bfa:	2300      	movs	r3, #0
  403bfc:	6463      	str	r3, [r4, #68]	; 0x44
  403bfe:	f7fe fbf5 	bl	4023ec <__sfp_lock_acquire>
  403c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403c04:	2200      	movs	r2, #0
  403c06:	07db      	lsls	r3, r3, #31
  403c08:	81a2      	strh	r2, [r4, #12]
  403c0a:	d50e      	bpl.n	403c2a <_fclose_r+0x9a>
  403c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c0e:	f7fe ff7f 	bl	402b10 <__retarget_lock_close_recursive>
  403c12:	f7fe fbf1 	bl	4023f8 <__sfp_lock_release>
  403c16:	4630      	mov	r0, r6
  403c18:	bd70      	pop	{r4, r5, r6, pc}
  403c1a:	f7fe fbbb 	bl	402394 <__sinit>
  403c1e:	e7bf      	b.n	403ba0 <_fclose_r+0x10>
  403c20:	6921      	ldr	r1, [r4, #16]
  403c22:	4628      	mov	r0, r5
  403c24:	f7fe fcdc 	bl	4025e0 <_free_r>
  403c28:	e7d7      	b.n	403bda <_fclose_r+0x4a>
  403c2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c2c:	f7fe ff74 	bl	402b18 <__retarget_lock_release_recursive>
  403c30:	e7ec      	b.n	403c0c <_fclose_r+0x7c>
  403c32:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c34:	f7fe ff6e 	bl	402b14 <__retarget_lock_acquire_recursive>
  403c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c3c:	2b00      	cmp	r3, #0
  403c3e:	d1bb      	bne.n	403bb8 <_fclose_r+0x28>
  403c40:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403c42:	f016 0601 	ands.w	r6, r6, #1
  403c46:	d1b1      	bne.n	403bac <_fclose_r+0x1c>
  403c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c4a:	f7fe ff65 	bl	402b18 <__retarget_lock_release_recursive>
  403c4e:	4630      	mov	r0, r6
  403c50:	bd70      	pop	{r4, r5, r6, pc}
  403c52:	bf00      	nop

00403c54 <_fstat_r>:
  403c54:	b538      	push	{r3, r4, r5, lr}
  403c56:	460b      	mov	r3, r1
  403c58:	4c07      	ldr	r4, [pc, #28]	; (403c78 <_fstat_r+0x24>)
  403c5a:	4605      	mov	r5, r0
  403c5c:	4611      	mov	r1, r2
  403c5e:	4618      	mov	r0, r3
  403c60:	2300      	movs	r3, #0
  403c62:	6023      	str	r3, [r4, #0]
  403c64:	f7fc ffe7 	bl	400c36 <_fstat>
  403c68:	1c43      	adds	r3, r0, #1
  403c6a:	d000      	beq.n	403c6e <_fstat_r+0x1a>
  403c6c:	bd38      	pop	{r3, r4, r5, pc}
  403c6e:	6823      	ldr	r3, [r4, #0]
  403c70:	2b00      	cmp	r3, #0
  403c72:	d0fb      	beq.n	403c6c <_fstat_r+0x18>
  403c74:	602b      	str	r3, [r5, #0]
  403c76:	bd38      	pop	{r3, r4, r5, pc}
  403c78:	20008ddc 	.word	0x20008ddc

00403c7c <_isatty_r>:
  403c7c:	b538      	push	{r3, r4, r5, lr}
  403c7e:	4c07      	ldr	r4, [pc, #28]	; (403c9c <_isatty_r+0x20>)
  403c80:	2300      	movs	r3, #0
  403c82:	4605      	mov	r5, r0
  403c84:	4608      	mov	r0, r1
  403c86:	6023      	str	r3, [r4, #0]
  403c88:	f7fc ffda 	bl	400c40 <_isatty>
  403c8c:	1c43      	adds	r3, r0, #1
  403c8e:	d000      	beq.n	403c92 <_isatty_r+0x16>
  403c90:	bd38      	pop	{r3, r4, r5, pc}
  403c92:	6823      	ldr	r3, [r4, #0]
  403c94:	2b00      	cmp	r3, #0
  403c96:	d0fb      	beq.n	403c90 <_isatty_r+0x14>
  403c98:	602b      	str	r3, [r5, #0]
  403c9a:	bd38      	pop	{r3, r4, r5, pc}
  403c9c:	20008ddc 	.word	0x20008ddc

00403ca0 <_lseek_r>:
  403ca0:	b570      	push	{r4, r5, r6, lr}
  403ca2:	460d      	mov	r5, r1
  403ca4:	4c08      	ldr	r4, [pc, #32]	; (403cc8 <_lseek_r+0x28>)
  403ca6:	4611      	mov	r1, r2
  403ca8:	4606      	mov	r6, r0
  403caa:	461a      	mov	r2, r3
  403cac:	4628      	mov	r0, r5
  403cae:	2300      	movs	r3, #0
  403cb0:	6023      	str	r3, [r4, #0]
  403cb2:	f7fc ffc7 	bl	400c44 <_lseek>
  403cb6:	1c43      	adds	r3, r0, #1
  403cb8:	d000      	beq.n	403cbc <_lseek_r+0x1c>
  403cba:	bd70      	pop	{r4, r5, r6, pc}
  403cbc:	6823      	ldr	r3, [r4, #0]
  403cbe:	2b00      	cmp	r3, #0
  403cc0:	d0fb      	beq.n	403cba <_lseek_r+0x1a>
  403cc2:	6033      	str	r3, [r6, #0]
  403cc4:	bd70      	pop	{r4, r5, r6, pc}
  403cc6:	bf00      	nop
  403cc8:	20008ddc 	.word	0x20008ddc

00403ccc <_read_r>:
  403ccc:	b570      	push	{r4, r5, r6, lr}
  403cce:	460d      	mov	r5, r1
  403cd0:	4c08      	ldr	r4, [pc, #32]	; (403cf4 <_read_r+0x28>)
  403cd2:	4611      	mov	r1, r2
  403cd4:	4606      	mov	r6, r0
  403cd6:	461a      	mov	r2, r3
  403cd8:	4628      	mov	r0, r5
  403cda:	2300      	movs	r3, #0
  403cdc:	6023      	str	r3, [r4, #0]
  403cde:	f7fc fb0d 	bl	4002fc <_read>
  403ce2:	1c43      	adds	r3, r0, #1
  403ce4:	d000      	beq.n	403ce8 <_read_r+0x1c>
  403ce6:	bd70      	pop	{r4, r5, r6, pc}
  403ce8:	6823      	ldr	r3, [r4, #0]
  403cea:	2b00      	cmp	r3, #0
  403cec:	d0fb      	beq.n	403ce6 <_read_r+0x1a>
  403cee:	6033      	str	r3, [r6, #0]
  403cf0:	bd70      	pop	{r4, r5, r6, pc}
  403cf2:	bf00      	nop
  403cf4:	20008ddc 	.word	0x20008ddc

00403cf8 <__aeabi_uldivmod>:
  403cf8:	b953      	cbnz	r3, 403d10 <__aeabi_uldivmod+0x18>
  403cfa:	b94a      	cbnz	r2, 403d10 <__aeabi_uldivmod+0x18>
  403cfc:	2900      	cmp	r1, #0
  403cfe:	bf08      	it	eq
  403d00:	2800      	cmpeq	r0, #0
  403d02:	bf1c      	itt	ne
  403d04:	f04f 31ff 	movne.w	r1, #4294967295
  403d08:	f04f 30ff 	movne.w	r0, #4294967295
  403d0c:	f000 b97a 	b.w	404004 <__aeabi_idiv0>
  403d10:	f1ad 0c08 	sub.w	ip, sp, #8
  403d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403d18:	f000 f806 	bl	403d28 <__udivmoddi4>
  403d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403d24:	b004      	add	sp, #16
  403d26:	4770      	bx	lr

00403d28 <__udivmoddi4>:
  403d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d2c:	468c      	mov	ip, r1
  403d2e:	460d      	mov	r5, r1
  403d30:	4604      	mov	r4, r0
  403d32:	9e08      	ldr	r6, [sp, #32]
  403d34:	2b00      	cmp	r3, #0
  403d36:	d151      	bne.n	403ddc <__udivmoddi4+0xb4>
  403d38:	428a      	cmp	r2, r1
  403d3a:	4617      	mov	r7, r2
  403d3c:	d96d      	bls.n	403e1a <__udivmoddi4+0xf2>
  403d3e:	fab2 fe82 	clz	lr, r2
  403d42:	f1be 0f00 	cmp.w	lr, #0
  403d46:	d00b      	beq.n	403d60 <__udivmoddi4+0x38>
  403d48:	f1ce 0c20 	rsb	ip, lr, #32
  403d4c:	fa01 f50e 	lsl.w	r5, r1, lr
  403d50:	fa20 fc0c 	lsr.w	ip, r0, ip
  403d54:	fa02 f70e 	lsl.w	r7, r2, lr
  403d58:	ea4c 0c05 	orr.w	ip, ip, r5
  403d5c:	fa00 f40e 	lsl.w	r4, r0, lr
  403d60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403d64:	0c25      	lsrs	r5, r4, #16
  403d66:	fbbc f8fa 	udiv	r8, ip, sl
  403d6a:	fa1f f987 	uxth.w	r9, r7
  403d6e:	fb0a cc18 	mls	ip, sl, r8, ip
  403d72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403d76:	fb08 f309 	mul.w	r3, r8, r9
  403d7a:	42ab      	cmp	r3, r5
  403d7c:	d90a      	bls.n	403d94 <__udivmoddi4+0x6c>
  403d7e:	19ed      	adds	r5, r5, r7
  403d80:	f108 32ff 	add.w	r2, r8, #4294967295
  403d84:	f080 8123 	bcs.w	403fce <__udivmoddi4+0x2a6>
  403d88:	42ab      	cmp	r3, r5
  403d8a:	f240 8120 	bls.w	403fce <__udivmoddi4+0x2a6>
  403d8e:	f1a8 0802 	sub.w	r8, r8, #2
  403d92:	443d      	add	r5, r7
  403d94:	1aed      	subs	r5, r5, r3
  403d96:	b2a4      	uxth	r4, r4
  403d98:	fbb5 f0fa 	udiv	r0, r5, sl
  403d9c:	fb0a 5510 	mls	r5, sl, r0, r5
  403da0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403da4:	fb00 f909 	mul.w	r9, r0, r9
  403da8:	45a1      	cmp	r9, r4
  403daa:	d909      	bls.n	403dc0 <__udivmoddi4+0x98>
  403dac:	19e4      	adds	r4, r4, r7
  403dae:	f100 33ff 	add.w	r3, r0, #4294967295
  403db2:	f080 810a 	bcs.w	403fca <__udivmoddi4+0x2a2>
  403db6:	45a1      	cmp	r9, r4
  403db8:	f240 8107 	bls.w	403fca <__udivmoddi4+0x2a2>
  403dbc:	3802      	subs	r0, #2
  403dbe:	443c      	add	r4, r7
  403dc0:	eba4 0409 	sub.w	r4, r4, r9
  403dc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403dc8:	2100      	movs	r1, #0
  403dca:	2e00      	cmp	r6, #0
  403dcc:	d061      	beq.n	403e92 <__udivmoddi4+0x16a>
  403dce:	fa24 f40e 	lsr.w	r4, r4, lr
  403dd2:	2300      	movs	r3, #0
  403dd4:	6034      	str	r4, [r6, #0]
  403dd6:	6073      	str	r3, [r6, #4]
  403dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ddc:	428b      	cmp	r3, r1
  403dde:	d907      	bls.n	403df0 <__udivmoddi4+0xc8>
  403de0:	2e00      	cmp	r6, #0
  403de2:	d054      	beq.n	403e8e <__udivmoddi4+0x166>
  403de4:	2100      	movs	r1, #0
  403de6:	e886 0021 	stmia.w	r6, {r0, r5}
  403dea:	4608      	mov	r0, r1
  403dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403df0:	fab3 f183 	clz	r1, r3
  403df4:	2900      	cmp	r1, #0
  403df6:	f040 808e 	bne.w	403f16 <__udivmoddi4+0x1ee>
  403dfa:	42ab      	cmp	r3, r5
  403dfc:	d302      	bcc.n	403e04 <__udivmoddi4+0xdc>
  403dfe:	4282      	cmp	r2, r0
  403e00:	f200 80fa 	bhi.w	403ff8 <__udivmoddi4+0x2d0>
  403e04:	1a84      	subs	r4, r0, r2
  403e06:	eb65 0503 	sbc.w	r5, r5, r3
  403e0a:	2001      	movs	r0, #1
  403e0c:	46ac      	mov	ip, r5
  403e0e:	2e00      	cmp	r6, #0
  403e10:	d03f      	beq.n	403e92 <__udivmoddi4+0x16a>
  403e12:	e886 1010 	stmia.w	r6, {r4, ip}
  403e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e1a:	b912      	cbnz	r2, 403e22 <__udivmoddi4+0xfa>
  403e1c:	2701      	movs	r7, #1
  403e1e:	fbb7 f7f2 	udiv	r7, r7, r2
  403e22:	fab7 fe87 	clz	lr, r7
  403e26:	f1be 0f00 	cmp.w	lr, #0
  403e2a:	d134      	bne.n	403e96 <__udivmoddi4+0x16e>
  403e2c:	1beb      	subs	r3, r5, r7
  403e2e:	0c3a      	lsrs	r2, r7, #16
  403e30:	fa1f fc87 	uxth.w	ip, r7
  403e34:	2101      	movs	r1, #1
  403e36:	fbb3 f8f2 	udiv	r8, r3, r2
  403e3a:	0c25      	lsrs	r5, r4, #16
  403e3c:	fb02 3318 	mls	r3, r2, r8, r3
  403e40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403e44:	fb0c f308 	mul.w	r3, ip, r8
  403e48:	42ab      	cmp	r3, r5
  403e4a:	d907      	bls.n	403e5c <__udivmoddi4+0x134>
  403e4c:	19ed      	adds	r5, r5, r7
  403e4e:	f108 30ff 	add.w	r0, r8, #4294967295
  403e52:	d202      	bcs.n	403e5a <__udivmoddi4+0x132>
  403e54:	42ab      	cmp	r3, r5
  403e56:	f200 80d1 	bhi.w	403ffc <__udivmoddi4+0x2d4>
  403e5a:	4680      	mov	r8, r0
  403e5c:	1aed      	subs	r5, r5, r3
  403e5e:	b2a3      	uxth	r3, r4
  403e60:	fbb5 f0f2 	udiv	r0, r5, r2
  403e64:	fb02 5510 	mls	r5, r2, r0, r5
  403e68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403e6c:	fb0c fc00 	mul.w	ip, ip, r0
  403e70:	45a4      	cmp	ip, r4
  403e72:	d907      	bls.n	403e84 <__udivmoddi4+0x15c>
  403e74:	19e4      	adds	r4, r4, r7
  403e76:	f100 33ff 	add.w	r3, r0, #4294967295
  403e7a:	d202      	bcs.n	403e82 <__udivmoddi4+0x15a>
  403e7c:	45a4      	cmp	ip, r4
  403e7e:	f200 80b8 	bhi.w	403ff2 <__udivmoddi4+0x2ca>
  403e82:	4618      	mov	r0, r3
  403e84:	eba4 040c 	sub.w	r4, r4, ip
  403e88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403e8c:	e79d      	b.n	403dca <__udivmoddi4+0xa2>
  403e8e:	4631      	mov	r1, r6
  403e90:	4630      	mov	r0, r6
  403e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e96:	f1ce 0420 	rsb	r4, lr, #32
  403e9a:	fa05 f30e 	lsl.w	r3, r5, lr
  403e9e:	fa07 f70e 	lsl.w	r7, r7, lr
  403ea2:	fa20 f804 	lsr.w	r8, r0, r4
  403ea6:	0c3a      	lsrs	r2, r7, #16
  403ea8:	fa25 f404 	lsr.w	r4, r5, r4
  403eac:	ea48 0803 	orr.w	r8, r8, r3
  403eb0:	fbb4 f1f2 	udiv	r1, r4, r2
  403eb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403eb8:	fb02 4411 	mls	r4, r2, r1, r4
  403ebc:	fa1f fc87 	uxth.w	ip, r7
  403ec0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403ec4:	fb01 f30c 	mul.w	r3, r1, ip
  403ec8:	42ab      	cmp	r3, r5
  403eca:	fa00 f40e 	lsl.w	r4, r0, lr
  403ece:	d909      	bls.n	403ee4 <__udivmoddi4+0x1bc>
  403ed0:	19ed      	adds	r5, r5, r7
  403ed2:	f101 30ff 	add.w	r0, r1, #4294967295
  403ed6:	f080 808a 	bcs.w	403fee <__udivmoddi4+0x2c6>
  403eda:	42ab      	cmp	r3, r5
  403edc:	f240 8087 	bls.w	403fee <__udivmoddi4+0x2c6>
  403ee0:	3902      	subs	r1, #2
  403ee2:	443d      	add	r5, r7
  403ee4:	1aeb      	subs	r3, r5, r3
  403ee6:	fa1f f588 	uxth.w	r5, r8
  403eea:	fbb3 f0f2 	udiv	r0, r3, r2
  403eee:	fb02 3310 	mls	r3, r2, r0, r3
  403ef2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403ef6:	fb00 f30c 	mul.w	r3, r0, ip
  403efa:	42ab      	cmp	r3, r5
  403efc:	d907      	bls.n	403f0e <__udivmoddi4+0x1e6>
  403efe:	19ed      	adds	r5, r5, r7
  403f00:	f100 38ff 	add.w	r8, r0, #4294967295
  403f04:	d26f      	bcs.n	403fe6 <__udivmoddi4+0x2be>
  403f06:	42ab      	cmp	r3, r5
  403f08:	d96d      	bls.n	403fe6 <__udivmoddi4+0x2be>
  403f0a:	3802      	subs	r0, #2
  403f0c:	443d      	add	r5, r7
  403f0e:	1aeb      	subs	r3, r5, r3
  403f10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403f14:	e78f      	b.n	403e36 <__udivmoddi4+0x10e>
  403f16:	f1c1 0720 	rsb	r7, r1, #32
  403f1a:	fa22 f807 	lsr.w	r8, r2, r7
  403f1e:	408b      	lsls	r3, r1
  403f20:	fa05 f401 	lsl.w	r4, r5, r1
  403f24:	ea48 0303 	orr.w	r3, r8, r3
  403f28:	fa20 fe07 	lsr.w	lr, r0, r7
  403f2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403f30:	40fd      	lsrs	r5, r7
  403f32:	ea4e 0e04 	orr.w	lr, lr, r4
  403f36:	fbb5 f9fc 	udiv	r9, r5, ip
  403f3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403f3e:	fb0c 5519 	mls	r5, ip, r9, r5
  403f42:	fa1f f883 	uxth.w	r8, r3
  403f46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403f4a:	fb09 f408 	mul.w	r4, r9, r8
  403f4e:	42ac      	cmp	r4, r5
  403f50:	fa02 f201 	lsl.w	r2, r2, r1
  403f54:	fa00 fa01 	lsl.w	sl, r0, r1
  403f58:	d908      	bls.n	403f6c <__udivmoddi4+0x244>
  403f5a:	18ed      	adds	r5, r5, r3
  403f5c:	f109 30ff 	add.w	r0, r9, #4294967295
  403f60:	d243      	bcs.n	403fea <__udivmoddi4+0x2c2>
  403f62:	42ac      	cmp	r4, r5
  403f64:	d941      	bls.n	403fea <__udivmoddi4+0x2c2>
  403f66:	f1a9 0902 	sub.w	r9, r9, #2
  403f6a:	441d      	add	r5, r3
  403f6c:	1b2d      	subs	r5, r5, r4
  403f6e:	fa1f fe8e 	uxth.w	lr, lr
  403f72:	fbb5 f0fc 	udiv	r0, r5, ip
  403f76:	fb0c 5510 	mls	r5, ip, r0, r5
  403f7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403f7e:	fb00 f808 	mul.w	r8, r0, r8
  403f82:	45a0      	cmp	r8, r4
  403f84:	d907      	bls.n	403f96 <__udivmoddi4+0x26e>
  403f86:	18e4      	adds	r4, r4, r3
  403f88:	f100 35ff 	add.w	r5, r0, #4294967295
  403f8c:	d229      	bcs.n	403fe2 <__udivmoddi4+0x2ba>
  403f8e:	45a0      	cmp	r8, r4
  403f90:	d927      	bls.n	403fe2 <__udivmoddi4+0x2ba>
  403f92:	3802      	subs	r0, #2
  403f94:	441c      	add	r4, r3
  403f96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403f9a:	eba4 0408 	sub.w	r4, r4, r8
  403f9e:	fba0 8902 	umull	r8, r9, r0, r2
  403fa2:	454c      	cmp	r4, r9
  403fa4:	46c6      	mov	lr, r8
  403fa6:	464d      	mov	r5, r9
  403fa8:	d315      	bcc.n	403fd6 <__udivmoddi4+0x2ae>
  403faa:	d012      	beq.n	403fd2 <__udivmoddi4+0x2aa>
  403fac:	b156      	cbz	r6, 403fc4 <__udivmoddi4+0x29c>
  403fae:	ebba 030e 	subs.w	r3, sl, lr
  403fb2:	eb64 0405 	sbc.w	r4, r4, r5
  403fb6:	fa04 f707 	lsl.w	r7, r4, r7
  403fba:	40cb      	lsrs	r3, r1
  403fbc:	431f      	orrs	r7, r3
  403fbe:	40cc      	lsrs	r4, r1
  403fc0:	6037      	str	r7, [r6, #0]
  403fc2:	6074      	str	r4, [r6, #4]
  403fc4:	2100      	movs	r1, #0
  403fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403fca:	4618      	mov	r0, r3
  403fcc:	e6f8      	b.n	403dc0 <__udivmoddi4+0x98>
  403fce:	4690      	mov	r8, r2
  403fd0:	e6e0      	b.n	403d94 <__udivmoddi4+0x6c>
  403fd2:	45c2      	cmp	sl, r8
  403fd4:	d2ea      	bcs.n	403fac <__udivmoddi4+0x284>
  403fd6:	ebb8 0e02 	subs.w	lr, r8, r2
  403fda:	eb69 0503 	sbc.w	r5, r9, r3
  403fde:	3801      	subs	r0, #1
  403fe0:	e7e4      	b.n	403fac <__udivmoddi4+0x284>
  403fe2:	4628      	mov	r0, r5
  403fe4:	e7d7      	b.n	403f96 <__udivmoddi4+0x26e>
  403fe6:	4640      	mov	r0, r8
  403fe8:	e791      	b.n	403f0e <__udivmoddi4+0x1e6>
  403fea:	4681      	mov	r9, r0
  403fec:	e7be      	b.n	403f6c <__udivmoddi4+0x244>
  403fee:	4601      	mov	r1, r0
  403ff0:	e778      	b.n	403ee4 <__udivmoddi4+0x1bc>
  403ff2:	3802      	subs	r0, #2
  403ff4:	443c      	add	r4, r7
  403ff6:	e745      	b.n	403e84 <__udivmoddi4+0x15c>
  403ff8:	4608      	mov	r0, r1
  403ffa:	e708      	b.n	403e0e <__udivmoddi4+0xe6>
  403ffc:	f1a8 0802 	sub.w	r8, r8, #2
  404000:	443d      	add	r5, r7
  404002:	e72b      	b.n	403e5c <__udivmoddi4+0x134>

00404004 <__aeabi_idiv0>:
  404004:	4770      	bx	lr
  404006:	bf00      	nop
  404008:	0000002e 	.word	0x0000002e

0040400c <_global_impure_ptr>:
  40400c:	20000010 33323130 37363534 42413938     ... 0123456789AB
  40401c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40402c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40403c:	0000296c                                l)..

00404040 <blanks.7217>:
  404040:	20202020 20202020 20202020 20202020                     

00404050 <zeroes.7218>:
  404050:	30303030 30303030 30303030 30303030     0000000000000000
  404060:	00000043 49534f50 00000058              C...POSIX...

0040406c <_ctype_>:
  40406c:	20202000 20202020 28282020 20282828     .         ((((( 
  40407c:	20202020 20202020 20202020 20202020                     
  40408c:	10108820 10101010 10101010 10101010      ...............
  40409c:	04040410 04040404 10040404 10101010     ................
  4040ac:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4040bc:	01010101 01010101 01010101 10101010     ................
  4040cc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4040dc:	02020202 02020202 02020202 10101010     ................
  4040ec:	00000020 00000000 00000000 00000000      ...............
	...

00404170 <_init>:
  404170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404172:	bf00      	nop
  404174:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404176:	bc08      	pop	{r3}
  404178:	469e      	mov	lr, r3
  40417a:	4770      	bx	lr

0040417c <__init_array_start>:
  40417c:	00402185 	.word	0x00402185

00404180 <__frame_dummy_init_array_entry>:
  404180:	0040011d                                ..@.

00404184 <_fini>:
  404184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404186:	bf00      	nop
  404188:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40418a:	bc08      	pop	{r3}
  40418c:	469e      	mov	lr, r3
  40418e:	4770      	bx	lr

00404190 <__fini_array_start>:
  404190:	004000f9 	.word	0x004000f9


BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004234  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404234  00404234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  0040423c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008428  200009b8  00404bf4  000209b8  2**2
                  ALLOC
  4 .stack        00003000  20008de0  0040d01c  000209b8  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   000148c0  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003063  00000000  00000000  000352ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003bff  00000000  00000000  00038362  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008d0  00000000  00000000  0003bf61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007f0  00000000  00000000  0003c831  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018e17  00000000  00000000  0003d021  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b707  00000000  00000000  00055e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00064bd1  00000000  00000000  0006153f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001fb4  00000000  00000000  000c6110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 bd 00 20 21 09 40 00 1d 09 40 00 1d 09 40 00     ... !.@...@...@.
  400010:	1d 09 40 00 1d 09 40 00 1d 09 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	1d 09 40 00 1d 09 40 00 00 00 00 00 1d 09 40 00     ..@...@.......@.
  40003c:	1d 09 40 00 1d 09 40 00 1d 09 40 00 1d 09 40 00     ..@...@...@...@.
  40004c:	1d 09 40 00 1d 09 40 00 1d 09 40 00 1d 09 40 00     ..@...@...@...@.
  40005c:	1d 09 40 00 1d 09 40 00 1d 09 40 00 1d 09 40 00     ..@...@...@...@.
  40006c:	1d 09 40 00 1d 09 40 00 1d 09 40 00 b9 0b 40 00     ..@...@...@...@.
  40007c:	1d 09 40 00 1d 09 40 00 1d 09 40 00 1d 09 40 00     ..@...@...@...@.
  40008c:	1d 09 40 00 1d 09 40 00 1d 09 40 00 1d 09 40 00     ..@...@...@...@.
  40009c:	1d 09 40 00 1d 09 40 00 1d 09 40 00 1d 09 40 00     ..@...@...@...@.
  4000ac:	1d 09 40 00 1d 09 40 00 1d 09 40 00 35 06 40 00     ..@...@...@.5.@.
  4000bc:	49 06 40 00 1d 09 40 00 1d 09 40 00 1d 09 40 00     I.@...@...@...@.
  4000cc:	1d 09 40 00 1d 09 40 00 1d 09 40 00 1d 09 40 00     ..@...@...@...@.
  4000dc:	1d 09 40 00 1d 09 40 00 1d 09 40 00 1d 09 40 00     ..@...@...@...@.
  4000ec:	1d 09 40 00 1d 09 40 00 1d 09 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009b8 	.word	0x200009b8
  400114:	00000000 	.word	0x00000000
  400118:	0040423c 	.word	0x0040423c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	0040423c 	.word	0x0040423c
  400158:	200009bc 	.word	0x200009bc
  40015c:	0040423c 	.word	0x0040423c
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	480b      	ldr	r0, [pc, #44]	; (4001c8 <sysclk_init+0x64>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	00400af5 	.word	0x00400af5
  4001a8:	00400725 	.word	0x00400725
  4001ac:	00400779 	.word	0x00400779
  4001b0:	00400789 	.word	0x00400789
  4001b4:	200f3f01 	.word	0x200f3f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	00400799 	.word	0x00400799
  4001c0:	004006c1 	.word	0x004006c1
  4001c4:	004009e9 	.word	0x004009e9
  4001c8:	05b8d800 	.word	0x05b8d800

004001cc <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  4001cc:	2a00      	cmp	r2, #0
  4001ce:	d03f      	beq.n	400250 <usart_serial_read_packet+0x84>
{
  4001d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4001d4:	b083      	sub	sp, #12
  4001d6:	4606      	mov	r6, r0
  4001d8:	460c      	mov	r4, r1
  4001da:	4693      	mov	fp, r2
  4001dc:	448b      	add	fp, r1
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001de:	4f1d      	ldr	r7, [pc, #116]	; (400254 <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  4001e0:	4d1d      	ldr	r5, [pc, #116]	; (400258 <usart_serial_read_packet+0x8c>)
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001e2:	f8df a080 	ldr.w	sl, [pc, #128]	; 400264 <usart_serial_read_packet+0x98>
  4001e6:	e00d      	b.n	400204 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  4001e8:	4621      	mov	r1, r4
  4001ea:	4638      	mov	r0, r7
  4001ec:	47a8      	blx	r5
  4001ee:	2800      	cmp	r0, #0
  4001f0:	d1fa      	bne.n	4001e8 <usart_serial_read_packet+0x1c>
  4001f2:	e010      	b.n	400216 <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  4001f4:	4621      	mov	r1, r4
  4001f6:	4650      	mov	r0, sl
  4001f8:	47a8      	blx	r5
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d1fa      	bne.n	4001f4 <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  4001fe:	3401      	adds	r4, #1
	while (len) {
  400200:	455c      	cmp	r4, fp
  400202:	d021      	beq.n	400248 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400208:	42be      	cmp	r6, r7
  40020a:	d0ed      	beq.n	4001e8 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40020c:	4556      	cmp	r6, sl
  40020e:	d0f1      	beq.n	4001f4 <usart_serial_read_packet+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400210:	4b12      	ldr	r3, [pc, #72]	; (40025c <usart_serial_read_packet+0x90>)
  400212:	429e      	cmp	r6, r3
  400214:	d00d      	beq.n	400232 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400216:	4b12      	ldr	r3, [pc, #72]	; (400260 <usart_serial_read_packet+0x94>)
  400218:	429e      	cmp	r6, r3
  40021a:	d1f0      	bne.n	4001fe <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  40021c:	4699      	mov	r9, r3
  40021e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400268 <usart_serial_read_packet+0x9c>
  400222:	a901      	add	r1, sp, #4
  400224:	4648      	mov	r0, r9
  400226:	47c0      	blx	r8
  400228:	2800      	cmp	r0, #0
  40022a:	d1fa      	bne.n	400222 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  40022c:	9b01      	ldr	r3, [sp, #4]
  40022e:	7023      	strb	r3, [r4, #0]
  400230:	e7e5      	b.n	4001fe <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400232:	4699      	mov	r9, r3
  400234:	f8df 8030 	ldr.w	r8, [pc, #48]	; 400268 <usart_serial_read_packet+0x9c>
  400238:	a901      	add	r1, sp, #4
  40023a:	4648      	mov	r0, r9
  40023c:	47c0      	blx	r8
  40023e:	2800      	cmp	r0, #0
  400240:	d1fa      	bne.n	400238 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  400242:	9b01      	ldr	r3, [sp, #4]
  400244:	7023      	strb	r3, [r4, #0]
  400246:	e7da      	b.n	4001fe <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  400248:	2000      	movs	r0, #0
  40024a:	b003      	add	sp, #12
  40024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400250:	2000      	movs	r0, #0
  400252:	4770      	bx	lr
  400254:	400e0600 	.word	0x400e0600
  400258:	004008df 	.word	0x004008df
  40025c:	400a0000 	.word	0x400a0000
  400260:	400a4000 	.word	0x400a4000
  400264:	40060600 	.word	0x40060600
  400268:	00400905 	.word	0x00400905

0040026c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40026c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400270:	b980      	cbnz	r0, 400294 <_read+0x28>
  400272:	460c      	mov	r4, r1
  400274:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400276:	2a00      	cmp	r2, #0
  400278:	dd0f      	ble.n	40029a <_read+0x2e>
  40027a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40027c:	4e08      	ldr	r6, [pc, #32]	; (4002a0 <_read+0x34>)
  40027e:	4d09      	ldr	r5, [pc, #36]	; (4002a4 <_read+0x38>)
  400280:	6830      	ldr	r0, [r6, #0]
  400282:	4621      	mov	r1, r4
  400284:	682b      	ldr	r3, [r5, #0]
  400286:	4798      	blx	r3
		ptr++;
  400288:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40028a:	42bc      	cmp	r4, r7
  40028c:	d1f8      	bne.n	400280 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40028e:	4640      	mov	r0, r8
  400290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400294:	f04f 38ff 	mov.w	r8, #4294967295
  400298:	e7f9      	b.n	40028e <_read+0x22>
	for (; len > 0; --len) {
  40029a:	4680      	mov	r8, r0
  40029c:	e7f7      	b.n	40028e <_read+0x22>
  40029e:	bf00      	nop
  4002a0:	20000abc 	.word	0x20000abc
  4002a4:	20000ab4 	.word	0x20000ab4

004002a8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4002a8:	3801      	subs	r0, #1
  4002aa:	2802      	cmp	r0, #2
  4002ac:	d815      	bhi.n	4002da <_write+0x32>
{
  4002ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002b2:	460e      	mov	r6, r1
  4002b4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4002b6:	b19a      	cbz	r2, 4002e0 <_write+0x38>
  4002b8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4002ba:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002f4 <_write+0x4c>
  4002be:	4f0c      	ldr	r7, [pc, #48]	; (4002f0 <_write+0x48>)
  4002c0:	f8d8 0000 	ldr.w	r0, [r8]
  4002c4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002c8:	683b      	ldr	r3, [r7, #0]
  4002ca:	4798      	blx	r3
  4002cc:	2800      	cmp	r0, #0
  4002ce:	db0a      	blt.n	4002e6 <_write+0x3e>
  4002d0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002d2:	3c01      	subs	r4, #1
  4002d4:	d1f4      	bne.n	4002c0 <_write+0x18>
  4002d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002da:	f04f 30ff 	mov.w	r0, #4294967295
  4002de:	4770      	bx	lr
	for (; len != 0; --len) {
  4002e0:	4610      	mov	r0, r2
  4002e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002e6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002ee:	bf00      	nop
  4002f0:	20000ab8 	.word	0x20000ab8
  4002f4:	20000abc 	.word	0x20000abc

004002f8 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4002f8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002fe:	4b21      	ldr	r3, [pc, #132]	; (400384 <board_init+0x8c>)
  400300:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400302:	2009      	movs	r0, #9
  400304:	4c20      	ldr	r4, [pc, #128]	; (400388 <board_init+0x90>)
  400306:	47a0      	blx	r4
  400308:	200a      	movs	r0, #10
  40030a:	47a0      	blx	r4
  40030c:	200b      	movs	r0, #11
  40030e:	47a0      	blx	r4
  400310:	200c      	movs	r0, #12
  400312:	47a0      	blx	r4
  400314:	200d      	movs	r0, #13
  400316:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400318:	4b1c      	ldr	r3, [pc, #112]	; (40038c <board_init+0x94>)
  40031a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40031e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400320:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400324:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400326:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40032a:	2204      	movs	r2, #4
  40032c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40032e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400332:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400338:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40033a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40033c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400340:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400342:	f021 0104 	bic.w	r1, r1, #4
  400346:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400348:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40034a:	f021 0104 	bic.w	r1, r1, #4
  40034e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400350:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400354:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400358:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40035c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  400360:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400366:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400368:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40036a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40036e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400370:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400374:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400376:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400378:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40037c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40037e:	605a      	str	r2, [r3, #4]
  400380:	bd10      	pop	{r4, pc}
  400382:	bf00      	nop
  400384:	400e1850 	.word	0x400e1850
  400388:	004007a9 	.word	0x004007a9
  40038c:	400e1400 	.word	0x400e1400

00400390 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400390:	b570      	push	{r4, r5, r6, lr}
  400392:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400394:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400396:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400398:	4013      	ands	r3, r2
  40039a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40039c:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  40039e:	4d21      	ldr	r5, [pc, #132]	; (400424 <afec_process_callback+0x94>)
  4003a0:	42a8      	cmp	r0, r5
  4003a2:	bf14      	ite	ne
  4003a4:	2500      	movne	r5, #0
  4003a6:	2501      	moveq	r5, #1
  4003a8:	006e      	lsls	r6, r5, #1
  4003aa:	442e      	add	r6, r5
  4003ac:	e00b      	b.n	4003c6 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003ae:	2c14      	cmp	r4, #20
  4003b0:	d824      	bhi.n	4003fc <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4003b2:	9a01      	ldr	r2, [sp, #4]
  4003b4:	f104 0108 	add.w	r1, r4, #8
  4003b8:	2301      	movs	r3, #1
  4003ba:	408b      	lsls	r3, r1
  4003bc:	4213      	tst	r3, r2
  4003be:	d113      	bne.n	4003e8 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4003c0:	3401      	adds	r4, #1
  4003c2:	2c17      	cmp	r4, #23
  4003c4:	d02b      	beq.n	40041e <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4003c6:	2c0f      	cmp	r4, #15
  4003c8:	d8f1      	bhi.n	4003ae <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4003ca:	9a01      	ldr	r2, [sp, #4]
  4003cc:	2301      	movs	r3, #1
  4003ce:	40a3      	lsls	r3, r4
  4003d0:	4213      	tst	r3, r2
  4003d2:	d0f5      	beq.n	4003c0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4003d4:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4003d8:	4423      	add	r3, r4
  4003da:	4a13      	ldr	r2, [pc, #76]	; (400428 <afec_process_callback+0x98>)
  4003dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4003e0:	2b00      	cmp	r3, #0
  4003e2:	d0ed      	beq.n	4003c0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4003e4:	4798      	blx	r3
  4003e6:	e7eb      	b.n	4003c0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4003e8:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4003ec:	4423      	add	r3, r4
  4003ee:	4a0e      	ldr	r2, [pc, #56]	; (400428 <afec_process_callback+0x98>)
  4003f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4003f4:	2b00      	cmp	r3, #0
  4003f6:	d0e3      	beq.n	4003c0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4003f8:	4798      	blx	r3
  4003fa:	e7e1      	b.n	4003c0 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4003fc:	9a01      	ldr	r2, [sp, #4]
  4003fe:	f104 0109 	add.w	r1, r4, #9
  400402:	2301      	movs	r3, #1
  400404:	408b      	lsls	r3, r1
  400406:	4213      	tst	r3, r2
  400408:	d0da      	beq.n	4003c0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40040a:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  40040e:	4423      	add	r3, r4
  400410:	4a05      	ldr	r2, [pc, #20]	; (400428 <afec_process_callback+0x98>)
  400412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400416:	2b00      	cmp	r3, #0
  400418:	d0d2      	beq.n	4003c0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40041a:	4798      	blx	r3
  40041c:	e7d0      	b.n	4003c0 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  40041e:	b002      	add	sp, #8
  400420:	bd70      	pop	{r4, r5, r6, pc}
  400422:	bf00      	nop
  400424:	400b4000 	.word	0x400b4000
  400428:	20000ac0 	.word	0x20000ac0

0040042c <afec_ch_set_config>:
{
  40042c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40042e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400430:	2301      	movs	r3, #1
  400432:	408b      	lsls	r3, r1
  400434:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400438:	7815      	ldrb	r5, [r2, #0]
  40043a:	2d00      	cmp	r5, #0
  40043c:	bf08      	it	eq
  40043e:	2300      	moveq	r3, #0
  400440:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400442:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400444:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400446:	004b      	lsls	r3, r1, #1
  400448:	2103      	movs	r1, #3
  40044a:	4099      	lsls	r1, r3
  40044c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400450:	7851      	ldrb	r1, [r2, #1]
  400452:	4099      	lsls	r1, r3
  400454:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400456:	6541      	str	r1, [r0, #84]	; 0x54
}
  400458:	bc30      	pop	{r4, r5}
  40045a:	4770      	bx	lr

0040045c <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  40045c:	2200      	movs	r2, #0
  40045e:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400460:	4b08      	ldr	r3, [pc, #32]	; (400484 <afec_get_config_defaults+0x28>)
  400462:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400464:	4b08      	ldr	r3, [pc, #32]	; (400488 <afec_get_config_defaults+0x2c>)
  400466:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400468:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  40046c:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  40046e:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400470:	2302      	movs	r3, #2
  400472:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  400474:	2301      	movs	r3, #1
  400476:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400478:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  40047a:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  40047c:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  40047e:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400480:	7683      	strb	r3, [r0, #26]
  400482:	4770      	bx	lr
  400484:	05b8d800 	.word	0x05b8d800
  400488:	005b8d80 	.word	0x005b8d80

0040048c <afec_ch_get_config_defaults>:
	cfg->diff = false;
  40048c:	2300      	movs	r3, #0
  40048e:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400490:	2301      	movs	r3, #1
  400492:	7043      	strb	r3, [r0, #1]
  400494:	4770      	bx	lr
	...

00400498 <afec_init>:
	return afec->AFEC_ISR;
  400498:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40049a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40049e:	d001      	beq.n	4004a4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4004a0:	2019      	movs	r0, #25
  4004a2:	4770      	bx	lr
{
  4004a4:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4004a6:	2301      	movs	r3, #1
  4004a8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4004aa:	7dcb      	ldrb	r3, [r1, #23]
  4004ac:	2b00      	cmp	r3, #0
  4004ae:	bf14      	ite	ne
  4004b0:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  4004b4:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  4004b6:	7d8b      	ldrb	r3, [r1, #22]
  4004b8:	2b00      	cmp	r3, #0
  4004ba:	bf14      	ite	ne
  4004bc:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  4004c0:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  4004c2:	7d0b      	ldrb	r3, [r1, #20]
  4004c4:	061b      	lsls	r3, r3, #24
  4004c6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4004ca:	690a      	ldr	r2, [r1, #16]
  4004cc:	68ce      	ldr	r6, [r1, #12]
  4004ce:	4332      	orrs	r2, r6
  4004d0:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4004d2:	7d4a      	ldrb	r2, [r1, #21]
  4004d4:	0712      	lsls	r2, r2, #28
  4004d6:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4004da:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  4004dc:	688a      	ldr	r2, [r1, #8]
  4004de:	0056      	lsls	r6, r2, #1
  4004e0:	684a      	ldr	r2, [r1, #4]
  4004e2:	fbb2 f2f6 	udiv	r2, r2, r6
  4004e6:	3a01      	subs	r2, #1
  4004e8:	0212      	lsls	r2, r2, #8
  4004ea:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4004ec:	4313      	orrs	r3, r2
  4004ee:	432b      	orrs	r3, r5
  4004f0:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  4004f2:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4004f4:	7e0b      	ldrb	r3, [r1, #24]
  4004f6:	2b00      	cmp	r3, #0
  4004f8:	bf14      	ite	ne
  4004fa:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4004fe:	2300      	moveq	r3, #0
  400500:	680a      	ldr	r2, [r1, #0]
  400502:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400504:	7e4a      	ldrb	r2, [r1, #25]
  400506:	2a00      	cmp	r2, #0
  400508:	bf14      	ite	ne
  40050a:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40050e:	2200      	moveq	r2, #0
			(config->resolution) |
  400510:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400512:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  400514:	7e8b      	ldrb	r3, [r1, #26]
  400516:	021b      	lsls	r3, r3, #8
  400518:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40051c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400520:	4b0e      	ldr	r3, [pc, #56]	; (40055c <afec_init+0xc4>)
  400522:	4298      	cmp	r0, r3
  400524:	d005      	beq.n	400532 <afec_init+0x9a>
	if(afec == AFEC1) {
  400526:	4b0e      	ldr	r3, [pc, #56]	; (400560 <afec_init+0xc8>)
  400528:	4298      	cmp	r0, r3
  40052a:	d00c      	beq.n	400546 <afec_init+0xae>
	return STATUS_OK;
  40052c:	2000      	movs	r0, #0
}
  40052e:	bc70      	pop	{r4, r5, r6}
  400530:	4770      	bx	lr
  400532:	4b0c      	ldr	r3, [pc, #48]	; (400564 <afec_init+0xcc>)
  400534:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400538:	2200      	movs	r2, #0
  40053a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40053e:	428b      	cmp	r3, r1
  400540:	d1fb      	bne.n	40053a <afec_init+0xa2>
	return STATUS_OK;
  400542:	2000      	movs	r0, #0
  400544:	e7f3      	b.n	40052e <afec_init+0x96>
  400546:	4b08      	ldr	r3, [pc, #32]	; (400568 <afec_init+0xd0>)
  400548:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  40054c:	2200      	movs	r2, #0
  40054e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400552:	428b      	cmp	r3, r1
  400554:	d1fb      	bne.n	40054e <afec_init+0xb6>
	return STATUS_OK;
  400556:	2000      	movs	r0, #0
  400558:	e7e9      	b.n	40052e <afec_init+0x96>
  40055a:	bf00      	nop
  40055c:	400b0000 	.word	0x400b0000
  400560:	400b4000 	.word	0x400b4000
  400564:	20000abc 	.word	0x20000abc
  400568:	20000b18 	.word	0x20000b18

0040056c <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  40056c:	4b0c      	ldr	r3, [pc, #48]	; (4005a0 <afec_enable_interrupt+0x34>)
  40056e:	4299      	cmp	r1, r3
  400570:	d007      	beq.n	400582 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400572:	290f      	cmp	r1, #15
  400574:	d80b      	bhi.n	40058e <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  400576:	d006      	beq.n	400586 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400578:	2301      	movs	r3, #1
  40057a:	fa03 f101 	lsl.w	r1, r3, r1
  40057e:	6241      	str	r1, [r0, #36]	; 0x24
  400580:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400582:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400584:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  400586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40058a:	6243      	str	r3, [r0, #36]	; 0x24
  40058c:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40058e:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400590:	bf94      	ite	ls
  400592:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  400594:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400596:	2301      	movs	r3, #1
  400598:	fa03 f101 	lsl.w	r1, r3, r1
  40059c:	6241      	str	r1, [r0, #36]	; 0x24
  40059e:	4770      	bx	lr
  4005a0:	df00ffff 	.word	0xdf00ffff

004005a4 <afec_set_callback>:
{
  4005a4:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4005a6:	4c11      	ldr	r4, [pc, #68]	; (4005ec <afec_set_callback+0x48>)
  4005a8:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4005aa:	bf0c      	ite	eq
  4005ac:	2417      	moveq	r4, #23
  4005ae:	2400      	movne	r4, #0
  4005b0:	440c      	add	r4, r1
  4005b2:	4d0f      	ldr	r5, [pc, #60]	; (4005f0 <afec_set_callback+0x4c>)
  4005b4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4005b8:	d10a      	bne.n	4005d0 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005ba:	4a0e      	ldr	r2, [pc, #56]	; (4005f4 <afec_set_callback+0x50>)
  4005bc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  4005c0:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4005c4:	011b      	lsls	r3, r3, #4
  4005c6:	b2db      	uxtb	r3, r3
  4005c8:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005cc:	6014      	str	r4, [r2, #0]
  4005ce:	e009      	b.n	4005e4 <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005d0:	4a08      	ldr	r2, [pc, #32]	; (4005f4 <afec_set_callback+0x50>)
  4005d2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4005d6:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4005da:	011b      	lsls	r3, r3, #4
  4005dc:	b2db      	uxtb	r3, r3
  4005de:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005e2:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  4005e4:	4b04      	ldr	r3, [pc, #16]	; (4005f8 <afec_set_callback+0x54>)
  4005e6:	4798      	blx	r3
  4005e8:	bd38      	pop	{r3, r4, r5, pc}
  4005ea:	bf00      	nop
  4005ec:	400b4000 	.word	0x400b4000
  4005f0:	20000ac0 	.word	0x20000ac0
  4005f4:	e000e100 	.word	0xe000e100
  4005f8:	0040056d 	.word	0x0040056d

004005fc <afec_disable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4005fc:	4b0c      	ldr	r3, [pc, #48]	; (400630 <afec_disable_interrupt+0x34>)
  4005fe:	4299      	cmp	r1, r3
  400600:	d007      	beq.n	400612 <afec_disable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400602:	290f      	cmp	r1, #15
  400604:	d80b      	bhi.n	40061e <afec_disable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  400606:	d006      	beq.n	400616 <afec_disable_interrupt+0x1a>
			afec->AFEC_IDR = 1 << interrupt_source;
  400608:	2301      	movs	r3, #1
  40060a:	fa03 f101 	lsl.w	r1, r3, r1
  40060e:	6281      	str	r1, [r0, #40]	; 0x28
  400610:	4770      	bx	lr
		afec->AFEC_IDR = AFEC_INTERRUPT_ALL;
  400612:	6283      	str	r3, [r0, #40]	; 0x28
		return;
  400614:	4770      	bx	lr
			afec->AFEC_IDR = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  400616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40061a:	6283      	str	r3, [r0, #40]	; 0x28
  40061c:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40061e:	2914      	cmp	r1, #20
		afec->AFEC_IDR = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400620:	bf94      	ite	ls
  400622:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  400624:	3109      	addhi	r1, #9
		afec->AFEC_IDR = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400626:	2301      	movs	r3, #1
  400628:	fa03 f101 	lsl.w	r1, r3, r1
  40062c:	6281      	str	r1, [r0, #40]	; 0x28
  40062e:	4770      	bx	lr
  400630:	df00ffff 	.word	0xdf00ffff

00400634 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400634:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400636:	4802      	ldr	r0, [pc, #8]	; (400640 <AFEC0_Handler+0xc>)
  400638:	4b02      	ldr	r3, [pc, #8]	; (400644 <AFEC0_Handler+0x10>)
  40063a:	4798      	blx	r3
  40063c:	bd08      	pop	{r3, pc}
  40063e:	bf00      	nop
  400640:	400b0000 	.word	0x400b0000
  400644:	00400391 	.word	0x00400391

00400648 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400648:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40064a:	4802      	ldr	r0, [pc, #8]	; (400654 <AFEC1_Handler+0xc>)
  40064c:	4b02      	ldr	r3, [pc, #8]	; (400658 <AFEC1_Handler+0x10>)
  40064e:	4798      	blx	r3
  400650:	bd08      	pop	{r3, pc}
  400652:	bf00      	nop
  400654:	400b4000 	.word	0x400b4000
  400658:	00400391 	.word	0x00400391

0040065c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40065c:	b500      	push	{lr}
  40065e:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400660:	4b13      	ldr	r3, [pc, #76]	; (4006b0 <afec_enable+0x54>)
  400662:	4298      	cmp	r0, r3
  400664:	bf0c      	ite	eq
  400666:	201f      	moveq	r0, #31
  400668:	201e      	movne	r0, #30
  40066a:	4b12      	ldr	r3, [pc, #72]	; (4006b4 <afec_enable+0x58>)
  40066c:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40066e:	4b12      	ldr	r3, [pc, #72]	; (4006b8 <afec_enable+0x5c>)
  400670:	789b      	ldrb	r3, [r3, #2]
  400672:	2bff      	cmp	r3, #255	; 0xff
  400674:	d01a      	beq.n	4006ac <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400676:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40067a:	fab3 f383 	clz	r3, r3
  40067e:	095b      	lsrs	r3, r3, #5
  400680:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400682:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400684:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400688:	2200      	movs	r2, #0
  40068a:	4b0c      	ldr	r3, [pc, #48]	; (4006bc <afec_enable+0x60>)
  40068c:	701a      	strb	r2, [r3, #0]
	return flags;
  40068e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400690:	4a09      	ldr	r2, [pc, #36]	; (4006b8 <afec_enable+0x5c>)
  400692:	7893      	ldrb	r3, [r2, #2]
  400694:	3301      	adds	r3, #1
  400696:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400698:	b129      	cbz	r1, 4006a6 <afec_enable+0x4a>
		cpu_irq_enable();
  40069a:	2201      	movs	r2, #1
  40069c:	4b07      	ldr	r3, [pc, #28]	; (4006bc <afec_enable+0x60>)
  40069e:	701a      	strb	r2, [r3, #0]
  4006a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4006a4:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4006a6:	b003      	add	sp, #12
  4006a8:	f85d fb04 	ldr.w	pc, [sp], #4
  4006ac:	e7fe      	b.n	4006ac <afec_enable+0x50>
  4006ae:	bf00      	nop
  4006b0:	400b4000 	.word	0x400b4000
  4006b4:	004007a9 	.word	0x004007a9
  4006b8:	20000aac 	.word	0x20000aac
  4006bc:	20000000 	.word	0x20000000

004006c0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4006c0:	4a17      	ldr	r2, [pc, #92]	; (400720 <pmc_switch_mck_to_pllack+0x60>)
  4006c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006c8:	4318      	orrs	r0, r3
  4006ca:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006ce:	f013 0f08 	tst.w	r3, #8
  4006d2:	d10a      	bne.n	4006ea <pmc_switch_mck_to_pllack+0x2a>
  4006d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4006d8:	4911      	ldr	r1, [pc, #68]	; (400720 <pmc_switch_mck_to_pllack+0x60>)
  4006da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006dc:	f012 0f08 	tst.w	r2, #8
  4006e0:	d103      	bne.n	4006ea <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006e2:	3b01      	subs	r3, #1
  4006e4:	d1f9      	bne.n	4006da <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4006e6:	2001      	movs	r0, #1
  4006e8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4006ea:	4a0d      	ldr	r2, [pc, #52]	; (400720 <pmc_switch_mck_to_pllack+0x60>)
  4006ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006ee:	f023 0303 	bic.w	r3, r3, #3
  4006f2:	f043 0302 	orr.w	r3, r3, #2
  4006f6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006fa:	f013 0f08 	tst.w	r3, #8
  4006fe:	d10a      	bne.n	400716 <pmc_switch_mck_to_pllack+0x56>
  400700:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400704:	4906      	ldr	r1, [pc, #24]	; (400720 <pmc_switch_mck_to_pllack+0x60>)
  400706:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400708:	f012 0f08 	tst.w	r2, #8
  40070c:	d105      	bne.n	40071a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40070e:	3b01      	subs	r3, #1
  400710:	d1f9      	bne.n	400706 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400712:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400714:	4770      	bx	lr
	return 0;
  400716:	2000      	movs	r0, #0
  400718:	4770      	bx	lr
  40071a:	2000      	movs	r0, #0
  40071c:	4770      	bx	lr
  40071e:	bf00      	nop
  400720:	400e0400 	.word	0x400e0400

00400724 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400724:	b9c8      	cbnz	r0, 40075a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400726:	4a11      	ldr	r2, [pc, #68]	; (40076c <pmc_switch_mainck_to_xtal+0x48>)
  400728:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40072a:	0209      	lsls	r1, r1, #8
  40072c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40072e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400732:	f023 0303 	bic.w	r3, r3, #3
  400736:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40073a:	f043 0301 	orr.w	r3, r3, #1
  40073e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400740:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400742:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400744:	f013 0f01 	tst.w	r3, #1
  400748:	d0fb      	beq.n	400742 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40074a:	4a08      	ldr	r2, [pc, #32]	; (40076c <pmc_switch_mainck_to_xtal+0x48>)
  40074c:	6a13      	ldr	r3, [r2, #32]
  40074e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400756:	6213      	str	r3, [r2, #32]
  400758:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40075a:	4904      	ldr	r1, [pc, #16]	; (40076c <pmc_switch_mainck_to_xtal+0x48>)
  40075c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40075e:	4a04      	ldr	r2, [pc, #16]	; (400770 <pmc_switch_mainck_to_xtal+0x4c>)
  400760:	401a      	ands	r2, r3
  400762:	4b04      	ldr	r3, [pc, #16]	; (400774 <pmc_switch_mainck_to_xtal+0x50>)
  400764:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400766:	620b      	str	r3, [r1, #32]
  400768:	4770      	bx	lr
  40076a:	bf00      	nop
  40076c:	400e0400 	.word	0x400e0400
  400770:	fec8fffc 	.word	0xfec8fffc
  400774:	01370002 	.word	0x01370002

00400778 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400778:	4b02      	ldr	r3, [pc, #8]	; (400784 <pmc_osc_is_ready_mainck+0xc>)
  40077a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40077c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400780:	4770      	bx	lr
  400782:	bf00      	nop
  400784:	400e0400 	.word	0x400e0400

00400788 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400788:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40078c:	4b01      	ldr	r3, [pc, #4]	; (400794 <pmc_disable_pllack+0xc>)
  40078e:	629a      	str	r2, [r3, #40]	; 0x28
  400790:	4770      	bx	lr
  400792:	bf00      	nop
  400794:	400e0400 	.word	0x400e0400

00400798 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400798:	4b02      	ldr	r3, [pc, #8]	; (4007a4 <pmc_is_locked_pllack+0xc>)
  40079a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40079c:	f000 0002 	and.w	r0, r0, #2
  4007a0:	4770      	bx	lr
  4007a2:	bf00      	nop
  4007a4:	400e0400 	.word	0x400e0400

004007a8 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4007a8:	282f      	cmp	r0, #47	; 0x2f
  4007aa:	d81e      	bhi.n	4007ea <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4007ac:	281f      	cmp	r0, #31
  4007ae:	d80c      	bhi.n	4007ca <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4007b0:	4b11      	ldr	r3, [pc, #68]	; (4007f8 <pmc_enable_periph_clk+0x50>)
  4007b2:	699a      	ldr	r2, [r3, #24]
  4007b4:	2301      	movs	r3, #1
  4007b6:	4083      	lsls	r3, r0
  4007b8:	4393      	bics	r3, r2
  4007ba:	d018      	beq.n	4007ee <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4007bc:	2301      	movs	r3, #1
  4007be:	fa03 f000 	lsl.w	r0, r3, r0
  4007c2:	4b0d      	ldr	r3, [pc, #52]	; (4007f8 <pmc_enable_periph_clk+0x50>)
  4007c4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007c6:	2000      	movs	r0, #0
  4007c8:	4770      	bx	lr
		ul_id -= 32;
  4007ca:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4007cc:	4b0a      	ldr	r3, [pc, #40]	; (4007f8 <pmc_enable_periph_clk+0x50>)
  4007ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4007d2:	2301      	movs	r3, #1
  4007d4:	4083      	lsls	r3, r0
  4007d6:	4393      	bics	r3, r2
  4007d8:	d00b      	beq.n	4007f2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4007da:	2301      	movs	r3, #1
  4007dc:	fa03 f000 	lsl.w	r0, r3, r0
  4007e0:	4b05      	ldr	r3, [pc, #20]	; (4007f8 <pmc_enable_periph_clk+0x50>)
  4007e2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4007e6:	2000      	movs	r0, #0
  4007e8:	4770      	bx	lr
		return 1;
  4007ea:	2001      	movs	r0, #1
  4007ec:	4770      	bx	lr
	return 0;
  4007ee:	2000      	movs	r0, #0
  4007f0:	4770      	bx	lr
  4007f2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4007f4:	4770      	bx	lr
  4007f6:	bf00      	nop
  4007f8:	400e0400 	.word	0x400e0400

004007fc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4007fc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4007fe:	0189      	lsls	r1, r1, #6
  400800:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400802:	2402      	movs	r4, #2
  400804:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400806:	f04f 31ff 	mov.w	r1, #4294967295
  40080a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40080c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40080e:	605a      	str	r2, [r3, #4]
}
  400810:	f85d 4b04 	ldr.w	r4, [sp], #4
  400814:	4770      	bx	lr

00400816 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400816:	0189      	lsls	r1, r1, #6
  400818:	2305      	movs	r3, #5
  40081a:	5043      	str	r3, [r0, r1]
  40081c:	4770      	bx	lr

0040081e <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  40081e:	0189      	lsls	r1, r1, #6
  400820:	2302      	movs	r3, #2
  400822:	5043      	str	r3, [r0, r1]
  400824:	4770      	bx	lr

00400826 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400826:	b4f0      	push	{r4, r5, r6, r7}
  400828:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40082a:	2402      	movs	r4, #2
  40082c:	9401      	str	r4, [sp, #4]
  40082e:	2408      	movs	r4, #8
  400830:	9402      	str	r4, [sp, #8]
  400832:	2420      	movs	r4, #32
  400834:	9403      	str	r4, [sp, #12]
  400836:	2480      	movs	r4, #128	; 0x80
  400838:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40083a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40083c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40083e:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400840:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400844:	d814      	bhi.n	400870 <tc_find_mck_divisor+0x4a>
  400846:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400848:	42a0      	cmp	r0, r4
  40084a:	d217      	bcs.n	40087c <tc_find_mck_divisor+0x56>
  40084c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40084e:	af01      	add	r7, sp, #4
  400850:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400854:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400858:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  40085a:	4284      	cmp	r4, r0
  40085c:	d30a      	bcc.n	400874 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  40085e:	4286      	cmp	r6, r0
  400860:	d90d      	bls.n	40087e <tc_find_mck_divisor+0x58>
			ul_index++) {
  400862:	3501      	adds	r5, #1
	for (ul_index = 0;
  400864:	2d05      	cmp	r5, #5
  400866:	d1f3      	bne.n	400850 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400868:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  40086a:	b006      	add	sp, #24
  40086c:	bcf0      	pop	{r4, r5, r6, r7}
  40086e:	4770      	bx	lr
			return 0;
  400870:	2000      	movs	r0, #0
  400872:	e7fa      	b.n	40086a <tc_find_mck_divisor+0x44>
  400874:	2000      	movs	r0, #0
  400876:	e7f8      	b.n	40086a <tc_find_mck_divisor+0x44>
	return 1;
  400878:	2001      	movs	r0, #1
  40087a:	e7f6      	b.n	40086a <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40087c:	2500      	movs	r5, #0
	if (p_uldiv) {
  40087e:	b12a      	cbz	r2, 40088c <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400880:	a906      	add	r1, sp, #24
  400882:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400886:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40088a:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40088c:	2b00      	cmp	r3, #0
  40088e:	d0f3      	beq.n	400878 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400890:	601d      	str	r5, [r3, #0]
	return 1;
  400892:	2001      	movs	r0, #1
  400894:	e7e9      	b.n	40086a <tc_find_mck_divisor+0x44>

00400896 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400896:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400898:	23ac      	movs	r3, #172	; 0xac
  40089a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40089c:	680b      	ldr	r3, [r1, #0]
  40089e:	684a      	ldr	r2, [r1, #4]
  4008a0:	fbb3 f3f2 	udiv	r3, r3, r2
  4008a4:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4008a6:	1e5c      	subs	r4, r3, #1
  4008a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4008ac:	4294      	cmp	r4, r2
  4008ae:	d80c      	bhi.n	4008ca <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  4008b0:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4008b2:	688b      	ldr	r3, [r1, #8]
  4008b4:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4008b6:	f240 2302 	movw	r3, #514	; 0x202
  4008ba:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4008be:	2350      	movs	r3, #80	; 0x50
  4008c0:	6003      	str	r3, [r0, #0]

	return 0;
  4008c2:	2000      	movs	r0, #0
}
  4008c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008c8:	4770      	bx	lr
		return 1;
  4008ca:	2001      	movs	r0, #1
  4008cc:	e7fa      	b.n	4008c4 <uart_init+0x2e>

004008ce <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4008ce:	6943      	ldr	r3, [r0, #20]
  4008d0:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4008d4:	bf1a      	itte	ne
  4008d6:	61c1      	strne	r1, [r0, #28]
	return 0;
  4008d8:	2000      	movne	r0, #0
		return 1;
  4008da:	2001      	moveq	r0, #1
}
  4008dc:	4770      	bx	lr

004008de <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4008de:	6943      	ldr	r3, [r0, #20]
  4008e0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4008e4:	bf1d      	ittte	ne
  4008e6:	6983      	ldrne	r3, [r0, #24]
  4008e8:	700b      	strbne	r3, [r1, #0]
	return 0;
  4008ea:	2000      	movne	r0, #0
		return 1;
  4008ec:	2001      	moveq	r0, #1
}
  4008ee:	4770      	bx	lr

004008f0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4008f0:	6943      	ldr	r3, [r0, #20]
  4008f2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4008f6:	bf1d      	ittte	ne
  4008f8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4008fc:	61c1      	strne	r1, [r0, #28]
	return 0;
  4008fe:	2000      	movne	r0, #0
		return 1;
  400900:	2001      	moveq	r0, #1
}
  400902:	4770      	bx	lr

00400904 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400904:	6943      	ldr	r3, [r0, #20]
  400906:	f013 0f01 	tst.w	r3, #1
  40090a:	d005      	beq.n	400918 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40090c:	6983      	ldr	r3, [r0, #24]
  40090e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400912:	600b      	str	r3, [r1, #0]

	return 0;
  400914:	2000      	movs	r0, #0
  400916:	4770      	bx	lr
		return 1;
  400918:	2001      	movs	r0, #1
}
  40091a:	4770      	bx	lr

0040091c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40091c:	e7fe      	b.n	40091c <Dummy_Handler>
	...

00400920 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400920:	b500      	push	{lr}
  400922:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400924:	4b25      	ldr	r3, [pc, #148]	; (4009bc <Reset_Handler+0x9c>)
  400926:	4a26      	ldr	r2, [pc, #152]	; (4009c0 <Reset_Handler+0xa0>)
  400928:	429a      	cmp	r2, r3
  40092a:	d010      	beq.n	40094e <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  40092c:	4b25      	ldr	r3, [pc, #148]	; (4009c4 <Reset_Handler+0xa4>)
  40092e:	4a23      	ldr	r2, [pc, #140]	; (4009bc <Reset_Handler+0x9c>)
  400930:	429a      	cmp	r2, r3
  400932:	d20c      	bcs.n	40094e <Reset_Handler+0x2e>
  400934:	3b01      	subs	r3, #1
  400936:	1a9b      	subs	r3, r3, r2
  400938:	f023 0303 	bic.w	r3, r3, #3
  40093c:	3304      	adds	r3, #4
  40093e:	4413      	add	r3, r2
  400940:	491f      	ldr	r1, [pc, #124]	; (4009c0 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400942:	f851 0b04 	ldr.w	r0, [r1], #4
  400946:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  40094a:	429a      	cmp	r2, r3
  40094c:	d1f9      	bne.n	400942 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40094e:	4b1e      	ldr	r3, [pc, #120]	; (4009c8 <Reset_Handler+0xa8>)
  400950:	4a1e      	ldr	r2, [pc, #120]	; (4009cc <Reset_Handler+0xac>)
  400952:	429a      	cmp	r2, r3
  400954:	d20a      	bcs.n	40096c <Reset_Handler+0x4c>
  400956:	3b01      	subs	r3, #1
  400958:	1a9b      	subs	r3, r3, r2
  40095a:	f023 0303 	bic.w	r3, r3, #3
  40095e:	3304      	adds	r3, #4
  400960:	4413      	add	r3, r2
		*pDest++ = 0;
  400962:	2100      	movs	r1, #0
  400964:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400968:	4293      	cmp	r3, r2
  40096a:	d1fb      	bne.n	400964 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40096c:	4a18      	ldr	r2, [pc, #96]	; (4009d0 <Reset_Handler+0xb0>)
  40096e:	4b19      	ldr	r3, [pc, #100]	; (4009d4 <Reset_Handler+0xb4>)
  400970:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400974:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400976:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40097a:	fab3 f383 	clz	r3, r3
  40097e:	095b      	lsrs	r3, r3, #5
  400980:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400982:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400984:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400988:	2200      	movs	r2, #0
  40098a:	4b13      	ldr	r3, [pc, #76]	; (4009d8 <Reset_Handler+0xb8>)
  40098c:	701a      	strb	r2, [r3, #0]
	return flags;
  40098e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400990:	4a12      	ldr	r2, [pc, #72]	; (4009dc <Reset_Handler+0xbc>)
  400992:	6813      	ldr	r3, [r2, #0]
  400994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400998:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40099a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40099e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  4009a2:	b129      	cbz	r1, 4009b0 <Reset_Handler+0x90>
		cpu_irq_enable();
  4009a4:	2201      	movs	r2, #1
  4009a6:	4b0c      	ldr	r3, [pc, #48]	; (4009d8 <Reset_Handler+0xb8>)
  4009a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4009aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009ae:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4009b0:	4b0b      	ldr	r3, [pc, #44]	; (4009e0 <Reset_Handler+0xc0>)
  4009b2:	4798      	blx	r3

	/* Branch to main function */
	main();
  4009b4:	4b0b      	ldr	r3, [pc, #44]	; (4009e4 <Reset_Handler+0xc4>)
  4009b6:	4798      	blx	r3
  4009b8:	e7fe      	b.n	4009b8 <Reset_Handler+0x98>
  4009ba:	bf00      	nop
  4009bc:	20000000 	.word	0x20000000
  4009c0:	0040423c 	.word	0x0040423c
  4009c4:	200009b8 	.word	0x200009b8
  4009c8:	20008de0 	.word	0x20008de0
  4009cc:	200009b8 	.word	0x200009b8
  4009d0:	e000ed00 	.word	0xe000ed00
  4009d4:	00400000 	.word	0x00400000
  4009d8:	20000000 	.word	0x20000000
  4009dc:	e000ed88 	.word	0xe000ed88
  4009e0:	00400fed 	.word	0x00400fed
  4009e4:	00400d7d 	.word	0x00400d7d

004009e8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4009e8:	4b3b      	ldr	r3, [pc, #236]	; (400ad8 <SystemCoreClockUpdate+0xf0>)
  4009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009ec:	f003 0303 	and.w	r3, r3, #3
  4009f0:	2b01      	cmp	r3, #1
  4009f2:	d01d      	beq.n	400a30 <SystemCoreClockUpdate+0x48>
  4009f4:	b183      	cbz	r3, 400a18 <SystemCoreClockUpdate+0x30>
  4009f6:	2b02      	cmp	r3, #2
  4009f8:	d036      	beq.n	400a68 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4009fa:	4b37      	ldr	r3, [pc, #220]	; (400ad8 <SystemCoreClockUpdate+0xf0>)
  4009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a02:	2b70      	cmp	r3, #112	; 0x70
  400a04:	d05f      	beq.n	400ac6 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400a06:	4b34      	ldr	r3, [pc, #208]	; (400ad8 <SystemCoreClockUpdate+0xf0>)
  400a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a0a:	4934      	ldr	r1, [pc, #208]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400a0c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400a10:	680b      	ldr	r3, [r1, #0]
  400a12:	40d3      	lsrs	r3, r2
  400a14:	600b      	str	r3, [r1, #0]
  400a16:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400a18:	4b31      	ldr	r3, [pc, #196]	; (400ae0 <SystemCoreClockUpdate+0xf8>)
  400a1a:	695b      	ldr	r3, [r3, #20]
  400a1c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a20:	bf14      	ite	ne
  400a22:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a26:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a2a:	4b2c      	ldr	r3, [pc, #176]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400a2c:	601a      	str	r2, [r3, #0]
  400a2e:	e7e4      	b.n	4009fa <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400a30:	4b29      	ldr	r3, [pc, #164]	; (400ad8 <SystemCoreClockUpdate+0xf0>)
  400a32:	6a1b      	ldr	r3, [r3, #32]
  400a34:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a38:	d003      	beq.n	400a42 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400a3a:	4a2a      	ldr	r2, [pc, #168]	; (400ae4 <SystemCoreClockUpdate+0xfc>)
  400a3c:	4b27      	ldr	r3, [pc, #156]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400a3e:	601a      	str	r2, [r3, #0]
  400a40:	e7db      	b.n	4009fa <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a42:	4a29      	ldr	r2, [pc, #164]	; (400ae8 <SystemCoreClockUpdate+0x100>)
  400a44:	4b25      	ldr	r3, [pc, #148]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400a46:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400a48:	4b23      	ldr	r3, [pc, #140]	; (400ad8 <SystemCoreClockUpdate+0xf0>)
  400a4a:	6a1b      	ldr	r3, [r3, #32]
  400a4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a50:	2b10      	cmp	r3, #16
  400a52:	d005      	beq.n	400a60 <SystemCoreClockUpdate+0x78>
  400a54:	2b20      	cmp	r3, #32
  400a56:	d1d0      	bne.n	4009fa <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400a58:	4a22      	ldr	r2, [pc, #136]	; (400ae4 <SystemCoreClockUpdate+0xfc>)
  400a5a:	4b20      	ldr	r3, [pc, #128]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400a5c:	601a      	str	r2, [r3, #0]
				break;
  400a5e:	e7cc      	b.n	4009fa <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400a60:	4a22      	ldr	r2, [pc, #136]	; (400aec <SystemCoreClockUpdate+0x104>)
  400a62:	4b1e      	ldr	r3, [pc, #120]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400a64:	601a      	str	r2, [r3, #0]
				break;
  400a66:	e7c8      	b.n	4009fa <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400a68:	4b1b      	ldr	r3, [pc, #108]	; (400ad8 <SystemCoreClockUpdate+0xf0>)
  400a6a:	6a1b      	ldr	r3, [r3, #32]
  400a6c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a70:	d016      	beq.n	400aa0 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400a72:	4a1c      	ldr	r2, [pc, #112]	; (400ae4 <SystemCoreClockUpdate+0xfc>)
  400a74:	4b19      	ldr	r3, [pc, #100]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400a76:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400a78:	4b17      	ldr	r3, [pc, #92]	; (400ad8 <SystemCoreClockUpdate+0xf0>)
  400a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a7c:	f003 0303 	and.w	r3, r3, #3
  400a80:	2b02      	cmp	r3, #2
  400a82:	d1ba      	bne.n	4009fa <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400a84:	4a14      	ldr	r2, [pc, #80]	; (400ad8 <SystemCoreClockUpdate+0xf0>)
  400a86:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400a88:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400a8a:	4814      	ldr	r0, [pc, #80]	; (400adc <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400a8c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400a90:	6803      	ldr	r3, [r0, #0]
  400a92:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400a96:	b2d2      	uxtb	r2, r2
  400a98:	fbb3 f3f2 	udiv	r3, r3, r2
  400a9c:	6003      	str	r3, [r0, #0]
  400a9e:	e7ac      	b.n	4009fa <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400aa0:	4a11      	ldr	r2, [pc, #68]	; (400ae8 <SystemCoreClockUpdate+0x100>)
  400aa2:	4b0e      	ldr	r3, [pc, #56]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400aa4:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400aa6:	4b0c      	ldr	r3, [pc, #48]	; (400ad8 <SystemCoreClockUpdate+0xf0>)
  400aa8:	6a1b      	ldr	r3, [r3, #32]
  400aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400aae:	2b10      	cmp	r3, #16
  400ab0:	d005      	beq.n	400abe <SystemCoreClockUpdate+0xd6>
  400ab2:	2b20      	cmp	r3, #32
  400ab4:	d1e0      	bne.n	400a78 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400ab6:	4a0b      	ldr	r2, [pc, #44]	; (400ae4 <SystemCoreClockUpdate+0xfc>)
  400ab8:	4b08      	ldr	r3, [pc, #32]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400aba:	601a      	str	r2, [r3, #0]
				break;
  400abc:	e7dc      	b.n	400a78 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400abe:	4a0b      	ldr	r2, [pc, #44]	; (400aec <SystemCoreClockUpdate+0x104>)
  400ac0:	4b06      	ldr	r3, [pc, #24]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400ac2:	601a      	str	r2, [r3, #0]
				break;
  400ac4:	e7d8      	b.n	400a78 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400ac6:	4a05      	ldr	r2, [pc, #20]	; (400adc <SystemCoreClockUpdate+0xf4>)
  400ac8:	6813      	ldr	r3, [r2, #0]
  400aca:	4909      	ldr	r1, [pc, #36]	; (400af0 <SystemCoreClockUpdate+0x108>)
  400acc:	fba1 1303 	umull	r1, r3, r1, r3
  400ad0:	085b      	lsrs	r3, r3, #1
  400ad2:	6013      	str	r3, [r2, #0]
  400ad4:	4770      	bx	lr
  400ad6:	bf00      	nop
  400ad8:	400e0400 	.word	0x400e0400
  400adc:	20000004 	.word	0x20000004
  400ae0:	400e1810 	.word	0x400e1810
  400ae4:	00b71b00 	.word	0x00b71b00
  400ae8:	003d0900 	.word	0x003d0900
  400aec:	007a1200 	.word	0x007a1200
  400af0:	aaaaaaab 	.word	0xaaaaaaab

00400af4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400af4:	4b12      	ldr	r3, [pc, #72]	; (400b40 <system_init_flash+0x4c>)
  400af6:	4298      	cmp	r0, r3
  400af8:	d911      	bls.n	400b1e <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400afa:	4b12      	ldr	r3, [pc, #72]	; (400b44 <system_init_flash+0x50>)
  400afc:	4298      	cmp	r0, r3
  400afe:	d913      	bls.n	400b28 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400b00:	4b11      	ldr	r3, [pc, #68]	; (400b48 <system_init_flash+0x54>)
  400b02:	4298      	cmp	r0, r3
  400b04:	d914      	bls.n	400b30 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400b06:	4b11      	ldr	r3, [pc, #68]	; (400b4c <system_init_flash+0x58>)
  400b08:	4298      	cmp	r0, r3
  400b0a:	d915      	bls.n	400b38 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400b0c:	4b10      	ldr	r3, [pc, #64]	; (400b50 <system_init_flash+0x5c>)
  400b0e:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b10:	bf94      	ite	ls
  400b12:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b16:	4a0f      	ldrhi	r2, [pc, #60]	; (400b54 <system_init_flash+0x60>)
  400b18:	4b0f      	ldr	r3, [pc, #60]	; (400b58 <system_init_flash+0x64>)
  400b1a:	601a      	str	r2, [r3, #0]
  400b1c:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400b22:	4b0d      	ldr	r3, [pc, #52]	; (400b58 <system_init_flash+0x64>)
  400b24:	601a      	str	r2, [r3, #0]
  400b26:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b28:	4a0c      	ldr	r2, [pc, #48]	; (400b5c <system_init_flash+0x68>)
  400b2a:	4b0b      	ldr	r3, [pc, #44]	; (400b58 <system_init_flash+0x64>)
  400b2c:	601a      	str	r2, [r3, #0]
  400b2e:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400b30:	4a0b      	ldr	r2, [pc, #44]	; (400b60 <system_init_flash+0x6c>)
  400b32:	4b09      	ldr	r3, [pc, #36]	; (400b58 <system_init_flash+0x64>)
  400b34:	601a      	str	r2, [r3, #0]
  400b36:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400b38:	4a0a      	ldr	r2, [pc, #40]	; (400b64 <system_init_flash+0x70>)
  400b3a:	4b07      	ldr	r3, [pc, #28]	; (400b58 <system_init_flash+0x64>)
  400b3c:	601a      	str	r2, [r3, #0]
  400b3e:	4770      	bx	lr
  400b40:	01312cff 	.word	0x01312cff
  400b44:	026259ff 	.word	0x026259ff
  400b48:	039386ff 	.word	0x039386ff
  400b4c:	04c4b3ff 	.word	0x04c4b3ff
  400b50:	05f5e0ff 	.word	0x05f5e0ff
  400b54:	04000500 	.word	0x04000500
  400b58:	400e0a00 	.word	0x400e0a00
  400b5c:	04000100 	.word	0x04000100
  400b60:	04000200 	.word	0x04000200
  400b64:	04000300 	.word	0x04000300

00400b68 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400b68:	4b0a      	ldr	r3, [pc, #40]	; (400b94 <_sbrk+0x2c>)
  400b6a:	681b      	ldr	r3, [r3, #0]
  400b6c:	b153      	cbz	r3, 400b84 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400b6e:	4b09      	ldr	r3, [pc, #36]	; (400b94 <_sbrk+0x2c>)
  400b70:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400b72:	181a      	adds	r2, r3, r0
  400b74:	4908      	ldr	r1, [pc, #32]	; (400b98 <_sbrk+0x30>)
  400b76:	4291      	cmp	r1, r2
  400b78:	db08      	blt.n	400b8c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400b7a:	4610      	mov	r0, r2
  400b7c:	4a05      	ldr	r2, [pc, #20]	; (400b94 <_sbrk+0x2c>)
  400b7e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400b80:	4618      	mov	r0, r3
  400b82:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400b84:	4a05      	ldr	r2, [pc, #20]	; (400b9c <_sbrk+0x34>)
  400b86:	4b03      	ldr	r3, [pc, #12]	; (400b94 <_sbrk+0x2c>)
  400b88:	601a      	str	r2, [r3, #0]
  400b8a:	e7f0      	b.n	400b6e <_sbrk+0x6>
		return (caddr_t) -1;	
  400b8c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop
  400b94:	200009d4 	.word	0x200009d4
  400b98:	2001fffc 	.word	0x2001fffc
  400b9c:	2000bde0 	.word	0x2000bde0

00400ba0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400ba0:	f04f 30ff 	mov.w	r0, #4294967295
  400ba4:	4770      	bx	lr

00400ba6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400baa:	604b      	str	r3, [r1, #4]

	return 0;
}
  400bac:	2000      	movs	r0, #0
  400bae:	4770      	bx	lr

00400bb0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400bb0:	2001      	movs	r0, #1
  400bb2:	4770      	bx	lr

00400bb4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400bb4:	2000      	movs	r0, #0
  400bb6:	4770      	bx	lr

00400bb8 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  400bb8:	b500      	push	{lr}
  400bba:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  400bbc:	2201      	movs	r2, #1
  400bbe:	f10d 0107 	add.w	r1, sp, #7
  400bc2:	4810      	ldr	r0, [pc, #64]	; (400c04 <USART0_Handler+0x4c>)
  400bc4:	4b10      	ldr	r3, [pc, #64]	; (400c08 <USART0_Handler+0x50>)
  400bc6:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400bc8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400bca:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  400bce:	2200      	movs	r2, #0
  400bd0:	4b0e      	ldr	r3, [pc, #56]	; (400c0c <USART0_Handler+0x54>)
  400bd2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  400bd4:	4b0e      	ldr	r3, [pc, #56]	; (400c10 <USART0_Handler+0x58>)
  400bd6:	781b      	ldrb	r3, [r3, #0]
  400bd8:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400bdc:	4a0d      	ldr	r2, [pc, #52]	; (400c14 <USART0_Handler+0x5c>)
  400bde:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  400be0:	2b9b      	cmp	r3, #155	; 0x9b
  400be2:	d00b      	beq.n	400bfc <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  400be4:	3301      	adds	r3, #1
  400be6:	4a0a      	ldr	r2, [pc, #40]	; (400c10 <USART0_Handler+0x58>)
  400be8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  400bea:	2201      	movs	r2, #1
  400bec:	4b07      	ldr	r3, [pc, #28]	; (400c0c <USART0_Handler+0x54>)
  400bee:	701a      	strb	r2, [r3, #0]
  400bf0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400bf4:	b662      	cpsie	i
}
  400bf6:	b003      	add	sp, #12
  400bf8:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  400bfc:	2200      	movs	r2, #0
  400bfe:	4b04      	ldr	r3, [pc, #16]	; (400c10 <USART0_Handler+0x58>)
  400c00:	701a      	strb	r2, [r3, #0]
  400c02:	e7f2      	b.n	400bea <USART0_Handler+0x32>
  400c04:	400a0000 	.word	0x400a0000
  400c08:	004001cd 	.word	0x004001cd
  400c0c:	20000000 	.word	0x20000000
  400c10:	20000a74 	.word	0x20000a74
  400c14:	200009d8 	.word	0x200009d8

00400c18 <afec0_data_ready>:
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  400c18:	4b0a      	ldr	r3, [pc, #40]	; (400c44 <afec0_data_ready+0x2c>)
  400c1a:	6a1b      	ldr	r3, [r3, #32]
  400c1c:	b29b      	uxth	r3, r3
/**
 * \brief AFEC0 DRDY interrupt callback function.
 */
static void afec0_data_ready(void)
{
	g_afec0_sample_data = afec_get_latest_value(AFEC0);
  400c1e:	ee07 3a90 	vmov	s15, r3
  400c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
  400c26:	4b08      	ldr	r3, [pc, #32]	; (400c48 <afec0_data_ready+0x30>)
  400c28:	edc3 7a00 	vstr	s15, [r3]
	//puts("BPM channel Voltage:");
	//print_sample(g_afec0_sample_data);
	buffer[bufferIndex]= g_afec0_sample_data;
  400c2c:	4907      	ldr	r1, [pc, #28]	; (400c4c <afec0_data_ready+0x34>)
  400c2e:	880a      	ldrh	r2, [r1, #0]
  400c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  400c34:	ee17 3a90 	vmov	r3, s15
  400c38:	4805      	ldr	r0, [pc, #20]	; (400c50 <afec0_data_ready+0x38>)
  400c3a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
	bufferIndex++;
  400c3e:	3201      	adds	r2, #1
  400c40:	800a      	strh	r2, [r1, #0]
  400c42:	4770      	bx	lr
  400c44:	400b0000 	.word	0x400b0000
  400c48:	20008db4 	.word	0x20008db4
  400c4c:	20000a76 	.word	0x20000a76
  400c50:	20000b7c 	.word	0x20000b7c

00400c54 <afec1_data_ready>:
  400c54:	4b05      	ldr	r3, [pc, #20]	; (400c6c <afec1_data_ready+0x18>)
  400c56:	6a1b      	ldr	r3, [r3, #32]
  400c58:	b29b      	uxth	r3, r3
/**
 * \brief AFEC1 DRDY interrupt callback function.
 */
static void afec1_data_ready(void)
{
	g_afec1_sample_data = afec_get_latest_value(AFEC1);
  400c5a:	ee07 3a90 	vmov	s15, r3
  400c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
  400c62:	4b03      	ldr	r3, [pc, #12]	; (400c70 <afec1_data_ready+0x1c>)
  400c64:	edc3 7a00 	vstr	s15, [r3]
  400c68:	4770      	bx	lr
  400c6a:	bf00      	nop
  400c6c:	400b4000 	.word	0x400b4000
  400c70:	20000b78 	.word	0x20000b78

00400c74 <usart_serial_getchar>:
{
  400c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c76:	b083      	sub	sp, #12
  400c78:	4605      	mov	r5, r0
  400c7a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400c7c:	2300      	movs	r3, #0
  400c7e:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400c80:	4b18      	ldr	r3, [pc, #96]	; (400ce4 <usart_serial_getchar+0x70>)
  400c82:	4298      	cmp	r0, r3
  400c84:	d00a      	beq.n	400c9c <usart_serial_getchar+0x28>
	if (UART1 == (Uart*)p_usart) {
  400c86:	4b18      	ldr	r3, [pc, #96]	; (400ce8 <usart_serial_getchar+0x74>)
  400c88:	4298      	cmp	r0, r3
  400c8a:	d00f      	beq.n	400cac <usart_serial_getchar+0x38>
	if (USART0 == p_usart) {
  400c8c:	4b17      	ldr	r3, [pc, #92]	; (400cec <usart_serial_getchar+0x78>)
  400c8e:	4298      	cmp	r0, r3
  400c90:	d014      	beq.n	400cbc <usart_serial_getchar+0x48>
	if (USART1 == p_usart) {
  400c92:	4b17      	ldr	r3, [pc, #92]	; (400cf0 <usart_serial_getchar+0x7c>)
  400c94:	429d      	cmp	r5, r3
  400c96:	d01b      	beq.n	400cd0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400c98:	b003      	add	sp, #12
  400c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400c9c:	461f      	mov	r7, r3
  400c9e:	4e15      	ldr	r6, [pc, #84]	; (400cf4 <usart_serial_getchar+0x80>)
  400ca0:	4621      	mov	r1, r4
  400ca2:	4638      	mov	r0, r7
  400ca4:	47b0      	blx	r6
  400ca6:	2800      	cmp	r0, #0
  400ca8:	d1fa      	bne.n	400ca0 <usart_serial_getchar+0x2c>
  400caa:	e7f2      	b.n	400c92 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400cac:	461e      	mov	r6, r3
  400cae:	4d11      	ldr	r5, [pc, #68]	; (400cf4 <usart_serial_getchar+0x80>)
  400cb0:	4621      	mov	r1, r4
  400cb2:	4630      	mov	r0, r6
  400cb4:	47a8      	blx	r5
  400cb6:	2800      	cmp	r0, #0
  400cb8:	d1fa      	bne.n	400cb0 <usart_serial_getchar+0x3c>
  400cba:	e7ed      	b.n	400c98 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400cbc:	461e      	mov	r6, r3
  400cbe:	4d0e      	ldr	r5, [pc, #56]	; (400cf8 <usart_serial_getchar+0x84>)
  400cc0:	a901      	add	r1, sp, #4
  400cc2:	4630      	mov	r0, r6
  400cc4:	47a8      	blx	r5
  400cc6:	2800      	cmp	r0, #0
  400cc8:	d1fa      	bne.n	400cc0 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400cca:	9b01      	ldr	r3, [sp, #4]
  400ccc:	7023      	strb	r3, [r4, #0]
  400cce:	e7e3      	b.n	400c98 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400cd0:	461e      	mov	r6, r3
  400cd2:	4d09      	ldr	r5, [pc, #36]	; (400cf8 <usart_serial_getchar+0x84>)
  400cd4:	a901      	add	r1, sp, #4
  400cd6:	4630      	mov	r0, r6
  400cd8:	47a8      	blx	r5
  400cda:	2800      	cmp	r0, #0
  400cdc:	d1fa      	bne.n	400cd4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400cde:	9b01      	ldr	r3, [sp, #4]
  400ce0:	7023      	strb	r3, [r4, #0]
}
  400ce2:	e7d9      	b.n	400c98 <usart_serial_getchar+0x24>
  400ce4:	400e0600 	.word	0x400e0600
  400ce8:	40060600 	.word	0x40060600
  400cec:	400a0000 	.word	0x400a0000
  400cf0:	400a4000 	.word	0x400a4000
  400cf4:	004008df 	.word	0x004008df
  400cf8:	00400905 	.word	0x00400905

00400cfc <usart_serial_putchar>:
{
  400cfc:	b570      	push	{r4, r5, r6, lr}
  400cfe:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400d00:	4b18      	ldr	r3, [pc, #96]	; (400d64 <usart_serial_putchar+0x68>)
  400d02:	4298      	cmp	r0, r3
  400d04:	d00a      	beq.n	400d1c <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400d06:	4b18      	ldr	r3, [pc, #96]	; (400d68 <usart_serial_putchar+0x6c>)
  400d08:	4298      	cmp	r0, r3
  400d0a:	d010      	beq.n	400d2e <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400d0c:	4b17      	ldr	r3, [pc, #92]	; (400d6c <usart_serial_putchar+0x70>)
  400d0e:	4298      	cmp	r0, r3
  400d10:	d016      	beq.n	400d40 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400d12:	4b17      	ldr	r3, [pc, #92]	; (400d70 <usart_serial_putchar+0x74>)
  400d14:	4298      	cmp	r0, r3
  400d16:	d01c      	beq.n	400d52 <usart_serial_putchar+0x56>
	return 0;
  400d18:	2000      	movs	r0, #0
}
  400d1a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400d1c:	461e      	mov	r6, r3
  400d1e:	4d15      	ldr	r5, [pc, #84]	; (400d74 <usart_serial_putchar+0x78>)
  400d20:	4621      	mov	r1, r4
  400d22:	4630      	mov	r0, r6
  400d24:	47a8      	blx	r5
  400d26:	2800      	cmp	r0, #0
  400d28:	d1fa      	bne.n	400d20 <usart_serial_putchar+0x24>
		return 1;
  400d2a:	2001      	movs	r0, #1
  400d2c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400d2e:	461e      	mov	r6, r3
  400d30:	4d10      	ldr	r5, [pc, #64]	; (400d74 <usart_serial_putchar+0x78>)
  400d32:	4621      	mov	r1, r4
  400d34:	4630      	mov	r0, r6
  400d36:	47a8      	blx	r5
  400d38:	2800      	cmp	r0, #0
  400d3a:	d1fa      	bne.n	400d32 <usart_serial_putchar+0x36>
		return 1;
  400d3c:	2001      	movs	r0, #1
  400d3e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d40:	461e      	mov	r6, r3
  400d42:	4d0d      	ldr	r5, [pc, #52]	; (400d78 <usart_serial_putchar+0x7c>)
  400d44:	4621      	mov	r1, r4
  400d46:	4630      	mov	r0, r6
  400d48:	47a8      	blx	r5
  400d4a:	2800      	cmp	r0, #0
  400d4c:	d1fa      	bne.n	400d44 <usart_serial_putchar+0x48>
		return 1;
  400d4e:	2001      	movs	r0, #1
  400d50:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d52:	461e      	mov	r6, r3
  400d54:	4d08      	ldr	r5, [pc, #32]	; (400d78 <usart_serial_putchar+0x7c>)
  400d56:	4621      	mov	r1, r4
  400d58:	4630      	mov	r0, r6
  400d5a:	47a8      	blx	r5
  400d5c:	2800      	cmp	r0, #0
  400d5e:	d1fa      	bne.n	400d56 <usart_serial_putchar+0x5a>
		return 1;
  400d60:	2001      	movs	r0, #1
  400d62:	bd70      	pop	{r4, r5, r6, pc}
  400d64:	400e0600 	.word	0x400e0600
  400d68:	40060600 	.word	0x40060600
  400d6c:	400a0000 	.word	0x400a0000
  400d70:	400a4000 	.word	0x400a4000
  400d74:	004008cf 	.word	0x004008cf
  400d78:	004008f1 	.word	0x004008f1

00400d7c <main>:
		afec_start_calibration(AFEC1);
		while((afec_get_interrupt_status(AFEC1) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
}
int main (void)
{
  400d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400d80:	b08d      	sub	sp, #52	; 0x34
	/* Initialize the SAM system. */
	sysclk_init();
  400d82:	4b6f      	ldr	r3, [pc, #444]	; (400f40 <main+0x1c4>)
  400d84:	4798      	blx	r3
	board_init();
  400d86:	4b6f      	ldr	r3, [pc, #444]	; (400f44 <main+0x1c8>)
  400d88:	4798      	blx	r3
  400d8a:	2007      	movs	r0, #7
  400d8c:	f8df 9254 	ldr.w	r9, [pc, #596]	; 400fe4 <main+0x268>
  400d90:	47c8      	blx	r9
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400d92:	4c6d      	ldr	r4, [pc, #436]	; (400f48 <main+0x1cc>)
  400d94:	4b6d      	ldr	r3, [pc, #436]	; (400f4c <main+0x1d0>)
  400d96:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400d98:	4a6d      	ldr	r2, [pc, #436]	; (400f50 <main+0x1d4>)
  400d9a:	4b6e      	ldr	r3, [pc, #440]	; (400f54 <main+0x1d8>)
  400d9c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400d9e:	4a6e      	ldr	r2, [pc, #440]	; (400f58 <main+0x1dc>)
  400da0:	4b6e      	ldr	r3, [pc, #440]	; (400f5c <main+0x1e0>)
  400da2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400da4:	4d6e      	ldr	r5, [pc, #440]	; (400f60 <main+0x1e4>)
  400da6:	9505      	str	r5, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
  400da8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400dac:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
  400dae:	f44f 6800 	mov.w	r8, #2048	; 0x800
  400db2:	f8cd 801c 	str.w	r8, [sp, #28]
  400db6:	2007      	movs	r0, #7
  400db8:	47c8      	blx	r9
		uart_init((Uart*)p_usart, &uart_settings);
  400dba:	a905      	add	r1, sp, #20
  400dbc:	4620      	mov	r0, r4
  400dbe:	4b69      	ldr	r3, [pc, #420]	; (400f64 <main+0x1e8>)
  400dc0:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400dc2:	4e69      	ldr	r6, [pc, #420]	; (400f68 <main+0x1ec>)
  400dc4:	6833      	ldr	r3, [r6, #0]
  400dc6:	2100      	movs	r1, #0
  400dc8:	6898      	ldr	r0, [r3, #8]
  400dca:	4c68      	ldr	r4, [pc, #416]	; (400f6c <main+0x1f0>)
  400dcc:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400dce:	6833      	ldr	r3, [r6, #0]
  400dd0:	2100      	movs	r1, #0
  400dd2:	6858      	ldr	r0, [r3, #4]
  400dd4:	47a0      	blx	r4

	configure_console();

	/* Output example information. */
	puts(STRING_HEADER);
  400dd6:	4866      	ldr	r0, [pc, #408]	; (400f70 <main+0x1f4>)
  400dd8:	4b66      	ldr	r3, [pc, #408]	; (400f74 <main+0x1f8>)
  400dda:	4798      	blx	r3

	g_afec0_sample_data = 0;
  400ddc:	2300      	movs	r3, #0
  400dde:	4a66      	ldr	r2, [pc, #408]	; (400f78 <main+0x1fc>)
  400de0:	6013      	str	r3, [r2, #0]
	g_afec1_sample_data = 0;
  400de2:	4a66      	ldr	r2, [pc, #408]	; (400f7c <main+0x200>)
  400de4:	6013      	str	r3, [r2, #0]
	afec_enable(AFEC0);
  400de6:	4c66      	ldr	r4, [pc, #408]	; (400f80 <main+0x204>)
  400de8:	4620      	mov	r0, r4
  400dea:	4f66      	ldr	r7, [pc, #408]	; (400f84 <main+0x208>)
  400dec:	47b8      	blx	r7
	afec_get_config_defaults(&afec_cfg);
  400dee:	a805      	add	r0, sp, #20
  400df0:	4b65      	ldr	r3, [pc, #404]	; (400f88 <main+0x20c>)
  400df2:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  400df4:	a802      	add	r0, sp, #8
  400df6:	4b65      	ldr	r3, [pc, #404]	; (400f8c <main+0x210>)
  400df8:	4798      	blx	r3
		afec_enable(AFEC1);
  400dfa:	4e65      	ldr	r6, [pc, #404]	; (400f90 <main+0x214>)
  400dfc:	4630      	mov	r0, r6
  400dfe:	47b8      	blx	r7
		afec_init(AFEC0, &afec_cfg);
  400e00:	a905      	add	r1, sp, #20
  400e02:	4620      	mov	r0, r4
  400e04:	4f63      	ldr	r7, [pc, #396]	; (400f94 <main+0x218>)
  400e06:	47b8      	blx	r7
		afec_init(AFEC1, &afec_cfg);
  400e08:	a905      	add	r1, sp, #20
  400e0a:	4630      	mov	r0, r6
  400e0c:	47b8      	blx	r7
		afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  400e0e:	aa02      	add	r2, sp, #8
  400e10:	2106      	movs	r1, #6
  400e12:	4620      	mov	r0, r4
  400e14:	4f60      	ldr	r7, [pc, #384]	; (400f98 <main+0x21c>)
  400e16:	47b8      	blx	r7
		afec_ch_set_config(AFEC1, AFEC_CHANNEL_0, &afec_ch_cfg);
  400e18:	aa02      	add	r2, sp, #8
  400e1a:	2100      	movs	r1, #0
  400e1c:	4630      	mov	r0, r6
  400e1e:	47b8      	blx	r7
	afec->AFEC_CSELR = afec_ch;
  400e20:	2700      	movs	r7, #0
  400e22:	6677      	str	r7, [r6, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400e24:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  400e28:	2306      	movs	r3, #6
  400e2a:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400e2c:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	reg = afec->AFEC_MR;
  400e30:	6873      	ldr	r3, [r6, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400e32:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  400e36:	6073      	str	r3, [r6, #4]
    uint32_t ul_div = 0;
  400e38:	9703      	str	r7, [sp, #12]
	uint32_t ul_tc_clks = 0;
  400e3a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  400e3e:	f848 7d20 	str.w	r7, [r8, #-32]!
	pmc_enable_periph_clk(ID_TC0);
  400e42:	2015      	movs	r0, #21
  400e44:	47c8      	blx	r9
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  400e46:	9500      	str	r5, [sp, #0]
  400e48:	4643      	mov	r3, r8
  400e4a:	aa03      	add	r2, sp, #12
  400e4c:	4629      	mov	r1, r5
  400e4e:	4853      	ldr	r0, [pc, #332]	; (400f9c <main+0x220>)
  400e50:	f8df 8194 	ldr.w	r8, [pc, #404]	; 400fe8 <main+0x26c>
  400e54:	47c0      	blx	r8
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  400e56:	f8df 8178 	ldr.w	r8, [pc, #376]	; 400fd0 <main+0x254>
  400e5a:	9a04      	ldr	r2, [sp, #16]
  400e5c:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  400e60:	4639      	mov	r1, r7
  400e62:	4640      	mov	r0, r8
  400e64:	4b4e      	ldr	r3, [pc, #312]	; (400fa0 <main+0x224>)
  400e66:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  400e68:	9b03      	ldr	r3, [sp, #12]
  400e6a:	fbb5 f3f3 	udiv	r3, r5, r3
  400e6e:	4a4d      	ldr	r2, [pc, #308]	; (400fa4 <main+0x228>)
  400e70:	fba2 2303 	umull	r2, r3, r2, r3
  400e74:	0c5a      	lsrs	r2, r3, #17
  400e76:	f8c8 2014 	str.w	r2, [r8, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  400e7a:	0c1b      	lsrs	r3, r3, #16
  400e7c:	f8c8 301c 	str.w	r3, [r8, #28]
	tc_start(TC0, 0); 
  400e80:	4639      	mov	r1, r7
  400e82:	4640      	mov	r0, r8
  400e84:	4b48      	ldr	r3, [pc, #288]	; (400fa8 <main+0x22c>)
  400e86:	4798      	blx	r3
	reg = afec->AFEC_MR;
  400e88:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400e8a:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  400e8e:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  400e92:	6063      	str	r3, [r4, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400e94:	2501      	movs	r5, #1
  400e96:	6175      	str	r5, [r6, #20]
  400e98:	2340      	movs	r3, #64	; 0x40
  400e9a:	6163      	str	r3, [r4, #20]
		afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  400e9c:	462b      	mov	r3, r5
  400e9e:	4a43      	ldr	r2, [pc, #268]	; (400fac <main+0x230>)
  400ea0:	2110      	movs	r1, #16
  400ea2:	4620      	mov	r0, r4
  400ea4:	4f42      	ldr	r7, [pc, #264]	; (400fb0 <main+0x234>)
  400ea6:	47b8      	blx	r7
		afec_set_callback(AFEC1, AFEC_INTERRUPT_DATA_READY, afec1_data_ready, 1);
  400ea8:	462b      	mov	r3, r5
  400eaa:	4a42      	ldr	r2, [pc, #264]	; (400fb4 <main+0x238>)
  400eac:	2110      	movs	r1, #16
  400eae:	4630      	mov	r0, r6
  400eb0:	47b8      	blx	r7
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  400eb2:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  400eb4:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  400eb6:	6863      	ldr	r3, [r4, #4]
  400eb8:	f013 0f80 	tst.w	r3, #128	; 0x80
  400ebc:	d101      	bne.n	400ec2 <main+0x146>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  400ebe:	2208      	movs	r2, #8
  400ec0:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  400ec2:	4a2f      	ldr	r2, [pc, #188]	; (400f80 <main+0x204>)
  400ec4:	6b13      	ldr	r3, [r2, #48]	; 0x30
		while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  400ec6:	2b00      	cmp	r3, #0
  400ec8:	dafc      	bge.n	400ec4 <main+0x148>
	reg = afec->AFEC_CHSR;
  400eca:	4b31      	ldr	r3, [pc, #196]	; (400f90 <main+0x214>)
  400ecc:	69da      	ldr	r2, [r3, #28]
	afec->AFEC_CDOR = reg;
  400ece:	65da      	str	r2, [r3, #92]	; 0x5c
	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  400ed0:	685b      	ldr	r3, [r3, #4]
  400ed2:	f013 0f80 	tst.w	r3, #128	; 0x80
  400ed6:	d102      	bne.n	400ede <main+0x162>
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  400ed8:	2208      	movs	r2, #8
  400eda:	4b2d      	ldr	r3, [pc, #180]	; (400f90 <main+0x214>)
  400edc:	601a      	str	r2, [r3, #0]
	return afec->AFEC_ISR;
  400ede:	4a2c      	ldr	r2, [pc, #176]	; (400f90 <main+0x214>)
  400ee0:	6b13      	ldr	r3, [r2, #48]	; 0x30
		while((afec_get_interrupt_status(AFEC1) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  400ee2:	2b00      	cmp	r3, #0
  400ee4:	dafc      	bge.n	400ee0 <main+0x164>
	g_max_digital = MAX_DIGITAL_12_BIT;
	bool test;
	set_afec_test();
	printf("waiting");
  400ee6:	4834      	ldr	r0, [pc, #208]	; (400fb8 <main+0x23c>)
  400ee8:	4b34      	ldr	r3, [pc, #208]	; (400fbc <main+0x240>)
  400eea:	4798      	blx	r3
		while (bufferIndex<buffersize) {
  400eec:	4b34      	ldr	r3, [pc, #208]	; (400fc0 <main+0x244>)
  400eee:	881a      	ldrh	r2, [r3, #0]
  400ef0:	f244 131a 	movw	r3, #16666	; 0x411a
  400ef4:	429a      	cmp	r2, r3
  400ef6:	d809      	bhi.n	400f0c <main+0x190>
			printf(".");
  400ef8:	4e32      	ldr	r6, [pc, #200]	; (400fc4 <main+0x248>)
  400efa:	4d30      	ldr	r5, [pc, #192]	; (400fbc <main+0x240>)
		while (bufferIndex<buffersize) {
  400efc:	4c30      	ldr	r4, [pc, #192]	; (400fc0 <main+0x244>)
			printf(".");
  400efe:	4630      	mov	r0, r6
  400f00:	47a8      	blx	r5
		while (bufferIndex<buffersize) {
  400f02:	8822      	ldrh	r2, [r4, #0]
  400f04:	f244 131a 	movw	r3, #16666	; 0x411a
  400f08:	429a      	cmp	r2, r3
  400f0a:	d9f8      	bls.n	400efe <main+0x182>
			//afec_disable_interrupt(AFEC1, AFEC_INTERRUPT_ALL);
			//tc_stop(TC0, 0);
			//set_afec_test();
			//}
		}
		afec_disable_interrupt(AFEC0, AFEC_INTERRUPT_ALL);
  400f0c:	4d2e      	ldr	r5, [pc, #184]	; (400fc8 <main+0x24c>)
  400f0e:	4629      	mov	r1, r5
  400f10:	481b      	ldr	r0, [pc, #108]	; (400f80 <main+0x204>)
  400f12:	4c2e      	ldr	r4, [pc, #184]	; (400fcc <main+0x250>)
  400f14:	47a0      	blx	r4
		afec_disable_interrupt(AFEC1, AFEC_INTERRUPT_ALL);
  400f16:	4629      	mov	r1, r5
  400f18:	481d      	ldr	r0, [pc, #116]	; (400f90 <main+0x214>)
  400f1a:	47a0      	blx	r4
		tc_stop(TC0, 0);
  400f1c:	2100      	movs	r1, #0
  400f1e:	482c      	ldr	r0, [pc, #176]	; (400fd0 <main+0x254>)
  400f20:	4b2c      	ldr	r3, [pc, #176]	; (400fd4 <main+0x258>)
  400f22:	4798      	blx	r3
  400f24:	4c2c      	ldr	r4, [pc, #176]	; (400fd8 <main+0x25c>)
  400f26:	4f2d      	ldr	r7, [pc, #180]	; (400fdc <main+0x260>)
	printf("%d\n\r", sample);
  400f28:	4e2d      	ldr	r6, [pc, #180]	; (400fe0 <main+0x264>)
  400f2a:	4d24      	ldr	r5, [pc, #144]	; (400fbc <main+0x240>)
  400f2c:	f834 1f02 	ldrh.w	r1, [r4, #2]!
  400f30:	4630      	mov	r0, r6
  400f32:	47a8      	blx	r5
		uint16_t i=0;
		while (i<buffersize)
  400f34:	42bc      	cmp	r4, r7
  400f36:	d1f9      	bne.n	400f2c <main+0x1b0>
			print_sample(buffer[i]);
			i++;
		}
	//ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {

  400f38:	2000      	movs	r0, #0
  400f3a:	b00d      	add	sp, #52	; 0x34
  400f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400f40:	00400165 	.word	0x00400165
  400f44:	004002f9 	.word	0x004002f9
  400f48:	400e0600 	.word	0x400e0600
  400f4c:	20000abc 	.word	0x20000abc
  400f50:	00400cfd 	.word	0x00400cfd
  400f54:	20000ab8 	.word	0x20000ab8
  400f58:	00400c75 	.word	0x00400c75
  400f5c:	20000ab4 	.word	0x20000ab4
  400f60:	05b8d800 	.word	0x05b8d800
  400f64:	00400897 	.word	0x00400897
  400f68:	20000008 	.word	0x20000008
  400f6c:	004011ad 	.word	0x004011ad
  400f70:	00404038 	.word	0x00404038
  400f74:	0040119d 	.word	0x0040119d
  400f78:	20008db4 	.word	0x20008db4
  400f7c:	20000b78 	.word	0x20000b78
  400f80:	400b0000 	.word	0x400b0000
  400f84:	0040065d 	.word	0x0040065d
  400f88:	0040045d 	.word	0x0040045d
  400f8c:	0040048d 	.word	0x0040048d
  400f90:	400b4000 	.word	0x400b4000
  400f94:	00400499 	.word	0x00400499
  400f98:	0040042d 	.word	0x0040042d
  400f9c:	0003d090 	.word	0x0003d090
  400fa0:	004007fd 	.word	0x004007fd
  400fa4:	431bde83 	.word	0x431bde83
  400fa8:	00400817 	.word	0x00400817
  400fac:	00400c19 	.word	0x00400c19
  400fb0:	004005a5 	.word	0x004005a5
  400fb4:	00400c55 	.word	0x00400c55
  400fb8:	00404094 	.word	0x00404094
  400fbc:	0040103d 	.word	0x0040103d
  400fc0:	20000a76 	.word	0x20000a76
  400fc4:	0040409c 	.word	0x0040409c
  400fc8:	df00ffff 	.word	0xdf00ffff
  400fcc:	004005fd 	.word	0x004005fd
  400fd0:	40090000 	.word	0x40090000
  400fd4:	0040081f 	.word	0x0040081f
  400fd8:	20000b7a 	.word	0x20000b7a
  400fdc:	20008db0 	.word	0x20008db0
  400fe0:	004040a0 	.word	0x004040a0
  400fe4:	004007a9 	.word	0x004007a9
  400fe8:	00400827 	.word	0x00400827

00400fec <__libc_init_array>:
  400fec:	b570      	push	{r4, r5, r6, lr}
  400fee:	4e0f      	ldr	r6, [pc, #60]	; (40102c <__libc_init_array+0x40>)
  400ff0:	4d0f      	ldr	r5, [pc, #60]	; (401030 <__libc_init_array+0x44>)
  400ff2:	1b76      	subs	r6, r6, r5
  400ff4:	10b6      	asrs	r6, r6, #2
  400ff6:	bf18      	it	ne
  400ff8:	2400      	movne	r4, #0
  400ffa:	d005      	beq.n	401008 <__libc_init_array+0x1c>
  400ffc:	3401      	adds	r4, #1
  400ffe:	f855 3b04 	ldr.w	r3, [r5], #4
  401002:	4798      	blx	r3
  401004:	42a6      	cmp	r6, r4
  401006:	d1f9      	bne.n	400ffc <__libc_init_array+0x10>
  401008:	4e0a      	ldr	r6, [pc, #40]	; (401034 <__libc_init_array+0x48>)
  40100a:	4d0b      	ldr	r5, [pc, #44]	; (401038 <__libc_init_array+0x4c>)
  40100c:	1b76      	subs	r6, r6, r5
  40100e:	f003 f8ff 	bl	404210 <_init>
  401012:	10b6      	asrs	r6, r6, #2
  401014:	bf18      	it	ne
  401016:	2400      	movne	r4, #0
  401018:	d006      	beq.n	401028 <__libc_init_array+0x3c>
  40101a:	3401      	adds	r4, #1
  40101c:	f855 3b04 	ldr.w	r3, [r5], #4
  401020:	4798      	blx	r3
  401022:	42a6      	cmp	r6, r4
  401024:	d1f9      	bne.n	40101a <__libc_init_array+0x2e>
  401026:	bd70      	pop	{r4, r5, r6, pc}
  401028:	bd70      	pop	{r4, r5, r6, pc}
  40102a:	bf00      	nop
  40102c:	0040421c 	.word	0x0040421c
  401030:	0040421c 	.word	0x0040421c
  401034:	00404224 	.word	0x00404224
  401038:	0040421c 	.word	0x0040421c

0040103c <iprintf>:
  40103c:	b40f      	push	{r0, r1, r2, r3}
  40103e:	b500      	push	{lr}
  401040:	4907      	ldr	r1, [pc, #28]	; (401060 <iprintf+0x24>)
  401042:	b083      	sub	sp, #12
  401044:	ab04      	add	r3, sp, #16
  401046:	6808      	ldr	r0, [r1, #0]
  401048:	f853 2b04 	ldr.w	r2, [r3], #4
  40104c:	6881      	ldr	r1, [r0, #8]
  40104e:	9301      	str	r3, [sp, #4]
  401050:	f000 fa44 	bl	4014dc <_vfiprintf_r>
  401054:	b003      	add	sp, #12
  401056:	f85d eb04 	ldr.w	lr, [sp], #4
  40105a:	b004      	add	sp, #16
  40105c:	4770      	bx	lr
  40105e:	bf00      	nop
  401060:	20000008 	.word	0x20000008

00401064 <memset>:
  401064:	b470      	push	{r4, r5, r6}
  401066:	0786      	lsls	r6, r0, #30
  401068:	d046      	beq.n	4010f8 <memset+0x94>
  40106a:	1e54      	subs	r4, r2, #1
  40106c:	2a00      	cmp	r2, #0
  40106e:	d041      	beq.n	4010f4 <memset+0x90>
  401070:	b2ca      	uxtb	r2, r1
  401072:	4603      	mov	r3, r0
  401074:	e002      	b.n	40107c <memset+0x18>
  401076:	f114 34ff 	adds.w	r4, r4, #4294967295
  40107a:	d33b      	bcc.n	4010f4 <memset+0x90>
  40107c:	f803 2b01 	strb.w	r2, [r3], #1
  401080:	079d      	lsls	r5, r3, #30
  401082:	d1f8      	bne.n	401076 <memset+0x12>
  401084:	2c03      	cmp	r4, #3
  401086:	d92e      	bls.n	4010e6 <memset+0x82>
  401088:	b2cd      	uxtb	r5, r1
  40108a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40108e:	2c0f      	cmp	r4, #15
  401090:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401094:	d919      	bls.n	4010ca <memset+0x66>
  401096:	f103 0210 	add.w	r2, r3, #16
  40109a:	4626      	mov	r6, r4
  40109c:	3e10      	subs	r6, #16
  40109e:	2e0f      	cmp	r6, #15
  4010a0:	f842 5c10 	str.w	r5, [r2, #-16]
  4010a4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4010a8:	f842 5c08 	str.w	r5, [r2, #-8]
  4010ac:	f842 5c04 	str.w	r5, [r2, #-4]
  4010b0:	f102 0210 	add.w	r2, r2, #16
  4010b4:	d8f2      	bhi.n	40109c <memset+0x38>
  4010b6:	f1a4 0210 	sub.w	r2, r4, #16
  4010ba:	f022 020f 	bic.w	r2, r2, #15
  4010be:	f004 040f 	and.w	r4, r4, #15
  4010c2:	3210      	adds	r2, #16
  4010c4:	2c03      	cmp	r4, #3
  4010c6:	4413      	add	r3, r2
  4010c8:	d90d      	bls.n	4010e6 <memset+0x82>
  4010ca:	461e      	mov	r6, r3
  4010cc:	4622      	mov	r2, r4
  4010ce:	3a04      	subs	r2, #4
  4010d0:	2a03      	cmp	r2, #3
  4010d2:	f846 5b04 	str.w	r5, [r6], #4
  4010d6:	d8fa      	bhi.n	4010ce <memset+0x6a>
  4010d8:	1f22      	subs	r2, r4, #4
  4010da:	f022 0203 	bic.w	r2, r2, #3
  4010de:	3204      	adds	r2, #4
  4010e0:	4413      	add	r3, r2
  4010e2:	f004 0403 	and.w	r4, r4, #3
  4010e6:	b12c      	cbz	r4, 4010f4 <memset+0x90>
  4010e8:	b2c9      	uxtb	r1, r1
  4010ea:	441c      	add	r4, r3
  4010ec:	f803 1b01 	strb.w	r1, [r3], #1
  4010f0:	429c      	cmp	r4, r3
  4010f2:	d1fb      	bne.n	4010ec <memset+0x88>
  4010f4:	bc70      	pop	{r4, r5, r6}
  4010f6:	4770      	bx	lr
  4010f8:	4614      	mov	r4, r2
  4010fa:	4603      	mov	r3, r0
  4010fc:	e7c2      	b.n	401084 <memset+0x20>
  4010fe:	bf00      	nop

00401100 <_puts_r>:
  401100:	b5f0      	push	{r4, r5, r6, r7, lr}
  401102:	4605      	mov	r5, r0
  401104:	b089      	sub	sp, #36	; 0x24
  401106:	4608      	mov	r0, r1
  401108:	460c      	mov	r4, r1
  40110a:	f000 f939 	bl	401380 <strlen>
  40110e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401110:	4f21      	ldr	r7, [pc, #132]	; (401198 <_puts_r+0x98>)
  401112:	9404      	str	r4, [sp, #16]
  401114:	2601      	movs	r6, #1
  401116:	1c44      	adds	r4, r0, #1
  401118:	a904      	add	r1, sp, #16
  40111a:	2202      	movs	r2, #2
  40111c:	9403      	str	r4, [sp, #12]
  40111e:	9005      	str	r0, [sp, #20]
  401120:	68ac      	ldr	r4, [r5, #8]
  401122:	9706      	str	r7, [sp, #24]
  401124:	9607      	str	r6, [sp, #28]
  401126:	9101      	str	r1, [sp, #4]
  401128:	9202      	str	r2, [sp, #8]
  40112a:	b353      	cbz	r3, 401182 <_puts_r+0x82>
  40112c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40112e:	f013 0f01 	tst.w	r3, #1
  401132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401136:	b29a      	uxth	r2, r3
  401138:	d101      	bne.n	40113e <_puts_r+0x3e>
  40113a:	0590      	lsls	r0, r2, #22
  40113c:	d525      	bpl.n	40118a <_puts_r+0x8a>
  40113e:	0491      	lsls	r1, r2, #18
  401140:	d406      	bmi.n	401150 <_puts_r+0x50>
  401142:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401144:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401148:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40114c:	81a3      	strh	r3, [r4, #12]
  40114e:	6662      	str	r2, [r4, #100]	; 0x64
  401150:	4628      	mov	r0, r5
  401152:	aa01      	add	r2, sp, #4
  401154:	4621      	mov	r1, r4
  401156:	f001 fbc3 	bl	4028e0 <__sfvwrite_r>
  40115a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40115c:	2800      	cmp	r0, #0
  40115e:	bf0c      	ite	eq
  401160:	250a      	moveq	r5, #10
  401162:	f04f 35ff 	movne.w	r5, #4294967295
  401166:	07da      	lsls	r2, r3, #31
  401168:	d402      	bmi.n	401170 <_puts_r+0x70>
  40116a:	89a3      	ldrh	r3, [r4, #12]
  40116c:	059b      	lsls	r3, r3, #22
  40116e:	d502      	bpl.n	401176 <_puts_r+0x76>
  401170:	4628      	mov	r0, r5
  401172:	b009      	add	sp, #36	; 0x24
  401174:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401176:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401178:	f001 fd68 	bl	402c4c <__retarget_lock_release_recursive>
  40117c:	4628      	mov	r0, r5
  40117e:	b009      	add	sp, #36	; 0x24
  401180:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401182:	4628      	mov	r0, r5
  401184:	f001 f9a0 	bl	4024c8 <__sinit>
  401188:	e7d0      	b.n	40112c <_puts_r+0x2c>
  40118a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40118c:	f001 fd5c 	bl	402c48 <__retarget_lock_acquire_recursive>
  401190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401194:	b29a      	uxth	r2, r3
  401196:	e7d2      	b.n	40113e <_puts_r+0x3e>
  401198:	004040ac 	.word	0x004040ac

0040119c <puts>:
  40119c:	4b02      	ldr	r3, [pc, #8]	; (4011a8 <puts+0xc>)
  40119e:	4601      	mov	r1, r0
  4011a0:	6818      	ldr	r0, [r3, #0]
  4011a2:	f7ff bfad 	b.w	401100 <_puts_r>
  4011a6:	bf00      	nop
  4011a8:	20000008 	.word	0x20000008

004011ac <setbuf>:
  4011ac:	2900      	cmp	r1, #0
  4011ae:	bf0c      	ite	eq
  4011b0:	2202      	moveq	r2, #2
  4011b2:	2200      	movne	r2, #0
  4011b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4011b8:	f000 b800 	b.w	4011bc <setvbuf>

004011bc <setvbuf>:
  4011bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4011c0:	4c61      	ldr	r4, [pc, #388]	; (401348 <setvbuf+0x18c>)
  4011c2:	6825      	ldr	r5, [r4, #0]
  4011c4:	b083      	sub	sp, #12
  4011c6:	4604      	mov	r4, r0
  4011c8:	460f      	mov	r7, r1
  4011ca:	4690      	mov	r8, r2
  4011cc:	461e      	mov	r6, r3
  4011ce:	b115      	cbz	r5, 4011d6 <setvbuf+0x1a>
  4011d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4011d2:	2b00      	cmp	r3, #0
  4011d4:	d064      	beq.n	4012a0 <setvbuf+0xe4>
  4011d6:	f1b8 0f02 	cmp.w	r8, #2
  4011da:	d006      	beq.n	4011ea <setvbuf+0x2e>
  4011dc:	f1b8 0f01 	cmp.w	r8, #1
  4011e0:	f200 809f 	bhi.w	401322 <setvbuf+0x166>
  4011e4:	2e00      	cmp	r6, #0
  4011e6:	f2c0 809c 	blt.w	401322 <setvbuf+0x166>
  4011ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4011ec:	07d8      	lsls	r0, r3, #31
  4011ee:	d534      	bpl.n	40125a <setvbuf+0x9e>
  4011f0:	4621      	mov	r1, r4
  4011f2:	4628      	mov	r0, r5
  4011f4:	f001 f910 	bl	402418 <_fflush_r>
  4011f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4011fa:	b141      	cbz	r1, 40120e <setvbuf+0x52>
  4011fc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401200:	4299      	cmp	r1, r3
  401202:	d002      	beq.n	40120a <setvbuf+0x4e>
  401204:	4628      	mov	r0, r5
  401206:	f001 fa85 	bl	402714 <_free_r>
  40120a:	2300      	movs	r3, #0
  40120c:	6323      	str	r3, [r4, #48]	; 0x30
  40120e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401212:	2200      	movs	r2, #0
  401214:	61a2      	str	r2, [r4, #24]
  401216:	6062      	str	r2, [r4, #4]
  401218:	061a      	lsls	r2, r3, #24
  40121a:	d43a      	bmi.n	401292 <setvbuf+0xd6>
  40121c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401220:	f023 0303 	bic.w	r3, r3, #3
  401224:	f1b8 0f02 	cmp.w	r8, #2
  401228:	81a3      	strh	r3, [r4, #12]
  40122a:	d01d      	beq.n	401268 <setvbuf+0xac>
  40122c:	ab01      	add	r3, sp, #4
  40122e:	466a      	mov	r2, sp
  401230:	4621      	mov	r1, r4
  401232:	4628      	mov	r0, r5
  401234:	f001 fd0c 	bl	402c50 <__swhatbuf_r>
  401238:	89a3      	ldrh	r3, [r4, #12]
  40123a:	4318      	orrs	r0, r3
  40123c:	81a0      	strh	r0, [r4, #12]
  40123e:	2e00      	cmp	r6, #0
  401240:	d132      	bne.n	4012a8 <setvbuf+0xec>
  401242:	9e00      	ldr	r6, [sp, #0]
  401244:	4630      	mov	r0, r6
  401246:	f001 fd7b 	bl	402d40 <malloc>
  40124a:	4607      	mov	r7, r0
  40124c:	2800      	cmp	r0, #0
  40124e:	d06b      	beq.n	401328 <setvbuf+0x16c>
  401250:	89a3      	ldrh	r3, [r4, #12]
  401252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401256:	81a3      	strh	r3, [r4, #12]
  401258:	e028      	b.n	4012ac <setvbuf+0xf0>
  40125a:	89a3      	ldrh	r3, [r4, #12]
  40125c:	0599      	lsls	r1, r3, #22
  40125e:	d4c7      	bmi.n	4011f0 <setvbuf+0x34>
  401260:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401262:	f001 fcf1 	bl	402c48 <__retarget_lock_acquire_recursive>
  401266:	e7c3      	b.n	4011f0 <setvbuf+0x34>
  401268:	2500      	movs	r5, #0
  40126a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40126c:	2600      	movs	r6, #0
  40126e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401272:	f043 0302 	orr.w	r3, r3, #2
  401276:	2001      	movs	r0, #1
  401278:	60a6      	str	r6, [r4, #8]
  40127a:	07ce      	lsls	r6, r1, #31
  40127c:	81a3      	strh	r3, [r4, #12]
  40127e:	6022      	str	r2, [r4, #0]
  401280:	6122      	str	r2, [r4, #16]
  401282:	6160      	str	r0, [r4, #20]
  401284:	d401      	bmi.n	40128a <setvbuf+0xce>
  401286:	0598      	lsls	r0, r3, #22
  401288:	d53e      	bpl.n	401308 <setvbuf+0x14c>
  40128a:	4628      	mov	r0, r5
  40128c:	b003      	add	sp, #12
  40128e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401292:	6921      	ldr	r1, [r4, #16]
  401294:	4628      	mov	r0, r5
  401296:	f001 fa3d 	bl	402714 <_free_r>
  40129a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40129e:	e7bd      	b.n	40121c <setvbuf+0x60>
  4012a0:	4628      	mov	r0, r5
  4012a2:	f001 f911 	bl	4024c8 <__sinit>
  4012a6:	e796      	b.n	4011d6 <setvbuf+0x1a>
  4012a8:	2f00      	cmp	r7, #0
  4012aa:	d0cb      	beq.n	401244 <setvbuf+0x88>
  4012ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4012ae:	2b00      	cmp	r3, #0
  4012b0:	d033      	beq.n	40131a <setvbuf+0x15e>
  4012b2:	9b00      	ldr	r3, [sp, #0]
  4012b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4012b8:	6027      	str	r7, [r4, #0]
  4012ba:	429e      	cmp	r6, r3
  4012bc:	bf1c      	itt	ne
  4012be:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4012c2:	81a2      	strhne	r2, [r4, #12]
  4012c4:	f1b8 0f01 	cmp.w	r8, #1
  4012c8:	bf04      	itt	eq
  4012ca:	f042 0201 	orreq.w	r2, r2, #1
  4012ce:	81a2      	strheq	r2, [r4, #12]
  4012d0:	b292      	uxth	r2, r2
  4012d2:	f012 0308 	ands.w	r3, r2, #8
  4012d6:	6127      	str	r7, [r4, #16]
  4012d8:	6166      	str	r6, [r4, #20]
  4012da:	d00e      	beq.n	4012fa <setvbuf+0x13e>
  4012dc:	07d1      	lsls	r1, r2, #31
  4012de:	d51a      	bpl.n	401316 <setvbuf+0x15a>
  4012e0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4012e2:	4276      	negs	r6, r6
  4012e4:	2300      	movs	r3, #0
  4012e6:	f015 0501 	ands.w	r5, r5, #1
  4012ea:	61a6      	str	r6, [r4, #24]
  4012ec:	60a3      	str	r3, [r4, #8]
  4012ee:	d009      	beq.n	401304 <setvbuf+0x148>
  4012f0:	2500      	movs	r5, #0
  4012f2:	4628      	mov	r0, r5
  4012f4:	b003      	add	sp, #12
  4012f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4012fa:	60a3      	str	r3, [r4, #8]
  4012fc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4012fe:	f015 0501 	ands.w	r5, r5, #1
  401302:	d1f5      	bne.n	4012f0 <setvbuf+0x134>
  401304:	0593      	lsls	r3, r2, #22
  401306:	d4c0      	bmi.n	40128a <setvbuf+0xce>
  401308:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40130a:	f001 fc9f 	bl	402c4c <__retarget_lock_release_recursive>
  40130e:	4628      	mov	r0, r5
  401310:	b003      	add	sp, #12
  401312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401316:	60a6      	str	r6, [r4, #8]
  401318:	e7f0      	b.n	4012fc <setvbuf+0x140>
  40131a:	4628      	mov	r0, r5
  40131c:	f001 f8d4 	bl	4024c8 <__sinit>
  401320:	e7c7      	b.n	4012b2 <setvbuf+0xf6>
  401322:	f04f 35ff 	mov.w	r5, #4294967295
  401326:	e7b0      	b.n	40128a <setvbuf+0xce>
  401328:	f8dd 9000 	ldr.w	r9, [sp]
  40132c:	45b1      	cmp	r9, r6
  40132e:	d004      	beq.n	40133a <setvbuf+0x17e>
  401330:	4648      	mov	r0, r9
  401332:	f001 fd05 	bl	402d40 <malloc>
  401336:	4607      	mov	r7, r0
  401338:	b920      	cbnz	r0, 401344 <setvbuf+0x188>
  40133a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40133e:	f04f 35ff 	mov.w	r5, #4294967295
  401342:	e792      	b.n	40126a <setvbuf+0xae>
  401344:	464e      	mov	r6, r9
  401346:	e783      	b.n	401250 <setvbuf+0x94>
  401348:	20000008 	.word	0x20000008
	...

00401380 <strlen>:
  401380:	f890 f000 	pld	[r0]
  401384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401388:	f020 0107 	bic.w	r1, r0, #7
  40138c:	f06f 0c00 	mvn.w	ip, #0
  401390:	f010 0407 	ands.w	r4, r0, #7
  401394:	f891 f020 	pld	[r1, #32]
  401398:	f040 8049 	bne.w	40142e <strlen+0xae>
  40139c:	f04f 0400 	mov.w	r4, #0
  4013a0:	f06f 0007 	mvn.w	r0, #7
  4013a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4013a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4013ac:	f100 0008 	add.w	r0, r0, #8
  4013b0:	fa82 f24c 	uadd8	r2, r2, ip
  4013b4:	faa4 f28c 	sel	r2, r4, ip
  4013b8:	fa83 f34c 	uadd8	r3, r3, ip
  4013bc:	faa2 f38c 	sel	r3, r2, ip
  4013c0:	bb4b      	cbnz	r3, 401416 <strlen+0x96>
  4013c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4013c6:	fa82 f24c 	uadd8	r2, r2, ip
  4013ca:	f100 0008 	add.w	r0, r0, #8
  4013ce:	faa4 f28c 	sel	r2, r4, ip
  4013d2:	fa83 f34c 	uadd8	r3, r3, ip
  4013d6:	faa2 f38c 	sel	r3, r2, ip
  4013da:	b9e3      	cbnz	r3, 401416 <strlen+0x96>
  4013dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4013e0:	fa82 f24c 	uadd8	r2, r2, ip
  4013e4:	f100 0008 	add.w	r0, r0, #8
  4013e8:	faa4 f28c 	sel	r2, r4, ip
  4013ec:	fa83 f34c 	uadd8	r3, r3, ip
  4013f0:	faa2 f38c 	sel	r3, r2, ip
  4013f4:	b97b      	cbnz	r3, 401416 <strlen+0x96>
  4013f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4013fa:	f101 0120 	add.w	r1, r1, #32
  4013fe:	fa82 f24c 	uadd8	r2, r2, ip
  401402:	f100 0008 	add.w	r0, r0, #8
  401406:	faa4 f28c 	sel	r2, r4, ip
  40140a:	fa83 f34c 	uadd8	r3, r3, ip
  40140e:	faa2 f38c 	sel	r3, r2, ip
  401412:	2b00      	cmp	r3, #0
  401414:	d0c6      	beq.n	4013a4 <strlen+0x24>
  401416:	2a00      	cmp	r2, #0
  401418:	bf04      	itt	eq
  40141a:	3004      	addeq	r0, #4
  40141c:	461a      	moveq	r2, r3
  40141e:	ba12      	rev	r2, r2
  401420:	fab2 f282 	clz	r2, r2
  401424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40142c:	4770      	bx	lr
  40142e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401432:	f004 0503 	and.w	r5, r4, #3
  401436:	f1c4 0000 	rsb	r0, r4, #0
  40143a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40143e:	f014 0f04 	tst.w	r4, #4
  401442:	f891 f040 	pld	[r1, #64]	; 0x40
  401446:	fa0c f505 	lsl.w	r5, ip, r5
  40144a:	ea62 0205 	orn	r2, r2, r5
  40144e:	bf1c      	itt	ne
  401450:	ea63 0305 	ornne	r3, r3, r5
  401454:	4662      	movne	r2, ip
  401456:	f04f 0400 	mov.w	r4, #0
  40145a:	e7a9      	b.n	4013b0 <strlen+0x30>

0040145c <__sprint_r.part.0>:
  40145c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401460:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401462:	049c      	lsls	r4, r3, #18
  401464:	4693      	mov	fp, r2
  401466:	d52f      	bpl.n	4014c8 <__sprint_r.part.0+0x6c>
  401468:	6893      	ldr	r3, [r2, #8]
  40146a:	6812      	ldr	r2, [r2, #0]
  40146c:	b353      	cbz	r3, 4014c4 <__sprint_r.part.0+0x68>
  40146e:	460e      	mov	r6, r1
  401470:	4607      	mov	r7, r0
  401472:	f102 0908 	add.w	r9, r2, #8
  401476:	e919 0420 	ldmdb	r9, {r5, sl}
  40147a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40147e:	d017      	beq.n	4014b0 <__sprint_r.part.0+0x54>
  401480:	3d04      	subs	r5, #4
  401482:	2400      	movs	r4, #0
  401484:	e001      	b.n	40148a <__sprint_r.part.0+0x2e>
  401486:	45a0      	cmp	r8, r4
  401488:	d010      	beq.n	4014ac <__sprint_r.part.0+0x50>
  40148a:	4632      	mov	r2, r6
  40148c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401490:	4638      	mov	r0, r7
  401492:	f001 f8bb 	bl	40260c <_fputwc_r>
  401496:	1c43      	adds	r3, r0, #1
  401498:	f104 0401 	add.w	r4, r4, #1
  40149c:	d1f3      	bne.n	401486 <__sprint_r.part.0+0x2a>
  40149e:	2300      	movs	r3, #0
  4014a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4014a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4014a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4014b0:	f02a 0a03 	bic.w	sl, sl, #3
  4014b4:	eba3 030a 	sub.w	r3, r3, sl
  4014b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4014bc:	f109 0908 	add.w	r9, r9, #8
  4014c0:	2b00      	cmp	r3, #0
  4014c2:	d1d8      	bne.n	401476 <__sprint_r.part.0+0x1a>
  4014c4:	2000      	movs	r0, #0
  4014c6:	e7ea      	b.n	40149e <__sprint_r.part.0+0x42>
  4014c8:	f001 fa0a 	bl	4028e0 <__sfvwrite_r>
  4014cc:	2300      	movs	r3, #0
  4014ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4014d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4014d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014da:	bf00      	nop

004014dc <_vfiprintf_r>:
  4014dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014e0:	b0ad      	sub	sp, #180	; 0xb4
  4014e2:	461d      	mov	r5, r3
  4014e4:	468b      	mov	fp, r1
  4014e6:	4690      	mov	r8, r2
  4014e8:	9307      	str	r3, [sp, #28]
  4014ea:	9006      	str	r0, [sp, #24]
  4014ec:	b118      	cbz	r0, 4014f6 <_vfiprintf_r+0x1a>
  4014ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4014f0:	2b00      	cmp	r3, #0
  4014f2:	f000 80f3 	beq.w	4016dc <_vfiprintf_r+0x200>
  4014f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4014fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4014fe:	07df      	lsls	r7, r3, #31
  401500:	b281      	uxth	r1, r0
  401502:	d402      	bmi.n	40150a <_vfiprintf_r+0x2e>
  401504:	058e      	lsls	r6, r1, #22
  401506:	f140 80fc 	bpl.w	401702 <_vfiprintf_r+0x226>
  40150a:	048c      	lsls	r4, r1, #18
  40150c:	d40a      	bmi.n	401524 <_vfiprintf_r+0x48>
  40150e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401512:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40151a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40151e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401522:	b289      	uxth	r1, r1
  401524:	0708      	lsls	r0, r1, #28
  401526:	f140 80b3 	bpl.w	401690 <_vfiprintf_r+0x1b4>
  40152a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40152e:	2b00      	cmp	r3, #0
  401530:	f000 80ae 	beq.w	401690 <_vfiprintf_r+0x1b4>
  401534:	f001 031a 	and.w	r3, r1, #26
  401538:	2b0a      	cmp	r3, #10
  40153a:	f000 80b5 	beq.w	4016a8 <_vfiprintf_r+0x1cc>
  40153e:	2300      	movs	r3, #0
  401540:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401544:	930b      	str	r3, [sp, #44]	; 0x2c
  401546:	9311      	str	r3, [sp, #68]	; 0x44
  401548:	9310      	str	r3, [sp, #64]	; 0x40
  40154a:	9303      	str	r3, [sp, #12]
  40154c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401550:	46ca      	mov	sl, r9
  401552:	f8cd b010 	str.w	fp, [sp, #16]
  401556:	f898 3000 	ldrb.w	r3, [r8]
  40155a:	4644      	mov	r4, r8
  40155c:	b1fb      	cbz	r3, 40159e <_vfiprintf_r+0xc2>
  40155e:	2b25      	cmp	r3, #37	; 0x25
  401560:	d102      	bne.n	401568 <_vfiprintf_r+0x8c>
  401562:	e01c      	b.n	40159e <_vfiprintf_r+0xc2>
  401564:	2b25      	cmp	r3, #37	; 0x25
  401566:	d003      	beq.n	401570 <_vfiprintf_r+0x94>
  401568:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40156c:	2b00      	cmp	r3, #0
  40156e:	d1f9      	bne.n	401564 <_vfiprintf_r+0x88>
  401570:	eba4 0508 	sub.w	r5, r4, r8
  401574:	b19d      	cbz	r5, 40159e <_vfiprintf_r+0xc2>
  401576:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401578:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40157a:	f8ca 8000 	str.w	r8, [sl]
  40157e:	3301      	adds	r3, #1
  401580:	442a      	add	r2, r5
  401582:	2b07      	cmp	r3, #7
  401584:	f8ca 5004 	str.w	r5, [sl, #4]
  401588:	9211      	str	r2, [sp, #68]	; 0x44
  40158a:	9310      	str	r3, [sp, #64]	; 0x40
  40158c:	dd7a      	ble.n	401684 <_vfiprintf_r+0x1a8>
  40158e:	2a00      	cmp	r2, #0
  401590:	f040 84b0 	bne.w	401ef4 <_vfiprintf_r+0xa18>
  401594:	9b03      	ldr	r3, [sp, #12]
  401596:	9210      	str	r2, [sp, #64]	; 0x40
  401598:	442b      	add	r3, r5
  40159a:	46ca      	mov	sl, r9
  40159c:	9303      	str	r3, [sp, #12]
  40159e:	7823      	ldrb	r3, [r4, #0]
  4015a0:	2b00      	cmp	r3, #0
  4015a2:	f000 83e0 	beq.w	401d66 <_vfiprintf_r+0x88a>
  4015a6:	2000      	movs	r0, #0
  4015a8:	f04f 0300 	mov.w	r3, #0
  4015ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4015b0:	f104 0801 	add.w	r8, r4, #1
  4015b4:	7862      	ldrb	r2, [r4, #1]
  4015b6:	4605      	mov	r5, r0
  4015b8:	4606      	mov	r6, r0
  4015ba:	4603      	mov	r3, r0
  4015bc:	f04f 34ff 	mov.w	r4, #4294967295
  4015c0:	f108 0801 	add.w	r8, r8, #1
  4015c4:	f1a2 0120 	sub.w	r1, r2, #32
  4015c8:	2958      	cmp	r1, #88	; 0x58
  4015ca:	f200 82de 	bhi.w	401b8a <_vfiprintf_r+0x6ae>
  4015ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4015d2:	0221      	.short	0x0221
  4015d4:	02dc02dc 	.word	0x02dc02dc
  4015d8:	02dc0229 	.word	0x02dc0229
  4015dc:	02dc02dc 	.word	0x02dc02dc
  4015e0:	02dc02dc 	.word	0x02dc02dc
  4015e4:	028902dc 	.word	0x028902dc
  4015e8:	02dc0295 	.word	0x02dc0295
  4015ec:	02bd00a2 	.word	0x02bd00a2
  4015f0:	019f02dc 	.word	0x019f02dc
  4015f4:	01a401a4 	.word	0x01a401a4
  4015f8:	01a401a4 	.word	0x01a401a4
  4015fc:	01a401a4 	.word	0x01a401a4
  401600:	01a401a4 	.word	0x01a401a4
  401604:	02dc01a4 	.word	0x02dc01a4
  401608:	02dc02dc 	.word	0x02dc02dc
  40160c:	02dc02dc 	.word	0x02dc02dc
  401610:	02dc02dc 	.word	0x02dc02dc
  401614:	02dc02dc 	.word	0x02dc02dc
  401618:	01b202dc 	.word	0x01b202dc
  40161c:	02dc02dc 	.word	0x02dc02dc
  401620:	02dc02dc 	.word	0x02dc02dc
  401624:	02dc02dc 	.word	0x02dc02dc
  401628:	02dc02dc 	.word	0x02dc02dc
  40162c:	02dc02dc 	.word	0x02dc02dc
  401630:	02dc0197 	.word	0x02dc0197
  401634:	02dc02dc 	.word	0x02dc02dc
  401638:	02dc02dc 	.word	0x02dc02dc
  40163c:	02dc019b 	.word	0x02dc019b
  401640:	025302dc 	.word	0x025302dc
  401644:	02dc02dc 	.word	0x02dc02dc
  401648:	02dc02dc 	.word	0x02dc02dc
  40164c:	02dc02dc 	.word	0x02dc02dc
  401650:	02dc02dc 	.word	0x02dc02dc
  401654:	02dc02dc 	.word	0x02dc02dc
  401658:	021b025a 	.word	0x021b025a
  40165c:	02dc02dc 	.word	0x02dc02dc
  401660:	026e02dc 	.word	0x026e02dc
  401664:	02dc021b 	.word	0x02dc021b
  401668:	027302dc 	.word	0x027302dc
  40166c:	01f502dc 	.word	0x01f502dc
  401670:	02090182 	.word	0x02090182
  401674:	02dc02d7 	.word	0x02dc02d7
  401678:	02dc029a 	.word	0x02dc029a
  40167c:	02dc00a7 	.word	0x02dc00a7
  401680:	022e02dc 	.word	0x022e02dc
  401684:	f10a 0a08 	add.w	sl, sl, #8
  401688:	9b03      	ldr	r3, [sp, #12]
  40168a:	442b      	add	r3, r5
  40168c:	9303      	str	r3, [sp, #12]
  40168e:	e786      	b.n	40159e <_vfiprintf_r+0xc2>
  401690:	4659      	mov	r1, fp
  401692:	9806      	ldr	r0, [sp, #24]
  401694:	f000 fdac 	bl	4021f0 <__swsetup_r>
  401698:	bb18      	cbnz	r0, 4016e2 <_vfiprintf_r+0x206>
  40169a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40169e:	f001 031a 	and.w	r3, r1, #26
  4016a2:	2b0a      	cmp	r3, #10
  4016a4:	f47f af4b 	bne.w	40153e <_vfiprintf_r+0x62>
  4016a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4016ac:	2b00      	cmp	r3, #0
  4016ae:	f6ff af46 	blt.w	40153e <_vfiprintf_r+0x62>
  4016b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4016b6:	07db      	lsls	r3, r3, #31
  4016b8:	d405      	bmi.n	4016c6 <_vfiprintf_r+0x1ea>
  4016ba:	058f      	lsls	r7, r1, #22
  4016bc:	d403      	bmi.n	4016c6 <_vfiprintf_r+0x1ea>
  4016be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4016c2:	f001 fac3 	bl	402c4c <__retarget_lock_release_recursive>
  4016c6:	462b      	mov	r3, r5
  4016c8:	4642      	mov	r2, r8
  4016ca:	4659      	mov	r1, fp
  4016cc:	9806      	ldr	r0, [sp, #24]
  4016ce:	f000 fd4d 	bl	40216c <__sbprintf>
  4016d2:	9003      	str	r0, [sp, #12]
  4016d4:	9803      	ldr	r0, [sp, #12]
  4016d6:	b02d      	add	sp, #180	; 0xb4
  4016d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016dc:	f000 fef4 	bl	4024c8 <__sinit>
  4016e0:	e709      	b.n	4014f6 <_vfiprintf_r+0x1a>
  4016e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4016e6:	07d9      	lsls	r1, r3, #31
  4016e8:	d404      	bmi.n	4016f4 <_vfiprintf_r+0x218>
  4016ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4016ee:	059a      	lsls	r2, r3, #22
  4016f0:	f140 84aa 	bpl.w	402048 <_vfiprintf_r+0xb6c>
  4016f4:	f04f 33ff 	mov.w	r3, #4294967295
  4016f8:	9303      	str	r3, [sp, #12]
  4016fa:	9803      	ldr	r0, [sp, #12]
  4016fc:	b02d      	add	sp, #180	; 0xb4
  4016fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401702:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401706:	f001 fa9f 	bl	402c48 <__retarget_lock_acquire_recursive>
  40170a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40170e:	b281      	uxth	r1, r0
  401710:	e6fb      	b.n	40150a <_vfiprintf_r+0x2e>
  401712:	4276      	negs	r6, r6
  401714:	9207      	str	r2, [sp, #28]
  401716:	f043 0304 	orr.w	r3, r3, #4
  40171a:	f898 2000 	ldrb.w	r2, [r8]
  40171e:	e74f      	b.n	4015c0 <_vfiprintf_r+0xe4>
  401720:	9608      	str	r6, [sp, #32]
  401722:	069e      	lsls	r6, r3, #26
  401724:	f100 8450 	bmi.w	401fc8 <_vfiprintf_r+0xaec>
  401728:	9907      	ldr	r1, [sp, #28]
  40172a:	06dd      	lsls	r5, r3, #27
  40172c:	460a      	mov	r2, r1
  40172e:	f100 83ef 	bmi.w	401f10 <_vfiprintf_r+0xa34>
  401732:	0658      	lsls	r0, r3, #25
  401734:	f140 83ec 	bpl.w	401f10 <_vfiprintf_r+0xa34>
  401738:	880e      	ldrh	r6, [r1, #0]
  40173a:	3104      	adds	r1, #4
  40173c:	2700      	movs	r7, #0
  40173e:	2201      	movs	r2, #1
  401740:	9107      	str	r1, [sp, #28]
  401742:	f04f 0100 	mov.w	r1, #0
  401746:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40174a:	2500      	movs	r5, #0
  40174c:	1c61      	adds	r1, r4, #1
  40174e:	f000 8116 	beq.w	40197e <_vfiprintf_r+0x4a2>
  401752:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401756:	9102      	str	r1, [sp, #8]
  401758:	ea56 0107 	orrs.w	r1, r6, r7
  40175c:	f040 8114 	bne.w	401988 <_vfiprintf_r+0x4ac>
  401760:	2c00      	cmp	r4, #0
  401762:	f040 835c 	bne.w	401e1e <_vfiprintf_r+0x942>
  401766:	2a00      	cmp	r2, #0
  401768:	f040 83b7 	bne.w	401eda <_vfiprintf_r+0x9fe>
  40176c:	f013 0301 	ands.w	r3, r3, #1
  401770:	9305      	str	r3, [sp, #20]
  401772:	f000 8457 	beq.w	402024 <_vfiprintf_r+0xb48>
  401776:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40177a:	2330      	movs	r3, #48	; 0x30
  40177c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401780:	9b05      	ldr	r3, [sp, #20]
  401782:	42a3      	cmp	r3, r4
  401784:	bfb8      	it	lt
  401786:	4623      	movlt	r3, r4
  401788:	9301      	str	r3, [sp, #4]
  40178a:	b10d      	cbz	r5, 401790 <_vfiprintf_r+0x2b4>
  40178c:	3301      	adds	r3, #1
  40178e:	9301      	str	r3, [sp, #4]
  401790:	9b02      	ldr	r3, [sp, #8]
  401792:	f013 0302 	ands.w	r3, r3, #2
  401796:	9309      	str	r3, [sp, #36]	; 0x24
  401798:	d002      	beq.n	4017a0 <_vfiprintf_r+0x2c4>
  40179a:	9b01      	ldr	r3, [sp, #4]
  40179c:	3302      	adds	r3, #2
  40179e:	9301      	str	r3, [sp, #4]
  4017a0:	9b02      	ldr	r3, [sp, #8]
  4017a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4017a6:	930a      	str	r3, [sp, #40]	; 0x28
  4017a8:	f040 8217 	bne.w	401bda <_vfiprintf_r+0x6fe>
  4017ac:	9b08      	ldr	r3, [sp, #32]
  4017ae:	9a01      	ldr	r2, [sp, #4]
  4017b0:	1a9d      	subs	r5, r3, r2
  4017b2:	2d00      	cmp	r5, #0
  4017b4:	f340 8211 	ble.w	401bda <_vfiprintf_r+0x6fe>
  4017b8:	2d10      	cmp	r5, #16
  4017ba:	f340 8490 	ble.w	4020de <_vfiprintf_r+0xc02>
  4017be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4017c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4017c2:	4ec4      	ldr	r6, [pc, #784]	; (401ad4 <_vfiprintf_r+0x5f8>)
  4017c4:	46d6      	mov	lr, sl
  4017c6:	2710      	movs	r7, #16
  4017c8:	46a2      	mov	sl, r4
  4017ca:	4619      	mov	r1, r3
  4017cc:	9c06      	ldr	r4, [sp, #24]
  4017ce:	e007      	b.n	4017e0 <_vfiprintf_r+0x304>
  4017d0:	f101 0c02 	add.w	ip, r1, #2
  4017d4:	f10e 0e08 	add.w	lr, lr, #8
  4017d8:	4601      	mov	r1, r0
  4017da:	3d10      	subs	r5, #16
  4017dc:	2d10      	cmp	r5, #16
  4017de:	dd11      	ble.n	401804 <_vfiprintf_r+0x328>
  4017e0:	1c48      	adds	r0, r1, #1
  4017e2:	3210      	adds	r2, #16
  4017e4:	2807      	cmp	r0, #7
  4017e6:	9211      	str	r2, [sp, #68]	; 0x44
  4017e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4017ec:	9010      	str	r0, [sp, #64]	; 0x40
  4017ee:	ddef      	ble.n	4017d0 <_vfiprintf_r+0x2f4>
  4017f0:	2a00      	cmp	r2, #0
  4017f2:	f040 81e4 	bne.w	401bbe <_vfiprintf_r+0x6e2>
  4017f6:	3d10      	subs	r5, #16
  4017f8:	2d10      	cmp	r5, #16
  4017fa:	4611      	mov	r1, r2
  4017fc:	f04f 0c01 	mov.w	ip, #1
  401800:	46ce      	mov	lr, r9
  401802:	dced      	bgt.n	4017e0 <_vfiprintf_r+0x304>
  401804:	4654      	mov	r4, sl
  401806:	4661      	mov	r1, ip
  401808:	46f2      	mov	sl, lr
  40180a:	442a      	add	r2, r5
  40180c:	2907      	cmp	r1, #7
  40180e:	9211      	str	r2, [sp, #68]	; 0x44
  401810:	f8ca 6000 	str.w	r6, [sl]
  401814:	f8ca 5004 	str.w	r5, [sl, #4]
  401818:	9110      	str	r1, [sp, #64]	; 0x40
  40181a:	f300 82ec 	bgt.w	401df6 <_vfiprintf_r+0x91a>
  40181e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401822:	f10a 0a08 	add.w	sl, sl, #8
  401826:	1c48      	adds	r0, r1, #1
  401828:	2d00      	cmp	r5, #0
  40182a:	f040 81de 	bne.w	401bea <_vfiprintf_r+0x70e>
  40182e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401830:	2b00      	cmp	r3, #0
  401832:	f000 81f8 	beq.w	401c26 <_vfiprintf_r+0x74a>
  401836:	3202      	adds	r2, #2
  401838:	a90e      	add	r1, sp, #56	; 0x38
  40183a:	2302      	movs	r3, #2
  40183c:	2807      	cmp	r0, #7
  40183e:	9211      	str	r2, [sp, #68]	; 0x44
  401840:	9010      	str	r0, [sp, #64]	; 0x40
  401842:	e88a 000a 	stmia.w	sl, {r1, r3}
  401846:	f340 81ea 	ble.w	401c1e <_vfiprintf_r+0x742>
  40184a:	2a00      	cmp	r2, #0
  40184c:	f040 838c 	bne.w	401f68 <_vfiprintf_r+0xa8c>
  401850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401852:	2b80      	cmp	r3, #128	; 0x80
  401854:	f04f 0001 	mov.w	r0, #1
  401858:	4611      	mov	r1, r2
  40185a:	46ca      	mov	sl, r9
  40185c:	f040 81e7 	bne.w	401c2e <_vfiprintf_r+0x752>
  401860:	9b08      	ldr	r3, [sp, #32]
  401862:	9d01      	ldr	r5, [sp, #4]
  401864:	1b5e      	subs	r6, r3, r5
  401866:	2e00      	cmp	r6, #0
  401868:	f340 81e1 	ble.w	401c2e <_vfiprintf_r+0x752>
  40186c:	2e10      	cmp	r6, #16
  40186e:	4d9a      	ldr	r5, [pc, #616]	; (401ad8 <_vfiprintf_r+0x5fc>)
  401870:	f340 8450 	ble.w	402114 <_vfiprintf_r+0xc38>
  401874:	46d4      	mov	ip, sl
  401876:	2710      	movs	r7, #16
  401878:	46a2      	mov	sl, r4
  40187a:	9c06      	ldr	r4, [sp, #24]
  40187c:	e007      	b.n	40188e <_vfiprintf_r+0x3b2>
  40187e:	f101 0e02 	add.w	lr, r1, #2
  401882:	f10c 0c08 	add.w	ip, ip, #8
  401886:	4601      	mov	r1, r0
  401888:	3e10      	subs	r6, #16
  40188a:	2e10      	cmp	r6, #16
  40188c:	dd11      	ble.n	4018b2 <_vfiprintf_r+0x3d6>
  40188e:	1c48      	adds	r0, r1, #1
  401890:	3210      	adds	r2, #16
  401892:	2807      	cmp	r0, #7
  401894:	9211      	str	r2, [sp, #68]	; 0x44
  401896:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40189a:	9010      	str	r0, [sp, #64]	; 0x40
  40189c:	ddef      	ble.n	40187e <_vfiprintf_r+0x3a2>
  40189e:	2a00      	cmp	r2, #0
  4018a0:	f040 829d 	bne.w	401dde <_vfiprintf_r+0x902>
  4018a4:	3e10      	subs	r6, #16
  4018a6:	2e10      	cmp	r6, #16
  4018a8:	f04f 0e01 	mov.w	lr, #1
  4018ac:	4611      	mov	r1, r2
  4018ae:	46cc      	mov	ip, r9
  4018b0:	dced      	bgt.n	40188e <_vfiprintf_r+0x3b2>
  4018b2:	4654      	mov	r4, sl
  4018b4:	46e2      	mov	sl, ip
  4018b6:	4432      	add	r2, r6
  4018b8:	f1be 0f07 	cmp.w	lr, #7
  4018bc:	9211      	str	r2, [sp, #68]	; 0x44
  4018be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4018c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4018c6:	f300 8369 	bgt.w	401f9c <_vfiprintf_r+0xac0>
  4018ca:	f10a 0a08 	add.w	sl, sl, #8
  4018ce:	f10e 0001 	add.w	r0, lr, #1
  4018d2:	4671      	mov	r1, lr
  4018d4:	e1ab      	b.n	401c2e <_vfiprintf_r+0x752>
  4018d6:	9608      	str	r6, [sp, #32]
  4018d8:	f013 0220 	ands.w	r2, r3, #32
  4018dc:	f040 838c 	bne.w	401ff8 <_vfiprintf_r+0xb1c>
  4018e0:	f013 0110 	ands.w	r1, r3, #16
  4018e4:	f040 831a 	bne.w	401f1c <_vfiprintf_r+0xa40>
  4018e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4018ec:	f000 8316 	beq.w	401f1c <_vfiprintf_r+0xa40>
  4018f0:	9807      	ldr	r0, [sp, #28]
  4018f2:	460a      	mov	r2, r1
  4018f4:	4601      	mov	r1, r0
  4018f6:	3104      	adds	r1, #4
  4018f8:	8806      	ldrh	r6, [r0, #0]
  4018fa:	9107      	str	r1, [sp, #28]
  4018fc:	2700      	movs	r7, #0
  4018fe:	e720      	b.n	401742 <_vfiprintf_r+0x266>
  401900:	9608      	str	r6, [sp, #32]
  401902:	f043 0310 	orr.w	r3, r3, #16
  401906:	e7e7      	b.n	4018d8 <_vfiprintf_r+0x3fc>
  401908:	9608      	str	r6, [sp, #32]
  40190a:	f043 0310 	orr.w	r3, r3, #16
  40190e:	e708      	b.n	401722 <_vfiprintf_r+0x246>
  401910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401914:	f898 2000 	ldrb.w	r2, [r8]
  401918:	e652      	b.n	4015c0 <_vfiprintf_r+0xe4>
  40191a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40191e:	2600      	movs	r6, #0
  401920:	f818 2b01 	ldrb.w	r2, [r8], #1
  401924:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401928:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40192c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401930:	2909      	cmp	r1, #9
  401932:	d9f5      	bls.n	401920 <_vfiprintf_r+0x444>
  401934:	e646      	b.n	4015c4 <_vfiprintf_r+0xe8>
  401936:	9608      	str	r6, [sp, #32]
  401938:	2800      	cmp	r0, #0
  40193a:	f040 8408 	bne.w	40214e <_vfiprintf_r+0xc72>
  40193e:	f043 0310 	orr.w	r3, r3, #16
  401942:	069e      	lsls	r6, r3, #26
  401944:	f100 834c 	bmi.w	401fe0 <_vfiprintf_r+0xb04>
  401948:	06dd      	lsls	r5, r3, #27
  40194a:	f100 82f3 	bmi.w	401f34 <_vfiprintf_r+0xa58>
  40194e:	0658      	lsls	r0, r3, #25
  401950:	f140 82f0 	bpl.w	401f34 <_vfiprintf_r+0xa58>
  401954:	9d07      	ldr	r5, [sp, #28]
  401956:	f9b5 6000 	ldrsh.w	r6, [r5]
  40195a:	462a      	mov	r2, r5
  40195c:	17f7      	asrs	r7, r6, #31
  40195e:	3204      	adds	r2, #4
  401960:	4630      	mov	r0, r6
  401962:	4639      	mov	r1, r7
  401964:	9207      	str	r2, [sp, #28]
  401966:	2800      	cmp	r0, #0
  401968:	f171 0200 	sbcs.w	r2, r1, #0
  40196c:	f2c0 835d 	blt.w	40202a <_vfiprintf_r+0xb4e>
  401970:	1c61      	adds	r1, r4, #1
  401972:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401976:	f04f 0201 	mov.w	r2, #1
  40197a:	f47f aeea 	bne.w	401752 <_vfiprintf_r+0x276>
  40197e:	ea56 0107 	orrs.w	r1, r6, r7
  401982:	f000 824d 	beq.w	401e20 <_vfiprintf_r+0x944>
  401986:	9302      	str	r3, [sp, #8]
  401988:	2a01      	cmp	r2, #1
  40198a:	f000 828c 	beq.w	401ea6 <_vfiprintf_r+0x9ca>
  40198e:	2a02      	cmp	r2, #2
  401990:	f040 825c 	bne.w	401e4c <_vfiprintf_r+0x970>
  401994:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401996:	46cb      	mov	fp, r9
  401998:	0933      	lsrs	r3, r6, #4
  40199a:	f006 010f 	and.w	r1, r6, #15
  40199e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4019a2:	093a      	lsrs	r2, r7, #4
  4019a4:	461e      	mov	r6, r3
  4019a6:	4617      	mov	r7, r2
  4019a8:	5c43      	ldrb	r3, [r0, r1]
  4019aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4019ae:	ea56 0307 	orrs.w	r3, r6, r7
  4019b2:	d1f1      	bne.n	401998 <_vfiprintf_r+0x4bc>
  4019b4:	eba9 030b 	sub.w	r3, r9, fp
  4019b8:	9305      	str	r3, [sp, #20]
  4019ba:	e6e1      	b.n	401780 <_vfiprintf_r+0x2a4>
  4019bc:	2800      	cmp	r0, #0
  4019be:	f040 83c0 	bne.w	402142 <_vfiprintf_r+0xc66>
  4019c2:	0699      	lsls	r1, r3, #26
  4019c4:	f100 8367 	bmi.w	402096 <_vfiprintf_r+0xbba>
  4019c8:	06da      	lsls	r2, r3, #27
  4019ca:	f100 80f1 	bmi.w	401bb0 <_vfiprintf_r+0x6d4>
  4019ce:	065b      	lsls	r3, r3, #25
  4019d0:	f140 80ee 	bpl.w	401bb0 <_vfiprintf_r+0x6d4>
  4019d4:	9a07      	ldr	r2, [sp, #28]
  4019d6:	6813      	ldr	r3, [r2, #0]
  4019d8:	3204      	adds	r2, #4
  4019da:	9207      	str	r2, [sp, #28]
  4019dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4019e0:	801a      	strh	r2, [r3, #0]
  4019e2:	e5b8      	b.n	401556 <_vfiprintf_r+0x7a>
  4019e4:	9807      	ldr	r0, [sp, #28]
  4019e6:	4a3d      	ldr	r2, [pc, #244]	; (401adc <_vfiprintf_r+0x600>)
  4019e8:	9608      	str	r6, [sp, #32]
  4019ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4019ec:	6806      	ldr	r6, [r0, #0]
  4019ee:	2278      	movs	r2, #120	; 0x78
  4019f0:	2130      	movs	r1, #48	; 0x30
  4019f2:	3004      	adds	r0, #4
  4019f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4019f8:	f043 0302 	orr.w	r3, r3, #2
  4019fc:	9007      	str	r0, [sp, #28]
  4019fe:	2700      	movs	r7, #0
  401a00:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401a04:	2202      	movs	r2, #2
  401a06:	e69c      	b.n	401742 <_vfiprintf_r+0x266>
  401a08:	9608      	str	r6, [sp, #32]
  401a0a:	2800      	cmp	r0, #0
  401a0c:	d099      	beq.n	401942 <_vfiprintf_r+0x466>
  401a0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401a12:	e796      	b.n	401942 <_vfiprintf_r+0x466>
  401a14:	f898 2000 	ldrb.w	r2, [r8]
  401a18:	2d00      	cmp	r5, #0
  401a1a:	f47f add1 	bne.w	4015c0 <_vfiprintf_r+0xe4>
  401a1e:	2001      	movs	r0, #1
  401a20:	2520      	movs	r5, #32
  401a22:	e5cd      	b.n	4015c0 <_vfiprintf_r+0xe4>
  401a24:	f043 0301 	orr.w	r3, r3, #1
  401a28:	f898 2000 	ldrb.w	r2, [r8]
  401a2c:	e5c8      	b.n	4015c0 <_vfiprintf_r+0xe4>
  401a2e:	9608      	str	r6, [sp, #32]
  401a30:	2800      	cmp	r0, #0
  401a32:	f040 8393 	bne.w	40215c <_vfiprintf_r+0xc80>
  401a36:	4929      	ldr	r1, [pc, #164]	; (401adc <_vfiprintf_r+0x600>)
  401a38:	910b      	str	r1, [sp, #44]	; 0x2c
  401a3a:	069f      	lsls	r7, r3, #26
  401a3c:	f100 82e8 	bmi.w	402010 <_vfiprintf_r+0xb34>
  401a40:	9807      	ldr	r0, [sp, #28]
  401a42:	06de      	lsls	r6, r3, #27
  401a44:	4601      	mov	r1, r0
  401a46:	f100 8270 	bmi.w	401f2a <_vfiprintf_r+0xa4e>
  401a4a:	065d      	lsls	r5, r3, #25
  401a4c:	f140 826d 	bpl.w	401f2a <_vfiprintf_r+0xa4e>
  401a50:	3104      	adds	r1, #4
  401a52:	8806      	ldrh	r6, [r0, #0]
  401a54:	9107      	str	r1, [sp, #28]
  401a56:	2700      	movs	r7, #0
  401a58:	07d8      	lsls	r0, r3, #31
  401a5a:	f140 8222 	bpl.w	401ea2 <_vfiprintf_r+0x9c6>
  401a5e:	ea56 0107 	orrs.w	r1, r6, r7
  401a62:	f000 821e 	beq.w	401ea2 <_vfiprintf_r+0x9c6>
  401a66:	2130      	movs	r1, #48	; 0x30
  401a68:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401a6c:	f043 0302 	orr.w	r3, r3, #2
  401a70:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401a74:	2202      	movs	r2, #2
  401a76:	e664      	b.n	401742 <_vfiprintf_r+0x266>
  401a78:	9608      	str	r6, [sp, #32]
  401a7a:	2800      	cmp	r0, #0
  401a7c:	f040 836b 	bne.w	402156 <_vfiprintf_r+0xc7a>
  401a80:	4917      	ldr	r1, [pc, #92]	; (401ae0 <_vfiprintf_r+0x604>)
  401a82:	910b      	str	r1, [sp, #44]	; 0x2c
  401a84:	e7d9      	b.n	401a3a <_vfiprintf_r+0x55e>
  401a86:	9907      	ldr	r1, [sp, #28]
  401a88:	9608      	str	r6, [sp, #32]
  401a8a:	680a      	ldr	r2, [r1, #0]
  401a8c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401a90:	f04f 0000 	mov.w	r0, #0
  401a94:	460a      	mov	r2, r1
  401a96:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401a9a:	3204      	adds	r2, #4
  401a9c:	2001      	movs	r0, #1
  401a9e:	9001      	str	r0, [sp, #4]
  401aa0:	9207      	str	r2, [sp, #28]
  401aa2:	9005      	str	r0, [sp, #20]
  401aa4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401aa8:	9302      	str	r3, [sp, #8]
  401aaa:	2400      	movs	r4, #0
  401aac:	e670      	b.n	401790 <_vfiprintf_r+0x2b4>
  401aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401ab2:	f898 2000 	ldrb.w	r2, [r8]
  401ab6:	e583      	b.n	4015c0 <_vfiprintf_r+0xe4>
  401ab8:	f898 2000 	ldrb.w	r2, [r8]
  401abc:	2a6c      	cmp	r2, #108	; 0x6c
  401abe:	bf03      	ittte	eq
  401ac0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401ac4:	f043 0320 	orreq.w	r3, r3, #32
  401ac8:	f108 0801 	addeq.w	r8, r8, #1
  401acc:	f043 0310 	orrne.w	r3, r3, #16
  401ad0:	e576      	b.n	4015c0 <_vfiprintf_r+0xe4>
  401ad2:	bf00      	nop
  401ad4:	004040e0 	.word	0x004040e0
  401ad8:	004040f0 	.word	0x004040f0
  401adc:	004040c4 	.word	0x004040c4
  401ae0:	004040b0 	.word	0x004040b0
  401ae4:	9907      	ldr	r1, [sp, #28]
  401ae6:	680e      	ldr	r6, [r1, #0]
  401ae8:	460a      	mov	r2, r1
  401aea:	2e00      	cmp	r6, #0
  401aec:	f102 0204 	add.w	r2, r2, #4
  401af0:	f6ff ae0f 	blt.w	401712 <_vfiprintf_r+0x236>
  401af4:	9207      	str	r2, [sp, #28]
  401af6:	f898 2000 	ldrb.w	r2, [r8]
  401afa:	e561      	b.n	4015c0 <_vfiprintf_r+0xe4>
  401afc:	f898 2000 	ldrb.w	r2, [r8]
  401b00:	2001      	movs	r0, #1
  401b02:	252b      	movs	r5, #43	; 0x2b
  401b04:	e55c      	b.n	4015c0 <_vfiprintf_r+0xe4>
  401b06:	9907      	ldr	r1, [sp, #28]
  401b08:	9608      	str	r6, [sp, #32]
  401b0a:	f8d1 b000 	ldr.w	fp, [r1]
  401b0e:	f04f 0200 	mov.w	r2, #0
  401b12:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401b16:	1d0e      	adds	r6, r1, #4
  401b18:	f1bb 0f00 	cmp.w	fp, #0
  401b1c:	f000 82e5 	beq.w	4020ea <_vfiprintf_r+0xc0e>
  401b20:	1c67      	adds	r7, r4, #1
  401b22:	f000 82c4 	beq.w	4020ae <_vfiprintf_r+0xbd2>
  401b26:	4622      	mov	r2, r4
  401b28:	2100      	movs	r1, #0
  401b2a:	4658      	mov	r0, fp
  401b2c:	9301      	str	r3, [sp, #4]
  401b2e:	f001 fbd7 	bl	4032e0 <memchr>
  401b32:	9b01      	ldr	r3, [sp, #4]
  401b34:	2800      	cmp	r0, #0
  401b36:	f000 82e5 	beq.w	402104 <_vfiprintf_r+0xc28>
  401b3a:	eba0 020b 	sub.w	r2, r0, fp
  401b3e:	9205      	str	r2, [sp, #20]
  401b40:	9607      	str	r6, [sp, #28]
  401b42:	9302      	str	r3, [sp, #8]
  401b44:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401b48:	2400      	movs	r4, #0
  401b4a:	e619      	b.n	401780 <_vfiprintf_r+0x2a4>
  401b4c:	f898 2000 	ldrb.w	r2, [r8]
  401b50:	2a2a      	cmp	r2, #42	; 0x2a
  401b52:	f108 0701 	add.w	r7, r8, #1
  401b56:	f000 82e9 	beq.w	40212c <_vfiprintf_r+0xc50>
  401b5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401b5e:	2909      	cmp	r1, #9
  401b60:	46b8      	mov	r8, r7
  401b62:	f04f 0400 	mov.w	r4, #0
  401b66:	f63f ad2d 	bhi.w	4015c4 <_vfiprintf_r+0xe8>
  401b6a:	f818 2b01 	ldrb.w	r2, [r8], #1
  401b6e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401b72:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401b76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401b7a:	2909      	cmp	r1, #9
  401b7c:	d9f5      	bls.n	401b6a <_vfiprintf_r+0x68e>
  401b7e:	e521      	b.n	4015c4 <_vfiprintf_r+0xe8>
  401b80:	f043 0320 	orr.w	r3, r3, #32
  401b84:	f898 2000 	ldrb.w	r2, [r8]
  401b88:	e51a      	b.n	4015c0 <_vfiprintf_r+0xe4>
  401b8a:	9608      	str	r6, [sp, #32]
  401b8c:	2800      	cmp	r0, #0
  401b8e:	f040 82db 	bne.w	402148 <_vfiprintf_r+0xc6c>
  401b92:	2a00      	cmp	r2, #0
  401b94:	f000 80e7 	beq.w	401d66 <_vfiprintf_r+0x88a>
  401b98:	2101      	movs	r1, #1
  401b9a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401b9e:	f04f 0200 	mov.w	r2, #0
  401ba2:	9101      	str	r1, [sp, #4]
  401ba4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401ba8:	9105      	str	r1, [sp, #20]
  401baa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401bae:	e77b      	b.n	401aa8 <_vfiprintf_r+0x5cc>
  401bb0:	9a07      	ldr	r2, [sp, #28]
  401bb2:	6813      	ldr	r3, [r2, #0]
  401bb4:	3204      	adds	r2, #4
  401bb6:	9207      	str	r2, [sp, #28]
  401bb8:	9a03      	ldr	r2, [sp, #12]
  401bba:	601a      	str	r2, [r3, #0]
  401bbc:	e4cb      	b.n	401556 <_vfiprintf_r+0x7a>
  401bbe:	aa0f      	add	r2, sp, #60	; 0x3c
  401bc0:	9904      	ldr	r1, [sp, #16]
  401bc2:	4620      	mov	r0, r4
  401bc4:	f7ff fc4a 	bl	40145c <__sprint_r.part.0>
  401bc8:	2800      	cmp	r0, #0
  401bca:	f040 8139 	bne.w	401e40 <_vfiprintf_r+0x964>
  401bce:	9910      	ldr	r1, [sp, #64]	; 0x40
  401bd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401bd2:	f101 0c01 	add.w	ip, r1, #1
  401bd6:	46ce      	mov	lr, r9
  401bd8:	e5ff      	b.n	4017da <_vfiprintf_r+0x2fe>
  401bda:	9910      	ldr	r1, [sp, #64]	; 0x40
  401bdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401bde:	1c48      	adds	r0, r1, #1
  401be0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401be4:	2d00      	cmp	r5, #0
  401be6:	f43f ae22 	beq.w	40182e <_vfiprintf_r+0x352>
  401bea:	3201      	adds	r2, #1
  401bec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401bf0:	2101      	movs	r1, #1
  401bf2:	2807      	cmp	r0, #7
  401bf4:	9211      	str	r2, [sp, #68]	; 0x44
  401bf6:	9010      	str	r0, [sp, #64]	; 0x40
  401bf8:	f8ca 5000 	str.w	r5, [sl]
  401bfc:	f8ca 1004 	str.w	r1, [sl, #4]
  401c00:	f340 8108 	ble.w	401e14 <_vfiprintf_r+0x938>
  401c04:	2a00      	cmp	r2, #0
  401c06:	f040 81bc 	bne.w	401f82 <_vfiprintf_r+0xaa6>
  401c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401c0c:	2b00      	cmp	r3, #0
  401c0e:	f43f ae1f 	beq.w	401850 <_vfiprintf_r+0x374>
  401c12:	ab0e      	add	r3, sp, #56	; 0x38
  401c14:	2202      	movs	r2, #2
  401c16:	4608      	mov	r0, r1
  401c18:	931c      	str	r3, [sp, #112]	; 0x70
  401c1a:	921d      	str	r2, [sp, #116]	; 0x74
  401c1c:	46ca      	mov	sl, r9
  401c1e:	4601      	mov	r1, r0
  401c20:	f10a 0a08 	add.w	sl, sl, #8
  401c24:	3001      	adds	r0, #1
  401c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401c28:	2b80      	cmp	r3, #128	; 0x80
  401c2a:	f43f ae19 	beq.w	401860 <_vfiprintf_r+0x384>
  401c2e:	9b05      	ldr	r3, [sp, #20]
  401c30:	1ae4      	subs	r4, r4, r3
  401c32:	2c00      	cmp	r4, #0
  401c34:	dd2e      	ble.n	401c94 <_vfiprintf_r+0x7b8>
  401c36:	2c10      	cmp	r4, #16
  401c38:	4db3      	ldr	r5, [pc, #716]	; (401f08 <_vfiprintf_r+0xa2c>)
  401c3a:	dd1e      	ble.n	401c7a <_vfiprintf_r+0x79e>
  401c3c:	46d6      	mov	lr, sl
  401c3e:	2610      	movs	r6, #16
  401c40:	9f06      	ldr	r7, [sp, #24]
  401c42:	f8dd a010 	ldr.w	sl, [sp, #16]
  401c46:	e006      	b.n	401c56 <_vfiprintf_r+0x77a>
  401c48:	1c88      	adds	r0, r1, #2
  401c4a:	f10e 0e08 	add.w	lr, lr, #8
  401c4e:	4619      	mov	r1, r3
  401c50:	3c10      	subs	r4, #16
  401c52:	2c10      	cmp	r4, #16
  401c54:	dd10      	ble.n	401c78 <_vfiprintf_r+0x79c>
  401c56:	1c4b      	adds	r3, r1, #1
  401c58:	3210      	adds	r2, #16
  401c5a:	2b07      	cmp	r3, #7
  401c5c:	9211      	str	r2, [sp, #68]	; 0x44
  401c5e:	e88e 0060 	stmia.w	lr, {r5, r6}
  401c62:	9310      	str	r3, [sp, #64]	; 0x40
  401c64:	ddf0      	ble.n	401c48 <_vfiprintf_r+0x76c>
  401c66:	2a00      	cmp	r2, #0
  401c68:	d165      	bne.n	401d36 <_vfiprintf_r+0x85a>
  401c6a:	3c10      	subs	r4, #16
  401c6c:	2c10      	cmp	r4, #16
  401c6e:	f04f 0001 	mov.w	r0, #1
  401c72:	4611      	mov	r1, r2
  401c74:	46ce      	mov	lr, r9
  401c76:	dcee      	bgt.n	401c56 <_vfiprintf_r+0x77a>
  401c78:	46f2      	mov	sl, lr
  401c7a:	4422      	add	r2, r4
  401c7c:	2807      	cmp	r0, #7
  401c7e:	9211      	str	r2, [sp, #68]	; 0x44
  401c80:	f8ca 5000 	str.w	r5, [sl]
  401c84:	f8ca 4004 	str.w	r4, [sl, #4]
  401c88:	9010      	str	r0, [sp, #64]	; 0x40
  401c8a:	f300 8085 	bgt.w	401d98 <_vfiprintf_r+0x8bc>
  401c8e:	f10a 0a08 	add.w	sl, sl, #8
  401c92:	3001      	adds	r0, #1
  401c94:	9905      	ldr	r1, [sp, #20]
  401c96:	f8ca b000 	str.w	fp, [sl]
  401c9a:	440a      	add	r2, r1
  401c9c:	2807      	cmp	r0, #7
  401c9e:	9211      	str	r2, [sp, #68]	; 0x44
  401ca0:	f8ca 1004 	str.w	r1, [sl, #4]
  401ca4:	9010      	str	r0, [sp, #64]	; 0x40
  401ca6:	f340 8082 	ble.w	401dae <_vfiprintf_r+0x8d2>
  401caa:	2a00      	cmp	r2, #0
  401cac:	f040 8118 	bne.w	401ee0 <_vfiprintf_r+0xa04>
  401cb0:	9b02      	ldr	r3, [sp, #8]
  401cb2:	9210      	str	r2, [sp, #64]	; 0x40
  401cb4:	0758      	lsls	r0, r3, #29
  401cb6:	d535      	bpl.n	401d24 <_vfiprintf_r+0x848>
  401cb8:	9b08      	ldr	r3, [sp, #32]
  401cba:	9901      	ldr	r1, [sp, #4]
  401cbc:	1a5c      	subs	r4, r3, r1
  401cbe:	2c00      	cmp	r4, #0
  401cc0:	f340 80e7 	ble.w	401e92 <_vfiprintf_r+0x9b6>
  401cc4:	46ca      	mov	sl, r9
  401cc6:	2c10      	cmp	r4, #16
  401cc8:	f340 8218 	ble.w	4020fc <_vfiprintf_r+0xc20>
  401ccc:	9910      	ldr	r1, [sp, #64]	; 0x40
  401cce:	4e8f      	ldr	r6, [pc, #572]	; (401f0c <_vfiprintf_r+0xa30>)
  401cd0:	9f06      	ldr	r7, [sp, #24]
  401cd2:	f8dd b010 	ldr.w	fp, [sp, #16]
  401cd6:	2510      	movs	r5, #16
  401cd8:	e006      	b.n	401ce8 <_vfiprintf_r+0x80c>
  401cda:	1c88      	adds	r0, r1, #2
  401cdc:	f10a 0a08 	add.w	sl, sl, #8
  401ce0:	4619      	mov	r1, r3
  401ce2:	3c10      	subs	r4, #16
  401ce4:	2c10      	cmp	r4, #16
  401ce6:	dd11      	ble.n	401d0c <_vfiprintf_r+0x830>
  401ce8:	1c4b      	adds	r3, r1, #1
  401cea:	3210      	adds	r2, #16
  401cec:	2b07      	cmp	r3, #7
  401cee:	9211      	str	r2, [sp, #68]	; 0x44
  401cf0:	f8ca 6000 	str.w	r6, [sl]
  401cf4:	f8ca 5004 	str.w	r5, [sl, #4]
  401cf8:	9310      	str	r3, [sp, #64]	; 0x40
  401cfa:	ddee      	ble.n	401cda <_vfiprintf_r+0x7fe>
  401cfc:	bb42      	cbnz	r2, 401d50 <_vfiprintf_r+0x874>
  401cfe:	3c10      	subs	r4, #16
  401d00:	2c10      	cmp	r4, #16
  401d02:	f04f 0001 	mov.w	r0, #1
  401d06:	4611      	mov	r1, r2
  401d08:	46ca      	mov	sl, r9
  401d0a:	dced      	bgt.n	401ce8 <_vfiprintf_r+0x80c>
  401d0c:	4422      	add	r2, r4
  401d0e:	2807      	cmp	r0, #7
  401d10:	9211      	str	r2, [sp, #68]	; 0x44
  401d12:	f8ca 6000 	str.w	r6, [sl]
  401d16:	f8ca 4004 	str.w	r4, [sl, #4]
  401d1a:	9010      	str	r0, [sp, #64]	; 0x40
  401d1c:	dd51      	ble.n	401dc2 <_vfiprintf_r+0x8e6>
  401d1e:	2a00      	cmp	r2, #0
  401d20:	f040 819b 	bne.w	40205a <_vfiprintf_r+0xb7e>
  401d24:	9b03      	ldr	r3, [sp, #12]
  401d26:	9a08      	ldr	r2, [sp, #32]
  401d28:	9901      	ldr	r1, [sp, #4]
  401d2a:	428a      	cmp	r2, r1
  401d2c:	bfac      	ite	ge
  401d2e:	189b      	addge	r3, r3, r2
  401d30:	185b      	addlt	r3, r3, r1
  401d32:	9303      	str	r3, [sp, #12]
  401d34:	e04e      	b.n	401dd4 <_vfiprintf_r+0x8f8>
  401d36:	aa0f      	add	r2, sp, #60	; 0x3c
  401d38:	4651      	mov	r1, sl
  401d3a:	4638      	mov	r0, r7
  401d3c:	f7ff fb8e 	bl	40145c <__sprint_r.part.0>
  401d40:	2800      	cmp	r0, #0
  401d42:	f040 813f 	bne.w	401fc4 <_vfiprintf_r+0xae8>
  401d46:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d4a:	1c48      	adds	r0, r1, #1
  401d4c:	46ce      	mov	lr, r9
  401d4e:	e77f      	b.n	401c50 <_vfiprintf_r+0x774>
  401d50:	aa0f      	add	r2, sp, #60	; 0x3c
  401d52:	4659      	mov	r1, fp
  401d54:	4638      	mov	r0, r7
  401d56:	f7ff fb81 	bl	40145c <__sprint_r.part.0>
  401d5a:	b960      	cbnz	r0, 401d76 <_vfiprintf_r+0x89a>
  401d5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d60:	1c48      	adds	r0, r1, #1
  401d62:	46ca      	mov	sl, r9
  401d64:	e7bd      	b.n	401ce2 <_vfiprintf_r+0x806>
  401d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401d68:	f8dd b010 	ldr.w	fp, [sp, #16]
  401d6c:	2b00      	cmp	r3, #0
  401d6e:	f040 81d4 	bne.w	40211a <_vfiprintf_r+0xc3e>
  401d72:	2300      	movs	r3, #0
  401d74:	9310      	str	r3, [sp, #64]	; 0x40
  401d76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401d7a:	f013 0f01 	tst.w	r3, #1
  401d7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401d82:	d102      	bne.n	401d8a <_vfiprintf_r+0x8ae>
  401d84:	059a      	lsls	r2, r3, #22
  401d86:	f140 80de 	bpl.w	401f46 <_vfiprintf_r+0xa6a>
  401d8a:	065b      	lsls	r3, r3, #25
  401d8c:	f53f acb2 	bmi.w	4016f4 <_vfiprintf_r+0x218>
  401d90:	9803      	ldr	r0, [sp, #12]
  401d92:	b02d      	add	sp, #180	; 0xb4
  401d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d98:	2a00      	cmp	r2, #0
  401d9a:	f040 8106 	bne.w	401faa <_vfiprintf_r+0xace>
  401d9e:	9a05      	ldr	r2, [sp, #20]
  401da0:	921d      	str	r2, [sp, #116]	; 0x74
  401da2:	2301      	movs	r3, #1
  401da4:	9211      	str	r2, [sp, #68]	; 0x44
  401da6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401daa:	9310      	str	r3, [sp, #64]	; 0x40
  401dac:	46ca      	mov	sl, r9
  401dae:	f10a 0a08 	add.w	sl, sl, #8
  401db2:	9b02      	ldr	r3, [sp, #8]
  401db4:	0759      	lsls	r1, r3, #29
  401db6:	d504      	bpl.n	401dc2 <_vfiprintf_r+0x8e6>
  401db8:	9b08      	ldr	r3, [sp, #32]
  401dba:	9901      	ldr	r1, [sp, #4]
  401dbc:	1a5c      	subs	r4, r3, r1
  401dbe:	2c00      	cmp	r4, #0
  401dc0:	dc81      	bgt.n	401cc6 <_vfiprintf_r+0x7ea>
  401dc2:	9b03      	ldr	r3, [sp, #12]
  401dc4:	9908      	ldr	r1, [sp, #32]
  401dc6:	9801      	ldr	r0, [sp, #4]
  401dc8:	4281      	cmp	r1, r0
  401dca:	bfac      	ite	ge
  401dcc:	185b      	addge	r3, r3, r1
  401dce:	181b      	addlt	r3, r3, r0
  401dd0:	9303      	str	r3, [sp, #12]
  401dd2:	bb72      	cbnz	r2, 401e32 <_vfiprintf_r+0x956>
  401dd4:	2300      	movs	r3, #0
  401dd6:	9310      	str	r3, [sp, #64]	; 0x40
  401dd8:	46ca      	mov	sl, r9
  401dda:	f7ff bbbc 	b.w	401556 <_vfiprintf_r+0x7a>
  401dde:	aa0f      	add	r2, sp, #60	; 0x3c
  401de0:	9904      	ldr	r1, [sp, #16]
  401de2:	4620      	mov	r0, r4
  401de4:	f7ff fb3a 	bl	40145c <__sprint_r.part.0>
  401de8:	bb50      	cbnz	r0, 401e40 <_vfiprintf_r+0x964>
  401dea:	9910      	ldr	r1, [sp, #64]	; 0x40
  401dec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401dee:	f101 0e01 	add.w	lr, r1, #1
  401df2:	46cc      	mov	ip, r9
  401df4:	e548      	b.n	401888 <_vfiprintf_r+0x3ac>
  401df6:	2a00      	cmp	r2, #0
  401df8:	f040 8140 	bne.w	40207c <_vfiprintf_r+0xba0>
  401dfc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401e00:	2900      	cmp	r1, #0
  401e02:	f000 811b 	beq.w	40203c <_vfiprintf_r+0xb60>
  401e06:	2201      	movs	r2, #1
  401e08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401e0c:	4610      	mov	r0, r2
  401e0e:	921d      	str	r2, [sp, #116]	; 0x74
  401e10:	911c      	str	r1, [sp, #112]	; 0x70
  401e12:	46ca      	mov	sl, r9
  401e14:	4601      	mov	r1, r0
  401e16:	f10a 0a08 	add.w	sl, sl, #8
  401e1a:	3001      	adds	r0, #1
  401e1c:	e507      	b.n	40182e <_vfiprintf_r+0x352>
  401e1e:	9b02      	ldr	r3, [sp, #8]
  401e20:	2a01      	cmp	r2, #1
  401e22:	f000 8098 	beq.w	401f56 <_vfiprintf_r+0xa7a>
  401e26:	2a02      	cmp	r2, #2
  401e28:	d10d      	bne.n	401e46 <_vfiprintf_r+0x96a>
  401e2a:	9302      	str	r3, [sp, #8]
  401e2c:	2600      	movs	r6, #0
  401e2e:	2700      	movs	r7, #0
  401e30:	e5b0      	b.n	401994 <_vfiprintf_r+0x4b8>
  401e32:	aa0f      	add	r2, sp, #60	; 0x3c
  401e34:	9904      	ldr	r1, [sp, #16]
  401e36:	9806      	ldr	r0, [sp, #24]
  401e38:	f7ff fb10 	bl	40145c <__sprint_r.part.0>
  401e3c:	2800      	cmp	r0, #0
  401e3e:	d0c9      	beq.n	401dd4 <_vfiprintf_r+0x8f8>
  401e40:	f8dd b010 	ldr.w	fp, [sp, #16]
  401e44:	e797      	b.n	401d76 <_vfiprintf_r+0x89a>
  401e46:	9302      	str	r3, [sp, #8]
  401e48:	2600      	movs	r6, #0
  401e4a:	2700      	movs	r7, #0
  401e4c:	4649      	mov	r1, r9
  401e4e:	e000      	b.n	401e52 <_vfiprintf_r+0x976>
  401e50:	4659      	mov	r1, fp
  401e52:	08f2      	lsrs	r2, r6, #3
  401e54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401e58:	08f8      	lsrs	r0, r7, #3
  401e5a:	f006 0307 	and.w	r3, r6, #7
  401e5e:	4607      	mov	r7, r0
  401e60:	4616      	mov	r6, r2
  401e62:	3330      	adds	r3, #48	; 0x30
  401e64:	ea56 0207 	orrs.w	r2, r6, r7
  401e68:	f801 3c01 	strb.w	r3, [r1, #-1]
  401e6c:	f101 3bff 	add.w	fp, r1, #4294967295
  401e70:	d1ee      	bne.n	401e50 <_vfiprintf_r+0x974>
  401e72:	9a02      	ldr	r2, [sp, #8]
  401e74:	07d6      	lsls	r6, r2, #31
  401e76:	f57f ad9d 	bpl.w	4019b4 <_vfiprintf_r+0x4d8>
  401e7a:	2b30      	cmp	r3, #48	; 0x30
  401e7c:	f43f ad9a 	beq.w	4019b4 <_vfiprintf_r+0x4d8>
  401e80:	3902      	subs	r1, #2
  401e82:	2330      	movs	r3, #48	; 0x30
  401e84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401e88:	eba9 0301 	sub.w	r3, r9, r1
  401e8c:	9305      	str	r3, [sp, #20]
  401e8e:	468b      	mov	fp, r1
  401e90:	e476      	b.n	401780 <_vfiprintf_r+0x2a4>
  401e92:	9b03      	ldr	r3, [sp, #12]
  401e94:	9a08      	ldr	r2, [sp, #32]
  401e96:	428a      	cmp	r2, r1
  401e98:	bfac      	ite	ge
  401e9a:	189b      	addge	r3, r3, r2
  401e9c:	185b      	addlt	r3, r3, r1
  401e9e:	9303      	str	r3, [sp, #12]
  401ea0:	e798      	b.n	401dd4 <_vfiprintf_r+0x8f8>
  401ea2:	2202      	movs	r2, #2
  401ea4:	e44d      	b.n	401742 <_vfiprintf_r+0x266>
  401ea6:	2f00      	cmp	r7, #0
  401ea8:	bf08      	it	eq
  401eaa:	2e0a      	cmpeq	r6, #10
  401eac:	d352      	bcc.n	401f54 <_vfiprintf_r+0xa78>
  401eae:	46cb      	mov	fp, r9
  401eb0:	4630      	mov	r0, r6
  401eb2:	4639      	mov	r1, r7
  401eb4:	220a      	movs	r2, #10
  401eb6:	2300      	movs	r3, #0
  401eb8:	f001 ff36 	bl	403d28 <__aeabi_uldivmod>
  401ebc:	3230      	adds	r2, #48	; 0x30
  401ebe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  401ec2:	4630      	mov	r0, r6
  401ec4:	4639      	mov	r1, r7
  401ec6:	2300      	movs	r3, #0
  401ec8:	220a      	movs	r2, #10
  401eca:	f001 ff2d 	bl	403d28 <__aeabi_uldivmod>
  401ece:	4606      	mov	r6, r0
  401ed0:	460f      	mov	r7, r1
  401ed2:	ea56 0307 	orrs.w	r3, r6, r7
  401ed6:	d1eb      	bne.n	401eb0 <_vfiprintf_r+0x9d4>
  401ed8:	e56c      	b.n	4019b4 <_vfiprintf_r+0x4d8>
  401eda:	9405      	str	r4, [sp, #20]
  401edc:	46cb      	mov	fp, r9
  401ede:	e44f      	b.n	401780 <_vfiprintf_r+0x2a4>
  401ee0:	aa0f      	add	r2, sp, #60	; 0x3c
  401ee2:	9904      	ldr	r1, [sp, #16]
  401ee4:	9806      	ldr	r0, [sp, #24]
  401ee6:	f7ff fab9 	bl	40145c <__sprint_r.part.0>
  401eea:	2800      	cmp	r0, #0
  401eec:	d1a8      	bne.n	401e40 <_vfiprintf_r+0x964>
  401eee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ef0:	46ca      	mov	sl, r9
  401ef2:	e75e      	b.n	401db2 <_vfiprintf_r+0x8d6>
  401ef4:	aa0f      	add	r2, sp, #60	; 0x3c
  401ef6:	9904      	ldr	r1, [sp, #16]
  401ef8:	9806      	ldr	r0, [sp, #24]
  401efa:	f7ff faaf 	bl	40145c <__sprint_r.part.0>
  401efe:	2800      	cmp	r0, #0
  401f00:	d19e      	bne.n	401e40 <_vfiprintf_r+0x964>
  401f02:	46ca      	mov	sl, r9
  401f04:	f7ff bbc0 	b.w	401688 <_vfiprintf_r+0x1ac>
  401f08:	004040f0 	.word	0x004040f0
  401f0c:	004040e0 	.word	0x004040e0
  401f10:	3104      	adds	r1, #4
  401f12:	6816      	ldr	r6, [r2, #0]
  401f14:	9107      	str	r1, [sp, #28]
  401f16:	2201      	movs	r2, #1
  401f18:	2700      	movs	r7, #0
  401f1a:	e412      	b.n	401742 <_vfiprintf_r+0x266>
  401f1c:	9807      	ldr	r0, [sp, #28]
  401f1e:	4601      	mov	r1, r0
  401f20:	3104      	adds	r1, #4
  401f22:	6806      	ldr	r6, [r0, #0]
  401f24:	9107      	str	r1, [sp, #28]
  401f26:	2700      	movs	r7, #0
  401f28:	e40b      	b.n	401742 <_vfiprintf_r+0x266>
  401f2a:	680e      	ldr	r6, [r1, #0]
  401f2c:	3104      	adds	r1, #4
  401f2e:	9107      	str	r1, [sp, #28]
  401f30:	2700      	movs	r7, #0
  401f32:	e591      	b.n	401a58 <_vfiprintf_r+0x57c>
  401f34:	9907      	ldr	r1, [sp, #28]
  401f36:	680e      	ldr	r6, [r1, #0]
  401f38:	460a      	mov	r2, r1
  401f3a:	17f7      	asrs	r7, r6, #31
  401f3c:	3204      	adds	r2, #4
  401f3e:	9207      	str	r2, [sp, #28]
  401f40:	4630      	mov	r0, r6
  401f42:	4639      	mov	r1, r7
  401f44:	e50f      	b.n	401966 <_vfiprintf_r+0x48a>
  401f46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401f4a:	f000 fe7f 	bl	402c4c <__retarget_lock_release_recursive>
  401f4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401f52:	e71a      	b.n	401d8a <_vfiprintf_r+0x8ae>
  401f54:	9b02      	ldr	r3, [sp, #8]
  401f56:	9302      	str	r3, [sp, #8]
  401f58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401f5c:	3630      	adds	r6, #48	; 0x30
  401f5e:	2301      	movs	r3, #1
  401f60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  401f64:	9305      	str	r3, [sp, #20]
  401f66:	e40b      	b.n	401780 <_vfiprintf_r+0x2a4>
  401f68:	aa0f      	add	r2, sp, #60	; 0x3c
  401f6a:	9904      	ldr	r1, [sp, #16]
  401f6c:	9806      	ldr	r0, [sp, #24]
  401f6e:	f7ff fa75 	bl	40145c <__sprint_r.part.0>
  401f72:	2800      	cmp	r0, #0
  401f74:	f47f af64 	bne.w	401e40 <_vfiprintf_r+0x964>
  401f78:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f7c:	1c48      	adds	r0, r1, #1
  401f7e:	46ca      	mov	sl, r9
  401f80:	e651      	b.n	401c26 <_vfiprintf_r+0x74a>
  401f82:	aa0f      	add	r2, sp, #60	; 0x3c
  401f84:	9904      	ldr	r1, [sp, #16]
  401f86:	9806      	ldr	r0, [sp, #24]
  401f88:	f7ff fa68 	bl	40145c <__sprint_r.part.0>
  401f8c:	2800      	cmp	r0, #0
  401f8e:	f47f af57 	bne.w	401e40 <_vfiprintf_r+0x964>
  401f92:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f96:	1c48      	adds	r0, r1, #1
  401f98:	46ca      	mov	sl, r9
  401f9a:	e448      	b.n	40182e <_vfiprintf_r+0x352>
  401f9c:	2a00      	cmp	r2, #0
  401f9e:	f040 8091 	bne.w	4020c4 <_vfiprintf_r+0xbe8>
  401fa2:	2001      	movs	r0, #1
  401fa4:	4611      	mov	r1, r2
  401fa6:	46ca      	mov	sl, r9
  401fa8:	e641      	b.n	401c2e <_vfiprintf_r+0x752>
  401faa:	aa0f      	add	r2, sp, #60	; 0x3c
  401fac:	9904      	ldr	r1, [sp, #16]
  401fae:	9806      	ldr	r0, [sp, #24]
  401fb0:	f7ff fa54 	bl	40145c <__sprint_r.part.0>
  401fb4:	2800      	cmp	r0, #0
  401fb6:	f47f af43 	bne.w	401e40 <_vfiprintf_r+0x964>
  401fba:	9810      	ldr	r0, [sp, #64]	; 0x40
  401fbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401fbe:	3001      	adds	r0, #1
  401fc0:	46ca      	mov	sl, r9
  401fc2:	e667      	b.n	401c94 <_vfiprintf_r+0x7b8>
  401fc4:	46d3      	mov	fp, sl
  401fc6:	e6d6      	b.n	401d76 <_vfiprintf_r+0x89a>
  401fc8:	9e07      	ldr	r6, [sp, #28]
  401fca:	3607      	adds	r6, #7
  401fcc:	f026 0207 	bic.w	r2, r6, #7
  401fd0:	f102 0108 	add.w	r1, r2, #8
  401fd4:	e9d2 6700 	ldrd	r6, r7, [r2]
  401fd8:	9107      	str	r1, [sp, #28]
  401fda:	2201      	movs	r2, #1
  401fdc:	f7ff bbb1 	b.w	401742 <_vfiprintf_r+0x266>
  401fe0:	9e07      	ldr	r6, [sp, #28]
  401fe2:	3607      	adds	r6, #7
  401fe4:	f026 0607 	bic.w	r6, r6, #7
  401fe8:	e9d6 0100 	ldrd	r0, r1, [r6]
  401fec:	f106 0208 	add.w	r2, r6, #8
  401ff0:	9207      	str	r2, [sp, #28]
  401ff2:	4606      	mov	r6, r0
  401ff4:	460f      	mov	r7, r1
  401ff6:	e4b6      	b.n	401966 <_vfiprintf_r+0x48a>
  401ff8:	9e07      	ldr	r6, [sp, #28]
  401ffa:	3607      	adds	r6, #7
  401ffc:	f026 0207 	bic.w	r2, r6, #7
  402000:	f102 0108 	add.w	r1, r2, #8
  402004:	e9d2 6700 	ldrd	r6, r7, [r2]
  402008:	9107      	str	r1, [sp, #28]
  40200a:	2200      	movs	r2, #0
  40200c:	f7ff bb99 	b.w	401742 <_vfiprintf_r+0x266>
  402010:	9e07      	ldr	r6, [sp, #28]
  402012:	3607      	adds	r6, #7
  402014:	f026 0107 	bic.w	r1, r6, #7
  402018:	f101 0008 	add.w	r0, r1, #8
  40201c:	9007      	str	r0, [sp, #28]
  40201e:	e9d1 6700 	ldrd	r6, r7, [r1]
  402022:	e519      	b.n	401a58 <_vfiprintf_r+0x57c>
  402024:	46cb      	mov	fp, r9
  402026:	f7ff bbab 	b.w	401780 <_vfiprintf_r+0x2a4>
  40202a:	252d      	movs	r5, #45	; 0x2d
  40202c:	4276      	negs	r6, r6
  40202e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402032:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402036:	2201      	movs	r2, #1
  402038:	f7ff bb88 	b.w	40174c <_vfiprintf_r+0x270>
  40203c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40203e:	b9b3      	cbnz	r3, 40206e <_vfiprintf_r+0xb92>
  402040:	4611      	mov	r1, r2
  402042:	2001      	movs	r0, #1
  402044:	46ca      	mov	sl, r9
  402046:	e5f2      	b.n	401c2e <_vfiprintf_r+0x752>
  402048:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40204c:	f000 fdfe 	bl	402c4c <__retarget_lock_release_recursive>
  402050:	f04f 33ff 	mov.w	r3, #4294967295
  402054:	9303      	str	r3, [sp, #12]
  402056:	f7ff bb50 	b.w	4016fa <_vfiprintf_r+0x21e>
  40205a:	aa0f      	add	r2, sp, #60	; 0x3c
  40205c:	9904      	ldr	r1, [sp, #16]
  40205e:	9806      	ldr	r0, [sp, #24]
  402060:	f7ff f9fc 	bl	40145c <__sprint_r.part.0>
  402064:	2800      	cmp	r0, #0
  402066:	f47f aeeb 	bne.w	401e40 <_vfiprintf_r+0x964>
  40206a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40206c:	e6a9      	b.n	401dc2 <_vfiprintf_r+0x8e6>
  40206e:	ab0e      	add	r3, sp, #56	; 0x38
  402070:	2202      	movs	r2, #2
  402072:	931c      	str	r3, [sp, #112]	; 0x70
  402074:	921d      	str	r2, [sp, #116]	; 0x74
  402076:	2001      	movs	r0, #1
  402078:	46ca      	mov	sl, r9
  40207a:	e5d0      	b.n	401c1e <_vfiprintf_r+0x742>
  40207c:	aa0f      	add	r2, sp, #60	; 0x3c
  40207e:	9904      	ldr	r1, [sp, #16]
  402080:	9806      	ldr	r0, [sp, #24]
  402082:	f7ff f9eb 	bl	40145c <__sprint_r.part.0>
  402086:	2800      	cmp	r0, #0
  402088:	f47f aeda 	bne.w	401e40 <_vfiprintf_r+0x964>
  40208c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40208e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402090:	1c48      	adds	r0, r1, #1
  402092:	46ca      	mov	sl, r9
  402094:	e5a4      	b.n	401be0 <_vfiprintf_r+0x704>
  402096:	9a07      	ldr	r2, [sp, #28]
  402098:	9903      	ldr	r1, [sp, #12]
  40209a:	6813      	ldr	r3, [r2, #0]
  40209c:	17cd      	asrs	r5, r1, #31
  40209e:	4608      	mov	r0, r1
  4020a0:	3204      	adds	r2, #4
  4020a2:	4629      	mov	r1, r5
  4020a4:	9207      	str	r2, [sp, #28]
  4020a6:	e9c3 0100 	strd	r0, r1, [r3]
  4020aa:	f7ff ba54 	b.w	401556 <_vfiprintf_r+0x7a>
  4020ae:	4658      	mov	r0, fp
  4020b0:	9607      	str	r6, [sp, #28]
  4020b2:	9302      	str	r3, [sp, #8]
  4020b4:	f7ff f964 	bl	401380 <strlen>
  4020b8:	2400      	movs	r4, #0
  4020ba:	9005      	str	r0, [sp, #20]
  4020bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4020c0:	f7ff bb5e 	b.w	401780 <_vfiprintf_r+0x2a4>
  4020c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4020c6:	9904      	ldr	r1, [sp, #16]
  4020c8:	9806      	ldr	r0, [sp, #24]
  4020ca:	f7ff f9c7 	bl	40145c <__sprint_r.part.0>
  4020ce:	2800      	cmp	r0, #0
  4020d0:	f47f aeb6 	bne.w	401e40 <_vfiprintf_r+0x964>
  4020d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020d8:	1c48      	adds	r0, r1, #1
  4020da:	46ca      	mov	sl, r9
  4020dc:	e5a7      	b.n	401c2e <_vfiprintf_r+0x752>
  4020de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020e2:	4e20      	ldr	r6, [pc, #128]	; (402164 <_vfiprintf_r+0xc88>)
  4020e4:	3101      	adds	r1, #1
  4020e6:	f7ff bb90 	b.w	40180a <_vfiprintf_r+0x32e>
  4020ea:	2c06      	cmp	r4, #6
  4020ec:	bf28      	it	cs
  4020ee:	2406      	movcs	r4, #6
  4020f0:	9405      	str	r4, [sp, #20]
  4020f2:	9607      	str	r6, [sp, #28]
  4020f4:	9401      	str	r4, [sp, #4]
  4020f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 402168 <_vfiprintf_r+0xc8c>
  4020fa:	e4d5      	b.n	401aa8 <_vfiprintf_r+0x5cc>
  4020fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4020fe:	4e19      	ldr	r6, [pc, #100]	; (402164 <_vfiprintf_r+0xc88>)
  402100:	3001      	adds	r0, #1
  402102:	e603      	b.n	401d0c <_vfiprintf_r+0x830>
  402104:	9405      	str	r4, [sp, #20]
  402106:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40210a:	9607      	str	r6, [sp, #28]
  40210c:	9302      	str	r3, [sp, #8]
  40210e:	4604      	mov	r4, r0
  402110:	f7ff bb36 	b.w	401780 <_vfiprintf_r+0x2a4>
  402114:	4686      	mov	lr, r0
  402116:	f7ff bbce 	b.w	4018b6 <_vfiprintf_r+0x3da>
  40211a:	9806      	ldr	r0, [sp, #24]
  40211c:	aa0f      	add	r2, sp, #60	; 0x3c
  40211e:	4659      	mov	r1, fp
  402120:	f7ff f99c 	bl	40145c <__sprint_r.part.0>
  402124:	2800      	cmp	r0, #0
  402126:	f43f ae24 	beq.w	401d72 <_vfiprintf_r+0x896>
  40212a:	e624      	b.n	401d76 <_vfiprintf_r+0x89a>
  40212c:	9907      	ldr	r1, [sp, #28]
  40212e:	f898 2001 	ldrb.w	r2, [r8, #1]
  402132:	680c      	ldr	r4, [r1, #0]
  402134:	3104      	adds	r1, #4
  402136:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40213a:	46b8      	mov	r8, r7
  40213c:	9107      	str	r1, [sp, #28]
  40213e:	f7ff ba3f 	b.w	4015c0 <_vfiprintf_r+0xe4>
  402142:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402146:	e43c      	b.n	4019c2 <_vfiprintf_r+0x4e6>
  402148:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40214c:	e521      	b.n	401b92 <_vfiprintf_r+0x6b6>
  40214e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402152:	f7ff bbf4 	b.w	40193e <_vfiprintf_r+0x462>
  402156:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40215a:	e491      	b.n	401a80 <_vfiprintf_r+0x5a4>
  40215c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402160:	e469      	b.n	401a36 <_vfiprintf_r+0x55a>
  402162:	bf00      	nop
  402164:	004040e0 	.word	0x004040e0
  402168:	004040d8 	.word	0x004040d8

0040216c <__sbprintf>:
  40216c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402170:	460c      	mov	r4, r1
  402172:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402176:	8989      	ldrh	r1, [r1, #12]
  402178:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40217a:	89e5      	ldrh	r5, [r4, #14]
  40217c:	9619      	str	r6, [sp, #100]	; 0x64
  40217e:	f021 0102 	bic.w	r1, r1, #2
  402182:	4606      	mov	r6, r0
  402184:	69e0      	ldr	r0, [r4, #28]
  402186:	f8ad 100c 	strh.w	r1, [sp, #12]
  40218a:	4617      	mov	r7, r2
  40218c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402190:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402192:	f8ad 500e 	strh.w	r5, [sp, #14]
  402196:	4698      	mov	r8, r3
  402198:	ad1a      	add	r5, sp, #104	; 0x68
  40219a:	2300      	movs	r3, #0
  40219c:	9007      	str	r0, [sp, #28]
  40219e:	a816      	add	r0, sp, #88	; 0x58
  4021a0:	9209      	str	r2, [sp, #36]	; 0x24
  4021a2:	9306      	str	r3, [sp, #24]
  4021a4:	9500      	str	r5, [sp, #0]
  4021a6:	9504      	str	r5, [sp, #16]
  4021a8:	9102      	str	r1, [sp, #8]
  4021aa:	9105      	str	r1, [sp, #20]
  4021ac:	f000 fd48 	bl	402c40 <__retarget_lock_init_recursive>
  4021b0:	4643      	mov	r3, r8
  4021b2:	463a      	mov	r2, r7
  4021b4:	4669      	mov	r1, sp
  4021b6:	4630      	mov	r0, r6
  4021b8:	f7ff f990 	bl	4014dc <_vfiprintf_r>
  4021bc:	1e05      	subs	r5, r0, #0
  4021be:	db07      	blt.n	4021d0 <__sbprintf+0x64>
  4021c0:	4630      	mov	r0, r6
  4021c2:	4669      	mov	r1, sp
  4021c4:	f000 f928 	bl	402418 <_fflush_r>
  4021c8:	2800      	cmp	r0, #0
  4021ca:	bf18      	it	ne
  4021cc:	f04f 35ff 	movne.w	r5, #4294967295
  4021d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4021d4:	065b      	lsls	r3, r3, #25
  4021d6:	d503      	bpl.n	4021e0 <__sbprintf+0x74>
  4021d8:	89a3      	ldrh	r3, [r4, #12]
  4021da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4021de:	81a3      	strh	r3, [r4, #12]
  4021e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4021e2:	f000 fd2f 	bl	402c44 <__retarget_lock_close_recursive>
  4021e6:	4628      	mov	r0, r5
  4021e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4021ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004021f0 <__swsetup_r>:
  4021f0:	b538      	push	{r3, r4, r5, lr}
  4021f2:	4b30      	ldr	r3, [pc, #192]	; (4022b4 <__swsetup_r+0xc4>)
  4021f4:	681b      	ldr	r3, [r3, #0]
  4021f6:	4605      	mov	r5, r0
  4021f8:	460c      	mov	r4, r1
  4021fa:	b113      	cbz	r3, 402202 <__swsetup_r+0x12>
  4021fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4021fe:	2a00      	cmp	r2, #0
  402200:	d038      	beq.n	402274 <__swsetup_r+0x84>
  402202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402206:	b293      	uxth	r3, r2
  402208:	0718      	lsls	r0, r3, #28
  40220a:	d50c      	bpl.n	402226 <__swsetup_r+0x36>
  40220c:	6920      	ldr	r0, [r4, #16]
  40220e:	b1a8      	cbz	r0, 40223c <__swsetup_r+0x4c>
  402210:	f013 0201 	ands.w	r2, r3, #1
  402214:	d01e      	beq.n	402254 <__swsetup_r+0x64>
  402216:	6963      	ldr	r3, [r4, #20]
  402218:	2200      	movs	r2, #0
  40221a:	425b      	negs	r3, r3
  40221c:	61a3      	str	r3, [r4, #24]
  40221e:	60a2      	str	r2, [r4, #8]
  402220:	b1f0      	cbz	r0, 402260 <__swsetup_r+0x70>
  402222:	2000      	movs	r0, #0
  402224:	bd38      	pop	{r3, r4, r5, pc}
  402226:	06d9      	lsls	r1, r3, #27
  402228:	d53c      	bpl.n	4022a4 <__swsetup_r+0xb4>
  40222a:	0758      	lsls	r0, r3, #29
  40222c:	d426      	bmi.n	40227c <__swsetup_r+0x8c>
  40222e:	6920      	ldr	r0, [r4, #16]
  402230:	f042 0308 	orr.w	r3, r2, #8
  402234:	81a3      	strh	r3, [r4, #12]
  402236:	b29b      	uxth	r3, r3
  402238:	2800      	cmp	r0, #0
  40223a:	d1e9      	bne.n	402210 <__swsetup_r+0x20>
  40223c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402240:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402244:	d0e4      	beq.n	402210 <__swsetup_r+0x20>
  402246:	4628      	mov	r0, r5
  402248:	4621      	mov	r1, r4
  40224a:	f000 fd2f 	bl	402cac <__smakebuf_r>
  40224e:	89a3      	ldrh	r3, [r4, #12]
  402250:	6920      	ldr	r0, [r4, #16]
  402252:	e7dd      	b.n	402210 <__swsetup_r+0x20>
  402254:	0799      	lsls	r1, r3, #30
  402256:	bf58      	it	pl
  402258:	6962      	ldrpl	r2, [r4, #20]
  40225a:	60a2      	str	r2, [r4, #8]
  40225c:	2800      	cmp	r0, #0
  40225e:	d1e0      	bne.n	402222 <__swsetup_r+0x32>
  402260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402264:	061a      	lsls	r2, r3, #24
  402266:	d5dd      	bpl.n	402224 <__swsetup_r+0x34>
  402268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40226c:	81a3      	strh	r3, [r4, #12]
  40226e:	f04f 30ff 	mov.w	r0, #4294967295
  402272:	bd38      	pop	{r3, r4, r5, pc}
  402274:	4618      	mov	r0, r3
  402276:	f000 f927 	bl	4024c8 <__sinit>
  40227a:	e7c2      	b.n	402202 <__swsetup_r+0x12>
  40227c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40227e:	b151      	cbz	r1, 402296 <__swsetup_r+0xa6>
  402280:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402284:	4299      	cmp	r1, r3
  402286:	d004      	beq.n	402292 <__swsetup_r+0xa2>
  402288:	4628      	mov	r0, r5
  40228a:	f000 fa43 	bl	402714 <_free_r>
  40228e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402292:	2300      	movs	r3, #0
  402294:	6323      	str	r3, [r4, #48]	; 0x30
  402296:	2300      	movs	r3, #0
  402298:	6920      	ldr	r0, [r4, #16]
  40229a:	6063      	str	r3, [r4, #4]
  40229c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4022a0:	6020      	str	r0, [r4, #0]
  4022a2:	e7c5      	b.n	402230 <__swsetup_r+0x40>
  4022a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4022a8:	2309      	movs	r3, #9
  4022aa:	602b      	str	r3, [r5, #0]
  4022ac:	f04f 30ff 	mov.w	r0, #4294967295
  4022b0:	81a2      	strh	r2, [r4, #12]
  4022b2:	bd38      	pop	{r3, r4, r5, pc}
  4022b4:	20000008 	.word	0x20000008

004022b8 <register_fini>:
  4022b8:	4b02      	ldr	r3, [pc, #8]	; (4022c4 <register_fini+0xc>)
  4022ba:	b113      	cbz	r3, 4022c2 <register_fini+0xa>
  4022bc:	4802      	ldr	r0, [pc, #8]	; (4022c8 <register_fini+0x10>)
  4022be:	f000 b805 	b.w	4022cc <atexit>
  4022c2:	4770      	bx	lr
  4022c4:	00000000 	.word	0x00000000
  4022c8:	00402539 	.word	0x00402539

004022cc <atexit>:
  4022cc:	2300      	movs	r3, #0
  4022ce:	4601      	mov	r1, r0
  4022d0:	461a      	mov	r2, r3
  4022d2:	4618      	mov	r0, r3
  4022d4:	f001 bc00 	b.w	403ad8 <__register_exitproc>

004022d8 <__sflush_r>:
  4022d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4022dc:	b29a      	uxth	r2, r3
  4022de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022e2:	460d      	mov	r5, r1
  4022e4:	0711      	lsls	r1, r2, #28
  4022e6:	4680      	mov	r8, r0
  4022e8:	d43a      	bmi.n	402360 <__sflush_r+0x88>
  4022ea:	686a      	ldr	r2, [r5, #4]
  4022ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4022f0:	2a00      	cmp	r2, #0
  4022f2:	81ab      	strh	r3, [r5, #12]
  4022f4:	dd6f      	ble.n	4023d6 <__sflush_r+0xfe>
  4022f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4022f8:	2c00      	cmp	r4, #0
  4022fa:	d049      	beq.n	402390 <__sflush_r+0xb8>
  4022fc:	2200      	movs	r2, #0
  4022fe:	b29b      	uxth	r3, r3
  402300:	f8d8 6000 	ldr.w	r6, [r8]
  402304:	f8c8 2000 	str.w	r2, [r8]
  402308:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40230c:	d067      	beq.n	4023de <__sflush_r+0x106>
  40230e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402310:	075f      	lsls	r7, r3, #29
  402312:	d505      	bpl.n	402320 <__sflush_r+0x48>
  402314:	6869      	ldr	r1, [r5, #4]
  402316:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402318:	1a52      	subs	r2, r2, r1
  40231a:	b10b      	cbz	r3, 402320 <__sflush_r+0x48>
  40231c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40231e:	1ad2      	subs	r2, r2, r3
  402320:	2300      	movs	r3, #0
  402322:	69e9      	ldr	r1, [r5, #28]
  402324:	4640      	mov	r0, r8
  402326:	47a0      	blx	r4
  402328:	1c44      	adds	r4, r0, #1
  40232a:	d03c      	beq.n	4023a6 <__sflush_r+0xce>
  40232c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402330:	692a      	ldr	r2, [r5, #16]
  402332:	602a      	str	r2, [r5, #0]
  402334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402338:	2200      	movs	r2, #0
  40233a:	81ab      	strh	r3, [r5, #12]
  40233c:	04db      	lsls	r3, r3, #19
  40233e:	606a      	str	r2, [r5, #4]
  402340:	d447      	bmi.n	4023d2 <__sflush_r+0xfa>
  402342:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402344:	f8c8 6000 	str.w	r6, [r8]
  402348:	b311      	cbz	r1, 402390 <__sflush_r+0xb8>
  40234a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40234e:	4299      	cmp	r1, r3
  402350:	d002      	beq.n	402358 <__sflush_r+0x80>
  402352:	4640      	mov	r0, r8
  402354:	f000 f9de 	bl	402714 <_free_r>
  402358:	2000      	movs	r0, #0
  40235a:	6328      	str	r0, [r5, #48]	; 0x30
  40235c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402360:	692e      	ldr	r6, [r5, #16]
  402362:	b1ae      	cbz	r6, 402390 <__sflush_r+0xb8>
  402364:	682c      	ldr	r4, [r5, #0]
  402366:	602e      	str	r6, [r5, #0]
  402368:	0791      	lsls	r1, r2, #30
  40236a:	bf0c      	ite	eq
  40236c:	696b      	ldreq	r3, [r5, #20]
  40236e:	2300      	movne	r3, #0
  402370:	1ba4      	subs	r4, r4, r6
  402372:	60ab      	str	r3, [r5, #8]
  402374:	e00a      	b.n	40238c <__sflush_r+0xb4>
  402376:	4623      	mov	r3, r4
  402378:	4632      	mov	r2, r6
  40237a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40237c:	69e9      	ldr	r1, [r5, #28]
  40237e:	4640      	mov	r0, r8
  402380:	47b8      	blx	r7
  402382:	2800      	cmp	r0, #0
  402384:	eba4 0400 	sub.w	r4, r4, r0
  402388:	4406      	add	r6, r0
  40238a:	dd04      	ble.n	402396 <__sflush_r+0xbe>
  40238c:	2c00      	cmp	r4, #0
  40238e:	dcf2      	bgt.n	402376 <__sflush_r+0x9e>
  402390:	2000      	movs	r0, #0
  402392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402396:	89ab      	ldrh	r3, [r5, #12]
  402398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40239c:	81ab      	strh	r3, [r5, #12]
  40239e:	f04f 30ff 	mov.w	r0, #4294967295
  4023a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4023a6:	f8d8 4000 	ldr.w	r4, [r8]
  4023aa:	2c1d      	cmp	r4, #29
  4023ac:	d8f3      	bhi.n	402396 <__sflush_r+0xbe>
  4023ae:	4b19      	ldr	r3, [pc, #100]	; (402414 <__sflush_r+0x13c>)
  4023b0:	40e3      	lsrs	r3, r4
  4023b2:	43db      	mvns	r3, r3
  4023b4:	f013 0301 	ands.w	r3, r3, #1
  4023b8:	d1ed      	bne.n	402396 <__sflush_r+0xbe>
  4023ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4023be:	606b      	str	r3, [r5, #4]
  4023c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4023c4:	6929      	ldr	r1, [r5, #16]
  4023c6:	81ab      	strh	r3, [r5, #12]
  4023c8:	04da      	lsls	r2, r3, #19
  4023ca:	6029      	str	r1, [r5, #0]
  4023cc:	d5b9      	bpl.n	402342 <__sflush_r+0x6a>
  4023ce:	2c00      	cmp	r4, #0
  4023d0:	d1b7      	bne.n	402342 <__sflush_r+0x6a>
  4023d2:	6528      	str	r0, [r5, #80]	; 0x50
  4023d4:	e7b5      	b.n	402342 <__sflush_r+0x6a>
  4023d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4023d8:	2a00      	cmp	r2, #0
  4023da:	dc8c      	bgt.n	4022f6 <__sflush_r+0x1e>
  4023dc:	e7d8      	b.n	402390 <__sflush_r+0xb8>
  4023de:	2301      	movs	r3, #1
  4023e0:	69e9      	ldr	r1, [r5, #28]
  4023e2:	4640      	mov	r0, r8
  4023e4:	47a0      	blx	r4
  4023e6:	1c43      	adds	r3, r0, #1
  4023e8:	4602      	mov	r2, r0
  4023ea:	d002      	beq.n	4023f2 <__sflush_r+0x11a>
  4023ec:	89ab      	ldrh	r3, [r5, #12]
  4023ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4023f0:	e78e      	b.n	402310 <__sflush_r+0x38>
  4023f2:	f8d8 3000 	ldr.w	r3, [r8]
  4023f6:	2b00      	cmp	r3, #0
  4023f8:	d0f8      	beq.n	4023ec <__sflush_r+0x114>
  4023fa:	2b1d      	cmp	r3, #29
  4023fc:	d001      	beq.n	402402 <__sflush_r+0x12a>
  4023fe:	2b16      	cmp	r3, #22
  402400:	d102      	bne.n	402408 <__sflush_r+0x130>
  402402:	f8c8 6000 	str.w	r6, [r8]
  402406:	e7c3      	b.n	402390 <__sflush_r+0xb8>
  402408:	89ab      	ldrh	r3, [r5, #12]
  40240a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40240e:	81ab      	strh	r3, [r5, #12]
  402410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402414:	20400001 	.word	0x20400001

00402418 <_fflush_r>:
  402418:	b538      	push	{r3, r4, r5, lr}
  40241a:	460d      	mov	r5, r1
  40241c:	4604      	mov	r4, r0
  40241e:	b108      	cbz	r0, 402424 <_fflush_r+0xc>
  402420:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402422:	b1bb      	cbz	r3, 402454 <_fflush_r+0x3c>
  402424:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402428:	b188      	cbz	r0, 40244e <_fflush_r+0x36>
  40242a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40242c:	07db      	lsls	r3, r3, #31
  40242e:	d401      	bmi.n	402434 <_fflush_r+0x1c>
  402430:	0581      	lsls	r1, r0, #22
  402432:	d517      	bpl.n	402464 <_fflush_r+0x4c>
  402434:	4620      	mov	r0, r4
  402436:	4629      	mov	r1, r5
  402438:	f7ff ff4e 	bl	4022d8 <__sflush_r>
  40243c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40243e:	07da      	lsls	r2, r3, #31
  402440:	4604      	mov	r4, r0
  402442:	d402      	bmi.n	40244a <_fflush_r+0x32>
  402444:	89ab      	ldrh	r3, [r5, #12]
  402446:	059b      	lsls	r3, r3, #22
  402448:	d507      	bpl.n	40245a <_fflush_r+0x42>
  40244a:	4620      	mov	r0, r4
  40244c:	bd38      	pop	{r3, r4, r5, pc}
  40244e:	4604      	mov	r4, r0
  402450:	4620      	mov	r0, r4
  402452:	bd38      	pop	{r3, r4, r5, pc}
  402454:	f000 f838 	bl	4024c8 <__sinit>
  402458:	e7e4      	b.n	402424 <_fflush_r+0xc>
  40245a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40245c:	f000 fbf6 	bl	402c4c <__retarget_lock_release_recursive>
  402460:	4620      	mov	r0, r4
  402462:	bd38      	pop	{r3, r4, r5, pc}
  402464:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402466:	f000 fbef 	bl	402c48 <__retarget_lock_acquire_recursive>
  40246a:	e7e3      	b.n	402434 <_fflush_r+0x1c>

0040246c <_cleanup_r>:
  40246c:	4901      	ldr	r1, [pc, #4]	; (402474 <_cleanup_r+0x8>)
  40246e:	f000 bbaf 	b.w	402bd0 <_fwalk_reent>
  402472:	bf00      	nop
  402474:	00403bc1 	.word	0x00403bc1

00402478 <std.isra.0>:
  402478:	b510      	push	{r4, lr}
  40247a:	2300      	movs	r3, #0
  40247c:	4604      	mov	r4, r0
  40247e:	8181      	strh	r1, [r0, #12]
  402480:	81c2      	strh	r2, [r0, #14]
  402482:	6003      	str	r3, [r0, #0]
  402484:	6043      	str	r3, [r0, #4]
  402486:	6083      	str	r3, [r0, #8]
  402488:	6643      	str	r3, [r0, #100]	; 0x64
  40248a:	6103      	str	r3, [r0, #16]
  40248c:	6143      	str	r3, [r0, #20]
  40248e:	6183      	str	r3, [r0, #24]
  402490:	4619      	mov	r1, r3
  402492:	2208      	movs	r2, #8
  402494:	305c      	adds	r0, #92	; 0x5c
  402496:	f7fe fde5 	bl	401064 <memset>
  40249a:	4807      	ldr	r0, [pc, #28]	; (4024b8 <std.isra.0+0x40>)
  40249c:	4907      	ldr	r1, [pc, #28]	; (4024bc <std.isra.0+0x44>)
  40249e:	4a08      	ldr	r2, [pc, #32]	; (4024c0 <std.isra.0+0x48>)
  4024a0:	4b08      	ldr	r3, [pc, #32]	; (4024c4 <std.isra.0+0x4c>)
  4024a2:	6220      	str	r0, [r4, #32]
  4024a4:	61e4      	str	r4, [r4, #28]
  4024a6:	6261      	str	r1, [r4, #36]	; 0x24
  4024a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4024aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4024ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4024b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4024b4:	f000 bbc4 	b.w	402c40 <__retarget_lock_init_recursive>
  4024b8:	00403905 	.word	0x00403905
  4024bc:	00403929 	.word	0x00403929
  4024c0:	00403965 	.word	0x00403965
  4024c4:	00403985 	.word	0x00403985

004024c8 <__sinit>:
  4024c8:	b510      	push	{r4, lr}
  4024ca:	4604      	mov	r4, r0
  4024cc:	4812      	ldr	r0, [pc, #72]	; (402518 <__sinit+0x50>)
  4024ce:	f000 fbbb 	bl	402c48 <__retarget_lock_acquire_recursive>
  4024d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4024d4:	b9d2      	cbnz	r2, 40250c <__sinit+0x44>
  4024d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4024da:	4810      	ldr	r0, [pc, #64]	; (40251c <__sinit+0x54>)
  4024dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4024e0:	2103      	movs	r1, #3
  4024e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4024e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4024e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4024ec:	6860      	ldr	r0, [r4, #4]
  4024ee:	2104      	movs	r1, #4
  4024f0:	f7ff ffc2 	bl	402478 <std.isra.0>
  4024f4:	2201      	movs	r2, #1
  4024f6:	2109      	movs	r1, #9
  4024f8:	68a0      	ldr	r0, [r4, #8]
  4024fa:	f7ff ffbd 	bl	402478 <std.isra.0>
  4024fe:	2202      	movs	r2, #2
  402500:	2112      	movs	r1, #18
  402502:	68e0      	ldr	r0, [r4, #12]
  402504:	f7ff ffb8 	bl	402478 <std.isra.0>
  402508:	2301      	movs	r3, #1
  40250a:	63a3      	str	r3, [r4, #56]	; 0x38
  40250c:	4802      	ldr	r0, [pc, #8]	; (402518 <__sinit+0x50>)
  40250e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402512:	f000 bb9b 	b.w	402c4c <__retarget_lock_release_recursive>
  402516:	bf00      	nop
  402518:	20008dc4 	.word	0x20008dc4
  40251c:	0040246d 	.word	0x0040246d

00402520 <__sfp_lock_acquire>:
  402520:	4801      	ldr	r0, [pc, #4]	; (402528 <__sfp_lock_acquire+0x8>)
  402522:	f000 bb91 	b.w	402c48 <__retarget_lock_acquire_recursive>
  402526:	bf00      	nop
  402528:	20008dd8 	.word	0x20008dd8

0040252c <__sfp_lock_release>:
  40252c:	4801      	ldr	r0, [pc, #4]	; (402534 <__sfp_lock_release+0x8>)
  40252e:	f000 bb8d 	b.w	402c4c <__retarget_lock_release_recursive>
  402532:	bf00      	nop
  402534:	20008dd8 	.word	0x20008dd8

00402538 <__libc_fini_array>:
  402538:	b538      	push	{r3, r4, r5, lr}
  40253a:	4c0a      	ldr	r4, [pc, #40]	; (402564 <__libc_fini_array+0x2c>)
  40253c:	4d0a      	ldr	r5, [pc, #40]	; (402568 <__libc_fini_array+0x30>)
  40253e:	1b64      	subs	r4, r4, r5
  402540:	10a4      	asrs	r4, r4, #2
  402542:	d00a      	beq.n	40255a <__libc_fini_array+0x22>
  402544:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402548:	3b01      	subs	r3, #1
  40254a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40254e:	3c01      	subs	r4, #1
  402550:	f855 3904 	ldr.w	r3, [r5], #-4
  402554:	4798      	blx	r3
  402556:	2c00      	cmp	r4, #0
  402558:	d1f9      	bne.n	40254e <__libc_fini_array+0x16>
  40255a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40255e:	f001 be61 	b.w	404224 <_fini>
  402562:	bf00      	nop
  402564:	00404234 	.word	0x00404234
  402568:	00404230 	.word	0x00404230

0040256c <__fputwc>:
  40256c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402570:	b082      	sub	sp, #8
  402572:	4680      	mov	r8, r0
  402574:	4689      	mov	r9, r1
  402576:	4614      	mov	r4, r2
  402578:	f000 fb54 	bl	402c24 <__locale_mb_cur_max>
  40257c:	2801      	cmp	r0, #1
  40257e:	d036      	beq.n	4025ee <__fputwc+0x82>
  402580:	464a      	mov	r2, r9
  402582:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402586:	a901      	add	r1, sp, #4
  402588:	4640      	mov	r0, r8
  40258a:	f001 fa57 	bl	403a3c <_wcrtomb_r>
  40258e:	1c42      	adds	r2, r0, #1
  402590:	4606      	mov	r6, r0
  402592:	d025      	beq.n	4025e0 <__fputwc+0x74>
  402594:	b3a8      	cbz	r0, 402602 <__fputwc+0x96>
  402596:	f89d e004 	ldrb.w	lr, [sp, #4]
  40259a:	2500      	movs	r5, #0
  40259c:	f10d 0a04 	add.w	sl, sp, #4
  4025a0:	e009      	b.n	4025b6 <__fputwc+0x4a>
  4025a2:	6823      	ldr	r3, [r4, #0]
  4025a4:	1c5a      	adds	r2, r3, #1
  4025a6:	6022      	str	r2, [r4, #0]
  4025a8:	f883 e000 	strb.w	lr, [r3]
  4025ac:	3501      	adds	r5, #1
  4025ae:	42b5      	cmp	r5, r6
  4025b0:	d227      	bcs.n	402602 <__fputwc+0x96>
  4025b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4025b6:	68a3      	ldr	r3, [r4, #8]
  4025b8:	3b01      	subs	r3, #1
  4025ba:	2b00      	cmp	r3, #0
  4025bc:	60a3      	str	r3, [r4, #8]
  4025be:	daf0      	bge.n	4025a2 <__fputwc+0x36>
  4025c0:	69a7      	ldr	r7, [r4, #24]
  4025c2:	42bb      	cmp	r3, r7
  4025c4:	4671      	mov	r1, lr
  4025c6:	4622      	mov	r2, r4
  4025c8:	4640      	mov	r0, r8
  4025ca:	db02      	blt.n	4025d2 <__fputwc+0x66>
  4025cc:	f1be 0f0a 	cmp.w	lr, #10
  4025d0:	d1e7      	bne.n	4025a2 <__fputwc+0x36>
  4025d2:	f001 f9db 	bl	40398c <__swbuf_r>
  4025d6:	1c43      	adds	r3, r0, #1
  4025d8:	d1e8      	bne.n	4025ac <__fputwc+0x40>
  4025da:	b002      	add	sp, #8
  4025dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025e0:	89a3      	ldrh	r3, [r4, #12]
  4025e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4025e6:	81a3      	strh	r3, [r4, #12]
  4025e8:	b002      	add	sp, #8
  4025ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4025f2:	2bfe      	cmp	r3, #254	; 0xfe
  4025f4:	d8c4      	bhi.n	402580 <__fputwc+0x14>
  4025f6:	fa5f fe89 	uxtb.w	lr, r9
  4025fa:	4606      	mov	r6, r0
  4025fc:	f88d e004 	strb.w	lr, [sp, #4]
  402600:	e7cb      	b.n	40259a <__fputwc+0x2e>
  402602:	4648      	mov	r0, r9
  402604:	b002      	add	sp, #8
  402606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40260a:	bf00      	nop

0040260c <_fputwc_r>:
  40260c:	b530      	push	{r4, r5, lr}
  40260e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402610:	f013 0f01 	tst.w	r3, #1
  402614:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402618:	4614      	mov	r4, r2
  40261a:	b083      	sub	sp, #12
  40261c:	4605      	mov	r5, r0
  40261e:	b29a      	uxth	r2, r3
  402620:	d101      	bne.n	402626 <_fputwc_r+0x1a>
  402622:	0590      	lsls	r0, r2, #22
  402624:	d51c      	bpl.n	402660 <_fputwc_r+0x54>
  402626:	0490      	lsls	r0, r2, #18
  402628:	d406      	bmi.n	402638 <_fputwc_r+0x2c>
  40262a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40262c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402634:	81a3      	strh	r3, [r4, #12]
  402636:	6662      	str	r2, [r4, #100]	; 0x64
  402638:	4628      	mov	r0, r5
  40263a:	4622      	mov	r2, r4
  40263c:	f7ff ff96 	bl	40256c <__fputwc>
  402640:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402642:	07da      	lsls	r2, r3, #31
  402644:	4605      	mov	r5, r0
  402646:	d402      	bmi.n	40264e <_fputwc_r+0x42>
  402648:	89a3      	ldrh	r3, [r4, #12]
  40264a:	059b      	lsls	r3, r3, #22
  40264c:	d502      	bpl.n	402654 <_fputwc_r+0x48>
  40264e:	4628      	mov	r0, r5
  402650:	b003      	add	sp, #12
  402652:	bd30      	pop	{r4, r5, pc}
  402654:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402656:	f000 faf9 	bl	402c4c <__retarget_lock_release_recursive>
  40265a:	4628      	mov	r0, r5
  40265c:	b003      	add	sp, #12
  40265e:	bd30      	pop	{r4, r5, pc}
  402660:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402662:	9101      	str	r1, [sp, #4]
  402664:	f000 faf0 	bl	402c48 <__retarget_lock_acquire_recursive>
  402668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40266c:	9901      	ldr	r1, [sp, #4]
  40266e:	b29a      	uxth	r2, r3
  402670:	e7d9      	b.n	402626 <_fputwc_r+0x1a>
  402672:	bf00      	nop

00402674 <_malloc_trim_r>:
  402674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402676:	4f24      	ldr	r7, [pc, #144]	; (402708 <_malloc_trim_r+0x94>)
  402678:	460c      	mov	r4, r1
  40267a:	4606      	mov	r6, r0
  40267c:	f000 ff7e 	bl	40357c <__malloc_lock>
  402680:	68bb      	ldr	r3, [r7, #8]
  402682:	685d      	ldr	r5, [r3, #4]
  402684:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402688:	310f      	adds	r1, #15
  40268a:	f025 0503 	bic.w	r5, r5, #3
  40268e:	4429      	add	r1, r5
  402690:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402694:	f021 010f 	bic.w	r1, r1, #15
  402698:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40269c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4026a0:	db07      	blt.n	4026b2 <_malloc_trim_r+0x3e>
  4026a2:	2100      	movs	r1, #0
  4026a4:	4630      	mov	r0, r6
  4026a6:	f001 f91b 	bl	4038e0 <_sbrk_r>
  4026aa:	68bb      	ldr	r3, [r7, #8]
  4026ac:	442b      	add	r3, r5
  4026ae:	4298      	cmp	r0, r3
  4026b0:	d004      	beq.n	4026bc <_malloc_trim_r+0x48>
  4026b2:	4630      	mov	r0, r6
  4026b4:	f000 ff68 	bl	403588 <__malloc_unlock>
  4026b8:	2000      	movs	r0, #0
  4026ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4026bc:	4261      	negs	r1, r4
  4026be:	4630      	mov	r0, r6
  4026c0:	f001 f90e 	bl	4038e0 <_sbrk_r>
  4026c4:	3001      	adds	r0, #1
  4026c6:	d00d      	beq.n	4026e4 <_malloc_trim_r+0x70>
  4026c8:	4b10      	ldr	r3, [pc, #64]	; (40270c <_malloc_trim_r+0x98>)
  4026ca:	68ba      	ldr	r2, [r7, #8]
  4026cc:	6819      	ldr	r1, [r3, #0]
  4026ce:	1b2d      	subs	r5, r5, r4
  4026d0:	f045 0501 	orr.w	r5, r5, #1
  4026d4:	4630      	mov	r0, r6
  4026d6:	1b09      	subs	r1, r1, r4
  4026d8:	6055      	str	r5, [r2, #4]
  4026da:	6019      	str	r1, [r3, #0]
  4026dc:	f000 ff54 	bl	403588 <__malloc_unlock>
  4026e0:	2001      	movs	r0, #1
  4026e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4026e4:	2100      	movs	r1, #0
  4026e6:	4630      	mov	r0, r6
  4026e8:	f001 f8fa 	bl	4038e0 <_sbrk_r>
  4026ec:	68ba      	ldr	r2, [r7, #8]
  4026ee:	1a83      	subs	r3, r0, r2
  4026f0:	2b0f      	cmp	r3, #15
  4026f2:	ddde      	ble.n	4026b2 <_malloc_trim_r+0x3e>
  4026f4:	4c06      	ldr	r4, [pc, #24]	; (402710 <_malloc_trim_r+0x9c>)
  4026f6:	4905      	ldr	r1, [pc, #20]	; (40270c <_malloc_trim_r+0x98>)
  4026f8:	6824      	ldr	r4, [r4, #0]
  4026fa:	f043 0301 	orr.w	r3, r3, #1
  4026fe:	1b00      	subs	r0, r0, r4
  402700:	6053      	str	r3, [r2, #4]
  402702:	6008      	str	r0, [r1, #0]
  402704:	e7d5      	b.n	4026b2 <_malloc_trim_r+0x3e>
  402706:	bf00      	nop
  402708:	200005a8 	.word	0x200005a8
  40270c:	20000a78 	.word	0x20000a78
  402710:	200009b0 	.word	0x200009b0

00402714 <_free_r>:
  402714:	2900      	cmp	r1, #0
  402716:	d044      	beq.n	4027a2 <_free_r+0x8e>
  402718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40271c:	460d      	mov	r5, r1
  40271e:	4680      	mov	r8, r0
  402720:	f000 ff2c 	bl	40357c <__malloc_lock>
  402724:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402728:	4969      	ldr	r1, [pc, #420]	; (4028d0 <_free_r+0x1bc>)
  40272a:	f027 0301 	bic.w	r3, r7, #1
  40272e:	f1a5 0408 	sub.w	r4, r5, #8
  402732:	18e2      	adds	r2, r4, r3
  402734:	688e      	ldr	r6, [r1, #8]
  402736:	6850      	ldr	r0, [r2, #4]
  402738:	42b2      	cmp	r2, r6
  40273a:	f020 0003 	bic.w	r0, r0, #3
  40273e:	d05e      	beq.n	4027fe <_free_r+0xea>
  402740:	07fe      	lsls	r6, r7, #31
  402742:	6050      	str	r0, [r2, #4]
  402744:	d40b      	bmi.n	40275e <_free_r+0x4a>
  402746:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40274a:	1be4      	subs	r4, r4, r7
  40274c:	f101 0e08 	add.w	lr, r1, #8
  402750:	68a5      	ldr	r5, [r4, #8]
  402752:	4575      	cmp	r5, lr
  402754:	443b      	add	r3, r7
  402756:	d06d      	beq.n	402834 <_free_r+0x120>
  402758:	68e7      	ldr	r7, [r4, #12]
  40275a:	60ef      	str	r7, [r5, #12]
  40275c:	60bd      	str	r5, [r7, #8]
  40275e:	1815      	adds	r5, r2, r0
  402760:	686d      	ldr	r5, [r5, #4]
  402762:	07ed      	lsls	r5, r5, #31
  402764:	d53e      	bpl.n	4027e4 <_free_r+0xd0>
  402766:	f043 0201 	orr.w	r2, r3, #1
  40276a:	6062      	str	r2, [r4, #4]
  40276c:	50e3      	str	r3, [r4, r3]
  40276e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402772:	d217      	bcs.n	4027a4 <_free_r+0x90>
  402774:	08db      	lsrs	r3, r3, #3
  402776:	1c58      	adds	r0, r3, #1
  402778:	109a      	asrs	r2, r3, #2
  40277a:	684d      	ldr	r5, [r1, #4]
  40277c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402780:	60a7      	str	r7, [r4, #8]
  402782:	2301      	movs	r3, #1
  402784:	4093      	lsls	r3, r2
  402786:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40278a:	432b      	orrs	r3, r5
  40278c:	3a08      	subs	r2, #8
  40278e:	60e2      	str	r2, [r4, #12]
  402790:	604b      	str	r3, [r1, #4]
  402792:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402796:	60fc      	str	r4, [r7, #12]
  402798:	4640      	mov	r0, r8
  40279a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40279e:	f000 bef3 	b.w	403588 <__malloc_unlock>
  4027a2:	4770      	bx	lr
  4027a4:	0a5a      	lsrs	r2, r3, #9
  4027a6:	2a04      	cmp	r2, #4
  4027a8:	d852      	bhi.n	402850 <_free_r+0x13c>
  4027aa:	099a      	lsrs	r2, r3, #6
  4027ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4027b0:	00ff      	lsls	r7, r7, #3
  4027b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4027b6:	19c8      	adds	r0, r1, r7
  4027b8:	59ca      	ldr	r2, [r1, r7]
  4027ba:	3808      	subs	r0, #8
  4027bc:	4290      	cmp	r0, r2
  4027be:	d04f      	beq.n	402860 <_free_r+0x14c>
  4027c0:	6851      	ldr	r1, [r2, #4]
  4027c2:	f021 0103 	bic.w	r1, r1, #3
  4027c6:	428b      	cmp	r3, r1
  4027c8:	d232      	bcs.n	402830 <_free_r+0x11c>
  4027ca:	6892      	ldr	r2, [r2, #8]
  4027cc:	4290      	cmp	r0, r2
  4027ce:	d1f7      	bne.n	4027c0 <_free_r+0xac>
  4027d0:	68c3      	ldr	r3, [r0, #12]
  4027d2:	60a0      	str	r0, [r4, #8]
  4027d4:	60e3      	str	r3, [r4, #12]
  4027d6:	609c      	str	r4, [r3, #8]
  4027d8:	60c4      	str	r4, [r0, #12]
  4027da:	4640      	mov	r0, r8
  4027dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4027e0:	f000 bed2 	b.w	403588 <__malloc_unlock>
  4027e4:	6895      	ldr	r5, [r2, #8]
  4027e6:	4f3b      	ldr	r7, [pc, #236]	; (4028d4 <_free_r+0x1c0>)
  4027e8:	42bd      	cmp	r5, r7
  4027ea:	4403      	add	r3, r0
  4027ec:	d040      	beq.n	402870 <_free_r+0x15c>
  4027ee:	68d0      	ldr	r0, [r2, #12]
  4027f0:	60e8      	str	r0, [r5, #12]
  4027f2:	f043 0201 	orr.w	r2, r3, #1
  4027f6:	6085      	str	r5, [r0, #8]
  4027f8:	6062      	str	r2, [r4, #4]
  4027fa:	50e3      	str	r3, [r4, r3]
  4027fc:	e7b7      	b.n	40276e <_free_r+0x5a>
  4027fe:	07ff      	lsls	r7, r7, #31
  402800:	4403      	add	r3, r0
  402802:	d407      	bmi.n	402814 <_free_r+0x100>
  402804:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402808:	1aa4      	subs	r4, r4, r2
  40280a:	4413      	add	r3, r2
  40280c:	68a0      	ldr	r0, [r4, #8]
  40280e:	68e2      	ldr	r2, [r4, #12]
  402810:	60c2      	str	r2, [r0, #12]
  402812:	6090      	str	r0, [r2, #8]
  402814:	4a30      	ldr	r2, [pc, #192]	; (4028d8 <_free_r+0x1c4>)
  402816:	6812      	ldr	r2, [r2, #0]
  402818:	f043 0001 	orr.w	r0, r3, #1
  40281c:	4293      	cmp	r3, r2
  40281e:	6060      	str	r0, [r4, #4]
  402820:	608c      	str	r4, [r1, #8]
  402822:	d3b9      	bcc.n	402798 <_free_r+0x84>
  402824:	4b2d      	ldr	r3, [pc, #180]	; (4028dc <_free_r+0x1c8>)
  402826:	4640      	mov	r0, r8
  402828:	6819      	ldr	r1, [r3, #0]
  40282a:	f7ff ff23 	bl	402674 <_malloc_trim_r>
  40282e:	e7b3      	b.n	402798 <_free_r+0x84>
  402830:	4610      	mov	r0, r2
  402832:	e7cd      	b.n	4027d0 <_free_r+0xbc>
  402834:	1811      	adds	r1, r2, r0
  402836:	6849      	ldr	r1, [r1, #4]
  402838:	07c9      	lsls	r1, r1, #31
  40283a:	d444      	bmi.n	4028c6 <_free_r+0x1b2>
  40283c:	6891      	ldr	r1, [r2, #8]
  40283e:	68d2      	ldr	r2, [r2, #12]
  402840:	60ca      	str	r2, [r1, #12]
  402842:	4403      	add	r3, r0
  402844:	f043 0001 	orr.w	r0, r3, #1
  402848:	6091      	str	r1, [r2, #8]
  40284a:	6060      	str	r0, [r4, #4]
  40284c:	50e3      	str	r3, [r4, r3]
  40284e:	e7a3      	b.n	402798 <_free_r+0x84>
  402850:	2a14      	cmp	r2, #20
  402852:	d816      	bhi.n	402882 <_free_r+0x16e>
  402854:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402858:	00ff      	lsls	r7, r7, #3
  40285a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40285e:	e7aa      	b.n	4027b6 <_free_r+0xa2>
  402860:	10aa      	asrs	r2, r5, #2
  402862:	2301      	movs	r3, #1
  402864:	684d      	ldr	r5, [r1, #4]
  402866:	4093      	lsls	r3, r2
  402868:	432b      	orrs	r3, r5
  40286a:	604b      	str	r3, [r1, #4]
  40286c:	4603      	mov	r3, r0
  40286e:	e7b0      	b.n	4027d2 <_free_r+0xbe>
  402870:	f043 0201 	orr.w	r2, r3, #1
  402874:	614c      	str	r4, [r1, #20]
  402876:	610c      	str	r4, [r1, #16]
  402878:	60e5      	str	r5, [r4, #12]
  40287a:	60a5      	str	r5, [r4, #8]
  40287c:	6062      	str	r2, [r4, #4]
  40287e:	50e3      	str	r3, [r4, r3]
  402880:	e78a      	b.n	402798 <_free_r+0x84>
  402882:	2a54      	cmp	r2, #84	; 0x54
  402884:	d806      	bhi.n	402894 <_free_r+0x180>
  402886:	0b1a      	lsrs	r2, r3, #12
  402888:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40288c:	00ff      	lsls	r7, r7, #3
  40288e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402892:	e790      	b.n	4027b6 <_free_r+0xa2>
  402894:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402898:	d806      	bhi.n	4028a8 <_free_r+0x194>
  40289a:	0bda      	lsrs	r2, r3, #15
  40289c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4028a0:	00ff      	lsls	r7, r7, #3
  4028a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4028a6:	e786      	b.n	4027b6 <_free_r+0xa2>
  4028a8:	f240 5054 	movw	r0, #1364	; 0x554
  4028ac:	4282      	cmp	r2, r0
  4028ae:	d806      	bhi.n	4028be <_free_r+0x1aa>
  4028b0:	0c9a      	lsrs	r2, r3, #18
  4028b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4028b6:	00ff      	lsls	r7, r7, #3
  4028b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4028bc:	e77b      	b.n	4027b6 <_free_r+0xa2>
  4028be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4028c2:	257e      	movs	r5, #126	; 0x7e
  4028c4:	e777      	b.n	4027b6 <_free_r+0xa2>
  4028c6:	f043 0101 	orr.w	r1, r3, #1
  4028ca:	6061      	str	r1, [r4, #4]
  4028cc:	6013      	str	r3, [r2, #0]
  4028ce:	e763      	b.n	402798 <_free_r+0x84>
  4028d0:	200005a8 	.word	0x200005a8
  4028d4:	200005b0 	.word	0x200005b0
  4028d8:	200009b4 	.word	0x200009b4
  4028dc:	20000aa8 	.word	0x20000aa8

004028e0 <__sfvwrite_r>:
  4028e0:	6893      	ldr	r3, [r2, #8]
  4028e2:	2b00      	cmp	r3, #0
  4028e4:	d073      	beq.n	4029ce <__sfvwrite_r+0xee>
  4028e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028ea:	898b      	ldrh	r3, [r1, #12]
  4028ec:	b083      	sub	sp, #12
  4028ee:	460c      	mov	r4, r1
  4028f0:	0719      	lsls	r1, r3, #28
  4028f2:	9000      	str	r0, [sp, #0]
  4028f4:	4616      	mov	r6, r2
  4028f6:	d526      	bpl.n	402946 <__sfvwrite_r+0x66>
  4028f8:	6922      	ldr	r2, [r4, #16]
  4028fa:	b322      	cbz	r2, 402946 <__sfvwrite_r+0x66>
  4028fc:	f013 0002 	ands.w	r0, r3, #2
  402900:	6835      	ldr	r5, [r6, #0]
  402902:	d02c      	beq.n	40295e <__sfvwrite_r+0x7e>
  402904:	f04f 0900 	mov.w	r9, #0
  402908:	4fb0      	ldr	r7, [pc, #704]	; (402bcc <__sfvwrite_r+0x2ec>)
  40290a:	46c8      	mov	r8, r9
  40290c:	46b2      	mov	sl, r6
  40290e:	45b8      	cmp	r8, r7
  402910:	4643      	mov	r3, r8
  402912:	464a      	mov	r2, r9
  402914:	bf28      	it	cs
  402916:	463b      	movcs	r3, r7
  402918:	9800      	ldr	r0, [sp, #0]
  40291a:	f1b8 0f00 	cmp.w	r8, #0
  40291e:	d050      	beq.n	4029c2 <__sfvwrite_r+0xe2>
  402920:	69e1      	ldr	r1, [r4, #28]
  402922:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402924:	47b0      	blx	r6
  402926:	2800      	cmp	r0, #0
  402928:	dd58      	ble.n	4029dc <__sfvwrite_r+0xfc>
  40292a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40292e:	1a1b      	subs	r3, r3, r0
  402930:	4481      	add	r9, r0
  402932:	eba8 0800 	sub.w	r8, r8, r0
  402936:	f8ca 3008 	str.w	r3, [sl, #8]
  40293a:	2b00      	cmp	r3, #0
  40293c:	d1e7      	bne.n	40290e <__sfvwrite_r+0x2e>
  40293e:	2000      	movs	r0, #0
  402940:	b003      	add	sp, #12
  402942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402946:	4621      	mov	r1, r4
  402948:	9800      	ldr	r0, [sp, #0]
  40294a:	f7ff fc51 	bl	4021f0 <__swsetup_r>
  40294e:	2800      	cmp	r0, #0
  402950:	f040 8133 	bne.w	402bba <__sfvwrite_r+0x2da>
  402954:	89a3      	ldrh	r3, [r4, #12]
  402956:	6835      	ldr	r5, [r6, #0]
  402958:	f013 0002 	ands.w	r0, r3, #2
  40295c:	d1d2      	bne.n	402904 <__sfvwrite_r+0x24>
  40295e:	f013 0901 	ands.w	r9, r3, #1
  402962:	d145      	bne.n	4029f0 <__sfvwrite_r+0x110>
  402964:	464f      	mov	r7, r9
  402966:	9601      	str	r6, [sp, #4]
  402968:	b337      	cbz	r7, 4029b8 <__sfvwrite_r+0xd8>
  40296a:	059a      	lsls	r2, r3, #22
  40296c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402970:	f140 8083 	bpl.w	402a7a <__sfvwrite_r+0x19a>
  402974:	4547      	cmp	r7, r8
  402976:	46c3      	mov	fp, r8
  402978:	f0c0 80ab 	bcc.w	402ad2 <__sfvwrite_r+0x1f2>
  40297c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402980:	f040 80ac 	bne.w	402adc <__sfvwrite_r+0x1fc>
  402984:	6820      	ldr	r0, [r4, #0]
  402986:	46ba      	mov	sl, r7
  402988:	465a      	mov	r2, fp
  40298a:	4649      	mov	r1, r9
  40298c:	f000 fd92 	bl	4034b4 <memmove>
  402990:	68a2      	ldr	r2, [r4, #8]
  402992:	6823      	ldr	r3, [r4, #0]
  402994:	eba2 0208 	sub.w	r2, r2, r8
  402998:	445b      	add	r3, fp
  40299a:	60a2      	str	r2, [r4, #8]
  40299c:	6023      	str	r3, [r4, #0]
  40299e:	9a01      	ldr	r2, [sp, #4]
  4029a0:	6893      	ldr	r3, [r2, #8]
  4029a2:	eba3 030a 	sub.w	r3, r3, sl
  4029a6:	44d1      	add	r9, sl
  4029a8:	eba7 070a 	sub.w	r7, r7, sl
  4029ac:	6093      	str	r3, [r2, #8]
  4029ae:	2b00      	cmp	r3, #0
  4029b0:	d0c5      	beq.n	40293e <__sfvwrite_r+0x5e>
  4029b2:	89a3      	ldrh	r3, [r4, #12]
  4029b4:	2f00      	cmp	r7, #0
  4029b6:	d1d8      	bne.n	40296a <__sfvwrite_r+0x8a>
  4029b8:	f8d5 9000 	ldr.w	r9, [r5]
  4029bc:	686f      	ldr	r7, [r5, #4]
  4029be:	3508      	adds	r5, #8
  4029c0:	e7d2      	b.n	402968 <__sfvwrite_r+0x88>
  4029c2:	f8d5 9000 	ldr.w	r9, [r5]
  4029c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4029ca:	3508      	adds	r5, #8
  4029cc:	e79f      	b.n	40290e <__sfvwrite_r+0x2e>
  4029ce:	2000      	movs	r0, #0
  4029d0:	4770      	bx	lr
  4029d2:	4621      	mov	r1, r4
  4029d4:	9800      	ldr	r0, [sp, #0]
  4029d6:	f7ff fd1f 	bl	402418 <_fflush_r>
  4029da:	b370      	cbz	r0, 402a3a <__sfvwrite_r+0x15a>
  4029dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4029e4:	f04f 30ff 	mov.w	r0, #4294967295
  4029e8:	81a3      	strh	r3, [r4, #12]
  4029ea:	b003      	add	sp, #12
  4029ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029f0:	4681      	mov	r9, r0
  4029f2:	4633      	mov	r3, r6
  4029f4:	464e      	mov	r6, r9
  4029f6:	46a8      	mov	r8, r5
  4029f8:	469a      	mov	sl, r3
  4029fa:	464d      	mov	r5, r9
  4029fc:	b34e      	cbz	r6, 402a52 <__sfvwrite_r+0x172>
  4029fe:	b380      	cbz	r0, 402a62 <__sfvwrite_r+0x182>
  402a00:	6820      	ldr	r0, [r4, #0]
  402a02:	6923      	ldr	r3, [r4, #16]
  402a04:	6962      	ldr	r2, [r4, #20]
  402a06:	45b1      	cmp	r9, r6
  402a08:	46cb      	mov	fp, r9
  402a0a:	bf28      	it	cs
  402a0c:	46b3      	movcs	fp, r6
  402a0e:	4298      	cmp	r0, r3
  402a10:	465f      	mov	r7, fp
  402a12:	d904      	bls.n	402a1e <__sfvwrite_r+0x13e>
  402a14:	68a3      	ldr	r3, [r4, #8]
  402a16:	4413      	add	r3, r2
  402a18:	459b      	cmp	fp, r3
  402a1a:	f300 80a6 	bgt.w	402b6a <__sfvwrite_r+0x28a>
  402a1e:	4593      	cmp	fp, r2
  402a20:	db4b      	blt.n	402aba <__sfvwrite_r+0x1da>
  402a22:	4613      	mov	r3, r2
  402a24:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402a26:	69e1      	ldr	r1, [r4, #28]
  402a28:	9800      	ldr	r0, [sp, #0]
  402a2a:	462a      	mov	r2, r5
  402a2c:	47b8      	blx	r7
  402a2e:	1e07      	subs	r7, r0, #0
  402a30:	ddd4      	ble.n	4029dc <__sfvwrite_r+0xfc>
  402a32:	ebb9 0907 	subs.w	r9, r9, r7
  402a36:	d0cc      	beq.n	4029d2 <__sfvwrite_r+0xf2>
  402a38:	2001      	movs	r0, #1
  402a3a:	f8da 3008 	ldr.w	r3, [sl, #8]
  402a3e:	1bdb      	subs	r3, r3, r7
  402a40:	443d      	add	r5, r7
  402a42:	1bf6      	subs	r6, r6, r7
  402a44:	f8ca 3008 	str.w	r3, [sl, #8]
  402a48:	2b00      	cmp	r3, #0
  402a4a:	f43f af78 	beq.w	40293e <__sfvwrite_r+0x5e>
  402a4e:	2e00      	cmp	r6, #0
  402a50:	d1d5      	bne.n	4029fe <__sfvwrite_r+0x11e>
  402a52:	f108 0308 	add.w	r3, r8, #8
  402a56:	e913 0060 	ldmdb	r3, {r5, r6}
  402a5a:	4698      	mov	r8, r3
  402a5c:	3308      	adds	r3, #8
  402a5e:	2e00      	cmp	r6, #0
  402a60:	d0f9      	beq.n	402a56 <__sfvwrite_r+0x176>
  402a62:	4632      	mov	r2, r6
  402a64:	210a      	movs	r1, #10
  402a66:	4628      	mov	r0, r5
  402a68:	f000 fc3a 	bl	4032e0 <memchr>
  402a6c:	2800      	cmp	r0, #0
  402a6e:	f000 80a1 	beq.w	402bb4 <__sfvwrite_r+0x2d4>
  402a72:	3001      	adds	r0, #1
  402a74:	eba0 0905 	sub.w	r9, r0, r5
  402a78:	e7c2      	b.n	402a00 <__sfvwrite_r+0x120>
  402a7a:	6820      	ldr	r0, [r4, #0]
  402a7c:	6923      	ldr	r3, [r4, #16]
  402a7e:	4298      	cmp	r0, r3
  402a80:	d802      	bhi.n	402a88 <__sfvwrite_r+0x1a8>
  402a82:	6963      	ldr	r3, [r4, #20]
  402a84:	429f      	cmp	r7, r3
  402a86:	d25d      	bcs.n	402b44 <__sfvwrite_r+0x264>
  402a88:	45b8      	cmp	r8, r7
  402a8a:	bf28      	it	cs
  402a8c:	46b8      	movcs	r8, r7
  402a8e:	4642      	mov	r2, r8
  402a90:	4649      	mov	r1, r9
  402a92:	f000 fd0f 	bl	4034b4 <memmove>
  402a96:	68a3      	ldr	r3, [r4, #8]
  402a98:	6822      	ldr	r2, [r4, #0]
  402a9a:	eba3 0308 	sub.w	r3, r3, r8
  402a9e:	4442      	add	r2, r8
  402aa0:	60a3      	str	r3, [r4, #8]
  402aa2:	6022      	str	r2, [r4, #0]
  402aa4:	b10b      	cbz	r3, 402aaa <__sfvwrite_r+0x1ca>
  402aa6:	46c2      	mov	sl, r8
  402aa8:	e779      	b.n	40299e <__sfvwrite_r+0xbe>
  402aaa:	4621      	mov	r1, r4
  402aac:	9800      	ldr	r0, [sp, #0]
  402aae:	f7ff fcb3 	bl	402418 <_fflush_r>
  402ab2:	2800      	cmp	r0, #0
  402ab4:	d192      	bne.n	4029dc <__sfvwrite_r+0xfc>
  402ab6:	46c2      	mov	sl, r8
  402ab8:	e771      	b.n	40299e <__sfvwrite_r+0xbe>
  402aba:	465a      	mov	r2, fp
  402abc:	4629      	mov	r1, r5
  402abe:	f000 fcf9 	bl	4034b4 <memmove>
  402ac2:	68a2      	ldr	r2, [r4, #8]
  402ac4:	6823      	ldr	r3, [r4, #0]
  402ac6:	eba2 020b 	sub.w	r2, r2, fp
  402aca:	445b      	add	r3, fp
  402acc:	60a2      	str	r2, [r4, #8]
  402ace:	6023      	str	r3, [r4, #0]
  402ad0:	e7af      	b.n	402a32 <__sfvwrite_r+0x152>
  402ad2:	6820      	ldr	r0, [r4, #0]
  402ad4:	46b8      	mov	r8, r7
  402ad6:	46ba      	mov	sl, r7
  402ad8:	46bb      	mov	fp, r7
  402ada:	e755      	b.n	402988 <__sfvwrite_r+0xa8>
  402adc:	6962      	ldr	r2, [r4, #20]
  402ade:	6820      	ldr	r0, [r4, #0]
  402ae0:	6921      	ldr	r1, [r4, #16]
  402ae2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402ae6:	eba0 0a01 	sub.w	sl, r0, r1
  402aea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402aee:	f10a 0001 	add.w	r0, sl, #1
  402af2:	ea4f 0868 	mov.w	r8, r8, asr #1
  402af6:	4438      	add	r0, r7
  402af8:	4540      	cmp	r0, r8
  402afa:	4642      	mov	r2, r8
  402afc:	bf84      	itt	hi
  402afe:	4680      	movhi	r8, r0
  402b00:	4642      	movhi	r2, r8
  402b02:	055b      	lsls	r3, r3, #21
  402b04:	d544      	bpl.n	402b90 <__sfvwrite_r+0x2b0>
  402b06:	4611      	mov	r1, r2
  402b08:	9800      	ldr	r0, [sp, #0]
  402b0a:	f000 f921 	bl	402d50 <_malloc_r>
  402b0e:	4683      	mov	fp, r0
  402b10:	2800      	cmp	r0, #0
  402b12:	d055      	beq.n	402bc0 <__sfvwrite_r+0x2e0>
  402b14:	4652      	mov	r2, sl
  402b16:	6921      	ldr	r1, [r4, #16]
  402b18:	f000 fc32 	bl	403380 <memcpy>
  402b1c:	89a3      	ldrh	r3, [r4, #12]
  402b1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402b26:	81a3      	strh	r3, [r4, #12]
  402b28:	eb0b 000a 	add.w	r0, fp, sl
  402b2c:	eba8 030a 	sub.w	r3, r8, sl
  402b30:	f8c4 b010 	str.w	fp, [r4, #16]
  402b34:	f8c4 8014 	str.w	r8, [r4, #20]
  402b38:	6020      	str	r0, [r4, #0]
  402b3a:	60a3      	str	r3, [r4, #8]
  402b3c:	46b8      	mov	r8, r7
  402b3e:	46ba      	mov	sl, r7
  402b40:	46bb      	mov	fp, r7
  402b42:	e721      	b.n	402988 <__sfvwrite_r+0xa8>
  402b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402b48:	42b9      	cmp	r1, r7
  402b4a:	bf28      	it	cs
  402b4c:	4639      	movcs	r1, r7
  402b4e:	464a      	mov	r2, r9
  402b50:	fb91 f1f3 	sdiv	r1, r1, r3
  402b54:	9800      	ldr	r0, [sp, #0]
  402b56:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402b58:	fb03 f301 	mul.w	r3, r3, r1
  402b5c:	69e1      	ldr	r1, [r4, #28]
  402b5e:	47b0      	blx	r6
  402b60:	f1b0 0a00 	subs.w	sl, r0, #0
  402b64:	f73f af1b 	bgt.w	40299e <__sfvwrite_r+0xbe>
  402b68:	e738      	b.n	4029dc <__sfvwrite_r+0xfc>
  402b6a:	461a      	mov	r2, r3
  402b6c:	4629      	mov	r1, r5
  402b6e:	9301      	str	r3, [sp, #4]
  402b70:	f000 fca0 	bl	4034b4 <memmove>
  402b74:	6822      	ldr	r2, [r4, #0]
  402b76:	9b01      	ldr	r3, [sp, #4]
  402b78:	9800      	ldr	r0, [sp, #0]
  402b7a:	441a      	add	r2, r3
  402b7c:	6022      	str	r2, [r4, #0]
  402b7e:	4621      	mov	r1, r4
  402b80:	f7ff fc4a 	bl	402418 <_fflush_r>
  402b84:	9b01      	ldr	r3, [sp, #4]
  402b86:	2800      	cmp	r0, #0
  402b88:	f47f af28 	bne.w	4029dc <__sfvwrite_r+0xfc>
  402b8c:	461f      	mov	r7, r3
  402b8e:	e750      	b.n	402a32 <__sfvwrite_r+0x152>
  402b90:	9800      	ldr	r0, [sp, #0]
  402b92:	f000 fcff 	bl	403594 <_realloc_r>
  402b96:	4683      	mov	fp, r0
  402b98:	2800      	cmp	r0, #0
  402b9a:	d1c5      	bne.n	402b28 <__sfvwrite_r+0x248>
  402b9c:	9d00      	ldr	r5, [sp, #0]
  402b9e:	6921      	ldr	r1, [r4, #16]
  402ba0:	4628      	mov	r0, r5
  402ba2:	f7ff fdb7 	bl	402714 <_free_r>
  402ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402baa:	220c      	movs	r2, #12
  402bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402bb0:	602a      	str	r2, [r5, #0]
  402bb2:	e715      	b.n	4029e0 <__sfvwrite_r+0x100>
  402bb4:	f106 0901 	add.w	r9, r6, #1
  402bb8:	e722      	b.n	402a00 <__sfvwrite_r+0x120>
  402bba:	f04f 30ff 	mov.w	r0, #4294967295
  402bbe:	e6bf      	b.n	402940 <__sfvwrite_r+0x60>
  402bc0:	9a00      	ldr	r2, [sp, #0]
  402bc2:	230c      	movs	r3, #12
  402bc4:	6013      	str	r3, [r2, #0]
  402bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402bca:	e709      	b.n	4029e0 <__sfvwrite_r+0x100>
  402bcc:	7ffffc00 	.word	0x7ffffc00

00402bd0 <_fwalk_reent>:
  402bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402bd4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402bd8:	d01f      	beq.n	402c1a <_fwalk_reent+0x4a>
  402bda:	4688      	mov	r8, r1
  402bdc:	4606      	mov	r6, r0
  402bde:	f04f 0900 	mov.w	r9, #0
  402be2:	687d      	ldr	r5, [r7, #4]
  402be4:	68bc      	ldr	r4, [r7, #8]
  402be6:	3d01      	subs	r5, #1
  402be8:	d411      	bmi.n	402c0e <_fwalk_reent+0x3e>
  402bea:	89a3      	ldrh	r3, [r4, #12]
  402bec:	2b01      	cmp	r3, #1
  402bee:	f105 35ff 	add.w	r5, r5, #4294967295
  402bf2:	d908      	bls.n	402c06 <_fwalk_reent+0x36>
  402bf4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402bf8:	3301      	adds	r3, #1
  402bfa:	4621      	mov	r1, r4
  402bfc:	4630      	mov	r0, r6
  402bfe:	d002      	beq.n	402c06 <_fwalk_reent+0x36>
  402c00:	47c0      	blx	r8
  402c02:	ea49 0900 	orr.w	r9, r9, r0
  402c06:	1c6b      	adds	r3, r5, #1
  402c08:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402c0c:	d1ed      	bne.n	402bea <_fwalk_reent+0x1a>
  402c0e:	683f      	ldr	r7, [r7, #0]
  402c10:	2f00      	cmp	r7, #0
  402c12:	d1e6      	bne.n	402be2 <_fwalk_reent+0x12>
  402c14:	4648      	mov	r0, r9
  402c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402c1a:	46b9      	mov	r9, r7
  402c1c:	4648      	mov	r0, r9
  402c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402c22:	bf00      	nop

00402c24 <__locale_mb_cur_max>:
  402c24:	4b04      	ldr	r3, [pc, #16]	; (402c38 <__locale_mb_cur_max+0x14>)
  402c26:	4a05      	ldr	r2, [pc, #20]	; (402c3c <__locale_mb_cur_max+0x18>)
  402c28:	681b      	ldr	r3, [r3, #0]
  402c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402c2c:	2b00      	cmp	r3, #0
  402c2e:	bf08      	it	eq
  402c30:	4613      	moveq	r3, r2
  402c32:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402c36:	4770      	bx	lr
  402c38:	20000008 	.word	0x20000008
  402c3c:	2000043c 	.word	0x2000043c

00402c40 <__retarget_lock_init_recursive>:
  402c40:	4770      	bx	lr
  402c42:	bf00      	nop

00402c44 <__retarget_lock_close_recursive>:
  402c44:	4770      	bx	lr
  402c46:	bf00      	nop

00402c48 <__retarget_lock_acquire_recursive>:
  402c48:	4770      	bx	lr
  402c4a:	bf00      	nop

00402c4c <__retarget_lock_release_recursive>:
  402c4c:	4770      	bx	lr
  402c4e:	bf00      	nop

00402c50 <__swhatbuf_r>:
  402c50:	b570      	push	{r4, r5, r6, lr}
  402c52:	460c      	mov	r4, r1
  402c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402c58:	2900      	cmp	r1, #0
  402c5a:	b090      	sub	sp, #64	; 0x40
  402c5c:	4615      	mov	r5, r2
  402c5e:	461e      	mov	r6, r3
  402c60:	db14      	blt.n	402c8c <__swhatbuf_r+0x3c>
  402c62:	aa01      	add	r2, sp, #4
  402c64:	f001 f80e 	bl	403c84 <_fstat_r>
  402c68:	2800      	cmp	r0, #0
  402c6a:	db0f      	blt.n	402c8c <__swhatbuf_r+0x3c>
  402c6c:	9a02      	ldr	r2, [sp, #8]
  402c6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402c72:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402c76:	fab2 f282 	clz	r2, r2
  402c7a:	0952      	lsrs	r2, r2, #5
  402c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402c80:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402c84:	6032      	str	r2, [r6, #0]
  402c86:	602b      	str	r3, [r5, #0]
  402c88:	b010      	add	sp, #64	; 0x40
  402c8a:	bd70      	pop	{r4, r5, r6, pc}
  402c8c:	89a2      	ldrh	r2, [r4, #12]
  402c8e:	2300      	movs	r3, #0
  402c90:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402c94:	6033      	str	r3, [r6, #0]
  402c96:	d004      	beq.n	402ca2 <__swhatbuf_r+0x52>
  402c98:	2240      	movs	r2, #64	; 0x40
  402c9a:	4618      	mov	r0, r3
  402c9c:	602a      	str	r2, [r5, #0]
  402c9e:	b010      	add	sp, #64	; 0x40
  402ca0:	bd70      	pop	{r4, r5, r6, pc}
  402ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402ca6:	602b      	str	r3, [r5, #0]
  402ca8:	b010      	add	sp, #64	; 0x40
  402caa:	bd70      	pop	{r4, r5, r6, pc}

00402cac <__smakebuf_r>:
  402cac:	898a      	ldrh	r2, [r1, #12]
  402cae:	0792      	lsls	r2, r2, #30
  402cb0:	460b      	mov	r3, r1
  402cb2:	d506      	bpl.n	402cc2 <__smakebuf_r+0x16>
  402cb4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402cb8:	2101      	movs	r1, #1
  402cba:	601a      	str	r2, [r3, #0]
  402cbc:	611a      	str	r2, [r3, #16]
  402cbe:	6159      	str	r1, [r3, #20]
  402cc0:	4770      	bx	lr
  402cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  402cc4:	b083      	sub	sp, #12
  402cc6:	ab01      	add	r3, sp, #4
  402cc8:	466a      	mov	r2, sp
  402cca:	460c      	mov	r4, r1
  402ccc:	4606      	mov	r6, r0
  402cce:	f7ff ffbf 	bl	402c50 <__swhatbuf_r>
  402cd2:	9900      	ldr	r1, [sp, #0]
  402cd4:	4605      	mov	r5, r0
  402cd6:	4630      	mov	r0, r6
  402cd8:	f000 f83a 	bl	402d50 <_malloc_r>
  402cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ce0:	b1d8      	cbz	r0, 402d1a <__smakebuf_r+0x6e>
  402ce2:	9a01      	ldr	r2, [sp, #4]
  402ce4:	4f15      	ldr	r7, [pc, #84]	; (402d3c <__smakebuf_r+0x90>)
  402ce6:	9900      	ldr	r1, [sp, #0]
  402ce8:	63f7      	str	r7, [r6, #60]	; 0x3c
  402cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402cee:	81a3      	strh	r3, [r4, #12]
  402cf0:	6020      	str	r0, [r4, #0]
  402cf2:	6120      	str	r0, [r4, #16]
  402cf4:	6161      	str	r1, [r4, #20]
  402cf6:	b91a      	cbnz	r2, 402d00 <__smakebuf_r+0x54>
  402cf8:	432b      	orrs	r3, r5
  402cfa:	81a3      	strh	r3, [r4, #12]
  402cfc:	b003      	add	sp, #12
  402cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402d00:	4630      	mov	r0, r6
  402d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402d06:	f000 ffd1 	bl	403cac <_isatty_r>
  402d0a:	b1a0      	cbz	r0, 402d36 <__smakebuf_r+0x8a>
  402d0c:	89a3      	ldrh	r3, [r4, #12]
  402d0e:	f023 0303 	bic.w	r3, r3, #3
  402d12:	f043 0301 	orr.w	r3, r3, #1
  402d16:	b21b      	sxth	r3, r3
  402d18:	e7ee      	b.n	402cf8 <__smakebuf_r+0x4c>
  402d1a:	059a      	lsls	r2, r3, #22
  402d1c:	d4ee      	bmi.n	402cfc <__smakebuf_r+0x50>
  402d1e:	f023 0303 	bic.w	r3, r3, #3
  402d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402d26:	f043 0302 	orr.w	r3, r3, #2
  402d2a:	2101      	movs	r1, #1
  402d2c:	81a3      	strh	r3, [r4, #12]
  402d2e:	6022      	str	r2, [r4, #0]
  402d30:	6122      	str	r2, [r4, #16]
  402d32:	6161      	str	r1, [r4, #20]
  402d34:	e7e2      	b.n	402cfc <__smakebuf_r+0x50>
  402d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d3a:	e7dd      	b.n	402cf8 <__smakebuf_r+0x4c>
  402d3c:	0040246d 	.word	0x0040246d

00402d40 <malloc>:
  402d40:	4b02      	ldr	r3, [pc, #8]	; (402d4c <malloc+0xc>)
  402d42:	4601      	mov	r1, r0
  402d44:	6818      	ldr	r0, [r3, #0]
  402d46:	f000 b803 	b.w	402d50 <_malloc_r>
  402d4a:	bf00      	nop
  402d4c:	20000008 	.word	0x20000008

00402d50 <_malloc_r>:
  402d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d54:	f101 060b 	add.w	r6, r1, #11
  402d58:	2e16      	cmp	r6, #22
  402d5a:	b083      	sub	sp, #12
  402d5c:	4605      	mov	r5, r0
  402d5e:	f240 809e 	bls.w	402e9e <_malloc_r+0x14e>
  402d62:	f036 0607 	bics.w	r6, r6, #7
  402d66:	f100 80bd 	bmi.w	402ee4 <_malloc_r+0x194>
  402d6a:	42b1      	cmp	r1, r6
  402d6c:	f200 80ba 	bhi.w	402ee4 <_malloc_r+0x194>
  402d70:	f000 fc04 	bl	40357c <__malloc_lock>
  402d74:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402d78:	f0c0 8293 	bcc.w	4032a2 <_malloc_r+0x552>
  402d7c:	0a73      	lsrs	r3, r6, #9
  402d7e:	f000 80b8 	beq.w	402ef2 <_malloc_r+0x1a2>
  402d82:	2b04      	cmp	r3, #4
  402d84:	f200 8179 	bhi.w	40307a <_malloc_r+0x32a>
  402d88:	09b3      	lsrs	r3, r6, #6
  402d8a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402d8e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402d92:	00c3      	lsls	r3, r0, #3
  402d94:	4fbf      	ldr	r7, [pc, #764]	; (403094 <_malloc_r+0x344>)
  402d96:	443b      	add	r3, r7
  402d98:	f1a3 0108 	sub.w	r1, r3, #8
  402d9c:	685c      	ldr	r4, [r3, #4]
  402d9e:	42a1      	cmp	r1, r4
  402da0:	d106      	bne.n	402db0 <_malloc_r+0x60>
  402da2:	e00c      	b.n	402dbe <_malloc_r+0x6e>
  402da4:	2a00      	cmp	r2, #0
  402da6:	f280 80aa 	bge.w	402efe <_malloc_r+0x1ae>
  402daa:	68e4      	ldr	r4, [r4, #12]
  402dac:	42a1      	cmp	r1, r4
  402dae:	d006      	beq.n	402dbe <_malloc_r+0x6e>
  402db0:	6863      	ldr	r3, [r4, #4]
  402db2:	f023 0303 	bic.w	r3, r3, #3
  402db6:	1b9a      	subs	r2, r3, r6
  402db8:	2a0f      	cmp	r2, #15
  402dba:	ddf3      	ble.n	402da4 <_malloc_r+0x54>
  402dbc:	4670      	mov	r0, lr
  402dbe:	693c      	ldr	r4, [r7, #16]
  402dc0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4030a8 <_malloc_r+0x358>
  402dc4:	4574      	cmp	r4, lr
  402dc6:	f000 81ab 	beq.w	403120 <_malloc_r+0x3d0>
  402dca:	6863      	ldr	r3, [r4, #4]
  402dcc:	f023 0303 	bic.w	r3, r3, #3
  402dd0:	1b9a      	subs	r2, r3, r6
  402dd2:	2a0f      	cmp	r2, #15
  402dd4:	f300 8190 	bgt.w	4030f8 <_malloc_r+0x3a8>
  402dd8:	2a00      	cmp	r2, #0
  402dda:	f8c7 e014 	str.w	lr, [r7, #20]
  402dde:	f8c7 e010 	str.w	lr, [r7, #16]
  402de2:	f280 809d 	bge.w	402f20 <_malloc_r+0x1d0>
  402de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402dea:	f080 8161 	bcs.w	4030b0 <_malloc_r+0x360>
  402dee:	08db      	lsrs	r3, r3, #3
  402df0:	f103 0c01 	add.w	ip, r3, #1
  402df4:	1099      	asrs	r1, r3, #2
  402df6:	687a      	ldr	r2, [r7, #4]
  402df8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402dfc:	f8c4 8008 	str.w	r8, [r4, #8]
  402e00:	2301      	movs	r3, #1
  402e02:	408b      	lsls	r3, r1
  402e04:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402e08:	4313      	orrs	r3, r2
  402e0a:	3908      	subs	r1, #8
  402e0c:	60e1      	str	r1, [r4, #12]
  402e0e:	607b      	str	r3, [r7, #4]
  402e10:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402e14:	f8c8 400c 	str.w	r4, [r8, #12]
  402e18:	1082      	asrs	r2, r0, #2
  402e1a:	2401      	movs	r4, #1
  402e1c:	4094      	lsls	r4, r2
  402e1e:	429c      	cmp	r4, r3
  402e20:	f200 808b 	bhi.w	402f3a <_malloc_r+0x1ea>
  402e24:	421c      	tst	r4, r3
  402e26:	d106      	bne.n	402e36 <_malloc_r+0xe6>
  402e28:	f020 0003 	bic.w	r0, r0, #3
  402e2c:	0064      	lsls	r4, r4, #1
  402e2e:	421c      	tst	r4, r3
  402e30:	f100 0004 	add.w	r0, r0, #4
  402e34:	d0fa      	beq.n	402e2c <_malloc_r+0xdc>
  402e36:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402e3a:	46cc      	mov	ip, r9
  402e3c:	4680      	mov	r8, r0
  402e3e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402e42:	459c      	cmp	ip, r3
  402e44:	d107      	bne.n	402e56 <_malloc_r+0x106>
  402e46:	e16d      	b.n	403124 <_malloc_r+0x3d4>
  402e48:	2a00      	cmp	r2, #0
  402e4a:	f280 817b 	bge.w	403144 <_malloc_r+0x3f4>
  402e4e:	68db      	ldr	r3, [r3, #12]
  402e50:	459c      	cmp	ip, r3
  402e52:	f000 8167 	beq.w	403124 <_malloc_r+0x3d4>
  402e56:	6859      	ldr	r1, [r3, #4]
  402e58:	f021 0103 	bic.w	r1, r1, #3
  402e5c:	1b8a      	subs	r2, r1, r6
  402e5e:	2a0f      	cmp	r2, #15
  402e60:	ddf2      	ble.n	402e48 <_malloc_r+0xf8>
  402e62:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402e66:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402e6a:	9300      	str	r3, [sp, #0]
  402e6c:	199c      	adds	r4, r3, r6
  402e6e:	4628      	mov	r0, r5
  402e70:	f046 0601 	orr.w	r6, r6, #1
  402e74:	f042 0501 	orr.w	r5, r2, #1
  402e78:	605e      	str	r6, [r3, #4]
  402e7a:	f8c8 c00c 	str.w	ip, [r8, #12]
  402e7e:	f8cc 8008 	str.w	r8, [ip, #8]
  402e82:	617c      	str	r4, [r7, #20]
  402e84:	613c      	str	r4, [r7, #16]
  402e86:	f8c4 e00c 	str.w	lr, [r4, #12]
  402e8a:	f8c4 e008 	str.w	lr, [r4, #8]
  402e8e:	6065      	str	r5, [r4, #4]
  402e90:	505a      	str	r2, [r3, r1]
  402e92:	f000 fb79 	bl	403588 <__malloc_unlock>
  402e96:	9b00      	ldr	r3, [sp, #0]
  402e98:	f103 0408 	add.w	r4, r3, #8
  402e9c:	e01e      	b.n	402edc <_malloc_r+0x18c>
  402e9e:	2910      	cmp	r1, #16
  402ea0:	d820      	bhi.n	402ee4 <_malloc_r+0x194>
  402ea2:	f000 fb6b 	bl	40357c <__malloc_lock>
  402ea6:	2610      	movs	r6, #16
  402ea8:	2318      	movs	r3, #24
  402eaa:	2002      	movs	r0, #2
  402eac:	4f79      	ldr	r7, [pc, #484]	; (403094 <_malloc_r+0x344>)
  402eae:	443b      	add	r3, r7
  402eb0:	f1a3 0208 	sub.w	r2, r3, #8
  402eb4:	685c      	ldr	r4, [r3, #4]
  402eb6:	4294      	cmp	r4, r2
  402eb8:	f000 813d 	beq.w	403136 <_malloc_r+0x3e6>
  402ebc:	6863      	ldr	r3, [r4, #4]
  402ebe:	68e1      	ldr	r1, [r4, #12]
  402ec0:	68a6      	ldr	r6, [r4, #8]
  402ec2:	f023 0303 	bic.w	r3, r3, #3
  402ec6:	4423      	add	r3, r4
  402ec8:	4628      	mov	r0, r5
  402eca:	685a      	ldr	r2, [r3, #4]
  402ecc:	60f1      	str	r1, [r6, #12]
  402ece:	f042 0201 	orr.w	r2, r2, #1
  402ed2:	608e      	str	r6, [r1, #8]
  402ed4:	605a      	str	r2, [r3, #4]
  402ed6:	f000 fb57 	bl	403588 <__malloc_unlock>
  402eda:	3408      	adds	r4, #8
  402edc:	4620      	mov	r0, r4
  402ede:	b003      	add	sp, #12
  402ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ee4:	2400      	movs	r4, #0
  402ee6:	230c      	movs	r3, #12
  402ee8:	4620      	mov	r0, r4
  402eea:	602b      	str	r3, [r5, #0]
  402eec:	b003      	add	sp, #12
  402eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ef2:	2040      	movs	r0, #64	; 0x40
  402ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
  402ef8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402efc:	e74a      	b.n	402d94 <_malloc_r+0x44>
  402efe:	4423      	add	r3, r4
  402f00:	68e1      	ldr	r1, [r4, #12]
  402f02:	685a      	ldr	r2, [r3, #4]
  402f04:	68a6      	ldr	r6, [r4, #8]
  402f06:	f042 0201 	orr.w	r2, r2, #1
  402f0a:	60f1      	str	r1, [r6, #12]
  402f0c:	4628      	mov	r0, r5
  402f0e:	608e      	str	r6, [r1, #8]
  402f10:	605a      	str	r2, [r3, #4]
  402f12:	f000 fb39 	bl	403588 <__malloc_unlock>
  402f16:	3408      	adds	r4, #8
  402f18:	4620      	mov	r0, r4
  402f1a:	b003      	add	sp, #12
  402f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f20:	4423      	add	r3, r4
  402f22:	4628      	mov	r0, r5
  402f24:	685a      	ldr	r2, [r3, #4]
  402f26:	f042 0201 	orr.w	r2, r2, #1
  402f2a:	605a      	str	r2, [r3, #4]
  402f2c:	f000 fb2c 	bl	403588 <__malloc_unlock>
  402f30:	3408      	adds	r4, #8
  402f32:	4620      	mov	r0, r4
  402f34:	b003      	add	sp, #12
  402f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f3a:	68bc      	ldr	r4, [r7, #8]
  402f3c:	6863      	ldr	r3, [r4, #4]
  402f3e:	f023 0803 	bic.w	r8, r3, #3
  402f42:	45b0      	cmp	r8, r6
  402f44:	d304      	bcc.n	402f50 <_malloc_r+0x200>
  402f46:	eba8 0306 	sub.w	r3, r8, r6
  402f4a:	2b0f      	cmp	r3, #15
  402f4c:	f300 8085 	bgt.w	40305a <_malloc_r+0x30a>
  402f50:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4030ac <_malloc_r+0x35c>
  402f54:	4b50      	ldr	r3, [pc, #320]	; (403098 <_malloc_r+0x348>)
  402f56:	f8d9 2000 	ldr.w	r2, [r9]
  402f5a:	681b      	ldr	r3, [r3, #0]
  402f5c:	3201      	adds	r2, #1
  402f5e:	4433      	add	r3, r6
  402f60:	eb04 0a08 	add.w	sl, r4, r8
  402f64:	f000 8155 	beq.w	403212 <_malloc_r+0x4c2>
  402f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402f6c:	330f      	adds	r3, #15
  402f6e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402f72:	f02b 0b0f 	bic.w	fp, fp, #15
  402f76:	4659      	mov	r1, fp
  402f78:	4628      	mov	r0, r5
  402f7a:	f000 fcb1 	bl	4038e0 <_sbrk_r>
  402f7e:	1c41      	adds	r1, r0, #1
  402f80:	4602      	mov	r2, r0
  402f82:	f000 80fc 	beq.w	40317e <_malloc_r+0x42e>
  402f86:	4582      	cmp	sl, r0
  402f88:	f200 80f7 	bhi.w	40317a <_malloc_r+0x42a>
  402f8c:	4b43      	ldr	r3, [pc, #268]	; (40309c <_malloc_r+0x34c>)
  402f8e:	6819      	ldr	r1, [r3, #0]
  402f90:	4459      	add	r1, fp
  402f92:	6019      	str	r1, [r3, #0]
  402f94:	f000 814d 	beq.w	403232 <_malloc_r+0x4e2>
  402f98:	f8d9 0000 	ldr.w	r0, [r9]
  402f9c:	3001      	adds	r0, #1
  402f9e:	bf1b      	ittet	ne
  402fa0:	eba2 0a0a 	subne.w	sl, r2, sl
  402fa4:	4451      	addne	r1, sl
  402fa6:	f8c9 2000 	streq.w	r2, [r9]
  402faa:	6019      	strne	r1, [r3, #0]
  402fac:	f012 0107 	ands.w	r1, r2, #7
  402fb0:	f000 8115 	beq.w	4031de <_malloc_r+0x48e>
  402fb4:	f1c1 0008 	rsb	r0, r1, #8
  402fb8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402fbc:	4402      	add	r2, r0
  402fbe:	3108      	adds	r1, #8
  402fc0:	eb02 090b 	add.w	r9, r2, fp
  402fc4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402fc8:	eba1 0909 	sub.w	r9, r1, r9
  402fcc:	4649      	mov	r1, r9
  402fce:	4628      	mov	r0, r5
  402fd0:	9301      	str	r3, [sp, #4]
  402fd2:	9200      	str	r2, [sp, #0]
  402fd4:	f000 fc84 	bl	4038e0 <_sbrk_r>
  402fd8:	1c43      	adds	r3, r0, #1
  402fda:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402fde:	f000 8143 	beq.w	403268 <_malloc_r+0x518>
  402fe2:	1a80      	subs	r0, r0, r2
  402fe4:	4448      	add	r0, r9
  402fe6:	f040 0001 	orr.w	r0, r0, #1
  402fea:	6819      	ldr	r1, [r3, #0]
  402fec:	60ba      	str	r2, [r7, #8]
  402fee:	4449      	add	r1, r9
  402ff0:	42bc      	cmp	r4, r7
  402ff2:	6050      	str	r0, [r2, #4]
  402ff4:	6019      	str	r1, [r3, #0]
  402ff6:	d017      	beq.n	403028 <_malloc_r+0x2d8>
  402ff8:	f1b8 0f0f 	cmp.w	r8, #15
  402ffc:	f240 80fb 	bls.w	4031f6 <_malloc_r+0x4a6>
  403000:	6860      	ldr	r0, [r4, #4]
  403002:	f1a8 020c 	sub.w	r2, r8, #12
  403006:	f022 0207 	bic.w	r2, r2, #7
  40300a:	eb04 0e02 	add.w	lr, r4, r2
  40300e:	f000 0001 	and.w	r0, r0, #1
  403012:	f04f 0c05 	mov.w	ip, #5
  403016:	4310      	orrs	r0, r2
  403018:	2a0f      	cmp	r2, #15
  40301a:	6060      	str	r0, [r4, #4]
  40301c:	f8ce c004 	str.w	ip, [lr, #4]
  403020:	f8ce c008 	str.w	ip, [lr, #8]
  403024:	f200 8117 	bhi.w	403256 <_malloc_r+0x506>
  403028:	4b1d      	ldr	r3, [pc, #116]	; (4030a0 <_malloc_r+0x350>)
  40302a:	68bc      	ldr	r4, [r7, #8]
  40302c:	681a      	ldr	r2, [r3, #0]
  40302e:	4291      	cmp	r1, r2
  403030:	bf88      	it	hi
  403032:	6019      	strhi	r1, [r3, #0]
  403034:	4b1b      	ldr	r3, [pc, #108]	; (4030a4 <_malloc_r+0x354>)
  403036:	681a      	ldr	r2, [r3, #0]
  403038:	4291      	cmp	r1, r2
  40303a:	6862      	ldr	r2, [r4, #4]
  40303c:	bf88      	it	hi
  40303e:	6019      	strhi	r1, [r3, #0]
  403040:	f022 0203 	bic.w	r2, r2, #3
  403044:	4296      	cmp	r6, r2
  403046:	eba2 0306 	sub.w	r3, r2, r6
  40304a:	d801      	bhi.n	403050 <_malloc_r+0x300>
  40304c:	2b0f      	cmp	r3, #15
  40304e:	dc04      	bgt.n	40305a <_malloc_r+0x30a>
  403050:	4628      	mov	r0, r5
  403052:	f000 fa99 	bl	403588 <__malloc_unlock>
  403056:	2400      	movs	r4, #0
  403058:	e740      	b.n	402edc <_malloc_r+0x18c>
  40305a:	19a2      	adds	r2, r4, r6
  40305c:	f043 0301 	orr.w	r3, r3, #1
  403060:	f046 0601 	orr.w	r6, r6, #1
  403064:	6066      	str	r6, [r4, #4]
  403066:	4628      	mov	r0, r5
  403068:	60ba      	str	r2, [r7, #8]
  40306a:	6053      	str	r3, [r2, #4]
  40306c:	f000 fa8c 	bl	403588 <__malloc_unlock>
  403070:	3408      	adds	r4, #8
  403072:	4620      	mov	r0, r4
  403074:	b003      	add	sp, #12
  403076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40307a:	2b14      	cmp	r3, #20
  40307c:	d971      	bls.n	403162 <_malloc_r+0x412>
  40307e:	2b54      	cmp	r3, #84	; 0x54
  403080:	f200 80a3 	bhi.w	4031ca <_malloc_r+0x47a>
  403084:	0b33      	lsrs	r3, r6, #12
  403086:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40308a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40308e:	00c3      	lsls	r3, r0, #3
  403090:	e680      	b.n	402d94 <_malloc_r+0x44>
  403092:	bf00      	nop
  403094:	200005a8 	.word	0x200005a8
  403098:	20000aa8 	.word	0x20000aa8
  40309c:	20000a78 	.word	0x20000a78
  4030a0:	20000aa0 	.word	0x20000aa0
  4030a4:	20000aa4 	.word	0x20000aa4
  4030a8:	200005b0 	.word	0x200005b0
  4030ac:	200009b0 	.word	0x200009b0
  4030b0:	0a5a      	lsrs	r2, r3, #9
  4030b2:	2a04      	cmp	r2, #4
  4030b4:	d95b      	bls.n	40316e <_malloc_r+0x41e>
  4030b6:	2a14      	cmp	r2, #20
  4030b8:	f200 80ae 	bhi.w	403218 <_malloc_r+0x4c8>
  4030bc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4030c0:	00c9      	lsls	r1, r1, #3
  4030c2:	325b      	adds	r2, #91	; 0x5b
  4030c4:	eb07 0c01 	add.w	ip, r7, r1
  4030c8:	5879      	ldr	r1, [r7, r1]
  4030ca:	f1ac 0c08 	sub.w	ip, ip, #8
  4030ce:	458c      	cmp	ip, r1
  4030d0:	f000 8088 	beq.w	4031e4 <_malloc_r+0x494>
  4030d4:	684a      	ldr	r2, [r1, #4]
  4030d6:	f022 0203 	bic.w	r2, r2, #3
  4030da:	4293      	cmp	r3, r2
  4030dc:	d273      	bcs.n	4031c6 <_malloc_r+0x476>
  4030de:	6889      	ldr	r1, [r1, #8]
  4030e0:	458c      	cmp	ip, r1
  4030e2:	d1f7      	bne.n	4030d4 <_malloc_r+0x384>
  4030e4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4030e8:	687b      	ldr	r3, [r7, #4]
  4030ea:	60e2      	str	r2, [r4, #12]
  4030ec:	f8c4 c008 	str.w	ip, [r4, #8]
  4030f0:	6094      	str	r4, [r2, #8]
  4030f2:	f8cc 400c 	str.w	r4, [ip, #12]
  4030f6:	e68f      	b.n	402e18 <_malloc_r+0xc8>
  4030f8:	19a1      	adds	r1, r4, r6
  4030fa:	f046 0c01 	orr.w	ip, r6, #1
  4030fe:	f042 0601 	orr.w	r6, r2, #1
  403102:	f8c4 c004 	str.w	ip, [r4, #4]
  403106:	4628      	mov	r0, r5
  403108:	6179      	str	r1, [r7, #20]
  40310a:	6139      	str	r1, [r7, #16]
  40310c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403110:	f8c1 e008 	str.w	lr, [r1, #8]
  403114:	604e      	str	r6, [r1, #4]
  403116:	50e2      	str	r2, [r4, r3]
  403118:	f000 fa36 	bl	403588 <__malloc_unlock>
  40311c:	3408      	adds	r4, #8
  40311e:	e6dd      	b.n	402edc <_malloc_r+0x18c>
  403120:	687b      	ldr	r3, [r7, #4]
  403122:	e679      	b.n	402e18 <_malloc_r+0xc8>
  403124:	f108 0801 	add.w	r8, r8, #1
  403128:	f018 0f03 	tst.w	r8, #3
  40312c:	f10c 0c08 	add.w	ip, ip, #8
  403130:	f47f ae85 	bne.w	402e3e <_malloc_r+0xee>
  403134:	e02d      	b.n	403192 <_malloc_r+0x442>
  403136:	68dc      	ldr	r4, [r3, #12]
  403138:	42a3      	cmp	r3, r4
  40313a:	bf08      	it	eq
  40313c:	3002      	addeq	r0, #2
  40313e:	f43f ae3e 	beq.w	402dbe <_malloc_r+0x6e>
  403142:	e6bb      	b.n	402ebc <_malloc_r+0x16c>
  403144:	4419      	add	r1, r3
  403146:	461c      	mov	r4, r3
  403148:	684a      	ldr	r2, [r1, #4]
  40314a:	68db      	ldr	r3, [r3, #12]
  40314c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403150:	f042 0201 	orr.w	r2, r2, #1
  403154:	604a      	str	r2, [r1, #4]
  403156:	4628      	mov	r0, r5
  403158:	60f3      	str	r3, [r6, #12]
  40315a:	609e      	str	r6, [r3, #8]
  40315c:	f000 fa14 	bl	403588 <__malloc_unlock>
  403160:	e6bc      	b.n	402edc <_malloc_r+0x18c>
  403162:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403166:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40316a:	00c3      	lsls	r3, r0, #3
  40316c:	e612      	b.n	402d94 <_malloc_r+0x44>
  40316e:	099a      	lsrs	r2, r3, #6
  403170:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403174:	00c9      	lsls	r1, r1, #3
  403176:	3238      	adds	r2, #56	; 0x38
  403178:	e7a4      	b.n	4030c4 <_malloc_r+0x374>
  40317a:	42bc      	cmp	r4, r7
  40317c:	d054      	beq.n	403228 <_malloc_r+0x4d8>
  40317e:	68bc      	ldr	r4, [r7, #8]
  403180:	6862      	ldr	r2, [r4, #4]
  403182:	f022 0203 	bic.w	r2, r2, #3
  403186:	e75d      	b.n	403044 <_malloc_r+0x2f4>
  403188:	f859 3908 	ldr.w	r3, [r9], #-8
  40318c:	4599      	cmp	r9, r3
  40318e:	f040 8086 	bne.w	40329e <_malloc_r+0x54e>
  403192:	f010 0f03 	tst.w	r0, #3
  403196:	f100 30ff 	add.w	r0, r0, #4294967295
  40319a:	d1f5      	bne.n	403188 <_malloc_r+0x438>
  40319c:	687b      	ldr	r3, [r7, #4]
  40319e:	ea23 0304 	bic.w	r3, r3, r4
  4031a2:	607b      	str	r3, [r7, #4]
  4031a4:	0064      	lsls	r4, r4, #1
  4031a6:	429c      	cmp	r4, r3
  4031a8:	f63f aec7 	bhi.w	402f3a <_malloc_r+0x1ea>
  4031ac:	2c00      	cmp	r4, #0
  4031ae:	f43f aec4 	beq.w	402f3a <_malloc_r+0x1ea>
  4031b2:	421c      	tst	r4, r3
  4031b4:	4640      	mov	r0, r8
  4031b6:	f47f ae3e 	bne.w	402e36 <_malloc_r+0xe6>
  4031ba:	0064      	lsls	r4, r4, #1
  4031bc:	421c      	tst	r4, r3
  4031be:	f100 0004 	add.w	r0, r0, #4
  4031c2:	d0fa      	beq.n	4031ba <_malloc_r+0x46a>
  4031c4:	e637      	b.n	402e36 <_malloc_r+0xe6>
  4031c6:	468c      	mov	ip, r1
  4031c8:	e78c      	b.n	4030e4 <_malloc_r+0x394>
  4031ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4031ce:	d815      	bhi.n	4031fc <_malloc_r+0x4ac>
  4031d0:	0bf3      	lsrs	r3, r6, #15
  4031d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4031d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4031da:	00c3      	lsls	r3, r0, #3
  4031dc:	e5da      	b.n	402d94 <_malloc_r+0x44>
  4031de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4031e2:	e6ed      	b.n	402fc0 <_malloc_r+0x270>
  4031e4:	687b      	ldr	r3, [r7, #4]
  4031e6:	1092      	asrs	r2, r2, #2
  4031e8:	2101      	movs	r1, #1
  4031ea:	fa01 f202 	lsl.w	r2, r1, r2
  4031ee:	4313      	orrs	r3, r2
  4031f0:	607b      	str	r3, [r7, #4]
  4031f2:	4662      	mov	r2, ip
  4031f4:	e779      	b.n	4030ea <_malloc_r+0x39a>
  4031f6:	2301      	movs	r3, #1
  4031f8:	6053      	str	r3, [r2, #4]
  4031fa:	e729      	b.n	403050 <_malloc_r+0x300>
  4031fc:	f240 5254 	movw	r2, #1364	; 0x554
  403200:	4293      	cmp	r3, r2
  403202:	d822      	bhi.n	40324a <_malloc_r+0x4fa>
  403204:	0cb3      	lsrs	r3, r6, #18
  403206:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40320a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40320e:	00c3      	lsls	r3, r0, #3
  403210:	e5c0      	b.n	402d94 <_malloc_r+0x44>
  403212:	f103 0b10 	add.w	fp, r3, #16
  403216:	e6ae      	b.n	402f76 <_malloc_r+0x226>
  403218:	2a54      	cmp	r2, #84	; 0x54
  40321a:	d829      	bhi.n	403270 <_malloc_r+0x520>
  40321c:	0b1a      	lsrs	r2, r3, #12
  40321e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403222:	00c9      	lsls	r1, r1, #3
  403224:	326e      	adds	r2, #110	; 0x6e
  403226:	e74d      	b.n	4030c4 <_malloc_r+0x374>
  403228:	4b20      	ldr	r3, [pc, #128]	; (4032ac <_malloc_r+0x55c>)
  40322a:	6819      	ldr	r1, [r3, #0]
  40322c:	4459      	add	r1, fp
  40322e:	6019      	str	r1, [r3, #0]
  403230:	e6b2      	b.n	402f98 <_malloc_r+0x248>
  403232:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403236:	2800      	cmp	r0, #0
  403238:	f47f aeae 	bne.w	402f98 <_malloc_r+0x248>
  40323c:	eb08 030b 	add.w	r3, r8, fp
  403240:	68ba      	ldr	r2, [r7, #8]
  403242:	f043 0301 	orr.w	r3, r3, #1
  403246:	6053      	str	r3, [r2, #4]
  403248:	e6ee      	b.n	403028 <_malloc_r+0x2d8>
  40324a:	207f      	movs	r0, #127	; 0x7f
  40324c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403250:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403254:	e59e      	b.n	402d94 <_malloc_r+0x44>
  403256:	f104 0108 	add.w	r1, r4, #8
  40325a:	4628      	mov	r0, r5
  40325c:	9300      	str	r3, [sp, #0]
  40325e:	f7ff fa59 	bl	402714 <_free_r>
  403262:	9b00      	ldr	r3, [sp, #0]
  403264:	6819      	ldr	r1, [r3, #0]
  403266:	e6df      	b.n	403028 <_malloc_r+0x2d8>
  403268:	2001      	movs	r0, #1
  40326a:	f04f 0900 	mov.w	r9, #0
  40326e:	e6bc      	b.n	402fea <_malloc_r+0x29a>
  403270:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403274:	d805      	bhi.n	403282 <_malloc_r+0x532>
  403276:	0bda      	lsrs	r2, r3, #15
  403278:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40327c:	00c9      	lsls	r1, r1, #3
  40327e:	3277      	adds	r2, #119	; 0x77
  403280:	e720      	b.n	4030c4 <_malloc_r+0x374>
  403282:	f240 5154 	movw	r1, #1364	; 0x554
  403286:	428a      	cmp	r2, r1
  403288:	d805      	bhi.n	403296 <_malloc_r+0x546>
  40328a:	0c9a      	lsrs	r2, r3, #18
  40328c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403290:	00c9      	lsls	r1, r1, #3
  403292:	327c      	adds	r2, #124	; 0x7c
  403294:	e716      	b.n	4030c4 <_malloc_r+0x374>
  403296:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40329a:	227e      	movs	r2, #126	; 0x7e
  40329c:	e712      	b.n	4030c4 <_malloc_r+0x374>
  40329e:	687b      	ldr	r3, [r7, #4]
  4032a0:	e780      	b.n	4031a4 <_malloc_r+0x454>
  4032a2:	08f0      	lsrs	r0, r6, #3
  4032a4:	f106 0308 	add.w	r3, r6, #8
  4032a8:	e600      	b.n	402eac <_malloc_r+0x15c>
  4032aa:	bf00      	nop
  4032ac:	20000a78 	.word	0x20000a78

004032b0 <__ascii_mbtowc>:
  4032b0:	b082      	sub	sp, #8
  4032b2:	b149      	cbz	r1, 4032c8 <__ascii_mbtowc+0x18>
  4032b4:	b15a      	cbz	r2, 4032ce <__ascii_mbtowc+0x1e>
  4032b6:	b16b      	cbz	r3, 4032d4 <__ascii_mbtowc+0x24>
  4032b8:	7813      	ldrb	r3, [r2, #0]
  4032ba:	600b      	str	r3, [r1, #0]
  4032bc:	7812      	ldrb	r2, [r2, #0]
  4032be:	1c10      	adds	r0, r2, #0
  4032c0:	bf18      	it	ne
  4032c2:	2001      	movne	r0, #1
  4032c4:	b002      	add	sp, #8
  4032c6:	4770      	bx	lr
  4032c8:	a901      	add	r1, sp, #4
  4032ca:	2a00      	cmp	r2, #0
  4032cc:	d1f3      	bne.n	4032b6 <__ascii_mbtowc+0x6>
  4032ce:	4610      	mov	r0, r2
  4032d0:	b002      	add	sp, #8
  4032d2:	4770      	bx	lr
  4032d4:	f06f 0001 	mvn.w	r0, #1
  4032d8:	e7f4      	b.n	4032c4 <__ascii_mbtowc+0x14>
  4032da:	bf00      	nop
  4032dc:	0000      	movs	r0, r0
	...

004032e0 <memchr>:
  4032e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4032e4:	2a10      	cmp	r2, #16
  4032e6:	db2b      	blt.n	403340 <memchr+0x60>
  4032e8:	f010 0f07 	tst.w	r0, #7
  4032ec:	d008      	beq.n	403300 <memchr+0x20>
  4032ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4032f2:	3a01      	subs	r2, #1
  4032f4:	428b      	cmp	r3, r1
  4032f6:	d02d      	beq.n	403354 <memchr+0x74>
  4032f8:	f010 0f07 	tst.w	r0, #7
  4032fc:	b342      	cbz	r2, 403350 <memchr+0x70>
  4032fe:	d1f6      	bne.n	4032ee <memchr+0xe>
  403300:	b4f0      	push	{r4, r5, r6, r7}
  403302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40330a:	f022 0407 	bic.w	r4, r2, #7
  40330e:	f07f 0700 	mvns.w	r7, #0
  403312:	2300      	movs	r3, #0
  403314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403318:	3c08      	subs	r4, #8
  40331a:	ea85 0501 	eor.w	r5, r5, r1
  40331e:	ea86 0601 	eor.w	r6, r6, r1
  403322:	fa85 f547 	uadd8	r5, r5, r7
  403326:	faa3 f587 	sel	r5, r3, r7
  40332a:	fa86 f647 	uadd8	r6, r6, r7
  40332e:	faa5 f687 	sel	r6, r5, r7
  403332:	b98e      	cbnz	r6, 403358 <memchr+0x78>
  403334:	d1ee      	bne.n	403314 <memchr+0x34>
  403336:	bcf0      	pop	{r4, r5, r6, r7}
  403338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40333c:	f002 0207 	and.w	r2, r2, #7
  403340:	b132      	cbz	r2, 403350 <memchr+0x70>
  403342:	f810 3b01 	ldrb.w	r3, [r0], #1
  403346:	3a01      	subs	r2, #1
  403348:	ea83 0301 	eor.w	r3, r3, r1
  40334c:	b113      	cbz	r3, 403354 <memchr+0x74>
  40334e:	d1f8      	bne.n	403342 <memchr+0x62>
  403350:	2000      	movs	r0, #0
  403352:	4770      	bx	lr
  403354:	3801      	subs	r0, #1
  403356:	4770      	bx	lr
  403358:	2d00      	cmp	r5, #0
  40335a:	bf06      	itte	eq
  40335c:	4635      	moveq	r5, r6
  40335e:	3803      	subeq	r0, #3
  403360:	3807      	subne	r0, #7
  403362:	f015 0f01 	tst.w	r5, #1
  403366:	d107      	bne.n	403378 <memchr+0x98>
  403368:	3001      	adds	r0, #1
  40336a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40336e:	bf02      	ittt	eq
  403370:	3001      	addeq	r0, #1
  403372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403376:	3001      	addeq	r0, #1
  403378:	bcf0      	pop	{r4, r5, r6, r7}
  40337a:	3801      	subs	r0, #1
  40337c:	4770      	bx	lr
  40337e:	bf00      	nop

00403380 <memcpy>:
  403380:	4684      	mov	ip, r0
  403382:	ea41 0300 	orr.w	r3, r1, r0
  403386:	f013 0303 	ands.w	r3, r3, #3
  40338a:	d16d      	bne.n	403468 <memcpy+0xe8>
  40338c:	3a40      	subs	r2, #64	; 0x40
  40338e:	d341      	bcc.n	403414 <memcpy+0x94>
  403390:	f851 3b04 	ldr.w	r3, [r1], #4
  403394:	f840 3b04 	str.w	r3, [r0], #4
  403398:	f851 3b04 	ldr.w	r3, [r1], #4
  40339c:	f840 3b04 	str.w	r3, [r0], #4
  4033a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033a4:	f840 3b04 	str.w	r3, [r0], #4
  4033a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033ac:	f840 3b04 	str.w	r3, [r0], #4
  4033b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033b4:	f840 3b04 	str.w	r3, [r0], #4
  4033b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033bc:	f840 3b04 	str.w	r3, [r0], #4
  4033c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033c4:	f840 3b04 	str.w	r3, [r0], #4
  4033c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033cc:	f840 3b04 	str.w	r3, [r0], #4
  4033d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033d4:	f840 3b04 	str.w	r3, [r0], #4
  4033d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033dc:	f840 3b04 	str.w	r3, [r0], #4
  4033e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033e4:	f840 3b04 	str.w	r3, [r0], #4
  4033e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033ec:	f840 3b04 	str.w	r3, [r0], #4
  4033f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033f4:	f840 3b04 	str.w	r3, [r0], #4
  4033f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033fc:	f840 3b04 	str.w	r3, [r0], #4
  403400:	f851 3b04 	ldr.w	r3, [r1], #4
  403404:	f840 3b04 	str.w	r3, [r0], #4
  403408:	f851 3b04 	ldr.w	r3, [r1], #4
  40340c:	f840 3b04 	str.w	r3, [r0], #4
  403410:	3a40      	subs	r2, #64	; 0x40
  403412:	d2bd      	bcs.n	403390 <memcpy+0x10>
  403414:	3230      	adds	r2, #48	; 0x30
  403416:	d311      	bcc.n	40343c <memcpy+0xbc>
  403418:	f851 3b04 	ldr.w	r3, [r1], #4
  40341c:	f840 3b04 	str.w	r3, [r0], #4
  403420:	f851 3b04 	ldr.w	r3, [r1], #4
  403424:	f840 3b04 	str.w	r3, [r0], #4
  403428:	f851 3b04 	ldr.w	r3, [r1], #4
  40342c:	f840 3b04 	str.w	r3, [r0], #4
  403430:	f851 3b04 	ldr.w	r3, [r1], #4
  403434:	f840 3b04 	str.w	r3, [r0], #4
  403438:	3a10      	subs	r2, #16
  40343a:	d2ed      	bcs.n	403418 <memcpy+0x98>
  40343c:	320c      	adds	r2, #12
  40343e:	d305      	bcc.n	40344c <memcpy+0xcc>
  403440:	f851 3b04 	ldr.w	r3, [r1], #4
  403444:	f840 3b04 	str.w	r3, [r0], #4
  403448:	3a04      	subs	r2, #4
  40344a:	d2f9      	bcs.n	403440 <memcpy+0xc0>
  40344c:	3204      	adds	r2, #4
  40344e:	d008      	beq.n	403462 <memcpy+0xe2>
  403450:	07d2      	lsls	r2, r2, #31
  403452:	bf1c      	itt	ne
  403454:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403458:	f800 3b01 	strbne.w	r3, [r0], #1
  40345c:	d301      	bcc.n	403462 <memcpy+0xe2>
  40345e:	880b      	ldrh	r3, [r1, #0]
  403460:	8003      	strh	r3, [r0, #0]
  403462:	4660      	mov	r0, ip
  403464:	4770      	bx	lr
  403466:	bf00      	nop
  403468:	2a08      	cmp	r2, #8
  40346a:	d313      	bcc.n	403494 <memcpy+0x114>
  40346c:	078b      	lsls	r3, r1, #30
  40346e:	d08d      	beq.n	40338c <memcpy+0xc>
  403470:	f010 0303 	ands.w	r3, r0, #3
  403474:	d08a      	beq.n	40338c <memcpy+0xc>
  403476:	f1c3 0304 	rsb	r3, r3, #4
  40347a:	1ad2      	subs	r2, r2, r3
  40347c:	07db      	lsls	r3, r3, #31
  40347e:	bf1c      	itt	ne
  403480:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403484:	f800 3b01 	strbne.w	r3, [r0], #1
  403488:	d380      	bcc.n	40338c <memcpy+0xc>
  40348a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40348e:	f820 3b02 	strh.w	r3, [r0], #2
  403492:	e77b      	b.n	40338c <memcpy+0xc>
  403494:	3a04      	subs	r2, #4
  403496:	d3d9      	bcc.n	40344c <memcpy+0xcc>
  403498:	3a01      	subs	r2, #1
  40349a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40349e:	f800 3b01 	strb.w	r3, [r0], #1
  4034a2:	d2f9      	bcs.n	403498 <memcpy+0x118>
  4034a4:	780b      	ldrb	r3, [r1, #0]
  4034a6:	7003      	strb	r3, [r0, #0]
  4034a8:	784b      	ldrb	r3, [r1, #1]
  4034aa:	7043      	strb	r3, [r0, #1]
  4034ac:	788b      	ldrb	r3, [r1, #2]
  4034ae:	7083      	strb	r3, [r0, #2]
  4034b0:	4660      	mov	r0, ip
  4034b2:	4770      	bx	lr

004034b4 <memmove>:
  4034b4:	4288      	cmp	r0, r1
  4034b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034b8:	d90d      	bls.n	4034d6 <memmove+0x22>
  4034ba:	188b      	adds	r3, r1, r2
  4034bc:	4298      	cmp	r0, r3
  4034be:	d20a      	bcs.n	4034d6 <memmove+0x22>
  4034c0:	1884      	adds	r4, r0, r2
  4034c2:	2a00      	cmp	r2, #0
  4034c4:	d051      	beq.n	40356a <memmove+0xb6>
  4034c6:	4622      	mov	r2, r4
  4034c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4034cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4034d0:	4299      	cmp	r1, r3
  4034d2:	d1f9      	bne.n	4034c8 <memmove+0x14>
  4034d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4034d6:	2a0f      	cmp	r2, #15
  4034d8:	d948      	bls.n	40356c <memmove+0xb8>
  4034da:	ea41 0300 	orr.w	r3, r1, r0
  4034de:	079b      	lsls	r3, r3, #30
  4034e0:	d146      	bne.n	403570 <memmove+0xbc>
  4034e2:	f100 0410 	add.w	r4, r0, #16
  4034e6:	f101 0310 	add.w	r3, r1, #16
  4034ea:	4615      	mov	r5, r2
  4034ec:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4034f0:	f844 6c10 	str.w	r6, [r4, #-16]
  4034f4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4034f8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4034fc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403500:	f844 6c08 	str.w	r6, [r4, #-8]
  403504:	3d10      	subs	r5, #16
  403506:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40350a:	f844 6c04 	str.w	r6, [r4, #-4]
  40350e:	2d0f      	cmp	r5, #15
  403510:	f103 0310 	add.w	r3, r3, #16
  403514:	f104 0410 	add.w	r4, r4, #16
  403518:	d8e8      	bhi.n	4034ec <memmove+0x38>
  40351a:	f1a2 0310 	sub.w	r3, r2, #16
  40351e:	f023 030f 	bic.w	r3, r3, #15
  403522:	f002 0e0f 	and.w	lr, r2, #15
  403526:	3310      	adds	r3, #16
  403528:	f1be 0f03 	cmp.w	lr, #3
  40352c:	4419      	add	r1, r3
  40352e:	4403      	add	r3, r0
  403530:	d921      	bls.n	403576 <memmove+0xc2>
  403532:	1f1e      	subs	r6, r3, #4
  403534:	460d      	mov	r5, r1
  403536:	4674      	mov	r4, lr
  403538:	3c04      	subs	r4, #4
  40353a:	f855 7b04 	ldr.w	r7, [r5], #4
  40353e:	f846 7f04 	str.w	r7, [r6, #4]!
  403542:	2c03      	cmp	r4, #3
  403544:	d8f8      	bhi.n	403538 <memmove+0x84>
  403546:	f1ae 0404 	sub.w	r4, lr, #4
  40354a:	f024 0403 	bic.w	r4, r4, #3
  40354e:	3404      	adds	r4, #4
  403550:	4421      	add	r1, r4
  403552:	4423      	add	r3, r4
  403554:	f002 0203 	and.w	r2, r2, #3
  403558:	b162      	cbz	r2, 403574 <memmove+0xc0>
  40355a:	3b01      	subs	r3, #1
  40355c:	440a      	add	r2, r1
  40355e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403562:	f803 4f01 	strb.w	r4, [r3, #1]!
  403566:	428a      	cmp	r2, r1
  403568:	d1f9      	bne.n	40355e <memmove+0xaa>
  40356a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40356c:	4603      	mov	r3, r0
  40356e:	e7f3      	b.n	403558 <memmove+0xa4>
  403570:	4603      	mov	r3, r0
  403572:	e7f2      	b.n	40355a <memmove+0xa6>
  403574:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403576:	4672      	mov	r2, lr
  403578:	e7ee      	b.n	403558 <memmove+0xa4>
  40357a:	bf00      	nop

0040357c <__malloc_lock>:
  40357c:	4801      	ldr	r0, [pc, #4]	; (403584 <__malloc_lock+0x8>)
  40357e:	f7ff bb63 	b.w	402c48 <__retarget_lock_acquire_recursive>
  403582:	bf00      	nop
  403584:	20008dc8 	.word	0x20008dc8

00403588 <__malloc_unlock>:
  403588:	4801      	ldr	r0, [pc, #4]	; (403590 <__malloc_unlock+0x8>)
  40358a:	f7ff bb5f 	b.w	402c4c <__retarget_lock_release_recursive>
  40358e:	bf00      	nop
  403590:	20008dc8 	.word	0x20008dc8

00403594 <_realloc_r>:
  403594:	2900      	cmp	r1, #0
  403596:	f000 8095 	beq.w	4036c4 <_realloc_r+0x130>
  40359a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40359e:	460d      	mov	r5, r1
  4035a0:	4616      	mov	r6, r2
  4035a2:	b083      	sub	sp, #12
  4035a4:	4680      	mov	r8, r0
  4035a6:	f106 070b 	add.w	r7, r6, #11
  4035aa:	f7ff ffe7 	bl	40357c <__malloc_lock>
  4035ae:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4035b2:	2f16      	cmp	r7, #22
  4035b4:	f02e 0403 	bic.w	r4, lr, #3
  4035b8:	f1a5 0908 	sub.w	r9, r5, #8
  4035bc:	d83c      	bhi.n	403638 <_realloc_r+0xa4>
  4035be:	2210      	movs	r2, #16
  4035c0:	4617      	mov	r7, r2
  4035c2:	42be      	cmp	r6, r7
  4035c4:	d83d      	bhi.n	403642 <_realloc_r+0xae>
  4035c6:	4294      	cmp	r4, r2
  4035c8:	da43      	bge.n	403652 <_realloc_r+0xbe>
  4035ca:	4bc4      	ldr	r3, [pc, #784]	; (4038dc <_realloc_r+0x348>)
  4035cc:	6899      	ldr	r1, [r3, #8]
  4035ce:	eb09 0004 	add.w	r0, r9, r4
  4035d2:	4288      	cmp	r0, r1
  4035d4:	f000 80b4 	beq.w	403740 <_realloc_r+0x1ac>
  4035d8:	6843      	ldr	r3, [r0, #4]
  4035da:	f023 0101 	bic.w	r1, r3, #1
  4035de:	4401      	add	r1, r0
  4035e0:	6849      	ldr	r1, [r1, #4]
  4035e2:	07c9      	lsls	r1, r1, #31
  4035e4:	d54c      	bpl.n	403680 <_realloc_r+0xec>
  4035e6:	f01e 0f01 	tst.w	lr, #1
  4035ea:	f000 809b 	beq.w	403724 <_realloc_r+0x190>
  4035ee:	4631      	mov	r1, r6
  4035f0:	4640      	mov	r0, r8
  4035f2:	f7ff fbad 	bl	402d50 <_malloc_r>
  4035f6:	4606      	mov	r6, r0
  4035f8:	2800      	cmp	r0, #0
  4035fa:	d03a      	beq.n	403672 <_realloc_r+0xde>
  4035fc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403600:	f023 0301 	bic.w	r3, r3, #1
  403604:	444b      	add	r3, r9
  403606:	f1a0 0208 	sub.w	r2, r0, #8
  40360a:	429a      	cmp	r2, r3
  40360c:	f000 8121 	beq.w	403852 <_realloc_r+0x2be>
  403610:	1f22      	subs	r2, r4, #4
  403612:	2a24      	cmp	r2, #36	; 0x24
  403614:	f200 8107 	bhi.w	403826 <_realloc_r+0x292>
  403618:	2a13      	cmp	r2, #19
  40361a:	f200 80db 	bhi.w	4037d4 <_realloc_r+0x240>
  40361e:	4603      	mov	r3, r0
  403620:	462a      	mov	r2, r5
  403622:	6811      	ldr	r1, [r2, #0]
  403624:	6019      	str	r1, [r3, #0]
  403626:	6851      	ldr	r1, [r2, #4]
  403628:	6059      	str	r1, [r3, #4]
  40362a:	6892      	ldr	r2, [r2, #8]
  40362c:	609a      	str	r2, [r3, #8]
  40362e:	4629      	mov	r1, r5
  403630:	4640      	mov	r0, r8
  403632:	f7ff f86f 	bl	402714 <_free_r>
  403636:	e01c      	b.n	403672 <_realloc_r+0xde>
  403638:	f027 0707 	bic.w	r7, r7, #7
  40363c:	2f00      	cmp	r7, #0
  40363e:	463a      	mov	r2, r7
  403640:	dabf      	bge.n	4035c2 <_realloc_r+0x2e>
  403642:	2600      	movs	r6, #0
  403644:	230c      	movs	r3, #12
  403646:	4630      	mov	r0, r6
  403648:	f8c8 3000 	str.w	r3, [r8]
  40364c:	b003      	add	sp, #12
  40364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403652:	462e      	mov	r6, r5
  403654:	1be3      	subs	r3, r4, r7
  403656:	2b0f      	cmp	r3, #15
  403658:	d81e      	bhi.n	403698 <_realloc_r+0x104>
  40365a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40365e:	f003 0301 	and.w	r3, r3, #1
  403662:	4323      	orrs	r3, r4
  403664:	444c      	add	r4, r9
  403666:	f8c9 3004 	str.w	r3, [r9, #4]
  40366a:	6863      	ldr	r3, [r4, #4]
  40366c:	f043 0301 	orr.w	r3, r3, #1
  403670:	6063      	str	r3, [r4, #4]
  403672:	4640      	mov	r0, r8
  403674:	f7ff ff88 	bl	403588 <__malloc_unlock>
  403678:	4630      	mov	r0, r6
  40367a:	b003      	add	sp, #12
  40367c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403680:	f023 0303 	bic.w	r3, r3, #3
  403684:	18e1      	adds	r1, r4, r3
  403686:	4291      	cmp	r1, r2
  403688:	db1f      	blt.n	4036ca <_realloc_r+0x136>
  40368a:	68c3      	ldr	r3, [r0, #12]
  40368c:	6882      	ldr	r2, [r0, #8]
  40368e:	462e      	mov	r6, r5
  403690:	60d3      	str	r3, [r2, #12]
  403692:	460c      	mov	r4, r1
  403694:	609a      	str	r2, [r3, #8]
  403696:	e7dd      	b.n	403654 <_realloc_r+0xc0>
  403698:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40369c:	eb09 0107 	add.w	r1, r9, r7
  4036a0:	f002 0201 	and.w	r2, r2, #1
  4036a4:	444c      	add	r4, r9
  4036a6:	f043 0301 	orr.w	r3, r3, #1
  4036aa:	4317      	orrs	r7, r2
  4036ac:	f8c9 7004 	str.w	r7, [r9, #4]
  4036b0:	604b      	str	r3, [r1, #4]
  4036b2:	6863      	ldr	r3, [r4, #4]
  4036b4:	f043 0301 	orr.w	r3, r3, #1
  4036b8:	3108      	adds	r1, #8
  4036ba:	6063      	str	r3, [r4, #4]
  4036bc:	4640      	mov	r0, r8
  4036be:	f7ff f829 	bl	402714 <_free_r>
  4036c2:	e7d6      	b.n	403672 <_realloc_r+0xde>
  4036c4:	4611      	mov	r1, r2
  4036c6:	f7ff bb43 	b.w	402d50 <_malloc_r>
  4036ca:	f01e 0f01 	tst.w	lr, #1
  4036ce:	d18e      	bne.n	4035ee <_realloc_r+0x5a>
  4036d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4036d4:	eba9 0a01 	sub.w	sl, r9, r1
  4036d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4036dc:	f021 0103 	bic.w	r1, r1, #3
  4036e0:	440b      	add	r3, r1
  4036e2:	4423      	add	r3, r4
  4036e4:	4293      	cmp	r3, r2
  4036e6:	db25      	blt.n	403734 <_realloc_r+0x1a0>
  4036e8:	68c2      	ldr	r2, [r0, #12]
  4036ea:	6881      	ldr	r1, [r0, #8]
  4036ec:	4656      	mov	r6, sl
  4036ee:	60ca      	str	r2, [r1, #12]
  4036f0:	6091      	str	r1, [r2, #8]
  4036f2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4036f6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4036fa:	1f22      	subs	r2, r4, #4
  4036fc:	2a24      	cmp	r2, #36	; 0x24
  4036fe:	60c1      	str	r1, [r0, #12]
  403700:	6088      	str	r0, [r1, #8]
  403702:	f200 8094 	bhi.w	40382e <_realloc_r+0x29a>
  403706:	2a13      	cmp	r2, #19
  403708:	d96f      	bls.n	4037ea <_realloc_r+0x256>
  40370a:	6829      	ldr	r1, [r5, #0]
  40370c:	f8ca 1008 	str.w	r1, [sl, #8]
  403710:	6869      	ldr	r1, [r5, #4]
  403712:	f8ca 100c 	str.w	r1, [sl, #12]
  403716:	2a1b      	cmp	r2, #27
  403718:	f200 80a2 	bhi.w	403860 <_realloc_r+0x2cc>
  40371c:	3508      	adds	r5, #8
  40371e:	f10a 0210 	add.w	r2, sl, #16
  403722:	e063      	b.n	4037ec <_realloc_r+0x258>
  403724:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403728:	eba9 0a03 	sub.w	sl, r9, r3
  40372c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403730:	f021 0103 	bic.w	r1, r1, #3
  403734:	1863      	adds	r3, r4, r1
  403736:	4293      	cmp	r3, r2
  403738:	f6ff af59 	blt.w	4035ee <_realloc_r+0x5a>
  40373c:	4656      	mov	r6, sl
  40373e:	e7d8      	b.n	4036f2 <_realloc_r+0x15e>
  403740:	6841      	ldr	r1, [r0, #4]
  403742:	f021 0b03 	bic.w	fp, r1, #3
  403746:	44a3      	add	fp, r4
  403748:	f107 0010 	add.w	r0, r7, #16
  40374c:	4583      	cmp	fp, r0
  40374e:	da56      	bge.n	4037fe <_realloc_r+0x26a>
  403750:	f01e 0f01 	tst.w	lr, #1
  403754:	f47f af4b 	bne.w	4035ee <_realloc_r+0x5a>
  403758:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40375c:	eba9 0a01 	sub.w	sl, r9, r1
  403760:	f8da 1004 	ldr.w	r1, [sl, #4]
  403764:	f021 0103 	bic.w	r1, r1, #3
  403768:	448b      	add	fp, r1
  40376a:	4558      	cmp	r0, fp
  40376c:	dce2      	bgt.n	403734 <_realloc_r+0x1a0>
  40376e:	4656      	mov	r6, sl
  403770:	f8da 100c 	ldr.w	r1, [sl, #12]
  403774:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403778:	1f22      	subs	r2, r4, #4
  40377a:	2a24      	cmp	r2, #36	; 0x24
  40377c:	60c1      	str	r1, [r0, #12]
  40377e:	6088      	str	r0, [r1, #8]
  403780:	f200 808f 	bhi.w	4038a2 <_realloc_r+0x30e>
  403784:	2a13      	cmp	r2, #19
  403786:	f240 808a 	bls.w	40389e <_realloc_r+0x30a>
  40378a:	6829      	ldr	r1, [r5, #0]
  40378c:	f8ca 1008 	str.w	r1, [sl, #8]
  403790:	6869      	ldr	r1, [r5, #4]
  403792:	f8ca 100c 	str.w	r1, [sl, #12]
  403796:	2a1b      	cmp	r2, #27
  403798:	f200 808a 	bhi.w	4038b0 <_realloc_r+0x31c>
  40379c:	3508      	adds	r5, #8
  40379e:	f10a 0210 	add.w	r2, sl, #16
  4037a2:	6829      	ldr	r1, [r5, #0]
  4037a4:	6011      	str	r1, [r2, #0]
  4037a6:	6869      	ldr	r1, [r5, #4]
  4037a8:	6051      	str	r1, [r2, #4]
  4037aa:	68a9      	ldr	r1, [r5, #8]
  4037ac:	6091      	str	r1, [r2, #8]
  4037ae:	eb0a 0107 	add.w	r1, sl, r7
  4037b2:	ebab 0207 	sub.w	r2, fp, r7
  4037b6:	f042 0201 	orr.w	r2, r2, #1
  4037ba:	6099      	str	r1, [r3, #8]
  4037bc:	604a      	str	r2, [r1, #4]
  4037be:	f8da 3004 	ldr.w	r3, [sl, #4]
  4037c2:	f003 0301 	and.w	r3, r3, #1
  4037c6:	431f      	orrs	r7, r3
  4037c8:	4640      	mov	r0, r8
  4037ca:	f8ca 7004 	str.w	r7, [sl, #4]
  4037ce:	f7ff fedb 	bl	403588 <__malloc_unlock>
  4037d2:	e751      	b.n	403678 <_realloc_r+0xe4>
  4037d4:	682b      	ldr	r3, [r5, #0]
  4037d6:	6003      	str	r3, [r0, #0]
  4037d8:	686b      	ldr	r3, [r5, #4]
  4037da:	6043      	str	r3, [r0, #4]
  4037dc:	2a1b      	cmp	r2, #27
  4037de:	d82d      	bhi.n	40383c <_realloc_r+0x2a8>
  4037e0:	f100 0308 	add.w	r3, r0, #8
  4037e4:	f105 0208 	add.w	r2, r5, #8
  4037e8:	e71b      	b.n	403622 <_realloc_r+0x8e>
  4037ea:	4632      	mov	r2, r6
  4037ec:	6829      	ldr	r1, [r5, #0]
  4037ee:	6011      	str	r1, [r2, #0]
  4037f0:	6869      	ldr	r1, [r5, #4]
  4037f2:	6051      	str	r1, [r2, #4]
  4037f4:	68a9      	ldr	r1, [r5, #8]
  4037f6:	6091      	str	r1, [r2, #8]
  4037f8:	461c      	mov	r4, r3
  4037fa:	46d1      	mov	r9, sl
  4037fc:	e72a      	b.n	403654 <_realloc_r+0xc0>
  4037fe:	eb09 0107 	add.w	r1, r9, r7
  403802:	ebab 0b07 	sub.w	fp, fp, r7
  403806:	f04b 0201 	orr.w	r2, fp, #1
  40380a:	6099      	str	r1, [r3, #8]
  40380c:	604a      	str	r2, [r1, #4]
  40380e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403812:	f003 0301 	and.w	r3, r3, #1
  403816:	431f      	orrs	r7, r3
  403818:	4640      	mov	r0, r8
  40381a:	f845 7c04 	str.w	r7, [r5, #-4]
  40381e:	f7ff feb3 	bl	403588 <__malloc_unlock>
  403822:	462e      	mov	r6, r5
  403824:	e728      	b.n	403678 <_realloc_r+0xe4>
  403826:	4629      	mov	r1, r5
  403828:	f7ff fe44 	bl	4034b4 <memmove>
  40382c:	e6ff      	b.n	40362e <_realloc_r+0x9a>
  40382e:	4629      	mov	r1, r5
  403830:	4630      	mov	r0, r6
  403832:	461c      	mov	r4, r3
  403834:	46d1      	mov	r9, sl
  403836:	f7ff fe3d 	bl	4034b4 <memmove>
  40383a:	e70b      	b.n	403654 <_realloc_r+0xc0>
  40383c:	68ab      	ldr	r3, [r5, #8]
  40383e:	6083      	str	r3, [r0, #8]
  403840:	68eb      	ldr	r3, [r5, #12]
  403842:	60c3      	str	r3, [r0, #12]
  403844:	2a24      	cmp	r2, #36	; 0x24
  403846:	d017      	beq.n	403878 <_realloc_r+0x2e4>
  403848:	f100 0310 	add.w	r3, r0, #16
  40384c:	f105 0210 	add.w	r2, r5, #16
  403850:	e6e7      	b.n	403622 <_realloc_r+0x8e>
  403852:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403856:	f023 0303 	bic.w	r3, r3, #3
  40385a:	441c      	add	r4, r3
  40385c:	462e      	mov	r6, r5
  40385e:	e6f9      	b.n	403654 <_realloc_r+0xc0>
  403860:	68a9      	ldr	r1, [r5, #8]
  403862:	f8ca 1010 	str.w	r1, [sl, #16]
  403866:	68e9      	ldr	r1, [r5, #12]
  403868:	f8ca 1014 	str.w	r1, [sl, #20]
  40386c:	2a24      	cmp	r2, #36	; 0x24
  40386e:	d00c      	beq.n	40388a <_realloc_r+0x2f6>
  403870:	3510      	adds	r5, #16
  403872:	f10a 0218 	add.w	r2, sl, #24
  403876:	e7b9      	b.n	4037ec <_realloc_r+0x258>
  403878:	692b      	ldr	r3, [r5, #16]
  40387a:	6103      	str	r3, [r0, #16]
  40387c:	696b      	ldr	r3, [r5, #20]
  40387e:	6143      	str	r3, [r0, #20]
  403880:	f105 0218 	add.w	r2, r5, #24
  403884:	f100 0318 	add.w	r3, r0, #24
  403888:	e6cb      	b.n	403622 <_realloc_r+0x8e>
  40388a:	692a      	ldr	r2, [r5, #16]
  40388c:	f8ca 2018 	str.w	r2, [sl, #24]
  403890:	696a      	ldr	r2, [r5, #20]
  403892:	f8ca 201c 	str.w	r2, [sl, #28]
  403896:	3518      	adds	r5, #24
  403898:	f10a 0220 	add.w	r2, sl, #32
  40389c:	e7a6      	b.n	4037ec <_realloc_r+0x258>
  40389e:	4632      	mov	r2, r6
  4038a0:	e77f      	b.n	4037a2 <_realloc_r+0x20e>
  4038a2:	4629      	mov	r1, r5
  4038a4:	4630      	mov	r0, r6
  4038a6:	9301      	str	r3, [sp, #4]
  4038a8:	f7ff fe04 	bl	4034b4 <memmove>
  4038ac:	9b01      	ldr	r3, [sp, #4]
  4038ae:	e77e      	b.n	4037ae <_realloc_r+0x21a>
  4038b0:	68a9      	ldr	r1, [r5, #8]
  4038b2:	f8ca 1010 	str.w	r1, [sl, #16]
  4038b6:	68e9      	ldr	r1, [r5, #12]
  4038b8:	f8ca 1014 	str.w	r1, [sl, #20]
  4038bc:	2a24      	cmp	r2, #36	; 0x24
  4038be:	d003      	beq.n	4038c8 <_realloc_r+0x334>
  4038c0:	3510      	adds	r5, #16
  4038c2:	f10a 0218 	add.w	r2, sl, #24
  4038c6:	e76c      	b.n	4037a2 <_realloc_r+0x20e>
  4038c8:	692a      	ldr	r2, [r5, #16]
  4038ca:	f8ca 2018 	str.w	r2, [sl, #24]
  4038ce:	696a      	ldr	r2, [r5, #20]
  4038d0:	f8ca 201c 	str.w	r2, [sl, #28]
  4038d4:	3518      	adds	r5, #24
  4038d6:	f10a 0220 	add.w	r2, sl, #32
  4038da:	e762      	b.n	4037a2 <_realloc_r+0x20e>
  4038dc:	200005a8 	.word	0x200005a8

004038e0 <_sbrk_r>:
  4038e0:	b538      	push	{r3, r4, r5, lr}
  4038e2:	4c07      	ldr	r4, [pc, #28]	; (403900 <_sbrk_r+0x20>)
  4038e4:	2300      	movs	r3, #0
  4038e6:	4605      	mov	r5, r0
  4038e8:	4608      	mov	r0, r1
  4038ea:	6023      	str	r3, [r4, #0]
  4038ec:	f7fd f93c 	bl	400b68 <_sbrk>
  4038f0:	1c43      	adds	r3, r0, #1
  4038f2:	d000      	beq.n	4038f6 <_sbrk_r+0x16>
  4038f4:	bd38      	pop	{r3, r4, r5, pc}
  4038f6:	6823      	ldr	r3, [r4, #0]
  4038f8:	2b00      	cmp	r3, #0
  4038fa:	d0fb      	beq.n	4038f4 <_sbrk_r+0x14>
  4038fc:	602b      	str	r3, [r5, #0]
  4038fe:	bd38      	pop	{r3, r4, r5, pc}
  403900:	20008ddc 	.word	0x20008ddc

00403904 <__sread>:
  403904:	b510      	push	{r4, lr}
  403906:	460c      	mov	r4, r1
  403908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40390c:	f000 f9f6 	bl	403cfc <_read_r>
  403910:	2800      	cmp	r0, #0
  403912:	db03      	blt.n	40391c <__sread+0x18>
  403914:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403916:	4403      	add	r3, r0
  403918:	6523      	str	r3, [r4, #80]	; 0x50
  40391a:	bd10      	pop	{r4, pc}
  40391c:	89a3      	ldrh	r3, [r4, #12]
  40391e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403922:	81a3      	strh	r3, [r4, #12]
  403924:	bd10      	pop	{r4, pc}
  403926:	bf00      	nop

00403928 <__swrite>:
  403928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40392c:	4616      	mov	r6, r2
  40392e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403932:	461f      	mov	r7, r3
  403934:	05d3      	lsls	r3, r2, #23
  403936:	460c      	mov	r4, r1
  403938:	4605      	mov	r5, r0
  40393a:	d507      	bpl.n	40394c <__swrite+0x24>
  40393c:	2200      	movs	r2, #0
  40393e:	2302      	movs	r3, #2
  403940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403944:	f000 f9c4 	bl	403cd0 <_lseek_r>
  403948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40394c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403950:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403954:	81a2      	strh	r2, [r4, #12]
  403956:	463b      	mov	r3, r7
  403958:	4632      	mov	r2, r6
  40395a:	4628      	mov	r0, r5
  40395c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403960:	f000 b8a4 	b.w	403aac <_write_r>

00403964 <__sseek>:
  403964:	b510      	push	{r4, lr}
  403966:	460c      	mov	r4, r1
  403968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40396c:	f000 f9b0 	bl	403cd0 <_lseek_r>
  403970:	89a3      	ldrh	r3, [r4, #12]
  403972:	1c42      	adds	r2, r0, #1
  403974:	bf0e      	itee	eq
  403976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40397a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40397e:	6520      	strne	r0, [r4, #80]	; 0x50
  403980:	81a3      	strh	r3, [r4, #12]
  403982:	bd10      	pop	{r4, pc}

00403984 <__sclose>:
  403984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403988:	f000 b908 	b.w	403b9c <_close_r>

0040398c <__swbuf_r>:
  40398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40398e:	460d      	mov	r5, r1
  403990:	4614      	mov	r4, r2
  403992:	4606      	mov	r6, r0
  403994:	b110      	cbz	r0, 40399c <__swbuf_r+0x10>
  403996:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403998:	2b00      	cmp	r3, #0
  40399a:	d04b      	beq.n	403a34 <__swbuf_r+0xa8>
  40399c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4039a0:	69a3      	ldr	r3, [r4, #24]
  4039a2:	60a3      	str	r3, [r4, #8]
  4039a4:	b291      	uxth	r1, r2
  4039a6:	0708      	lsls	r0, r1, #28
  4039a8:	d539      	bpl.n	403a1e <__swbuf_r+0x92>
  4039aa:	6923      	ldr	r3, [r4, #16]
  4039ac:	2b00      	cmp	r3, #0
  4039ae:	d036      	beq.n	403a1e <__swbuf_r+0x92>
  4039b0:	b2ed      	uxtb	r5, r5
  4039b2:	0489      	lsls	r1, r1, #18
  4039b4:	462f      	mov	r7, r5
  4039b6:	d515      	bpl.n	4039e4 <__swbuf_r+0x58>
  4039b8:	6822      	ldr	r2, [r4, #0]
  4039ba:	6961      	ldr	r1, [r4, #20]
  4039bc:	1ad3      	subs	r3, r2, r3
  4039be:	428b      	cmp	r3, r1
  4039c0:	da1c      	bge.n	4039fc <__swbuf_r+0x70>
  4039c2:	3301      	adds	r3, #1
  4039c4:	68a1      	ldr	r1, [r4, #8]
  4039c6:	1c50      	adds	r0, r2, #1
  4039c8:	3901      	subs	r1, #1
  4039ca:	60a1      	str	r1, [r4, #8]
  4039cc:	6020      	str	r0, [r4, #0]
  4039ce:	7015      	strb	r5, [r2, #0]
  4039d0:	6962      	ldr	r2, [r4, #20]
  4039d2:	429a      	cmp	r2, r3
  4039d4:	d01a      	beq.n	403a0c <__swbuf_r+0x80>
  4039d6:	89a3      	ldrh	r3, [r4, #12]
  4039d8:	07db      	lsls	r3, r3, #31
  4039da:	d501      	bpl.n	4039e0 <__swbuf_r+0x54>
  4039dc:	2d0a      	cmp	r5, #10
  4039de:	d015      	beq.n	403a0c <__swbuf_r+0x80>
  4039e0:	4638      	mov	r0, r7
  4039e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039e4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4039e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4039ea:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4039ee:	81a2      	strh	r2, [r4, #12]
  4039f0:	6822      	ldr	r2, [r4, #0]
  4039f2:	6661      	str	r1, [r4, #100]	; 0x64
  4039f4:	6961      	ldr	r1, [r4, #20]
  4039f6:	1ad3      	subs	r3, r2, r3
  4039f8:	428b      	cmp	r3, r1
  4039fa:	dbe2      	blt.n	4039c2 <__swbuf_r+0x36>
  4039fc:	4621      	mov	r1, r4
  4039fe:	4630      	mov	r0, r6
  403a00:	f7fe fd0a 	bl	402418 <_fflush_r>
  403a04:	b940      	cbnz	r0, 403a18 <__swbuf_r+0x8c>
  403a06:	6822      	ldr	r2, [r4, #0]
  403a08:	2301      	movs	r3, #1
  403a0a:	e7db      	b.n	4039c4 <__swbuf_r+0x38>
  403a0c:	4621      	mov	r1, r4
  403a0e:	4630      	mov	r0, r6
  403a10:	f7fe fd02 	bl	402418 <_fflush_r>
  403a14:	2800      	cmp	r0, #0
  403a16:	d0e3      	beq.n	4039e0 <__swbuf_r+0x54>
  403a18:	f04f 37ff 	mov.w	r7, #4294967295
  403a1c:	e7e0      	b.n	4039e0 <__swbuf_r+0x54>
  403a1e:	4621      	mov	r1, r4
  403a20:	4630      	mov	r0, r6
  403a22:	f7fe fbe5 	bl	4021f0 <__swsetup_r>
  403a26:	2800      	cmp	r0, #0
  403a28:	d1f6      	bne.n	403a18 <__swbuf_r+0x8c>
  403a2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a2e:	6923      	ldr	r3, [r4, #16]
  403a30:	b291      	uxth	r1, r2
  403a32:	e7bd      	b.n	4039b0 <__swbuf_r+0x24>
  403a34:	f7fe fd48 	bl	4024c8 <__sinit>
  403a38:	e7b0      	b.n	40399c <__swbuf_r+0x10>
  403a3a:	bf00      	nop

00403a3c <_wcrtomb_r>:
  403a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a3e:	4606      	mov	r6, r0
  403a40:	b085      	sub	sp, #20
  403a42:	461f      	mov	r7, r3
  403a44:	b189      	cbz	r1, 403a6a <_wcrtomb_r+0x2e>
  403a46:	4c10      	ldr	r4, [pc, #64]	; (403a88 <_wcrtomb_r+0x4c>)
  403a48:	4d10      	ldr	r5, [pc, #64]	; (403a8c <_wcrtomb_r+0x50>)
  403a4a:	6824      	ldr	r4, [r4, #0]
  403a4c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403a4e:	2c00      	cmp	r4, #0
  403a50:	bf08      	it	eq
  403a52:	462c      	moveq	r4, r5
  403a54:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403a58:	47a0      	blx	r4
  403a5a:	1c43      	adds	r3, r0, #1
  403a5c:	d103      	bne.n	403a66 <_wcrtomb_r+0x2a>
  403a5e:	2200      	movs	r2, #0
  403a60:	238a      	movs	r3, #138	; 0x8a
  403a62:	603a      	str	r2, [r7, #0]
  403a64:	6033      	str	r3, [r6, #0]
  403a66:	b005      	add	sp, #20
  403a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403a6a:	460c      	mov	r4, r1
  403a6c:	4906      	ldr	r1, [pc, #24]	; (403a88 <_wcrtomb_r+0x4c>)
  403a6e:	4a07      	ldr	r2, [pc, #28]	; (403a8c <_wcrtomb_r+0x50>)
  403a70:	6809      	ldr	r1, [r1, #0]
  403a72:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403a74:	2900      	cmp	r1, #0
  403a76:	bf08      	it	eq
  403a78:	4611      	moveq	r1, r2
  403a7a:	4622      	mov	r2, r4
  403a7c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403a80:	a901      	add	r1, sp, #4
  403a82:	47a0      	blx	r4
  403a84:	e7e9      	b.n	403a5a <_wcrtomb_r+0x1e>
  403a86:	bf00      	nop
  403a88:	20000008 	.word	0x20000008
  403a8c:	2000043c 	.word	0x2000043c

00403a90 <__ascii_wctomb>:
  403a90:	b121      	cbz	r1, 403a9c <__ascii_wctomb+0xc>
  403a92:	2aff      	cmp	r2, #255	; 0xff
  403a94:	d804      	bhi.n	403aa0 <__ascii_wctomb+0x10>
  403a96:	700a      	strb	r2, [r1, #0]
  403a98:	2001      	movs	r0, #1
  403a9a:	4770      	bx	lr
  403a9c:	4608      	mov	r0, r1
  403a9e:	4770      	bx	lr
  403aa0:	238a      	movs	r3, #138	; 0x8a
  403aa2:	6003      	str	r3, [r0, #0]
  403aa4:	f04f 30ff 	mov.w	r0, #4294967295
  403aa8:	4770      	bx	lr
  403aaa:	bf00      	nop

00403aac <_write_r>:
  403aac:	b570      	push	{r4, r5, r6, lr}
  403aae:	460d      	mov	r5, r1
  403ab0:	4c08      	ldr	r4, [pc, #32]	; (403ad4 <_write_r+0x28>)
  403ab2:	4611      	mov	r1, r2
  403ab4:	4606      	mov	r6, r0
  403ab6:	461a      	mov	r2, r3
  403ab8:	4628      	mov	r0, r5
  403aba:	2300      	movs	r3, #0
  403abc:	6023      	str	r3, [r4, #0]
  403abe:	f7fc fbf3 	bl	4002a8 <_write>
  403ac2:	1c43      	adds	r3, r0, #1
  403ac4:	d000      	beq.n	403ac8 <_write_r+0x1c>
  403ac6:	bd70      	pop	{r4, r5, r6, pc}
  403ac8:	6823      	ldr	r3, [r4, #0]
  403aca:	2b00      	cmp	r3, #0
  403acc:	d0fb      	beq.n	403ac6 <_write_r+0x1a>
  403ace:	6033      	str	r3, [r6, #0]
  403ad0:	bd70      	pop	{r4, r5, r6, pc}
  403ad2:	bf00      	nop
  403ad4:	20008ddc 	.word	0x20008ddc

00403ad8 <__register_exitproc>:
  403ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403adc:	4d2c      	ldr	r5, [pc, #176]	; (403b90 <__register_exitproc+0xb8>)
  403ade:	4606      	mov	r6, r0
  403ae0:	6828      	ldr	r0, [r5, #0]
  403ae2:	4698      	mov	r8, r3
  403ae4:	460f      	mov	r7, r1
  403ae6:	4691      	mov	r9, r2
  403ae8:	f7ff f8ae 	bl	402c48 <__retarget_lock_acquire_recursive>
  403aec:	4b29      	ldr	r3, [pc, #164]	; (403b94 <__register_exitproc+0xbc>)
  403aee:	681c      	ldr	r4, [r3, #0]
  403af0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403af4:	2b00      	cmp	r3, #0
  403af6:	d03e      	beq.n	403b76 <__register_exitproc+0x9e>
  403af8:	685a      	ldr	r2, [r3, #4]
  403afa:	2a1f      	cmp	r2, #31
  403afc:	dc1c      	bgt.n	403b38 <__register_exitproc+0x60>
  403afe:	f102 0e01 	add.w	lr, r2, #1
  403b02:	b176      	cbz	r6, 403b22 <__register_exitproc+0x4a>
  403b04:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403b08:	2401      	movs	r4, #1
  403b0a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403b0e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403b12:	4094      	lsls	r4, r2
  403b14:	4320      	orrs	r0, r4
  403b16:	2e02      	cmp	r6, #2
  403b18:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403b1c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403b20:	d023      	beq.n	403b6a <__register_exitproc+0x92>
  403b22:	3202      	adds	r2, #2
  403b24:	f8c3 e004 	str.w	lr, [r3, #4]
  403b28:	6828      	ldr	r0, [r5, #0]
  403b2a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403b2e:	f7ff f88d 	bl	402c4c <__retarget_lock_release_recursive>
  403b32:	2000      	movs	r0, #0
  403b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403b38:	4b17      	ldr	r3, [pc, #92]	; (403b98 <__register_exitproc+0xc0>)
  403b3a:	b30b      	cbz	r3, 403b80 <__register_exitproc+0xa8>
  403b3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403b40:	f7ff f8fe 	bl	402d40 <malloc>
  403b44:	4603      	mov	r3, r0
  403b46:	b1d8      	cbz	r0, 403b80 <__register_exitproc+0xa8>
  403b48:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403b4c:	6002      	str	r2, [r0, #0]
  403b4e:	2100      	movs	r1, #0
  403b50:	6041      	str	r1, [r0, #4]
  403b52:	460a      	mov	r2, r1
  403b54:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403b58:	f04f 0e01 	mov.w	lr, #1
  403b5c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403b60:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403b64:	2e00      	cmp	r6, #0
  403b66:	d0dc      	beq.n	403b22 <__register_exitproc+0x4a>
  403b68:	e7cc      	b.n	403b04 <__register_exitproc+0x2c>
  403b6a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403b6e:	430c      	orrs	r4, r1
  403b70:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403b74:	e7d5      	b.n	403b22 <__register_exitproc+0x4a>
  403b76:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403b7a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403b7e:	e7bb      	b.n	403af8 <__register_exitproc+0x20>
  403b80:	6828      	ldr	r0, [r5, #0]
  403b82:	f7ff f863 	bl	402c4c <__retarget_lock_release_recursive>
  403b86:	f04f 30ff 	mov.w	r0, #4294967295
  403b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403b8e:	bf00      	nop
  403b90:	20000438 	.word	0x20000438
  403b94:	004040a8 	.word	0x004040a8
  403b98:	00402d41 	.word	0x00402d41

00403b9c <_close_r>:
  403b9c:	b538      	push	{r3, r4, r5, lr}
  403b9e:	4c07      	ldr	r4, [pc, #28]	; (403bbc <_close_r+0x20>)
  403ba0:	2300      	movs	r3, #0
  403ba2:	4605      	mov	r5, r0
  403ba4:	4608      	mov	r0, r1
  403ba6:	6023      	str	r3, [r4, #0]
  403ba8:	f7fc fffa 	bl	400ba0 <_close>
  403bac:	1c43      	adds	r3, r0, #1
  403bae:	d000      	beq.n	403bb2 <_close_r+0x16>
  403bb0:	bd38      	pop	{r3, r4, r5, pc}
  403bb2:	6823      	ldr	r3, [r4, #0]
  403bb4:	2b00      	cmp	r3, #0
  403bb6:	d0fb      	beq.n	403bb0 <_close_r+0x14>
  403bb8:	602b      	str	r3, [r5, #0]
  403bba:	bd38      	pop	{r3, r4, r5, pc}
  403bbc:	20008ddc 	.word	0x20008ddc

00403bc0 <_fclose_r>:
  403bc0:	b570      	push	{r4, r5, r6, lr}
  403bc2:	b159      	cbz	r1, 403bdc <_fclose_r+0x1c>
  403bc4:	4605      	mov	r5, r0
  403bc6:	460c      	mov	r4, r1
  403bc8:	b110      	cbz	r0, 403bd0 <_fclose_r+0x10>
  403bca:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403bcc:	2b00      	cmp	r3, #0
  403bce:	d03c      	beq.n	403c4a <_fclose_r+0x8a>
  403bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403bd2:	07d8      	lsls	r0, r3, #31
  403bd4:	d505      	bpl.n	403be2 <_fclose_r+0x22>
  403bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403bda:	b92b      	cbnz	r3, 403be8 <_fclose_r+0x28>
  403bdc:	2600      	movs	r6, #0
  403bde:	4630      	mov	r0, r6
  403be0:	bd70      	pop	{r4, r5, r6, pc}
  403be2:	89a3      	ldrh	r3, [r4, #12]
  403be4:	0599      	lsls	r1, r3, #22
  403be6:	d53c      	bpl.n	403c62 <_fclose_r+0xa2>
  403be8:	4621      	mov	r1, r4
  403bea:	4628      	mov	r0, r5
  403bec:	f7fe fb74 	bl	4022d8 <__sflush_r>
  403bf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403bf2:	4606      	mov	r6, r0
  403bf4:	b133      	cbz	r3, 403c04 <_fclose_r+0x44>
  403bf6:	69e1      	ldr	r1, [r4, #28]
  403bf8:	4628      	mov	r0, r5
  403bfa:	4798      	blx	r3
  403bfc:	2800      	cmp	r0, #0
  403bfe:	bfb8      	it	lt
  403c00:	f04f 36ff 	movlt.w	r6, #4294967295
  403c04:	89a3      	ldrh	r3, [r4, #12]
  403c06:	061a      	lsls	r2, r3, #24
  403c08:	d422      	bmi.n	403c50 <_fclose_r+0x90>
  403c0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403c0c:	b141      	cbz	r1, 403c20 <_fclose_r+0x60>
  403c0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403c12:	4299      	cmp	r1, r3
  403c14:	d002      	beq.n	403c1c <_fclose_r+0x5c>
  403c16:	4628      	mov	r0, r5
  403c18:	f7fe fd7c 	bl	402714 <_free_r>
  403c1c:	2300      	movs	r3, #0
  403c1e:	6323      	str	r3, [r4, #48]	; 0x30
  403c20:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403c22:	b121      	cbz	r1, 403c2e <_fclose_r+0x6e>
  403c24:	4628      	mov	r0, r5
  403c26:	f7fe fd75 	bl	402714 <_free_r>
  403c2a:	2300      	movs	r3, #0
  403c2c:	6463      	str	r3, [r4, #68]	; 0x44
  403c2e:	f7fe fc77 	bl	402520 <__sfp_lock_acquire>
  403c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403c34:	2200      	movs	r2, #0
  403c36:	07db      	lsls	r3, r3, #31
  403c38:	81a2      	strh	r2, [r4, #12]
  403c3a:	d50e      	bpl.n	403c5a <_fclose_r+0x9a>
  403c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c3e:	f7ff f801 	bl	402c44 <__retarget_lock_close_recursive>
  403c42:	f7fe fc73 	bl	40252c <__sfp_lock_release>
  403c46:	4630      	mov	r0, r6
  403c48:	bd70      	pop	{r4, r5, r6, pc}
  403c4a:	f7fe fc3d 	bl	4024c8 <__sinit>
  403c4e:	e7bf      	b.n	403bd0 <_fclose_r+0x10>
  403c50:	6921      	ldr	r1, [r4, #16]
  403c52:	4628      	mov	r0, r5
  403c54:	f7fe fd5e 	bl	402714 <_free_r>
  403c58:	e7d7      	b.n	403c0a <_fclose_r+0x4a>
  403c5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c5c:	f7fe fff6 	bl	402c4c <__retarget_lock_release_recursive>
  403c60:	e7ec      	b.n	403c3c <_fclose_r+0x7c>
  403c62:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c64:	f7fe fff0 	bl	402c48 <__retarget_lock_acquire_recursive>
  403c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c6c:	2b00      	cmp	r3, #0
  403c6e:	d1bb      	bne.n	403be8 <_fclose_r+0x28>
  403c70:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403c72:	f016 0601 	ands.w	r6, r6, #1
  403c76:	d1b1      	bne.n	403bdc <_fclose_r+0x1c>
  403c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c7a:	f7fe ffe7 	bl	402c4c <__retarget_lock_release_recursive>
  403c7e:	4630      	mov	r0, r6
  403c80:	bd70      	pop	{r4, r5, r6, pc}
  403c82:	bf00      	nop

00403c84 <_fstat_r>:
  403c84:	b538      	push	{r3, r4, r5, lr}
  403c86:	460b      	mov	r3, r1
  403c88:	4c07      	ldr	r4, [pc, #28]	; (403ca8 <_fstat_r+0x24>)
  403c8a:	4605      	mov	r5, r0
  403c8c:	4611      	mov	r1, r2
  403c8e:	4618      	mov	r0, r3
  403c90:	2300      	movs	r3, #0
  403c92:	6023      	str	r3, [r4, #0]
  403c94:	f7fc ff87 	bl	400ba6 <_fstat>
  403c98:	1c43      	adds	r3, r0, #1
  403c9a:	d000      	beq.n	403c9e <_fstat_r+0x1a>
  403c9c:	bd38      	pop	{r3, r4, r5, pc}
  403c9e:	6823      	ldr	r3, [r4, #0]
  403ca0:	2b00      	cmp	r3, #0
  403ca2:	d0fb      	beq.n	403c9c <_fstat_r+0x18>
  403ca4:	602b      	str	r3, [r5, #0]
  403ca6:	bd38      	pop	{r3, r4, r5, pc}
  403ca8:	20008ddc 	.word	0x20008ddc

00403cac <_isatty_r>:
  403cac:	b538      	push	{r3, r4, r5, lr}
  403cae:	4c07      	ldr	r4, [pc, #28]	; (403ccc <_isatty_r+0x20>)
  403cb0:	2300      	movs	r3, #0
  403cb2:	4605      	mov	r5, r0
  403cb4:	4608      	mov	r0, r1
  403cb6:	6023      	str	r3, [r4, #0]
  403cb8:	f7fc ff7a 	bl	400bb0 <_isatty>
  403cbc:	1c43      	adds	r3, r0, #1
  403cbe:	d000      	beq.n	403cc2 <_isatty_r+0x16>
  403cc0:	bd38      	pop	{r3, r4, r5, pc}
  403cc2:	6823      	ldr	r3, [r4, #0]
  403cc4:	2b00      	cmp	r3, #0
  403cc6:	d0fb      	beq.n	403cc0 <_isatty_r+0x14>
  403cc8:	602b      	str	r3, [r5, #0]
  403cca:	bd38      	pop	{r3, r4, r5, pc}
  403ccc:	20008ddc 	.word	0x20008ddc

00403cd0 <_lseek_r>:
  403cd0:	b570      	push	{r4, r5, r6, lr}
  403cd2:	460d      	mov	r5, r1
  403cd4:	4c08      	ldr	r4, [pc, #32]	; (403cf8 <_lseek_r+0x28>)
  403cd6:	4611      	mov	r1, r2
  403cd8:	4606      	mov	r6, r0
  403cda:	461a      	mov	r2, r3
  403cdc:	4628      	mov	r0, r5
  403cde:	2300      	movs	r3, #0
  403ce0:	6023      	str	r3, [r4, #0]
  403ce2:	f7fc ff67 	bl	400bb4 <_lseek>
  403ce6:	1c43      	adds	r3, r0, #1
  403ce8:	d000      	beq.n	403cec <_lseek_r+0x1c>
  403cea:	bd70      	pop	{r4, r5, r6, pc}
  403cec:	6823      	ldr	r3, [r4, #0]
  403cee:	2b00      	cmp	r3, #0
  403cf0:	d0fb      	beq.n	403cea <_lseek_r+0x1a>
  403cf2:	6033      	str	r3, [r6, #0]
  403cf4:	bd70      	pop	{r4, r5, r6, pc}
  403cf6:	bf00      	nop
  403cf8:	20008ddc 	.word	0x20008ddc

00403cfc <_read_r>:
  403cfc:	b570      	push	{r4, r5, r6, lr}
  403cfe:	460d      	mov	r5, r1
  403d00:	4c08      	ldr	r4, [pc, #32]	; (403d24 <_read_r+0x28>)
  403d02:	4611      	mov	r1, r2
  403d04:	4606      	mov	r6, r0
  403d06:	461a      	mov	r2, r3
  403d08:	4628      	mov	r0, r5
  403d0a:	2300      	movs	r3, #0
  403d0c:	6023      	str	r3, [r4, #0]
  403d0e:	f7fc faad 	bl	40026c <_read>
  403d12:	1c43      	adds	r3, r0, #1
  403d14:	d000      	beq.n	403d18 <_read_r+0x1c>
  403d16:	bd70      	pop	{r4, r5, r6, pc}
  403d18:	6823      	ldr	r3, [r4, #0]
  403d1a:	2b00      	cmp	r3, #0
  403d1c:	d0fb      	beq.n	403d16 <_read_r+0x1a>
  403d1e:	6033      	str	r3, [r6, #0]
  403d20:	bd70      	pop	{r4, r5, r6, pc}
  403d22:	bf00      	nop
  403d24:	20008ddc 	.word	0x20008ddc

00403d28 <__aeabi_uldivmod>:
  403d28:	b953      	cbnz	r3, 403d40 <__aeabi_uldivmod+0x18>
  403d2a:	b94a      	cbnz	r2, 403d40 <__aeabi_uldivmod+0x18>
  403d2c:	2900      	cmp	r1, #0
  403d2e:	bf08      	it	eq
  403d30:	2800      	cmpeq	r0, #0
  403d32:	bf1c      	itt	ne
  403d34:	f04f 31ff 	movne.w	r1, #4294967295
  403d38:	f04f 30ff 	movne.w	r0, #4294967295
  403d3c:	f000 b97a 	b.w	404034 <__aeabi_idiv0>
  403d40:	f1ad 0c08 	sub.w	ip, sp, #8
  403d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403d48:	f000 f806 	bl	403d58 <__udivmoddi4>
  403d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403d54:	b004      	add	sp, #16
  403d56:	4770      	bx	lr

00403d58 <__udivmoddi4>:
  403d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d5c:	468c      	mov	ip, r1
  403d5e:	460d      	mov	r5, r1
  403d60:	4604      	mov	r4, r0
  403d62:	9e08      	ldr	r6, [sp, #32]
  403d64:	2b00      	cmp	r3, #0
  403d66:	d151      	bne.n	403e0c <__udivmoddi4+0xb4>
  403d68:	428a      	cmp	r2, r1
  403d6a:	4617      	mov	r7, r2
  403d6c:	d96d      	bls.n	403e4a <__udivmoddi4+0xf2>
  403d6e:	fab2 fe82 	clz	lr, r2
  403d72:	f1be 0f00 	cmp.w	lr, #0
  403d76:	d00b      	beq.n	403d90 <__udivmoddi4+0x38>
  403d78:	f1ce 0c20 	rsb	ip, lr, #32
  403d7c:	fa01 f50e 	lsl.w	r5, r1, lr
  403d80:	fa20 fc0c 	lsr.w	ip, r0, ip
  403d84:	fa02 f70e 	lsl.w	r7, r2, lr
  403d88:	ea4c 0c05 	orr.w	ip, ip, r5
  403d8c:	fa00 f40e 	lsl.w	r4, r0, lr
  403d90:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403d94:	0c25      	lsrs	r5, r4, #16
  403d96:	fbbc f8fa 	udiv	r8, ip, sl
  403d9a:	fa1f f987 	uxth.w	r9, r7
  403d9e:	fb0a cc18 	mls	ip, sl, r8, ip
  403da2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403da6:	fb08 f309 	mul.w	r3, r8, r9
  403daa:	42ab      	cmp	r3, r5
  403dac:	d90a      	bls.n	403dc4 <__udivmoddi4+0x6c>
  403dae:	19ed      	adds	r5, r5, r7
  403db0:	f108 32ff 	add.w	r2, r8, #4294967295
  403db4:	f080 8123 	bcs.w	403ffe <__udivmoddi4+0x2a6>
  403db8:	42ab      	cmp	r3, r5
  403dba:	f240 8120 	bls.w	403ffe <__udivmoddi4+0x2a6>
  403dbe:	f1a8 0802 	sub.w	r8, r8, #2
  403dc2:	443d      	add	r5, r7
  403dc4:	1aed      	subs	r5, r5, r3
  403dc6:	b2a4      	uxth	r4, r4
  403dc8:	fbb5 f0fa 	udiv	r0, r5, sl
  403dcc:	fb0a 5510 	mls	r5, sl, r0, r5
  403dd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403dd4:	fb00 f909 	mul.w	r9, r0, r9
  403dd8:	45a1      	cmp	r9, r4
  403dda:	d909      	bls.n	403df0 <__udivmoddi4+0x98>
  403ddc:	19e4      	adds	r4, r4, r7
  403dde:	f100 33ff 	add.w	r3, r0, #4294967295
  403de2:	f080 810a 	bcs.w	403ffa <__udivmoddi4+0x2a2>
  403de6:	45a1      	cmp	r9, r4
  403de8:	f240 8107 	bls.w	403ffa <__udivmoddi4+0x2a2>
  403dec:	3802      	subs	r0, #2
  403dee:	443c      	add	r4, r7
  403df0:	eba4 0409 	sub.w	r4, r4, r9
  403df4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403df8:	2100      	movs	r1, #0
  403dfa:	2e00      	cmp	r6, #0
  403dfc:	d061      	beq.n	403ec2 <__udivmoddi4+0x16a>
  403dfe:	fa24 f40e 	lsr.w	r4, r4, lr
  403e02:	2300      	movs	r3, #0
  403e04:	6034      	str	r4, [r6, #0]
  403e06:	6073      	str	r3, [r6, #4]
  403e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e0c:	428b      	cmp	r3, r1
  403e0e:	d907      	bls.n	403e20 <__udivmoddi4+0xc8>
  403e10:	2e00      	cmp	r6, #0
  403e12:	d054      	beq.n	403ebe <__udivmoddi4+0x166>
  403e14:	2100      	movs	r1, #0
  403e16:	e886 0021 	stmia.w	r6, {r0, r5}
  403e1a:	4608      	mov	r0, r1
  403e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e20:	fab3 f183 	clz	r1, r3
  403e24:	2900      	cmp	r1, #0
  403e26:	f040 808e 	bne.w	403f46 <__udivmoddi4+0x1ee>
  403e2a:	42ab      	cmp	r3, r5
  403e2c:	d302      	bcc.n	403e34 <__udivmoddi4+0xdc>
  403e2e:	4282      	cmp	r2, r0
  403e30:	f200 80fa 	bhi.w	404028 <__udivmoddi4+0x2d0>
  403e34:	1a84      	subs	r4, r0, r2
  403e36:	eb65 0503 	sbc.w	r5, r5, r3
  403e3a:	2001      	movs	r0, #1
  403e3c:	46ac      	mov	ip, r5
  403e3e:	2e00      	cmp	r6, #0
  403e40:	d03f      	beq.n	403ec2 <__udivmoddi4+0x16a>
  403e42:	e886 1010 	stmia.w	r6, {r4, ip}
  403e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e4a:	b912      	cbnz	r2, 403e52 <__udivmoddi4+0xfa>
  403e4c:	2701      	movs	r7, #1
  403e4e:	fbb7 f7f2 	udiv	r7, r7, r2
  403e52:	fab7 fe87 	clz	lr, r7
  403e56:	f1be 0f00 	cmp.w	lr, #0
  403e5a:	d134      	bne.n	403ec6 <__udivmoddi4+0x16e>
  403e5c:	1beb      	subs	r3, r5, r7
  403e5e:	0c3a      	lsrs	r2, r7, #16
  403e60:	fa1f fc87 	uxth.w	ip, r7
  403e64:	2101      	movs	r1, #1
  403e66:	fbb3 f8f2 	udiv	r8, r3, r2
  403e6a:	0c25      	lsrs	r5, r4, #16
  403e6c:	fb02 3318 	mls	r3, r2, r8, r3
  403e70:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403e74:	fb0c f308 	mul.w	r3, ip, r8
  403e78:	42ab      	cmp	r3, r5
  403e7a:	d907      	bls.n	403e8c <__udivmoddi4+0x134>
  403e7c:	19ed      	adds	r5, r5, r7
  403e7e:	f108 30ff 	add.w	r0, r8, #4294967295
  403e82:	d202      	bcs.n	403e8a <__udivmoddi4+0x132>
  403e84:	42ab      	cmp	r3, r5
  403e86:	f200 80d1 	bhi.w	40402c <__udivmoddi4+0x2d4>
  403e8a:	4680      	mov	r8, r0
  403e8c:	1aed      	subs	r5, r5, r3
  403e8e:	b2a3      	uxth	r3, r4
  403e90:	fbb5 f0f2 	udiv	r0, r5, r2
  403e94:	fb02 5510 	mls	r5, r2, r0, r5
  403e98:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403e9c:	fb0c fc00 	mul.w	ip, ip, r0
  403ea0:	45a4      	cmp	ip, r4
  403ea2:	d907      	bls.n	403eb4 <__udivmoddi4+0x15c>
  403ea4:	19e4      	adds	r4, r4, r7
  403ea6:	f100 33ff 	add.w	r3, r0, #4294967295
  403eaa:	d202      	bcs.n	403eb2 <__udivmoddi4+0x15a>
  403eac:	45a4      	cmp	ip, r4
  403eae:	f200 80b8 	bhi.w	404022 <__udivmoddi4+0x2ca>
  403eb2:	4618      	mov	r0, r3
  403eb4:	eba4 040c 	sub.w	r4, r4, ip
  403eb8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403ebc:	e79d      	b.n	403dfa <__udivmoddi4+0xa2>
  403ebe:	4631      	mov	r1, r6
  403ec0:	4630      	mov	r0, r6
  403ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ec6:	f1ce 0420 	rsb	r4, lr, #32
  403eca:	fa05 f30e 	lsl.w	r3, r5, lr
  403ece:	fa07 f70e 	lsl.w	r7, r7, lr
  403ed2:	fa20 f804 	lsr.w	r8, r0, r4
  403ed6:	0c3a      	lsrs	r2, r7, #16
  403ed8:	fa25 f404 	lsr.w	r4, r5, r4
  403edc:	ea48 0803 	orr.w	r8, r8, r3
  403ee0:	fbb4 f1f2 	udiv	r1, r4, r2
  403ee4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403ee8:	fb02 4411 	mls	r4, r2, r1, r4
  403eec:	fa1f fc87 	uxth.w	ip, r7
  403ef0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403ef4:	fb01 f30c 	mul.w	r3, r1, ip
  403ef8:	42ab      	cmp	r3, r5
  403efa:	fa00 f40e 	lsl.w	r4, r0, lr
  403efe:	d909      	bls.n	403f14 <__udivmoddi4+0x1bc>
  403f00:	19ed      	adds	r5, r5, r7
  403f02:	f101 30ff 	add.w	r0, r1, #4294967295
  403f06:	f080 808a 	bcs.w	40401e <__udivmoddi4+0x2c6>
  403f0a:	42ab      	cmp	r3, r5
  403f0c:	f240 8087 	bls.w	40401e <__udivmoddi4+0x2c6>
  403f10:	3902      	subs	r1, #2
  403f12:	443d      	add	r5, r7
  403f14:	1aeb      	subs	r3, r5, r3
  403f16:	fa1f f588 	uxth.w	r5, r8
  403f1a:	fbb3 f0f2 	udiv	r0, r3, r2
  403f1e:	fb02 3310 	mls	r3, r2, r0, r3
  403f22:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403f26:	fb00 f30c 	mul.w	r3, r0, ip
  403f2a:	42ab      	cmp	r3, r5
  403f2c:	d907      	bls.n	403f3e <__udivmoddi4+0x1e6>
  403f2e:	19ed      	adds	r5, r5, r7
  403f30:	f100 38ff 	add.w	r8, r0, #4294967295
  403f34:	d26f      	bcs.n	404016 <__udivmoddi4+0x2be>
  403f36:	42ab      	cmp	r3, r5
  403f38:	d96d      	bls.n	404016 <__udivmoddi4+0x2be>
  403f3a:	3802      	subs	r0, #2
  403f3c:	443d      	add	r5, r7
  403f3e:	1aeb      	subs	r3, r5, r3
  403f40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403f44:	e78f      	b.n	403e66 <__udivmoddi4+0x10e>
  403f46:	f1c1 0720 	rsb	r7, r1, #32
  403f4a:	fa22 f807 	lsr.w	r8, r2, r7
  403f4e:	408b      	lsls	r3, r1
  403f50:	fa05 f401 	lsl.w	r4, r5, r1
  403f54:	ea48 0303 	orr.w	r3, r8, r3
  403f58:	fa20 fe07 	lsr.w	lr, r0, r7
  403f5c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403f60:	40fd      	lsrs	r5, r7
  403f62:	ea4e 0e04 	orr.w	lr, lr, r4
  403f66:	fbb5 f9fc 	udiv	r9, r5, ip
  403f6a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403f6e:	fb0c 5519 	mls	r5, ip, r9, r5
  403f72:	fa1f f883 	uxth.w	r8, r3
  403f76:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403f7a:	fb09 f408 	mul.w	r4, r9, r8
  403f7e:	42ac      	cmp	r4, r5
  403f80:	fa02 f201 	lsl.w	r2, r2, r1
  403f84:	fa00 fa01 	lsl.w	sl, r0, r1
  403f88:	d908      	bls.n	403f9c <__udivmoddi4+0x244>
  403f8a:	18ed      	adds	r5, r5, r3
  403f8c:	f109 30ff 	add.w	r0, r9, #4294967295
  403f90:	d243      	bcs.n	40401a <__udivmoddi4+0x2c2>
  403f92:	42ac      	cmp	r4, r5
  403f94:	d941      	bls.n	40401a <__udivmoddi4+0x2c2>
  403f96:	f1a9 0902 	sub.w	r9, r9, #2
  403f9a:	441d      	add	r5, r3
  403f9c:	1b2d      	subs	r5, r5, r4
  403f9e:	fa1f fe8e 	uxth.w	lr, lr
  403fa2:	fbb5 f0fc 	udiv	r0, r5, ip
  403fa6:	fb0c 5510 	mls	r5, ip, r0, r5
  403faa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403fae:	fb00 f808 	mul.w	r8, r0, r8
  403fb2:	45a0      	cmp	r8, r4
  403fb4:	d907      	bls.n	403fc6 <__udivmoddi4+0x26e>
  403fb6:	18e4      	adds	r4, r4, r3
  403fb8:	f100 35ff 	add.w	r5, r0, #4294967295
  403fbc:	d229      	bcs.n	404012 <__udivmoddi4+0x2ba>
  403fbe:	45a0      	cmp	r8, r4
  403fc0:	d927      	bls.n	404012 <__udivmoddi4+0x2ba>
  403fc2:	3802      	subs	r0, #2
  403fc4:	441c      	add	r4, r3
  403fc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403fca:	eba4 0408 	sub.w	r4, r4, r8
  403fce:	fba0 8902 	umull	r8, r9, r0, r2
  403fd2:	454c      	cmp	r4, r9
  403fd4:	46c6      	mov	lr, r8
  403fd6:	464d      	mov	r5, r9
  403fd8:	d315      	bcc.n	404006 <__udivmoddi4+0x2ae>
  403fda:	d012      	beq.n	404002 <__udivmoddi4+0x2aa>
  403fdc:	b156      	cbz	r6, 403ff4 <__udivmoddi4+0x29c>
  403fde:	ebba 030e 	subs.w	r3, sl, lr
  403fe2:	eb64 0405 	sbc.w	r4, r4, r5
  403fe6:	fa04 f707 	lsl.w	r7, r4, r7
  403fea:	40cb      	lsrs	r3, r1
  403fec:	431f      	orrs	r7, r3
  403fee:	40cc      	lsrs	r4, r1
  403ff0:	6037      	str	r7, [r6, #0]
  403ff2:	6074      	str	r4, [r6, #4]
  403ff4:	2100      	movs	r1, #0
  403ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ffa:	4618      	mov	r0, r3
  403ffc:	e6f8      	b.n	403df0 <__udivmoddi4+0x98>
  403ffe:	4690      	mov	r8, r2
  404000:	e6e0      	b.n	403dc4 <__udivmoddi4+0x6c>
  404002:	45c2      	cmp	sl, r8
  404004:	d2ea      	bcs.n	403fdc <__udivmoddi4+0x284>
  404006:	ebb8 0e02 	subs.w	lr, r8, r2
  40400a:	eb69 0503 	sbc.w	r5, r9, r3
  40400e:	3801      	subs	r0, #1
  404010:	e7e4      	b.n	403fdc <__udivmoddi4+0x284>
  404012:	4628      	mov	r0, r5
  404014:	e7d7      	b.n	403fc6 <__udivmoddi4+0x26e>
  404016:	4640      	mov	r0, r8
  404018:	e791      	b.n	403f3e <__udivmoddi4+0x1e6>
  40401a:	4681      	mov	r9, r0
  40401c:	e7be      	b.n	403f9c <__udivmoddi4+0x244>
  40401e:	4601      	mov	r1, r0
  404020:	e778      	b.n	403f14 <__udivmoddi4+0x1bc>
  404022:	3802      	subs	r0, #2
  404024:	443c      	add	r4, r7
  404026:	e745      	b.n	403eb4 <__udivmoddi4+0x15c>
  404028:	4608      	mov	r0, r1
  40402a:	e708      	b.n	403e3e <__udivmoddi4+0xe6>
  40402c:	f1a8 0802 	sub.w	r8, r8, #2
  404030:	443d      	add	r5, r7
  404032:	e72b      	b.n	403e8c <__udivmoddi4+0x134>

00404034 <__aeabi_idiv0>:
  404034:	4770      	bx	lr
  404036:	bf00      	nop
  404038:	41202d2d 	.word	0x41202d2d
  40403c:	20434546 	.word	0x20434546
  404040:	74616546 	.word	0x74616546
  404044:	20657275 	.word	0x20657275
  404048:	74736554 	.word	0x74736554
  40404c:	61784520 	.word	0x61784520
  404050:	656c706d 	.word	0x656c706d
  404054:	0d2d2d20 	.word	0x0d2d2d20
  404058:	202d2d0a 	.word	0x202d2d0a
  40405c:	344d4153 	.word	0x344d4153
  404060:	50582d45 	.word	0x50582d45
  404064:	2d204f52 	.word	0x2d204f52
  404068:	2d0a0d2d 	.word	0x2d0a0d2d
  40406c:	6f43202d 	.word	0x6f43202d
  404070:	6c69706d 	.word	0x6c69706d
  404074:	203a6465 	.word	0x203a6465
  404078:	20636544 	.word	0x20636544
  40407c:	32203320 	.word	0x32203320
  404080:	20303230 	.word	0x20303230
  404084:	313a3431 	.word	0x313a3431
  404088:	38323a30 	.word	0x38323a30
  40408c:	0d2d2d20 	.word	0x0d2d2d20
  404090:	00000000 	.word	0x00000000
  404094:	74696177 	.word	0x74696177
  404098:	00676e69 	.word	0x00676e69
  40409c:	0000002e 	.word	0x0000002e
  4040a0:	0d0a6425 	.word	0x0d0a6425
  4040a4:	00000000 	.word	0x00000000

004040a8 <_global_impure_ptr>:
  4040a8:	20000010 0000000a 33323130 37363534     ... ....01234567
  4040b8:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  4040c8:	37363534 62613938 66656463 00000000     456789abcdef....
  4040d8:	6c756e28 0000296c                       (null)..

004040e0 <blanks.7217>:
  4040e0:	20202020 20202020 20202020 20202020                     

004040f0 <zeroes.7218>:
  4040f0:	30303030 30303030 30303030 30303030     0000000000000000
  404100:	00000043 49534f50 00000058              C...POSIX...

0040410c <_ctype_>:
  40410c:	20202000 20202020 28282020 20282828     .         ((((( 
  40411c:	20202020 20202020 20202020 20202020                     
  40412c:	10108820 10101010 10101010 10101010      ...............
  40413c:	04040410 04040404 10040404 10101010     ................
  40414c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40415c:	01010101 01010101 01010101 10101010     ................
  40416c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40417c:	02020202 02020202 02020202 10101010     ................
  40418c:	00000020 00000000 00000000 00000000      ...............
	...

00404210 <_init>:
  404210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404212:	bf00      	nop
  404214:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404216:	bc08      	pop	{r3}
  404218:	469e      	mov	lr, r3
  40421a:	4770      	bx	lr

0040421c <__init_array_start>:
  40421c:	004022b9 	.word	0x004022b9

00404220 <__frame_dummy_init_array_entry>:
  404220:	0040011d                                ..@.

00404224 <_fini>:
  404224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404226:	bf00      	nop
  404228:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40422a:	bc08      	pop	{r3}
  40422c:	469e      	mov	lr, r3
  40422e:	4770      	bx	lr

00404230 <__fini_array_start>:
  404230:	004000f9 	.word	0x004000f9

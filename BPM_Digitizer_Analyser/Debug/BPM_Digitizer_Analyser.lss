
BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c18  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000087c  20000000  00403c18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000c7e8  20000880  00404498  0002087c  2**3
                  ALLOC
  3 .stack        00003000  2000d068  00410c80  0002087c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002087c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000208aa  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001d376  00000000  00000000  00020903  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000445e  00000000  00000000  0003dc79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005783  00000000  00000000  000420d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bd8  00000000  00000000  0004785a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bd0  00000000  00000000  00048432  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001bee5  00000000  00000000  00049002  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010bb1  00000000  00000000  00064ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00066225  00000000  00000000  00075a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000023a4  00000000  00000000  000dbcc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	68 00 01 20 ed 16 40 00 e9 16 40 00 e9 16 40 00     h.. ..@...@...@.
  400010:	e9 16 40 00 e9 16 40 00 e9 16 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 16 40 00 e9 16 40 00 00 00 00 00 e9 16 40 00     ..@...@.......@.
  40003c:	e9 16 40 00 e9 16 40 00 e9 16 40 00 e9 16 40 00     ..@...@...@...@.
  40004c:	e9 16 40 00 e9 16 40 00 e9 16 40 00 e9 16 40 00     ..@...@...@...@.
  40005c:	8d 0c 40 00 e9 16 40 00 e9 16 40 00 e9 16 40 00     ..@...@...@...@.
  40006c:	e9 16 40 00 e9 16 40 00 e9 16 40 00 81 19 40 00     ..@...@...@...@.
  40007c:	e9 16 40 00 e9 16 40 00 e9 16 40 00 e9 16 40 00     ..@...@...@...@.
  40008c:	e9 16 40 00 e9 16 40 00 e9 16 40 00 b9 1b 40 00     ..@...@...@...@.
  40009c:	e9 16 40 00 e9 16 40 00 e9 16 40 00 e9 16 40 00     ..@...@...@...@.
  4000ac:	e9 16 40 00 e9 16 40 00 e9 16 40 00 2d 13 40 00     ..@...@...@.-.@.
  4000bc:	41 13 40 00 e9 16 40 00 8d 1a 40 00 e9 16 40 00     A.@...@...@...@.
  4000cc:	e9 16 40 00 e9 16 40 00 e9 16 40 00 e9 16 40 00     ..@...@...@...@.
  4000dc:	e9 16 40 00 e9 16 40 00 e9 16 40 00 e9 16 40 00     ..@...@...@...@.
  4000ec:	e9 16 40 00 e9 16 40 00 e9 16 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000880 	.word	0x20000880
  400114:	00000000 	.word	0x00000000
  400118:	00403c18 	.word	0x00403c18

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00403c18 	.word	0x00403c18
  400158:	20000884 	.word	0x20000884
  40015c:	00403c18 	.word	0x00403c18
  400160:	00000000 	.word	0x00000000

00400164 <sample_average>:


/*	Compute population average/mean of the distribution (collector peak), which is a sample index*/

double sample_average(uint16_t start, uint16_t end) 
{
  400164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t sample_avg = 0;
	uint32_t total_frequency = 0;
	
	for (uint16_t i = start; i < end; i++)
  400166:	4288      	cmp	r0, r1
  400168:	d21c      	bcs.n	4001a4 <sample_average+0x40>
  40016a:	4603      	mov	r3, r0
  40016c:	4a0f      	ldr	r2, [pc, #60]	; (4001ac <sample_average+0x48>)
  40016e:	6815      	ldr	r5, [r2, #0]
  400170:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	{
		sample_avg += (uint32_t)algorithm_buffer[i]*i;
  400174:	2400      	movs	r4, #0
  400176:	4620      	mov	r0, r4
  400178:	f835 2b02 	ldrh.w	r2, [r5], #2
  40017c:	fb03 0002 	mla	r0, r3, r2, r0
		total_frequency += (uint32_t)algorithm_buffer[i];
  400180:	4414      	add	r4, r2
  400182:	3301      	adds	r3, #1
	for (uint16_t i = start; i < end; i++)
  400184:	b29a      	uxth	r2, r3
  400186:	4291      	cmp	r1, r2
  400188:	d8f6      	bhi.n	400178 <sample_average+0x14>
	}
			
	return (double)sample_avg/total_frequency;
  40018a:	4d09      	ldr	r5, [pc, #36]	; (4001b0 <sample_average+0x4c>)
  40018c:	47a8      	blx	r5
  40018e:	4606      	mov	r6, r0
  400190:	460f      	mov	r7, r1
  400192:	4620      	mov	r0, r4
  400194:	47a8      	blx	r5
  400196:	4602      	mov	r2, r0
  400198:	460b      	mov	r3, r1
  40019a:	4630      	mov	r0, r6
  40019c:	4639      	mov	r1, r7
  40019e:	4c05      	ldr	r4, [pc, #20]	; (4001b4 <sample_average+0x50>)
  4001a0:	47a0      	blx	r4
}
  4001a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t total_frequency = 0;
  4001a4:	2400      	movs	r4, #0
	uint32_t sample_avg = 0;
  4001a6:	4620      	mov	r0, r4
  4001a8:	e7ef      	b.n	40018a <sample_average+0x26>
  4001aa:	bf00      	nop
  4001ac:	2000002c 	.word	0x2000002c
  4001b0:	004023a9 	.word	0x004023a9
  4001b4:	004026e9 	.word	0x004026e9

004001b8 <find_max>:


/* Find the maximum of the BPM-80 data half cycle and return its index */

uint16_t find_max(uint16_t* halfcycle, uint16_t length)
{
  4001b8:	b470      	push	{r4, r5, r6}
	uint16_t maximum = 0;
	uint16_t max_index = 0;
									
	for (uint16_t i = 0; i < length; i++)
  4001ba:	460e      	mov	r6, r1
  4001bc:	b181      	cbz	r1, 4001e0 <find_max+0x28>
  4001be:	1e81      	subs	r1, r0, #2
  4001c0:	2300      	movs	r3, #0
  4001c2:	4618      	mov	r0, r3
  4001c4:	461c      	mov	r4, r3
  4001c6:	b29d      	uxth	r5, r3
	{
		if (halfcycle[i] > maximum) 
  4001c8:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  4001cc:	42a2      	cmp	r2, r4
  4001ce:	bf84      	itt	hi
  4001d0:	4628      	movhi	r0, r5
		{
			max_index = i;
			maximum = halfcycle[i];
  4001d2:	4614      	movhi	r4, r2
  4001d4:	3301      	adds	r3, #1
	for (uint16_t i = 0; i < length; i++)
  4001d6:	b29a      	uxth	r2, r3
  4001d8:	4296      	cmp	r6, r2
  4001da:	d8f4      	bhi.n	4001c6 <find_max+0xe>
		}
	}
	
	return max_index;
}
  4001dc:	bc70      	pop	{r4, r5, r6}
  4001de:	4770      	bx	lr
	uint16_t max_index = 0;
  4001e0:	4608      	mov	r0, r1
  4001e2:	e7fb      	b.n	4001dc <find_max+0x24>

004001e4 <sum>:
/* Find the sum of a window of samples*/

uint16_t sum(uint16_t start, uint16_t end)
{
	uint16_t result=0;
	for (uint16_t i=start; i< end; i++ )
  4001e4:	4288      	cmp	r0, r1
  4001e6:	d212      	bcs.n	40020e <sum+0x2a>
	{
		result+= algorithm_buffer[i];
  4001e8:	4b0a      	ldr	r3, [pc, #40]	; (400214 <sum+0x30>)
  4001ea:	681a      	ldr	r2, [r3, #0]
  4001ec:	eb02 0340 	add.w	r3, r2, r0, lsl #1
  4001f0:	3901      	subs	r1, #1
  4001f2:	1a09      	subs	r1, r1, r0
  4001f4:	3001      	adds	r0, #1
  4001f6:	fa10 f181 	uxtah	r1, r0, r1
  4001fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  4001fe:	2000      	movs	r0, #0
  400200:	f833 2b02 	ldrh.w	r2, [r3], #2
  400204:	4410      	add	r0, r2
  400206:	b280      	uxth	r0, r0
	for (uint16_t i=start; i< end; i++ )
  400208:	428b      	cmp	r3, r1
  40020a:	d1f9      	bne.n	400200 <sum+0x1c>
  40020c:	4770      	bx	lr
	uint16_t result=0;
  40020e:	2000      	movs	r0, #0
	}
	return result;
}
  400210:	4770      	bx	lr
  400212:	bf00      	nop
  400214:	2000002c 	.word	0x2000002c

00400218 <detect_peaks>:
/* Find beam peak locations and peak widths for X and Y using either the threshold or dispersion-based algorithm */
/* Returns an array of 6 elements : 1. peak position X  2. peak edge left X  3. peak edge right X 
									4. peak position Y  5. peak edge left Y  6. peak edge right Y */

void detect_peaks(uint16_t threshold)
{
  400218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40021c:	4605      	mov	r5, r0
	uint16_t peak1 = find_max(algorithm_buffer, half_cycle_length);
  40021e:	4b46      	ldr	r3, [pc, #280]	; (400338 <detect_peaks+0x120>)
  400220:	681c      	ldr	r4, [r3, #0]
  400222:	4b46      	ldr	r3, [pc, #280]	; (40033c <detect_peaks+0x124>)
  400224:	881e      	ldrh	r6, [r3, #0]
  400226:	4631      	mov	r1, r6
  400228:	4620      	mov	r0, r4
  40022a:	f8df 811c 	ldr.w	r8, [pc, #284]	; 400348 <detect_peaks+0x130>
  40022e:	47c0      	blx	r8
  400230:	4607      	mov	r7, r0
	uint16_t peak2 = half_cycle_length + find_max(algorithm_buffer + half_cycle_length, half_cycle_length);
  400232:	4631      	mov	r1, r6
  400234:	eb04 0046 	add.w	r0, r4, r6, lsl #1
  400238:	47c0      	blx	r8
  40023a:	4430      	add	r0, r6
  40023c:	b280      	uxth	r0, r0
	
	// Use peak1 and peak2 to find the 4 corner points of the beams, possibly combine with dispersion-based algorithm
		
	peak_location[0][cycle] = peak1;
  40023e:	4b40      	ldr	r3, [pc, #256]	; (400340 <detect_peaks+0x128>)
  400240:	881a      	ldrh	r2, [r3, #0]
  400242:	4b40      	ldr	r3, [pc, #256]	; (400344 <detect_peaks+0x12c>)
  400244:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
	peak_location[3][cycle] = peak2;
  400248:	f102 0130 	add.w	r1, r2, #48	; 0x30
  40024c:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	
	// find left corner of X peak
	
	for (uint16_t i = 0; i <= peak1; i++)
	{
		if(algorithm_buffer[peak1 - i] < threshold)
  400250:	4639      	mov	r1, r7
  400252:	f834 3017 	ldrh.w	r3, [r4, r7, lsl #1]
  400256:	42ab      	cmp	r3, r5
  400258:	d357      	bcc.n	40030a <detect_peaks+0xf2>
  40025a:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak1; i++)
  40025c:	3301      	adds	r3, #1
  40025e:	b29b      	uxth	r3, r3
  400260:	429f      	cmp	r7, r3
  400262:	d35e      	bcc.n	400322 <detect_peaks+0x10a>
		if(algorithm_buffer[peak1 - i] < threshold)
  400264:	eba1 0e03 	sub.w	lr, r1, r3
  400268:	f834 e01e 	ldrh.w	lr, [r4, lr, lsl #1]
  40026c:	45ae      	cmp	lr, r5
  40026e:	d2f5      	bcs.n	40025c <detect_peaks+0x44>
		{
			peak_location[1][cycle] = peak1-i;
  400270:	f102 0e10 	add.w	lr, r2, #16
  400274:	1afb      	subs	r3, r7, r3
  400276:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 400344 <detect_peaks+0x12c>
  40027a:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]
	}

	
	// find right corner of X peak
	
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40027e:	1bf6      	subs	r6, r6, r7
  400280:	d414      	bmi.n	4002ac <detect_peaks+0x94>
	{
		if(algorithm_buffer [peak1 + i] < threshold)
  400282:	f834 3017 	ldrh.w	r3, [r4, r7, lsl #1]
  400286:	42ab      	cmp	r3, r5
  400288:	d341      	bcc.n	40030e <detect_peaks+0xf6>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40028a:	2300      	movs	r3, #0
  40028c:	3301      	adds	r3, #1
  40028e:	b29b      	uxth	r3, r3
  400290:	42b3      	cmp	r3, r6
  400292:	dc0b      	bgt.n	4002ac <detect_peaks+0x94>
		if(algorithm_buffer [peak1 + i] < threshold)
  400294:	eb03 0e01 	add.w	lr, r3, r1
  400298:	f834 e01e 	ldrh.w	lr, [r4, lr, lsl #1]
  40029c:	45ae      	cmp	lr, r5
  40029e:	d2f5      	bcs.n	40028c <detect_peaks+0x74>
		{
			peak_location[2][cycle] = peak1 + i;
  4002a0:	f102 0120 	add.w	r1, r2, #32
  4002a4:	441f      	add	r7, r3
  4002a6:	4e27      	ldr	r6, [pc, #156]	; (400344 <detect_peaks+0x12c>)
  4002a8:	f826 7011 	strh.w	r7, [r6, r1, lsl #1]
	
	// find left corner of Y peak
	
	for (uint16_t i = 0; i <= peak2; i++)
	{
		if(algorithm_buffer[peak2 - i] < threshold)
  4002ac:	4601      	mov	r1, r0
  4002ae:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  4002b2:	42ab      	cmp	r3, r5
  4002b4:	d32d      	bcc.n	400312 <detect_peaks+0xfa>
  4002b6:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak2; i++)
  4002b8:	3301      	adds	r3, #1
  4002ba:	b29b      	uxth	r3, r3
  4002bc:	4298      	cmp	r0, r3
  4002be:	d333      	bcc.n	400328 <detect_peaks+0x110>
		if(algorithm_buffer[peak2 - i] < threshold)
  4002c0:	1ace      	subs	r6, r1, r3
  4002c2:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
  4002c6:	42ae      	cmp	r6, r5
  4002c8:	d2f6      	bcs.n	4002b8 <detect_peaks+0xa0>
		{
			peak_location[4][cycle] = peak2-i;
  4002ca:	f102 0640 	add.w	r6, r2, #64	; 0x40
  4002ce:	1ac3      	subs	r3, r0, r3
  4002d0:	4f1c      	ldr	r7, [pc, #112]	; (400344 <detect_peaks+0x12c>)
  4002d2:	f827 3016 	strh.w	r3, [r7, r6, lsl #1]
	
	
	
	// find right corner of Y peak
	
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  4002d6:	f5c0 5702 	rsb	r7, r0, #8320	; 0x2080
  4002da:	370e      	adds	r7, #14
  4002dc:	2f00      	cmp	r7, #0
  4002de:	db1a      	blt.n	400316 <detect_peaks+0xfe>
	{
		if(algorithm_buffer[peak2 + i] < threshold)
  4002e0:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  4002e4:	42ab      	cmp	r3, r5
  4002e6:	d318      	bcc.n	40031a <detect_peaks+0x102>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  4002e8:	2300      	movs	r3, #0
  4002ea:	3301      	adds	r3, #1
  4002ec:	b29b      	uxth	r3, r3
  4002ee:	42bb      	cmp	r3, r7
  4002f0:	dc15      	bgt.n	40031e <detect_peaks+0x106>
		if(algorithm_buffer[peak2 + i] < threshold)
  4002f2:	185e      	adds	r6, r3, r1
  4002f4:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
  4002f8:	42ae      	cmp	r6, r5
  4002fa:	d2f6      	bcs.n	4002ea <detect_peaks+0xd2>
		{
			peak_location[5][cycle] = peak2 + i;
  4002fc:	3250      	adds	r2, #80	; 0x50
  4002fe:	4403      	add	r3, r0
  400300:	4910      	ldr	r1, [pc, #64]	; (400344 <detect_peaks+0x12c>)
  400302:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			break;
  400306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= peak1; i++)
  40030a:	2300      	movs	r3, #0
  40030c:	e7b0      	b.n	400270 <detect_peaks+0x58>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40030e:	2300      	movs	r3, #0
  400310:	e7c6      	b.n	4002a0 <detect_peaks+0x88>
	for (uint16_t i = 0; i <= peak2; i++)
  400312:	2300      	movs	r3, #0
  400314:	e7d9      	b.n	4002ca <detect_peaks+0xb2>
  400316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  40031a:	2300      	movs	r3, #0
  40031c:	e7ee      	b.n	4002fc <detect_peaks+0xe4>
  40031e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  400322:	1bf6      	subs	r6, r6, r7
  400324:	d5b1      	bpl.n	40028a <detect_peaks+0x72>
  400326:	e7c1      	b.n	4002ac <detect_peaks+0x94>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  400328:	f5c0 5702 	rsb	r7, r0, #8320	; 0x2080
  40032c:	370e      	adds	r7, #14
  40032e:	2f00      	cmp	r7, #0
  400330:	dada      	bge.n	4002e8 <detect_peaks+0xd0>
  400332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400336:	bf00      	nop
  400338:	2000002c 	.word	0x2000002c
  40033c:	20000004 	.word	0x20000004
  400340:	20000942 	.word	0x20000942
  400344:	20000984 	.word	0x20000984
  400348:	004001b9 	.word	0x004001b9

0040034c <compute_beam_intensity>:
/* Compute beam intensity of a cycle in X and Y cross section */
/* Takes as input the borders of both peaks*/
/* Outputs beam intensity of X and Y cross-section, so that higher level data representation can choose how to combine the values*/

void compute_beam_intensity(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right)
{
  40034c:	b4f0      	push	{r4, r5, r6, r7}
	
	beam_intensity[0][cycle] = 0;
  40034e:	4c1d      	ldr	r4, [pc, #116]	; (4003c4 <compute_beam_intensity+0x78>)
  400350:	8824      	ldrh	r4, [r4, #0]
  400352:	4d1d      	ldr	r5, [pc, #116]	; (4003c8 <compute_beam_intensity+0x7c>)
  400354:	2600      	movs	r6, #0
  400356:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
	beam_intensity[1][cycle] = 0;
  40035a:	f104 0710 	add.w	r7, r4, #16
  40035e:	f845 6027 	str.w	r6, [r5, r7, lsl #2]
	
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  400362:	4288      	cmp	r0, r1
  400364:	d214      	bcs.n	400390 <compute_beam_intensity+0x44>
	{
		beam_intensity[0][cycle] += (uint32_t)algorithm_buffer[i];
  400366:	4d19      	ldr	r5, [pc, #100]	; (4003cc <compute_beam_intensity+0x80>)
  400368:	682f      	ldr	r7, [r5, #0]
  40036a:	eb07 0540 	add.w	r5, r7, r0, lsl #1
  40036e:	3901      	subs	r1, #1
  400370:	1a09      	subs	r1, r1, r0
  400372:	3001      	adds	r0, #1
  400374:	fa10 f181 	uxtah	r1, r0, r1
  400378:	eb07 0741 	add.w	r7, r7, r1, lsl #1
  40037c:	4812      	ldr	r0, [pc, #72]	; (4003c8 <compute_beam_intensity+0x7c>)
  40037e:	f835 6b02 	ldrh.w	r6, [r5], #2
  400382:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
  400386:	4431      	add	r1, r6
  400388:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  40038c:	42bd      	cmp	r5, r7
  40038e:	d1f6      	bne.n	40037e <compute_beam_intensity+0x32>
	}
	
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  400390:	429a      	cmp	r2, r3
  400392:	d215      	bcs.n	4003c0 <compute_beam_intensity+0x74>
	{
		beam_intensity[1][cycle] += (uint32_t)algorithm_buffer[i];
  400394:	490d      	ldr	r1, [pc, #52]	; (4003cc <compute_beam_intensity+0x80>)
  400396:	680d      	ldr	r5, [r1, #0]
  400398:	eb05 0142 	add.w	r1, r5, r2, lsl #1
  40039c:	3b01      	subs	r3, #1
  40039e:	1a9b      	subs	r3, r3, r2
  4003a0:	3201      	adds	r2, #1
  4003a2:	fa12 f383 	uxtah	r3, r2, r3
  4003a6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
  4003aa:	4a07      	ldr	r2, [pc, #28]	; (4003c8 <compute_beam_intensity+0x7c>)
  4003ac:	3410      	adds	r4, #16
  4003ae:	f831 0b02 	ldrh.w	r0, [r1], #2
  4003b2:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  4003b6:	4403      	add	r3, r0
  4003b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  4003bc:	42a9      	cmp	r1, r5
  4003be:	d1f6      	bne.n	4003ae <compute_beam_intensity+0x62>
	}
	
	
}
  4003c0:	bcf0      	pop	{r4, r5, r6, r7}
  4003c2:	4770      	bx	lr
  4003c4:	20000942 	.word	0x20000942
  4003c8:	2000089c 	.word	0x2000089c
  4003cc:	2000002c 	.word	0x2000002c

004003d0 <compute_fwhm>:


/* Compute FWHM X and Y (based on variance in this case, assumes more or less gaussian profile */

void compute_fwhm(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right,  uint16_t peak1_max, uint16_t peak2_max)
{
  4003d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003d4:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  4003d8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
		
	
	/* In general, for all beam types, requires 2 extra arguments */
		
		
		uint16_t half_max = algorithm_buffer[peak1_max]/2;
  4003dc:	4e40      	ldr	r6, [pc, #256]	; (4004e0 <compute_fwhm+0x110>)
  4003de:	f8d6 8000 	ldr.w	r8, [r6]
  4003e2:	eb08 0645 	add.w	r6, r8, r5, lsl #1
  4003e6:	f838 7015 	ldrh.w	r7, [r8, r5, lsl #1]
  4003ea:	087f      	lsrs	r7, r7, #1
		
		uint16_t left_hm = 1000;
		uint16_t left_hm_index = 0;
		
		for (uint16_t i = peak1_max; i > peak1_left; i--)
  4003ec:	4285      	cmp	r5, r0
  4003ee:	d96c      	bls.n	4004ca <compute_fwhm+0xfa>
  4003f0:	46b2      	mov	sl, r6
  4003f2:	46a9      	mov	r9, r5
  4003f4:	f04f 0c00 	mov.w	ip, #0
  4003f8:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		{
			uint16_t gap = abs(algorithm_buffer[i] - half_max);
  4003fc:	f83a e902 	ldrh.w	lr, [sl], #-2
  400400:	ebae 0e07 	sub.w	lr, lr, r7
  400404:	f1be 0f00 	cmp.w	lr, #0
  400408:	bfb8      	it	lt
  40040a:	f1ce 0e00 	rsblt	lr, lr, #0
  40040e:	fa1f fe8e 	uxth.w	lr, lr
			if (gap <= left_hm)
  400412:	45de      	cmp	lr, fp
  400414:	bf9c      	itt	ls
  400416:	46cc      	movls	ip, r9
			{
				left_hm = gap;
  400418:	46f3      	movls	fp, lr
		for (uint16_t i = peak1_max; i > peak1_left; i--)
  40041a:	f109 39ff 	add.w	r9, r9, #4294967295
  40041e:	fa1f f989 	uxth.w	r9, r9
  400422:	4548      	cmp	r0, r9
  400424:	d1ea      	bne.n	4003fc <compute_fwhm+0x2c>
		}
		
		uint16_t right_hm = 1000;
		uint16_t right_hm_index = 0;
		
		for (uint16_t i = peak1_max; i < peak1_right; i++)
  400426:	428d      	cmp	r5, r1
  400428:	d252      	bcs.n	4004d0 <compute_fwhm+0x100>
  40042a:	f04f 0e00 	mov.w	lr, #0
  40042e:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		{
			uint16_t gap = abs(algorithm_buffer[i] - half_max);
  400432:	f836 0b02 	ldrh.w	r0, [r6], #2
  400436:	1bc0      	subs	r0, r0, r7
  400438:	2800      	cmp	r0, #0
  40043a:	bfb8      	it	lt
  40043c:	4240      	neglt	r0, r0
  40043e:	b280      	uxth	r0, r0
			if (gap <= right_hm)
  400440:	4548      	cmp	r0, r9
  400442:	bf9c      	itt	ls
  400444:	46ae      	movls	lr, r5
			{
				right_hm = gap;
  400446:	4681      	movls	r9, r0
		for (uint16_t i = peak1_max; i < peak1_right; i++)
  400448:	3501      	adds	r5, #1
  40044a:	b2ad      	uxth	r5, r5
  40044c:	42a9      	cmp	r1, r5
  40044e:	d1f0      	bne.n	400432 <compute_fwhm+0x62>
				right_hm_index = i;
			}
		}
		
		fwhm[0][cycle] = right_hm_index - left_hm_index;
  400450:	4924      	ldr	r1, [pc, #144]	; (4004e4 <compute_fwhm+0x114>)
  400452:	8808      	ldrh	r0, [r1, #0]
  400454:	ebae 0e0c 	sub.w	lr, lr, ip
  400458:	4923      	ldr	r1, [pc, #140]	; (4004e8 <compute_fwhm+0x118>)
  40045a:	f821 e010 	strh.w	lr, [r1, r0, lsl #1]
		
		half_max = algorithm_buffer[peak2_max]/2;
  40045e:	eb08 0e44 	add.w	lr, r8, r4, lsl #1
  400462:	f838 5014 	ldrh.w	r5, [r8, r4, lsl #1]
  400466:	086d      	lsrs	r5, r5, #1
		
		left_hm = 1000;
		left_hm_index = 0;
		
		for (uint16_t i = peak2_max; i > peak2_left; i--)
  400468:	4294      	cmp	r4, r2
  40046a:	d934      	bls.n	4004d6 <compute_fwhm+0x106>
  40046c:	46f4      	mov	ip, lr
  40046e:	4627      	mov	r7, r4
  400470:	2600      	movs	r6, #0
  400472:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		{
			uint16_t gap = abs(algorithm_buffer[i] - half_max);
  400476:	f83c 1902 	ldrh.w	r1, [ip], #-2
  40047a:	1b49      	subs	r1, r1, r5
  40047c:	2900      	cmp	r1, #0
  40047e:	bfb8      	it	lt
  400480:	4249      	neglt	r1, r1
  400482:	b289      	uxth	r1, r1
			if (gap <= left_hm)
  400484:	4541      	cmp	r1, r8
  400486:	bf9c      	itt	ls
  400488:	463e      	movls	r6, r7
			{
				left_hm = gap;
  40048a:	4688      	movls	r8, r1
		for (uint16_t i = peak2_max; i > peak2_left; i--)
  40048c:	3f01      	subs	r7, #1
  40048e:	b2bf      	uxth	r7, r7
  400490:	42ba      	cmp	r2, r7
  400492:	d1f0      	bne.n	400476 <compute_fwhm+0xa6>
		}
		
		right_hm = 1000;
		right_hm_index = 0;
		
		for (uint16_t i = peak2_max; i < peak2_right; i++)
  400494:	429c      	cmp	r4, r3
  400496:	d220      	bcs.n	4004da <compute_fwhm+0x10a>
  400498:	2700      	movs	r7, #0
  40049a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		{
			uint16_t gap = abs(algorithm_buffer[i] - half_max);
  40049e:	f83e 2b02 	ldrh.w	r2, [lr], #2
  4004a2:	1b52      	subs	r2, r2, r5
  4004a4:	2a00      	cmp	r2, #0
  4004a6:	bfb8      	it	lt
  4004a8:	4252      	neglt	r2, r2
  4004aa:	b292      	uxth	r2, r2
			if (gap <= right_hm)
  4004ac:	428a      	cmp	r2, r1
  4004ae:	bf9c      	itt	ls
  4004b0:	4627      	movls	r7, r4
			{
				right_hm = gap;
  4004b2:	4611      	movls	r1, r2
		for (uint16_t i = peak2_max; i < peak2_right; i++)
  4004b4:	3401      	adds	r4, #1
  4004b6:	b2a4      	uxth	r4, r4
  4004b8:	42a3      	cmp	r3, r4
  4004ba:	d1f0      	bne.n	40049e <compute_fwhm+0xce>
				right_hm_index = i;
				
			}
		}
		
		fwhm[1][cycle] = right_hm_index - left_hm_index;
  4004bc:	3010      	adds	r0, #16
  4004be:	1bbe      	subs	r6, r7, r6
  4004c0:	4b09      	ldr	r3, [pc, #36]	; (4004e8 <compute_fwhm+0x118>)
  4004c2:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
  4004c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint16_t left_hm_index = 0;
  4004ca:	f04f 0c00 	mov.w	ip, #0
  4004ce:	e7aa      	b.n	400426 <compute_fwhm+0x56>
		for (uint16_t i = peak1_max; i < peak1_right; i++)
  4004d0:	f04f 0e00 	mov.w	lr, #0
  4004d4:	e7bc      	b.n	400450 <compute_fwhm+0x80>
		left_hm_index = 0;
  4004d6:	2600      	movs	r6, #0
  4004d8:	e7dc      	b.n	400494 <compute_fwhm+0xc4>
		for (uint16_t i = peak2_max; i < peak2_right; i++)
  4004da:	2700      	movs	r7, #0
  4004dc:	e7ee      	b.n	4004bc <compute_fwhm+0xec>
  4004de:	bf00      	nop
  4004e0:	2000002c 	.word	0x2000002c
  4004e4:	20000942 	.word	0x20000942
  4004e8:	20000944 	.word	0x20000944
  4004ec:	00000000 	.word	0x00000000

004004f0 <compute_skewness>:


/* Compute skewness of the beam  X and Y */

void compute_skewness(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right)
{
  4004f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004f4:	b093      	sub	sp, #76	; 0x4c
  4004f6:	4683      	mov	fp, r0
  4004f8:	460d      	mov	r5, r1
  4004fa:	4614      	mov	r4, r2
  4004fc:	920e      	str	r2, [sp, #56]	; 0x38
  4004fe:	461f      	mov	r7, r3
  400500:	930f      	str	r3, [sp, #60]	; 0x3c
	
	double first_peak_mean  =  sample_average(peak1_left, peak1_right);
  400502:	4e85      	ldr	r6, [pc, #532]	; (400718 <compute_skewness+0x228>)
  400504:	47b0      	blx	r6
  400506:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	double second_peak_mean =  sample_average(peak2_left, peak2_right);
  40050a:	4639      	mov	r1, r7
  40050c:	4620      	mov	r0, r4
  40050e:	47b0      	blx	r6
  400510:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	
	double third_central = 0;
	double second_central = 0;
	int sum1 = sum(peak1_left,peak1_right);
  400514:	4629      	mov	r1, r5
  400516:	4658      	mov	r0, fp
  400518:	4e80      	ldr	r6, [pc, #512]	; (40071c <compute_skewness+0x22c>)
  40051a:	47b0      	blx	r6
  40051c:	9010      	str	r0, [sp, #64]	; 0x40
	int sum2 = sum(peak2_left,peak2_right);
  40051e:	4639      	mov	r1, r7
  400520:	4620      	mov	r0, r4
  400522:	47b0      	blx	r6
  400524:	9011      	str	r0, [sp, #68]	; 0x44
	
	for (int i=peak1_left;i<peak1_right;i++ )
  400526:	45ab      	cmp	fp, r5
  400528:	f280 80e1 	bge.w	4006ee <compute_skewness+0x1fe>
  40052c:	46d8      	mov	r8, fp
  40052e:	46a9      	mov	r9, r5
  400530:	4b7b      	ldr	r3, [pc, #492]	; (400720 <compute_skewness+0x230>)
  400532:	681b      	ldr	r3, [r3, #0]
  400534:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
	{
		
		double sample = (double) algorithm_buffer[i];
  400538:	ed9f 7b75 	vldr	d7, [pc, #468]	; 400710 <compute_skewness+0x220>
  40053c:	ed8d 7b02 	vstr	d7, [sp, #8]
  400540:	ed8d 7b04 	vstr	d7, [sp, #16]
  400544:	4f77      	ldr	r7, [pc, #476]	; (400724 <compute_skewness+0x234>)
		double spread = (double)i-first_peak_mean;
  400546:	4e78      	ldr	r6, [pc, #480]	; (400728 <compute_skewness+0x238>)
  400548:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 400748 <compute_skewness+0x258>
		third_central += spread*spread*spread*sample;
  40054c:	4d77      	ldr	r5, [pc, #476]	; (40072c <compute_skewness+0x23c>)
  40054e:	4c78      	ldr	r4, [pc, #480]	; (400730 <compute_skewness+0x240>)
		double sample = (double) algorithm_buffer[i];
  400550:	f83b 0b02 	ldrh.w	r0, [fp], #2
  400554:	47b8      	blx	r7
  400556:	e9cd 0100 	strd	r0, r1, [sp]
		double spread = (double)i-first_peak_mean;
  40055a:	4640      	mov	r0, r8
  40055c:	47b0      	blx	r6
  40055e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  400562:	47d0      	blx	sl
  400564:	4602      	mov	r2, r0
  400566:	460b      	mov	r3, r1
		third_central += spread*spread*spread*sample;
  400568:	e9cd 2306 	strd	r2, r3, [sp, #24]
  40056c:	47a8      	blx	r5
  40056e:	4602      	mov	r2, r0
  400570:	460b      	mov	r3, r1
  400572:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40057a:	47a8      	blx	r5
  40057c:	e9dd 2300 	ldrd	r2, r3, [sp]
  400580:	47a8      	blx	r5
  400582:	4602      	mov	r2, r0
  400584:	460b      	mov	r3, r1
  400586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40058a:	47a0      	blx	r4
  40058c:	e9cd 0104 	strd	r0, r1, [sp, #16]
		second_central += spread*spread*sample;
  400590:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  400594:	e9dd 0100 	ldrd	r0, r1, [sp]
  400598:	47a8      	blx	r5
  40059a:	4602      	mov	r2, r0
  40059c:	460b      	mov	r3, r1
  40059e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4005a2:	47a0      	blx	r4
  4005a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
	for (int i=peak1_left;i<peak1_right;i++ )
  4005a8:	f108 0801 	add.w	r8, r8, #1
  4005ac:	45c8      	cmp	r8, r9
  4005ae:	d1cf      	bne.n	400550 <compute_skewness+0x60>
		
	}
	
	third_central = third_central/sum1;
  4005b0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4005b2:	4b5d      	ldr	r3, [pc, #372]	; (400728 <compute_skewness+0x238>)
  4005b4:	4798      	blx	r3
  4005b6:	4604      	mov	r4, r0
  4005b8:	460d      	mov	r5, r1
  4005ba:	4e5e      	ldr	r6, [pc, #376]	; (400734 <compute_skewness+0x244>)
  4005bc:	4602      	mov	r2, r0
  4005be:	460b      	mov	r3, r1
  4005c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4005c4:	47b0      	blx	r6
  4005c6:	4680      	mov	r8, r0
  4005c8:	4689      	mov	r9, r1
	second_central = second_central/sum1;
  4005ca:	4622      	mov	r2, r4
  4005cc:	462b      	mov	r3, r5
  4005ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4005d2:	47b0      	blx	r6
  4005d4:	4604      	mov	r4, r0
  4005d6:	460d      	mov	r5, r1
	
	double denominator = sqrt(second_central*second_central*second_central);
  4005d8:	4f54      	ldr	r7, [pc, #336]	; (40072c <compute_skewness+0x23c>)
  4005da:	4602      	mov	r2, r0
  4005dc:	460b      	mov	r3, r1
  4005de:	47b8      	blx	r7
  4005e0:	4622      	mov	r2, r4
  4005e2:	462b      	mov	r3, r5
  4005e4:	47b8      	blx	r7
  4005e6:	4b54      	ldr	r3, [pc, #336]	; (400738 <compute_skewness+0x248>)
  4005e8:	4798      	blx	r3
	third_central = third_central/denominator;
	
	skewness[0][cycle] = third_central;
  4005ea:	4b54      	ldr	r3, [pc, #336]	; (40073c <compute_skewness+0x24c>)
  4005ec:	881b      	ldrh	r3, [r3, #0]
  4005ee:	4c54      	ldr	r4, [pc, #336]	; (400740 <compute_skewness+0x250>)
  4005f0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
	third_central = third_central/denominator;
  4005f4:	4602      	mov	r2, r0
  4005f6:	460b      	mov	r3, r1
  4005f8:	4640      	mov	r0, r8
  4005fa:	4649      	mov	r1, r9
  4005fc:	47b0      	blx	r6
	skewness[0][cycle] = third_central;
  4005fe:	4b51      	ldr	r3, [pc, #324]	; (400744 <compute_skewness+0x254>)
  400600:	4798      	blx	r3
  400602:	6020      	str	r0, [r4, #0]
	
	third_central = 0;
	second_central = 0;
	
	for (int i=peak2_left;i<peak2_right;i++ )
  400604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  400606:	4690      	mov	r8, r2
  400608:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40060a:	4689      	mov	r9, r1
  40060c:	428a      	cmp	r2, r1
  40060e:	da75      	bge.n	4006fc <compute_skewness+0x20c>
  400610:	4b43      	ldr	r3, [pc, #268]	; (400720 <compute_skewness+0x230>)
  400612:	681b      	ldr	r3, [r3, #0]
  400614:	eb03 0b42 	add.w	fp, r3, r2, lsl #1
	{
		double sample = (double) algorithm_buffer[i];
  400618:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 400710 <compute_skewness+0x220>
  40061c:	ed8d 7b02 	vstr	d7, [sp, #8]
  400620:	ed8d 7b04 	vstr	d7, [sp, #16]
  400624:	4f3f      	ldr	r7, [pc, #252]	; (400724 <compute_skewness+0x234>)
		double spread = (double)i-second_peak_mean;
  400626:	4e40      	ldr	r6, [pc, #256]	; (400728 <compute_skewness+0x238>)
  400628:	f8df a11c 	ldr.w	sl, [pc, #284]	; 400748 <compute_skewness+0x258>
		third_central += spread*spread*spread*sample;
  40062c:	4d3f      	ldr	r5, [pc, #252]	; (40072c <compute_skewness+0x23c>)
  40062e:	4c40      	ldr	r4, [pc, #256]	; (400730 <compute_skewness+0x240>)
		double sample = (double) algorithm_buffer[i];
  400630:	f83b 0b02 	ldrh.w	r0, [fp], #2
  400634:	47b8      	blx	r7
  400636:	e9cd 0100 	strd	r0, r1, [sp]
		double spread = (double)i-second_peak_mean;
  40063a:	4640      	mov	r0, r8
  40063c:	47b0      	blx	r6
  40063e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  400642:	47d0      	blx	sl
  400644:	4602      	mov	r2, r0
  400646:	460b      	mov	r3, r1
		third_central += spread*spread*spread*sample;
  400648:	e9cd 2306 	strd	r2, r3, [sp, #24]
  40064c:	47a8      	blx	r5
  40064e:	4602      	mov	r2, r0
  400650:	460b      	mov	r3, r1
  400652:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40065a:	47a8      	blx	r5
  40065c:	e9dd 2300 	ldrd	r2, r3, [sp]
  400660:	47a8      	blx	r5
  400662:	4602      	mov	r2, r0
  400664:	460b      	mov	r3, r1
  400666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40066a:	47a0      	blx	r4
  40066c:	e9cd 0104 	strd	r0, r1, [sp, #16]
		second_central += spread*spread*sample;
  400670:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  400674:	e9dd 0100 	ldrd	r0, r1, [sp]
  400678:	47a8      	blx	r5
  40067a:	4602      	mov	r2, r0
  40067c:	460b      	mov	r3, r1
  40067e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400682:	47a0      	blx	r4
  400684:	e9cd 0102 	strd	r0, r1, [sp, #8]
	for (int i=peak2_left;i<peak2_right;i++ )
  400688:	f108 0801 	add.w	r8, r8, #1
  40068c:	45c8      	cmp	r8, r9
  40068e:	d1cf      	bne.n	400630 <compute_skewness+0x140>
	}
	
	third_central = third_central/sum2;
  400690:	9811      	ldr	r0, [sp, #68]	; 0x44
  400692:	4b25      	ldr	r3, [pc, #148]	; (400728 <compute_skewness+0x238>)
  400694:	4798      	blx	r3
  400696:	4604      	mov	r4, r0
  400698:	460d      	mov	r5, r1
  40069a:	4e26      	ldr	r6, [pc, #152]	; (400734 <compute_skewness+0x244>)
  40069c:	4602      	mov	r2, r0
  40069e:	460b      	mov	r3, r1
  4006a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4006a4:	47b0      	blx	r6
  4006a6:	4680      	mov	r8, r0
  4006a8:	4689      	mov	r9, r1
	second_central = second_central/sum2;
  4006aa:	4622      	mov	r2, r4
  4006ac:	462b      	mov	r3, r5
  4006ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4006b2:	47b0      	blx	r6
  4006b4:	4604      	mov	r4, r0
  4006b6:	460d      	mov	r5, r1
	
	denominator = sqrt(second_central*second_central*second_central);
  4006b8:	4f1c      	ldr	r7, [pc, #112]	; (40072c <compute_skewness+0x23c>)
  4006ba:	4602      	mov	r2, r0
  4006bc:	460b      	mov	r3, r1
  4006be:	47b8      	blx	r7
  4006c0:	4622      	mov	r2, r4
  4006c2:	462b      	mov	r3, r5
  4006c4:	47b8      	blx	r7
  4006c6:	4b1c      	ldr	r3, [pc, #112]	; (400738 <compute_skewness+0x248>)
  4006c8:	4798      	blx	r3
	third_central = third_central/denominator;
	
	skewness[1][cycle] = third_central;
  4006ca:	4b1c      	ldr	r3, [pc, #112]	; (40073c <compute_skewness+0x24c>)
  4006cc:	881c      	ldrh	r4, [r3, #0]
  4006ce:	f104 0310 	add.w	r3, r4, #16
  4006d2:	4c1b      	ldr	r4, [pc, #108]	; (400740 <compute_skewness+0x250>)
  4006d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
	third_central = third_central/denominator;
  4006d8:	4602      	mov	r2, r0
  4006da:	460b      	mov	r3, r1
  4006dc:	4640      	mov	r0, r8
  4006de:	4649      	mov	r1, r9
  4006e0:	47b0      	blx	r6
	skewness[1][cycle] = third_central;
  4006e2:	4b18      	ldr	r3, [pc, #96]	; (400744 <compute_skewness+0x254>)
  4006e4:	4798      	blx	r3
  4006e6:	6020      	str	r0, [r4, #0]
	
	
} 
  4006e8:	b013      	add	sp, #76	; 0x4c
  4006ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double second_central = 0;
  4006ee:	ed9f 7b08 	vldr	d7, [pc, #32]	; 400710 <compute_skewness+0x220>
  4006f2:	ed8d 7b02 	vstr	d7, [sp, #8]
	double third_central = 0;
  4006f6:	ed8d 7b04 	vstr	d7, [sp, #16]
  4006fa:	e759      	b.n	4005b0 <compute_skewness+0xc0>
	second_central = 0;
  4006fc:	ed9f 7b04 	vldr	d7, [pc, #16]	; 400710 <compute_skewness+0x220>
  400700:	ed8d 7b02 	vstr	d7, [sp, #8]
	third_central = 0;
  400704:	ed8d 7b04 	vstr	d7, [sp, #16]
  400708:	e7c2      	b.n	400690 <compute_skewness+0x1a0>
  40070a:	bf00      	nop
  40070c:	f3af 8000 	nop.w
	...
  400718:	00400165 	.word	0x00400165
  40071c:	004001e5 	.word	0x004001e5
  400720:	2000002c 	.word	0x2000002c
  400724:	004023a9 	.word	0x004023a9
  400728:	004023c9 	.word	0x004023c9
  40072c:	00402495 	.word	0x00402495
  400730:	00402131 	.word	0x00402131
  400734:	004026e9 	.word	0x004026e9
  400738:	00401eed 	.word	0x00401eed
  40073c:	20000942 	.word	0x20000942
  400740:	20000a64 	.word	0x20000a64
  400744:	00402a45 	.word	0x00402a45
  400748:	0040212d 	.word	0x0040212d

0040074c <compute_beam_parameters>:


/* Compute the parameters (to be called at the end of each cycle) and put a delimiter in front that is certain to be different than parameter values*/

void compute_beam_parameters()
{
  40074c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40074e:	b083      	sub	sp, #12
	detect_peaks(config[1]);	// threshold of 20 (16 mv), might be made user-configurable later
  400750:	4b29      	ldr	r3, [pc, #164]	; (4007f8 <compute_beam_parameters+0xac>)
  400752:	7858      	ldrb	r0, [r3, #1]
  400754:	4b29      	ldr	r3, [pc, #164]	; (4007fc <compute_beam_parameters+0xb0>)
  400756:	4798      	blx	r3
	compute_beam_intensity(peak_location[1][cycle], peak_location[2][cycle], peak_location[4][cycle], peak_location[5][cycle]);
  400758:	4e29      	ldr	r6, [pc, #164]	; (400800 <compute_beam_parameters+0xb4>)
  40075a:	8833      	ldrh	r3, [r6, #0]
  40075c:	4c29      	ldr	r4, [pc, #164]	; (400804 <compute_beam_parameters+0xb8>)
  40075e:	f103 0550 	add.w	r5, r3, #80	; 0x50
  400762:	f103 0240 	add.w	r2, r3, #64	; 0x40
  400766:	f103 0120 	add.w	r1, r3, #32
  40076a:	f103 0010 	add.w	r0, r3, #16
  40076e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
  400772:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  400776:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  40077a:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
  40077e:	4d22      	ldr	r5, [pc, #136]	; (400808 <compute_beam_parameters+0xbc>)
  400780:	47a8      	blx	r5
	compute_fwhm(peak_location[1][cycle], peak_location[2][cycle], peak_location[4][cycle], peak_location[5][cycle], peak_location[0][cycle], peak_location[3][cycle]);
  400782:	8835      	ldrh	r5, [r6, #0]
  400784:	f105 0350 	add.w	r3, r5, #80	; 0x50
  400788:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
  40078c:	f105 0240 	add.w	r2, r5, #64	; 0x40
  400790:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  400794:	f105 0120 	add.w	r1, r5, #32
  400798:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  40079c:	f105 0010 	add.w	r0, r5, #16
  4007a0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
  4007a4:	f105 0730 	add.w	r7, r5, #48	; 0x30
  4007a8:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
  4007ac:	9701      	str	r7, [sp, #4]
  4007ae:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
  4007b2:	9500      	str	r5, [sp, #0]
  4007b4:	4d15      	ldr	r5, [pc, #84]	; (40080c <compute_beam_parameters+0xc0>)
  4007b6:	47a8      	blx	r5
	compute_skewness(peak_location[1][cycle], peak_location[2][cycle], peak_location[4][cycle], peak_location[5][cycle]);
  4007b8:	8833      	ldrh	r3, [r6, #0]
  4007ba:	f103 0550 	add.w	r5, r3, #80	; 0x50
  4007be:	f103 0240 	add.w	r2, r3, #64	; 0x40
  4007c2:	f103 0120 	add.w	r1, r3, #32
  4007c6:	f103 0010 	add.w	r0, r3, #16
  4007ca:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
  4007ce:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  4007d2:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  4007d6:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
  4007da:	4c0d      	ldr	r4, [pc, #52]	; (400810 <compute_beam_parameters+0xc4>)
  4007dc:	47a0      	blx	r4
	//compute_skewness(peak_location[1][cycle], peak_location[2][cycle], peak_location[4][cycle], peak_location[5][cycle], peak_location[0][cycle], peak_location[3][cycle]);
	
	cycle++;
  4007de:	8833      	ldrh	r3, [r6, #0]
  4007e0:	3301      	adds	r3, #1
  4007e2:	b29b      	uxth	r3, r3
	if (cycle > 15) cycle = 0;
  4007e4:	2b0f      	cmp	r3, #15
  4007e6:	d904      	bls.n	4007f2 <compute_beam_parameters+0xa6>
  4007e8:	2200      	movs	r2, #0
  4007ea:	4b05      	ldr	r3, [pc, #20]	; (400800 <compute_beam_parameters+0xb4>)
  4007ec:	801a      	strh	r2, [r3, #0]
	
	
}
  4007ee:	b003      	add	sp, #12
  4007f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cycle++;
  4007f2:	8033      	strh	r3, [r6, #0]
  4007f4:	e7fb      	b.n	4007ee <compute_beam_parameters+0xa2>
  4007f6:	bf00      	nop
  4007f8:	20000018 	.word	0x20000018
  4007fc:	00400219 	.word	0x00400219
  400800:	20000942 	.word	0x20000942
  400804:	20000984 	.word	0x20000984
  400808:	0040034d 	.word	0x0040034d
  40080c:	004003d1 	.word	0x004003d1
  400810:	004004f1 	.word	0x004004f1
  400814:	00000000 	.word	0x00000000

00400818 <compute_avgd_parameters>:

void compute_avgd_parameters()
{
  400818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40081c:	ed2d 8b06 	vpush	{d8-d10}
  400820:	4873      	ldr	r0, [pc, #460]	; (4009f0 <compute_avgd_parameters+0x1d8>)
  400822:	2400      	movs	r4, #0
  400824:	4e73      	ldr	r6, [pc, #460]	; (4009f4 <compute_avgd_parameters+0x1dc>)
	
	for (uint8_t i=0; i<6;i++)
	{		
		average_peak_info = 0;
		for (uint8_t j = 0; j < 16; j++) average_peak_info += peak_location[i][j];
		peakLocationPtr[i]= (uint16_t)(average_peak_info/16);
  400826:	4d74      	ldr	r5, [pc, #464]	; (4009f8 <compute_avgd_parameters+0x1e0>)
  400828:	f1a0 0320 	sub.w	r3, r0, #32
{
  40082c:	2200      	movs	r2, #0
		for (uint8_t j = 0; j < 16; j++) average_peak_info += peak_location[i][j];
  40082e:	f833 1f02 	ldrh.w	r1, [r3, #2]!
  400832:	440a      	add	r2, r1
  400834:	4283      	cmp	r3, r0
  400836:	d1fa      	bne.n	40082e <compute_avgd_parameters+0x16>
  400838:	6032      	str	r2, [r6, #0]
		peakLocationPtr[i]= (uint16_t)(average_peak_info/16);
  40083a:	0912      	lsrs	r2, r2, #4
  40083c:	682b      	ldr	r3, [r5, #0]
  40083e:	531a      	strh	r2, [r3, r4]
  400840:	3402      	adds	r4, #2
  400842:	3020      	adds	r0, #32
	for (uint8_t i=0; i<6;i++)
  400844:	2c0c      	cmp	r4, #12
  400846:	d1ef      	bne.n	400828 <compute_avgd_parameters+0x10>
  400848:	486c      	ldr	r0, [pc, #432]	; (4009fc <compute_avgd_parameters+0x1e4>)
  40084a:	1f02      	subs	r2, r0, #4
  40084c:	303c      	adds	r0, #60	; 0x3c
  40084e:	2300      	movs	r3, #0
	
	
	average_intensity = 0;
	for (uint8_t i=0; i<2;i++)
	{
		for (uint8_t j = 0; j < 16; j++) average_intensity += beam_intensity[i][j];
  400850:	f852 1f04 	ldr.w	r1, [r2, #4]!
  400854:	440b      	add	r3, r1
  400856:	4282      	cmp	r2, r0
  400858:	d1fa      	bne.n	400850 <compute_avgd_parameters+0x38>
  40085a:	4868      	ldr	r0, [pc, #416]	; (4009fc <compute_avgd_parameters+0x1e4>)
  40085c:	f100 0240 	add.w	r2, r0, #64	; 0x40
  400860:	3080      	adds	r0, #128	; 0x80
  400862:	f852 1b04 	ldr.w	r1, [r2], #4
  400866:	440b      	add	r3, r1
  400868:	4282      	cmp	r2, r0
  40086a:	d1fa      	bne.n	400862 <compute_avgd_parameters+0x4a>
  40086c:	4a64      	ldr	r2, [pc, #400]	; (400a00 <compute_avgd_parameters+0x1e8>)
  40086e:	6013      	str	r3, [r2, #0]
	}
	
	*intensityPtr = (uint32_t)(average_intensity/32);
  400870:	4a64      	ldr	r2, [pc, #400]	; (400a04 <compute_avgd_parameters+0x1ec>)
  400872:	6812      	ldr	r2, [r2, #0]
  400874:	095b      	lsrs	r3, r3, #5
  400876:	6013      	str	r3, [r2, #0]
  400878:	f04f 0b03 	mov.w	fp, #3
  40087c:	f04f 0a00 	mov.w	sl, #0
	
	
	//peak variance
	for(uint8_t i=0; i<4; i+=3){
		peak_variance=0;
  400880:	4d61      	ldr	r5, [pc, #388]	; (400a08 <compute_avgd_parameters+0x1f0>)
  400882:	ed9f ab53 	vldr	d10, [pc, #332]	; 4009d0 <compute_avgd_parameters+0x1b8>
		for(uint8_t j=0; j<16;j++) peak_variance+= (peak_location[i][j]-peakLocationPtr[i])*(peak_location[i][j]-peakLocationPtr[i]);
		if(i==0){
			stdDevPtr[0]= (int32_t)(sqrt(peak_variance/15)*10000);
			}else{
			stdDevPtr[1]= (int32_t)(sqrt(peak_variance/15)*10000);
  400886:	ed9f 9b54 	vldr	d9, [pc, #336]	; 4009d8 <compute_avgd_parameters+0x1c0>
  40088a:	ed9f 8b55 	vldr	d8, [pc, #340]	; 4009e0 <compute_avgd_parameters+0x1c8>
  40088e:	e016      	b.n	4008be <compute_avgd_parameters+0xa6>
			stdDevPtr[0]= (int32_t)(sqrt(peak_variance/15)*10000);
  400890:	4b5e      	ldr	r3, [pc, #376]	; (400a0c <compute_avgd_parameters+0x1f4>)
  400892:	681c      	ldr	r4, [r3, #0]
  400894:	ec53 2b19 	vmov	r2, r3, d9
  400898:	4e5d      	ldr	r6, [pc, #372]	; (400a10 <compute_avgd_parameters+0x1f8>)
  40089a:	47b0      	blx	r6
  40089c:	4b5d      	ldr	r3, [pc, #372]	; (400a14 <compute_avgd_parameters+0x1fc>)
  40089e:	4798      	blx	r3
  4008a0:	ec53 2b18 	vmov	r2, r3, d8
  4008a4:	4e5c      	ldr	r6, [pc, #368]	; (400a18 <compute_avgd_parameters+0x200>)
  4008a6:	47b0      	blx	r6
  4008a8:	4b5c      	ldr	r3, [pc, #368]	; (400a1c <compute_avgd_parameters+0x204>)
  4008aa:	4798      	blx	r3
  4008ac:	6020      	str	r0, [r4, #0]
  4008ae:	f10a 0a03 	add.w	sl, sl, #3
  4008b2:	fa5f fa8a 	uxtb.w	sl, sl
  4008b6:	f10b 0b03 	add.w	fp, fp, #3
  4008ba:	fa5f fb8b 	uxtb.w	fp, fp
		peak_variance=0;
  4008be:	ed85 ab00 	vstr	d10, [r5]
		for(uint8_t j=0; j<16;j++) peak_variance+= (peak_location[i][j]-peakLocationPtr[i])*(peak_location[i][j]-peakLocationPtr[i]);
  4008c2:	4b4d      	ldr	r3, [pc, #308]	; (4009f8 <compute_avgd_parameters+0x1e0>)
  4008c4:	681f      	ldr	r7, [r3, #0]
  4008c6:	eb07 074a 	add.w	r7, r7, sl, lsl #1
  4008ca:	ea4f 134a 	mov.w	r3, sl, lsl #5
  4008ce:	4e54      	ldr	r6, [pc, #336]	; (400a20 <compute_avgd_parameters+0x208>)
  4008d0:	1e9c      	subs	r4, r3, #2
  4008d2:	4434      	add	r4, r6
  4008d4:	331e      	adds	r3, #30
  4008d6:	441e      	add	r6, r3
  4008d8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 400a3c <compute_avgd_parameters+0x224>
  4008dc:	f8df 8160 	ldr.w	r8, [pc, #352]	; 400a40 <compute_avgd_parameters+0x228>
  4008e0:	f834 0f02 	ldrh.w	r0, [r4, #2]!
  4008e4:	883b      	ldrh	r3, [r7, #0]
  4008e6:	1ac0      	subs	r0, r0, r3
  4008e8:	fb00 f000 	mul.w	r0, r0, r0
  4008ec:	47c8      	blx	r9
  4008ee:	e9d5 2300 	ldrd	r2, r3, [r5]
  4008f2:	47c0      	blx	r8
  4008f4:	e9c5 0100 	strd	r0, r1, [r5]
  4008f8:	42b4      	cmp	r4, r6
  4008fa:	d1f1      	bne.n	4008e0 <compute_avgd_parameters+0xc8>
		if(i==0){
  4008fc:	f1ba 0f00 	cmp.w	sl, #0
  400900:	d0c6      	beq.n	400890 <compute_avgd_parameters+0x78>
			stdDevPtr[1]= (int32_t)(sqrt(peak_variance/15)*10000);
  400902:	4b42      	ldr	r3, [pc, #264]	; (400a0c <compute_avgd_parameters+0x1f4>)
  400904:	681c      	ldr	r4, [r3, #0]
  400906:	ec53 2b19 	vmov	r2, r3, d9
  40090a:	4e41      	ldr	r6, [pc, #260]	; (400a10 <compute_avgd_parameters+0x1f8>)
  40090c:	47b0      	blx	r6
  40090e:	4b41      	ldr	r3, [pc, #260]	; (400a14 <compute_avgd_parameters+0x1fc>)
  400910:	4798      	blx	r3
  400912:	ec53 2b18 	vmov	r2, r3, d8
  400916:	4e40      	ldr	r6, [pc, #256]	; (400a18 <compute_avgd_parameters+0x200>)
  400918:	47b0      	blx	r6
  40091a:	4b40      	ldr	r3, [pc, #256]	; (400a1c <compute_avgd_parameters+0x204>)
  40091c:	4798      	blx	r3
  40091e:	6060      	str	r0, [r4, #4]
	for(uint8_t i=0; i<4; i+=3){
  400920:	f1bb 0f03 	cmp.w	fp, #3
  400924:	d9c3      	bls.n	4008ae <compute_avgd_parameters+0x96>
  400926:	483f      	ldr	r0, [pc, #252]	; (400a24 <compute_avgd_parameters+0x20c>)
  400928:	1e83      	subs	r3, r0, #2
  40092a:	301e      	adds	r0, #30
  40092c:	2200      	movs	r2, #0
	
	
	for (uint8_t i=0; i<2;i++)
	{
		average_fwhm = 0;
		for (uint8_t j = 0; j < 16; j++) average_fwhm += fwhm[i][j];
  40092e:	f833 1f02 	ldrh.w	r1, [r3, #2]!
  400932:	440a      	add	r2, r1
  400934:	4283      	cmp	r3, r0
  400936:	d1fa      	bne.n	40092e <compute_avgd_parameters+0x116>
		fwhmPtr[i]= (uint16_t)(average_fwhm/16);
  400938:	4b3b      	ldr	r3, [pc, #236]	; (400a28 <compute_avgd_parameters+0x210>)
  40093a:	681b      	ldr	r3, [r3, #0]
  40093c:	0912      	lsrs	r2, r2, #4
  40093e:	801a      	strh	r2, [r3, #0]
  400940:	4838      	ldr	r0, [pc, #224]	; (400a24 <compute_avgd_parameters+0x20c>)
  400942:	f100 0320 	add.w	r3, r0, #32
  400946:	3040      	adds	r0, #64	; 0x40
  400948:	2200      	movs	r2, #0
		for (uint8_t j = 0; j < 16; j++) average_fwhm += fwhm[i][j];
  40094a:	f833 1b02 	ldrh.w	r1, [r3], #2
  40094e:	440a      	add	r2, r1
  400950:	4283      	cmp	r3, r0
  400952:	d1fa      	bne.n	40094a <compute_avgd_parameters+0x132>
  400954:	4b35      	ldr	r3, [pc, #212]	; (400a2c <compute_avgd_parameters+0x214>)
  400956:	601a      	str	r2, [r3, #0]
		fwhmPtr[i]= (uint16_t)(average_fwhm/16);
  400958:	4b33      	ldr	r3, [pc, #204]	; (400a28 <compute_avgd_parameters+0x210>)
  40095a:	681b      	ldr	r3, [r3, #0]
  40095c:	0912      	lsrs	r2, r2, #4
  40095e:	805a      	strh	r2, [r3, #2]
  400960:	4c33      	ldr	r4, [pc, #204]	; (400a30 <compute_avgd_parameters+0x218>)
  400962:	f04f 0a00 	mov.w	sl, #0
  400966:	ed9f ab1a 	vldr	d10, [pc, #104]	; 4009d0 <compute_avgd_parameters+0x1b8>
	
	
	for (uint8_t i=0; i<2;i++)
	{
		average_skewness = 0;
		for (uint8_t j = 0; j < 16; j++) average_skewness += skewness[i][j];
  40096a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 400a44 <compute_avgd_parameters+0x22c>
  40096e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 400a40 <compute_avgd_parameters+0x228>
		skewnessPtr[i]=  (int32_t) ((average_skewness/16)*10000);
  400972:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 400a18 <compute_avgd_parameters+0x200>
  400976:	ed9f 9b1c 	vldr	d9, [pc, #112]	; 4009e8 <compute_avgd_parameters+0x1d0>
  40097a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 4009e0 <compute_avgd_parameters+0x1c8>
  40097e:	f104 0540 	add.w	r5, r4, #64	; 0x40
		fwhmPtr[i]= (uint16_t)(average_fwhm/16);
  400982:	ec57 6b1a 	vmov	r6, r7, d10
		for (uint8_t j = 0; j < 16; j++) average_skewness += skewness[i][j];
  400986:	f854 0b04 	ldr.w	r0, [r4], #4
  40098a:	47c8      	blx	r9
  40098c:	4602      	mov	r2, r0
  40098e:	460b      	mov	r3, r1
  400990:	4630      	mov	r0, r6
  400992:	4639      	mov	r1, r7
  400994:	47c0      	blx	r8
  400996:	4606      	mov	r6, r0
  400998:	460f      	mov	r7, r1
  40099a:	42ac      	cmp	r4, r5
  40099c:	d1f3      	bne.n	400986 <compute_avgd_parameters+0x16e>
  40099e:	4b25      	ldr	r3, [pc, #148]	; (400a34 <compute_avgd_parameters+0x21c>)
  4009a0:	e9c3 6700 	strd	r6, r7, [r3]
		skewnessPtr[i]=  (int32_t) ((average_skewness/16)*10000);
  4009a4:	4b24      	ldr	r3, [pc, #144]	; (400a38 <compute_avgd_parameters+0x220>)
  4009a6:	681c      	ldr	r4, [r3, #0]
  4009a8:	ec53 2b19 	vmov	r2, r3, d9
  4009ac:	47d8      	blx	fp
  4009ae:	ec53 2b18 	vmov	r2, r3, d8
  4009b2:	47d8      	blx	fp
  4009b4:	4b19      	ldr	r3, [pc, #100]	; (400a1c <compute_avgd_parameters+0x204>)
  4009b6:	4798      	blx	r3
  4009b8:	f844 000a 	str.w	r0, [r4, sl]
  4009bc:	f10a 0a04 	add.w	sl, sl, #4
  4009c0:	462c      	mov	r4, r5
	for (uint8_t i=0; i<2;i++)
  4009c2:	f1ba 0f08 	cmp.w	sl, #8
  4009c6:	d1da      	bne.n	40097e <compute_avgd_parameters+0x166>
	}
	
}
  4009c8:	ecbd 8b06 	vpop	{d8-d10}
  4009cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
  4009dc:	402e0000 	.word	0x402e0000
  4009e0:	00000000 	.word	0x00000000
  4009e4:	40c38800 	.word	0x40c38800
  4009e8:	00000000 	.word	0x00000000
  4009ec:	3fb00000 	.word	0x3fb00000
  4009f0:	200009a2 	.word	0x200009a2
  4009f4:	2000cf2c 	.word	0x2000cf2c
  4009f8:	2000000c 	.word	0x2000000c
  4009fc:	2000089c 	.word	0x2000089c
  400a00:	2000cf40 	.word	0x2000cf40
  400a04:	20000008 	.word	0x20000008
  400a08:	2000cf38 	.word	0x2000cf38
  400a0c:	20000014 	.word	0x20000014
  400a10:	004026e9 	.word	0x004026e9
  400a14:	00401eed 	.word	0x00401eed
  400a18:	00402495 	.word	0x00402495
  400a1c:	004029f5 	.word	0x004029f5
  400a20:	20000984 	.word	0x20000984
  400a24:	20000944 	.word	0x20000944
  400a28:	20000000 	.word	0x20000000
  400a2c:	2000cf28 	.word	0x2000cf28
  400a30:	20000a64 	.word	0x20000a64
  400a34:	2000cf48 	.word	0x2000cf48
  400a38:	20000010 	.word	0x20000010
  400a3c:	004023c9 	.word	0x004023c9
  400a40:	00402131 	.word	0x00402131
  400a44:	004023ed 	.word	0x004023ed

00400a48 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400a48:	460b      	mov	r3, r1
  400a4a:	b119      	cbz	r1, 400a54 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;				
  400a4c:	6809      	ldr	r1, [r1, #0]
  400a4e:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  400a50:	685b      	ldr	r3, [r3, #4]
  400a52:	60c3      	str	r3, [r0, #12]
	}
	
	if (p_next_packet) {
  400a54:	b11a      	cbz	r2, 400a5e <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  400a56:	6813      	ldr	r3, [r2, #0]
  400a58:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  400a5a:	6853      	ldr	r3, [r2, #4]
  400a5c:	61c3      	str	r3, [r0, #28]
  400a5e:	4770      	bx	lr

00400a60 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400a60:	460b      	mov	r3, r1
  400a62:	b119      	cbz	r1, 400a6c <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;		// set receive pointer register to the address of the self-defined receive buffer
  400a64:	6809      	ldr	r1, [r1, #0]
  400a66:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;		// set receiver counter register to the size of self-defined receive buffer
  400a68:	685b      	ldr	r3, [r3, #4]
  400a6a:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  400a6c:	b11a      	cbz	r2, 400a76 <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  400a6e:	6813      	ldr	r3, [r2, #0]
  400a70:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  400a72:	6853      	ldr	r3, [r2, #4]
  400a74:	6143      	str	r3, [r0, #20]
  400a76:	4770      	bx	lr

00400a78 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400a78:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  400a7c:	05c9      	lsls	r1, r1, #23
  400a7e:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
  400a80:	6201      	str	r1, [r0, #32]
  400a82:	4770      	bx	lr

00400a84 <rstc_start_software_reset>:
		Rstc *p_rstc)
{
#if (SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST;
#else
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
  400a84:	4b01      	ldr	r3, [pc, #4]	; (400a8c <rstc_start_software_reset+0x8>)
  400a86:	6003      	str	r3, [r0, #0]
  400a88:	4770      	bx	lr
  400a8a:	bf00      	nop
  400a8c:	a5000005 	.word	0xa5000005

00400a90 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400a90:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a92:	b083      	sub	sp, #12
  400a94:	4605      	mov	r5, r0
  400a96:	460c      	mov	r4, r1
	uint32_t val = 0;
  400a98:	2300      	movs	r3, #0
  400a9a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400a9c:	4b18      	ldr	r3, [pc, #96]	; (400b00 <usart_serial_getchar+0x70>)
  400a9e:	4298      	cmp	r0, r3
  400aa0:	d00a      	beq.n	400ab8 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400aa2:	4b18      	ldr	r3, [pc, #96]	; (400b04 <usart_serial_getchar+0x74>)
  400aa4:	4298      	cmp	r0, r3
  400aa6:	d00f      	beq.n	400ac8 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400aa8:	4b17      	ldr	r3, [pc, #92]	; (400b08 <usart_serial_getchar+0x78>)
  400aaa:	4298      	cmp	r0, r3
  400aac:	d014      	beq.n	400ad8 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400aae:	4b17      	ldr	r3, [pc, #92]	; (400b0c <usart_serial_getchar+0x7c>)
  400ab0:	429d      	cmp	r5, r3
  400ab2:	d01b      	beq.n	400aec <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400ab4:	b003      	add	sp, #12
  400ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400ab8:	461f      	mov	r7, r3
  400aba:	4e15      	ldr	r6, [pc, #84]	; (400b10 <usart_serial_getchar+0x80>)
  400abc:	4621      	mov	r1, r4
  400abe:	4638      	mov	r0, r7
  400ac0:	47b0      	blx	r6
  400ac2:	2800      	cmp	r0, #0
  400ac4:	d1fa      	bne.n	400abc <usart_serial_getchar+0x2c>
  400ac6:	e7f2      	b.n	400aae <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400ac8:	461e      	mov	r6, r3
  400aca:	4d11      	ldr	r5, [pc, #68]	; (400b10 <usart_serial_getchar+0x80>)
  400acc:	4621      	mov	r1, r4
  400ace:	4630      	mov	r0, r6
  400ad0:	47a8      	blx	r5
  400ad2:	2800      	cmp	r0, #0
  400ad4:	d1fa      	bne.n	400acc <usart_serial_getchar+0x3c>
  400ad6:	e7ed      	b.n	400ab4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400ad8:	461e      	mov	r6, r3
  400ada:	4d0e      	ldr	r5, [pc, #56]	; (400b14 <usart_serial_getchar+0x84>)
  400adc:	a901      	add	r1, sp, #4
  400ade:	4630      	mov	r0, r6
  400ae0:	47a8      	blx	r5
  400ae2:	2800      	cmp	r0, #0
  400ae4:	d1fa      	bne.n	400adc <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400ae6:	9b01      	ldr	r3, [sp, #4]
  400ae8:	7023      	strb	r3, [r4, #0]
  400aea:	e7e3      	b.n	400ab4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400aec:	461e      	mov	r6, r3
  400aee:	4d09      	ldr	r5, [pc, #36]	; (400b14 <usart_serial_getchar+0x84>)
  400af0:	a901      	add	r1, sp, #4
  400af2:	4630      	mov	r0, r6
  400af4:	47a8      	blx	r5
  400af6:	2800      	cmp	r0, #0
  400af8:	d1fa      	bne.n	400af0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400afa:	9b01      	ldr	r3, [sp, #4]
  400afc:	7023      	strb	r3, [r4, #0]
}
  400afe:	e7d9      	b.n	400ab4 <usart_serial_getchar+0x24>
  400b00:	400e0600 	.word	0x400e0600
  400b04:	40060600 	.word	0x40060600
  400b08:	400a0000 	.word	0x400a0000
  400b0c:	400a4000 	.word	0x400a4000
  400b10:	0040168f 	.word	0x0040168f
  400b14:	004016d1 	.word	0x004016d1

00400b18 <usart_serial_putchar>:
{
  400b18:	b570      	push	{r4, r5, r6, lr}
  400b1a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400b1c:	4b18      	ldr	r3, [pc, #96]	; (400b80 <usart_serial_putchar+0x68>)
  400b1e:	4298      	cmp	r0, r3
  400b20:	d00a      	beq.n	400b38 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400b22:	4b18      	ldr	r3, [pc, #96]	; (400b84 <usart_serial_putchar+0x6c>)
  400b24:	4298      	cmp	r0, r3
  400b26:	d010      	beq.n	400b4a <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400b28:	4b17      	ldr	r3, [pc, #92]	; (400b88 <usart_serial_putchar+0x70>)
  400b2a:	4298      	cmp	r0, r3
  400b2c:	d016      	beq.n	400b5c <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400b2e:	4b17      	ldr	r3, [pc, #92]	; (400b8c <usart_serial_putchar+0x74>)
  400b30:	4298      	cmp	r0, r3
  400b32:	d01c      	beq.n	400b6e <usart_serial_putchar+0x56>
	return 0;
  400b34:	2000      	movs	r0, #0
}
  400b36:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400b38:	461e      	mov	r6, r3
  400b3a:	4d15      	ldr	r5, [pc, #84]	; (400b90 <usart_serial_putchar+0x78>)
  400b3c:	4621      	mov	r1, r4
  400b3e:	4630      	mov	r0, r6
  400b40:	47a8      	blx	r5
  400b42:	2800      	cmp	r0, #0
  400b44:	d1fa      	bne.n	400b3c <usart_serial_putchar+0x24>
		return 1;
  400b46:	2001      	movs	r0, #1
  400b48:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400b4a:	461e      	mov	r6, r3
  400b4c:	4d10      	ldr	r5, [pc, #64]	; (400b90 <usart_serial_putchar+0x78>)
  400b4e:	4621      	mov	r1, r4
  400b50:	4630      	mov	r0, r6
  400b52:	47a8      	blx	r5
  400b54:	2800      	cmp	r0, #0
  400b56:	d1fa      	bne.n	400b4e <usart_serial_putchar+0x36>
		return 1;
  400b58:	2001      	movs	r0, #1
  400b5a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400b5c:	461e      	mov	r6, r3
  400b5e:	4d0d      	ldr	r5, [pc, #52]	; (400b94 <usart_serial_putchar+0x7c>)
  400b60:	4621      	mov	r1, r4
  400b62:	4630      	mov	r0, r6
  400b64:	47a8      	blx	r5
  400b66:	2800      	cmp	r0, #0
  400b68:	d1fa      	bne.n	400b60 <usart_serial_putchar+0x48>
		return 1;
  400b6a:	2001      	movs	r0, #1
  400b6c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400b6e:	461e      	mov	r6, r3
  400b70:	4d08      	ldr	r5, [pc, #32]	; (400b94 <usart_serial_putchar+0x7c>)
  400b72:	4621      	mov	r1, r4
  400b74:	4630      	mov	r0, r6
  400b76:	47a8      	blx	r5
  400b78:	2800      	cmp	r0, #0
  400b7a:	d1fa      	bne.n	400b72 <usart_serial_putchar+0x5a>
		return 1;
  400b7c:	2001      	movs	r0, #1
  400b7e:	bd70      	pop	{r4, r5, r6, pc}
  400b80:	400e0600 	.word	0x400e0600
  400b84:	40060600 	.word	0x40060600
  400b88:	400a0000 	.word	0x400a0000
  400b8c:	400a4000 	.word	0x400a4000
  400b90:	0040167f 	.word	0x0040167f
  400b94:	004016bd 	.word	0x004016bd

00400b98 <configure_UART>:


/* Configure UART module with desired settings*/

void configure_UART(void)
{
  400b98:	b530      	push	{r4, r5, lr}
  400b9a:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400b9c:	2007      	movs	r0, #7
  400b9e:	4d12      	ldr	r5, [pc, #72]	; (400be8 <configure_UART+0x50>)
  400ba0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400ba2:	4c12      	ldr	r4, [pc, #72]	; (400bec <configure_UART+0x54>)
  400ba4:	4b12      	ldr	r3, [pc, #72]	; (400bf0 <configure_UART+0x58>)
  400ba6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400ba8:	4a12      	ldr	r2, [pc, #72]	; (400bf4 <configure_UART+0x5c>)
  400baa:	4b13      	ldr	r3, [pc, #76]	; (400bf8 <configure_UART+0x60>)
  400bac:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400bae:	4a13      	ldr	r2, [pc, #76]	; (400bfc <configure_UART+0x64>)
  400bb0:	4b13      	ldr	r3, [pc, #76]	; (400c00 <configure_UART+0x68>)
  400bb2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400bb4:	4b13      	ldr	r3, [pc, #76]	; (400c04 <configure_UART+0x6c>)
  400bb6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400bb8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400bbc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400bbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400bc2:	9303      	str	r3, [sp, #12]
  400bc4:	2007      	movs	r0, #7
  400bc6:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  400bc8:	a901      	add	r1, sp, #4
  400bca:	4620      	mov	r0, r4
  400bcc:	4b0e      	ldr	r3, [pc, #56]	; (400c08 <configure_UART+0x70>)
  400bce:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400bd0:	4d0e      	ldr	r5, [pc, #56]	; (400c0c <configure_UART+0x74>)
  400bd2:	682b      	ldr	r3, [r5, #0]
  400bd4:	2100      	movs	r1, #0
  400bd6:	6898      	ldr	r0, [r3, #8]
  400bd8:	4c0d      	ldr	r4, [pc, #52]	; (400c10 <configure_UART+0x78>)
  400bda:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400bdc:	682b      	ldr	r3, [r5, #0]
  400bde:	2100      	movs	r1, #0
  400be0:	6858      	ldr	r0, [r3, #4]
  400be2:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY											
	};
		
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);							
	stdio_serial_init(CONF_UART, &uart_serial_options);							
}
  400be4:	b005      	add	sp, #20
  400be6:	bd30      	pop	{r4, r5, pc}
  400be8:	00401539 	.word	0x00401539
  400bec:	400e0600 	.word	0x400e0600
  400bf0:	2000cf84 	.word	0x2000cf84
  400bf4:	00400b19 	.word	0x00400b19
  400bf8:	2000cf80 	.word	0x2000cf80
  400bfc:	00400a91 	.word	0x00400a91
  400c00:	2000cf7c 	.word	0x2000cf7c
  400c04:	05b8d800 	.word	0x05b8d800
  400c08:	0040163f 	.word	0x0040163f
  400c0c:	20000038 	.word	0x20000038
  400c10:	00402bdd 	.word	0x00402bdd

00400c14 <send_cycle_plot>:


/* Send the plotting data (8334 12-bit sample values) of one BPM80-cycle */

void send_cycle_plot()
{	
  400c14:	b508      	push	{r3, lr}
	usart_serial_write_packet(UART0, &size_indicator, 2);
  400c16:	2202      	movs	r2, #2
  400c18:	4906      	ldr	r1, [pc, #24]	; (400c34 <send_cycle_plot+0x20>)
  400c1a:	4807      	ldr	r0, [pc, #28]	; (400c38 <send_cycle_plot+0x24>)
  400c1c:	4b07      	ldr	r3, [pc, #28]	; (400c3c <send_cycle_plot+0x28>)
  400c1e:	4798      	blx	r3
	pdc_tx_init(g_p_uart_pdc, &cycle_plot_packet, NULL);
  400c20:	2200      	movs	r2, #0
  400c22:	4907      	ldr	r1, [pc, #28]	; (400c40 <send_cycle_plot+0x2c>)
  400c24:	4b07      	ldr	r3, [pc, #28]	; (400c44 <send_cycle_plot+0x30>)
  400c26:	6818      	ldr	r0, [r3, #0]
  400c28:	4b07      	ldr	r3, [pc, #28]	; (400c48 <send_cycle_plot+0x34>)
  400c2a:	4798      	blx	r3
	config[3] = 0;														// reset the plotting data flag in configuration array
  400c2c:	2200      	movs	r2, #0
  400c2e:	4b07      	ldr	r3, [pc, #28]	; (400c4c <send_cycle_plot+0x38>)
  400c30:	70da      	strb	r2, [r3, #3]
  400c32:	bd08      	pop	{r3, pc}
  400c34:	2000001e 	.word	0x2000001e
  400c38:	400e0600 	.word	0x400e0600
  400c3c:	00400e15 	.word	0x00400e15
  400c40:	2000cf58 	.word	0x2000cf58
  400c44:	2000cf60 	.word	0x2000cf60
  400c48:	00400a49 	.word	0x00400a49
  400c4c:	20000018 	.word	0x20000018

00400c50 <send_beam_parameters>:


/* Send beam parameter values (12 double-precision values) */

void send_beam_parameters()
{
  400c50:	b510      	push	{r4, lr}
	compute_avgd_parameters();
  400c52:	4b08      	ldr	r3, [pc, #32]	; (400c74 <send_beam_parameters+0x24>)
  400c54:	4798      	blx	r3
	//uint16_t size_indicator = BUFFER_SIZE_PARAMETERS;
	beam_parameters_bytes[0] = BUFFER_SIZE_PARAMETERS & 0xff;
  400c56:	4b08      	ldr	r3, [pc, #32]	; (400c78 <send_beam_parameters+0x28>)
  400c58:	2226      	movs	r2, #38	; 0x26
  400c5a:	701a      	strb	r2, [r3, #0]
	beam_parameters_bytes[1] = (BUFFER_SIZE_PARAMETERS << 8) & 0xff00;
  400c5c:	2400      	movs	r4, #0
  400c5e:	705c      	strb	r4, [r3, #1]
	pdc_tx_init(g_p_uart_pdc, &beam_parameters_packet, NULL);
  400c60:	4622      	mov	r2, r4
  400c62:	4906      	ldr	r1, [pc, #24]	; (400c7c <send_beam_parameters+0x2c>)
  400c64:	4b06      	ldr	r3, [pc, #24]	; (400c80 <send_beam_parameters+0x30>)
  400c66:	6818      	ldr	r0, [r3, #0]
  400c68:	4b06      	ldr	r3, [pc, #24]	; (400c84 <send_beam_parameters+0x34>)
  400c6a:	4798      	blx	r3
	config[2] = 0;																		// reset parameter data flag in configuration array
  400c6c:	4b06      	ldr	r3, [pc, #24]	; (400c88 <send_beam_parameters+0x38>)
  400c6e:	709c      	strb	r4, [r3, #2]
  400c70:	bd10      	pop	{r4, pc}
  400c72:	bf00      	nop
  400c74:	00400819 	.word	0x00400819
  400c78:	2000091c 	.word	0x2000091c
  400c7c:	2000cf50 	.word	0x2000cf50
  400c80:	2000cf60 	.word	0x2000cf60
  400c84:	00400a49 	.word	0x00400a49
  400c88:	20000018 	.word	0x20000018

00400c8c <UART0_Handler>:


/* Interrupt handler for UART interrupt. */
 
void console_uart_irq_handler(void)
{
  400c8c:	b510      	push	{r4, lr}
	//Get UART status and check if PDC receive buffer is full 
	if ((uart_get_status(CONSOLE_UART) & UART_SR_RXBUFF) == UART_SR_RXBUFF) {
  400c8e:	4814      	ldr	r0, [pc, #80]	; (400ce0 <UART0_Handler+0x54>)
  400c90:	4b14      	ldr	r3, [pc, #80]	; (400ce4 <UART0_Handler+0x58>)
  400c92:	4798      	blx	r3
  400c94:	f410 5f80 	tst.w	r0, #4096	; 0x1000
  400c98:	d100      	bne.n	400c9c <UART0_Handler+0x10>
  400c9a:	bd10      	pop	{r4, pc}
		
		// Configure PDC for data transfer (RX and TX) 
		
		pdc_rx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);				// pass the PDC register base and the address of the transfer buffer, will start the transfer and wait until expected amount of data is received (which will trigger interrupt)
  400c9c:	2200      	movs	r2, #0
  400c9e:	4912      	ldr	r1, [pc, #72]	; (400ce8 <UART0_Handler+0x5c>)
  400ca0:	4b12      	ldr	r3, [pc, #72]	; (400cec <UART0_Handler+0x60>)
  400ca2:	6818      	ldr	r0, [r3, #0]
  400ca4:	4b12      	ldr	r3, [pc, #72]	; (400cf0 <UART0_Handler+0x64>)
  400ca6:	4798      	blx	r3
		
		uint8_t command_index = 0;
		if(host_command[0] == 255)											// check front delimiter of the host packet
  400ca8:	4b12      	ldr	r3, [pc, #72]	; (400cf4 <UART0_Handler+0x68>)
  400caa:	781b      	ldrb	r3, [r3, #0]
  400cac:	2bff      	cmp	r3, #255	; 0xff
  400cae:	d1f4      	bne.n	400c9a <UART0_Handler+0xe>
		{
			command_index= host_command[1];											// second element of host command contains index in configuration array (indicates which setting to change)
  400cb0:	4b10      	ldr	r3, [pc, #64]	; (400cf4 <UART0_Handler+0x68>)
  400cb2:	7859      	ldrb	r1, [r3, #1]
			config[command_index] = host_command[2];								// third element is the new value of the specified setting
  400cb4:	7898      	ldrb	r0, [r3, #2]
  400cb6:	4b10      	ldr	r3, [pc, #64]	; (400cf8 <UART0_Handler+0x6c>)
  400cb8:	5458      	strb	r0, [r3, r1]
			if(command_index!= 2 && command_index!= 3){
  400cba:	1e8b      	subs	r3, r1, #2
  400cbc:	b2db      	uxtb	r3, r3
  400cbe:	2b01      	cmp	r3, #1
  400cc0:	d9eb      	bls.n	400c9a <UART0_Handler+0xe>
				echo[0] = BUFFER_SIZE_ECHO & 0xff;
  400cc2:	4b0e      	ldr	r3, [pc, #56]	; (400cfc <UART0_Handler+0x70>)
  400cc4:	2205      	movs	r2, #5
  400cc6:	701a      	strb	r2, [r3, #0]
				echo[1] = (BUFFER_SIZE_ECHO << 8) & 0xff00;
  400cc8:	2200      	movs	r2, #0
  400cca:	705a      	strb	r2, [r3, #1]
				for (int i=0;i<3;i++)
				{
					echo[i+2]=host_command[i];
  400ccc:	24ff      	movs	r4, #255	; 0xff
  400cce:	709c      	strb	r4, [r3, #2]
  400cd0:	70d9      	strb	r1, [r3, #3]
  400cd2:	7118      	strb	r0, [r3, #4]
				}
				pdc_tx_init(g_p_uart_pdc, &echo_packet, NULL);
  400cd4:	490a      	ldr	r1, [pc, #40]	; (400d00 <UART0_Handler+0x74>)
  400cd6:	4b05      	ldr	r3, [pc, #20]	; (400cec <UART0_Handler+0x60>)
  400cd8:	6818      	ldr	r0, [r3, #0]
  400cda:	4b0a      	ldr	r3, [pc, #40]	; (400d04 <UART0_Handler+0x78>)
  400cdc:	4798      	blx	r3
		
		//if (command_index == 0) pdc_tx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);						// This transfer echoes the received packet that caused this interrupt, so computer application can check if command is correctly received (only for debugging)
	}
	
	
}
  400cde:	e7dc      	b.n	400c9a <UART0_Handler+0xe>
  400ce0:	400e0600 	.word	0x400e0600
  400ce4:	0040167b 	.word	0x0040167b
  400ce8:	2000cf6c 	.word	0x2000cf6c
  400cec:	2000cf60 	.word	0x2000cf60
  400cf0:	00400a61 	.word	0x00400a61
  400cf4:	20000ae4 	.word	0x20000ae4
  400cf8:	20000018 	.word	0x20000018
  400cfc:	2000cf30 	.word	0x2000cf30
  400d00:	2000cf64 	.word	0x2000cf64
  400d04:	00400a49 	.word	0x00400a49

00400d08 <pdc_uart_initialization>:


void pdc_uart_initialization(void)
{
  400d08:	b570      	push	{r4, r5, r6, lr}
	/* Initialize the UART console */
	configure_UART();
  400d0a:	4b18      	ldr	r3, [pc, #96]	; (400d6c <pdc_uart_initialization+0x64>)
  400d0c:	4798      	blx	r3

	/* Get pointer to UART PDC register base */
	g_p_uart_pdc = uart_get_pdc_base(CONSOLE_UART);
  400d0e:	4d18      	ldr	r5, [pc, #96]	; (400d70 <pdc_uart_initialization+0x68>)
  400d10:	4628      	mov	r0, r5
  400d12:	4b18      	ldr	r3, [pc, #96]	; (400d74 <pdc_uart_initialization+0x6c>)
  400d14:	4798      	blx	r3
  400d16:	4e18      	ldr	r6, [pc, #96]	; (400d78 <pdc_uart_initialization+0x70>)
  400d18:	6030      	str	r0, [r6, #0]

	/* Initialize PDC data packet for transfer (receive/transmit) by specifying base pointer and size of the packet */
	g_pdc_uart_packet.ul_addr = (uint32_t) host_command;					// receive buffer which we also echo back to the computer
  400d1a:	4c18      	ldr	r4, [pc, #96]	; (400d7c <pdc_uart_initialization+0x74>)
  400d1c:	4b18      	ldr	r3, [pc, #96]	; (400d80 <pdc_uart_initialization+0x78>)
  400d1e:	6023      	str	r3, [r4, #0]
	g_pdc_uart_packet.ul_size = BUFFER_SIZE_HOST_COMMAND;								
  400d20:	2303      	movs	r3, #3
  400d22:	6063      	str	r3, [r4, #4]
	
	beam_parameters_packet.ul_addr = (uint32_t) beam_parameters_bytes;			// transmit packet/buffer for beam parameters
  400d24:	4b17      	ldr	r3, [pc, #92]	; (400d84 <pdc_uart_initialization+0x7c>)
  400d26:	4a18      	ldr	r2, [pc, #96]	; (400d88 <pdc_uart_initialization+0x80>)
  400d28:	601a      	str	r2, [r3, #0]
	beam_parameters_packet.ul_size = BUFFER_SIZE_PARAMETERS;
  400d2a:	2226      	movs	r2, #38	; 0x26
  400d2c:	605a      	str	r2, [r3, #4]
	
	cycle_plot_packet.ul_addr = (uint32_t) transmit_buffer;					// start address of transfer packet data is the buffer we defined ourselves
  400d2e:	4b17      	ldr	r3, [pc, #92]	; (400d8c <pdc_uart_initialization+0x84>)
  400d30:	4a17      	ldr	r2, [pc, #92]	; (400d90 <pdc_uart_initialization+0x88>)
  400d32:	6812      	ldr	r2, [r2, #0]
  400d34:	601a      	str	r2, [r3, #0]
	cycle_plot_packet.ul_size = BUFFER_SIZE_PLOTDATA;
  400d36:	f244 121c 	movw	r2, #16668	; 0x411c
  400d3a:	605a      	str	r2, [r3, #4]
	
	echo_packet.ul_addr = (uint32_t) echo;
  400d3c:	4b15      	ldr	r3, [pc, #84]	; (400d94 <pdc_uart_initialization+0x8c>)
  400d3e:	4a16      	ldr	r2, [pc, #88]	; (400d98 <pdc_uart_initialization+0x90>)
  400d40:	601a      	str	r2, [r3, #0]
	echo_packet.ul_size = BUFFER_SIZE_ECHO;
  400d42:	2205      	movs	r2, #5
  400d44:	605a      	str	r2, [r3, #4]
	
	/* Enable PDC transfers, here we set both transmitter and receiver high (full duplex). Receiver and transmitter hardware operate independently. 
	   We start the receive transfer, transmits are always started in response to a received command*/
	pdc_enable_transfer(g_p_uart_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400d46:	f240 1101 	movw	r1, #257	; 0x101
  400d4a:	4b14      	ldr	r3, [pc, #80]	; (400d9c <pdc_uart_initialization+0x94>)
  400d4c:	4798      	blx	r3
	pdc_rx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);
  400d4e:	2200      	movs	r2, #0
  400d50:	4621      	mov	r1, r4
  400d52:	6830      	ldr	r0, [r6, #0]
  400d54:	4b12      	ldr	r3, [pc, #72]	; (400da0 <pdc_uart_initialization+0x98>)
  400d56:	4798      	blx	r3
	
	/* Enable UART IRQ for receive buffer full (host command received)*/
	uart_enable_interrupt(CONSOLE_UART, UART_IER_RXBUFF);
  400d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400d5c:	4628      	mov	r0, r5
  400d5e:	4b11      	ldr	r3, [pc, #68]	; (400da4 <pdc_uart_initialization+0x9c>)
  400d60:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d62:	2280      	movs	r2, #128	; 0x80
  400d64:	4b10      	ldr	r3, [pc, #64]	; (400da8 <pdc_uart_initialization+0xa0>)
  400d66:	601a      	str	r2, [r3, #0]
  400d68:	bd70      	pop	{r4, r5, r6, pc}
  400d6a:	bf00      	nop
  400d6c:	00400b99 	.word	0x00400b99
  400d70:	400e0600 	.word	0x400e0600
  400d74:	004016a1 	.word	0x004016a1
  400d78:	2000cf60 	.word	0x2000cf60
  400d7c:	2000cf6c 	.word	0x2000cf6c
  400d80:	20000ae4 	.word	0x20000ae4
  400d84:	2000cf50 	.word	0x2000cf50
  400d88:	2000091c 	.word	0x2000091c
  400d8c:	2000cf58 	.word	0x2000cf58
  400d90:	20000030 	.word	0x20000030
  400d94:	2000cf64 	.word	0x2000cf64
  400d98:	2000cf30 	.word	0x2000cf30
  400d9c:	00400a79 	.word	0x00400a79
  400da0:	00400a61 	.word	0x00400a61
  400da4:	00401677 	.word	0x00401677
  400da8:	e000e100 	.word	0xe000e100

00400dac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400dac:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400dae:	480e      	ldr	r0, [pc, #56]	; (400de8 <sysclk_init+0x3c>)
  400db0:	4b0e      	ldr	r3, [pc, #56]	; (400dec <sysclk_init+0x40>)
  400db2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400db4:	213e      	movs	r1, #62	; 0x3e
  400db6:	2000      	movs	r0, #0
  400db8:	4b0d      	ldr	r3, [pc, #52]	; (400df0 <sysclk_init+0x44>)
  400dba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400dbc:	4c0d      	ldr	r4, [pc, #52]	; (400df4 <sysclk_init+0x48>)
  400dbe:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400dc0:	2800      	cmp	r0, #0
  400dc2:	d0fc      	beq.n	400dbe <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400dc4:	4b0c      	ldr	r3, [pc, #48]	; (400df8 <sysclk_init+0x4c>)
  400dc6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400dc8:	4a0c      	ldr	r2, [pc, #48]	; (400dfc <sysclk_init+0x50>)
  400dca:	4b0d      	ldr	r3, [pc, #52]	; (400e00 <sysclk_init+0x54>)
  400dcc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400dce:	4c0d      	ldr	r4, [pc, #52]	; (400e04 <sysclk_init+0x58>)
  400dd0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400dd2:	2800      	cmp	r0, #0
  400dd4:	d0fc      	beq.n	400dd0 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400dd6:	2010      	movs	r0, #16
  400dd8:	4b0b      	ldr	r3, [pc, #44]	; (400e08 <sysclk_init+0x5c>)
  400dda:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400ddc:	4b0b      	ldr	r3, [pc, #44]	; (400e0c <sysclk_init+0x60>)
  400dde:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400de0:	480b      	ldr	r0, [pc, #44]	; (400e10 <sysclk_init+0x64>)
  400de2:	4b02      	ldr	r3, [pc, #8]	; (400dec <sysclk_init+0x40>)
  400de4:	4798      	blx	r3
  400de6:	bd10      	pop	{r4, pc}
  400de8:	07270e00 	.word	0x07270e00
  400dec:	004018c1 	.word	0x004018c1
  400df0:	004014b5 	.word	0x004014b5
  400df4:	00401509 	.word	0x00401509
  400df8:	00401519 	.word	0x00401519
  400dfc:	200f3f01 	.word	0x200f3f01
  400e00:	400e0400 	.word	0x400e0400
  400e04:	00401529 	.word	0x00401529
  400e08:	00401451 	.word	0x00401451
  400e0c:	004017b5 	.word	0x004017b5
  400e10:	05b8d800 	.word	0x05b8d800

00400e14 <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  400e14:	2a00      	cmp	r2, #0
  400e16:	d037      	beq.n	400e88 <usart_serial_write_packet+0x74>
{
  400e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e1c:	4693      	mov	fp, r2
  400e1e:	4605      	mov	r5, r0
  400e20:	460f      	mov	r7, r1
  400e22:	448b      	add	fp, r1
	if (UART0 == (Uart*)p_usart) {
  400e24:	f8df 8070 	ldr.w	r8, [pc, #112]	; 400e98 <usart_serial_write_packet+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  400e28:	4e18      	ldr	r6, [pc, #96]	; (400e8c <usart_serial_write_packet+0x78>)
	if (UART1 == (Uart*)p_usart) {
  400e2a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400e9c <usart_serial_write_packet+0x88>
  400e2e:	e006      	b.n	400e3e <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400e30:	4621      	mov	r1, r4
  400e32:	4640      	mov	r0, r8
  400e34:	47b0      	blx	r6
  400e36:	2800      	cmp	r0, #0
  400e38:	d1fa      	bne.n	400e30 <usart_serial_write_packet+0x1c>
	while (len) {
  400e3a:	45bb      	cmp	fp, r7
  400e3c:	d021      	beq.n	400e82 <usart_serial_write_packet+0x6e>
		usart_serial_putchar(usart, *data);
  400e3e:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  400e42:	4545      	cmp	r5, r8
  400e44:	d0f4      	beq.n	400e30 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  400e46:	454d      	cmp	r5, r9
  400e48:	d00d      	beq.n	400e66 <usart_serial_write_packet+0x52>
	if (USART0 == p_usart) {
  400e4a:	4b11      	ldr	r3, [pc, #68]	; (400e90 <usart_serial_write_packet+0x7c>)
  400e4c:	429d      	cmp	r5, r3
  400e4e:	d010      	beq.n	400e72 <usart_serial_write_packet+0x5e>
	if (USART1 == p_usart) {
  400e50:	4b10      	ldr	r3, [pc, #64]	; (400e94 <usart_serial_write_packet+0x80>)
  400e52:	429d      	cmp	r5, r3
  400e54:	d1f1      	bne.n	400e3a <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400e56:	f8df a048 	ldr.w	sl, [pc, #72]	; 400ea0 <usart_serial_write_packet+0x8c>
  400e5a:	4621      	mov	r1, r4
  400e5c:	480d      	ldr	r0, [pc, #52]	; (400e94 <usart_serial_write_packet+0x80>)
  400e5e:	47d0      	blx	sl
  400e60:	2800      	cmp	r0, #0
  400e62:	d1fa      	bne.n	400e5a <usart_serial_write_packet+0x46>
  400e64:	e7e9      	b.n	400e3a <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400e66:	4621      	mov	r1, r4
  400e68:	4648      	mov	r0, r9
  400e6a:	47b0      	blx	r6
  400e6c:	2800      	cmp	r0, #0
  400e6e:	d1fa      	bne.n	400e66 <usart_serial_write_packet+0x52>
  400e70:	e7e3      	b.n	400e3a <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400e72:	f8df a02c 	ldr.w	sl, [pc, #44]	; 400ea0 <usart_serial_write_packet+0x8c>
  400e76:	4621      	mov	r1, r4
  400e78:	4805      	ldr	r0, [pc, #20]	; (400e90 <usart_serial_write_packet+0x7c>)
  400e7a:	47d0      	blx	sl
  400e7c:	2800      	cmp	r0, #0
  400e7e:	d1fa      	bne.n	400e76 <usart_serial_write_packet+0x62>
  400e80:	e7db      	b.n	400e3a <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  400e82:	2000      	movs	r0, #0
  400e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400e88:	2000      	movs	r0, #0
  400e8a:	4770      	bx	lr
  400e8c:	0040167f 	.word	0x0040167f
  400e90:	400a0000 	.word	0x400a0000
  400e94:	400a4000 	.word	0x400a4000
  400e98:	400e0600 	.word	0x400e0600
  400e9c:	40060600 	.word	0x40060600
  400ea0:	004016bd 	.word	0x004016bd

00400ea4 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  400ea4:	2a00      	cmp	r2, #0
  400ea6:	d03f      	beq.n	400f28 <usart_serial_read_packet+0x84>
{
  400ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400eac:	b083      	sub	sp, #12
  400eae:	4606      	mov	r6, r0
  400eb0:	460c      	mov	r4, r1
  400eb2:	4693      	mov	fp, r2
  400eb4:	448b      	add	fp, r1
	if (UART0 == (Uart*)p_usart) {
  400eb6:	4f1d      	ldr	r7, [pc, #116]	; (400f2c <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  400eb8:	4d1d      	ldr	r5, [pc, #116]	; (400f30 <usart_serial_read_packet+0x8c>)
	if (UART1 == (Uart*)p_usart) {
  400eba:	f8df a080 	ldr.w	sl, [pc, #128]	; 400f3c <usart_serial_read_packet+0x98>
  400ebe:	e00d      	b.n	400edc <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  400ec0:	4621      	mov	r1, r4
  400ec2:	4638      	mov	r0, r7
  400ec4:	47a8      	blx	r5
  400ec6:	2800      	cmp	r0, #0
  400ec8:	d1fa      	bne.n	400ec0 <usart_serial_read_packet+0x1c>
  400eca:	e010      	b.n	400eee <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  400ecc:	4621      	mov	r1, r4
  400ece:	4650      	mov	r0, sl
  400ed0:	47a8      	blx	r5
  400ed2:	2800      	cmp	r0, #0
  400ed4:	d1fa      	bne.n	400ecc <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  400ed6:	3401      	adds	r4, #1
	while (len) {
  400ed8:	455c      	cmp	r4, fp
  400eda:	d021      	beq.n	400f20 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400edc:	2300      	movs	r3, #0
  400ede:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400ee0:	42be      	cmp	r6, r7
  400ee2:	d0ed      	beq.n	400ec0 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  400ee4:	4556      	cmp	r6, sl
  400ee6:	d0f1      	beq.n	400ecc <usart_serial_read_packet+0x28>
	if (USART0 == p_usart) {
  400ee8:	4b12      	ldr	r3, [pc, #72]	; (400f34 <usart_serial_read_packet+0x90>)
  400eea:	429e      	cmp	r6, r3
  400eec:	d00d      	beq.n	400f0a <usart_serial_read_packet+0x66>
	if (USART1 == p_usart) {
  400eee:	4b12      	ldr	r3, [pc, #72]	; (400f38 <usart_serial_read_packet+0x94>)
  400ef0:	429e      	cmp	r6, r3
  400ef2:	d1f0      	bne.n	400ed6 <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400ef4:	4699      	mov	r9, r3
  400ef6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400f40 <usart_serial_read_packet+0x9c>
  400efa:	a901      	add	r1, sp, #4
  400efc:	4648      	mov	r0, r9
  400efe:	47c0      	blx	r8
  400f00:	2800      	cmp	r0, #0
  400f02:	d1fa      	bne.n	400efa <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  400f04:	9b01      	ldr	r3, [sp, #4]
  400f06:	7023      	strb	r3, [r4, #0]
  400f08:	e7e5      	b.n	400ed6 <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400f0a:	4699      	mov	r9, r3
  400f0c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 400f40 <usart_serial_read_packet+0x9c>
  400f10:	a901      	add	r1, sp, #4
  400f12:	4648      	mov	r0, r9
  400f14:	47c0      	blx	r8
  400f16:	2800      	cmp	r0, #0
  400f18:	d1fa      	bne.n	400f10 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  400f1a:	9b01      	ldr	r3, [sp, #4]
  400f1c:	7023      	strb	r3, [r4, #0]
  400f1e:	e7da      	b.n	400ed6 <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  400f20:	2000      	movs	r0, #0
  400f22:	b003      	add	sp, #12
  400f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400f28:	2000      	movs	r0, #0
  400f2a:	4770      	bx	lr
  400f2c:	400e0600 	.word	0x400e0600
  400f30:	0040168f 	.word	0x0040168f
  400f34:	400a0000 	.word	0x400a0000
  400f38:	400a4000 	.word	0x400a4000
  400f3c:	40060600 	.word	0x40060600
  400f40:	004016d1 	.word	0x004016d1

00400f44 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400f48:	b980      	cbnz	r0, 400f6c <_read+0x28>
  400f4a:	460c      	mov	r4, r1
  400f4c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400f4e:	2a00      	cmp	r2, #0
  400f50:	dd0f      	ble.n	400f72 <_read+0x2e>
  400f52:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400f54:	4e08      	ldr	r6, [pc, #32]	; (400f78 <_read+0x34>)
  400f56:	4d09      	ldr	r5, [pc, #36]	; (400f7c <_read+0x38>)
  400f58:	6830      	ldr	r0, [r6, #0]
  400f5a:	4621      	mov	r1, r4
  400f5c:	682b      	ldr	r3, [r5, #0]
  400f5e:	4798      	blx	r3
		ptr++;
  400f60:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400f62:	42bc      	cmp	r4, r7
  400f64:	d1f8      	bne.n	400f58 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400f66:	4640      	mov	r0, r8
  400f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400f6c:	f04f 38ff 	mov.w	r8, #4294967295
  400f70:	e7f9      	b.n	400f66 <_read+0x22>
	for (; len > 0; --len) {
  400f72:	4680      	mov	r8, r0
  400f74:	e7f7      	b.n	400f66 <_read+0x22>
  400f76:	bf00      	nop
  400f78:	2000cf84 	.word	0x2000cf84
  400f7c:	2000cf7c 	.word	0x2000cf7c

00400f80 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400f80:	3801      	subs	r0, #1
  400f82:	2802      	cmp	r0, #2
  400f84:	d815      	bhi.n	400fb2 <_write+0x32>
{
  400f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f8a:	460e      	mov	r6, r1
  400f8c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400f8e:	b19a      	cbz	r2, 400fb8 <_write+0x38>
  400f90:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400f92:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400fcc <_write+0x4c>
  400f96:	4f0c      	ldr	r7, [pc, #48]	; (400fc8 <_write+0x48>)
  400f98:	f8d8 0000 	ldr.w	r0, [r8]
  400f9c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400fa0:	683b      	ldr	r3, [r7, #0]
  400fa2:	4798      	blx	r3
  400fa4:	2800      	cmp	r0, #0
  400fa6:	db0a      	blt.n	400fbe <_write+0x3e>
  400fa8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400faa:	3c01      	subs	r4, #1
  400fac:	d1f4      	bne.n	400f98 <_write+0x18>
  400fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400fb2:	f04f 30ff 	mov.w	r0, #4294967295
  400fb6:	4770      	bx	lr
	for (; len != 0; --len) {
  400fb8:	4610      	mov	r0, r2
  400fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400fbe:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400fc6:	bf00      	nop
  400fc8:	2000cf80 	.word	0x2000cf80
  400fcc:	2000cf84 	.word	0x2000cf84

00400fd0 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400fd0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400fd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400fd6:	4b21      	ldr	r3, [pc, #132]	; (40105c <board_init+0x8c>)
  400fd8:	605a      	str	r2, [r3, #4]
  400fda:	2009      	movs	r0, #9
  400fdc:	4c20      	ldr	r4, [pc, #128]	; (401060 <board_init+0x90>)
  400fde:	47a0      	blx	r4
  400fe0:	200a      	movs	r0, #10
  400fe2:	47a0      	blx	r4
  400fe4:	200b      	movs	r0, #11
  400fe6:	47a0      	blx	r4
  400fe8:	200c      	movs	r0, #12
  400fea:	47a0      	blx	r4
  400fec:	200d      	movs	r0, #13
  400fee:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ff0:	4b1c      	ldr	r3, [pc, #112]	; (401064 <board_init+0x94>)
  400ff2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400ff6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ff8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ffc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ffe:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401002:	2204      	movs	r2, #4
  401004:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401006:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40100a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40100c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401010:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401012:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401018:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40101a:	f021 0104 	bic.w	r1, r1, #4
  40101e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401020:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401022:	f021 0104 	bic.w	r1, r1, #4
  401026:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401028:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40102c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401030:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401034:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  401038:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40103a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40103e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401040:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401046:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401048:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40104c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40104e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401050:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  401054:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401056:	605a      	str	r2, [r3, #4]
  401058:	bd10      	pop	{r4, pc}
  40105a:	bf00      	nop
  40105c:	400e1850 	.word	0x400e1850
  401060:	00401539 	.word	0x00401539
  401064:	400e1400 	.word	0x400e1400

00401068 <acc_init>:
		Acc *p_acc,
		uint32_t ul_select_plus,
		uint32_t ul_select_minus,
		uint32_t ul_edge_type,
		uint32_t ul_invert)
{
  401068:	b410      	push	{r4}
	/* Validate the parameters. */
	Assert(p_acc);
	
	/* Reset the controller. */
	p_acc->ACC_CR |= ACC_CR_SWRST;
  40106a:	6804      	ldr	r4, [r0, #0]
  40106c:	f044 0401 	orr.w	r4, r4, #1
  401070:	6004      	str	r4, [r0, #0]

	/* Write to the MR register. */
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  401072:	9c01      	ldr	r4, [sp, #4]
  401074:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
  401078:	f444 7480 	orr.w	r4, r4, #256	; 0x100
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
  40107c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  401080:	431c      	orrs	r4, r3
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
  401082:	f002 0207 	and.w	r2, r2, #7
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  401086:	4314      	orrs	r4, r2
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  401088:	f001 0170 	and.w	r1, r1, #112	; 0x70
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  40108c:	430c      	orrs	r4, r1
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  40108e:	6044      	str	r4, [r0, #4]

	/* Set hysteresis and current option. */
	p_acc->ACC_ACR = (ACC_ACR_ISEL_HISP |
  401090:	2303      	movs	r3, #3
  401092:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
			ACC_ACR_HYST(ACC_ACR_HYST_50mv_max));

	/* Automatic Output Masking Period. */
	while (p_acc->ACC_ISR & (uint32_t) ACC_ISR_MASK);
  401096:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401098:	2b00      	cmp	r3, #0
  40109a:	dbfc      	blt.n	401096 <acc_init+0x2e>
}
  40109c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010a0:	4770      	bx	lr

004010a2 <acc_get_comparison_result>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	uint32_t ul_temp = p_acc->ACC_MR;
  4010a2:	6843      	ldr	r3, [r0, #4]
	uint32_t ul_status = p_acc->ACC_ISR;
  4010a4:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if ((ul_temp & ACC_MR_INV_EN) == ACC_MR_INV_EN) {
  4010a6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		if (ul_status & ACC_ISR_SCO) {
  4010aa:	bf18      	it	ne
  4010ac:	f080 0002 	eorne.w	r0, r0, #2
			return 0;	/* inn>inp */
		} else {
			return 1;	/* inp>inn */
		}
	} else {
		if (ul_status & ACC_ISR_SCO) {
  4010b0:	f3c0 0040 	ubfx	r0, r0, #1, #1
			return 1;	/* inp>inn */
		} else {
			return 0;	/* inn>inp */
		}
	}
}
  4010b4:	4770      	bx	lr

004010b6 <acc_enable_interrupt>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	p_acc->ACC_IER = ACC_IER_CE;
  4010b6:	2301      	movs	r3, #1
  4010b8:	6243      	str	r3, [r0, #36]	; 0x24
  4010ba:	4770      	bx	lr

004010bc <acc_get_interrupt_status>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	return p_acc->ACC_ISR;
  4010bc:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  4010be:	4770      	bx	lr

004010c0 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4010c0:	b570      	push	{r4, r5, r6, lr}
  4010c2:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4010c4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4010c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4010c8:	4013      	ands	r3, r2
  4010ca:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4010cc:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4010ce:	4d21      	ldr	r5, [pc, #132]	; (401154 <afec_process_callback+0x94>)
  4010d0:	42a8      	cmp	r0, r5
  4010d2:	bf14      	ite	ne
  4010d4:	2500      	movne	r5, #0
  4010d6:	2501      	moveq	r5, #1
  4010d8:	006e      	lsls	r6, r5, #1
  4010da:	442e      	add	r6, r5
  4010dc:	e00b      	b.n	4010f6 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4010de:	2c14      	cmp	r4, #20
  4010e0:	d824      	bhi.n	40112c <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4010e2:	9a01      	ldr	r2, [sp, #4]
  4010e4:	f104 0108 	add.w	r1, r4, #8
  4010e8:	2301      	movs	r3, #1
  4010ea:	408b      	lsls	r3, r1
  4010ec:	4213      	tst	r3, r2
  4010ee:	d113      	bne.n	401118 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4010f0:	3401      	adds	r4, #1
  4010f2:	2c17      	cmp	r4, #23
  4010f4:	d02b      	beq.n	40114e <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4010f6:	2c0f      	cmp	r4, #15
  4010f8:	d8f1      	bhi.n	4010de <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4010fa:	9a01      	ldr	r2, [sp, #4]
  4010fc:	2301      	movs	r3, #1
  4010fe:	40a3      	lsls	r3, r4
  401100:	4213      	tst	r3, r2
  401102:	d0f5      	beq.n	4010f0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  401104:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  401108:	4423      	add	r3, r4
  40110a:	4a13      	ldr	r2, [pc, #76]	; (401158 <afec_process_callback+0x98>)
  40110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401110:	2b00      	cmp	r3, #0
  401112:	d0ed      	beq.n	4010f0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  401114:	4798      	blx	r3
  401116:	e7eb      	b.n	4010f0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  401118:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  40111c:	4423      	add	r3, r4
  40111e:	4a0e      	ldr	r2, [pc, #56]	; (401158 <afec_process_callback+0x98>)
  401120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401124:	2b00      	cmp	r3, #0
  401126:	d0e3      	beq.n	4010f0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  401128:	4798      	blx	r3
  40112a:	e7e1      	b.n	4010f0 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40112c:	9a01      	ldr	r2, [sp, #4]
  40112e:	f104 0109 	add.w	r1, r4, #9
  401132:	2301      	movs	r3, #1
  401134:	408b      	lsls	r3, r1
  401136:	4213      	tst	r3, r2
  401138:	d0da      	beq.n	4010f0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40113a:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  40113e:	4423      	add	r3, r4
  401140:	4a05      	ldr	r2, [pc, #20]	; (401158 <afec_process_callback+0x98>)
  401142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401146:	2b00      	cmp	r3, #0
  401148:	d0d2      	beq.n	4010f0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40114a:	4798      	blx	r3
  40114c:	e7d0      	b.n	4010f0 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  40114e:	b002      	add	sp, #8
  401150:	bd70      	pop	{r4, r5, r6, pc}
  401152:	bf00      	nop
  401154:	400b4000 	.word	0x400b4000
  401158:	2000cf88 	.word	0x2000cf88

0040115c <afec_ch_set_config>:
{
  40115c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40115e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  401160:	2301      	movs	r3, #1
  401162:	408b      	lsls	r3, r1
  401164:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  401168:	7815      	ldrb	r5, [r2, #0]
  40116a:	2d00      	cmp	r5, #0
  40116c:	bf08      	it	eq
  40116e:	2300      	moveq	r3, #0
  401170:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  401172:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  401174:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  401176:	004b      	lsls	r3, r1, #1
  401178:	2103      	movs	r1, #3
  40117a:	4099      	lsls	r1, r3
  40117c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  401180:	7851      	ldrb	r1, [r2, #1]
  401182:	4099      	lsls	r1, r3
  401184:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  401186:	6541      	str	r1, [r0, #84]	; 0x54
}
  401188:	bc30      	pop	{r4, r5}
  40118a:	4770      	bx	lr

0040118c <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  40118c:	2200      	movs	r2, #0
  40118e:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  401190:	4b08      	ldr	r3, [pc, #32]	; (4011b4 <afec_get_config_defaults+0x28>)
  401192:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  401194:	4b08      	ldr	r3, [pc, #32]	; (4011b8 <afec_get_config_defaults+0x2c>)
  401196:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  401198:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  40119c:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  40119e:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  4011a0:	2302      	movs	r3, #2
  4011a2:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  4011a4:	2301      	movs	r3, #1
  4011a6:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  4011a8:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  4011aa:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  4011ac:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  4011ae:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  4011b0:	7683      	strb	r3, [r0, #26]
  4011b2:	4770      	bx	lr
  4011b4:	05b8d800 	.word	0x05b8d800
  4011b8:	005b8d80 	.word	0x005b8d80

004011bc <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4011bc:	2300      	movs	r3, #0
  4011be:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4011c0:	2301      	movs	r3, #1
  4011c2:	7043      	strb	r3, [r0, #1]
  4011c4:	4770      	bx	lr
	...

004011c8 <afec_init>:
	return afec->AFEC_ISR;
  4011c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4011ca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011ce:	d001      	beq.n	4011d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4011d0:	2019      	movs	r0, #25
  4011d2:	4770      	bx	lr
{
  4011d4:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4011d6:	2301      	movs	r3, #1
  4011d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4011da:	7dcb      	ldrb	r3, [r1, #23]
  4011dc:	2b00      	cmp	r3, #0
  4011de:	bf14      	ite	ne
  4011e0:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  4011e4:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  4011e6:	7d8b      	ldrb	r3, [r1, #22]
  4011e8:	2b00      	cmp	r3, #0
  4011ea:	bf14      	ite	ne
  4011ec:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  4011f0:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  4011f2:	7d0b      	ldrb	r3, [r1, #20]
  4011f4:	061b      	lsls	r3, r3, #24
  4011f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4011fa:	690a      	ldr	r2, [r1, #16]
  4011fc:	68ce      	ldr	r6, [r1, #12]
  4011fe:	4332      	orrs	r2, r6
  401200:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  401202:	7d4a      	ldrb	r2, [r1, #21]
  401204:	0712      	lsls	r2, r2, #28
  401206:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40120a:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  40120c:	688a      	ldr	r2, [r1, #8]
  40120e:	0056      	lsls	r6, r2, #1
  401210:	684a      	ldr	r2, [r1, #4]
  401212:	fbb2 f2f6 	udiv	r2, r2, r6
  401216:	3a01      	subs	r2, #1
  401218:	0212      	lsls	r2, r2, #8
  40121a:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40121c:	4313      	orrs	r3, r2
  40121e:	432b      	orrs	r3, r5
  401220:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  401222:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401224:	7e0b      	ldrb	r3, [r1, #24]
  401226:	2b00      	cmp	r3, #0
  401228:	bf14      	ite	ne
  40122a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40122e:	2300      	moveq	r3, #0
  401230:	680a      	ldr	r2, [r1, #0]
  401232:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  401234:	7e4a      	ldrb	r2, [r1, #25]
  401236:	2a00      	cmp	r2, #0
  401238:	bf14      	ite	ne
  40123a:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40123e:	2200      	moveq	r2, #0
			(config->resolution) |
  401240:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401242:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  401244:	7e8b      	ldrb	r3, [r1, #26]
  401246:	021b      	lsls	r3, r3, #8
  401248:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40124c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  401250:	4b0e      	ldr	r3, [pc, #56]	; (40128c <afec_init+0xc4>)
  401252:	4298      	cmp	r0, r3
  401254:	d005      	beq.n	401262 <afec_init+0x9a>
	if(afec == AFEC1) {
  401256:	4b0e      	ldr	r3, [pc, #56]	; (401290 <afec_init+0xc8>)
  401258:	4298      	cmp	r0, r3
  40125a:	d00c      	beq.n	401276 <afec_init+0xae>
	return STATUS_OK;
  40125c:	2000      	movs	r0, #0
}
  40125e:	bc70      	pop	{r4, r5, r6}
  401260:	4770      	bx	lr
  401262:	4b0c      	ldr	r3, [pc, #48]	; (401294 <afec_init+0xcc>)
  401264:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  401268:	2200      	movs	r2, #0
  40126a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40126e:	428b      	cmp	r3, r1
  401270:	d1fb      	bne.n	40126a <afec_init+0xa2>
	return STATUS_OK;
  401272:	2000      	movs	r0, #0
  401274:	e7f3      	b.n	40125e <afec_init+0x96>
  401276:	4b08      	ldr	r3, [pc, #32]	; (401298 <afec_init+0xd0>)
  401278:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  40127c:	2200      	movs	r2, #0
  40127e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401282:	428b      	cmp	r3, r1
  401284:	d1fb      	bne.n	40127e <afec_init+0xb6>
	return STATUS_OK;
  401286:	2000      	movs	r0, #0
  401288:	e7e9      	b.n	40125e <afec_init+0x96>
  40128a:	bf00      	nop
  40128c:	400b0000 	.word	0x400b0000
  401290:	400b4000 	.word	0x400b4000
  401294:	2000cf84 	.word	0x2000cf84
  401298:	2000cfe0 	.word	0x2000cfe0

0040129c <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  40129c:	4b0c      	ldr	r3, [pc, #48]	; (4012d0 <afec_enable_interrupt+0x34>)
  40129e:	4299      	cmp	r1, r3
  4012a0:	d007      	beq.n	4012b2 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4012a2:	290f      	cmp	r1, #15
  4012a4:	d80b      	bhi.n	4012be <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  4012a6:	d006      	beq.n	4012b6 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  4012a8:	2301      	movs	r3, #1
  4012aa:	fa03 f101 	lsl.w	r1, r3, r1
  4012ae:	6241      	str	r1, [r0, #36]	; 0x24
  4012b0:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4012b2:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4012b4:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  4012b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4012ba:	6243      	str	r3, [r0, #36]	; 0x24
  4012bc:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4012be:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4012c0:	bf94      	ite	ls
  4012c2:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  4012c4:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4012c6:	2301      	movs	r3, #1
  4012c8:	fa03 f101 	lsl.w	r1, r3, r1
  4012cc:	6241      	str	r1, [r0, #36]	; 0x24
  4012ce:	4770      	bx	lr
  4012d0:	df00ffff 	.word	0xdf00ffff

004012d4 <afec_set_callback>:
{
  4012d4:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4012d6:	4c11      	ldr	r4, [pc, #68]	; (40131c <afec_set_callback+0x48>)
  4012d8:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4012da:	bf0c      	ite	eq
  4012dc:	2417      	moveq	r4, #23
  4012de:	2400      	movne	r4, #0
  4012e0:	440c      	add	r4, r1
  4012e2:	4d0f      	ldr	r5, [pc, #60]	; (401320 <afec_set_callback+0x4c>)
  4012e4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4012e8:	d10a      	bne.n	401300 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012ea:	4a0e      	ldr	r2, [pc, #56]	; (401324 <afec_set_callback+0x50>)
  4012ec:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  4012f0:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4012f4:	011b      	lsls	r3, r3, #4
  4012f6:	b2db      	uxtb	r3, r3
  4012f8:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012fc:	6014      	str	r4, [r2, #0]
  4012fe:	e009      	b.n	401314 <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401300:	4a08      	ldr	r2, [pc, #32]	; (401324 <afec_set_callback+0x50>)
  401302:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401306:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40130a:	011b      	lsls	r3, r3, #4
  40130c:	b2db      	uxtb	r3, r3
  40130e:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401312:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  401314:	4b04      	ldr	r3, [pc, #16]	; (401328 <afec_set_callback+0x54>)
  401316:	4798      	blx	r3
  401318:	bd38      	pop	{r3, r4, r5, pc}
  40131a:	bf00      	nop
  40131c:	400b4000 	.word	0x400b4000
  401320:	2000cf88 	.word	0x2000cf88
  401324:	e000e100 	.word	0xe000e100
  401328:	0040129d 	.word	0x0040129d

0040132c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40132c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40132e:	4802      	ldr	r0, [pc, #8]	; (401338 <AFEC0_Handler+0xc>)
  401330:	4b02      	ldr	r3, [pc, #8]	; (40133c <AFEC0_Handler+0x10>)
  401332:	4798      	blx	r3
  401334:	bd08      	pop	{r3, pc}
  401336:	bf00      	nop
  401338:	400b0000 	.word	0x400b0000
  40133c:	004010c1 	.word	0x004010c1

00401340 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  401340:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  401342:	4802      	ldr	r0, [pc, #8]	; (40134c <AFEC1_Handler+0xc>)
  401344:	4b02      	ldr	r3, [pc, #8]	; (401350 <AFEC1_Handler+0x10>)
  401346:	4798      	blx	r3
  401348:	bd08      	pop	{r3, pc}
  40134a:	bf00      	nop
  40134c:	400b4000 	.word	0x400b4000
  401350:	004010c1 	.word	0x004010c1

00401354 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401354:	b500      	push	{lr}
  401356:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  401358:	4b13      	ldr	r3, [pc, #76]	; (4013a8 <afec_enable+0x54>)
  40135a:	4298      	cmp	r0, r3
  40135c:	bf0c      	ite	eq
  40135e:	201f      	moveq	r0, #31
  401360:	201e      	movne	r0, #30
  401362:	4b12      	ldr	r3, [pc, #72]	; (4013ac <afec_enable+0x58>)
  401364:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  401366:	4b12      	ldr	r3, [pc, #72]	; (4013b0 <afec_enable+0x5c>)
  401368:	789b      	ldrb	r3, [r3, #2]
  40136a:	2bff      	cmp	r3, #255	; 0xff
  40136c:	d01a      	beq.n	4013a4 <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40136e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401372:	fab3 f383 	clz	r3, r3
  401376:	095b      	lsrs	r3, r3, #5
  401378:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40137a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40137c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401380:	2200      	movs	r2, #0
  401382:	4b0c      	ldr	r3, [pc, #48]	; (4013b4 <afec_enable+0x60>)
  401384:	701a      	strb	r2, [r3, #0]
	return flags;
  401386:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  401388:	4a09      	ldr	r2, [pc, #36]	; (4013b0 <afec_enable+0x5c>)
  40138a:	7893      	ldrb	r3, [r2, #2]
  40138c:	3301      	adds	r3, #1
  40138e:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401390:	b129      	cbz	r1, 40139e <afec_enable+0x4a>
		cpu_irq_enable();
  401392:	2201      	movs	r2, #1
  401394:	4b07      	ldr	r3, [pc, #28]	; (4013b4 <afec_enable+0x60>)
  401396:	701a      	strb	r2, [r3, #0]
  401398:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40139c:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  40139e:	b003      	add	sp, #12
  4013a0:	f85d fb04 	ldr.w	pc, [sp], #4
  4013a4:	e7fe      	b.n	4013a4 <afec_enable+0x50>
  4013a6:	bf00      	nop
  4013a8:	400b4000 	.word	0x400b4000
  4013ac:	00401539 	.word	0x00401539
  4013b0:	2000cf74 	.word	0x2000cf74
  4013b4:	20000020 	.word	0x20000020

004013b8 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4013b8:	2301      	movs	r3, #1
  4013ba:	6003      	str	r3, [r0, #0]
  4013bc:	4770      	bx	lr

004013be <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  4013be:	6843      	ldr	r3, [r0, #4]
  4013c0:	f023 0301 	bic.w	r3, r3, #1
  4013c4:	6043      	str	r3, [r0, #4]
  4013c6:	4770      	bx	lr

004013c8 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  4013c8:	b949      	cbnz	r1, 4013de <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  4013ca:	6843      	ldr	r3, [r0, #4]
  4013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4013d0:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  4013d2:	6843      	ldr	r3, [r0, #4]
  4013d4:	f023 0310 	bic.w	r3, r3, #16
  4013d8:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4013da:	2000      	movs	r0, #0
  4013dc:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  4013de:	6843      	ldr	r3, [r0, #4]
  4013e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4013e4:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  4013e6:	6843      	ldr	r3, [r0, #4]
  4013e8:	f043 0310 	orr.w	r3, r3, #16
  4013ec:	6043      	str	r3, [r0, #4]
  4013ee:	e7f4      	b.n	4013da <dacc_set_transfer_mode+0x12>

004013f0 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  4013f0:	6201      	str	r1, [r0, #32]
  4013f2:	4770      	bx	lr

004013f4 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4013f4:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4013f6:	2901      	cmp	r1, #1
  4013f8:	d901      	bls.n	4013fe <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  4013fa:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4013fc:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  4013fe:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  401402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  401406:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  401408:	2000      	movs	r0, #0
  40140a:	4770      	bx	lr

0040140c <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  40140c:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  40140e:	b941      	cbnz	r1, 401422 <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  401410:	4907      	ldr	r1, [pc, #28]	; (401430 <dacc_set_timing+0x24>)
  401412:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  401414:	0612      	lsls	r2, r2, #24
  401416:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  40141a:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  40141c:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  40141e:	2000      	movs	r0, #0
  401420:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  401422:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  401426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  40142a:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  40142e:	e7f1      	b.n	401414 <dacc_set_timing+0x8>
  401430:	c0df00ff 	.word	0xc0df00ff

00401434 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  401434:	2901      	cmp	r1, #1
  401436:	d901      	bls.n	40143c <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  401438:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  40143a:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  40143c:	2301      	movs	r3, #1
  40143e:	fa03 f101 	lsl.w	r1, r3, r1
  401442:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  401444:	2000      	movs	r0, #0
  401446:	4770      	bx	lr

00401448 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  401448:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  40144c:	2000      	movs	r0, #0
  40144e:	4770      	bx	lr

00401450 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401450:	4a17      	ldr	r2, [pc, #92]	; (4014b0 <pmc_switch_mck_to_pllack+0x60>)
  401452:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401458:	4318      	orrs	r0, r3
  40145a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40145c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40145e:	f013 0f08 	tst.w	r3, #8
  401462:	d10a      	bne.n	40147a <pmc_switch_mck_to_pllack+0x2a>
  401464:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401468:	4911      	ldr	r1, [pc, #68]	; (4014b0 <pmc_switch_mck_to_pllack+0x60>)
  40146a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40146c:	f012 0f08 	tst.w	r2, #8
  401470:	d103      	bne.n	40147a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401472:	3b01      	subs	r3, #1
  401474:	d1f9      	bne.n	40146a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401476:	2001      	movs	r0, #1
  401478:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40147a:	4a0d      	ldr	r2, [pc, #52]	; (4014b0 <pmc_switch_mck_to_pllack+0x60>)
  40147c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40147e:	f023 0303 	bic.w	r3, r3, #3
  401482:	f043 0302 	orr.w	r3, r3, #2
  401486:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401488:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40148a:	f013 0f08 	tst.w	r3, #8
  40148e:	d10a      	bne.n	4014a6 <pmc_switch_mck_to_pllack+0x56>
  401490:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401494:	4906      	ldr	r1, [pc, #24]	; (4014b0 <pmc_switch_mck_to_pllack+0x60>)
  401496:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401498:	f012 0f08 	tst.w	r2, #8
  40149c:	d105      	bne.n	4014aa <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40149e:	3b01      	subs	r3, #1
  4014a0:	d1f9      	bne.n	401496 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4014a2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4014a4:	4770      	bx	lr
	return 0;
  4014a6:	2000      	movs	r0, #0
  4014a8:	4770      	bx	lr
  4014aa:	2000      	movs	r0, #0
  4014ac:	4770      	bx	lr
  4014ae:	bf00      	nop
  4014b0:	400e0400 	.word	0x400e0400

004014b4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4014b4:	b9c8      	cbnz	r0, 4014ea <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4014b6:	4a11      	ldr	r2, [pc, #68]	; (4014fc <pmc_switch_mainck_to_xtal+0x48>)
  4014b8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4014ba:	0209      	lsls	r1, r1, #8
  4014bc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4014be:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4014c2:	f023 0303 	bic.w	r3, r3, #3
  4014c6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4014ca:	f043 0301 	orr.w	r3, r3, #1
  4014ce:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4014d0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4014d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014d4:	f013 0f01 	tst.w	r3, #1
  4014d8:	d0fb      	beq.n	4014d2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4014da:	4a08      	ldr	r2, [pc, #32]	; (4014fc <pmc_switch_mainck_to_xtal+0x48>)
  4014dc:	6a13      	ldr	r3, [r2, #32]
  4014de:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4014e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4014e6:	6213      	str	r3, [r2, #32]
  4014e8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4014ea:	4904      	ldr	r1, [pc, #16]	; (4014fc <pmc_switch_mainck_to_xtal+0x48>)
  4014ec:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4014ee:	4a04      	ldr	r2, [pc, #16]	; (401500 <pmc_switch_mainck_to_xtal+0x4c>)
  4014f0:	401a      	ands	r2, r3
  4014f2:	4b04      	ldr	r3, [pc, #16]	; (401504 <pmc_switch_mainck_to_xtal+0x50>)
  4014f4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4014f6:	620b      	str	r3, [r1, #32]
  4014f8:	4770      	bx	lr
  4014fa:	bf00      	nop
  4014fc:	400e0400 	.word	0x400e0400
  401500:	fec8fffc 	.word	0xfec8fffc
  401504:	01370002 	.word	0x01370002

00401508 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401508:	4b02      	ldr	r3, [pc, #8]	; (401514 <pmc_osc_is_ready_mainck+0xc>)
  40150a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40150c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401510:	4770      	bx	lr
  401512:	bf00      	nop
  401514:	400e0400 	.word	0x400e0400

00401518 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401518:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40151c:	4b01      	ldr	r3, [pc, #4]	; (401524 <pmc_disable_pllack+0xc>)
  40151e:	629a      	str	r2, [r3, #40]	; 0x28
  401520:	4770      	bx	lr
  401522:	bf00      	nop
  401524:	400e0400 	.word	0x400e0400

00401528 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401528:	4b02      	ldr	r3, [pc, #8]	; (401534 <pmc_is_locked_pllack+0xc>)
  40152a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40152c:	f000 0002 	and.w	r0, r0, #2
  401530:	4770      	bx	lr
  401532:	bf00      	nop
  401534:	400e0400 	.word	0x400e0400

00401538 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401538:	282f      	cmp	r0, #47	; 0x2f
  40153a:	d81e      	bhi.n	40157a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40153c:	281f      	cmp	r0, #31
  40153e:	d80c      	bhi.n	40155a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401540:	4b11      	ldr	r3, [pc, #68]	; (401588 <pmc_enable_periph_clk+0x50>)
  401542:	699a      	ldr	r2, [r3, #24]
  401544:	2301      	movs	r3, #1
  401546:	4083      	lsls	r3, r0
  401548:	4393      	bics	r3, r2
  40154a:	d018      	beq.n	40157e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40154c:	2301      	movs	r3, #1
  40154e:	fa03 f000 	lsl.w	r0, r3, r0
  401552:	4b0d      	ldr	r3, [pc, #52]	; (401588 <pmc_enable_periph_clk+0x50>)
  401554:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401556:	2000      	movs	r0, #0
  401558:	4770      	bx	lr
		ul_id -= 32;
  40155a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40155c:	4b0a      	ldr	r3, [pc, #40]	; (401588 <pmc_enable_periph_clk+0x50>)
  40155e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401562:	2301      	movs	r3, #1
  401564:	4083      	lsls	r3, r0
  401566:	4393      	bics	r3, r2
  401568:	d00b      	beq.n	401582 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40156a:	2301      	movs	r3, #1
  40156c:	fa03 f000 	lsl.w	r0, r3, r0
  401570:	4b05      	ldr	r3, [pc, #20]	; (401588 <pmc_enable_periph_clk+0x50>)
  401572:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401576:	2000      	movs	r0, #0
  401578:	4770      	bx	lr
		return 1;
  40157a:	2001      	movs	r0, #1
  40157c:	4770      	bx	lr
	return 0;
  40157e:	2000      	movs	r0, #0
  401580:	4770      	bx	lr
  401582:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401584:	4770      	bx	lr
  401586:	bf00      	nop
  401588:	400e0400 	.word	0x400e0400

0040158c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40158c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40158e:	0189      	lsls	r1, r1, #6
  401590:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  401592:	2402      	movs	r4, #2
  401594:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401596:	f04f 31ff 	mov.w	r1, #4294967295
  40159a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40159c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40159e:	605a      	str	r2, [r3, #4]
}
  4015a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4015a4:	4770      	bx	lr

004015a6 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4015a6:	0189      	lsls	r1, r1, #6
  4015a8:	2305      	movs	r3, #5
  4015aa:	5043      	str	r3, [r0, r1]
  4015ac:	4770      	bx	lr

004015ae <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  4015ae:	0189      	lsls	r1, r1, #6
  4015b0:	2302      	movs	r3, #2
  4015b2:	5043      	str	r3, [r0, r1]
  4015b4:	4770      	bx	lr

004015b6 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4015b6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4015ba:	61ca      	str	r2, [r1, #28]
  4015bc:	4770      	bx	lr

004015be <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4015be:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4015c2:	624a      	str	r2, [r1, #36]	; 0x24
  4015c4:	4770      	bx	lr

004015c6 <tc_disable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4015c6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IDR = ul_sources;
  4015ca:	628a      	str	r2, [r1, #40]	; 0x28
  4015cc:	4770      	bx	lr

004015ce <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4015ce:	b4f0      	push	{r4, r5, r6, r7}
  4015d0:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4015d2:	2402      	movs	r4, #2
  4015d4:	9401      	str	r4, [sp, #4]
  4015d6:	2408      	movs	r4, #8
  4015d8:	9402      	str	r4, [sp, #8]
  4015da:	2420      	movs	r4, #32
  4015dc:	9403      	str	r4, [sp, #12]
  4015de:	2480      	movs	r4, #128	; 0x80
  4015e0:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4015e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4015e4:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4015e6:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4015e8:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4015ec:	d814      	bhi.n	401618 <tc_find_mck_divisor+0x4a>
  4015ee:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4015f0:	42a0      	cmp	r0, r4
  4015f2:	d217      	bcs.n	401624 <tc_find_mck_divisor+0x56>
  4015f4:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4015f6:	af01      	add	r7, sp, #4
  4015f8:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4015fc:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  401600:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  401602:	4284      	cmp	r4, r0
  401604:	d30a      	bcc.n	40161c <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  401606:	4286      	cmp	r6, r0
  401608:	d90d      	bls.n	401626 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40160a:	3501      	adds	r5, #1
	for (ul_index = 0;
  40160c:	2d05      	cmp	r5, #5
  40160e:	d1f3      	bne.n	4015f8 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  401610:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  401612:	b006      	add	sp, #24
  401614:	bcf0      	pop	{r4, r5, r6, r7}
  401616:	4770      	bx	lr
			return 0;
  401618:	2000      	movs	r0, #0
  40161a:	e7fa      	b.n	401612 <tc_find_mck_divisor+0x44>
  40161c:	2000      	movs	r0, #0
  40161e:	e7f8      	b.n	401612 <tc_find_mck_divisor+0x44>
	return 1;
  401620:	2001      	movs	r0, #1
  401622:	e7f6      	b.n	401612 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  401624:	2500      	movs	r5, #0
	if (p_uldiv) {
  401626:	b12a      	cbz	r2, 401634 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  401628:	a906      	add	r1, sp, #24
  40162a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40162e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  401632:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  401634:	2b00      	cmp	r3, #0
  401636:	d0f3      	beq.n	401620 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  401638:	601d      	str	r5, [r3, #0]
	return 1;
  40163a:	2001      	movs	r0, #1
  40163c:	e7e9      	b.n	401612 <tc_find_mck_divisor+0x44>

0040163e <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40163e:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401640:	23ac      	movs	r3, #172	; 0xac
  401642:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401644:	680b      	ldr	r3, [r1, #0]
  401646:	684a      	ldr	r2, [r1, #4]
  401648:	fbb3 f3f2 	udiv	r3, r3, r2
  40164c:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40164e:	1e5c      	subs	r4, r3, #1
  401650:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401654:	4294      	cmp	r4, r2
  401656:	d80c      	bhi.n	401672 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  401658:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40165a:	688b      	ldr	r3, [r1, #8]
  40165c:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40165e:	f240 2302 	movw	r3, #514	; 0x202
  401662:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401666:	2350      	movs	r3, #80	; 0x50
  401668:	6003      	str	r3, [r0, #0]

	return 0;
  40166a:	2000      	movs	r0, #0
}
  40166c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401670:	4770      	bx	lr
		return 1;
  401672:	2001      	movs	r0, #1
  401674:	e7fa      	b.n	40166c <uart_init+0x2e>

00401676 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  401676:	6081      	str	r1, [r0, #8]
  401678:	4770      	bx	lr

0040167a <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  40167a:	6940      	ldr	r0, [r0, #20]
}
  40167c:	4770      	bx	lr

0040167e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40167e:	6943      	ldr	r3, [r0, #20]
  401680:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401684:	bf1a      	itte	ne
  401686:	61c1      	strne	r1, [r0, #28]
	return 0;
  401688:	2000      	movne	r0, #0
		return 1;
  40168a:	2001      	moveq	r0, #1
}
  40168c:	4770      	bx	lr

0040168e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40168e:	6943      	ldr	r3, [r0, #20]
  401690:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401694:	bf1d      	ittte	ne
  401696:	6983      	ldrne	r3, [r0, #24]
  401698:	700b      	strbne	r3, [r1, #0]
	return 0;
  40169a:	2000      	movne	r0, #0
		return 1;
  40169c:	2001      	moveq	r0, #1
}
  40169e:	4770      	bx	lr

004016a0 <uart_get_pdc_base>:
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
}
  4016a0:	4b03      	ldr	r3, [pc, #12]	; (4016b0 <uart_get_pdc_base+0x10>)
  4016a2:	4a04      	ldr	r2, [pc, #16]	; (4016b4 <uart_get_pdc_base+0x14>)
  4016a4:	4904      	ldr	r1, [pc, #16]	; (4016b8 <uart_get_pdc_base+0x18>)
  4016a6:	4288      	cmp	r0, r1
  4016a8:	bf14      	ite	ne
  4016aa:	4610      	movne	r0, r2
  4016ac:	4618      	moveq	r0, r3
  4016ae:	4770      	bx	lr
  4016b0:	40060700 	.word	0x40060700
  4016b4:	400e0700 	.word	0x400e0700
  4016b8:	40060600 	.word	0x40060600

004016bc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4016bc:	6943      	ldr	r3, [r0, #20]
  4016be:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4016c2:	bf1d      	ittte	ne
  4016c4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4016c8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4016ca:	2000      	movne	r0, #0
		return 1;
  4016cc:	2001      	moveq	r0, #1
}
  4016ce:	4770      	bx	lr

004016d0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4016d0:	6943      	ldr	r3, [r0, #20]
  4016d2:	f013 0f01 	tst.w	r3, #1
  4016d6:	d005      	beq.n	4016e4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4016d8:	6983      	ldr	r3, [r0, #24]
  4016da:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4016de:	600b      	str	r3, [r1, #0]

	return 0;
  4016e0:	2000      	movs	r0, #0
  4016e2:	4770      	bx	lr
		return 1;
  4016e4:	2001      	movs	r0, #1
}
  4016e6:	4770      	bx	lr

004016e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4016e8:	e7fe      	b.n	4016e8 <Dummy_Handler>
	...

004016ec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4016ec:	b500      	push	{lr}
  4016ee:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4016f0:	4b25      	ldr	r3, [pc, #148]	; (401788 <Reset_Handler+0x9c>)
  4016f2:	4a26      	ldr	r2, [pc, #152]	; (40178c <Reset_Handler+0xa0>)
  4016f4:	429a      	cmp	r2, r3
  4016f6:	d010      	beq.n	40171a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  4016f8:	4b25      	ldr	r3, [pc, #148]	; (401790 <Reset_Handler+0xa4>)
  4016fa:	4a23      	ldr	r2, [pc, #140]	; (401788 <Reset_Handler+0x9c>)
  4016fc:	429a      	cmp	r2, r3
  4016fe:	d20c      	bcs.n	40171a <Reset_Handler+0x2e>
  401700:	3b01      	subs	r3, #1
  401702:	1a9b      	subs	r3, r3, r2
  401704:	f023 0303 	bic.w	r3, r3, #3
  401708:	3304      	adds	r3, #4
  40170a:	4413      	add	r3, r2
  40170c:	491f      	ldr	r1, [pc, #124]	; (40178c <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40170e:	f851 0b04 	ldr.w	r0, [r1], #4
  401712:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  401716:	429a      	cmp	r2, r3
  401718:	d1f9      	bne.n	40170e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40171a:	4b1e      	ldr	r3, [pc, #120]	; (401794 <Reset_Handler+0xa8>)
  40171c:	4a1e      	ldr	r2, [pc, #120]	; (401798 <Reset_Handler+0xac>)
  40171e:	429a      	cmp	r2, r3
  401720:	d20a      	bcs.n	401738 <Reset_Handler+0x4c>
  401722:	3b01      	subs	r3, #1
  401724:	1a9b      	subs	r3, r3, r2
  401726:	f023 0303 	bic.w	r3, r3, #3
  40172a:	3304      	adds	r3, #4
  40172c:	4413      	add	r3, r2
		*pDest++ = 0;
  40172e:	2100      	movs	r1, #0
  401730:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  401734:	4293      	cmp	r3, r2
  401736:	d1fb      	bne.n	401730 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401738:	4a18      	ldr	r2, [pc, #96]	; (40179c <Reset_Handler+0xb0>)
  40173a:	4b19      	ldr	r3, [pc, #100]	; (4017a0 <Reset_Handler+0xb4>)
  40173c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401740:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401742:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401746:	fab3 f383 	clz	r3, r3
  40174a:	095b      	lsrs	r3, r3, #5
  40174c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40174e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401750:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401754:	2200      	movs	r2, #0
  401756:	4b13      	ldr	r3, [pc, #76]	; (4017a4 <Reset_Handler+0xb8>)
  401758:	701a      	strb	r2, [r3, #0]
	return flags;
  40175a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40175c:	4a12      	ldr	r2, [pc, #72]	; (4017a8 <Reset_Handler+0xbc>)
  40175e:	6813      	ldr	r3, [r2, #0]
  401760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401764:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401766:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40176a:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40176e:	b129      	cbz	r1, 40177c <Reset_Handler+0x90>
		cpu_irq_enable();
  401770:	2201      	movs	r2, #1
  401772:	4b0c      	ldr	r3, [pc, #48]	; (4017a4 <Reset_Handler+0xb8>)
  401774:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401776:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40177a:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  40177c:	4b0b      	ldr	r3, [pc, #44]	; (4017ac <Reset_Handler+0xc0>)
  40177e:	4798      	blx	r3

	/* Branch to main function */
	main();
  401780:	4b0b      	ldr	r3, [pc, #44]	; (4017b0 <Reset_Handler+0xc4>)
  401782:	4798      	blx	r3
  401784:	e7fe      	b.n	401784 <Reset_Handler+0x98>
  401786:	bf00      	nop
  401788:	20000000 	.word	0x20000000
  40178c:	00403c18 	.word	0x00403c18
  401790:	2000087c 	.word	0x2000087c
  401794:	2000d068 	.word	0x2000d068
  401798:	20000880 	.word	0x20000880
  40179c:	e000ed00 	.word	0xe000ed00
  4017a0:	00400000 	.word	0x00400000
  4017a4:	20000020 	.word	0x20000020
  4017a8:	e000ed88 	.word	0xe000ed88
  4017ac:	00402af1 	.word	0x00402af1
  4017b0:	00401c8d 	.word	0x00401c8d

004017b4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4017b4:	4b3b      	ldr	r3, [pc, #236]	; (4018a4 <SystemCoreClockUpdate+0xf0>)
  4017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017b8:	f003 0303 	and.w	r3, r3, #3
  4017bc:	2b01      	cmp	r3, #1
  4017be:	d01d      	beq.n	4017fc <SystemCoreClockUpdate+0x48>
  4017c0:	b183      	cbz	r3, 4017e4 <SystemCoreClockUpdate+0x30>
  4017c2:	2b02      	cmp	r3, #2
  4017c4:	d036      	beq.n	401834 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4017c6:	4b37      	ldr	r3, [pc, #220]	; (4018a4 <SystemCoreClockUpdate+0xf0>)
  4017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017ce:	2b70      	cmp	r3, #112	; 0x70
  4017d0:	d05f      	beq.n	401892 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4017d2:	4b34      	ldr	r3, [pc, #208]	; (4018a4 <SystemCoreClockUpdate+0xf0>)
  4017d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4017d6:	4934      	ldr	r1, [pc, #208]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  4017d8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4017dc:	680b      	ldr	r3, [r1, #0]
  4017de:	40d3      	lsrs	r3, r2
  4017e0:	600b      	str	r3, [r1, #0]
  4017e2:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4017e4:	4b31      	ldr	r3, [pc, #196]	; (4018ac <SystemCoreClockUpdate+0xf8>)
  4017e6:	695b      	ldr	r3, [r3, #20]
  4017e8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4017ec:	bf14      	ite	ne
  4017ee:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4017f2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4017f6:	4b2c      	ldr	r3, [pc, #176]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  4017f8:	601a      	str	r2, [r3, #0]
  4017fa:	e7e4      	b.n	4017c6 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4017fc:	4b29      	ldr	r3, [pc, #164]	; (4018a4 <SystemCoreClockUpdate+0xf0>)
  4017fe:	6a1b      	ldr	r3, [r3, #32]
  401800:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401804:	d003      	beq.n	40180e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401806:	4a2a      	ldr	r2, [pc, #168]	; (4018b0 <SystemCoreClockUpdate+0xfc>)
  401808:	4b27      	ldr	r3, [pc, #156]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  40180a:	601a      	str	r2, [r3, #0]
  40180c:	e7db      	b.n	4017c6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40180e:	4a29      	ldr	r2, [pc, #164]	; (4018b4 <SystemCoreClockUpdate+0x100>)
  401810:	4b25      	ldr	r3, [pc, #148]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  401812:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401814:	4b23      	ldr	r3, [pc, #140]	; (4018a4 <SystemCoreClockUpdate+0xf0>)
  401816:	6a1b      	ldr	r3, [r3, #32]
  401818:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40181c:	2b10      	cmp	r3, #16
  40181e:	d005      	beq.n	40182c <SystemCoreClockUpdate+0x78>
  401820:	2b20      	cmp	r3, #32
  401822:	d1d0      	bne.n	4017c6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  401824:	4a22      	ldr	r2, [pc, #136]	; (4018b0 <SystemCoreClockUpdate+0xfc>)
  401826:	4b20      	ldr	r3, [pc, #128]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  401828:	601a      	str	r2, [r3, #0]
				break;
  40182a:	e7cc      	b.n	4017c6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  40182c:	4a22      	ldr	r2, [pc, #136]	; (4018b8 <SystemCoreClockUpdate+0x104>)
  40182e:	4b1e      	ldr	r3, [pc, #120]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  401830:	601a      	str	r2, [r3, #0]
				break;
  401832:	e7c8      	b.n	4017c6 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401834:	4b1b      	ldr	r3, [pc, #108]	; (4018a4 <SystemCoreClockUpdate+0xf0>)
  401836:	6a1b      	ldr	r3, [r3, #32]
  401838:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40183c:	d016      	beq.n	40186c <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40183e:	4a1c      	ldr	r2, [pc, #112]	; (4018b0 <SystemCoreClockUpdate+0xfc>)
  401840:	4b19      	ldr	r3, [pc, #100]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  401842:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  401844:	4b17      	ldr	r3, [pc, #92]	; (4018a4 <SystemCoreClockUpdate+0xf0>)
  401846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401848:	f003 0303 	and.w	r3, r3, #3
  40184c:	2b02      	cmp	r3, #2
  40184e:	d1ba      	bne.n	4017c6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401850:	4a14      	ldr	r2, [pc, #80]	; (4018a4 <SystemCoreClockUpdate+0xf0>)
  401852:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401854:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401856:	4814      	ldr	r0, [pc, #80]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401858:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40185c:	6803      	ldr	r3, [r0, #0]
  40185e:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401862:	b2d2      	uxtb	r2, r2
  401864:	fbb3 f3f2 	udiv	r3, r3, r2
  401868:	6003      	str	r3, [r0, #0]
  40186a:	e7ac      	b.n	4017c6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40186c:	4a11      	ldr	r2, [pc, #68]	; (4018b4 <SystemCoreClockUpdate+0x100>)
  40186e:	4b0e      	ldr	r3, [pc, #56]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  401870:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401872:	4b0c      	ldr	r3, [pc, #48]	; (4018a4 <SystemCoreClockUpdate+0xf0>)
  401874:	6a1b      	ldr	r3, [r3, #32]
  401876:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40187a:	2b10      	cmp	r3, #16
  40187c:	d005      	beq.n	40188a <SystemCoreClockUpdate+0xd6>
  40187e:	2b20      	cmp	r3, #32
  401880:	d1e0      	bne.n	401844 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  401882:	4a0b      	ldr	r2, [pc, #44]	; (4018b0 <SystemCoreClockUpdate+0xfc>)
  401884:	4b08      	ldr	r3, [pc, #32]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  401886:	601a      	str	r2, [r3, #0]
				break;
  401888:	e7dc      	b.n	401844 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  40188a:	4a0b      	ldr	r2, [pc, #44]	; (4018b8 <SystemCoreClockUpdate+0x104>)
  40188c:	4b06      	ldr	r3, [pc, #24]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  40188e:	601a      	str	r2, [r3, #0]
				break;
  401890:	e7d8      	b.n	401844 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  401892:	4a05      	ldr	r2, [pc, #20]	; (4018a8 <SystemCoreClockUpdate+0xf4>)
  401894:	6813      	ldr	r3, [r2, #0]
  401896:	4909      	ldr	r1, [pc, #36]	; (4018bc <SystemCoreClockUpdate+0x108>)
  401898:	fba1 1303 	umull	r1, r3, r1, r3
  40189c:	085b      	lsrs	r3, r3, #1
  40189e:	6013      	str	r3, [r2, #0]
  4018a0:	4770      	bx	lr
  4018a2:	bf00      	nop
  4018a4:	400e0400 	.word	0x400e0400
  4018a8:	20000024 	.word	0x20000024
  4018ac:	400e1810 	.word	0x400e1810
  4018b0:	00b71b00 	.word	0x00b71b00
  4018b4:	003d0900 	.word	0x003d0900
  4018b8:	007a1200 	.word	0x007a1200
  4018bc:	aaaaaaab 	.word	0xaaaaaaab

004018c0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4018c0:	4b12      	ldr	r3, [pc, #72]	; (40190c <system_init_flash+0x4c>)
  4018c2:	4298      	cmp	r0, r3
  4018c4:	d911      	bls.n	4018ea <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4018c6:	4b12      	ldr	r3, [pc, #72]	; (401910 <system_init_flash+0x50>)
  4018c8:	4298      	cmp	r0, r3
  4018ca:	d913      	bls.n	4018f4 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4018cc:	4b11      	ldr	r3, [pc, #68]	; (401914 <system_init_flash+0x54>)
  4018ce:	4298      	cmp	r0, r3
  4018d0:	d914      	bls.n	4018fc <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4018d2:	4b11      	ldr	r3, [pc, #68]	; (401918 <system_init_flash+0x58>)
  4018d4:	4298      	cmp	r0, r3
  4018d6:	d915      	bls.n	401904 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4018d8:	4b10      	ldr	r3, [pc, #64]	; (40191c <system_init_flash+0x5c>)
  4018da:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4018dc:	bf94      	ite	ls
  4018de:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4018e2:	4a0f      	ldrhi	r2, [pc, #60]	; (401920 <system_init_flash+0x60>)
  4018e4:	4b0f      	ldr	r3, [pc, #60]	; (401924 <system_init_flash+0x64>)
  4018e6:	601a      	str	r2, [r3, #0]
  4018e8:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018ee:	4b0d      	ldr	r3, [pc, #52]	; (401924 <system_init_flash+0x64>)
  4018f0:	601a      	str	r2, [r3, #0]
  4018f2:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018f4:	4a0c      	ldr	r2, [pc, #48]	; (401928 <system_init_flash+0x68>)
  4018f6:	4b0b      	ldr	r3, [pc, #44]	; (401924 <system_init_flash+0x64>)
  4018f8:	601a      	str	r2, [r3, #0]
  4018fa:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4018fc:	4a0b      	ldr	r2, [pc, #44]	; (40192c <system_init_flash+0x6c>)
  4018fe:	4b09      	ldr	r3, [pc, #36]	; (401924 <system_init_flash+0x64>)
  401900:	601a      	str	r2, [r3, #0]
  401902:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401904:	4a0a      	ldr	r2, [pc, #40]	; (401930 <system_init_flash+0x70>)
  401906:	4b07      	ldr	r3, [pc, #28]	; (401924 <system_init_flash+0x64>)
  401908:	601a      	str	r2, [r3, #0]
  40190a:	4770      	bx	lr
  40190c:	01312cff 	.word	0x01312cff
  401910:	026259ff 	.word	0x026259ff
  401914:	039386ff 	.word	0x039386ff
  401918:	04c4b3ff 	.word	0x04c4b3ff
  40191c:	05f5e0ff 	.word	0x05f5e0ff
  401920:	04000500 	.word	0x04000500
  401924:	400e0a00 	.word	0x400e0a00
  401928:	04000100 	.word	0x04000100
  40192c:	04000200 	.word	0x04000200
  401930:	04000300 	.word	0x04000300

00401934 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401934:	4b0a      	ldr	r3, [pc, #40]	; (401960 <_sbrk+0x2c>)
  401936:	681b      	ldr	r3, [r3, #0]
  401938:	b153      	cbz	r3, 401950 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40193a:	4b09      	ldr	r3, [pc, #36]	; (401960 <_sbrk+0x2c>)
  40193c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40193e:	181a      	adds	r2, r3, r0
  401940:	4908      	ldr	r1, [pc, #32]	; (401964 <_sbrk+0x30>)
  401942:	4291      	cmp	r1, r2
  401944:	db08      	blt.n	401958 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401946:	4610      	mov	r0, r2
  401948:	4a05      	ldr	r2, [pc, #20]	; (401960 <_sbrk+0x2c>)
  40194a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40194c:	4618      	mov	r0, r3
  40194e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401950:	4a05      	ldr	r2, [pc, #20]	; (401968 <_sbrk+0x34>)
  401952:	4b03      	ldr	r3, [pc, #12]	; (401960 <_sbrk+0x2c>)
  401954:	601a      	str	r2, [r3, #0]
  401956:	e7f0      	b.n	40193a <_sbrk+0x6>
		return (caddr_t) -1;	
  401958:	f04f 30ff 	mov.w	r0, #4294967295
}
  40195c:	4770      	bx	lr
  40195e:	bf00      	nop
  401960:	20000ae8 	.word	0x20000ae8
  401964:	2001fffc 	.word	0x2001fffc
  401968:	20010068 	.word	0x20010068

0040196c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40196c:	f04f 30ff 	mov.w	r0, #4294967295
  401970:	4770      	bx	lr

00401972 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401976:	604b      	str	r3, [r1, #4]

	return 0;
}
  401978:	2000      	movs	r0, #0
  40197a:	4770      	bx	lr

0040197c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40197c:	2000      	movs	r0, #0
  40197e:	4770      	bx	lr

00401980 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  401980:	b500      	push	{lr}
  401982:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  401984:	2201      	movs	r2, #1
  401986:	f10d 0107 	add.w	r1, sp, #7
  40198a:	4810      	ldr	r0, [pc, #64]	; (4019cc <USART0_Handler+0x4c>)
  40198c:	4b10      	ldr	r3, [pc, #64]	; (4019d0 <USART0_Handler+0x50>)
  40198e:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401990:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401992:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  401996:	2200      	movs	r2, #0
  401998:	4b0e      	ldr	r3, [pc, #56]	; (4019d4 <USART0_Handler+0x54>)
  40199a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  40199c:	4b0e      	ldr	r3, [pc, #56]	; (4019d8 <USART0_Handler+0x58>)
  40199e:	781b      	ldrb	r3, [r3, #0]
  4019a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
  4019a4:	4a0d      	ldr	r2, [pc, #52]	; (4019dc <USART0_Handler+0x5c>)
  4019a6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  4019a8:	2b9b      	cmp	r3, #155	; 0x9b
  4019aa:	d00b      	beq.n	4019c4 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  4019ac:	3301      	adds	r3, #1
  4019ae:	4a0a      	ldr	r2, [pc, #40]	; (4019d8 <USART0_Handler+0x58>)
  4019b0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  4019b2:	2201      	movs	r2, #1
  4019b4:	4b07      	ldr	r3, [pc, #28]	; (4019d4 <USART0_Handler+0x54>)
  4019b6:	701a      	strb	r2, [r3, #0]
  4019b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4019bc:	b662      	cpsie	i
}
  4019be:	b003      	add	sp, #12
  4019c0:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  4019c4:	2200      	movs	r2, #0
  4019c6:	4b04      	ldr	r3, [pc, #16]	; (4019d8 <USART0_Handler+0x58>)
  4019c8:	701a      	strb	r2, [r3, #0]
  4019ca:	e7f2      	b.n	4019b2 <USART0_Handler+0x32>
  4019cc:	400a0000 	.word	0x400a0000
  4019d0:	00400ea5 	.word	0x00400ea5
  4019d4:	20000020 	.word	0x20000020
  4019d8:	20000b88 	.word	0x20000b88
  4019dc:	20000aec 	.word	0x20000aec

004019e0 <addSampleCollector>:

/* Add sample to the signal buffer */

void addSampleCollector(uint16_t sample){
	
	if (bufferIndexCollector<buffersize )
  4019e0:	4b07      	ldr	r3, [pc, #28]	; (401a00 <addSampleCollector+0x20>)
  4019e2:	881b      	ldrh	r3, [r3, #0]
  4019e4:	f242 028d 	movw	r2, #8333	; 0x208d
  4019e8:	4293      	cmp	r3, r2
  4019ea:	d807      	bhi.n	4019fc <addSampleCollector+0x1c>
	{
		afec_buffer_collector[bufferIndexCollector]= sample;
  4019ec:	4a05      	ldr	r2, [pc, #20]	; (401a04 <addSampleCollector+0x24>)
  4019ee:	6812      	ldr	r2, [r2, #0]
  4019f0:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
		bufferIndexCollector++;
  4019f4:	4a02      	ldr	r2, [pc, #8]	; (401a00 <addSampleCollector+0x20>)
  4019f6:	8813      	ldrh	r3, [r2, #0]
  4019f8:	3301      	adds	r3, #1
  4019fa:	8013      	strh	r3, [r2, #0]
  4019fc:	4770      	bx	lr
  4019fe:	bf00      	nop
  401a00:	2000cee0 	.word	0x2000cee0
  401a04:	20000028 	.word	0x20000028

00401a08 <switchBuffer>:
/* Buffer switch operation, signal buffer and algorithm are switched. 
   If 16 buffers have been filled, the contents of the algorithm buffer are switched to the transmit buffer. */

volatile void switchBuffer(void){
	
	buffersFilled++;
  401a08:	4b0d      	ldr	r3, [pc, #52]	; (401a40 <switchBuffer+0x38>)
  401a0a:	881b      	ldrh	r3, [r3, #0]
  401a0c:	3301      	adds	r3, #1
  401a0e:	b29b      	uxth	r3, r3
	if (buffersFilled>16)
  401a10:	2b10      	cmp	r3, #16
  401a12:	d80b      	bhi.n	401a2c <switchBuffer+0x24>
	buffersFilled++;
  401a14:	4a0a      	ldr	r2, [pc, #40]	; (401a40 <switchBuffer+0x38>)
  401a16:	8013      	strh	r3, [r2, #0]
	uint16_t* temp = *x;
  401a18:	4a0a      	ldr	r2, [pc, #40]	; (401a44 <switchBuffer+0x3c>)
  401a1a:	6811      	ldr	r1, [r2, #0]
	*x=*y;
  401a1c:	4b0a      	ldr	r3, [pc, #40]	; (401a48 <switchBuffer+0x40>)
  401a1e:	6818      	ldr	r0, [r3, #0]
  401a20:	6010      	str	r0, [r2, #0]
	*y=temp;
  401a22:	6019      	str	r1, [r3, #0]
		
	} 
	
	swap(&afec_buffer_collector, &algorithm_buffer);
		
	bufferIndexCollector=0;
  401a24:	2200      	movs	r2, #0
  401a26:	4b09      	ldr	r3, [pc, #36]	; (401a4c <switchBuffer+0x44>)
  401a28:	801a      	strh	r2, [r3, #0]
  401a2a:	4770      	bx	lr
		buffersFilled=0; 
  401a2c:	2200      	movs	r2, #0
  401a2e:	4b04      	ldr	r3, [pc, #16]	; (401a40 <switchBuffer+0x38>)
  401a30:	801a      	strh	r2, [r3, #0]
	uint16_t* temp = *x;
  401a32:	4a05      	ldr	r2, [pc, #20]	; (401a48 <switchBuffer+0x40>)
  401a34:	6811      	ldr	r1, [r2, #0]
	*x=*y;
  401a36:	4b06      	ldr	r3, [pc, #24]	; (401a50 <switchBuffer+0x48>)
  401a38:	6818      	ldr	r0, [r3, #0]
  401a3a:	6010      	str	r0, [r2, #0]
	*y=temp;
  401a3c:	6019      	str	r1, [r3, #0]
  401a3e:	e7eb      	b.n	401a18 <switchBuffer+0x10>
  401a40:	2000cee2 	.word	0x2000cee2
  401a44:	20000028 	.word	0x20000028
  401a48:	2000002c 	.word	0x2000002c
  401a4c:	2000cee0 	.word	0x2000cee0
  401a50:	20000030 	.word	0x20000030

00401a54 <cycleEnded>:
		
}

/* Fills possible gap at the end of the signal buffer with zeros, and performs the buffer pointer switch */

void cycleEnded(void){
  401a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	if (bufferIndexCollector < buffersize)
  401a56:	4b0a      	ldr	r3, [pc, #40]	; (401a80 <cycleEnded+0x2c>)
  401a58:	881b      	ldrh	r3, [r3, #0]
  401a5a:	f242 028d 	movw	r2, #8333	; 0x208d
  401a5e:	4293      	cmp	r3, r2
  401a60:	d80a      	bhi.n	401a78 <cycleEnded+0x24>
	{
		for (int i=bufferIndexCollector;i<buffersize;i++)
  401a62:	461c      	mov	r4, r3
  401a64:	dc08      	bgt.n	401a78 <cycleEnded+0x24>
		{
			addSampleCollector(0);
  401a66:	2700      	movs	r7, #0
  401a68:	4e06      	ldr	r6, [pc, #24]	; (401a84 <cycleEnded+0x30>)
		for (int i=bufferIndexCollector;i<buffersize;i++)
  401a6a:	f242 058e 	movw	r5, #8334	; 0x208e
			addSampleCollector(0);
  401a6e:	4638      	mov	r0, r7
  401a70:	47b0      	blx	r6
		for (int i=bufferIndexCollector;i<buffersize;i++)
  401a72:	3401      	adds	r4, #1
  401a74:	42ac      	cmp	r4, r5
  401a76:	d1fa      	bne.n	401a6e <cycleEnded+0x1a>
		}
	} 
	
	
	switchBuffer();
  401a78:	4b03      	ldr	r3, [pc, #12]	; (401a88 <cycleEnded+0x34>)
  401a7a:	4798      	blx	r3
  401a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a7e:	bf00      	nop
  401a80:	2000cee0 	.word	0x2000cee0
  401a84:	004019e1 	.word	0x004019e1
  401a88:	00401a09 	.word	0x00401a09

00401a8c <ACC_Handler>:
  Interrupt handler for the Analog Comparator Controller (triggered by fiducial pulse).
  
 */

void ACC_Handler(void)
{
  401a8c:	b570      	push	{r4, r5, r6, lr}
  401a8e:	b084      	sub	sp, #16
	triggerOffset = config[0];												// Obtain the trigger offset from configuration array
  401a90:	4b37      	ldr	r3, [pc, #220]	; (401b70 <ACC_Handler+0xe4>)
  401a92:	781b      	ldrb	r3, [r3, #0]
	if (triggerOffset > 60) triggerOffset = 60;								// Set trigger offset to 67 if larger (upper limit of one cycle)
  401a94:	2b3c      	cmp	r3, #60	; 0x3c
  401a96:	d809      	bhi.n	401aac <ACC_Handler+0x20>
	triggerOffset = config[0];												// Obtain the trigger offset from configuration array
  401a98:	4a36      	ldr	r2, [pc, #216]	; (401b74 <ACC_Handler+0xe8>)
  401a9a:	7013      	strb	r3, [r2, #0]
	
	uint32_t ul_status;
	ul_status = acc_get_interrupt_status(ACC);								
  401a9c:	4836      	ldr	r0, [pc, #216]	; (401b78 <ACC_Handler+0xec>)
  401a9e:	4b37      	ldr	r3, [pc, #220]	; (401b7c <ACC_Handler+0xf0>)
  401aa0:	4798      	blx	r3
	
	
	/* Compare Output Interrupt */
	
	if ((ul_status & ACC_ISR_CE) == ACC_ISR_CE) 
  401aa2:	f010 0f01 	tst.w	r0, #1
  401aa6:	d105      	bne.n	401ab4 <ACC_Handler+0x28>
			if(triggered)
			triggered=false;
		}
	}
	
}
  401aa8:	b004      	add	sp, #16
  401aaa:	bd70      	pop	{r4, r5, r6, pc}
	if (triggerOffset > 60) triggerOffset = 60;								// Set trigger offset to 67 if larger (upper limit of one cycle)
  401aac:	223c      	movs	r2, #60	; 0x3c
  401aae:	4b31      	ldr	r3, [pc, #196]	; (401b74 <ACC_Handler+0xe8>)
  401ab0:	701a      	strb	r2, [r3, #0]
  401ab2:	e7f3      	b.n	401a9c <ACC_Handler+0x10>
		if (acc_get_comparison_result(ACC))									// check if Vin+ > Vin-
  401ab4:	4830      	ldr	r0, [pc, #192]	; (401b78 <ACC_Handler+0xec>)
  401ab6:	4b32      	ldr	r3, [pc, #200]	; (401b80 <ACC_Handler+0xf4>)
  401ab8:	4798      	blx	r3
  401aba:	2800      	cmp	r0, #0
  401abc:	d050      	beq.n	401b60 <ACC_Handler+0xd4>
			if(!triggered)
  401abe:	4b31      	ldr	r3, [pc, #196]	; (401b84 <ACC_Handler+0xf8>)
  401ac0:	781b      	ldrb	r3, [r3, #0]
  401ac2:	2b00      	cmp	r3, #0
  401ac4:	d1f0      	bne.n	401aa8 <ACC_Handler+0x1c>
				triggered= true;											
  401ac6:	2201      	movs	r2, #1
  401ac8:	4b2e      	ldr	r3, [pc, #184]	; (401b84 <ACC_Handler+0xf8>)
  401aca:	701a      	strb	r2, [r3, #0]
				if(triggerOffset == 0)
  401acc:	4b29      	ldr	r3, [pc, #164]	; (401b74 <ACC_Handler+0xe8>)
  401ace:	781a      	ldrb	r2, [r3, #0]
  401ad0:	b96a      	cbnz	r2, 401aee <ACC_Handler+0x62>
					fullBuffer=true;
  401ad2:	2201      	movs	r2, #1
  401ad4:	4b2c      	ldr	r3, [pc, #176]	; (401b88 <ACC_Handler+0xfc>)
  401ad6:	701a      	strb	r2, [r3, #0]
					tc_start(TC0,0);
  401ad8:	2100      	movs	r1, #0
  401ada:	482c      	ldr	r0, [pc, #176]	; (401b8c <ACC_Handler+0x100>)
  401adc:	4b2c      	ldr	r3, [pc, #176]	; (401b90 <ACC_Handler+0x104>)
  401ade:	4798      	blx	r3
					cycleEnded();											// performs the buffer pointer switch 
  401ae0:	4b2c      	ldr	r3, [pc, #176]	; (401b94 <ACC_Handler+0x108>)
  401ae2:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  401ae8:	4b2b      	ldr	r3, [pc, #172]	; (401b98 <ACC_Handler+0x10c>)
  401aea:	631a      	str	r2, [r3, #48]	; 0x30
  401aec:	e7dc      	b.n	401aa8 <ACC_Handler+0x1c>
/* Configure a delay timer to create the desired phase offset configured by the operator */

static void setDelayTimer(int delayFreq){
	
	uint32_t ul_sysclk = sysclk_get_cpu_hz();											
	uint32_t ul_div=0;
  401aee:	2100      	movs	r1, #0
  401af0:	9102      	str	r1, [sp, #8]
	uint32_t ul_tc_clks=0;
  401af2:	ab04      	add	r3, sp, #16
  401af4:	f843 1d04 	str.w	r1, [r3, #-4]!
					setDelayTimer(1000/triggerOffset);						// set the delay timer frequency based on trigger delay time
  401af8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  401afc:	fb96 f6f2 	sdiv	r6, r6, r2
	uint32_t counts=0;
	tc_find_mck_divisor(delayFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  401b00:	4c26      	ldr	r4, [pc, #152]	; (401b9c <ACC_Handler+0x110>)
  401b02:	9400      	str	r4, [sp, #0]
  401b04:	aa02      	add	r2, sp, #8
  401b06:	4621      	mov	r1, r4
  401b08:	4630      	mov	r0, r6
  401b0a:	4d25      	ldr	r5, [pc, #148]	; (401ba0 <ACC_Handler+0x114>)
  401b0c:	47a8      	blx	r5
	tc_init(TC0,1,ul_tc_clks | TC_CMR_CPCTRG);
  401b0e:	4d1f      	ldr	r5, [pc, #124]	; (401b8c <ACC_Handler+0x100>)
  401b10:	9a03      	ldr	r2, [sp, #12]
  401b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401b16:	2101      	movs	r1, #1
  401b18:	4628      	mov	r0, r5
  401b1a:	4b22      	ldr	r3, [pc, #136]	; (401ba4 <ACC_Handler+0x118>)
  401b1c:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/delayFreq;
  401b1e:	9a02      	ldr	r2, [sp, #8]
  401b20:	fbb4 f2f2 	udiv	r2, r4, r2
	tc_write_rc(TC0,1,counts);
  401b24:	fbb2 f2f6 	udiv	r2, r2, r6
  401b28:	2101      	movs	r1, #1
  401b2a:	4628      	mov	r0, r5
  401b2c:	4b1e      	ldr	r3, [pc, #120]	; (401ba8 <ACC_Handler+0x11c>)
  401b2e:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b30:	4b1e      	ldr	r3, [pc, #120]	; (401bac <ACC_Handler+0x120>)
  401b32:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
  401b36:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  401b3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401b3e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b42:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b46:	601c      	str	r4, [r3, #0]
	
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	NVIC_EnableIRQ((IRQn_Type) ID_TC1);
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
  401b48:	2210      	movs	r2, #16
  401b4a:	2101      	movs	r1, #1
  401b4c:	4628      	mov	r0, r5
  401b4e:	4b18      	ldr	r3, [pc, #96]	; (401bb0 <ACC_Handler+0x124>)
  401b50:	4798      	blx	r3
					tc_start(TC0,1);
  401b52:	2101      	movs	r1, #1
  401b54:	4628      	mov	r0, r5
  401b56:	4b0e      	ldr	r3, [pc, #56]	; (401b90 <ACC_Handler+0x104>)
  401b58:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b5a:	4b16      	ldr	r3, [pc, #88]	; (401bb4 <ACC_Handler+0x128>)
  401b5c:	635c      	str	r4, [r3, #52]	; 0x34
  401b5e:	e7a3      	b.n	401aa8 <ACC_Handler+0x1c>
			if(triggered)
  401b60:	4b08      	ldr	r3, [pc, #32]	; (401b84 <ACC_Handler+0xf8>)
  401b62:	781b      	ldrb	r3, [r3, #0]
  401b64:	2b00      	cmp	r3, #0
  401b66:	d09f      	beq.n	401aa8 <ACC_Handler+0x1c>
			triggered=false;
  401b68:	2200      	movs	r2, #0
  401b6a:	4b06      	ldr	r3, [pc, #24]	; (401b84 <ACC_Handler+0xf8>)
  401b6c:	701a      	strb	r2, [r3, #0]
}
  401b6e:	e79b      	b.n	401aa8 <ACC_Handler+0x1c>
  401b70:	20000018 	.word	0x20000018
  401b74:	2000ceed 	.word	0x2000ceed
  401b78:	400bc000 	.word	0x400bc000
  401b7c:	004010bd 	.word	0x004010bd
  401b80:	004010a3 	.word	0x004010a3
  401b84:	2000ceee 	.word	0x2000ceee
  401b88:	2000ceec 	.word	0x2000ceec
  401b8c:	40090000 	.word	0x40090000
  401b90:	004015a7 	.word	0x004015a7
  401b94:	00401a55 	.word	0x00401a55
  401b98:	400e0e00 	.word	0x400e0e00
  401b9c:	05b8d800 	.word	0x05b8d800
  401ba0:	004015cf 	.word	0x004015cf
  401ba4:	0040158d 	.word	0x0040158d
  401ba8:	004015b7 	.word	0x004015b7
  401bac:	e000e100 	.word	0xe000e100
  401bb0:	004015bf 	.word	0x004015bf
  401bb4:	400e1400 	.word	0x400e1400

00401bb8 <TC1_Handler>:
void TC1_Handler(void){
  401bb8:	b510      	push	{r4, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401bbe:	4a12      	ldr	r2, [pc, #72]	; (401c08 <TC1_Handler+0x50>)
  401bc0:	6313      	str	r3, [r2, #48]	; 0x30
  401bc2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  401bc6:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  401bca:	6311      	str	r1, [r2, #48]	; 0x30
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401bcc:	4a0f      	ldr	r2, [pc, #60]	; (401c0c <TC1_Handler+0x54>)
  401bce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  401bd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401bd6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401bda:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	tc_disable_interrupt(TC0, 1, TC_IER_CPCS);
  401bde:	4c0c      	ldr	r4, [pc, #48]	; (401c10 <TC1_Handler+0x58>)
  401be0:	2210      	movs	r2, #16
  401be2:	2101      	movs	r1, #1
  401be4:	4620      	mov	r0, r4
  401be6:	4b0b      	ldr	r3, [pc, #44]	; (401c14 <TC1_Handler+0x5c>)
  401be8:	4798      	blx	r3
	tc_stop(TC0,1);
  401bea:	2101      	movs	r1, #1
  401bec:	4620      	mov	r0, r4
  401bee:	4b0a      	ldr	r3, [pc, #40]	; (401c18 <TC1_Handler+0x60>)
  401bf0:	4798      	blx	r3
	fullBuffer=true;
  401bf2:	2201      	movs	r2, #1
  401bf4:	4b09      	ldr	r3, [pc, #36]	; (401c1c <TC1_Handler+0x64>)
  401bf6:	701a      	strb	r2, [r3, #0]
	cycleEnded();
  401bf8:	4b09      	ldr	r3, [pc, #36]	; (401c20 <TC1_Handler+0x68>)
  401bfa:	4798      	blx	r3
	tc_start(TC0,0);
  401bfc:	2100      	movs	r1, #0
  401bfe:	4620      	mov	r0, r4
  401c00:	4b08      	ldr	r3, [pc, #32]	; (401c24 <TC1_Handler+0x6c>)
  401c02:	4798      	blx	r3
  401c04:	bd10      	pop	{r4, pc}
  401c06:	bf00      	nop
  401c08:	400e1400 	.word	0x400e1400
  401c0c:	e000e100 	.word	0xe000e100
  401c10:	40090000 	.word	0x40090000
  401c14:	004015c7 	.word	0x004015c7
  401c18:	004015af 	.word	0x004015af
  401c1c:	2000ceec 	.word	0x2000ceec
  401c20:	00401a55 	.word	0x00401a55
  401c24:	004015a7 	.word	0x004015a7

00401c28 <updateDelayCounter>:
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401c28:	4b0c      	ldr	r3, [pc, #48]	; (401c5c <updateDelayCounter+0x34>)
  401c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}



void updateDelayCounter(){
	if (ioport_get_pin_level(delayOutput)==IOPORT_PIN_LEVEL_HIGH)
  401c2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401c30:	d00f      	beq.n	401c52 <updateDelayCounter+0x2a>
	{
		if (delayCounter>=100)
  401c32:	4b0b      	ldr	r3, [pc, #44]	; (401c60 <updateDelayCounter+0x38>)
  401c34:	681b      	ldr	r3, [r3, #0]
  401c36:	2b63      	cmp	r3, #99	; 0x63
  401c38:	dd07      	ble.n	401c4a <updateDelayCounter+0x22>
		{
		    delayCounter=0;
  401c3a:	2200      	movs	r2, #0
  401c3c:	4b08      	ldr	r3, [pc, #32]	; (401c60 <updateDelayCounter+0x38>)
  401c3e:	601a      	str	r2, [r3, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401c40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  401c44:	4b05      	ldr	r3, [pc, #20]	; (401c5c <updateDelayCounter+0x34>)
  401c46:	635a      	str	r2, [r3, #52]	; 0x34
  401c48:	4770      	bx	lr
			ioport_set_pin_level(delayOutput,IOPORT_PIN_LEVEL_LOW);
		}
		else
		{
			delayCounter++;
  401c4a:	3301      	adds	r3, #1
  401c4c:	4a04      	ldr	r2, [pc, #16]	; (401c60 <updateDelayCounter+0x38>)
  401c4e:	6013      	str	r3, [r2, #0]
  401c50:	4770      	bx	lr
		}
	}
	else
	{
		delayCounter=0;
  401c52:	2200      	movs	r2, #0
  401c54:	4b02      	ldr	r3, [pc, #8]	; (401c60 <updateDelayCounter+0x38>)
  401c56:	601a      	str	r2, [r3, #0]
  401c58:	4770      	bx	lr
  401c5a:	bf00      	nop
  401c5c:	400e0e00 	.word	0x400e0e00
  401c60:	2000cee8 	.word	0x2000cee8

00401c64 <collector_data_ready>:
{
  401c64:	b508      	push	{r3, lr}
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  401c66:	4b05      	ldr	r3, [pc, #20]	; (401c7c <collector_data_ready+0x18>)
  401c68:	6a18      	ldr	r0, [r3, #32]
	collector_sample_data = afec_get_latest_value(AFEC0);										// Obtain latest sample from COLLECTOR signal (EXT3 - pin4 (ch6))
  401c6a:	b280      	uxth	r0, r0
  401c6c:	4b04      	ldr	r3, [pc, #16]	; (401c80 <collector_data_ready+0x1c>)
  401c6e:	8018      	strh	r0, [r3, #0]
	addSampleCollector(collector_sample_data);													// Add the sample to the collector signal buffer
  401c70:	4b04      	ldr	r3, [pc, #16]	; (401c84 <collector_data_ready+0x20>)
  401c72:	4798      	blx	r3
	updateDelayCounter();
  401c74:	4b04      	ldr	r3, [pc, #16]	; (401c88 <collector_data_ready+0x24>)
  401c76:	4798      	blx	r3
  401c78:	bd08      	pop	{r3, pc}
  401c7a:	bf00      	nop
  401c7c:	400b0000 	.word	0x400b0000
  401c80:	2000cee4 	.word	0x2000cee4
  401c84:	004019e1 	.word	0x004019e1
  401c88:	00401c29 	.word	0x00401c29

00401c8c <main>:
}

/* Main entry point of the application */

int main (void)
{
  401c8c:	b580      	push	{r7, lr}
  401c8e:	b08c      	sub	sp, #48	; 0x30
	/* Initializations of peripherals */
	
	sysclk_init();
  401c90:	4b6e      	ldr	r3, [pc, #440]	; (401e4c <main+0x1c0>)
  401c92:	4798      	blx	r3
	board_init();
  401c94:	4b6e      	ldr	r3, [pc, #440]	; (401e50 <main+0x1c4>)
  401c96:	4798      	blx	r3
	pdc_uart_initialization();
  401c98:	4b6e      	ldr	r3, [pc, #440]	; (401e54 <main+0x1c8>)
  401c9a:	4798      	blx	r3
	afec_enable(AFEC0);
  401c9c:	4c6e      	ldr	r4, [pc, #440]	; (401e58 <main+0x1cc>)
  401c9e:	4620      	mov	r0, r4
  401ca0:	4b6e      	ldr	r3, [pc, #440]	; (401e5c <main+0x1d0>)
  401ca2:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  401ca4:	a805      	add	r0, sp, #20
  401ca6:	4b6e      	ldr	r3, [pc, #440]	; (401e60 <main+0x1d4>)
  401ca8:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  401caa:	a802      	add	r0, sp, #8
  401cac:	4b6d      	ldr	r3, [pc, #436]	; (401e64 <main+0x1d8>)
  401cae:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  401cb0:	a905      	add	r1, sp, #20
  401cb2:	4620      	mov	r0, r4
  401cb4:	4b6c      	ldr	r3, [pc, #432]	; (401e68 <main+0x1dc>)
  401cb6:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  401cb8:	aa02      	add	r2, sp, #8
  401cba:	2106      	movs	r1, #6
  401cbc:	4620      	mov	r0, r4
  401cbe:	4b6b      	ldr	r3, [pc, #428]	; (401e6c <main+0x1e0>)
  401cc0:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  401cc2:	2306      	movs	r3, #6
  401cc4:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  401cc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401cca:	66e3      	str	r3, [r4, #108]	; 0x6c
    uint32_t ul_div = 0;
  401ccc:	2700      	movs	r7, #0
  401cce:	9703      	str	r7, [sp, #12]
	uint32_t ul_tc_clks = 0;
  401cd0:	ae0c      	add	r6, sp, #48	; 0x30
  401cd2:	f846 7d20 	str.w	r7, [r6, #-32]!
	pmc_enable_periph_clk(ID_TC0);														// Enable peripheral clock of timer counter 0
  401cd6:	2015      	movs	r0, #21
  401cd8:	4d65      	ldr	r5, [pc, #404]	; (401e70 <main+0x1e4>)
  401cda:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_TC1);
  401cdc:	2016      	movs	r0, #22
  401cde:	47a8      	blx	r5
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  401ce0:	4d64      	ldr	r5, [pc, #400]	; (401e74 <main+0x1e8>)
  401ce2:	9500      	str	r5, [sp, #0]
  401ce4:	4633      	mov	r3, r6
  401ce6:	aa03      	add	r2, sp, #12
  401ce8:	4629      	mov	r1, r5
  401cea:	4863      	ldr	r0, [pc, #396]	; (401e78 <main+0x1ec>)
  401cec:	4e63      	ldr	r6, [pc, #396]	; (401e7c <main+0x1f0>)
  401cee:	47b0      	blx	r6
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  401cf0:	4e63      	ldr	r6, [pc, #396]	; (401e80 <main+0x1f4>)
  401cf2:	9a04      	ldr	r2, [sp, #16]
  401cf4:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  401cf8:	4639      	mov	r1, r7
  401cfa:	4630      	mov	r0, r6
  401cfc:	4b61      	ldr	r3, [pc, #388]	; (401e84 <main+0x1f8>)
  401cfe:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  401d00:	9b03      	ldr	r3, [sp, #12]
  401d02:	fbb5 f3f3 	udiv	r3, r5, r3
  401d06:	4a60      	ldr	r2, [pc, #384]	; (401e88 <main+0x1fc>)
  401d08:	fba2 2303 	umull	r2, r3, r2, r3
  401d0c:	0c1a      	lsrs	r2, r3, #16
  401d0e:	6172      	str	r2, [r6, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  401d10:	0bdb      	lsrs	r3, r3, #15
  401d12:	61f3      	str	r3, [r6, #28]
	reg = afec->AFEC_MR;
  401d14:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  401d16:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  401d1a:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  401d1e:	6063      	str	r3, [r4, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401d20:	2340      	movs	r3, #64	; 0x40
  401d22:	6163      	str	r3, [r4, #20]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, collector_data_ready, 1);
  401d24:	2301      	movs	r3, #1
  401d26:	4a59      	ldr	r2, [pc, #356]	; (401e8c <main+0x200>)
  401d28:	2110      	movs	r1, #16
  401d2a:	4620      	mov	r0, r4
  401d2c:	4d58      	ldr	r5, [pc, #352]	; (401e90 <main+0x204>)
  401d2e:	47a8      	blx	r5
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  401d30:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  401d32:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  401d34:	6863      	ldr	r3, [r4, #4]
  401d36:	f013 0f80 	tst.w	r3, #128	; 0x80
  401d3a:	d101      	bne.n	401d40 <main+0xb4>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  401d3c:	2208      	movs	r2, #8
  401d3e:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  401d40:	4b45      	ldr	r3, [pc, #276]	; (401e58 <main+0x1cc>)
  401d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  401d44:	2a00      	cmp	r2, #0
  401d46:	dafc      	bge.n	401d42 <main+0xb6>
	pmc_enable_periph_clk(ID_DACC);
  401d48:	2020      	movs	r0, #32
  401d4a:	4d49      	ldr	r5, [pc, #292]	; (401e70 <main+0x1e4>)
  401d4c:	47a8      	blx	r5
	dacc_reset(DACC);
  401d4e:	4c51      	ldr	r4, [pc, #324]	; (401e94 <main+0x208>)
  401d50:	4620      	mov	r0, r4
  401d52:	4b51      	ldr	r3, [pc, #324]	; (401e98 <main+0x20c>)
  401d54:	4798      	blx	r3
	dacc_disable_trigger(DACC);
  401d56:	4620      	mov	r0, r4
  401d58:	4b50      	ldr	r3, [pc, #320]	; (401e9c <main+0x210>)
  401d5a:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
  401d5c:	2100      	movs	r1, #0
  401d5e:	4620      	mov	r0, r4
  401d60:	4b4f      	ldr	r3, [pc, #316]	; (401ea0 <main+0x214>)
  401d62:	4798      	blx	r3
	dacc_set_timing(DACC, 0, 0xf);
  401d64:	220f      	movs	r2, #15
  401d66:	2100      	movs	r1, #0
  401d68:	4620      	mov	r0, r4
  401d6a:	4b4e      	ldr	r3, [pc, #312]	; (401ea4 <main+0x218>)
  401d6c:	4798      	blx	r3
	dacc_set_channel_selection(DACC, DACC_CHANNEL_0);
  401d6e:	2100      	movs	r1, #0
  401d70:	4620      	mov	r0, r4
  401d72:	4b4d      	ldr	r3, [pc, #308]	; (401ea8 <main+0x21c>)
  401d74:	4798      	blx	r3
	dacc_enable_channel(DACC, DACC_CHANNEL_0);
  401d76:	2100      	movs	r1, #0
  401d78:	4620      	mov	r0, r4
  401d7a:	4b4c      	ldr	r3, [pc, #304]	; (401eac <main+0x220>)
  401d7c:	4798      	blx	r3
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  401d7e:	f44f 7185 	mov.w	r1, #266	; 0x10a
  401d82:	4620      	mov	r0, r4
  401d84:	4b4a      	ldr	r3, [pc, #296]	; (401eb0 <main+0x224>)
  401d86:	4798      	blx	r3
	dacc_write_conversion_data(DACC, 3100);
  401d88:	f640 411c 	movw	r1, #3100	; 0xc1c
  401d8c:	4620      	mov	r0, r4
  401d8e:	4b49      	ldr	r3, [pc, #292]	; (401eb4 <main+0x228>)
  401d90:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d92:	4949      	ldr	r1, [pc, #292]	; (401eb8 <main+0x22c>)
  401d94:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  401d98:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d9a:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d9e:	4b47      	ldr	r3, [pc, #284]	; (401ebc <main+0x230>)
  401da0:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
  401da4:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401da6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401dae:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401db0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401db4:	635c      	str	r4, [r3, #52]	; 0x34
		base->PIO_PUER = mask;
  401db6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401dbc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401dbe:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401dc4:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401dc6:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
  401dca:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401dcc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  401dce:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
  401dd2:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  401dd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401dd8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  401ddc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401de0:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401de2:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	ioport_set_pin_mode(resetButton,IOPORT_MODE_PULLUP|IOPORT_MODE_DEBOUNCE);
	ioport_set_pin_sense_mode(resetButton, IOPORT_SENSE_RISING);
	
	ioport_set_pin_dir(delayPin,IOPORT_DIR_OUTPUT);
	
	pmc_enable_periph_clk(ID_ACC);
  401de6:	2021      	movs	r0, #33	; 0x21
  401de8:	47a8      	blx	r5
	acc_init(ACC, ACC_MR_SELPLUS_AD7, ACC_MR_SELMINUS_DAC0,			// set pin AFEC1 AD1 (EXT1 pin 4) as + comparator and DAC channel 0 as -
  401dea:	4c35      	ldr	r4, [pc, #212]	; (401ec0 <main+0x234>)
  401dec:	2300      	movs	r3, #0
  401dee:	9300      	str	r3, [sp, #0]
  401df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401df4:	2202      	movs	r2, #2
  401df6:	2170      	movs	r1, #112	; 0x70
  401df8:	4620      	mov	r0, r4
  401dfa:	4d32      	ldr	r5, [pc, #200]	; (401ec4 <main+0x238>)
  401dfc:	47a8      	blx	r5
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401dfe:	2202      	movs	r2, #2
  401e00:	4b31      	ldr	r3, [pc, #196]	; (401ec8 <main+0x23c>)
  401e02:	605a      	str	r2, [r3, #4]
	ACC_MR_EDGETYP_ANY, ACC_MR_INV_DIS);
	NVIC_EnableIRQ(ACC_IRQn);
	acc_enable_interrupt(ACC);	
  401e04:	4620      	mov	r0, r4
  401e06:	4b31      	ldr	r3, [pc, #196]	; (401ecc <main+0x240>)
  401e08:	4798      	blx	r3
	/* Main event loop, polling for asynchronous data requests from Matlab application*/
	
	while (1) 
	{
		
		if(fullBuffer)												// flag that indicates a cycle has ended
  401e0a:	4c31      	ldr	r4, [pc, #196]	; (401ed0 <main+0x244>)
		{
			fullBuffer=false;
			
			/* Compute the parameters corresponding to this cycle*/
			compute_beam_parameters();
  401e0c:	4e31      	ldr	r6, [pc, #196]	; (401ed4 <main+0x248>)
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401e0e:	4d2b      	ldr	r5, [pc, #172]	; (401ebc <main+0x230>)
			else if (config[3]!= 0) send_cycle_plot();
		}
		
		
		if(ioport_get_pin_level(resetButton)!=IOPORT_PIN_LEVEL_HIGH){
			rstc_start_software_reset(RSTC);
  401e10:	4f31      	ldr	r7, [pc, #196]	; (401ed8 <main+0x24c>)
  401e12:	e005      	b.n	401e20 <main+0x194>
			if (config[2]!= 0) send_beam_parameters();
  401e14:	4b31      	ldr	r3, [pc, #196]	; (401edc <main+0x250>)
  401e16:	4798      	blx	r3
  401e18:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		if(ioport_get_pin_level(resetButton)!=IOPORT_PIN_LEVEL_HIGH){
  401e1a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401e1e:	d010      	beq.n	401e42 <main+0x1b6>
		if(fullBuffer)												// flag that indicates a cycle has ended
  401e20:	7823      	ldrb	r3, [r4, #0]
  401e22:	2b00      	cmp	r3, #0
  401e24:	d0f8      	beq.n	401e18 <main+0x18c>
			fullBuffer=false;
  401e26:	2300      	movs	r3, #0
  401e28:	7023      	strb	r3, [r4, #0]
			compute_beam_parameters();
  401e2a:	47b0      	blx	r6
			if (config[2]!= 0) send_beam_parameters();
  401e2c:	4b2c      	ldr	r3, [pc, #176]	; (401ee0 <main+0x254>)
  401e2e:	789b      	ldrb	r3, [r3, #2]
  401e30:	2b00      	cmp	r3, #0
  401e32:	d1ef      	bne.n	401e14 <main+0x188>
			else if (config[3]!= 0) send_cycle_plot();
  401e34:	4b2a      	ldr	r3, [pc, #168]	; (401ee0 <main+0x254>)
  401e36:	78db      	ldrb	r3, [r3, #3]
  401e38:	2b00      	cmp	r3, #0
  401e3a:	d0ed      	beq.n	401e18 <main+0x18c>
  401e3c:	4b29      	ldr	r3, [pc, #164]	; (401ee4 <main+0x258>)
  401e3e:	4798      	blx	r3
  401e40:	e7ea      	b.n	401e18 <main+0x18c>
			rstc_start_software_reset(RSTC);
  401e42:	4638      	mov	r0, r7
  401e44:	4b28      	ldr	r3, [pc, #160]	; (401ee8 <main+0x25c>)
  401e46:	4798      	blx	r3
  401e48:	e7ea      	b.n	401e20 <main+0x194>
  401e4a:	bf00      	nop
  401e4c:	00400dad 	.word	0x00400dad
  401e50:	00400fd1 	.word	0x00400fd1
  401e54:	00400d09 	.word	0x00400d09
  401e58:	400b0000 	.word	0x400b0000
  401e5c:	00401355 	.word	0x00401355
  401e60:	0040118d 	.word	0x0040118d
  401e64:	004011bd 	.word	0x004011bd
  401e68:	004011c9 	.word	0x004011c9
  401e6c:	0040115d 	.word	0x0040115d
  401e70:	00401539 	.word	0x00401539
  401e74:	05b8d800 	.word	0x05b8d800
  401e78:	0001e848 	.word	0x0001e848
  401e7c:	004015cf 	.word	0x004015cf
  401e80:	40090000 	.word	0x40090000
  401e84:	0040158d 	.word	0x0040158d
  401e88:	431bde83 	.word	0x431bde83
  401e8c:	00401c65 	.word	0x00401c65
  401e90:	004012d5 	.word	0x004012d5
  401e94:	400b8000 	.word	0x400b8000
  401e98:	004013b9 	.word	0x004013b9
  401e9c:	004013bf 	.word	0x004013bf
  401ea0:	004013c9 	.word	0x004013c9
  401ea4:	0040140d 	.word	0x0040140d
  401ea8:	004013f5 	.word	0x004013f5
  401eac:	00401435 	.word	0x00401435
  401eb0:	00401449 	.word	0x00401449
  401eb4:	004013f1 	.word	0x004013f1
  401eb8:	400e1400 	.word	0x400e1400
  401ebc:	400e0e00 	.word	0x400e0e00
  401ec0:	400bc000 	.word	0x400bc000
  401ec4:	00401069 	.word	0x00401069
  401ec8:	e000e100 	.word	0xe000e100
  401ecc:	004010b7 	.word	0x004010b7
  401ed0:	2000ceec 	.word	0x2000ceec
  401ed4:	0040074d 	.word	0x0040074d
  401ed8:	400e1800 	.word	0x400e1800
  401edc:	00400c51 	.word	0x00400c51
  401ee0:	20000018 	.word	0x20000018
  401ee4:	00400c15 	.word	0x00400c15
  401ee8:	00400a85 	.word	0x00400a85

00401eec <sqrt>:
  401eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ef0:	b08b      	sub	sp, #44	; 0x2c
  401ef2:	4604      	mov	r4, r0
  401ef4:	460d      	mov	r5, r1
  401ef6:	f000 f857 	bl	401fa8 <__ieee754_sqrt>
  401efa:	4b29      	ldr	r3, [pc, #164]	; (401fa0 <sqrt+0xb4>)
  401efc:	f993 a000 	ldrsb.w	sl, [r3]
  401f00:	f1ba 3fff 	cmp.w	sl, #4294967295
  401f04:	4606      	mov	r6, r0
  401f06:	460f      	mov	r7, r1
  401f08:	d012      	beq.n	401f30 <sqrt+0x44>
  401f0a:	4622      	mov	r2, r4
  401f0c:	462b      	mov	r3, r5
  401f0e:	4620      	mov	r0, r4
  401f10:	4629      	mov	r1, r5
  401f12:	f000 fd59 	bl	4029c8 <__aeabi_dcmpun>
  401f16:	4683      	mov	fp, r0
  401f18:	b950      	cbnz	r0, 401f30 <sqrt+0x44>
  401f1a:	f04f 0800 	mov.w	r8, #0
  401f1e:	f04f 0900 	mov.w	r9, #0
  401f22:	4642      	mov	r2, r8
  401f24:	464b      	mov	r3, r9
  401f26:	4620      	mov	r0, r4
  401f28:	4629      	mov	r1, r5
  401f2a:	f000 fd25 	bl	402978 <__aeabi_dcmplt>
  401f2e:	b920      	cbnz	r0, 401f3a <sqrt+0x4e>
  401f30:	4630      	mov	r0, r6
  401f32:	4639      	mov	r1, r7
  401f34:	b00b      	add	sp, #44	; 0x2c
  401f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f3a:	4b1a      	ldr	r3, [pc, #104]	; (401fa4 <sqrt+0xb8>)
  401f3c:	f8cd b020 	str.w	fp, [sp, #32]
  401f40:	2201      	movs	r2, #1
  401f42:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401f46:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401f4a:	e88d 000c 	stmia.w	sp, {r2, r3}
  401f4e:	f1ba 0f00 	cmp.w	sl, #0
  401f52:	d017      	beq.n	401f84 <sqrt+0x98>
  401f54:	4642      	mov	r2, r8
  401f56:	464b      	mov	r3, r9
  401f58:	4640      	mov	r0, r8
  401f5a:	4649      	mov	r1, r9
  401f5c:	f000 fbc4 	bl	4026e8 <__aeabi_ddiv>
  401f60:	f1ba 0f02 	cmp.w	sl, #2
  401f64:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401f68:	d10e      	bne.n	401f88 <sqrt+0x9c>
  401f6a:	f000 fdbb 	bl	402ae4 <__errno>
  401f6e:	2321      	movs	r3, #33	; 0x21
  401f70:	6003      	str	r3, [r0, #0]
  401f72:	9b08      	ldr	r3, [sp, #32]
  401f74:	b973      	cbnz	r3, 401f94 <sqrt+0xa8>
  401f76:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  401f7a:	4630      	mov	r0, r6
  401f7c:	4639      	mov	r1, r7
  401f7e:	b00b      	add	sp, #44	; 0x2c
  401f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f84:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401f88:	4668      	mov	r0, sp
  401f8a:	f000 f8c9 	bl	402120 <matherr>
  401f8e:	2800      	cmp	r0, #0
  401f90:	d1ef      	bne.n	401f72 <sqrt+0x86>
  401f92:	e7ea      	b.n	401f6a <sqrt+0x7e>
  401f94:	f000 fda6 	bl	402ae4 <__errno>
  401f98:	9b08      	ldr	r3, [sp, #32]
  401f9a:	6003      	str	r3, [r0, #0]
  401f9c:	e7eb      	b.n	401f76 <sqrt+0x8a>
  401f9e:	bf00      	nop
  401fa0:	20000034 	.word	0x20000034
  401fa4:	00403be8 	.word	0x00403be8

00401fa8 <__ieee754_sqrt>:
  401fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401fac:	4f5b      	ldr	r7, [pc, #364]	; (40211c <__ieee754_sqrt+0x174>)
  401fae:	438f      	bics	r7, r1
  401fb0:	4605      	mov	r5, r0
  401fb2:	460c      	mov	r4, r1
  401fb4:	f000 8092 	beq.w	4020dc <__ieee754_sqrt+0x134>
  401fb8:	2900      	cmp	r1, #0
  401fba:	460b      	mov	r3, r1
  401fbc:	4602      	mov	r2, r0
  401fbe:	dd6f      	ble.n	4020a0 <__ieee754_sqrt+0xf8>
  401fc0:	150f      	asrs	r7, r1, #20
  401fc2:	d07b      	beq.n	4020bc <__ieee754_sqrt+0x114>
  401fc4:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  401fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
  401fcc:	07f8      	lsls	r0, r7, #31
  401fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401fd2:	d45c      	bmi.n	40208e <__ieee754_sqrt+0xe6>
  401fd4:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  401fd8:	2600      	movs	r6, #0
  401fda:	440b      	add	r3, r1
  401fdc:	107f      	asrs	r7, r7, #1
  401fde:	0052      	lsls	r2, r2, #1
  401fe0:	46b6      	mov	lr, r6
  401fe2:	2016      	movs	r0, #22
  401fe4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401fe8:	eb0e 0401 	add.w	r4, lr, r1
  401fec:	429c      	cmp	r4, r3
  401fee:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  401ff2:	ea4f 0242 	mov.w	r2, r2, lsl #1
  401ff6:	dc03      	bgt.n	402000 <__ieee754_sqrt+0x58>
  401ff8:	1b1b      	subs	r3, r3, r4
  401ffa:	eb04 0e01 	add.w	lr, r4, r1
  401ffe:	440e      	add	r6, r1
  402000:	3801      	subs	r0, #1
  402002:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  402006:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40200a:	d1ed      	bne.n	401fe8 <__ieee754_sqrt+0x40>
  40200c:	4684      	mov	ip, r0
  40200e:	2420      	movs	r4, #32
  402010:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402014:	e009      	b.n	40202a <__ieee754_sqrt+0x82>
  402016:	d020      	beq.n	40205a <__ieee754_sqrt+0xb2>
  402018:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  40201c:	3c01      	subs	r4, #1
  40201e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402022:	442b      	add	r3, r5
  402024:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402028:	d020      	beq.n	40206c <__ieee754_sqrt+0xc4>
  40202a:	4573      	cmp	r3, lr
  40202c:	eb01 050c 	add.w	r5, r1, ip
  402030:	ddf1      	ble.n	402016 <__ieee754_sqrt+0x6e>
  402032:	2d00      	cmp	r5, #0
  402034:	eb05 0c01 	add.w	ip, r5, r1
  402038:	db09      	blt.n	40204e <__ieee754_sqrt+0xa6>
  40203a:	46f0      	mov	r8, lr
  40203c:	4295      	cmp	r5, r2
  40203e:	eba3 030e 	sub.w	r3, r3, lr
  402042:	d900      	bls.n	402046 <__ieee754_sqrt+0x9e>
  402044:	3b01      	subs	r3, #1
  402046:	1b52      	subs	r2, r2, r5
  402048:	4408      	add	r0, r1
  40204a:	46c6      	mov	lr, r8
  40204c:	e7e4      	b.n	402018 <__ieee754_sqrt+0x70>
  40204e:	f1bc 0f00 	cmp.w	ip, #0
  402052:	dbf2      	blt.n	40203a <__ieee754_sqrt+0x92>
  402054:	f10e 0801 	add.w	r8, lr, #1
  402058:	e7f0      	b.n	40203c <__ieee754_sqrt+0x94>
  40205a:	4295      	cmp	r5, r2
  40205c:	d8dc      	bhi.n	402018 <__ieee754_sqrt+0x70>
  40205e:	2d00      	cmp	r5, #0
  402060:	eb05 0c01 	add.w	ip, r5, r1
  402064:	db44      	blt.n	4020f0 <__ieee754_sqrt+0x148>
  402066:	4698      	mov	r8, r3
  402068:	2300      	movs	r3, #0
  40206a:	e7ec      	b.n	402046 <__ieee754_sqrt+0x9e>
  40206c:	4313      	orrs	r3, r2
  40206e:	d113      	bne.n	402098 <__ieee754_sqrt+0xf0>
  402070:	0840      	lsrs	r0, r0, #1
  402072:	1073      	asrs	r3, r6, #1
  402074:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402078:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40207c:	07f2      	lsls	r2, r6, #31
  40207e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  402082:	bf48      	it	mi
  402084:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402088:	4649      	mov	r1, r9
  40208a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40208e:	005b      	lsls	r3, r3, #1
  402090:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  402094:	0052      	lsls	r2, r2, #1
  402096:	e79d      	b.n	401fd4 <__ieee754_sqrt+0x2c>
  402098:	1c41      	adds	r1, r0, #1
  40209a:	d02d      	beq.n	4020f8 <__ieee754_sqrt+0x150>
  40209c:	3001      	adds	r0, #1
  40209e:	e7e7      	b.n	402070 <__ieee754_sqrt+0xc8>
  4020a0:	4606      	mov	r6, r0
  4020a2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4020a6:	433e      	orrs	r6, r7
  4020a8:	d0ef      	beq.n	40208a <__ieee754_sqrt+0xe2>
  4020aa:	bb69      	cbnz	r1, 402108 <__ieee754_sqrt+0x160>
  4020ac:	460f      	mov	r7, r1
  4020ae:	0ad3      	lsrs	r3, r2, #11
  4020b0:	3f15      	subs	r7, #21
  4020b2:	0552      	lsls	r2, r2, #21
  4020b4:	2b00      	cmp	r3, #0
  4020b6:	d0fa      	beq.n	4020ae <__ieee754_sqrt+0x106>
  4020b8:	02de      	lsls	r6, r3, #11
  4020ba:	d420      	bmi.n	4020fe <__ieee754_sqrt+0x156>
  4020bc:	2400      	movs	r4, #0
  4020be:	e000      	b.n	4020c2 <__ieee754_sqrt+0x11a>
  4020c0:	4604      	mov	r4, r0
  4020c2:	005b      	lsls	r3, r3, #1
  4020c4:	02dd      	lsls	r5, r3, #11
  4020c6:	f104 0001 	add.w	r0, r4, #1
  4020ca:	d5f9      	bpl.n	4020c0 <__ieee754_sqrt+0x118>
  4020cc:	f1c0 0120 	rsb	r1, r0, #32
  4020d0:	fa22 f101 	lsr.w	r1, r2, r1
  4020d4:	430b      	orrs	r3, r1
  4020d6:	1b3f      	subs	r7, r7, r4
  4020d8:	4082      	lsls	r2, r0
  4020da:	e773      	b.n	401fc4 <__ieee754_sqrt+0x1c>
  4020dc:	4602      	mov	r2, r0
  4020de:	460b      	mov	r3, r1
  4020e0:	f000 f9d8 	bl	402494 <__aeabi_dmul>
  4020e4:	462a      	mov	r2, r5
  4020e6:	4623      	mov	r3, r4
  4020e8:	f000 f822 	bl	402130 <__adddf3>
  4020ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4020f0:	f1bc 0f00 	cmp.w	ip, #0
  4020f4:	daae      	bge.n	402054 <__ieee754_sqrt+0xac>
  4020f6:	e7b6      	b.n	402066 <__ieee754_sqrt+0xbe>
  4020f8:	3601      	adds	r6, #1
  4020fa:	4620      	mov	r0, r4
  4020fc:	e7b9      	b.n	402072 <__ieee754_sqrt+0xca>
  4020fe:	2000      	movs	r0, #0
  402100:	2120      	movs	r1, #32
  402102:	f04f 34ff 	mov.w	r4, #4294967295
  402106:	e7e3      	b.n	4020d0 <__ieee754_sqrt+0x128>
  402108:	4602      	mov	r2, r0
  40210a:	460b      	mov	r3, r1
  40210c:	f000 f80e 	bl	40212c <__aeabi_dsub>
  402110:	4602      	mov	r2, r0
  402112:	460b      	mov	r3, r1
  402114:	f000 fae8 	bl	4026e8 <__aeabi_ddiv>
  402118:	e7b7      	b.n	40208a <__ieee754_sqrt+0xe2>
  40211a:	bf00      	nop
  40211c:	7ff00000 	.word	0x7ff00000

00402120 <matherr>:
  402120:	2000      	movs	r0, #0
  402122:	4770      	bx	lr

00402124 <__aeabi_drsub>:
  402124:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402128:	e002      	b.n	402130 <__adddf3>
  40212a:	bf00      	nop

0040212c <__aeabi_dsub>:
  40212c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402130 <__adddf3>:
  402130:	b530      	push	{r4, r5, lr}
  402132:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402136:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40213a:	ea94 0f05 	teq	r4, r5
  40213e:	bf08      	it	eq
  402140:	ea90 0f02 	teqeq	r0, r2
  402144:	bf1f      	itttt	ne
  402146:	ea54 0c00 	orrsne.w	ip, r4, r0
  40214a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40214e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402152:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402156:	f000 80e2 	beq.w	40231e <__adddf3+0x1ee>
  40215a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40215e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402162:	bfb8      	it	lt
  402164:	426d      	neglt	r5, r5
  402166:	dd0c      	ble.n	402182 <__adddf3+0x52>
  402168:	442c      	add	r4, r5
  40216a:	ea80 0202 	eor.w	r2, r0, r2
  40216e:	ea81 0303 	eor.w	r3, r1, r3
  402172:	ea82 0000 	eor.w	r0, r2, r0
  402176:	ea83 0101 	eor.w	r1, r3, r1
  40217a:	ea80 0202 	eor.w	r2, r0, r2
  40217e:	ea81 0303 	eor.w	r3, r1, r3
  402182:	2d36      	cmp	r5, #54	; 0x36
  402184:	bf88      	it	hi
  402186:	bd30      	pophi	{r4, r5, pc}
  402188:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40218c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402190:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402194:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402198:	d002      	beq.n	4021a0 <__adddf3+0x70>
  40219a:	4240      	negs	r0, r0
  40219c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4021a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4021a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4021a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4021ac:	d002      	beq.n	4021b4 <__adddf3+0x84>
  4021ae:	4252      	negs	r2, r2
  4021b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4021b4:	ea94 0f05 	teq	r4, r5
  4021b8:	f000 80a7 	beq.w	40230a <__adddf3+0x1da>
  4021bc:	f1a4 0401 	sub.w	r4, r4, #1
  4021c0:	f1d5 0e20 	rsbs	lr, r5, #32
  4021c4:	db0d      	blt.n	4021e2 <__adddf3+0xb2>
  4021c6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4021ca:	fa22 f205 	lsr.w	r2, r2, r5
  4021ce:	1880      	adds	r0, r0, r2
  4021d0:	f141 0100 	adc.w	r1, r1, #0
  4021d4:	fa03 f20e 	lsl.w	r2, r3, lr
  4021d8:	1880      	adds	r0, r0, r2
  4021da:	fa43 f305 	asr.w	r3, r3, r5
  4021de:	4159      	adcs	r1, r3
  4021e0:	e00e      	b.n	402200 <__adddf3+0xd0>
  4021e2:	f1a5 0520 	sub.w	r5, r5, #32
  4021e6:	f10e 0e20 	add.w	lr, lr, #32
  4021ea:	2a01      	cmp	r2, #1
  4021ec:	fa03 fc0e 	lsl.w	ip, r3, lr
  4021f0:	bf28      	it	cs
  4021f2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4021f6:	fa43 f305 	asr.w	r3, r3, r5
  4021fa:	18c0      	adds	r0, r0, r3
  4021fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402200:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402204:	d507      	bpl.n	402216 <__adddf3+0xe6>
  402206:	f04f 0e00 	mov.w	lr, #0
  40220a:	f1dc 0c00 	rsbs	ip, ip, #0
  40220e:	eb7e 0000 	sbcs.w	r0, lr, r0
  402212:	eb6e 0101 	sbc.w	r1, lr, r1
  402216:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40221a:	d31b      	bcc.n	402254 <__adddf3+0x124>
  40221c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402220:	d30c      	bcc.n	40223c <__adddf3+0x10c>
  402222:	0849      	lsrs	r1, r1, #1
  402224:	ea5f 0030 	movs.w	r0, r0, rrx
  402228:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40222c:	f104 0401 	add.w	r4, r4, #1
  402230:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402234:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402238:	f080 809a 	bcs.w	402370 <__adddf3+0x240>
  40223c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402240:	bf08      	it	eq
  402242:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402246:	f150 0000 	adcs.w	r0, r0, #0
  40224a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40224e:	ea41 0105 	orr.w	r1, r1, r5
  402252:	bd30      	pop	{r4, r5, pc}
  402254:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402258:	4140      	adcs	r0, r0
  40225a:	eb41 0101 	adc.w	r1, r1, r1
  40225e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402262:	f1a4 0401 	sub.w	r4, r4, #1
  402266:	d1e9      	bne.n	40223c <__adddf3+0x10c>
  402268:	f091 0f00 	teq	r1, #0
  40226c:	bf04      	itt	eq
  40226e:	4601      	moveq	r1, r0
  402270:	2000      	moveq	r0, #0
  402272:	fab1 f381 	clz	r3, r1
  402276:	bf08      	it	eq
  402278:	3320      	addeq	r3, #32
  40227a:	f1a3 030b 	sub.w	r3, r3, #11
  40227e:	f1b3 0220 	subs.w	r2, r3, #32
  402282:	da0c      	bge.n	40229e <__adddf3+0x16e>
  402284:	320c      	adds	r2, #12
  402286:	dd08      	ble.n	40229a <__adddf3+0x16a>
  402288:	f102 0c14 	add.w	ip, r2, #20
  40228c:	f1c2 020c 	rsb	r2, r2, #12
  402290:	fa01 f00c 	lsl.w	r0, r1, ip
  402294:	fa21 f102 	lsr.w	r1, r1, r2
  402298:	e00c      	b.n	4022b4 <__adddf3+0x184>
  40229a:	f102 0214 	add.w	r2, r2, #20
  40229e:	bfd8      	it	le
  4022a0:	f1c2 0c20 	rsble	ip, r2, #32
  4022a4:	fa01 f102 	lsl.w	r1, r1, r2
  4022a8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4022ac:	bfdc      	itt	le
  4022ae:	ea41 010c 	orrle.w	r1, r1, ip
  4022b2:	4090      	lslle	r0, r2
  4022b4:	1ae4      	subs	r4, r4, r3
  4022b6:	bfa2      	ittt	ge
  4022b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4022bc:	4329      	orrge	r1, r5
  4022be:	bd30      	popge	{r4, r5, pc}
  4022c0:	ea6f 0404 	mvn.w	r4, r4
  4022c4:	3c1f      	subs	r4, #31
  4022c6:	da1c      	bge.n	402302 <__adddf3+0x1d2>
  4022c8:	340c      	adds	r4, #12
  4022ca:	dc0e      	bgt.n	4022ea <__adddf3+0x1ba>
  4022cc:	f104 0414 	add.w	r4, r4, #20
  4022d0:	f1c4 0220 	rsb	r2, r4, #32
  4022d4:	fa20 f004 	lsr.w	r0, r0, r4
  4022d8:	fa01 f302 	lsl.w	r3, r1, r2
  4022dc:	ea40 0003 	orr.w	r0, r0, r3
  4022e0:	fa21 f304 	lsr.w	r3, r1, r4
  4022e4:	ea45 0103 	orr.w	r1, r5, r3
  4022e8:	bd30      	pop	{r4, r5, pc}
  4022ea:	f1c4 040c 	rsb	r4, r4, #12
  4022ee:	f1c4 0220 	rsb	r2, r4, #32
  4022f2:	fa20 f002 	lsr.w	r0, r0, r2
  4022f6:	fa01 f304 	lsl.w	r3, r1, r4
  4022fa:	ea40 0003 	orr.w	r0, r0, r3
  4022fe:	4629      	mov	r1, r5
  402300:	bd30      	pop	{r4, r5, pc}
  402302:	fa21 f004 	lsr.w	r0, r1, r4
  402306:	4629      	mov	r1, r5
  402308:	bd30      	pop	{r4, r5, pc}
  40230a:	f094 0f00 	teq	r4, #0
  40230e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402312:	bf06      	itte	eq
  402314:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402318:	3401      	addeq	r4, #1
  40231a:	3d01      	subne	r5, #1
  40231c:	e74e      	b.n	4021bc <__adddf3+0x8c>
  40231e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402322:	bf18      	it	ne
  402324:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402328:	d029      	beq.n	40237e <__adddf3+0x24e>
  40232a:	ea94 0f05 	teq	r4, r5
  40232e:	bf08      	it	eq
  402330:	ea90 0f02 	teqeq	r0, r2
  402334:	d005      	beq.n	402342 <__adddf3+0x212>
  402336:	ea54 0c00 	orrs.w	ip, r4, r0
  40233a:	bf04      	itt	eq
  40233c:	4619      	moveq	r1, r3
  40233e:	4610      	moveq	r0, r2
  402340:	bd30      	pop	{r4, r5, pc}
  402342:	ea91 0f03 	teq	r1, r3
  402346:	bf1e      	ittt	ne
  402348:	2100      	movne	r1, #0
  40234a:	2000      	movne	r0, #0
  40234c:	bd30      	popne	{r4, r5, pc}
  40234e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402352:	d105      	bne.n	402360 <__adddf3+0x230>
  402354:	0040      	lsls	r0, r0, #1
  402356:	4149      	adcs	r1, r1
  402358:	bf28      	it	cs
  40235a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40235e:	bd30      	pop	{r4, r5, pc}
  402360:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402364:	bf3c      	itt	cc
  402366:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40236a:	bd30      	popcc	{r4, r5, pc}
  40236c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402370:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402374:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402378:	f04f 0000 	mov.w	r0, #0
  40237c:	bd30      	pop	{r4, r5, pc}
  40237e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402382:	bf1a      	itte	ne
  402384:	4619      	movne	r1, r3
  402386:	4610      	movne	r0, r2
  402388:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40238c:	bf1c      	itt	ne
  40238e:	460b      	movne	r3, r1
  402390:	4602      	movne	r2, r0
  402392:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402396:	bf06      	itte	eq
  402398:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40239c:	ea91 0f03 	teqeq	r1, r3
  4023a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4023a4:	bd30      	pop	{r4, r5, pc}
  4023a6:	bf00      	nop

004023a8 <__aeabi_ui2d>:
  4023a8:	f090 0f00 	teq	r0, #0
  4023ac:	bf04      	itt	eq
  4023ae:	2100      	moveq	r1, #0
  4023b0:	4770      	bxeq	lr
  4023b2:	b530      	push	{r4, r5, lr}
  4023b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4023b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4023bc:	f04f 0500 	mov.w	r5, #0
  4023c0:	f04f 0100 	mov.w	r1, #0
  4023c4:	e750      	b.n	402268 <__adddf3+0x138>
  4023c6:	bf00      	nop

004023c8 <__aeabi_i2d>:
  4023c8:	f090 0f00 	teq	r0, #0
  4023cc:	bf04      	itt	eq
  4023ce:	2100      	moveq	r1, #0
  4023d0:	4770      	bxeq	lr
  4023d2:	b530      	push	{r4, r5, lr}
  4023d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4023d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4023dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4023e0:	bf48      	it	mi
  4023e2:	4240      	negmi	r0, r0
  4023e4:	f04f 0100 	mov.w	r1, #0
  4023e8:	e73e      	b.n	402268 <__adddf3+0x138>
  4023ea:	bf00      	nop

004023ec <__aeabi_f2d>:
  4023ec:	0042      	lsls	r2, r0, #1
  4023ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4023f2:	ea4f 0131 	mov.w	r1, r1, rrx
  4023f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4023fa:	bf1f      	itttt	ne
  4023fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402400:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402404:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402408:	4770      	bxne	lr
  40240a:	f092 0f00 	teq	r2, #0
  40240e:	bf14      	ite	ne
  402410:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402414:	4770      	bxeq	lr
  402416:	b530      	push	{r4, r5, lr}
  402418:	f44f 7460 	mov.w	r4, #896	; 0x380
  40241c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402420:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402424:	e720      	b.n	402268 <__adddf3+0x138>
  402426:	bf00      	nop

00402428 <__aeabi_ul2d>:
  402428:	ea50 0201 	orrs.w	r2, r0, r1
  40242c:	bf08      	it	eq
  40242e:	4770      	bxeq	lr
  402430:	b530      	push	{r4, r5, lr}
  402432:	f04f 0500 	mov.w	r5, #0
  402436:	e00a      	b.n	40244e <__aeabi_l2d+0x16>

00402438 <__aeabi_l2d>:
  402438:	ea50 0201 	orrs.w	r2, r0, r1
  40243c:	bf08      	it	eq
  40243e:	4770      	bxeq	lr
  402440:	b530      	push	{r4, r5, lr}
  402442:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402446:	d502      	bpl.n	40244e <__aeabi_l2d+0x16>
  402448:	4240      	negs	r0, r0
  40244a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40244e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402452:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402456:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40245a:	f43f aedc 	beq.w	402216 <__adddf3+0xe6>
  40245e:	f04f 0203 	mov.w	r2, #3
  402462:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402466:	bf18      	it	ne
  402468:	3203      	addne	r2, #3
  40246a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40246e:	bf18      	it	ne
  402470:	3203      	addne	r2, #3
  402472:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402476:	f1c2 0320 	rsb	r3, r2, #32
  40247a:	fa00 fc03 	lsl.w	ip, r0, r3
  40247e:	fa20 f002 	lsr.w	r0, r0, r2
  402482:	fa01 fe03 	lsl.w	lr, r1, r3
  402486:	ea40 000e 	orr.w	r0, r0, lr
  40248a:	fa21 f102 	lsr.w	r1, r1, r2
  40248e:	4414      	add	r4, r2
  402490:	e6c1      	b.n	402216 <__adddf3+0xe6>
  402492:	bf00      	nop

00402494 <__aeabi_dmul>:
  402494:	b570      	push	{r4, r5, r6, lr}
  402496:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40249a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40249e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4024a2:	bf1d      	ittte	ne
  4024a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4024a8:	ea94 0f0c 	teqne	r4, ip
  4024ac:	ea95 0f0c 	teqne	r5, ip
  4024b0:	f000 f8de 	bleq	402670 <__aeabi_dmul+0x1dc>
  4024b4:	442c      	add	r4, r5
  4024b6:	ea81 0603 	eor.w	r6, r1, r3
  4024ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4024be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4024c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4024c6:	bf18      	it	ne
  4024c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4024cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4024d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4024d4:	d038      	beq.n	402548 <__aeabi_dmul+0xb4>
  4024d6:	fba0 ce02 	umull	ip, lr, r0, r2
  4024da:	f04f 0500 	mov.w	r5, #0
  4024de:	fbe1 e502 	umlal	lr, r5, r1, r2
  4024e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4024e6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4024ea:	f04f 0600 	mov.w	r6, #0
  4024ee:	fbe1 5603 	umlal	r5, r6, r1, r3
  4024f2:	f09c 0f00 	teq	ip, #0
  4024f6:	bf18      	it	ne
  4024f8:	f04e 0e01 	orrne.w	lr, lr, #1
  4024fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402500:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402504:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402508:	d204      	bcs.n	402514 <__aeabi_dmul+0x80>
  40250a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40250e:	416d      	adcs	r5, r5
  402510:	eb46 0606 	adc.w	r6, r6, r6
  402514:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402518:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40251c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402520:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402524:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402528:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40252c:	bf88      	it	hi
  40252e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402532:	d81e      	bhi.n	402572 <__aeabi_dmul+0xde>
  402534:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402538:	bf08      	it	eq
  40253a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40253e:	f150 0000 	adcs.w	r0, r0, #0
  402542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402546:	bd70      	pop	{r4, r5, r6, pc}
  402548:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40254c:	ea46 0101 	orr.w	r1, r6, r1
  402550:	ea40 0002 	orr.w	r0, r0, r2
  402554:	ea81 0103 	eor.w	r1, r1, r3
  402558:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40255c:	bfc2      	ittt	gt
  40255e:	ebd4 050c 	rsbsgt	r5, r4, ip
  402562:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402566:	bd70      	popgt	{r4, r5, r6, pc}
  402568:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40256c:	f04f 0e00 	mov.w	lr, #0
  402570:	3c01      	subs	r4, #1
  402572:	f300 80ab 	bgt.w	4026cc <__aeabi_dmul+0x238>
  402576:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40257a:	bfde      	ittt	le
  40257c:	2000      	movle	r0, #0
  40257e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402582:	bd70      	pople	{r4, r5, r6, pc}
  402584:	f1c4 0400 	rsb	r4, r4, #0
  402588:	3c20      	subs	r4, #32
  40258a:	da35      	bge.n	4025f8 <__aeabi_dmul+0x164>
  40258c:	340c      	adds	r4, #12
  40258e:	dc1b      	bgt.n	4025c8 <__aeabi_dmul+0x134>
  402590:	f104 0414 	add.w	r4, r4, #20
  402594:	f1c4 0520 	rsb	r5, r4, #32
  402598:	fa00 f305 	lsl.w	r3, r0, r5
  40259c:	fa20 f004 	lsr.w	r0, r0, r4
  4025a0:	fa01 f205 	lsl.w	r2, r1, r5
  4025a4:	ea40 0002 	orr.w	r0, r0, r2
  4025a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4025ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4025b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4025b4:	fa21 f604 	lsr.w	r6, r1, r4
  4025b8:	eb42 0106 	adc.w	r1, r2, r6
  4025bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4025c0:	bf08      	it	eq
  4025c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4025c6:	bd70      	pop	{r4, r5, r6, pc}
  4025c8:	f1c4 040c 	rsb	r4, r4, #12
  4025cc:	f1c4 0520 	rsb	r5, r4, #32
  4025d0:	fa00 f304 	lsl.w	r3, r0, r4
  4025d4:	fa20 f005 	lsr.w	r0, r0, r5
  4025d8:	fa01 f204 	lsl.w	r2, r1, r4
  4025dc:	ea40 0002 	orr.w	r0, r0, r2
  4025e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4025e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4025e8:	f141 0100 	adc.w	r1, r1, #0
  4025ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4025f0:	bf08      	it	eq
  4025f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4025f6:	bd70      	pop	{r4, r5, r6, pc}
  4025f8:	f1c4 0520 	rsb	r5, r4, #32
  4025fc:	fa00 f205 	lsl.w	r2, r0, r5
  402600:	ea4e 0e02 	orr.w	lr, lr, r2
  402604:	fa20 f304 	lsr.w	r3, r0, r4
  402608:	fa01 f205 	lsl.w	r2, r1, r5
  40260c:	ea43 0302 	orr.w	r3, r3, r2
  402610:	fa21 f004 	lsr.w	r0, r1, r4
  402614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402618:	fa21 f204 	lsr.w	r2, r1, r4
  40261c:	ea20 0002 	bic.w	r0, r0, r2
  402620:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402628:	bf08      	it	eq
  40262a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40262e:	bd70      	pop	{r4, r5, r6, pc}
  402630:	f094 0f00 	teq	r4, #0
  402634:	d10f      	bne.n	402656 <__aeabi_dmul+0x1c2>
  402636:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40263a:	0040      	lsls	r0, r0, #1
  40263c:	eb41 0101 	adc.w	r1, r1, r1
  402640:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402644:	bf08      	it	eq
  402646:	3c01      	subeq	r4, #1
  402648:	d0f7      	beq.n	40263a <__aeabi_dmul+0x1a6>
  40264a:	ea41 0106 	orr.w	r1, r1, r6
  40264e:	f095 0f00 	teq	r5, #0
  402652:	bf18      	it	ne
  402654:	4770      	bxne	lr
  402656:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40265a:	0052      	lsls	r2, r2, #1
  40265c:	eb43 0303 	adc.w	r3, r3, r3
  402660:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402664:	bf08      	it	eq
  402666:	3d01      	subeq	r5, #1
  402668:	d0f7      	beq.n	40265a <__aeabi_dmul+0x1c6>
  40266a:	ea43 0306 	orr.w	r3, r3, r6
  40266e:	4770      	bx	lr
  402670:	ea94 0f0c 	teq	r4, ip
  402674:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402678:	bf18      	it	ne
  40267a:	ea95 0f0c 	teqne	r5, ip
  40267e:	d00c      	beq.n	40269a <__aeabi_dmul+0x206>
  402680:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402684:	bf18      	it	ne
  402686:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40268a:	d1d1      	bne.n	402630 <__aeabi_dmul+0x19c>
  40268c:	ea81 0103 	eor.w	r1, r1, r3
  402690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402694:	f04f 0000 	mov.w	r0, #0
  402698:	bd70      	pop	{r4, r5, r6, pc}
  40269a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40269e:	bf06      	itte	eq
  4026a0:	4610      	moveq	r0, r2
  4026a2:	4619      	moveq	r1, r3
  4026a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4026a8:	d019      	beq.n	4026de <__aeabi_dmul+0x24a>
  4026aa:	ea94 0f0c 	teq	r4, ip
  4026ae:	d102      	bne.n	4026b6 <__aeabi_dmul+0x222>
  4026b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4026b4:	d113      	bne.n	4026de <__aeabi_dmul+0x24a>
  4026b6:	ea95 0f0c 	teq	r5, ip
  4026ba:	d105      	bne.n	4026c8 <__aeabi_dmul+0x234>
  4026bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4026c0:	bf1c      	itt	ne
  4026c2:	4610      	movne	r0, r2
  4026c4:	4619      	movne	r1, r3
  4026c6:	d10a      	bne.n	4026de <__aeabi_dmul+0x24a>
  4026c8:	ea81 0103 	eor.w	r1, r1, r3
  4026cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4026d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4026d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4026d8:	f04f 0000 	mov.w	r0, #0
  4026dc:	bd70      	pop	{r4, r5, r6, pc}
  4026de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4026e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4026e6:	bd70      	pop	{r4, r5, r6, pc}

004026e8 <__aeabi_ddiv>:
  4026e8:	b570      	push	{r4, r5, r6, lr}
  4026ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4026ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4026f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4026f6:	bf1d      	ittte	ne
  4026f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4026fc:	ea94 0f0c 	teqne	r4, ip
  402700:	ea95 0f0c 	teqne	r5, ip
  402704:	f000 f8a7 	bleq	402856 <__aeabi_ddiv+0x16e>
  402708:	eba4 0405 	sub.w	r4, r4, r5
  40270c:	ea81 0e03 	eor.w	lr, r1, r3
  402710:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402714:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402718:	f000 8088 	beq.w	40282c <__aeabi_ddiv+0x144>
  40271c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402720:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402724:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402728:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40272c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402730:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402734:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402738:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40273c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402740:	429d      	cmp	r5, r3
  402742:	bf08      	it	eq
  402744:	4296      	cmpeq	r6, r2
  402746:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40274a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40274e:	d202      	bcs.n	402756 <__aeabi_ddiv+0x6e>
  402750:	085b      	lsrs	r3, r3, #1
  402752:	ea4f 0232 	mov.w	r2, r2, rrx
  402756:	1ab6      	subs	r6, r6, r2
  402758:	eb65 0503 	sbc.w	r5, r5, r3
  40275c:	085b      	lsrs	r3, r3, #1
  40275e:	ea4f 0232 	mov.w	r2, r2, rrx
  402762:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402766:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40276a:	ebb6 0e02 	subs.w	lr, r6, r2
  40276e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402772:	bf22      	ittt	cs
  402774:	1ab6      	subcs	r6, r6, r2
  402776:	4675      	movcs	r5, lr
  402778:	ea40 000c 	orrcs.w	r0, r0, ip
  40277c:	085b      	lsrs	r3, r3, #1
  40277e:	ea4f 0232 	mov.w	r2, r2, rrx
  402782:	ebb6 0e02 	subs.w	lr, r6, r2
  402786:	eb75 0e03 	sbcs.w	lr, r5, r3
  40278a:	bf22      	ittt	cs
  40278c:	1ab6      	subcs	r6, r6, r2
  40278e:	4675      	movcs	r5, lr
  402790:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402794:	085b      	lsrs	r3, r3, #1
  402796:	ea4f 0232 	mov.w	r2, r2, rrx
  40279a:	ebb6 0e02 	subs.w	lr, r6, r2
  40279e:	eb75 0e03 	sbcs.w	lr, r5, r3
  4027a2:	bf22      	ittt	cs
  4027a4:	1ab6      	subcs	r6, r6, r2
  4027a6:	4675      	movcs	r5, lr
  4027a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4027ac:	085b      	lsrs	r3, r3, #1
  4027ae:	ea4f 0232 	mov.w	r2, r2, rrx
  4027b2:	ebb6 0e02 	subs.w	lr, r6, r2
  4027b6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4027ba:	bf22      	ittt	cs
  4027bc:	1ab6      	subcs	r6, r6, r2
  4027be:	4675      	movcs	r5, lr
  4027c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4027c4:	ea55 0e06 	orrs.w	lr, r5, r6
  4027c8:	d018      	beq.n	4027fc <__aeabi_ddiv+0x114>
  4027ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4027ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4027d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4027d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4027da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4027de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4027e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4027e6:	d1c0      	bne.n	40276a <__aeabi_ddiv+0x82>
  4027e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4027ec:	d10b      	bne.n	402806 <__aeabi_ddiv+0x11e>
  4027ee:	ea41 0100 	orr.w	r1, r1, r0
  4027f2:	f04f 0000 	mov.w	r0, #0
  4027f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4027fa:	e7b6      	b.n	40276a <__aeabi_ddiv+0x82>
  4027fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402800:	bf04      	itt	eq
  402802:	4301      	orreq	r1, r0
  402804:	2000      	moveq	r0, #0
  402806:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40280a:	bf88      	it	hi
  40280c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402810:	f63f aeaf 	bhi.w	402572 <__aeabi_dmul+0xde>
  402814:	ebb5 0c03 	subs.w	ip, r5, r3
  402818:	bf04      	itt	eq
  40281a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40281e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402822:	f150 0000 	adcs.w	r0, r0, #0
  402826:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40282a:	bd70      	pop	{r4, r5, r6, pc}
  40282c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402830:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402834:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402838:	bfc2      	ittt	gt
  40283a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40283e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402842:	bd70      	popgt	{r4, r5, r6, pc}
  402844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402848:	f04f 0e00 	mov.w	lr, #0
  40284c:	3c01      	subs	r4, #1
  40284e:	e690      	b.n	402572 <__aeabi_dmul+0xde>
  402850:	ea45 0e06 	orr.w	lr, r5, r6
  402854:	e68d      	b.n	402572 <__aeabi_dmul+0xde>
  402856:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40285a:	ea94 0f0c 	teq	r4, ip
  40285e:	bf08      	it	eq
  402860:	ea95 0f0c 	teqeq	r5, ip
  402864:	f43f af3b 	beq.w	4026de <__aeabi_dmul+0x24a>
  402868:	ea94 0f0c 	teq	r4, ip
  40286c:	d10a      	bne.n	402884 <__aeabi_ddiv+0x19c>
  40286e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402872:	f47f af34 	bne.w	4026de <__aeabi_dmul+0x24a>
  402876:	ea95 0f0c 	teq	r5, ip
  40287a:	f47f af25 	bne.w	4026c8 <__aeabi_dmul+0x234>
  40287e:	4610      	mov	r0, r2
  402880:	4619      	mov	r1, r3
  402882:	e72c      	b.n	4026de <__aeabi_dmul+0x24a>
  402884:	ea95 0f0c 	teq	r5, ip
  402888:	d106      	bne.n	402898 <__aeabi_ddiv+0x1b0>
  40288a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40288e:	f43f aefd 	beq.w	40268c <__aeabi_dmul+0x1f8>
  402892:	4610      	mov	r0, r2
  402894:	4619      	mov	r1, r3
  402896:	e722      	b.n	4026de <__aeabi_dmul+0x24a>
  402898:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40289c:	bf18      	it	ne
  40289e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4028a2:	f47f aec5 	bne.w	402630 <__aeabi_dmul+0x19c>
  4028a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4028aa:	f47f af0d 	bne.w	4026c8 <__aeabi_dmul+0x234>
  4028ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4028b2:	f47f aeeb 	bne.w	40268c <__aeabi_dmul+0x1f8>
  4028b6:	e712      	b.n	4026de <__aeabi_dmul+0x24a>

004028b8 <__gedf2>:
  4028b8:	f04f 3cff 	mov.w	ip, #4294967295
  4028bc:	e006      	b.n	4028cc <__cmpdf2+0x4>
  4028be:	bf00      	nop

004028c0 <__ledf2>:
  4028c0:	f04f 0c01 	mov.w	ip, #1
  4028c4:	e002      	b.n	4028cc <__cmpdf2+0x4>
  4028c6:	bf00      	nop

004028c8 <__cmpdf2>:
  4028c8:	f04f 0c01 	mov.w	ip, #1
  4028cc:	f84d cd04 	str.w	ip, [sp, #-4]!
  4028d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4028d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4028d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4028dc:	bf18      	it	ne
  4028de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4028e2:	d01b      	beq.n	40291c <__cmpdf2+0x54>
  4028e4:	b001      	add	sp, #4
  4028e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4028ea:	bf0c      	ite	eq
  4028ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4028f0:	ea91 0f03 	teqne	r1, r3
  4028f4:	bf02      	ittt	eq
  4028f6:	ea90 0f02 	teqeq	r0, r2
  4028fa:	2000      	moveq	r0, #0
  4028fc:	4770      	bxeq	lr
  4028fe:	f110 0f00 	cmn.w	r0, #0
  402902:	ea91 0f03 	teq	r1, r3
  402906:	bf58      	it	pl
  402908:	4299      	cmppl	r1, r3
  40290a:	bf08      	it	eq
  40290c:	4290      	cmpeq	r0, r2
  40290e:	bf2c      	ite	cs
  402910:	17d8      	asrcs	r0, r3, #31
  402912:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  402916:	f040 0001 	orr.w	r0, r0, #1
  40291a:	4770      	bx	lr
  40291c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402924:	d102      	bne.n	40292c <__cmpdf2+0x64>
  402926:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40292a:	d107      	bne.n	40293c <__cmpdf2+0x74>
  40292c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402934:	d1d6      	bne.n	4028e4 <__cmpdf2+0x1c>
  402936:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40293a:	d0d3      	beq.n	4028e4 <__cmpdf2+0x1c>
  40293c:	f85d 0b04 	ldr.w	r0, [sp], #4
  402940:	4770      	bx	lr
  402942:	bf00      	nop

00402944 <__aeabi_cdrcmple>:
  402944:	4684      	mov	ip, r0
  402946:	4610      	mov	r0, r2
  402948:	4662      	mov	r2, ip
  40294a:	468c      	mov	ip, r1
  40294c:	4619      	mov	r1, r3
  40294e:	4663      	mov	r3, ip
  402950:	e000      	b.n	402954 <__aeabi_cdcmpeq>
  402952:	bf00      	nop

00402954 <__aeabi_cdcmpeq>:
  402954:	b501      	push	{r0, lr}
  402956:	f7ff ffb7 	bl	4028c8 <__cmpdf2>
  40295a:	2800      	cmp	r0, #0
  40295c:	bf48      	it	mi
  40295e:	f110 0f00 	cmnmi.w	r0, #0
  402962:	bd01      	pop	{r0, pc}

00402964 <__aeabi_dcmpeq>:
  402964:	f84d ed08 	str.w	lr, [sp, #-8]!
  402968:	f7ff fff4 	bl	402954 <__aeabi_cdcmpeq>
  40296c:	bf0c      	ite	eq
  40296e:	2001      	moveq	r0, #1
  402970:	2000      	movne	r0, #0
  402972:	f85d fb08 	ldr.w	pc, [sp], #8
  402976:	bf00      	nop

00402978 <__aeabi_dcmplt>:
  402978:	f84d ed08 	str.w	lr, [sp, #-8]!
  40297c:	f7ff ffea 	bl	402954 <__aeabi_cdcmpeq>
  402980:	bf34      	ite	cc
  402982:	2001      	movcc	r0, #1
  402984:	2000      	movcs	r0, #0
  402986:	f85d fb08 	ldr.w	pc, [sp], #8
  40298a:	bf00      	nop

0040298c <__aeabi_dcmple>:
  40298c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402990:	f7ff ffe0 	bl	402954 <__aeabi_cdcmpeq>
  402994:	bf94      	ite	ls
  402996:	2001      	movls	r0, #1
  402998:	2000      	movhi	r0, #0
  40299a:	f85d fb08 	ldr.w	pc, [sp], #8
  40299e:	bf00      	nop

004029a0 <__aeabi_dcmpge>:
  4029a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4029a4:	f7ff ffce 	bl	402944 <__aeabi_cdrcmple>
  4029a8:	bf94      	ite	ls
  4029aa:	2001      	movls	r0, #1
  4029ac:	2000      	movhi	r0, #0
  4029ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4029b2:	bf00      	nop

004029b4 <__aeabi_dcmpgt>:
  4029b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4029b8:	f7ff ffc4 	bl	402944 <__aeabi_cdrcmple>
  4029bc:	bf34      	ite	cc
  4029be:	2001      	movcc	r0, #1
  4029c0:	2000      	movcs	r0, #0
  4029c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4029c6:	bf00      	nop

004029c8 <__aeabi_dcmpun>:
  4029c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4029cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4029d0:	d102      	bne.n	4029d8 <__aeabi_dcmpun+0x10>
  4029d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4029d6:	d10a      	bne.n	4029ee <__aeabi_dcmpun+0x26>
  4029d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4029dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4029e0:	d102      	bne.n	4029e8 <__aeabi_dcmpun+0x20>
  4029e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4029e6:	d102      	bne.n	4029ee <__aeabi_dcmpun+0x26>
  4029e8:	f04f 0000 	mov.w	r0, #0
  4029ec:	4770      	bx	lr
  4029ee:	f04f 0001 	mov.w	r0, #1
  4029f2:	4770      	bx	lr

004029f4 <__aeabi_d2iz>:
  4029f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4029f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4029fc:	d215      	bcs.n	402a2a <__aeabi_d2iz+0x36>
  4029fe:	d511      	bpl.n	402a24 <__aeabi_d2iz+0x30>
  402a00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402a08:	d912      	bls.n	402a30 <__aeabi_d2iz+0x3c>
  402a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402a16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402a1a:	fa23 f002 	lsr.w	r0, r3, r2
  402a1e:	bf18      	it	ne
  402a20:	4240      	negne	r0, r0
  402a22:	4770      	bx	lr
  402a24:	f04f 0000 	mov.w	r0, #0
  402a28:	4770      	bx	lr
  402a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402a2e:	d105      	bne.n	402a3c <__aeabi_d2iz+0x48>
  402a30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  402a34:	bf08      	it	eq
  402a36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  402a3a:	4770      	bx	lr
  402a3c:	f04f 0000 	mov.w	r0, #0
  402a40:	4770      	bx	lr
  402a42:	bf00      	nop

00402a44 <__aeabi_d2f>:
  402a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  402a4c:	bf24      	itt	cs
  402a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  402a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  402a56:	d90d      	bls.n	402a74 <__aeabi_d2f+0x30>
  402a58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  402a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  402a64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  402a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  402a6c:	bf08      	it	eq
  402a6e:	f020 0001 	biceq.w	r0, r0, #1
  402a72:	4770      	bx	lr
  402a74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  402a78:	d121      	bne.n	402abe <__aeabi_d2f+0x7a>
  402a7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  402a7e:	bfbc      	itt	lt
  402a80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  402a84:	4770      	bxlt	lr
  402a86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
  402a8e:	f1c2 0218 	rsb	r2, r2, #24
  402a92:	f1c2 0c20 	rsb	ip, r2, #32
  402a96:	fa10 f30c 	lsls.w	r3, r0, ip
  402a9a:	fa20 f002 	lsr.w	r0, r0, r2
  402a9e:	bf18      	it	ne
  402aa0:	f040 0001 	orrne.w	r0, r0, #1
  402aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  402aac:	fa03 fc0c 	lsl.w	ip, r3, ip
  402ab0:	ea40 000c 	orr.w	r0, r0, ip
  402ab4:	fa23 f302 	lsr.w	r3, r3, r2
  402ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  402abc:	e7cc      	b.n	402a58 <__aeabi_d2f+0x14>
  402abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
  402ac2:	d107      	bne.n	402ad4 <__aeabi_d2f+0x90>
  402ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  402ac8:	bf1e      	ittt	ne
  402aca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  402ace:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  402ad2:	4770      	bxne	lr
  402ad4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  402ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402ae0:	4770      	bx	lr
  402ae2:	bf00      	nop

00402ae4 <__errno>:
  402ae4:	4b01      	ldr	r3, [pc, #4]	; (402aec <__errno+0x8>)
  402ae6:	6818      	ldr	r0, [r3, #0]
  402ae8:	4770      	bx	lr
  402aea:	bf00      	nop
  402aec:	20000038 	.word	0x20000038

00402af0 <__libc_init_array>:
  402af0:	b570      	push	{r4, r5, r6, lr}
  402af2:	4e0f      	ldr	r6, [pc, #60]	; (402b30 <__libc_init_array+0x40>)
  402af4:	4d0f      	ldr	r5, [pc, #60]	; (402b34 <__libc_init_array+0x44>)
  402af6:	1b76      	subs	r6, r6, r5
  402af8:	10b6      	asrs	r6, r6, #2
  402afa:	bf18      	it	ne
  402afc:	2400      	movne	r4, #0
  402afe:	d005      	beq.n	402b0c <__libc_init_array+0x1c>
  402b00:	3401      	adds	r4, #1
  402b02:	f855 3b04 	ldr.w	r3, [r5], #4
  402b06:	4798      	blx	r3
  402b08:	42a6      	cmp	r6, r4
  402b0a:	d1f9      	bne.n	402b00 <__libc_init_array+0x10>
  402b0c:	4e0a      	ldr	r6, [pc, #40]	; (402b38 <__libc_init_array+0x48>)
  402b0e:	4d0b      	ldr	r5, [pc, #44]	; (402b3c <__libc_init_array+0x4c>)
  402b10:	1b76      	subs	r6, r6, r5
  402b12:	f001 f86f 	bl	403bf4 <_init>
  402b16:	10b6      	asrs	r6, r6, #2
  402b18:	bf18      	it	ne
  402b1a:	2400      	movne	r4, #0
  402b1c:	d006      	beq.n	402b2c <__libc_init_array+0x3c>
  402b1e:	3401      	adds	r4, #1
  402b20:	f855 3b04 	ldr.w	r3, [r5], #4
  402b24:	4798      	blx	r3
  402b26:	42a6      	cmp	r6, r4
  402b28:	d1f9      	bne.n	402b1e <__libc_init_array+0x2e>
  402b2a:	bd70      	pop	{r4, r5, r6, pc}
  402b2c:	bd70      	pop	{r4, r5, r6, pc}
  402b2e:	bf00      	nop
  402b30:	00403c00 	.word	0x00403c00
  402b34:	00403c00 	.word	0x00403c00
  402b38:	00403c08 	.word	0x00403c08
  402b3c:	00403c00 	.word	0x00403c00

00402b40 <memset>:
  402b40:	b470      	push	{r4, r5, r6}
  402b42:	0786      	lsls	r6, r0, #30
  402b44:	d046      	beq.n	402bd4 <memset+0x94>
  402b46:	1e54      	subs	r4, r2, #1
  402b48:	2a00      	cmp	r2, #0
  402b4a:	d041      	beq.n	402bd0 <memset+0x90>
  402b4c:	b2ca      	uxtb	r2, r1
  402b4e:	4603      	mov	r3, r0
  402b50:	e002      	b.n	402b58 <memset+0x18>
  402b52:	f114 34ff 	adds.w	r4, r4, #4294967295
  402b56:	d33b      	bcc.n	402bd0 <memset+0x90>
  402b58:	f803 2b01 	strb.w	r2, [r3], #1
  402b5c:	079d      	lsls	r5, r3, #30
  402b5e:	d1f8      	bne.n	402b52 <memset+0x12>
  402b60:	2c03      	cmp	r4, #3
  402b62:	d92e      	bls.n	402bc2 <memset+0x82>
  402b64:	b2cd      	uxtb	r5, r1
  402b66:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402b6a:	2c0f      	cmp	r4, #15
  402b6c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402b70:	d919      	bls.n	402ba6 <memset+0x66>
  402b72:	f103 0210 	add.w	r2, r3, #16
  402b76:	4626      	mov	r6, r4
  402b78:	3e10      	subs	r6, #16
  402b7a:	2e0f      	cmp	r6, #15
  402b7c:	f842 5c10 	str.w	r5, [r2, #-16]
  402b80:	f842 5c0c 	str.w	r5, [r2, #-12]
  402b84:	f842 5c08 	str.w	r5, [r2, #-8]
  402b88:	f842 5c04 	str.w	r5, [r2, #-4]
  402b8c:	f102 0210 	add.w	r2, r2, #16
  402b90:	d8f2      	bhi.n	402b78 <memset+0x38>
  402b92:	f1a4 0210 	sub.w	r2, r4, #16
  402b96:	f022 020f 	bic.w	r2, r2, #15
  402b9a:	f004 040f 	and.w	r4, r4, #15
  402b9e:	3210      	adds	r2, #16
  402ba0:	2c03      	cmp	r4, #3
  402ba2:	4413      	add	r3, r2
  402ba4:	d90d      	bls.n	402bc2 <memset+0x82>
  402ba6:	461e      	mov	r6, r3
  402ba8:	4622      	mov	r2, r4
  402baa:	3a04      	subs	r2, #4
  402bac:	2a03      	cmp	r2, #3
  402bae:	f846 5b04 	str.w	r5, [r6], #4
  402bb2:	d8fa      	bhi.n	402baa <memset+0x6a>
  402bb4:	1f22      	subs	r2, r4, #4
  402bb6:	f022 0203 	bic.w	r2, r2, #3
  402bba:	3204      	adds	r2, #4
  402bbc:	4413      	add	r3, r2
  402bbe:	f004 0403 	and.w	r4, r4, #3
  402bc2:	b12c      	cbz	r4, 402bd0 <memset+0x90>
  402bc4:	b2c9      	uxtb	r1, r1
  402bc6:	441c      	add	r4, r3
  402bc8:	f803 1b01 	strb.w	r1, [r3], #1
  402bcc:	429c      	cmp	r4, r3
  402bce:	d1fb      	bne.n	402bc8 <memset+0x88>
  402bd0:	bc70      	pop	{r4, r5, r6}
  402bd2:	4770      	bx	lr
  402bd4:	4614      	mov	r4, r2
  402bd6:	4603      	mov	r3, r0
  402bd8:	e7c2      	b.n	402b60 <memset+0x20>
  402bda:	bf00      	nop

00402bdc <setbuf>:
  402bdc:	2900      	cmp	r1, #0
  402bde:	bf0c      	ite	eq
  402be0:	2202      	moveq	r2, #2
  402be2:	2200      	movne	r2, #0
  402be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402be8:	f000 b800 	b.w	402bec <setvbuf>

00402bec <setvbuf>:
  402bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402bf0:	4c61      	ldr	r4, [pc, #388]	; (402d78 <setvbuf+0x18c>)
  402bf2:	6825      	ldr	r5, [r4, #0]
  402bf4:	b083      	sub	sp, #12
  402bf6:	4604      	mov	r4, r0
  402bf8:	460f      	mov	r7, r1
  402bfa:	4690      	mov	r8, r2
  402bfc:	461e      	mov	r6, r3
  402bfe:	b115      	cbz	r5, 402c06 <setvbuf+0x1a>
  402c00:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402c02:	2b00      	cmp	r3, #0
  402c04:	d064      	beq.n	402cd0 <setvbuf+0xe4>
  402c06:	f1b8 0f02 	cmp.w	r8, #2
  402c0a:	d006      	beq.n	402c1a <setvbuf+0x2e>
  402c0c:	f1b8 0f01 	cmp.w	r8, #1
  402c10:	f200 809f 	bhi.w	402d52 <setvbuf+0x166>
  402c14:	2e00      	cmp	r6, #0
  402c16:	f2c0 809c 	blt.w	402d52 <setvbuf+0x166>
  402c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402c1c:	07d8      	lsls	r0, r3, #31
  402c1e:	d534      	bpl.n	402c8a <setvbuf+0x9e>
  402c20:	4621      	mov	r1, r4
  402c22:	4628      	mov	r0, r5
  402c24:	f000 f95a 	bl	402edc <_fflush_r>
  402c28:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402c2a:	b141      	cbz	r1, 402c3e <setvbuf+0x52>
  402c2c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402c30:	4299      	cmp	r1, r3
  402c32:	d002      	beq.n	402c3a <setvbuf+0x4e>
  402c34:	4628      	mov	r0, r5
  402c36:	f000 fa4b 	bl	4030d0 <_free_r>
  402c3a:	2300      	movs	r3, #0
  402c3c:	6323      	str	r3, [r4, #48]	; 0x30
  402c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c42:	2200      	movs	r2, #0
  402c44:	61a2      	str	r2, [r4, #24]
  402c46:	6062      	str	r2, [r4, #4]
  402c48:	061a      	lsls	r2, r3, #24
  402c4a:	d43a      	bmi.n	402cc2 <setvbuf+0xd6>
  402c4c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402c50:	f023 0303 	bic.w	r3, r3, #3
  402c54:	f1b8 0f02 	cmp.w	r8, #2
  402c58:	81a3      	strh	r3, [r4, #12]
  402c5a:	d01d      	beq.n	402c98 <setvbuf+0xac>
  402c5c:	ab01      	add	r3, sp, #4
  402c5e:	466a      	mov	r2, sp
  402c60:	4621      	mov	r1, r4
  402c62:	4628      	mov	r0, r5
  402c64:	f000 fb4c 	bl	403300 <__swhatbuf_r>
  402c68:	89a3      	ldrh	r3, [r4, #12]
  402c6a:	4318      	orrs	r0, r3
  402c6c:	81a0      	strh	r0, [r4, #12]
  402c6e:	2e00      	cmp	r6, #0
  402c70:	d132      	bne.n	402cd8 <setvbuf+0xec>
  402c72:	9e00      	ldr	r6, [sp, #0]
  402c74:	4630      	mov	r0, r6
  402c76:	f000 fb71 	bl	40335c <malloc>
  402c7a:	4607      	mov	r7, r0
  402c7c:	2800      	cmp	r0, #0
  402c7e:	d06b      	beq.n	402d58 <setvbuf+0x16c>
  402c80:	89a3      	ldrh	r3, [r4, #12]
  402c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402c86:	81a3      	strh	r3, [r4, #12]
  402c88:	e028      	b.n	402cdc <setvbuf+0xf0>
  402c8a:	89a3      	ldrh	r3, [r4, #12]
  402c8c:	0599      	lsls	r1, r3, #22
  402c8e:	d4c7      	bmi.n	402c20 <setvbuf+0x34>
  402c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402c92:	f000 fb31 	bl	4032f8 <__retarget_lock_acquire_recursive>
  402c96:	e7c3      	b.n	402c20 <setvbuf+0x34>
  402c98:	2500      	movs	r5, #0
  402c9a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402c9c:	2600      	movs	r6, #0
  402c9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402ca2:	f043 0302 	orr.w	r3, r3, #2
  402ca6:	2001      	movs	r0, #1
  402ca8:	60a6      	str	r6, [r4, #8]
  402caa:	07ce      	lsls	r6, r1, #31
  402cac:	81a3      	strh	r3, [r4, #12]
  402cae:	6022      	str	r2, [r4, #0]
  402cb0:	6122      	str	r2, [r4, #16]
  402cb2:	6160      	str	r0, [r4, #20]
  402cb4:	d401      	bmi.n	402cba <setvbuf+0xce>
  402cb6:	0598      	lsls	r0, r3, #22
  402cb8:	d53e      	bpl.n	402d38 <setvbuf+0x14c>
  402cba:	4628      	mov	r0, r5
  402cbc:	b003      	add	sp, #12
  402cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402cc2:	6921      	ldr	r1, [r4, #16]
  402cc4:	4628      	mov	r0, r5
  402cc6:	f000 fa03 	bl	4030d0 <_free_r>
  402cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402cce:	e7bd      	b.n	402c4c <setvbuf+0x60>
  402cd0:	4628      	mov	r0, r5
  402cd2:	f000 f95b 	bl	402f8c <__sinit>
  402cd6:	e796      	b.n	402c06 <setvbuf+0x1a>
  402cd8:	2f00      	cmp	r7, #0
  402cda:	d0cb      	beq.n	402c74 <setvbuf+0x88>
  402cdc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402cde:	2b00      	cmp	r3, #0
  402ce0:	d033      	beq.n	402d4a <setvbuf+0x15e>
  402ce2:	9b00      	ldr	r3, [sp, #0]
  402ce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402ce8:	6027      	str	r7, [r4, #0]
  402cea:	429e      	cmp	r6, r3
  402cec:	bf1c      	itt	ne
  402cee:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402cf2:	81a2      	strhne	r2, [r4, #12]
  402cf4:	f1b8 0f01 	cmp.w	r8, #1
  402cf8:	bf04      	itt	eq
  402cfa:	f042 0201 	orreq.w	r2, r2, #1
  402cfe:	81a2      	strheq	r2, [r4, #12]
  402d00:	b292      	uxth	r2, r2
  402d02:	f012 0308 	ands.w	r3, r2, #8
  402d06:	6127      	str	r7, [r4, #16]
  402d08:	6166      	str	r6, [r4, #20]
  402d0a:	d00e      	beq.n	402d2a <setvbuf+0x13e>
  402d0c:	07d1      	lsls	r1, r2, #31
  402d0e:	d51a      	bpl.n	402d46 <setvbuf+0x15a>
  402d10:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402d12:	4276      	negs	r6, r6
  402d14:	2300      	movs	r3, #0
  402d16:	f015 0501 	ands.w	r5, r5, #1
  402d1a:	61a6      	str	r6, [r4, #24]
  402d1c:	60a3      	str	r3, [r4, #8]
  402d1e:	d009      	beq.n	402d34 <setvbuf+0x148>
  402d20:	2500      	movs	r5, #0
  402d22:	4628      	mov	r0, r5
  402d24:	b003      	add	sp, #12
  402d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402d2a:	60a3      	str	r3, [r4, #8]
  402d2c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402d2e:	f015 0501 	ands.w	r5, r5, #1
  402d32:	d1f5      	bne.n	402d20 <setvbuf+0x134>
  402d34:	0593      	lsls	r3, r2, #22
  402d36:	d4c0      	bmi.n	402cba <setvbuf+0xce>
  402d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d3a:	f000 fadf 	bl	4032fc <__retarget_lock_release_recursive>
  402d3e:	4628      	mov	r0, r5
  402d40:	b003      	add	sp, #12
  402d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402d46:	60a6      	str	r6, [r4, #8]
  402d48:	e7f0      	b.n	402d2c <setvbuf+0x140>
  402d4a:	4628      	mov	r0, r5
  402d4c:	f000 f91e 	bl	402f8c <__sinit>
  402d50:	e7c7      	b.n	402ce2 <setvbuf+0xf6>
  402d52:	f04f 35ff 	mov.w	r5, #4294967295
  402d56:	e7b0      	b.n	402cba <setvbuf+0xce>
  402d58:	f8dd 9000 	ldr.w	r9, [sp]
  402d5c:	45b1      	cmp	r9, r6
  402d5e:	d004      	beq.n	402d6a <setvbuf+0x17e>
  402d60:	4648      	mov	r0, r9
  402d62:	f000 fafb 	bl	40335c <malloc>
  402d66:	4607      	mov	r7, r0
  402d68:	b920      	cbnz	r0, 402d74 <setvbuf+0x188>
  402d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d6e:	f04f 35ff 	mov.w	r5, #4294967295
  402d72:	e792      	b.n	402c9a <setvbuf+0xae>
  402d74:	464e      	mov	r6, r9
  402d76:	e783      	b.n	402c80 <setvbuf+0x94>
  402d78:	20000038 	.word	0x20000038

00402d7c <register_fini>:
  402d7c:	4b02      	ldr	r3, [pc, #8]	; (402d88 <register_fini+0xc>)
  402d7e:	b113      	cbz	r3, 402d86 <register_fini+0xa>
  402d80:	4802      	ldr	r0, [pc, #8]	; (402d8c <register_fini+0x10>)
  402d82:	f000 b805 	b.w	402d90 <atexit>
  402d86:	4770      	bx	lr
  402d88:	00000000 	.word	0x00000000
  402d8c:	00402ffd 	.word	0x00402ffd

00402d90 <atexit>:
  402d90:	2300      	movs	r3, #0
  402d92:	4601      	mov	r1, r0
  402d94:	461a      	mov	r2, r3
  402d96:	4618      	mov	r0, r3
  402d98:	f000 be10 	b.w	4039bc <__register_exitproc>

00402d9c <__sflush_r>:
  402d9c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402da0:	b29a      	uxth	r2, r3
  402da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402da6:	460d      	mov	r5, r1
  402da8:	0711      	lsls	r1, r2, #28
  402daa:	4680      	mov	r8, r0
  402dac:	d43a      	bmi.n	402e24 <__sflush_r+0x88>
  402dae:	686a      	ldr	r2, [r5, #4]
  402db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402db4:	2a00      	cmp	r2, #0
  402db6:	81ab      	strh	r3, [r5, #12]
  402db8:	dd6f      	ble.n	402e9a <__sflush_r+0xfe>
  402dba:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402dbc:	2c00      	cmp	r4, #0
  402dbe:	d049      	beq.n	402e54 <__sflush_r+0xb8>
  402dc0:	2200      	movs	r2, #0
  402dc2:	b29b      	uxth	r3, r3
  402dc4:	f8d8 6000 	ldr.w	r6, [r8]
  402dc8:	f8c8 2000 	str.w	r2, [r8]
  402dcc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402dd0:	d067      	beq.n	402ea2 <__sflush_r+0x106>
  402dd2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402dd4:	075f      	lsls	r7, r3, #29
  402dd6:	d505      	bpl.n	402de4 <__sflush_r+0x48>
  402dd8:	6869      	ldr	r1, [r5, #4]
  402dda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402ddc:	1a52      	subs	r2, r2, r1
  402dde:	b10b      	cbz	r3, 402de4 <__sflush_r+0x48>
  402de0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402de2:	1ad2      	subs	r2, r2, r3
  402de4:	2300      	movs	r3, #0
  402de6:	69e9      	ldr	r1, [r5, #28]
  402de8:	4640      	mov	r0, r8
  402dea:	47a0      	blx	r4
  402dec:	1c44      	adds	r4, r0, #1
  402dee:	d03c      	beq.n	402e6a <__sflush_r+0xce>
  402df0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402df4:	692a      	ldr	r2, [r5, #16]
  402df6:	602a      	str	r2, [r5, #0]
  402df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402dfc:	2200      	movs	r2, #0
  402dfe:	81ab      	strh	r3, [r5, #12]
  402e00:	04db      	lsls	r3, r3, #19
  402e02:	606a      	str	r2, [r5, #4]
  402e04:	d447      	bmi.n	402e96 <__sflush_r+0xfa>
  402e06:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402e08:	f8c8 6000 	str.w	r6, [r8]
  402e0c:	b311      	cbz	r1, 402e54 <__sflush_r+0xb8>
  402e0e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402e12:	4299      	cmp	r1, r3
  402e14:	d002      	beq.n	402e1c <__sflush_r+0x80>
  402e16:	4640      	mov	r0, r8
  402e18:	f000 f95a 	bl	4030d0 <_free_r>
  402e1c:	2000      	movs	r0, #0
  402e1e:	6328      	str	r0, [r5, #48]	; 0x30
  402e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e24:	692e      	ldr	r6, [r5, #16]
  402e26:	b1ae      	cbz	r6, 402e54 <__sflush_r+0xb8>
  402e28:	682c      	ldr	r4, [r5, #0]
  402e2a:	602e      	str	r6, [r5, #0]
  402e2c:	0791      	lsls	r1, r2, #30
  402e2e:	bf0c      	ite	eq
  402e30:	696b      	ldreq	r3, [r5, #20]
  402e32:	2300      	movne	r3, #0
  402e34:	1ba4      	subs	r4, r4, r6
  402e36:	60ab      	str	r3, [r5, #8]
  402e38:	e00a      	b.n	402e50 <__sflush_r+0xb4>
  402e3a:	4623      	mov	r3, r4
  402e3c:	4632      	mov	r2, r6
  402e3e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402e40:	69e9      	ldr	r1, [r5, #28]
  402e42:	4640      	mov	r0, r8
  402e44:	47b8      	blx	r7
  402e46:	2800      	cmp	r0, #0
  402e48:	eba4 0400 	sub.w	r4, r4, r0
  402e4c:	4406      	add	r6, r0
  402e4e:	dd04      	ble.n	402e5a <__sflush_r+0xbe>
  402e50:	2c00      	cmp	r4, #0
  402e52:	dcf2      	bgt.n	402e3a <__sflush_r+0x9e>
  402e54:	2000      	movs	r0, #0
  402e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e5a:	89ab      	ldrh	r3, [r5, #12]
  402e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e60:	81ab      	strh	r3, [r5, #12]
  402e62:	f04f 30ff 	mov.w	r0, #4294967295
  402e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e6a:	f8d8 4000 	ldr.w	r4, [r8]
  402e6e:	2c1d      	cmp	r4, #29
  402e70:	d8f3      	bhi.n	402e5a <__sflush_r+0xbe>
  402e72:	4b19      	ldr	r3, [pc, #100]	; (402ed8 <__sflush_r+0x13c>)
  402e74:	40e3      	lsrs	r3, r4
  402e76:	43db      	mvns	r3, r3
  402e78:	f013 0301 	ands.w	r3, r3, #1
  402e7c:	d1ed      	bne.n	402e5a <__sflush_r+0xbe>
  402e7e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402e82:	606b      	str	r3, [r5, #4]
  402e84:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402e88:	6929      	ldr	r1, [r5, #16]
  402e8a:	81ab      	strh	r3, [r5, #12]
  402e8c:	04da      	lsls	r2, r3, #19
  402e8e:	6029      	str	r1, [r5, #0]
  402e90:	d5b9      	bpl.n	402e06 <__sflush_r+0x6a>
  402e92:	2c00      	cmp	r4, #0
  402e94:	d1b7      	bne.n	402e06 <__sflush_r+0x6a>
  402e96:	6528      	str	r0, [r5, #80]	; 0x50
  402e98:	e7b5      	b.n	402e06 <__sflush_r+0x6a>
  402e9a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402e9c:	2a00      	cmp	r2, #0
  402e9e:	dc8c      	bgt.n	402dba <__sflush_r+0x1e>
  402ea0:	e7d8      	b.n	402e54 <__sflush_r+0xb8>
  402ea2:	2301      	movs	r3, #1
  402ea4:	69e9      	ldr	r1, [r5, #28]
  402ea6:	4640      	mov	r0, r8
  402ea8:	47a0      	blx	r4
  402eaa:	1c43      	adds	r3, r0, #1
  402eac:	4602      	mov	r2, r0
  402eae:	d002      	beq.n	402eb6 <__sflush_r+0x11a>
  402eb0:	89ab      	ldrh	r3, [r5, #12]
  402eb2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402eb4:	e78e      	b.n	402dd4 <__sflush_r+0x38>
  402eb6:	f8d8 3000 	ldr.w	r3, [r8]
  402eba:	2b00      	cmp	r3, #0
  402ebc:	d0f8      	beq.n	402eb0 <__sflush_r+0x114>
  402ebe:	2b1d      	cmp	r3, #29
  402ec0:	d001      	beq.n	402ec6 <__sflush_r+0x12a>
  402ec2:	2b16      	cmp	r3, #22
  402ec4:	d102      	bne.n	402ecc <__sflush_r+0x130>
  402ec6:	f8c8 6000 	str.w	r6, [r8]
  402eca:	e7c3      	b.n	402e54 <__sflush_r+0xb8>
  402ecc:	89ab      	ldrh	r3, [r5, #12]
  402ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402ed2:	81ab      	strh	r3, [r5, #12]
  402ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ed8:	20400001 	.word	0x20400001

00402edc <_fflush_r>:
  402edc:	b538      	push	{r3, r4, r5, lr}
  402ede:	460d      	mov	r5, r1
  402ee0:	4604      	mov	r4, r0
  402ee2:	b108      	cbz	r0, 402ee8 <_fflush_r+0xc>
  402ee4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402ee6:	b1bb      	cbz	r3, 402f18 <_fflush_r+0x3c>
  402ee8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402eec:	b188      	cbz	r0, 402f12 <_fflush_r+0x36>
  402eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402ef0:	07db      	lsls	r3, r3, #31
  402ef2:	d401      	bmi.n	402ef8 <_fflush_r+0x1c>
  402ef4:	0581      	lsls	r1, r0, #22
  402ef6:	d517      	bpl.n	402f28 <_fflush_r+0x4c>
  402ef8:	4620      	mov	r0, r4
  402efa:	4629      	mov	r1, r5
  402efc:	f7ff ff4e 	bl	402d9c <__sflush_r>
  402f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402f02:	07da      	lsls	r2, r3, #31
  402f04:	4604      	mov	r4, r0
  402f06:	d402      	bmi.n	402f0e <_fflush_r+0x32>
  402f08:	89ab      	ldrh	r3, [r5, #12]
  402f0a:	059b      	lsls	r3, r3, #22
  402f0c:	d507      	bpl.n	402f1e <_fflush_r+0x42>
  402f0e:	4620      	mov	r0, r4
  402f10:	bd38      	pop	{r3, r4, r5, pc}
  402f12:	4604      	mov	r4, r0
  402f14:	4620      	mov	r0, r4
  402f16:	bd38      	pop	{r3, r4, r5, pc}
  402f18:	f000 f838 	bl	402f8c <__sinit>
  402f1c:	e7e4      	b.n	402ee8 <_fflush_r+0xc>
  402f1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402f20:	f000 f9ec 	bl	4032fc <__retarget_lock_release_recursive>
  402f24:	4620      	mov	r0, r4
  402f26:	bd38      	pop	{r3, r4, r5, pc}
  402f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402f2a:	f000 f9e5 	bl	4032f8 <__retarget_lock_acquire_recursive>
  402f2e:	e7e3      	b.n	402ef8 <_fflush_r+0x1c>

00402f30 <_cleanup_r>:
  402f30:	4901      	ldr	r1, [pc, #4]	; (402f38 <_cleanup_r+0x8>)
  402f32:	f000 b9b3 	b.w	40329c <_fwalk_reent>
  402f36:	bf00      	nop
  402f38:	00403aa5 	.word	0x00403aa5

00402f3c <std.isra.0>:
  402f3c:	b510      	push	{r4, lr}
  402f3e:	2300      	movs	r3, #0
  402f40:	4604      	mov	r4, r0
  402f42:	8181      	strh	r1, [r0, #12]
  402f44:	81c2      	strh	r2, [r0, #14]
  402f46:	6003      	str	r3, [r0, #0]
  402f48:	6043      	str	r3, [r0, #4]
  402f4a:	6083      	str	r3, [r0, #8]
  402f4c:	6643      	str	r3, [r0, #100]	; 0x64
  402f4e:	6103      	str	r3, [r0, #16]
  402f50:	6143      	str	r3, [r0, #20]
  402f52:	6183      	str	r3, [r0, #24]
  402f54:	4619      	mov	r1, r3
  402f56:	2208      	movs	r2, #8
  402f58:	305c      	adds	r0, #92	; 0x5c
  402f5a:	f7ff fdf1 	bl	402b40 <memset>
  402f5e:	4807      	ldr	r0, [pc, #28]	; (402f7c <std.isra.0+0x40>)
  402f60:	4907      	ldr	r1, [pc, #28]	; (402f80 <std.isra.0+0x44>)
  402f62:	4a08      	ldr	r2, [pc, #32]	; (402f84 <std.isra.0+0x48>)
  402f64:	4b08      	ldr	r3, [pc, #32]	; (402f88 <std.isra.0+0x4c>)
  402f66:	6220      	str	r0, [r4, #32]
  402f68:	61e4      	str	r4, [r4, #28]
  402f6a:	6261      	str	r1, [r4, #36]	; 0x24
  402f6c:	62a2      	str	r2, [r4, #40]	; 0x28
  402f6e:	62e3      	str	r3, [r4, #44]	; 0x2c
  402f70:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402f78:	f000 b9ba 	b.w	4032f0 <__retarget_lock_init_recursive>
  402f7c:	00403909 	.word	0x00403909
  402f80:	0040392d 	.word	0x0040392d
  402f84:	00403969 	.word	0x00403969
  402f88:	00403989 	.word	0x00403989

00402f8c <__sinit>:
  402f8c:	b510      	push	{r4, lr}
  402f8e:	4604      	mov	r4, r0
  402f90:	4812      	ldr	r0, [pc, #72]	; (402fdc <__sinit+0x50>)
  402f92:	f000 f9b1 	bl	4032f8 <__retarget_lock_acquire_recursive>
  402f96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402f98:	b9d2      	cbnz	r2, 402fd0 <__sinit+0x44>
  402f9a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402f9e:	4810      	ldr	r0, [pc, #64]	; (402fe0 <__sinit+0x54>)
  402fa0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402fa4:	2103      	movs	r1, #3
  402fa6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402faa:	63e0      	str	r0, [r4, #60]	; 0x3c
  402fac:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402fb0:	6860      	ldr	r0, [r4, #4]
  402fb2:	2104      	movs	r1, #4
  402fb4:	f7ff ffc2 	bl	402f3c <std.isra.0>
  402fb8:	2201      	movs	r2, #1
  402fba:	2109      	movs	r1, #9
  402fbc:	68a0      	ldr	r0, [r4, #8]
  402fbe:	f7ff ffbd 	bl	402f3c <std.isra.0>
  402fc2:	2202      	movs	r2, #2
  402fc4:	2112      	movs	r1, #18
  402fc6:	68e0      	ldr	r0, [r4, #12]
  402fc8:	f7ff ffb8 	bl	402f3c <std.isra.0>
  402fcc:	2301      	movs	r3, #1
  402fce:	63a3      	str	r3, [r4, #56]	; 0x38
  402fd0:	4802      	ldr	r0, [pc, #8]	; (402fdc <__sinit+0x50>)
  402fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402fd6:	f000 b991 	b.w	4032fc <__retarget_lock_release_recursive>
  402fda:	bf00      	nop
  402fdc:	2000d04c 	.word	0x2000d04c
  402fe0:	00402f31 	.word	0x00402f31

00402fe4 <__sfp_lock_acquire>:
  402fe4:	4801      	ldr	r0, [pc, #4]	; (402fec <__sfp_lock_acquire+0x8>)
  402fe6:	f000 b987 	b.w	4032f8 <__retarget_lock_acquire_recursive>
  402fea:	bf00      	nop
  402fec:	2000d060 	.word	0x2000d060

00402ff0 <__sfp_lock_release>:
  402ff0:	4801      	ldr	r0, [pc, #4]	; (402ff8 <__sfp_lock_release+0x8>)
  402ff2:	f000 b983 	b.w	4032fc <__retarget_lock_release_recursive>
  402ff6:	bf00      	nop
  402ff8:	2000d060 	.word	0x2000d060

00402ffc <__libc_fini_array>:
  402ffc:	b538      	push	{r3, r4, r5, lr}
  402ffe:	4c0a      	ldr	r4, [pc, #40]	; (403028 <__libc_fini_array+0x2c>)
  403000:	4d0a      	ldr	r5, [pc, #40]	; (40302c <__libc_fini_array+0x30>)
  403002:	1b64      	subs	r4, r4, r5
  403004:	10a4      	asrs	r4, r4, #2
  403006:	d00a      	beq.n	40301e <__libc_fini_array+0x22>
  403008:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40300c:	3b01      	subs	r3, #1
  40300e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403012:	3c01      	subs	r4, #1
  403014:	f855 3904 	ldr.w	r3, [r5], #-4
  403018:	4798      	blx	r3
  40301a:	2c00      	cmp	r4, #0
  40301c:	d1f9      	bne.n	403012 <__libc_fini_array+0x16>
  40301e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403022:	f000 bdf1 	b.w	403c08 <_fini>
  403026:	bf00      	nop
  403028:	00403c18 	.word	0x00403c18
  40302c:	00403c14 	.word	0x00403c14

00403030 <_malloc_trim_r>:
  403030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403032:	4f24      	ldr	r7, [pc, #144]	; (4030c4 <_malloc_trim_r+0x94>)
  403034:	460c      	mov	r4, r1
  403036:	4606      	mov	r6, r0
  403038:	f000 fc48 	bl	4038cc <__malloc_lock>
  40303c:	68bb      	ldr	r3, [r7, #8]
  40303e:	685d      	ldr	r5, [r3, #4]
  403040:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403044:	310f      	adds	r1, #15
  403046:	f025 0503 	bic.w	r5, r5, #3
  40304a:	4429      	add	r1, r5
  40304c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403050:	f021 010f 	bic.w	r1, r1, #15
  403054:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403058:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40305c:	db07      	blt.n	40306e <_malloc_trim_r+0x3e>
  40305e:	2100      	movs	r1, #0
  403060:	4630      	mov	r0, r6
  403062:	f000 fc3f 	bl	4038e4 <_sbrk_r>
  403066:	68bb      	ldr	r3, [r7, #8]
  403068:	442b      	add	r3, r5
  40306a:	4298      	cmp	r0, r3
  40306c:	d004      	beq.n	403078 <_malloc_trim_r+0x48>
  40306e:	4630      	mov	r0, r6
  403070:	f000 fc32 	bl	4038d8 <__malloc_unlock>
  403074:	2000      	movs	r0, #0
  403076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403078:	4261      	negs	r1, r4
  40307a:	4630      	mov	r0, r6
  40307c:	f000 fc32 	bl	4038e4 <_sbrk_r>
  403080:	3001      	adds	r0, #1
  403082:	d00d      	beq.n	4030a0 <_malloc_trim_r+0x70>
  403084:	4b10      	ldr	r3, [pc, #64]	; (4030c8 <_malloc_trim_r+0x98>)
  403086:	68ba      	ldr	r2, [r7, #8]
  403088:	6819      	ldr	r1, [r3, #0]
  40308a:	1b2d      	subs	r5, r5, r4
  40308c:	f045 0501 	orr.w	r5, r5, #1
  403090:	4630      	mov	r0, r6
  403092:	1b09      	subs	r1, r1, r4
  403094:	6055      	str	r5, [r2, #4]
  403096:	6019      	str	r1, [r3, #0]
  403098:	f000 fc1e 	bl	4038d8 <__malloc_unlock>
  40309c:	2001      	movs	r0, #1
  40309e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4030a0:	2100      	movs	r1, #0
  4030a2:	4630      	mov	r0, r6
  4030a4:	f000 fc1e 	bl	4038e4 <_sbrk_r>
  4030a8:	68ba      	ldr	r2, [r7, #8]
  4030aa:	1a83      	subs	r3, r0, r2
  4030ac:	2b0f      	cmp	r3, #15
  4030ae:	ddde      	ble.n	40306e <_malloc_trim_r+0x3e>
  4030b0:	4c06      	ldr	r4, [pc, #24]	; (4030cc <_malloc_trim_r+0x9c>)
  4030b2:	4905      	ldr	r1, [pc, #20]	; (4030c8 <_malloc_trim_r+0x98>)
  4030b4:	6824      	ldr	r4, [r4, #0]
  4030b6:	f043 0301 	orr.w	r3, r3, #1
  4030ba:	1b00      	subs	r0, r0, r4
  4030bc:	6053      	str	r3, [r2, #4]
  4030be:	6008      	str	r0, [r1, #0]
  4030c0:	e7d5      	b.n	40306e <_malloc_trim_r+0x3e>
  4030c2:	bf00      	nop
  4030c4:	2000046c 	.word	0x2000046c
  4030c8:	2000cef0 	.word	0x2000cef0
  4030cc:	20000874 	.word	0x20000874

004030d0 <_free_r>:
  4030d0:	2900      	cmp	r1, #0
  4030d2:	d044      	beq.n	40315e <_free_r+0x8e>
  4030d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4030d8:	460d      	mov	r5, r1
  4030da:	4680      	mov	r8, r0
  4030dc:	f000 fbf6 	bl	4038cc <__malloc_lock>
  4030e0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4030e4:	4969      	ldr	r1, [pc, #420]	; (40328c <_free_r+0x1bc>)
  4030e6:	f027 0301 	bic.w	r3, r7, #1
  4030ea:	f1a5 0408 	sub.w	r4, r5, #8
  4030ee:	18e2      	adds	r2, r4, r3
  4030f0:	688e      	ldr	r6, [r1, #8]
  4030f2:	6850      	ldr	r0, [r2, #4]
  4030f4:	42b2      	cmp	r2, r6
  4030f6:	f020 0003 	bic.w	r0, r0, #3
  4030fa:	d05e      	beq.n	4031ba <_free_r+0xea>
  4030fc:	07fe      	lsls	r6, r7, #31
  4030fe:	6050      	str	r0, [r2, #4]
  403100:	d40b      	bmi.n	40311a <_free_r+0x4a>
  403102:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403106:	1be4      	subs	r4, r4, r7
  403108:	f101 0e08 	add.w	lr, r1, #8
  40310c:	68a5      	ldr	r5, [r4, #8]
  40310e:	4575      	cmp	r5, lr
  403110:	443b      	add	r3, r7
  403112:	d06d      	beq.n	4031f0 <_free_r+0x120>
  403114:	68e7      	ldr	r7, [r4, #12]
  403116:	60ef      	str	r7, [r5, #12]
  403118:	60bd      	str	r5, [r7, #8]
  40311a:	1815      	adds	r5, r2, r0
  40311c:	686d      	ldr	r5, [r5, #4]
  40311e:	07ed      	lsls	r5, r5, #31
  403120:	d53e      	bpl.n	4031a0 <_free_r+0xd0>
  403122:	f043 0201 	orr.w	r2, r3, #1
  403126:	6062      	str	r2, [r4, #4]
  403128:	50e3      	str	r3, [r4, r3]
  40312a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40312e:	d217      	bcs.n	403160 <_free_r+0x90>
  403130:	08db      	lsrs	r3, r3, #3
  403132:	1c58      	adds	r0, r3, #1
  403134:	109a      	asrs	r2, r3, #2
  403136:	684d      	ldr	r5, [r1, #4]
  403138:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40313c:	60a7      	str	r7, [r4, #8]
  40313e:	2301      	movs	r3, #1
  403140:	4093      	lsls	r3, r2
  403142:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  403146:	432b      	orrs	r3, r5
  403148:	3a08      	subs	r2, #8
  40314a:	60e2      	str	r2, [r4, #12]
  40314c:	604b      	str	r3, [r1, #4]
  40314e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403152:	60fc      	str	r4, [r7, #12]
  403154:	4640      	mov	r0, r8
  403156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40315a:	f000 bbbd 	b.w	4038d8 <__malloc_unlock>
  40315e:	4770      	bx	lr
  403160:	0a5a      	lsrs	r2, r3, #9
  403162:	2a04      	cmp	r2, #4
  403164:	d852      	bhi.n	40320c <_free_r+0x13c>
  403166:	099a      	lsrs	r2, r3, #6
  403168:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40316c:	00ff      	lsls	r7, r7, #3
  40316e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403172:	19c8      	adds	r0, r1, r7
  403174:	59ca      	ldr	r2, [r1, r7]
  403176:	3808      	subs	r0, #8
  403178:	4290      	cmp	r0, r2
  40317a:	d04f      	beq.n	40321c <_free_r+0x14c>
  40317c:	6851      	ldr	r1, [r2, #4]
  40317e:	f021 0103 	bic.w	r1, r1, #3
  403182:	428b      	cmp	r3, r1
  403184:	d232      	bcs.n	4031ec <_free_r+0x11c>
  403186:	6892      	ldr	r2, [r2, #8]
  403188:	4290      	cmp	r0, r2
  40318a:	d1f7      	bne.n	40317c <_free_r+0xac>
  40318c:	68c3      	ldr	r3, [r0, #12]
  40318e:	60a0      	str	r0, [r4, #8]
  403190:	60e3      	str	r3, [r4, #12]
  403192:	609c      	str	r4, [r3, #8]
  403194:	60c4      	str	r4, [r0, #12]
  403196:	4640      	mov	r0, r8
  403198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40319c:	f000 bb9c 	b.w	4038d8 <__malloc_unlock>
  4031a0:	6895      	ldr	r5, [r2, #8]
  4031a2:	4f3b      	ldr	r7, [pc, #236]	; (403290 <_free_r+0x1c0>)
  4031a4:	42bd      	cmp	r5, r7
  4031a6:	4403      	add	r3, r0
  4031a8:	d040      	beq.n	40322c <_free_r+0x15c>
  4031aa:	68d0      	ldr	r0, [r2, #12]
  4031ac:	60e8      	str	r0, [r5, #12]
  4031ae:	f043 0201 	orr.w	r2, r3, #1
  4031b2:	6085      	str	r5, [r0, #8]
  4031b4:	6062      	str	r2, [r4, #4]
  4031b6:	50e3      	str	r3, [r4, r3]
  4031b8:	e7b7      	b.n	40312a <_free_r+0x5a>
  4031ba:	07ff      	lsls	r7, r7, #31
  4031bc:	4403      	add	r3, r0
  4031be:	d407      	bmi.n	4031d0 <_free_r+0x100>
  4031c0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4031c4:	1aa4      	subs	r4, r4, r2
  4031c6:	4413      	add	r3, r2
  4031c8:	68a0      	ldr	r0, [r4, #8]
  4031ca:	68e2      	ldr	r2, [r4, #12]
  4031cc:	60c2      	str	r2, [r0, #12]
  4031ce:	6090      	str	r0, [r2, #8]
  4031d0:	4a30      	ldr	r2, [pc, #192]	; (403294 <_free_r+0x1c4>)
  4031d2:	6812      	ldr	r2, [r2, #0]
  4031d4:	f043 0001 	orr.w	r0, r3, #1
  4031d8:	4293      	cmp	r3, r2
  4031da:	6060      	str	r0, [r4, #4]
  4031dc:	608c      	str	r4, [r1, #8]
  4031de:	d3b9      	bcc.n	403154 <_free_r+0x84>
  4031e0:	4b2d      	ldr	r3, [pc, #180]	; (403298 <_free_r+0x1c8>)
  4031e2:	4640      	mov	r0, r8
  4031e4:	6819      	ldr	r1, [r3, #0]
  4031e6:	f7ff ff23 	bl	403030 <_malloc_trim_r>
  4031ea:	e7b3      	b.n	403154 <_free_r+0x84>
  4031ec:	4610      	mov	r0, r2
  4031ee:	e7cd      	b.n	40318c <_free_r+0xbc>
  4031f0:	1811      	adds	r1, r2, r0
  4031f2:	6849      	ldr	r1, [r1, #4]
  4031f4:	07c9      	lsls	r1, r1, #31
  4031f6:	d444      	bmi.n	403282 <_free_r+0x1b2>
  4031f8:	6891      	ldr	r1, [r2, #8]
  4031fa:	68d2      	ldr	r2, [r2, #12]
  4031fc:	60ca      	str	r2, [r1, #12]
  4031fe:	4403      	add	r3, r0
  403200:	f043 0001 	orr.w	r0, r3, #1
  403204:	6091      	str	r1, [r2, #8]
  403206:	6060      	str	r0, [r4, #4]
  403208:	50e3      	str	r3, [r4, r3]
  40320a:	e7a3      	b.n	403154 <_free_r+0x84>
  40320c:	2a14      	cmp	r2, #20
  40320e:	d816      	bhi.n	40323e <_free_r+0x16e>
  403210:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403214:	00ff      	lsls	r7, r7, #3
  403216:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40321a:	e7aa      	b.n	403172 <_free_r+0xa2>
  40321c:	10aa      	asrs	r2, r5, #2
  40321e:	2301      	movs	r3, #1
  403220:	684d      	ldr	r5, [r1, #4]
  403222:	4093      	lsls	r3, r2
  403224:	432b      	orrs	r3, r5
  403226:	604b      	str	r3, [r1, #4]
  403228:	4603      	mov	r3, r0
  40322a:	e7b0      	b.n	40318e <_free_r+0xbe>
  40322c:	f043 0201 	orr.w	r2, r3, #1
  403230:	614c      	str	r4, [r1, #20]
  403232:	610c      	str	r4, [r1, #16]
  403234:	60e5      	str	r5, [r4, #12]
  403236:	60a5      	str	r5, [r4, #8]
  403238:	6062      	str	r2, [r4, #4]
  40323a:	50e3      	str	r3, [r4, r3]
  40323c:	e78a      	b.n	403154 <_free_r+0x84>
  40323e:	2a54      	cmp	r2, #84	; 0x54
  403240:	d806      	bhi.n	403250 <_free_r+0x180>
  403242:	0b1a      	lsrs	r2, r3, #12
  403244:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403248:	00ff      	lsls	r7, r7, #3
  40324a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40324e:	e790      	b.n	403172 <_free_r+0xa2>
  403250:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403254:	d806      	bhi.n	403264 <_free_r+0x194>
  403256:	0bda      	lsrs	r2, r3, #15
  403258:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40325c:	00ff      	lsls	r7, r7, #3
  40325e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403262:	e786      	b.n	403172 <_free_r+0xa2>
  403264:	f240 5054 	movw	r0, #1364	; 0x554
  403268:	4282      	cmp	r2, r0
  40326a:	d806      	bhi.n	40327a <_free_r+0x1aa>
  40326c:	0c9a      	lsrs	r2, r3, #18
  40326e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403272:	00ff      	lsls	r7, r7, #3
  403274:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403278:	e77b      	b.n	403172 <_free_r+0xa2>
  40327a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40327e:	257e      	movs	r5, #126	; 0x7e
  403280:	e777      	b.n	403172 <_free_r+0xa2>
  403282:	f043 0101 	orr.w	r1, r3, #1
  403286:	6061      	str	r1, [r4, #4]
  403288:	6013      	str	r3, [r2, #0]
  40328a:	e763      	b.n	403154 <_free_r+0x84>
  40328c:	2000046c 	.word	0x2000046c
  403290:	20000474 	.word	0x20000474
  403294:	20000878 	.word	0x20000878
  403298:	2000cf20 	.word	0x2000cf20

0040329c <_fwalk_reent>:
  40329c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4032a0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4032a4:	d01f      	beq.n	4032e6 <_fwalk_reent+0x4a>
  4032a6:	4688      	mov	r8, r1
  4032a8:	4606      	mov	r6, r0
  4032aa:	f04f 0900 	mov.w	r9, #0
  4032ae:	687d      	ldr	r5, [r7, #4]
  4032b0:	68bc      	ldr	r4, [r7, #8]
  4032b2:	3d01      	subs	r5, #1
  4032b4:	d411      	bmi.n	4032da <_fwalk_reent+0x3e>
  4032b6:	89a3      	ldrh	r3, [r4, #12]
  4032b8:	2b01      	cmp	r3, #1
  4032ba:	f105 35ff 	add.w	r5, r5, #4294967295
  4032be:	d908      	bls.n	4032d2 <_fwalk_reent+0x36>
  4032c0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4032c4:	3301      	adds	r3, #1
  4032c6:	4621      	mov	r1, r4
  4032c8:	4630      	mov	r0, r6
  4032ca:	d002      	beq.n	4032d2 <_fwalk_reent+0x36>
  4032cc:	47c0      	blx	r8
  4032ce:	ea49 0900 	orr.w	r9, r9, r0
  4032d2:	1c6b      	adds	r3, r5, #1
  4032d4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4032d8:	d1ed      	bne.n	4032b6 <_fwalk_reent+0x1a>
  4032da:	683f      	ldr	r7, [r7, #0]
  4032dc:	2f00      	cmp	r7, #0
  4032de:	d1e6      	bne.n	4032ae <_fwalk_reent+0x12>
  4032e0:	4648      	mov	r0, r9
  4032e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032e6:	46b9      	mov	r9, r7
  4032e8:	4648      	mov	r0, r9
  4032ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032ee:	bf00      	nop

004032f0 <__retarget_lock_init_recursive>:
  4032f0:	4770      	bx	lr
  4032f2:	bf00      	nop

004032f4 <__retarget_lock_close_recursive>:
  4032f4:	4770      	bx	lr
  4032f6:	bf00      	nop

004032f8 <__retarget_lock_acquire_recursive>:
  4032f8:	4770      	bx	lr
  4032fa:	bf00      	nop

004032fc <__retarget_lock_release_recursive>:
  4032fc:	4770      	bx	lr
  4032fe:	bf00      	nop

00403300 <__swhatbuf_r>:
  403300:	b570      	push	{r4, r5, r6, lr}
  403302:	460c      	mov	r4, r1
  403304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403308:	2900      	cmp	r1, #0
  40330a:	b090      	sub	sp, #64	; 0x40
  40330c:	4615      	mov	r5, r2
  40330e:	461e      	mov	r6, r3
  403310:	db14      	blt.n	40333c <__swhatbuf_r+0x3c>
  403312:	aa01      	add	r2, sp, #4
  403314:	f000 fc28 	bl	403b68 <_fstat_r>
  403318:	2800      	cmp	r0, #0
  40331a:	db0f      	blt.n	40333c <__swhatbuf_r+0x3c>
  40331c:	9a02      	ldr	r2, [sp, #8]
  40331e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403322:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403326:	fab2 f282 	clz	r2, r2
  40332a:	0952      	lsrs	r2, r2, #5
  40332c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403330:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403334:	6032      	str	r2, [r6, #0]
  403336:	602b      	str	r3, [r5, #0]
  403338:	b010      	add	sp, #64	; 0x40
  40333a:	bd70      	pop	{r4, r5, r6, pc}
  40333c:	89a2      	ldrh	r2, [r4, #12]
  40333e:	2300      	movs	r3, #0
  403340:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  403344:	6033      	str	r3, [r6, #0]
  403346:	d004      	beq.n	403352 <__swhatbuf_r+0x52>
  403348:	2240      	movs	r2, #64	; 0x40
  40334a:	4618      	mov	r0, r3
  40334c:	602a      	str	r2, [r5, #0]
  40334e:	b010      	add	sp, #64	; 0x40
  403350:	bd70      	pop	{r4, r5, r6, pc}
  403352:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403356:	602b      	str	r3, [r5, #0]
  403358:	b010      	add	sp, #64	; 0x40
  40335a:	bd70      	pop	{r4, r5, r6, pc}

0040335c <malloc>:
  40335c:	4b02      	ldr	r3, [pc, #8]	; (403368 <malloc+0xc>)
  40335e:	4601      	mov	r1, r0
  403360:	6818      	ldr	r0, [r3, #0]
  403362:	f000 b803 	b.w	40336c <_malloc_r>
  403366:	bf00      	nop
  403368:	20000038 	.word	0x20000038

0040336c <_malloc_r>:
  40336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403370:	f101 060b 	add.w	r6, r1, #11
  403374:	2e16      	cmp	r6, #22
  403376:	b083      	sub	sp, #12
  403378:	4605      	mov	r5, r0
  40337a:	f240 809e 	bls.w	4034ba <_malloc_r+0x14e>
  40337e:	f036 0607 	bics.w	r6, r6, #7
  403382:	f100 80bd 	bmi.w	403500 <_malloc_r+0x194>
  403386:	42b1      	cmp	r1, r6
  403388:	f200 80ba 	bhi.w	403500 <_malloc_r+0x194>
  40338c:	f000 fa9e 	bl	4038cc <__malloc_lock>
  403390:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403394:	f0c0 8293 	bcc.w	4038be <_malloc_r+0x552>
  403398:	0a73      	lsrs	r3, r6, #9
  40339a:	f000 80b8 	beq.w	40350e <_malloc_r+0x1a2>
  40339e:	2b04      	cmp	r3, #4
  4033a0:	f200 8179 	bhi.w	403696 <_malloc_r+0x32a>
  4033a4:	09b3      	lsrs	r3, r6, #6
  4033a6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4033aa:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4033ae:	00c3      	lsls	r3, r0, #3
  4033b0:	4fbf      	ldr	r7, [pc, #764]	; (4036b0 <_malloc_r+0x344>)
  4033b2:	443b      	add	r3, r7
  4033b4:	f1a3 0108 	sub.w	r1, r3, #8
  4033b8:	685c      	ldr	r4, [r3, #4]
  4033ba:	42a1      	cmp	r1, r4
  4033bc:	d106      	bne.n	4033cc <_malloc_r+0x60>
  4033be:	e00c      	b.n	4033da <_malloc_r+0x6e>
  4033c0:	2a00      	cmp	r2, #0
  4033c2:	f280 80aa 	bge.w	40351a <_malloc_r+0x1ae>
  4033c6:	68e4      	ldr	r4, [r4, #12]
  4033c8:	42a1      	cmp	r1, r4
  4033ca:	d006      	beq.n	4033da <_malloc_r+0x6e>
  4033cc:	6863      	ldr	r3, [r4, #4]
  4033ce:	f023 0303 	bic.w	r3, r3, #3
  4033d2:	1b9a      	subs	r2, r3, r6
  4033d4:	2a0f      	cmp	r2, #15
  4033d6:	ddf3      	ble.n	4033c0 <_malloc_r+0x54>
  4033d8:	4670      	mov	r0, lr
  4033da:	693c      	ldr	r4, [r7, #16]
  4033dc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4036c4 <_malloc_r+0x358>
  4033e0:	4574      	cmp	r4, lr
  4033e2:	f000 81ab 	beq.w	40373c <_malloc_r+0x3d0>
  4033e6:	6863      	ldr	r3, [r4, #4]
  4033e8:	f023 0303 	bic.w	r3, r3, #3
  4033ec:	1b9a      	subs	r2, r3, r6
  4033ee:	2a0f      	cmp	r2, #15
  4033f0:	f300 8190 	bgt.w	403714 <_malloc_r+0x3a8>
  4033f4:	2a00      	cmp	r2, #0
  4033f6:	f8c7 e014 	str.w	lr, [r7, #20]
  4033fa:	f8c7 e010 	str.w	lr, [r7, #16]
  4033fe:	f280 809d 	bge.w	40353c <_malloc_r+0x1d0>
  403402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403406:	f080 8161 	bcs.w	4036cc <_malloc_r+0x360>
  40340a:	08db      	lsrs	r3, r3, #3
  40340c:	f103 0c01 	add.w	ip, r3, #1
  403410:	1099      	asrs	r1, r3, #2
  403412:	687a      	ldr	r2, [r7, #4]
  403414:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403418:	f8c4 8008 	str.w	r8, [r4, #8]
  40341c:	2301      	movs	r3, #1
  40341e:	408b      	lsls	r3, r1
  403420:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403424:	4313      	orrs	r3, r2
  403426:	3908      	subs	r1, #8
  403428:	60e1      	str	r1, [r4, #12]
  40342a:	607b      	str	r3, [r7, #4]
  40342c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403430:	f8c8 400c 	str.w	r4, [r8, #12]
  403434:	1082      	asrs	r2, r0, #2
  403436:	2401      	movs	r4, #1
  403438:	4094      	lsls	r4, r2
  40343a:	429c      	cmp	r4, r3
  40343c:	f200 808b 	bhi.w	403556 <_malloc_r+0x1ea>
  403440:	421c      	tst	r4, r3
  403442:	d106      	bne.n	403452 <_malloc_r+0xe6>
  403444:	f020 0003 	bic.w	r0, r0, #3
  403448:	0064      	lsls	r4, r4, #1
  40344a:	421c      	tst	r4, r3
  40344c:	f100 0004 	add.w	r0, r0, #4
  403450:	d0fa      	beq.n	403448 <_malloc_r+0xdc>
  403452:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403456:	46cc      	mov	ip, r9
  403458:	4680      	mov	r8, r0
  40345a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40345e:	459c      	cmp	ip, r3
  403460:	d107      	bne.n	403472 <_malloc_r+0x106>
  403462:	e16d      	b.n	403740 <_malloc_r+0x3d4>
  403464:	2a00      	cmp	r2, #0
  403466:	f280 817b 	bge.w	403760 <_malloc_r+0x3f4>
  40346a:	68db      	ldr	r3, [r3, #12]
  40346c:	459c      	cmp	ip, r3
  40346e:	f000 8167 	beq.w	403740 <_malloc_r+0x3d4>
  403472:	6859      	ldr	r1, [r3, #4]
  403474:	f021 0103 	bic.w	r1, r1, #3
  403478:	1b8a      	subs	r2, r1, r6
  40347a:	2a0f      	cmp	r2, #15
  40347c:	ddf2      	ble.n	403464 <_malloc_r+0xf8>
  40347e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403482:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403486:	9300      	str	r3, [sp, #0]
  403488:	199c      	adds	r4, r3, r6
  40348a:	4628      	mov	r0, r5
  40348c:	f046 0601 	orr.w	r6, r6, #1
  403490:	f042 0501 	orr.w	r5, r2, #1
  403494:	605e      	str	r6, [r3, #4]
  403496:	f8c8 c00c 	str.w	ip, [r8, #12]
  40349a:	f8cc 8008 	str.w	r8, [ip, #8]
  40349e:	617c      	str	r4, [r7, #20]
  4034a0:	613c      	str	r4, [r7, #16]
  4034a2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4034a6:	f8c4 e008 	str.w	lr, [r4, #8]
  4034aa:	6065      	str	r5, [r4, #4]
  4034ac:	505a      	str	r2, [r3, r1]
  4034ae:	f000 fa13 	bl	4038d8 <__malloc_unlock>
  4034b2:	9b00      	ldr	r3, [sp, #0]
  4034b4:	f103 0408 	add.w	r4, r3, #8
  4034b8:	e01e      	b.n	4034f8 <_malloc_r+0x18c>
  4034ba:	2910      	cmp	r1, #16
  4034bc:	d820      	bhi.n	403500 <_malloc_r+0x194>
  4034be:	f000 fa05 	bl	4038cc <__malloc_lock>
  4034c2:	2610      	movs	r6, #16
  4034c4:	2318      	movs	r3, #24
  4034c6:	2002      	movs	r0, #2
  4034c8:	4f79      	ldr	r7, [pc, #484]	; (4036b0 <_malloc_r+0x344>)
  4034ca:	443b      	add	r3, r7
  4034cc:	f1a3 0208 	sub.w	r2, r3, #8
  4034d0:	685c      	ldr	r4, [r3, #4]
  4034d2:	4294      	cmp	r4, r2
  4034d4:	f000 813d 	beq.w	403752 <_malloc_r+0x3e6>
  4034d8:	6863      	ldr	r3, [r4, #4]
  4034da:	68e1      	ldr	r1, [r4, #12]
  4034dc:	68a6      	ldr	r6, [r4, #8]
  4034de:	f023 0303 	bic.w	r3, r3, #3
  4034e2:	4423      	add	r3, r4
  4034e4:	4628      	mov	r0, r5
  4034e6:	685a      	ldr	r2, [r3, #4]
  4034e8:	60f1      	str	r1, [r6, #12]
  4034ea:	f042 0201 	orr.w	r2, r2, #1
  4034ee:	608e      	str	r6, [r1, #8]
  4034f0:	605a      	str	r2, [r3, #4]
  4034f2:	f000 f9f1 	bl	4038d8 <__malloc_unlock>
  4034f6:	3408      	adds	r4, #8
  4034f8:	4620      	mov	r0, r4
  4034fa:	b003      	add	sp, #12
  4034fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403500:	2400      	movs	r4, #0
  403502:	230c      	movs	r3, #12
  403504:	4620      	mov	r0, r4
  403506:	602b      	str	r3, [r5, #0]
  403508:	b003      	add	sp, #12
  40350a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40350e:	2040      	movs	r0, #64	; 0x40
  403510:	f44f 7300 	mov.w	r3, #512	; 0x200
  403514:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403518:	e74a      	b.n	4033b0 <_malloc_r+0x44>
  40351a:	4423      	add	r3, r4
  40351c:	68e1      	ldr	r1, [r4, #12]
  40351e:	685a      	ldr	r2, [r3, #4]
  403520:	68a6      	ldr	r6, [r4, #8]
  403522:	f042 0201 	orr.w	r2, r2, #1
  403526:	60f1      	str	r1, [r6, #12]
  403528:	4628      	mov	r0, r5
  40352a:	608e      	str	r6, [r1, #8]
  40352c:	605a      	str	r2, [r3, #4]
  40352e:	f000 f9d3 	bl	4038d8 <__malloc_unlock>
  403532:	3408      	adds	r4, #8
  403534:	4620      	mov	r0, r4
  403536:	b003      	add	sp, #12
  403538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40353c:	4423      	add	r3, r4
  40353e:	4628      	mov	r0, r5
  403540:	685a      	ldr	r2, [r3, #4]
  403542:	f042 0201 	orr.w	r2, r2, #1
  403546:	605a      	str	r2, [r3, #4]
  403548:	f000 f9c6 	bl	4038d8 <__malloc_unlock>
  40354c:	3408      	adds	r4, #8
  40354e:	4620      	mov	r0, r4
  403550:	b003      	add	sp, #12
  403552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403556:	68bc      	ldr	r4, [r7, #8]
  403558:	6863      	ldr	r3, [r4, #4]
  40355a:	f023 0803 	bic.w	r8, r3, #3
  40355e:	45b0      	cmp	r8, r6
  403560:	d304      	bcc.n	40356c <_malloc_r+0x200>
  403562:	eba8 0306 	sub.w	r3, r8, r6
  403566:	2b0f      	cmp	r3, #15
  403568:	f300 8085 	bgt.w	403676 <_malloc_r+0x30a>
  40356c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4036c8 <_malloc_r+0x35c>
  403570:	4b50      	ldr	r3, [pc, #320]	; (4036b4 <_malloc_r+0x348>)
  403572:	f8d9 2000 	ldr.w	r2, [r9]
  403576:	681b      	ldr	r3, [r3, #0]
  403578:	3201      	adds	r2, #1
  40357a:	4433      	add	r3, r6
  40357c:	eb04 0a08 	add.w	sl, r4, r8
  403580:	f000 8155 	beq.w	40382e <_malloc_r+0x4c2>
  403584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403588:	330f      	adds	r3, #15
  40358a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40358e:	f02b 0b0f 	bic.w	fp, fp, #15
  403592:	4659      	mov	r1, fp
  403594:	4628      	mov	r0, r5
  403596:	f000 f9a5 	bl	4038e4 <_sbrk_r>
  40359a:	1c41      	adds	r1, r0, #1
  40359c:	4602      	mov	r2, r0
  40359e:	f000 80fc 	beq.w	40379a <_malloc_r+0x42e>
  4035a2:	4582      	cmp	sl, r0
  4035a4:	f200 80f7 	bhi.w	403796 <_malloc_r+0x42a>
  4035a8:	4b43      	ldr	r3, [pc, #268]	; (4036b8 <_malloc_r+0x34c>)
  4035aa:	6819      	ldr	r1, [r3, #0]
  4035ac:	4459      	add	r1, fp
  4035ae:	6019      	str	r1, [r3, #0]
  4035b0:	f000 814d 	beq.w	40384e <_malloc_r+0x4e2>
  4035b4:	f8d9 0000 	ldr.w	r0, [r9]
  4035b8:	3001      	adds	r0, #1
  4035ba:	bf1b      	ittet	ne
  4035bc:	eba2 0a0a 	subne.w	sl, r2, sl
  4035c0:	4451      	addne	r1, sl
  4035c2:	f8c9 2000 	streq.w	r2, [r9]
  4035c6:	6019      	strne	r1, [r3, #0]
  4035c8:	f012 0107 	ands.w	r1, r2, #7
  4035cc:	f000 8115 	beq.w	4037fa <_malloc_r+0x48e>
  4035d0:	f1c1 0008 	rsb	r0, r1, #8
  4035d4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4035d8:	4402      	add	r2, r0
  4035da:	3108      	adds	r1, #8
  4035dc:	eb02 090b 	add.w	r9, r2, fp
  4035e0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4035e4:	eba1 0909 	sub.w	r9, r1, r9
  4035e8:	4649      	mov	r1, r9
  4035ea:	4628      	mov	r0, r5
  4035ec:	9301      	str	r3, [sp, #4]
  4035ee:	9200      	str	r2, [sp, #0]
  4035f0:	f000 f978 	bl	4038e4 <_sbrk_r>
  4035f4:	1c43      	adds	r3, r0, #1
  4035f6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4035fa:	f000 8143 	beq.w	403884 <_malloc_r+0x518>
  4035fe:	1a80      	subs	r0, r0, r2
  403600:	4448      	add	r0, r9
  403602:	f040 0001 	orr.w	r0, r0, #1
  403606:	6819      	ldr	r1, [r3, #0]
  403608:	60ba      	str	r2, [r7, #8]
  40360a:	4449      	add	r1, r9
  40360c:	42bc      	cmp	r4, r7
  40360e:	6050      	str	r0, [r2, #4]
  403610:	6019      	str	r1, [r3, #0]
  403612:	d017      	beq.n	403644 <_malloc_r+0x2d8>
  403614:	f1b8 0f0f 	cmp.w	r8, #15
  403618:	f240 80fb 	bls.w	403812 <_malloc_r+0x4a6>
  40361c:	6860      	ldr	r0, [r4, #4]
  40361e:	f1a8 020c 	sub.w	r2, r8, #12
  403622:	f022 0207 	bic.w	r2, r2, #7
  403626:	eb04 0e02 	add.w	lr, r4, r2
  40362a:	f000 0001 	and.w	r0, r0, #1
  40362e:	f04f 0c05 	mov.w	ip, #5
  403632:	4310      	orrs	r0, r2
  403634:	2a0f      	cmp	r2, #15
  403636:	6060      	str	r0, [r4, #4]
  403638:	f8ce c004 	str.w	ip, [lr, #4]
  40363c:	f8ce c008 	str.w	ip, [lr, #8]
  403640:	f200 8117 	bhi.w	403872 <_malloc_r+0x506>
  403644:	4b1d      	ldr	r3, [pc, #116]	; (4036bc <_malloc_r+0x350>)
  403646:	68bc      	ldr	r4, [r7, #8]
  403648:	681a      	ldr	r2, [r3, #0]
  40364a:	4291      	cmp	r1, r2
  40364c:	bf88      	it	hi
  40364e:	6019      	strhi	r1, [r3, #0]
  403650:	4b1b      	ldr	r3, [pc, #108]	; (4036c0 <_malloc_r+0x354>)
  403652:	681a      	ldr	r2, [r3, #0]
  403654:	4291      	cmp	r1, r2
  403656:	6862      	ldr	r2, [r4, #4]
  403658:	bf88      	it	hi
  40365a:	6019      	strhi	r1, [r3, #0]
  40365c:	f022 0203 	bic.w	r2, r2, #3
  403660:	4296      	cmp	r6, r2
  403662:	eba2 0306 	sub.w	r3, r2, r6
  403666:	d801      	bhi.n	40366c <_malloc_r+0x300>
  403668:	2b0f      	cmp	r3, #15
  40366a:	dc04      	bgt.n	403676 <_malloc_r+0x30a>
  40366c:	4628      	mov	r0, r5
  40366e:	f000 f933 	bl	4038d8 <__malloc_unlock>
  403672:	2400      	movs	r4, #0
  403674:	e740      	b.n	4034f8 <_malloc_r+0x18c>
  403676:	19a2      	adds	r2, r4, r6
  403678:	f043 0301 	orr.w	r3, r3, #1
  40367c:	f046 0601 	orr.w	r6, r6, #1
  403680:	6066      	str	r6, [r4, #4]
  403682:	4628      	mov	r0, r5
  403684:	60ba      	str	r2, [r7, #8]
  403686:	6053      	str	r3, [r2, #4]
  403688:	f000 f926 	bl	4038d8 <__malloc_unlock>
  40368c:	3408      	adds	r4, #8
  40368e:	4620      	mov	r0, r4
  403690:	b003      	add	sp, #12
  403692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403696:	2b14      	cmp	r3, #20
  403698:	d971      	bls.n	40377e <_malloc_r+0x412>
  40369a:	2b54      	cmp	r3, #84	; 0x54
  40369c:	f200 80a3 	bhi.w	4037e6 <_malloc_r+0x47a>
  4036a0:	0b33      	lsrs	r3, r6, #12
  4036a2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4036a6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4036aa:	00c3      	lsls	r3, r0, #3
  4036ac:	e680      	b.n	4033b0 <_malloc_r+0x44>
  4036ae:	bf00      	nop
  4036b0:	2000046c 	.word	0x2000046c
  4036b4:	2000cf20 	.word	0x2000cf20
  4036b8:	2000cef0 	.word	0x2000cef0
  4036bc:	2000cf18 	.word	0x2000cf18
  4036c0:	2000cf1c 	.word	0x2000cf1c
  4036c4:	20000474 	.word	0x20000474
  4036c8:	20000874 	.word	0x20000874
  4036cc:	0a5a      	lsrs	r2, r3, #9
  4036ce:	2a04      	cmp	r2, #4
  4036d0:	d95b      	bls.n	40378a <_malloc_r+0x41e>
  4036d2:	2a14      	cmp	r2, #20
  4036d4:	f200 80ae 	bhi.w	403834 <_malloc_r+0x4c8>
  4036d8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4036dc:	00c9      	lsls	r1, r1, #3
  4036de:	325b      	adds	r2, #91	; 0x5b
  4036e0:	eb07 0c01 	add.w	ip, r7, r1
  4036e4:	5879      	ldr	r1, [r7, r1]
  4036e6:	f1ac 0c08 	sub.w	ip, ip, #8
  4036ea:	458c      	cmp	ip, r1
  4036ec:	f000 8088 	beq.w	403800 <_malloc_r+0x494>
  4036f0:	684a      	ldr	r2, [r1, #4]
  4036f2:	f022 0203 	bic.w	r2, r2, #3
  4036f6:	4293      	cmp	r3, r2
  4036f8:	d273      	bcs.n	4037e2 <_malloc_r+0x476>
  4036fa:	6889      	ldr	r1, [r1, #8]
  4036fc:	458c      	cmp	ip, r1
  4036fe:	d1f7      	bne.n	4036f0 <_malloc_r+0x384>
  403700:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403704:	687b      	ldr	r3, [r7, #4]
  403706:	60e2      	str	r2, [r4, #12]
  403708:	f8c4 c008 	str.w	ip, [r4, #8]
  40370c:	6094      	str	r4, [r2, #8]
  40370e:	f8cc 400c 	str.w	r4, [ip, #12]
  403712:	e68f      	b.n	403434 <_malloc_r+0xc8>
  403714:	19a1      	adds	r1, r4, r6
  403716:	f046 0c01 	orr.w	ip, r6, #1
  40371a:	f042 0601 	orr.w	r6, r2, #1
  40371e:	f8c4 c004 	str.w	ip, [r4, #4]
  403722:	4628      	mov	r0, r5
  403724:	6179      	str	r1, [r7, #20]
  403726:	6139      	str	r1, [r7, #16]
  403728:	f8c1 e00c 	str.w	lr, [r1, #12]
  40372c:	f8c1 e008 	str.w	lr, [r1, #8]
  403730:	604e      	str	r6, [r1, #4]
  403732:	50e2      	str	r2, [r4, r3]
  403734:	f000 f8d0 	bl	4038d8 <__malloc_unlock>
  403738:	3408      	adds	r4, #8
  40373a:	e6dd      	b.n	4034f8 <_malloc_r+0x18c>
  40373c:	687b      	ldr	r3, [r7, #4]
  40373e:	e679      	b.n	403434 <_malloc_r+0xc8>
  403740:	f108 0801 	add.w	r8, r8, #1
  403744:	f018 0f03 	tst.w	r8, #3
  403748:	f10c 0c08 	add.w	ip, ip, #8
  40374c:	f47f ae85 	bne.w	40345a <_malloc_r+0xee>
  403750:	e02d      	b.n	4037ae <_malloc_r+0x442>
  403752:	68dc      	ldr	r4, [r3, #12]
  403754:	42a3      	cmp	r3, r4
  403756:	bf08      	it	eq
  403758:	3002      	addeq	r0, #2
  40375a:	f43f ae3e 	beq.w	4033da <_malloc_r+0x6e>
  40375e:	e6bb      	b.n	4034d8 <_malloc_r+0x16c>
  403760:	4419      	add	r1, r3
  403762:	461c      	mov	r4, r3
  403764:	684a      	ldr	r2, [r1, #4]
  403766:	68db      	ldr	r3, [r3, #12]
  403768:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40376c:	f042 0201 	orr.w	r2, r2, #1
  403770:	604a      	str	r2, [r1, #4]
  403772:	4628      	mov	r0, r5
  403774:	60f3      	str	r3, [r6, #12]
  403776:	609e      	str	r6, [r3, #8]
  403778:	f000 f8ae 	bl	4038d8 <__malloc_unlock>
  40377c:	e6bc      	b.n	4034f8 <_malloc_r+0x18c>
  40377e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403782:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403786:	00c3      	lsls	r3, r0, #3
  403788:	e612      	b.n	4033b0 <_malloc_r+0x44>
  40378a:	099a      	lsrs	r2, r3, #6
  40378c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403790:	00c9      	lsls	r1, r1, #3
  403792:	3238      	adds	r2, #56	; 0x38
  403794:	e7a4      	b.n	4036e0 <_malloc_r+0x374>
  403796:	42bc      	cmp	r4, r7
  403798:	d054      	beq.n	403844 <_malloc_r+0x4d8>
  40379a:	68bc      	ldr	r4, [r7, #8]
  40379c:	6862      	ldr	r2, [r4, #4]
  40379e:	f022 0203 	bic.w	r2, r2, #3
  4037a2:	e75d      	b.n	403660 <_malloc_r+0x2f4>
  4037a4:	f859 3908 	ldr.w	r3, [r9], #-8
  4037a8:	4599      	cmp	r9, r3
  4037aa:	f040 8086 	bne.w	4038ba <_malloc_r+0x54e>
  4037ae:	f010 0f03 	tst.w	r0, #3
  4037b2:	f100 30ff 	add.w	r0, r0, #4294967295
  4037b6:	d1f5      	bne.n	4037a4 <_malloc_r+0x438>
  4037b8:	687b      	ldr	r3, [r7, #4]
  4037ba:	ea23 0304 	bic.w	r3, r3, r4
  4037be:	607b      	str	r3, [r7, #4]
  4037c0:	0064      	lsls	r4, r4, #1
  4037c2:	429c      	cmp	r4, r3
  4037c4:	f63f aec7 	bhi.w	403556 <_malloc_r+0x1ea>
  4037c8:	2c00      	cmp	r4, #0
  4037ca:	f43f aec4 	beq.w	403556 <_malloc_r+0x1ea>
  4037ce:	421c      	tst	r4, r3
  4037d0:	4640      	mov	r0, r8
  4037d2:	f47f ae3e 	bne.w	403452 <_malloc_r+0xe6>
  4037d6:	0064      	lsls	r4, r4, #1
  4037d8:	421c      	tst	r4, r3
  4037da:	f100 0004 	add.w	r0, r0, #4
  4037de:	d0fa      	beq.n	4037d6 <_malloc_r+0x46a>
  4037e0:	e637      	b.n	403452 <_malloc_r+0xe6>
  4037e2:	468c      	mov	ip, r1
  4037e4:	e78c      	b.n	403700 <_malloc_r+0x394>
  4037e6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4037ea:	d815      	bhi.n	403818 <_malloc_r+0x4ac>
  4037ec:	0bf3      	lsrs	r3, r6, #15
  4037ee:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4037f2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4037f6:	00c3      	lsls	r3, r0, #3
  4037f8:	e5da      	b.n	4033b0 <_malloc_r+0x44>
  4037fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4037fe:	e6ed      	b.n	4035dc <_malloc_r+0x270>
  403800:	687b      	ldr	r3, [r7, #4]
  403802:	1092      	asrs	r2, r2, #2
  403804:	2101      	movs	r1, #1
  403806:	fa01 f202 	lsl.w	r2, r1, r2
  40380a:	4313      	orrs	r3, r2
  40380c:	607b      	str	r3, [r7, #4]
  40380e:	4662      	mov	r2, ip
  403810:	e779      	b.n	403706 <_malloc_r+0x39a>
  403812:	2301      	movs	r3, #1
  403814:	6053      	str	r3, [r2, #4]
  403816:	e729      	b.n	40366c <_malloc_r+0x300>
  403818:	f240 5254 	movw	r2, #1364	; 0x554
  40381c:	4293      	cmp	r3, r2
  40381e:	d822      	bhi.n	403866 <_malloc_r+0x4fa>
  403820:	0cb3      	lsrs	r3, r6, #18
  403822:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403826:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40382a:	00c3      	lsls	r3, r0, #3
  40382c:	e5c0      	b.n	4033b0 <_malloc_r+0x44>
  40382e:	f103 0b10 	add.w	fp, r3, #16
  403832:	e6ae      	b.n	403592 <_malloc_r+0x226>
  403834:	2a54      	cmp	r2, #84	; 0x54
  403836:	d829      	bhi.n	40388c <_malloc_r+0x520>
  403838:	0b1a      	lsrs	r2, r3, #12
  40383a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40383e:	00c9      	lsls	r1, r1, #3
  403840:	326e      	adds	r2, #110	; 0x6e
  403842:	e74d      	b.n	4036e0 <_malloc_r+0x374>
  403844:	4b20      	ldr	r3, [pc, #128]	; (4038c8 <_malloc_r+0x55c>)
  403846:	6819      	ldr	r1, [r3, #0]
  403848:	4459      	add	r1, fp
  40384a:	6019      	str	r1, [r3, #0]
  40384c:	e6b2      	b.n	4035b4 <_malloc_r+0x248>
  40384e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403852:	2800      	cmp	r0, #0
  403854:	f47f aeae 	bne.w	4035b4 <_malloc_r+0x248>
  403858:	eb08 030b 	add.w	r3, r8, fp
  40385c:	68ba      	ldr	r2, [r7, #8]
  40385e:	f043 0301 	orr.w	r3, r3, #1
  403862:	6053      	str	r3, [r2, #4]
  403864:	e6ee      	b.n	403644 <_malloc_r+0x2d8>
  403866:	207f      	movs	r0, #127	; 0x7f
  403868:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40386c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403870:	e59e      	b.n	4033b0 <_malloc_r+0x44>
  403872:	f104 0108 	add.w	r1, r4, #8
  403876:	4628      	mov	r0, r5
  403878:	9300      	str	r3, [sp, #0]
  40387a:	f7ff fc29 	bl	4030d0 <_free_r>
  40387e:	9b00      	ldr	r3, [sp, #0]
  403880:	6819      	ldr	r1, [r3, #0]
  403882:	e6df      	b.n	403644 <_malloc_r+0x2d8>
  403884:	2001      	movs	r0, #1
  403886:	f04f 0900 	mov.w	r9, #0
  40388a:	e6bc      	b.n	403606 <_malloc_r+0x29a>
  40388c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403890:	d805      	bhi.n	40389e <_malloc_r+0x532>
  403892:	0bda      	lsrs	r2, r3, #15
  403894:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403898:	00c9      	lsls	r1, r1, #3
  40389a:	3277      	adds	r2, #119	; 0x77
  40389c:	e720      	b.n	4036e0 <_malloc_r+0x374>
  40389e:	f240 5154 	movw	r1, #1364	; 0x554
  4038a2:	428a      	cmp	r2, r1
  4038a4:	d805      	bhi.n	4038b2 <_malloc_r+0x546>
  4038a6:	0c9a      	lsrs	r2, r3, #18
  4038a8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4038ac:	00c9      	lsls	r1, r1, #3
  4038ae:	327c      	adds	r2, #124	; 0x7c
  4038b0:	e716      	b.n	4036e0 <_malloc_r+0x374>
  4038b2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4038b6:	227e      	movs	r2, #126	; 0x7e
  4038b8:	e712      	b.n	4036e0 <_malloc_r+0x374>
  4038ba:	687b      	ldr	r3, [r7, #4]
  4038bc:	e780      	b.n	4037c0 <_malloc_r+0x454>
  4038be:	08f0      	lsrs	r0, r6, #3
  4038c0:	f106 0308 	add.w	r3, r6, #8
  4038c4:	e600      	b.n	4034c8 <_malloc_r+0x15c>
  4038c6:	bf00      	nop
  4038c8:	2000cef0 	.word	0x2000cef0

004038cc <__malloc_lock>:
  4038cc:	4801      	ldr	r0, [pc, #4]	; (4038d4 <__malloc_lock+0x8>)
  4038ce:	f7ff bd13 	b.w	4032f8 <__retarget_lock_acquire_recursive>
  4038d2:	bf00      	nop
  4038d4:	2000d050 	.word	0x2000d050

004038d8 <__malloc_unlock>:
  4038d8:	4801      	ldr	r0, [pc, #4]	; (4038e0 <__malloc_unlock+0x8>)
  4038da:	f7ff bd0f 	b.w	4032fc <__retarget_lock_release_recursive>
  4038de:	bf00      	nop
  4038e0:	2000d050 	.word	0x2000d050

004038e4 <_sbrk_r>:
  4038e4:	b538      	push	{r3, r4, r5, lr}
  4038e6:	4c07      	ldr	r4, [pc, #28]	; (403904 <_sbrk_r+0x20>)
  4038e8:	2300      	movs	r3, #0
  4038ea:	4605      	mov	r5, r0
  4038ec:	4608      	mov	r0, r1
  4038ee:	6023      	str	r3, [r4, #0]
  4038f0:	f7fe f820 	bl	401934 <_sbrk>
  4038f4:	1c43      	adds	r3, r0, #1
  4038f6:	d000      	beq.n	4038fa <_sbrk_r+0x16>
  4038f8:	bd38      	pop	{r3, r4, r5, pc}
  4038fa:	6823      	ldr	r3, [r4, #0]
  4038fc:	2b00      	cmp	r3, #0
  4038fe:	d0fb      	beq.n	4038f8 <_sbrk_r+0x14>
  403900:	602b      	str	r3, [r5, #0]
  403902:	bd38      	pop	{r3, r4, r5, pc}
  403904:	2000d064 	.word	0x2000d064

00403908 <__sread>:
  403908:	b510      	push	{r4, lr}
  40390a:	460c      	mov	r4, r1
  40390c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403910:	f000 f954 	bl	403bbc <_read_r>
  403914:	2800      	cmp	r0, #0
  403916:	db03      	blt.n	403920 <__sread+0x18>
  403918:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40391a:	4403      	add	r3, r0
  40391c:	6523      	str	r3, [r4, #80]	; 0x50
  40391e:	bd10      	pop	{r4, pc}
  403920:	89a3      	ldrh	r3, [r4, #12]
  403922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403926:	81a3      	strh	r3, [r4, #12]
  403928:	bd10      	pop	{r4, pc}
  40392a:	bf00      	nop

0040392c <__swrite>:
  40392c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403930:	4616      	mov	r6, r2
  403932:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403936:	461f      	mov	r7, r3
  403938:	05d3      	lsls	r3, r2, #23
  40393a:	460c      	mov	r4, r1
  40393c:	4605      	mov	r5, r0
  40393e:	d507      	bpl.n	403950 <__swrite+0x24>
  403940:	2200      	movs	r2, #0
  403942:	2302      	movs	r3, #2
  403944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403948:	f000 f922 	bl	403b90 <_lseek_r>
  40394c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403954:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403958:	81a2      	strh	r2, [r4, #12]
  40395a:	463b      	mov	r3, r7
  40395c:	4632      	mov	r2, r6
  40395e:	4628      	mov	r0, r5
  403960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403964:	f000 b814 	b.w	403990 <_write_r>

00403968 <__sseek>:
  403968:	b510      	push	{r4, lr}
  40396a:	460c      	mov	r4, r1
  40396c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403970:	f000 f90e 	bl	403b90 <_lseek_r>
  403974:	89a3      	ldrh	r3, [r4, #12]
  403976:	1c42      	adds	r2, r0, #1
  403978:	bf0e      	itee	eq
  40397a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40397e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403982:	6520      	strne	r0, [r4, #80]	; 0x50
  403984:	81a3      	strh	r3, [r4, #12]
  403986:	bd10      	pop	{r4, pc}

00403988 <__sclose>:
  403988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40398c:	f000 b878 	b.w	403a80 <_close_r>

00403990 <_write_r>:
  403990:	b570      	push	{r4, r5, r6, lr}
  403992:	460d      	mov	r5, r1
  403994:	4c08      	ldr	r4, [pc, #32]	; (4039b8 <_write_r+0x28>)
  403996:	4611      	mov	r1, r2
  403998:	4606      	mov	r6, r0
  40399a:	461a      	mov	r2, r3
  40399c:	4628      	mov	r0, r5
  40399e:	2300      	movs	r3, #0
  4039a0:	6023      	str	r3, [r4, #0]
  4039a2:	f7fd faed 	bl	400f80 <_write>
  4039a6:	1c43      	adds	r3, r0, #1
  4039a8:	d000      	beq.n	4039ac <_write_r+0x1c>
  4039aa:	bd70      	pop	{r4, r5, r6, pc}
  4039ac:	6823      	ldr	r3, [r4, #0]
  4039ae:	2b00      	cmp	r3, #0
  4039b0:	d0fb      	beq.n	4039aa <_write_r+0x1a>
  4039b2:	6033      	str	r3, [r6, #0]
  4039b4:	bd70      	pop	{r4, r5, r6, pc}
  4039b6:	bf00      	nop
  4039b8:	2000d064 	.word	0x2000d064

004039bc <__register_exitproc>:
  4039bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4039c0:	4d2c      	ldr	r5, [pc, #176]	; (403a74 <__register_exitproc+0xb8>)
  4039c2:	4606      	mov	r6, r0
  4039c4:	6828      	ldr	r0, [r5, #0]
  4039c6:	4698      	mov	r8, r3
  4039c8:	460f      	mov	r7, r1
  4039ca:	4691      	mov	r9, r2
  4039cc:	f7ff fc94 	bl	4032f8 <__retarget_lock_acquire_recursive>
  4039d0:	4b29      	ldr	r3, [pc, #164]	; (403a78 <__register_exitproc+0xbc>)
  4039d2:	681c      	ldr	r4, [r3, #0]
  4039d4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4039d8:	2b00      	cmp	r3, #0
  4039da:	d03e      	beq.n	403a5a <__register_exitproc+0x9e>
  4039dc:	685a      	ldr	r2, [r3, #4]
  4039de:	2a1f      	cmp	r2, #31
  4039e0:	dc1c      	bgt.n	403a1c <__register_exitproc+0x60>
  4039e2:	f102 0e01 	add.w	lr, r2, #1
  4039e6:	b176      	cbz	r6, 403a06 <__register_exitproc+0x4a>
  4039e8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4039ec:	2401      	movs	r4, #1
  4039ee:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4039f2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4039f6:	4094      	lsls	r4, r2
  4039f8:	4320      	orrs	r0, r4
  4039fa:	2e02      	cmp	r6, #2
  4039fc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403a00:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403a04:	d023      	beq.n	403a4e <__register_exitproc+0x92>
  403a06:	3202      	adds	r2, #2
  403a08:	f8c3 e004 	str.w	lr, [r3, #4]
  403a0c:	6828      	ldr	r0, [r5, #0]
  403a0e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403a12:	f7ff fc73 	bl	4032fc <__retarget_lock_release_recursive>
  403a16:	2000      	movs	r0, #0
  403a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a1c:	4b17      	ldr	r3, [pc, #92]	; (403a7c <__register_exitproc+0xc0>)
  403a1e:	b30b      	cbz	r3, 403a64 <__register_exitproc+0xa8>
  403a20:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403a24:	f7ff fc9a 	bl	40335c <malloc>
  403a28:	4603      	mov	r3, r0
  403a2a:	b1d8      	cbz	r0, 403a64 <__register_exitproc+0xa8>
  403a2c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403a30:	6002      	str	r2, [r0, #0]
  403a32:	2100      	movs	r1, #0
  403a34:	6041      	str	r1, [r0, #4]
  403a36:	460a      	mov	r2, r1
  403a38:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403a3c:	f04f 0e01 	mov.w	lr, #1
  403a40:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403a44:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403a48:	2e00      	cmp	r6, #0
  403a4a:	d0dc      	beq.n	403a06 <__register_exitproc+0x4a>
  403a4c:	e7cc      	b.n	4039e8 <__register_exitproc+0x2c>
  403a4e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403a52:	430c      	orrs	r4, r1
  403a54:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403a58:	e7d5      	b.n	403a06 <__register_exitproc+0x4a>
  403a5a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403a5e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403a62:	e7bb      	b.n	4039dc <__register_exitproc+0x20>
  403a64:	6828      	ldr	r0, [r5, #0]
  403a66:	f7ff fc49 	bl	4032fc <__retarget_lock_release_recursive>
  403a6a:	f04f 30ff 	mov.w	r0, #4294967295
  403a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a72:	bf00      	nop
  403a74:	20000468 	.word	0x20000468
  403a78:	00403bf0 	.word	0x00403bf0
  403a7c:	0040335d 	.word	0x0040335d

00403a80 <_close_r>:
  403a80:	b538      	push	{r3, r4, r5, lr}
  403a82:	4c07      	ldr	r4, [pc, #28]	; (403aa0 <_close_r+0x20>)
  403a84:	2300      	movs	r3, #0
  403a86:	4605      	mov	r5, r0
  403a88:	4608      	mov	r0, r1
  403a8a:	6023      	str	r3, [r4, #0]
  403a8c:	f7fd ff6e 	bl	40196c <_close>
  403a90:	1c43      	adds	r3, r0, #1
  403a92:	d000      	beq.n	403a96 <_close_r+0x16>
  403a94:	bd38      	pop	{r3, r4, r5, pc}
  403a96:	6823      	ldr	r3, [r4, #0]
  403a98:	2b00      	cmp	r3, #0
  403a9a:	d0fb      	beq.n	403a94 <_close_r+0x14>
  403a9c:	602b      	str	r3, [r5, #0]
  403a9e:	bd38      	pop	{r3, r4, r5, pc}
  403aa0:	2000d064 	.word	0x2000d064

00403aa4 <_fclose_r>:
  403aa4:	b570      	push	{r4, r5, r6, lr}
  403aa6:	b159      	cbz	r1, 403ac0 <_fclose_r+0x1c>
  403aa8:	4605      	mov	r5, r0
  403aaa:	460c      	mov	r4, r1
  403aac:	b110      	cbz	r0, 403ab4 <_fclose_r+0x10>
  403aae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403ab0:	2b00      	cmp	r3, #0
  403ab2:	d03c      	beq.n	403b2e <_fclose_r+0x8a>
  403ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ab6:	07d8      	lsls	r0, r3, #31
  403ab8:	d505      	bpl.n	403ac6 <_fclose_r+0x22>
  403aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403abe:	b92b      	cbnz	r3, 403acc <_fclose_r+0x28>
  403ac0:	2600      	movs	r6, #0
  403ac2:	4630      	mov	r0, r6
  403ac4:	bd70      	pop	{r4, r5, r6, pc}
  403ac6:	89a3      	ldrh	r3, [r4, #12]
  403ac8:	0599      	lsls	r1, r3, #22
  403aca:	d53c      	bpl.n	403b46 <_fclose_r+0xa2>
  403acc:	4621      	mov	r1, r4
  403ace:	4628      	mov	r0, r5
  403ad0:	f7ff f964 	bl	402d9c <__sflush_r>
  403ad4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403ad6:	4606      	mov	r6, r0
  403ad8:	b133      	cbz	r3, 403ae8 <_fclose_r+0x44>
  403ada:	69e1      	ldr	r1, [r4, #28]
  403adc:	4628      	mov	r0, r5
  403ade:	4798      	blx	r3
  403ae0:	2800      	cmp	r0, #0
  403ae2:	bfb8      	it	lt
  403ae4:	f04f 36ff 	movlt.w	r6, #4294967295
  403ae8:	89a3      	ldrh	r3, [r4, #12]
  403aea:	061a      	lsls	r2, r3, #24
  403aec:	d422      	bmi.n	403b34 <_fclose_r+0x90>
  403aee:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403af0:	b141      	cbz	r1, 403b04 <_fclose_r+0x60>
  403af2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403af6:	4299      	cmp	r1, r3
  403af8:	d002      	beq.n	403b00 <_fclose_r+0x5c>
  403afa:	4628      	mov	r0, r5
  403afc:	f7ff fae8 	bl	4030d0 <_free_r>
  403b00:	2300      	movs	r3, #0
  403b02:	6323      	str	r3, [r4, #48]	; 0x30
  403b04:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403b06:	b121      	cbz	r1, 403b12 <_fclose_r+0x6e>
  403b08:	4628      	mov	r0, r5
  403b0a:	f7ff fae1 	bl	4030d0 <_free_r>
  403b0e:	2300      	movs	r3, #0
  403b10:	6463      	str	r3, [r4, #68]	; 0x44
  403b12:	f7ff fa67 	bl	402fe4 <__sfp_lock_acquire>
  403b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403b18:	2200      	movs	r2, #0
  403b1a:	07db      	lsls	r3, r3, #31
  403b1c:	81a2      	strh	r2, [r4, #12]
  403b1e:	d50e      	bpl.n	403b3e <_fclose_r+0x9a>
  403b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b22:	f7ff fbe7 	bl	4032f4 <__retarget_lock_close_recursive>
  403b26:	f7ff fa63 	bl	402ff0 <__sfp_lock_release>
  403b2a:	4630      	mov	r0, r6
  403b2c:	bd70      	pop	{r4, r5, r6, pc}
  403b2e:	f7ff fa2d 	bl	402f8c <__sinit>
  403b32:	e7bf      	b.n	403ab4 <_fclose_r+0x10>
  403b34:	6921      	ldr	r1, [r4, #16]
  403b36:	4628      	mov	r0, r5
  403b38:	f7ff faca 	bl	4030d0 <_free_r>
  403b3c:	e7d7      	b.n	403aee <_fclose_r+0x4a>
  403b3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b40:	f7ff fbdc 	bl	4032fc <__retarget_lock_release_recursive>
  403b44:	e7ec      	b.n	403b20 <_fclose_r+0x7c>
  403b46:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b48:	f7ff fbd6 	bl	4032f8 <__retarget_lock_acquire_recursive>
  403b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b50:	2b00      	cmp	r3, #0
  403b52:	d1bb      	bne.n	403acc <_fclose_r+0x28>
  403b54:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403b56:	f016 0601 	ands.w	r6, r6, #1
  403b5a:	d1b1      	bne.n	403ac0 <_fclose_r+0x1c>
  403b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b5e:	f7ff fbcd 	bl	4032fc <__retarget_lock_release_recursive>
  403b62:	4630      	mov	r0, r6
  403b64:	bd70      	pop	{r4, r5, r6, pc}
  403b66:	bf00      	nop

00403b68 <_fstat_r>:
  403b68:	b538      	push	{r3, r4, r5, lr}
  403b6a:	460b      	mov	r3, r1
  403b6c:	4c07      	ldr	r4, [pc, #28]	; (403b8c <_fstat_r+0x24>)
  403b6e:	4605      	mov	r5, r0
  403b70:	4611      	mov	r1, r2
  403b72:	4618      	mov	r0, r3
  403b74:	2300      	movs	r3, #0
  403b76:	6023      	str	r3, [r4, #0]
  403b78:	f7fd fefb 	bl	401972 <_fstat>
  403b7c:	1c43      	adds	r3, r0, #1
  403b7e:	d000      	beq.n	403b82 <_fstat_r+0x1a>
  403b80:	bd38      	pop	{r3, r4, r5, pc}
  403b82:	6823      	ldr	r3, [r4, #0]
  403b84:	2b00      	cmp	r3, #0
  403b86:	d0fb      	beq.n	403b80 <_fstat_r+0x18>
  403b88:	602b      	str	r3, [r5, #0]
  403b8a:	bd38      	pop	{r3, r4, r5, pc}
  403b8c:	2000d064 	.word	0x2000d064

00403b90 <_lseek_r>:
  403b90:	b570      	push	{r4, r5, r6, lr}
  403b92:	460d      	mov	r5, r1
  403b94:	4c08      	ldr	r4, [pc, #32]	; (403bb8 <_lseek_r+0x28>)
  403b96:	4611      	mov	r1, r2
  403b98:	4606      	mov	r6, r0
  403b9a:	461a      	mov	r2, r3
  403b9c:	4628      	mov	r0, r5
  403b9e:	2300      	movs	r3, #0
  403ba0:	6023      	str	r3, [r4, #0]
  403ba2:	f7fd feeb 	bl	40197c <_lseek>
  403ba6:	1c43      	adds	r3, r0, #1
  403ba8:	d000      	beq.n	403bac <_lseek_r+0x1c>
  403baa:	bd70      	pop	{r4, r5, r6, pc}
  403bac:	6823      	ldr	r3, [r4, #0]
  403bae:	2b00      	cmp	r3, #0
  403bb0:	d0fb      	beq.n	403baa <_lseek_r+0x1a>
  403bb2:	6033      	str	r3, [r6, #0]
  403bb4:	bd70      	pop	{r4, r5, r6, pc}
  403bb6:	bf00      	nop
  403bb8:	2000d064 	.word	0x2000d064

00403bbc <_read_r>:
  403bbc:	b570      	push	{r4, r5, r6, lr}
  403bbe:	460d      	mov	r5, r1
  403bc0:	4c08      	ldr	r4, [pc, #32]	; (403be4 <_read_r+0x28>)
  403bc2:	4611      	mov	r1, r2
  403bc4:	4606      	mov	r6, r0
  403bc6:	461a      	mov	r2, r3
  403bc8:	4628      	mov	r0, r5
  403bca:	2300      	movs	r3, #0
  403bcc:	6023      	str	r3, [r4, #0]
  403bce:	f7fd f9b9 	bl	400f44 <_read>
  403bd2:	1c43      	adds	r3, r0, #1
  403bd4:	d000      	beq.n	403bd8 <_read_r+0x1c>
  403bd6:	bd70      	pop	{r4, r5, r6, pc}
  403bd8:	6823      	ldr	r3, [r4, #0]
  403bda:	2b00      	cmp	r3, #0
  403bdc:	d0fb      	beq.n	403bd6 <_read_r+0x1a>
  403bde:	6033      	str	r3, [r6, #0]
  403be0:	bd70      	pop	{r4, r5, r6, pc}
  403be2:	bf00      	nop
  403be4:	2000d064 	.word	0x2000d064
  403be8:	74727173 	.word	0x74727173
  403bec:	00000000 	.word	0x00000000

00403bf0 <_global_impure_ptr>:
  403bf0:	20000040                                @.. 

00403bf4 <_init>:
  403bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403bf6:	bf00      	nop
  403bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403bfa:	bc08      	pop	{r3}
  403bfc:	469e      	mov	lr, r3
  403bfe:	4770      	bx	lr

00403c00 <__init_array_start>:
  403c00:	00402d7d 	.word	0x00402d7d

00403c04 <__frame_dummy_init_array_entry>:
  403c04:	0040011d                                ..@.

00403c08 <_fini>:
  403c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403c0a:	bf00      	nop
  403c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403c0e:	bc08      	pop	{r3}
  403c10:	469e      	mov	lr, r3
  403c12:	4770      	bx	lr

00403c14 <__fini_array_start>:
  403c14:	004000f9 	.word	0x004000f9

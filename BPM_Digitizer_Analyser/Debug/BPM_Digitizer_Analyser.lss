
BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ab4  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000874  20000000  00403ab4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000c7d8  20000878  00404330  00020878  2**3
                  ALLOC
  3 .stack        00003000  2000d050  00410b08  00020878  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020874  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000208a2  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c41f  00000000  00000000  000208fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000420d  00000000  00000000  0003cd1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000054e3  00000000  00000000  00040f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b78  00000000  00000000  0004640a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b80  00000000  00000000  00046f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b8e0  00000000  00000000  00047b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010c5e  00000000  00000000  000633e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00066045  00000000  00000000  00074040  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002304  00000000  00000000  000da088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 00 01 20 2d 16 40 00 29 16 40 00 29 16 40 00     P.. -.@.).@.).@.
  400010:	29 16 40 00 29 16 40 00 29 16 40 00 00 00 00 00     ).@.).@.).@.....
	...
  40002c:	29 16 40 00 29 16 40 00 00 00 00 00 29 16 40 00     ).@.).@.....).@.
  40003c:	29 16 40 00 29 16 40 00 29 16 40 00 29 16 40 00     ).@.).@.).@.).@.
  40004c:	29 16 40 00 29 16 40 00 29 16 40 00 29 16 40 00     ).@.).@.).@.).@.
  40005c:	85 0c 40 00 29 16 40 00 29 16 40 00 29 16 40 00     ..@.).@.).@.).@.
  40006c:	29 16 40 00 29 16 40 00 29 16 40 00 c1 18 40 00     ).@.).@.).@...@.
  40007c:	29 16 40 00 29 16 40 00 29 16 40 00 29 16 40 00     ).@.).@.).@.).@.
  40008c:	29 16 40 00 29 16 40 00 29 16 40 00 39 1b 40 00     ).@.).@.).@.9.@.
  40009c:	29 16 40 00 29 16 40 00 29 16 40 00 29 16 40 00     ).@.).@.).@.).@.
  4000ac:	29 16 40 00 29 16 40 00 29 16 40 00 6d 12 40 00     ).@.).@.).@.m.@.
  4000bc:	81 12 40 00 29 16 40 00 19 1a 40 00 29 16 40 00     ..@.).@...@.).@.
  4000cc:	29 16 40 00 29 16 40 00 29 16 40 00 29 16 40 00     ).@.).@.).@.).@.
  4000dc:	29 16 40 00 29 16 40 00 29 16 40 00 29 16 40 00     ).@.).@.).@.).@.
  4000ec:	29 16 40 00 29 16 40 00 29 16 40 00                 ).@.).@.).@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000878 	.word	0x20000878
  400114:	00000000 	.word	0x00000000
  400118:	00403ab4 	.word	0x00403ab4

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00403ab4 	.word	0x00403ab4
  400158:	2000087c 	.word	0x2000087c
  40015c:	00403ab4 	.word	0x00403ab4
  400160:	00000000 	.word	0x00000000

00400164 <sample_average>:


/*	Compute population average/mean of the distribution (collector peak), which is a sample index*/

double sample_average(uint16_t start, uint16_t end) 
{
  400164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t sample_avg = 0;
	uint32_t total_frequency = 0;
	
	for (uint16_t i = start; i < end; i++)
  400166:	4288      	cmp	r0, r1
  400168:	d21c      	bcs.n	4001a4 <sample_average+0x40>
  40016a:	4603      	mov	r3, r0
  40016c:	4a0f      	ldr	r2, [pc, #60]	; (4001ac <sample_average+0x48>)
  40016e:	6815      	ldr	r5, [r2, #0]
  400170:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	{
		sample_avg += (uint32_t)algorithm_buffer[i]*i;
  400174:	2400      	movs	r4, #0
  400176:	4620      	mov	r0, r4
  400178:	f835 2b02 	ldrh.w	r2, [r5], #2
  40017c:	fb03 0002 	mla	r0, r3, r2, r0
		total_frequency += (uint32_t)algorithm_buffer[i];
  400180:	4414      	add	r4, r2
  400182:	3301      	adds	r3, #1
	for (uint16_t i = start; i < end; i++)
  400184:	b29a      	uxth	r2, r3
  400186:	4291      	cmp	r1, r2
  400188:	d8f6      	bhi.n	400178 <sample_average+0x14>
	}
			
	return (double)sample_avg/total_frequency;
  40018a:	4d09      	ldr	r5, [pc, #36]	; (4001b0 <sample_average+0x4c>)
  40018c:	47a8      	blx	r5
  40018e:	4606      	mov	r6, r0
  400190:	460f      	mov	r7, r1
  400192:	4620      	mov	r0, r4
  400194:	47a8      	blx	r5
  400196:	4602      	mov	r2, r0
  400198:	460b      	mov	r3, r1
  40019a:	4630      	mov	r0, r6
  40019c:	4639      	mov	r1, r7
  40019e:	4c05      	ldr	r4, [pc, #20]	; (4001b4 <sample_average+0x50>)
  4001a0:	47a0      	blx	r4
}
  4001a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t total_frequency = 0;
  4001a4:	2400      	movs	r4, #0
	uint32_t sample_avg = 0;
  4001a6:	4620      	mov	r0, r4
  4001a8:	e7ef      	b.n	40018a <sample_average+0x26>
  4001aa:	bf00      	nop
  4001ac:	20000024 	.word	0x20000024
  4001b0:	00402245 	.word	0x00402245
  4001b4:	00402585 	.word	0x00402585

004001b8 <find_max>:


/* Find the maximum of the BPM-80 data half cycle and return its index */

uint16_t find_max(uint16_t* halfcycle, uint16_t length)
{
  4001b8:	b470      	push	{r4, r5, r6}
	uint16_t maximum = 0;
	uint16_t max_index = 0;
									
	for (uint16_t i = 0; i < length; i++)
  4001ba:	460e      	mov	r6, r1
  4001bc:	b181      	cbz	r1, 4001e0 <find_max+0x28>
  4001be:	1e81      	subs	r1, r0, #2
  4001c0:	2300      	movs	r3, #0
  4001c2:	4618      	mov	r0, r3
  4001c4:	461c      	mov	r4, r3
  4001c6:	b29d      	uxth	r5, r3
	{
		if (halfcycle[i] > maximum) 
  4001c8:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  4001cc:	42a2      	cmp	r2, r4
  4001ce:	bf84      	itt	hi
  4001d0:	4628      	movhi	r0, r5
		{
			max_index = i;
			maximum = halfcycle[i];
  4001d2:	4614      	movhi	r4, r2
  4001d4:	3301      	adds	r3, #1
	for (uint16_t i = 0; i < length; i++)
  4001d6:	b29a      	uxth	r2, r3
  4001d8:	4296      	cmp	r6, r2
  4001da:	d8f4      	bhi.n	4001c6 <find_max+0xe>
		}
	}
	
	return max_index;
}
  4001dc:	bc70      	pop	{r4, r5, r6}
  4001de:	4770      	bx	lr
	uint16_t max_index = 0;
  4001e0:	4608      	mov	r0, r1
  4001e2:	e7fb      	b.n	4001dc <find_max+0x24>

004001e4 <sum>:
/* Find the sum of a window of samples*/

uint16_t sum(uint16_t start, uint16_t end)
{
	uint16_t result=0;
	for (uint16_t i=start; i< end; i++ )
  4001e4:	4288      	cmp	r0, r1
  4001e6:	d212      	bcs.n	40020e <sum+0x2a>
	{
		result+= algorithm_buffer[i];
  4001e8:	4b0a      	ldr	r3, [pc, #40]	; (400214 <sum+0x30>)
  4001ea:	681a      	ldr	r2, [r3, #0]
  4001ec:	eb02 0340 	add.w	r3, r2, r0, lsl #1
  4001f0:	3901      	subs	r1, #1
  4001f2:	1a09      	subs	r1, r1, r0
  4001f4:	3001      	adds	r0, #1
  4001f6:	fa10 f181 	uxtah	r1, r0, r1
  4001fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  4001fe:	2000      	movs	r0, #0
  400200:	f833 2b02 	ldrh.w	r2, [r3], #2
  400204:	4410      	add	r0, r2
  400206:	b280      	uxth	r0, r0
	for (uint16_t i=start; i< end; i++ )
  400208:	428b      	cmp	r3, r1
  40020a:	d1f9      	bne.n	400200 <sum+0x1c>
  40020c:	4770      	bx	lr
	uint16_t result=0;
  40020e:	2000      	movs	r0, #0
	}
	return result;
}
  400210:	4770      	bx	lr
  400212:	bf00      	nop
  400214:	20000024 	.word	0x20000024

00400218 <detect_peaks>:
/* Find beam peak locations and peak widths for X and Y using either the threshold or dispersion-based algorithm */
/* Returns an array of 6 elements : 1. peak position X  2. peak edge left X  3. peak edge right X 
									4. peak position Y  5. peak edge left Y  6. peak edge right Y */

void detect_peaks(uint16_t threshold)
{
  400218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40021c:	4605      	mov	r5, r0
	uint16_t peak1 = find_max(algorithm_buffer, half_cycle_length);
  40021e:	4b46      	ldr	r3, [pc, #280]	; (400338 <detect_peaks+0x120>)
  400220:	681c      	ldr	r4, [r3, #0]
  400222:	4b46      	ldr	r3, [pc, #280]	; (40033c <detect_peaks+0x124>)
  400224:	881e      	ldrh	r6, [r3, #0]
  400226:	4631      	mov	r1, r6
  400228:	4620      	mov	r0, r4
  40022a:	f8df 811c 	ldr.w	r8, [pc, #284]	; 400348 <detect_peaks+0x130>
  40022e:	47c0      	blx	r8
  400230:	4607      	mov	r7, r0
	uint16_t peak2 = half_cycle_length + find_max(algorithm_buffer + half_cycle_length, half_cycle_length);
  400232:	4631      	mov	r1, r6
  400234:	eb04 0046 	add.w	r0, r4, r6, lsl #1
  400238:	47c0      	blx	r8
  40023a:	4430      	add	r0, r6
  40023c:	b280      	uxth	r0, r0
	
	// Use peak1 and peak2 to find the 4 corner points of the beams, possibly combine with dispersion-based algorithm
		
	peak_location[0][cycle] = peak1;
  40023e:	4b40      	ldr	r3, [pc, #256]	; (400340 <detect_peaks+0x128>)
  400240:	881a      	ldrh	r2, [r3, #0]
  400242:	4b40      	ldr	r3, [pc, #256]	; (400344 <detect_peaks+0x12c>)
  400244:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
	peak_location[3][cycle] = peak2;
  400248:	f102 0130 	add.w	r1, r2, #48	; 0x30
  40024c:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	
	// find left corner of X peak
	
	for (uint16_t i = 0; i <= peak1; i++)
	{
		if(algorithm_buffer[peak1 - i] < threshold)
  400250:	4639      	mov	r1, r7
  400252:	f834 3017 	ldrh.w	r3, [r4, r7, lsl #1]
  400256:	42ab      	cmp	r3, r5
  400258:	d357      	bcc.n	40030a <detect_peaks+0xf2>
  40025a:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak1; i++)
  40025c:	3301      	adds	r3, #1
  40025e:	b29b      	uxth	r3, r3
  400260:	429f      	cmp	r7, r3
  400262:	d35e      	bcc.n	400322 <detect_peaks+0x10a>
		if(algorithm_buffer[peak1 - i] < threshold)
  400264:	eba1 0e03 	sub.w	lr, r1, r3
  400268:	f834 e01e 	ldrh.w	lr, [r4, lr, lsl #1]
  40026c:	45ae      	cmp	lr, r5
  40026e:	d2f5      	bcs.n	40025c <detect_peaks+0x44>
		{
			peak_location[1][cycle] = peak1-i;
  400270:	f102 0e10 	add.w	lr, r2, #16
  400274:	1afb      	subs	r3, r7, r3
  400276:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 400344 <detect_peaks+0x12c>
  40027a:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]
	}

	
	// find right corner of X peak
	
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40027e:	1bf6      	subs	r6, r6, r7
  400280:	d414      	bmi.n	4002ac <detect_peaks+0x94>
	{
		if(algorithm_buffer [peak1 + i] < threshold)
  400282:	f834 3017 	ldrh.w	r3, [r4, r7, lsl #1]
  400286:	42ab      	cmp	r3, r5
  400288:	d341      	bcc.n	40030e <detect_peaks+0xf6>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40028a:	2300      	movs	r3, #0
  40028c:	3301      	adds	r3, #1
  40028e:	b29b      	uxth	r3, r3
  400290:	42b3      	cmp	r3, r6
  400292:	dc0b      	bgt.n	4002ac <detect_peaks+0x94>
		if(algorithm_buffer [peak1 + i] < threshold)
  400294:	eb03 0e01 	add.w	lr, r3, r1
  400298:	f834 e01e 	ldrh.w	lr, [r4, lr, lsl #1]
  40029c:	45ae      	cmp	lr, r5
  40029e:	d2f5      	bcs.n	40028c <detect_peaks+0x74>
		{
			peak_location[2][cycle] = peak1 + i;
  4002a0:	f102 0120 	add.w	r1, r2, #32
  4002a4:	441f      	add	r7, r3
  4002a6:	4e27      	ldr	r6, [pc, #156]	; (400344 <detect_peaks+0x12c>)
  4002a8:	f826 7011 	strh.w	r7, [r6, r1, lsl #1]
	
	// find left corner of Y peak
	
	for (uint16_t i = 0; i <= peak2; i++)
	{
		if(algorithm_buffer[peak2 - i] < threshold)
  4002ac:	4601      	mov	r1, r0
  4002ae:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  4002b2:	42ab      	cmp	r3, r5
  4002b4:	d32d      	bcc.n	400312 <detect_peaks+0xfa>
  4002b6:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak2; i++)
  4002b8:	3301      	adds	r3, #1
  4002ba:	b29b      	uxth	r3, r3
  4002bc:	4298      	cmp	r0, r3
  4002be:	d333      	bcc.n	400328 <detect_peaks+0x110>
		if(algorithm_buffer[peak2 - i] < threshold)
  4002c0:	1ace      	subs	r6, r1, r3
  4002c2:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
  4002c6:	42ae      	cmp	r6, r5
  4002c8:	d2f6      	bcs.n	4002b8 <detect_peaks+0xa0>
		{
			peak_location[4][cycle] = peak2-i;
  4002ca:	f102 0640 	add.w	r6, r2, #64	; 0x40
  4002ce:	1ac3      	subs	r3, r0, r3
  4002d0:	4f1c      	ldr	r7, [pc, #112]	; (400344 <detect_peaks+0x12c>)
  4002d2:	f827 3016 	strh.w	r3, [r7, r6, lsl #1]
	
	
	
	// find right corner of Y peak
	
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  4002d6:	f5c0 5702 	rsb	r7, r0, #8320	; 0x2080
  4002da:	370e      	adds	r7, #14
  4002dc:	2f00      	cmp	r7, #0
  4002de:	db1a      	blt.n	400316 <detect_peaks+0xfe>
	{
		if(algorithm_buffer[peak2 + i] < threshold)
  4002e0:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  4002e4:	42ab      	cmp	r3, r5
  4002e6:	d318      	bcc.n	40031a <detect_peaks+0x102>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  4002e8:	2300      	movs	r3, #0
  4002ea:	3301      	adds	r3, #1
  4002ec:	b29b      	uxth	r3, r3
  4002ee:	42bb      	cmp	r3, r7
  4002f0:	dc15      	bgt.n	40031e <detect_peaks+0x106>
		if(algorithm_buffer[peak2 + i] < threshold)
  4002f2:	185e      	adds	r6, r3, r1
  4002f4:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
  4002f8:	42ae      	cmp	r6, r5
  4002fa:	d2f6      	bcs.n	4002ea <detect_peaks+0xd2>
		{
			peak_location[5][cycle] = peak2 + i;
  4002fc:	3250      	adds	r2, #80	; 0x50
  4002fe:	4403      	add	r3, r0
  400300:	4910      	ldr	r1, [pc, #64]	; (400344 <detect_peaks+0x12c>)
  400302:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			break;
  400306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= peak1; i++)
  40030a:	2300      	movs	r3, #0
  40030c:	e7b0      	b.n	400270 <detect_peaks+0x58>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40030e:	2300      	movs	r3, #0
  400310:	e7c6      	b.n	4002a0 <detect_peaks+0x88>
	for (uint16_t i = 0; i <= peak2; i++)
  400312:	2300      	movs	r3, #0
  400314:	e7d9      	b.n	4002ca <detect_peaks+0xb2>
  400316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  40031a:	2300      	movs	r3, #0
  40031c:	e7ee      	b.n	4002fc <detect_peaks+0xe4>
  40031e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  400322:	1bf6      	subs	r6, r6, r7
  400324:	d5b1      	bpl.n	40028a <detect_peaks+0x72>
  400326:	e7c1      	b.n	4002ac <detect_peaks+0x94>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  400328:	f5c0 5702 	rsb	r7, r0, #8320	; 0x2080
  40032c:	370e      	adds	r7, #14
  40032e:	2f00      	cmp	r7, #0
  400330:	dada      	bge.n	4002e8 <detect_peaks+0xd0>
  400332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400336:	bf00      	nop
  400338:	20000024 	.word	0x20000024
  40033c:	20000004 	.word	0x20000004
  400340:	2000093a 	.word	0x2000093a
  400344:	2000097c 	.word	0x2000097c
  400348:	004001b9 	.word	0x004001b9

0040034c <compute_beam_intensity>:
/* Compute beam intensity of a cycle in X and Y cross section */
/* Takes as input the borders of both peaks*/
/* Outputs beam intensity of X and Y cross-section, so that higher level data representation can choose how to combine the values*/

void compute_beam_intensity(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right)
{
  40034c:	b4f0      	push	{r4, r5, r6, r7}
	
	beam_intensity[0][cycle] = 0;
  40034e:	4c1d      	ldr	r4, [pc, #116]	; (4003c4 <compute_beam_intensity+0x78>)
  400350:	8824      	ldrh	r4, [r4, #0]
  400352:	4d1d      	ldr	r5, [pc, #116]	; (4003c8 <compute_beam_intensity+0x7c>)
  400354:	2600      	movs	r6, #0
  400356:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
	beam_intensity[1][cycle] = 0;
  40035a:	f104 0710 	add.w	r7, r4, #16
  40035e:	f845 6027 	str.w	r6, [r5, r7, lsl #2]
	
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  400362:	4288      	cmp	r0, r1
  400364:	d214      	bcs.n	400390 <compute_beam_intensity+0x44>
	{
		beam_intensity[0][cycle] += (uint32_t)algorithm_buffer[i];
  400366:	4d19      	ldr	r5, [pc, #100]	; (4003cc <compute_beam_intensity+0x80>)
  400368:	682f      	ldr	r7, [r5, #0]
  40036a:	eb07 0540 	add.w	r5, r7, r0, lsl #1
  40036e:	3901      	subs	r1, #1
  400370:	1a09      	subs	r1, r1, r0
  400372:	3001      	adds	r0, #1
  400374:	fa10 f181 	uxtah	r1, r0, r1
  400378:	eb07 0741 	add.w	r7, r7, r1, lsl #1
  40037c:	4812      	ldr	r0, [pc, #72]	; (4003c8 <compute_beam_intensity+0x7c>)
  40037e:	f835 6b02 	ldrh.w	r6, [r5], #2
  400382:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
  400386:	4431      	add	r1, r6
  400388:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  40038c:	42bd      	cmp	r5, r7
  40038e:	d1f6      	bne.n	40037e <compute_beam_intensity+0x32>
	}
	
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  400390:	429a      	cmp	r2, r3
  400392:	d215      	bcs.n	4003c0 <compute_beam_intensity+0x74>
	{
		beam_intensity[1][cycle] += (uint32_t)algorithm_buffer[i];
  400394:	490d      	ldr	r1, [pc, #52]	; (4003cc <compute_beam_intensity+0x80>)
  400396:	680d      	ldr	r5, [r1, #0]
  400398:	eb05 0142 	add.w	r1, r5, r2, lsl #1
  40039c:	3b01      	subs	r3, #1
  40039e:	1a9b      	subs	r3, r3, r2
  4003a0:	3201      	adds	r2, #1
  4003a2:	fa12 f383 	uxtah	r3, r2, r3
  4003a6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
  4003aa:	4a07      	ldr	r2, [pc, #28]	; (4003c8 <compute_beam_intensity+0x7c>)
  4003ac:	3410      	adds	r4, #16
  4003ae:	f831 0b02 	ldrh.w	r0, [r1], #2
  4003b2:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  4003b6:	4403      	add	r3, r0
  4003b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  4003bc:	42a9      	cmp	r1, r5
  4003be:	d1f6      	bne.n	4003ae <compute_beam_intensity+0x62>
	}
	
	
}
  4003c0:	bcf0      	pop	{r4, r5, r6, r7}
  4003c2:	4770      	bx	lr
  4003c4:	2000093a 	.word	0x2000093a
  4003c8:	20000894 	.word	0x20000894
  4003cc:	20000024 	.word	0x20000024

004003d0 <compute_fwhm>:


/* Compute FWHM X and Y (based on variance in this case, assumes more or less gaussian profile */

void compute_fwhm(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right,  uint16_t peak1_max, uint16_t peak2_max)
{
  4003d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003d4:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  4003d8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
		
	
	/* In general, for all beam types, requires 2 extra arguments */
		
		
		uint16_t half_max = algorithm_buffer[peak1_max]/2;
  4003dc:	4e40      	ldr	r6, [pc, #256]	; (4004e0 <compute_fwhm+0x110>)
  4003de:	f8d6 8000 	ldr.w	r8, [r6]
  4003e2:	eb08 0645 	add.w	r6, r8, r5, lsl #1
  4003e6:	f838 7015 	ldrh.w	r7, [r8, r5, lsl #1]
  4003ea:	087f      	lsrs	r7, r7, #1
		
		uint16_t left_hm = 1000;
		uint16_t left_hm_index = 0;
		
		for (uint16_t i = peak1_max; i > peak1_left; i--)
  4003ec:	4285      	cmp	r5, r0
  4003ee:	d96c      	bls.n	4004ca <compute_fwhm+0xfa>
  4003f0:	46b2      	mov	sl, r6
  4003f2:	46a9      	mov	r9, r5
  4003f4:	f04f 0c00 	mov.w	ip, #0
  4003f8:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		{
			uint16_t gap = abs(algorithm_buffer[i] - half_max);
  4003fc:	f83a e902 	ldrh.w	lr, [sl], #-2
  400400:	ebae 0e07 	sub.w	lr, lr, r7
  400404:	f1be 0f00 	cmp.w	lr, #0
  400408:	bfb8      	it	lt
  40040a:	f1ce 0e00 	rsblt	lr, lr, #0
  40040e:	fa1f fe8e 	uxth.w	lr, lr
			if (gap <= left_hm)
  400412:	45de      	cmp	lr, fp
  400414:	bf9c      	itt	ls
  400416:	46cc      	movls	ip, r9
			{
				left_hm = gap;
  400418:	46f3      	movls	fp, lr
		for (uint16_t i = peak1_max; i > peak1_left; i--)
  40041a:	f109 39ff 	add.w	r9, r9, #4294967295
  40041e:	fa1f f989 	uxth.w	r9, r9
  400422:	4548      	cmp	r0, r9
  400424:	d1ea      	bne.n	4003fc <compute_fwhm+0x2c>
		}
		
		uint16_t right_hm = 1000;
		uint16_t right_hm_index = 0;
		
		for (uint16_t i = peak1_max; i < peak1_right; i++)
  400426:	428d      	cmp	r5, r1
  400428:	d252      	bcs.n	4004d0 <compute_fwhm+0x100>
  40042a:	f04f 0e00 	mov.w	lr, #0
  40042e:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		{
			uint16_t gap = abs(algorithm_buffer[i] - half_max);
  400432:	f836 0b02 	ldrh.w	r0, [r6], #2
  400436:	1bc0      	subs	r0, r0, r7
  400438:	2800      	cmp	r0, #0
  40043a:	bfb8      	it	lt
  40043c:	4240      	neglt	r0, r0
  40043e:	b280      	uxth	r0, r0
			if (gap <= right_hm)
  400440:	4548      	cmp	r0, r9
  400442:	bf9c      	itt	ls
  400444:	46ae      	movls	lr, r5
			{
				right_hm = gap;
  400446:	4681      	movls	r9, r0
		for (uint16_t i = peak1_max; i < peak1_right; i++)
  400448:	3501      	adds	r5, #1
  40044a:	b2ad      	uxth	r5, r5
  40044c:	42a9      	cmp	r1, r5
  40044e:	d1f0      	bne.n	400432 <compute_fwhm+0x62>
				right_hm_index = i;
			}
		}
		
		fwhm[0][cycle] = right_hm_index - left_hm_index;
  400450:	4924      	ldr	r1, [pc, #144]	; (4004e4 <compute_fwhm+0x114>)
  400452:	8808      	ldrh	r0, [r1, #0]
  400454:	ebae 0e0c 	sub.w	lr, lr, ip
  400458:	4923      	ldr	r1, [pc, #140]	; (4004e8 <compute_fwhm+0x118>)
  40045a:	f821 e010 	strh.w	lr, [r1, r0, lsl #1]
		
		half_max = algorithm_buffer[peak2_max]/2;
  40045e:	eb08 0e44 	add.w	lr, r8, r4, lsl #1
  400462:	f838 5014 	ldrh.w	r5, [r8, r4, lsl #1]
  400466:	086d      	lsrs	r5, r5, #1
		
		left_hm = 1000;
		left_hm_index = 0;
		
		for (uint16_t i = peak2_max; i > peak2_left; i--)
  400468:	4294      	cmp	r4, r2
  40046a:	d934      	bls.n	4004d6 <compute_fwhm+0x106>
  40046c:	46f4      	mov	ip, lr
  40046e:	4627      	mov	r7, r4
  400470:	2600      	movs	r6, #0
  400472:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		{
			uint16_t gap = abs(algorithm_buffer[i] - half_max);
  400476:	f83c 1902 	ldrh.w	r1, [ip], #-2
  40047a:	1b49      	subs	r1, r1, r5
  40047c:	2900      	cmp	r1, #0
  40047e:	bfb8      	it	lt
  400480:	4249      	neglt	r1, r1
  400482:	b289      	uxth	r1, r1
			if (gap <= left_hm)
  400484:	4541      	cmp	r1, r8
  400486:	bf9c      	itt	ls
  400488:	463e      	movls	r6, r7
			{
				left_hm = gap;
  40048a:	4688      	movls	r8, r1
		for (uint16_t i = peak2_max; i > peak2_left; i--)
  40048c:	3f01      	subs	r7, #1
  40048e:	b2bf      	uxth	r7, r7
  400490:	42ba      	cmp	r2, r7
  400492:	d1f0      	bne.n	400476 <compute_fwhm+0xa6>
		}
		
		right_hm = 1000;
		right_hm_index = 0;
		
		for (uint16_t i = peak2_max; i < peak2_right; i++)
  400494:	429c      	cmp	r4, r3
  400496:	d220      	bcs.n	4004da <compute_fwhm+0x10a>
  400498:	2700      	movs	r7, #0
  40049a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		{
			uint16_t gap = abs(algorithm_buffer[i] - half_max);
  40049e:	f83e 2b02 	ldrh.w	r2, [lr], #2
  4004a2:	1b52      	subs	r2, r2, r5
  4004a4:	2a00      	cmp	r2, #0
  4004a6:	bfb8      	it	lt
  4004a8:	4252      	neglt	r2, r2
  4004aa:	b292      	uxth	r2, r2
			if (gap <= right_hm)
  4004ac:	428a      	cmp	r2, r1
  4004ae:	bf9c      	itt	ls
  4004b0:	4627      	movls	r7, r4
			{
				right_hm = gap;
  4004b2:	4611      	movls	r1, r2
		for (uint16_t i = peak2_max; i < peak2_right; i++)
  4004b4:	3401      	adds	r4, #1
  4004b6:	b2a4      	uxth	r4, r4
  4004b8:	42a3      	cmp	r3, r4
  4004ba:	d1f0      	bne.n	40049e <compute_fwhm+0xce>
				right_hm_index = i;
				
			}
		}
		
		fwhm[1][cycle] = right_hm_index - left_hm_index;
  4004bc:	3010      	adds	r0, #16
  4004be:	1bbe      	subs	r6, r7, r6
  4004c0:	4b09      	ldr	r3, [pc, #36]	; (4004e8 <compute_fwhm+0x118>)
  4004c2:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
  4004c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint16_t left_hm_index = 0;
  4004ca:	f04f 0c00 	mov.w	ip, #0
  4004ce:	e7aa      	b.n	400426 <compute_fwhm+0x56>
		for (uint16_t i = peak1_max; i < peak1_right; i++)
  4004d0:	f04f 0e00 	mov.w	lr, #0
  4004d4:	e7bc      	b.n	400450 <compute_fwhm+0x80>
		left_hm_index = 0;
  4004d6:	2600      	movs	r6, #0
  4004d8:	e7dc      	b.n	400494 <compute_fwhm+0xc4>
		for (uint16_t i = peak2_max; i < peak2_right; i++)
  4004da:	2700      	movs	r7, #0
  4004dc:	e7ee      	b.n	4004bc <compute_fwhm+0xec>
  4004de:	bf00      	nop
  4004e0:	20000024 	.word	0x20000024
  4004e4:	2000093a 	.word	0x2000093a
  4004e8:	2000093c 	.word	0x2000093c
  4004ec:	00000000 	.word	0x00000000

004004f0 <compute_skewness>:


/* Compute skewness of the beam  X and Y */

void compute_skewness(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right)
{
  4004f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004f4:	b093      	sub	sp, #76	; 0x4c
  4004f6:	4683      	mov	fp, r0
  4004f8:	460d      	mov	r5, r1
  4004fa:	4614      	mov	r4, r2
  4004fc:	920e      	str	r2, [sp, #56]	; 0x38
  4004fe:	461f      	mov	r7, r3
  400500:	930f      	str	r3, [sp, #60]	; 0x3c
	
	double first_peak_mean  =  sample_average(peak1_left, peak1_right);
  400502:	4e85      	ldr	r6, [pc, #532]	; (400718 <compute_skewness+0x228>)
  400504:	47b0      	blx	r6
  400506:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	double second_peak_mean =  sample_average(peak2_left, peak2_right);
  40050a:	4639      	mov	r1, r7
  40050c:	4620      	mov	r0, r4
  40050e:	47b0      	blx	r6
  400510:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	
	double third_central = 0;
	double second_central = 0;
	int sum1 = sum(peak1_left,peak1_right);
  400514:	4629      	mov	r1, r5
  400516:	4658      	mov	r0, fp
  400518:	4e80      	ldr	r6, [pc, #512]	; (40071c <compute_skewness+0x22c>)
  40051a:	47b0      	blx	r6
  40051c:	9010      	str	r0, [sp, #64]	; 0x40
	int sum2 = sum(peak2_left,peak2_right);
  40051e:	4639      	mov	r1, r7
  400520:	4620      	mov	r0, r4
  400522:	47b0      	blx	r6
  400524:	9011      	str	r0, [sp, #68]	; 0x44
	
	for (int i=peak1_left;i<peak1_right;i++ )
  400526:	45ab      	cmp	fp, r5
  400528:	f280 80e1 	bge.w	4006ee <compute_skewness+0x1fe>
  40052c:	46d8      	mov	r8, fp
  40052e:	46a9      	mov	r9, r5
  400530:	4b7b      	ldr	r3, [pc, #492]	; (400720 <compute_skewness+0x230>)
  400532:	681b      	ldr	r3, [r3, #0]
  400534:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
	{
		
		double sample = (double) algorithm_buffer[i];
  400538:	ed9f 7b75 	vldr	d7, [pc, #468]	; 400710 <compute_skewness+0x220>
  40053c:	ed8d 7b02 	vstr	d7, [sp, #8]
  400540:	ed8d 7b04 	vstr	d7, [sp, #16]
  400544:	4f77      	ldr	r7, [pc, #476]	; (400724 <compute_skewness+0x234>)
		double spread = (double)i-first_peak_mean;
  400546:	4e78      	ldr	r6, [pc, #480]	; (400728 <compute_skewness+0x238>)
  400548:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 400748 <compute_skewness+0x258>
		third_central += spread*spread*spread*sample;
  40054c:	4d77      	ldr	r5, [pc, #476]	; (40072c <compute_skewness+0x23c>)
  40054e:	4c78      	ldr	r4, [pc, #480]	; (400730 <compute_skewness+0x240>)
		double sample = (double) algorithm_buffer[i];
  400550:	f83b 0b02 	ldrh.w	r0, [fp], #2
  400554:	47b8      	blx	r7
  400556:	e9cd 0100 	strd	r0, r1, [sp]
		double spread = (double)i-first_peak_mean;
  40055a:	4640      	mov	r0, r8
  40055c:	47b0      	blx	r6
  40055e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  400562:	47d0      	blx	sl
  400564:	4602      	mov	r2, r0
  400566:	460b      	mov	r3, r1
		third_central += spread*spread*spread*sample;
  400568:	e9cd 2306 	strd	r2, r3, [sp, #24]
  40056c:	47a8      	blx	r5
  40056e:	4602      	mov	r2, r0
  400570:	460b      	mov	r3, r1
  400572:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40057a:	47a8      	blx	r5
  40057c:	e9dd 2300 	ldrd	r2, r3, [sp]
  400580:	47a8      	blx	r5
  400582:	4602      	mov	r2, r0
  400584:	460b      	mov	r3, r1
  400586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40058a:	47a0      	blx	r4
  40058c:	e9cd 0104 	strd	r0, r1, [sp, #16]
		second_central += spread*spread*sample;
  400590:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  400594:	e9dd 0100 	ldrd	r0, r1, [sp]
  400598:	47a8      	blx	r5
  40059a:	4602      	mov	r2, r0
  40059c:	460b      	mov	r3, r1
  40059e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4005a2:	47a0      	blx	r4
  4005a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
	for (int i=peak1_left;i<peak1_right;i++ )
  4005a8:	f108 0801 	add.w	r8, r8, #1
  4005ac:	45c8      	cmp	r8, r9
  4005ae:	d1cf      	bne.n	400550 <compute_skewness+0x60>
		
	}
	
	third_central = third_central/sum1;
  4005b0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4005b2:	4b5d      	ldr	r3, [pc, #372]	; (400728 <compute_skewness+0x238>)
  4005b4:	4798      	blx	r3
  4005b6:	4604      	mov	r4, r0
  4005b8:	460d      	mov	r5, r1
  4005ba:	4e5e      	ldr	r6, [pc, #376]	; (400734 <compute_skewness+0x244>)
  4005bc:	4602      	mov	r2, r0
  4005be:	460b      	mov	r3, r1
  4005c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4005c4:	47b0      	blx	r6
  4005c6:	4680      	mov	r8, r0
  4005c8:	4689      	mov	r9, r1
	second_central = second_central/sum1;
  4005ca:	4622      	mov	r2, r4
  4005cc:	462b      	mov	r3, r5
  4005ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4005d2:	47b0      	blx	r6
  4005d4:	4604      	mov	r4, r0
  4005d6:	460d      	mov	r5, r1
	
	double denominator = sqrt(second_central*second_central*second_central);
  4005d8:	4f54      	ldr	r7, [pc, #336]	; (40072c <compute_skewness+0x23c>)
  4005da:	4602      	mov	r2, r0
  4005dc:	460b      	mov	r3, r1
  4005de:	47b8      	blx	r7
  4005e0:	4622      	mov	r2, r4
  4005e2:	462b      	mov	r3, r5
  4005e4:	47b8      	blx	r7
  4005e6:	4b54      	ldr	r3, [pc, #336]	; (400738 <compute_skewness+0x248>)
  4005e8:	4798      	blx	r3
	third_central = third_central/denominator;
	
	skewness[0][cycle] = third_central;
  4005ea:	4b54      	ldr	r3, [pc, #336]	; (40073c <compute_skewness+0x24c>)
  4005ec:	881b      	ldrh	r3, [r3, #0]
  4005ee:	4c54      	ldr	r4, [pc, #336]	; (400740 <compute_skewness+0x250>)
  4005f0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
	third_central = third_central/denominator;
  4005f4:	4602      	mov	r2, r0
  4005f6:	460b      	mov	r3, r1
  4005f8:	4640      	mov	r0, r8
  4005fa:	4649      	mov	r1, r9
  4005fc:	47b0      	blx	r6
	skewness[0][cycle] = third_central;
  4005fe:	4b51      	ldr	r3, [pc, #324]	; (400744 <compute_skewness+0x254>)
  400600:	4798      	blx	r3
  400602:	6020      	str	r0, [r4, #0]
	
	third_central = 0;
	second_central = 0;
	
	for (int i=peak2_left;i<peak2_right;i++ )
  400604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  400606:	4690      	mov	r8, r2
  400608:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40060a:	4689      	mov	r9, r1
  40060c:	428a      	cmp	r2, r1
  40060e:	da75      	bge.n	4006fc <compute_skewness+0x20c>
  400610:	4b43      	ldr	r3, [pc, #268]	; (400720 <compute_skewness+0x230>)
  400612:	681b      	ldr	r3, [r3, #0]
  400614:	eb03 0b42 	add.w	fp, r3, r2, lsl #1
	{
		double sample = (double) algorithm_buffer[i];
  400618:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 400710 <compute_skewness+0x220>
  40061c:	ed8d 7b02 	vstr	d7, [sp, #8]
  400620:	ed8d 7b04 	vstr	d7, [sp, #16]
  400624:	4f3f      	ldr	r7, [pc, #252]	; (400724 <compute_skewness+0x234>)
		double spread = (double)i-second_peak_mean;
  400626:	4e40      	ldr	r6, [pc, #256]	; (400728 <compute_skewness+0x238>)
  400628:	f8df a11c 	ldr.w	sl, [pc, #284]	; 400748 <compute_skewness+0x258>
		third_central += spread*spread*spread*sample;
  40062c:	4d3f      	ldr	r5, [pc, #252]	; (40072c <compute_skewness+0x23c>)
  40062e:	4c40      	ldr	r4, [pc, #256]	; (400730 <compute_skewness+0x240>)
		double sample = (double) algorithm_buffer[i];
  400630:	f83b 0b02 	ldrh.w	r0, [fp], #2
  400634:	47b8      	blx	r7
  400636:	e9cd 0100 	strd	r0, r1, [sp]
		double spread = (double)i-second_peak_mean;
  40063a:	4640      	mov	r0, r8
  40063c:	47b0      	blx	r6
  40063e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  400642:	47d0      	blx	sl
  400644:	4602      	mov	r2, r0
  400646:	460b      	mov	r3, r1
		third_central += spread*spread*spread*sample;
  400648:	e9cd 2306 	strd	r2, r3, [sp, #24]
  40064c:	47a8      	blx	r5
  40064e:	4602      	mov	r2, r0
  400650:	460b      	mov	r3, r1
  400652:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40065a:	47a8      	blx	r5
  40065c:	e9dd 2300 	ldrd	r2, r3, [sp]
  400660:	47a8      	blx	r5
  400662:	4602      	mov	r2, r0
  400664:	460b      	mov	r3, r1
  400666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40066a:	47a0      	blx	r4
  40066c:	e9cd 0104 	strd	r0, r1, [sp, #16]
		second_central += spread*spread*sample;
  400670:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  400674:	e9dd 0100 	ldrd	r0, r1, [sp]
  400678:	47a8      	blx	r5
  40067a:	4602      	mov	r2, r0
  40067c:	460b      	mov	r3, r1
  40067e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400682:	47a0      	blx	r4
  400684:	e9cd 0102 	strd	r0, r1, [sp, #8]
	for (int i=peak2_left;i<peak2_right;i++ )
  400688:	f108 0801 	add.w	r8, r8, #1
  40068c:	45c8      	cmp	r8, r9
  40068e:	d1cf      	bne.n	400630 <compute_skewness+0x140>
	}
	
	third_central = third_central/sum2;
  400690:	9811      	ldr	r0, [sp, #68]	; 0x44
  400692:	4b25      	ldr	r3, [pc, #148]	; (400728 <compute_skewness+0x238>)
  400694:	4798      	blx	r3
  400696:	4604      	mov	r4, r0
  400698:	460d      	mov	r5, r1
  40069a:	4e26      	ldr	r6, [pc, #152]	; (400734 <compute_skewness+0x244>)
  40069c:	4602      	mov	r2, r0
  40069e:	460b      	mov	r3, r1
  4006a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4006a4:	47b0      	blx	r6
  4006a6:	4680      	mov	r8, r0
  4006a8:	4689      	mov	r9, r1
	second_central = second_central/sum2;
  4006aa:	4622      	mov	r2, r4
  4006ac:	462b      	mov	r3, r5
  4006ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4006b2:	47b0      	blx	r6
  4006b4:	4604      	mov	r4, r0
  4006b6:	460d      	mov	r5, r1
	
	denominator = sqrt(second_central*second_central*second_central);
  4006b8:	4f1c      	ldr	r7, [pc, #112]	; (40072c <compute_skewness+0x23c>)
  4006ba:	4602      	mov	r2, r0
  4006bc:	460b      	mov	r3, r1
  4006be:	47b8      	blx	r7
  4006c0:	4622      	mov	r2, r4
  4006c2:	462b      	mov	r3, r5
  4006c4:	47b8      	blx	r7
  4006c6:	4b1c      	ldr	r3, [pc, #112]	; (400738 <compute_skewness+0x248>)
  4006c8:	4798      	blx	r3
	third_central = third_central/denominator;
	
	skewness[1][cycle] = third_central;
  4006ca:	4b1c      	ldr	r3, [pc, #112]	; (40073c <compute_skewness+0x24c>)
  4006cc:	881c      	ldrh	r4, [r3, #0]
  4006ce:	f104 0310 	add.w	r3, r4, #16
  4006d2:	4c1b      	ldr	r4, [pc, #108]	; (400740 <compute_skewness+0x250>)
  4006d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
	third_central = third_central/denominator;
  4006d8:	4602      	mov	r2, r0
  4006da:	460b      	mov	r3, r1
  4006dc:	4640      	mov	r0, r8
  4006de:	4649      	mov	r1, r9
  4006e0:	47b0      	blx	r6
	skewness[1][cycle] = third_central;
  4006e2:	4b18      	ldr	r3, [pc, #96]	; (400744 <compute_skewness+0x254>)
  4006e4:	4798      	blx	r3
  4006e6:	6020      	str	r0, [r4, #0]
	
	
} 
  4006e8:	b013      	add	sp, #76	; 0x4c
  4006ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double second_central = 0;
  4006ee:	ed9f 7b08 	vldr	d7, [pc, #32]	; 400710 <compute_skewness+0x220>
  4006f2:	ed8d 7b02 	vstr	d7, [sp, #8]
	double third_central = 0;
  4006f6:	ed8d 7b04 	vstr	d7, [sp, #16]
  4006fa:	e759      	b.n	4005b0 <compute_skewness+0xc0>
	second_central = 0;
  4006fc:	ed9f 7b04 	vldr	d7, [pc, #16]	; 400710 <compute_skewness+0x220>
  400700:	ed8d 7b02 	vstr	d7, [sp, #8]
	third_central = 0;
  400704:	ed8d 7b04 	vstr	d7, [sp, #16]
  400708:	e7c2      	b.n	400690 <compute_skewness+0x1a0>
  40070a:	bf00      	nop
  40070c:	f3af 8000 	nop.w
	...
  400718:	00400165 	.word	0x00400165
  40071c:	004001e5 	.word	0x004001e5
  400720:	20000024 	.word	0x20000024
  400724:	00402245 	.word	0x00402245
  400728:	00402265 	.word	0x00402265
  40072c:	00402331 	.word	0x00402331
  400730:	00401fcd 	.word	0x00401fcd
  400734:	00402585 	.word	0x00402585
  400738:	00401d89 	.word	0x00401d89
  40073c:	2000093a 	.word	0x2000093a
  400740:	20000a5c 	.word	0x20000a5c
  400744:	004028e1 	.word	0x004028e1
  400748:	00401fc9 	.word	0x00401fc9

0040074c <compute_beam_parameters>:


/* Compute the parameters (to be called at the end of each cycle) and put a delimiter in front that is certain to be different than parameter values*/

void compute_beam_parameters()
{
  40074c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40074e:	b083      	sub	sp, #12
	detect_peaks(20);	// threshold of 20 (16 mv), might be made user-configurable later
  400750:	2014      	movs	r0, #20
  400752:	4b28      	ldr	r3, [pc, #160]	; (4007f4 <compute_beam_parameters+0xa8>)
  400754:	4798      	blx	r3
	compute_beam_intensity(peak_location[1][cycle], peak_location[2][cycle], peak_location[4][cycle], peak_location[5][cycle]);
  400756:	4e28      	ldr	r6, [pc, #160]	; (4007f8 <compute_beam_parameters+0xac>)
  400758:	8833      	ldrh	r3, [r6, #0]
  40075a:	4c28      	ldr	r4, [pc, #160]	; (4007fc <compute_beam_parameters+0xb0>)
  40075c:	f103 0550 	add.w	r5, r3, #80	; 0x50
  400760:	f103 0240 	add.w	r2, r3, #64	; 0x40
  400764:	f103 0120 	add.w	r1, r3, #32
  400768:	f103 0010 	add.w	r0, r3, #16
  40076c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
  400770:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  400774:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  400778:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
  40077c:	4d20      	ldr	r5, [pc, #128]	; (400800 <compute_beam_parameters+0xb4>)
  40077e:	47a8      	blx	r5
	compute_fwhm(peak_location[1][cycle], peak_location[2][cycle], peak_location[4][cycle], peak_location[5][cycle], peak_location[0][cycle], peak_location[3][cycle]);
  400780:	8835      	ldrh	r5, [r6, #0]
  400782:	f105 0350 	add.w	r3, r5, #80	; 0x50
  400786:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
  40078a:	f105 0240 	add.w	r2, r5, #64	; 0x40
  40078e:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  400792:	f105 0120 	add.w	r1, r5, #32
  400796:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  40079a:	f105 0010 	add.w	r0, r5, #16
  40079e:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
  4007a2:	f105 0730 	add.w	r7, r5, #48	; 0x30
  4007a6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
  4007aa:	9701      	str	r7, [sp, #4]
  4007ac:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
  4007b0:	9500      	str	r5, [sp, #0]
  4007b2:	4d14      	ldr	r5, [pc, #80]	; (400804 <compute_beam_parameters+0xb8>)
  4007b4:	47a8      	blx	r5
	compute_skewness(peak_location[1][cycle], peak_location[2][cycle], peak_location[4][cycle], peak_location[5][cycle]);
  4007b6:	8833      	ldrh	r3, [r6, #0]
  4007b8:	f103 0550 	add.w	r5, r3, #80	; 0x50
  4007bc:	f103 0240 	add.w	r2, r3, #64	; 0x40
  4007c0:	f103 0120 	add.w	r1, r3, #32
  4007c4:	f103 0010 	add.w	r0, r3, #16
  4007c8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
  4007cc:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  4007d0:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  4007d4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
  4007d8:	4c0b      	ldr	r4, [pc, #44]	; (400808 <compute_beam_parameters+0xbc>)
  4007da:	47a0      	blx	r4
	//compute_skewness(peak_location[1][cycle], peak_location[2][cycle], peak_location[4][cycle], peak_location[5][cycle], peak_location[0][cycle], peak_location[3][cycle]);
	
	cycle++;
  4007dc:	8833      	ldrh	r3, [r6, #0]
  4007de:	3301      	adds	r3, #1
  4007e0:	b29b      	uxth	r3, r3
	if (cycle > 15) cycle = 0;
  4007e2:	2b0f      	cmp	r3, #15
  4007e4:	d904      	bls.n	4007f0 <compute_beam_parameters+0xa4>
  4007e6:	2200      	movs	r2, #0
  4007e8:	4b03      	ldr	r3, [pc, #12]	; (4007f8 <compute_beam_parameters+0xac>)
  4007ea:	801a      	strh	r2, [r3, #0]
	
	
}
  4007ec:	b003      	add	sp, #12
  4007ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cycle++;
  4007f0:	8033      	strh	r3, [r6, #0]
  4007f2:	e7fb      	b.n	4007ec <compute_beam_parameters+0xa0>
  4007f4:	00400219 	.word	0x00400219
  4007f8:	2000093a 	.word	0x2000093a
  4007fc:	2000097c 	.word	0x2000097c
  400800:	0040034d 	.word	0x0040034d
  400804:	004003d1 	.word	0x004003d1
  400808:	004004f1 	.word	0x004004f1
  40080c:	00000000 	.word	0x00000000

00400810 <compute_avgd_parameters>:

void compute_avgd_parameters()
{
  400810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400814:	ed2d 8b06 	vpush	{d8-d10}
  400818:	4873      	ldr	r0, [pc, #460]	; (4009e8 <compute_avgd_parameters+0x1d8>)
  40081a:	2400      	movs	r4, #0
  40081c:	4e73      	ldr	r6, [pc, #460]	; (4009ec <compute_avgd_parameters+0x1dc>)
	
	for (uint8_t i=0; i<6;i++)
	{		
		average_peak_info = 0;
		for (uint8_t j = 0; j < 16; j++) average_peak_info += peak_location[i][j];
		peakLocationPtr[i]= (uint16_t)(average_peak_info/16);
  40081e:	4d74      	ldr	r5, [pc, #464]	; (4009f0 <compute_avgd_parameters+0x1e0>)
  400820:	f1a0 0320 	sub.w	r3, r0, #32
{
  400824:	2200      	movs	r2, #0
		for (uint8_t j = 0; j < 16; j++) average_peak_info += peak_location[i][j];
  400826:	f833 1f02 	ldrh.w	r1, [r3, #2]!
  40082a:	440a      	add	r2, r1
  40082c:	4283      	cmp	r3, r0
  40082e:	d1fa      	bne.n	400826 <compute_avgd_parameters+0x16>
  400830:	6032      	str	r2, [r6, #0]
		peakLocationPtr[i]= (uint16_t)(average_peak_info/16);
  400832:	0912      	lsrs	r2, r2, #4
  400834:	682b      	ldr	r3, [r5, #0]
  400836:	531a      	strh	r2, [r3, r4]
  400838:	3402      	adds	r4, #2
  40083a:	3020      	adds	r0, #32
	for (uint8_t i=0; i<6;i++)
  40083c:	2c0c      	cmp	r4, #12
  40083e:	d1ef      	bne.n	400820 <compute_avgd_parameters+0x10>
  400840:	486c      	ldr	r0, [pc, #432]	; (4009f4 <compute_avgd_parameters+0x1e4>)
  400842:	1f02      	subs	r2, r0, #4
  400844:	303c      	adds	r0, #60	; 0x3c
  400846:	2300      	movs	r3, #0
	
	
	average_intensity = 0;
	for (uint8_t i=0; i<2;i++)
	{
		for (uint8_t j = 0; j < 16; j++) average_intensity += beam_intensity[i][j];
  400848:	f852 1f04 	ldr.w	r1, [r2, #4]!
  40084c:	440b      	add	r3, r1
  40084e:	4282      	cmp	r2, r0
  400850:	d1fa      	bne.n	400848 <compute_avgd_parameters+0x38>
  400852:	4868      	ldr	r0, [pc, #416]	; (4009f4 <compute_avgd_parameters+0x1e4>)
  400854:	f100 0240 	add.w	r2, r0, #64	; 0x40
  400858:	3080      	adds	r0, #128	; 0x80
  40085a:	f852 1b04 	ldr.w	r1, [r2], #4
  40085e:	440b      	add	r3, r1
  400860:	4282      	cmp	r2, r0
  400862:	d1fa      	bne.n	40085a <compute_avgd_parameters+0x4a>
  400864:	4a64      	ldr	r2, [pc, #400]	; (4009f8 <compute_avgd_parameters+0x1e8>)
  400866:	6013      	str	r3, [r2, #0]
	}
	
	*intensityPtr = (uint32_t)(average_intensity/32);
  400868:	4a64      	ldr	r2, [pc, #400]	; (4009fc <compute_avgd_parameters+0x1ec>)
  40086a:	6812      	ldr	r2, [r2, #0]
  40086c:	095b      	lsrs	r3, r3, #5
  40086e:	6013      	str	r3, [r2, #0]
  400870:	f04f 0b03 	mov.w	fp, #3
  400874:	f04f 0a00 	mov.w	sl, #0
	
	
	//peak variance
	for(uint8_t i=0; i<4; i+=3){
		peak_variance=0;
  400878:	4d61      	ldr	r5, [pc, #388]	; (400a00 <compute_avgd_parameters+0x1f0>)
  40087a:	ed9f ab53 	vldr	d10, [pc, #332]	; 4009c8 <compute_avgd_parameters+0x1b8>
		for(uint8_t j=0; j<16;j++) peak_variance+= (peak_location[i][j]-peakLocationPtr[i])*(peak_location[i][j]-peakLocationPtr[i]);
		if(i==0){
			stdDevPtr[0]= (int32_t)(sqrt(peak_variance/15)*10000);
			}else{
			stdDevPtr[1]= (int32_t)(sqrt(peak_variance/15)*10000);
  40087e:	ed9f 9b54 	vldr	d9, [pc, #336]	; 4009d0 <compute_avgd_parameters+0x1c0>
  400882:	ed9f 8b55 	vldr	d8, [pc, #340]	; 4009d8 <compute_avgd_parameters+0x1c8>
  400886:	e016      	b.n	4008b6 <compute_avgd_parameters+0xa6>
			stdDevPtr[0]= (int32_t)(sqrt(peak_variance/15)*10000);
  400888:	4b5e      	ldr	r3, [pc, #376]	; (400a04 <compute_avgd_parameters+0x1f4>)
  40088a:	681c      	ldr	r4, [r3, #0]
  40088c:	ec53 2b19 	vmov	r2, r3, d9
  400890:	4e5d      	ldr	r6, [pc, #372]	; (400a08 <compute_avgd_parameters+0x1f8>)
  400892:	47b0      	blx	r6
  400894:	4b5d      	ldr	r3, [pc, #372]	; (400a0c <compute_avgd_parameters+0x1fc>)
  400896:	4798      	blx	r3
  400898:	ec53 2b18 	vmov	r2, r3, d8
  40089c:	4e5c      	ldr	r6, [pc, #368]	; (400a10 <compute_avgd_parameters+0x200>)
  40089e:	47b0      	blx	r6
  4008a0:	4b5c      	ldr	r3, [pc, #368]	; (400a14 <compute_avgd_parameters+0x204>)
  4008a2:	4798      	blx	r3
  4008a4:	6020      	str	r0, [r4, #0]
  4008a6:	f10a 0a03 	add.w	sl, sl, #3
  4008aa:	fa5f fa8a 	uxtb.w	sl, sl
  4008ae:	f10b 0b03 	add.w	fp, fp, #3
  4008b2:	fa5f fb8b 	uxtb.w	fp, fp
		peak_variance=0;
  4008b6:	ed85 ab00 	vstr	d10, [r5]
		for(uint8_t j=0; j<16;j++) peak_variance+= (peak_location[i][j]-peakLocationPtr[i])*(peak_location[i][j]-peakLocationPtr[i]);
  4008ba:	4b4d      	ldr	r3, [pc, #308]	; (4009f0 <compute_avgd_parameters+0x1e0>)
  4008bc:	681f      	ldr	r7, [r3, #0]
  4008be:	eb07 074a 	add.w	r7, r7, sl, lsl #1
  4008c2:	ea4f 134a 	mov.w	r3, sl, lsl #5
  4008c6:	4e54      	ldr	r6, [pc, #336]	; (400a18 <compute_avgd_parameters+0x208>)
  4008c8:	1e9c      	subs	r4, r3, #2
  4008ca:	4434      	add	r4, r6
  4008cc:	331e      	adds	r3, #30
  4008ce:	441e      	add	r6, r3
  4008d0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 400a34 <compute_avgd_parameters+0x224>
  4008d4:	f8df 8160 	ldr.w	r8, [pc, #352]	; 400a38 <compute_avgd_parameters+0x228>
  4008d8:	f834 0f02 	ldrh.w	r0, [r4, #2]!
  4008dc:	883b      	ldrh	r3, [r7, #0]
  4008de:	1ac0      	subs	r0, r0, r3
  4008e0:	fb00 f000 	mul.w	r0, r0, r0
  4008e4:	47c8      	blx	r9
  4008e6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4008ea:	47c0      	blx	r8
  4008ec:	e9c5 0100 	strd	r0, r1, [r5]
  4008f0:	42b4      	cmp	r4, r6
  4008f2:	d1f1      	bne.n	4008d8 <compute_avgd_parameters+0xc8>
		if(i==0){
  4008f4:	f1ba 0f00 	cmp.w	sl, #0
  4008f8:	d0c6      	beq.n	400888 <compute_avgd_parameters+0x78>
			stdDevPtr[1]= (int32_t)(sqrt(peak_variance/15)*10000);
  4008fa:	4b42      	ldr	r3, [pc, #264]	; (400a04 <compute_avgd_parameters+0x1f4>)
  4008fc:	681c      	ldr	r4, [r3, #0]
  4008fe:	ec53 2b19 	vmov	r2, r3, d9
  400902:	4e41      	ldr	r6, [pc, #260]	; (400a08 <compute_avgd_parameters+0x1f8>)
  400904:	47b0      	blx	r6
  400906:	4b41      	ldr	r3, [pc, #260]	; (400a0c <compute_avgd_parameters+0x1fc>)
  400908:	4798      	blx	r3
  40090a:	ec53 2b18 	vmov	r2, r3, d8
  40090e:	4e40      	ldr	r6, [pc, #256]	; (400a10 <compute_avgd_parameters+0x200>)
  400910:	47b0      	blx	r6
  400912:	4b40      	ldr	r3, [pc, #256]	; (400a14 <compute_avgd_parameters+0x204>)
  400914:	4798      	blx	r3
  400916:	6060      	str	r0, [r4, #4]
	for(uint8_t i=0; i<4; i+=3){
  400918:	f1bb 0f03 	cmp.w	fp, #3
  40091c:	d9c3      	bls.n	4008a6 <compute_avgd_parameters+0x96>
  40091e:	483f      	ldr	r0, [pc, #252]	; (400a1c <compute_avgd_parameters+0x20c>)
  400920:	1e83      	subs	r3, r0, #2
  400922:	301e      	adds	r0, #30
  400924:	2200      	movs	r2, #0
	
	
	for (uint8_t i=0; i<2;i++)
	{
		average_fwhm = 0;
		for (uint8_t j = 0; j < 16; j++) average_fwhm += fwhm[i][j];
  400926:	f833 1f02 	ldrh.w	r1, [r3, #2]!
  40092a:	440a      	add	r2, r1
  40092c:	4283      	cmp	r3, r0
  40092e:	d1fa      	bne.n	400926 <compute_avgd_parameters+0x116>
		fwhmPtr[i]= (uint16_t)(average_fwhm/16);
  400930:	4b3b      	ldr	r3, [pc, #236]	; (400a20 <compute_avgd_parameters+0x210>)
  400932:	681b      	ldr	r3, [r3, #0]
  400934:	0912      	lsrs	r2, r2, #4
  400936:	801a      	strh	r2, [r3, #0]
  400938:	4838      	ldr	r0, [pc, #224]	; (400a1c <compute_avgd_parameters+0x20c>)
  40093a:	f100 0320 	add.w	r3, r0, #32
  40093e:	3040      	adds	r0, #64	; 0x40
  400940:	2200      	movs	r2, #0
		for (uint8_t j = 0; j < 16; j++) average_fwhm += fwhm[i][j];
  400942:	f833 1b02 	ldrh.w	r1, [r3], #2
  400946:	440a      	add	r2, r1
  400948:	4283      	cmp	r3, r0
  40094a:	d1fa      	bne.n	400942 <compute_avgd_parameters+0x132>
  40094c:	4b35      	ldr	r3, [pc, #212]	; (400a24 <compute_avgd_parameters+0x214>)
  40094e:	601a      	str	r2, [r3, #0]
		fwhmPtr[i]= (uint16_t)(average_fwhm/16);
  400950:	4b33      	ldr	r3, [pc, #204]	; (400a20 <compute_avgd_parameters+0x210>)
  400952:	681b      	ldr	r3, [r3, #0]
  400954:	0912      	lsrs	r2, r2, #4
  400956:	805a      	strh	r2, [r3, #2]
  400958:	4c33      	ldr	r4, [pc, #204]	; (400a28 <compute_avgd_parameters+0x218>)
  40095a:	f04f 0a00 	mov.w	sl, #0
  40095e:	ed9f ab1a 	vldr	d10, [pc, #104]	; 4009c8 <compute_avgd_parameters+0x1b8>
	
	
	for (uint8_t i=0; i<2;i++)
	{
		average_skewness = 0;
		for (uint8_t j = 0; j < 16; j++) average_skewness += skewness[i][j];
  400962:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 400a3c <compute_avgd_parameters+0x22c>
  400966:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 400a38 <compute_avgd_parameters+0x228>
		skewnessPtr[i]=  (int32_t) ((average_skewness/16)*10000);
  40096a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 400a10 <compute_avgd_parameters+0x200>
  40096e:	ed9f 9b1c 	vldr	d9, [pc, #112]	; 4009e0 <compute_avgd_parameters+0x1d0>
  400972:	ed9f 8b19 	vldr	d8, [pc, #100]	; 4009d8 <compute_avgd_parameters+0x1c8>
  400976:	f104 0540 	add.w	r5, r4, #64	; 0x40
		fwhmPtr[i]= (uint16_t)(average_fwhm/16);
  40097a:	ec57 6b1a 	vmov	r6, r7, d10
		for (uint8_t j = 0; j < 16; j++) average_skewness += skewness[i][j];
  40097e:	f854 0b04 	ldr.w	r0, [r4], #4
  400982:	47c8      	blx	r9
  400984:	4602      	mov	r2, r0
  400986:	460b      	mov	r3, r1
  400988:	4630      	mov	r0, r6
  40098a:	4639      	mov	r1, r7
  40098c:	47c0      	blx	r8
  40098e:	4606      	mov	r6, r0
  400990:	460f      	mov	r7, r1
  400992:	42ac      	cmp	r4, r5
  400994:	d1f3      	bne.n	40097e <compute_avgd_parameters+0x16e>
  400996:	4b25      	ldr	r3, [pc, #148]	; (400a2c <compute_avgd_parameters+0x21c>)
  400998:	e9c3 6700 	strd	r6, r7, [r3]
		skewnessPtr[i]=  (int32_t) ((average_skewness/16)*10000);
  40099c:	4b24      	ldr	r3, [pc, #144]	; (400a30 <compute_avgd_parameters+0x220>)
  40099e:	681c      	ldr	r4, [r3, #0]
  4009a0:	ec53 2b19 	vmov	r2, r3, d9
  4009a4:	47d8      	blx	fp
  4009a6:	ec53 2b18 	vmov	r2, r3, d8
  4009aa:	47d8      	blx	fp
  4009ac:	4b19      	ldr	r3, [pc, #100]	; (400a14 <compute_avgd_parameters+0x204>)
  4009ae:	4798      	blx	r3
  4009b0:	f844 000a 	str.w	r0, [r4, sl]
  4009b4:	f10a 0a04 	add.w	sl, sl, #4
  4009b8:	462c      	mov	r4, r5
	for (uint8_t i=0; i<2;i++)
  4009ba:	f1ba 0f08 	cmp.w	sl, #8
  4009be:	d1da      	bne.n	400976 <compute_avgd_parameters+0x166>
	}
	
}
  4009c0:	ecbd 8b06 	vpop	{d8-d10}
  4009c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
  4009d4:	402e0000 	.word	0x402e0000
  4009d8:	00000000 	.word	0x00000000
  4009dc:	40c38800 	.word	0x40c38800
  4009e0:	00000000 	.word	0x00000000
  4009e4:	3fb00000 	.word	0x3fb00000
  4009e8:	2000099a 	.word	0x2000099a
  4009ec:	2000cf24 	.word	0x2000cf24
  4009f0:	2000000c 	.word	0x2000000c
  4009f4:	20000894 	.word	0x20000894
  4009f8:	2000cf30 	.word	0x2000cf30
  4009fc:	20000008 	.word	0x20000008
  400a00:	2000cf28 	.word	0x2000cf28
  400a04:	20000014 	.word	0x20000014
  400a08:	00402585 	.word	0x00402585
  400a0c:	00401d89 	.word	0x00401d89
  400a10:	00402331 	.word	0x00402331
  400a14:	00402891 	.word	0x00402891
  400a18:	2000097c 	.word	0x2000097c
  400a1c:	2000093c 	.word	0x2000093c
  400a20:	20000000 	.word	0x20000000
  400a24:	2000cf20 	.word	0x2000cf20
  400a28:	20000a5c 	.word	0x20000a5c
  400a2c:	2000cf38 	.word	0x2000cf38
  400a30:	20000010 	.word	0x20000010
  400a34:	00402265 	.word	0x00402265
  400a38:	00401fcd 	.word	0x00401fcd
  400a3c:	00402289 	.word	0x00402289

00400a40 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400a40:	460b      	mov	r3, r1
  400a42:	b119      	cbz	r1, 400a4c <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;				
  400a44:	6809      	ldr	r1, [r1, #0]
  400a46:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  400a48:	685b      	ldr	r3, [r3, #4]
  400a4a:	60c3      	str	r3, [r0, #12]
	}
	
	if (p_next_packet) {
  400a4c:	b11a      	cbz	r2, 400a56 <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  400a4e:	6813      	ldr	r3, [r2, #0]
  400a50:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  400a52:	6853      	ldr	r3, [r2, #4]
  400a54:	61c3      	str	r3, [r0, #28]
  400a56:	4770      	bx	lr

00400a58 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400a58:	460b      	mov	r3, r1
  400a5a:	b119      	cbz	r1, 400a64 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;		// set receive pointer register to the address of the self-defined receive buffer
  400a5c:	6809      	ldr	r1, [r1, #0]
  400a5e:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;		// set receiver counter register to the size of self-defined receive buffer
  400a60:	685b      	ldr	r3, [r3, #4]
  400a62:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  400a64:	b11a      	cbz	r2, 400a6e <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  400a66:	6813      	ldr	r3, [r2, #0]
  400a68:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  400a6a:	6853      	ldr	r3, [r2, #4]
  400a6c:	6143      	str	r3, [r0, #20]
  400a6e:	4770      	bx	lr

00400a70 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400a70:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  400a74:	05c9      	lsls	r1, r1, #23
  400a76:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
  400a78:	6201      	str	r1, [r0, #32]
  400a7a:	4770      	bx	lr

00400a7c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a7e:	b083      	sub	sp, #12
  400a80:	4605      	mov	r5, r0
  400a82:	460c      	mov	r4, r1
	uint32_t val = 0;
  400a84:	2300      	movs	r3, #0
  400a86:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400a88:	4b18      	ldr	r3, [pc, #96]	; (400aec <usart_serial_getchar+0x70>)
  400a8a:	4298      	cmp	r0, r3
  400a8c:	d00a      	beq.n	400aa4 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400a8e:	4b18      	ldr	r3, [pc, #96]	; (400af0 <usart_serial_getchar+0x74>)
  400a90:	4298      	cmp	r0, r3
  400a92:	d00f      	beq.n	400ab4 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400a94:	4b17      	ldr	r3, [pc, #92]	; (400af4 <usart_serial_getchar+0x78>)
  400a96:	4298      	cmp	r0, r3
  400a98:	d014      	beq.n	400ac4 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400a9a:	4b17      	ldr	r3, [pc, #92]	; (400af8 <usart_serial_getchar+0x7c>)
  400a9c:	429d      	cmp	r5, r3
  400a9e:	d01b      	beq.n	400ad8 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400aa0:	b003      	add	sp, #12
  400aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400aa4:	461f      	mov	r7, r3
  400aa6:	4e15      	ldr	r6, [pc, #84]	; (400afc <usart_serial_getchar+0x80>)
  400aa8:	4621      	mov	r1, r4
  400aaa:	4638      	mov	r0, r7
  400aac:	47b0      	blx	r6
  400aae:	2800      	cmp	r0, #0
  400ab0:	d1fa      	bne.n	400aa8 <usart_serial_getchar+0x2c>
  400ab2:	e7f2      	b.n	400a9a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400ab4:	461e      	mov	r6, r3
  400ab6:	4d11      	ldr	r5, [pc, #68]	; (400afc <usart_serial_getchar+0x80>)
  400ab8:	4621      	mov	r1, r4
  400aba:	4630      	mov	r0, r6
  400abc:	47a8      	blx	r5
  400abe:	2800      	cmp	r0, #0
  400ac0:	d1fa      	bne.n	400ab8 <usart_serial_getchar+0x3c>
  400ac2:	e7ed      	b.n	400aa0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400ac4:	461e      	mov	r6, r3
  400ac6:	4d0e      	ldr	r5, [pc, #56]	; (400b00 <usart_serial_getchar+0x84>)
  400ac8:	a901      	add	r1, sp, #4
  400aca:	4630      	mov	r0, r6
  400acc:	47a8      	blx	r5
  400ace:	2800      	cmp	r0, #0
  400ad0:	d1fa      	bne.n	400ac8 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400ad2:	9b01      	ldr	r3, [sp, #4]
  400ad4:	7023      	strb	r3, [r4, #0]
  400ad6:	e7e3      	b.n	400aa0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400ad8:	461e      	mov	r6, r3
  400ada:	4d09      	ldr	r5, [pc, #36]	; (400b00 <usart_serial_getchar+0x84>)
  400adc:	a901      	add	r1, sp, #4
  400ade:	4630      	mov	r0, r6
  400ae0:	47a8      	blx	r5
  400ae2:	2800      	cmp	r0, #0
  400ae4:	d1fa      	bne.n	400adc <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400ae6:	9b01      	ldr	r3, [sp, #4]
  400ae8:	7023      	strb	r3, [r4, #0]
}
  400aea:	e7d9      	b.n	400aa0 <usart_serial_getchar+0x24>
  400aec:	400e0600 	.word	0x400e0600
  400af0:	40060600 	.word	0x40060600
  400af4:	400a0000 	.word	0x400a0000
  400af8:	400a4000 	.word	0x400a4000
  400afc:	004015cf 	.word	0x004015cf
  400b00:	00401611 	.word	0x00401611

00400b04 <usart_serial_putchar>:
{
  400b04:	b570      	push	{r4, r5, r6, lr}
  400b06:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400b08:	4b18      	ldr	r3, [pc, #96]	; (400b6c <usart_serial_putchar+0x68>)
  400b0a:	4298      	cmp	r0, r3
  400b0c:	d00a      	beq.n	400b24 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400b0e:	4b18      	ldr	r3, [pc, #96]	; (400b70 <usart_serial_putchar+0x6c>)
  400b10:	4298      	cmp	r0, r3
  400b12:	d010      	beq.n	400b36 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400b14:	4b17      	ldr	r3, [pc, #92]	; (400b74 <usart_serial_putchar+0x70>)
  400b16:	4298      	cmp	r0, r3
  400b18:	d016      	beq.n	400b48 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400b1a:	4b17      	ldr	r3, [pc, #92]	; (400b78 <usart_serial_putchar+0x74>)
  400b1c:	4298      	cmp	r0, r3
  400b1e:	d01c      	beq.n	400b5a <usart_serial_putchar+0x56>
	return 0;
  400b20:	2000      	movs	r0, #0
}
  400b22:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400b24:	461e      	mov	r6, r3
  400b26:	4d15      	ldr	r5, [pc, #84]	; (400b7c <usart_serial_putchar+0x78>)
  400b28:	4621      	mov	r1, r4
  400b2a:	4630      	mov	r0, r6
  400b2c:	47a8      	blx	r5
  400b2e:	2800      	cmp	r0, #0
  400b30:	d1fa      	bne.n	400b28 <usart_serial_putchar+0x24>
		return 1;
  400b32:	2001      	movs	r0, #1
  400b34:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400b36:	461e      	mov	r6, r3
  400b38:	4d10      	ldr	r5, [pc, #64]	; (400b7c <usart_serial_putchar+0x78>)
  400b3a:	4621      	mov	r1, r4
  400b3c:	4630      	mov	r0, r6
  400b3e:	47a8      	blx	r5
  400b40:	2800      	cmp	r0, #0
  400b42:	d1fa      	bne.n	400b3a <usart_serial_putchar+0x36>
		return 1;
  400b44:	2001      	movs	r0, #1
  400b46:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400b48:	461e      	mov	r6, r3
  400b4a:	4d0d      	ldr	r5, [pc, #52]	; (400b80 <usart_serial_putchar+0x7c>)
  400b4c:	4621      	mov	r1, r4
  400b4e:	4630      	mov	r0, r6
  400b50:	47a8      	blx	r5
  400b52:	2800      	cmp	r0, #0
  400b54:	d1fa      	bne.n	400b4c <usart_serial_putchar+0x48>
		return 1;
  400b56:	2001      	movs	r0, #1
  400b58:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400b5a:	461e      	mov	r6, r3
  400b5c:	4d08      	ldr	r5, [pc, #32]	; (400b80 <usart_serial_putchar+0x7c>)
  400b5e:	4621      	mov	r1, r4
  400b60:	4630      	mov	r0, r6
  400b62:	47a8      	blx	r5
  400b64:	2800      	cmp	r0, #0
  400b66:	d1fa      	bne.n	400b5e <usart_serial_putchar+0x5a>
		return 1;
  400b68:	2001      	movs	r0, #1
  400b6a:	bd70      	pop	{r4, r5, r6, pc}
  400b6c:	400e0600 	.word	0x400e0600
  400b70:	40060600 	.word	0x40060600
  400b74:	400a0000 	.word	0x400a0000
  400b78:	400a4000 	.word	0x400a4000
  400b7c:	004015bf 	.word	0x004015bf
  400b80:	004015fd 	.word	0x004015fd

00400b84 <configure_UART>:


/* Configure UART module with desired settings*/

void configure_UART(void)
{
  400b84:	b530      	push	{r4, r5, lr}
  400b86:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400b88:	2007      	movs	r0, #7
  400b8a:	4d12      	ldr	r5, [pc, #72]	; (400bd4 <configure_UART+0x50>)
  400b8c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400b8e:	4c12      	ldr	r4, [pc, #72]	; (400bd8 <configure_UART+0x54>)
  400b90:	4b12      	ldr	r3, [pc, #72]	; (400bdc <configure_UART+0x58>)
  400b92:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400b94:	4a12      	ldr	r2, [pc, #72]	; (400be0 <configure_UART+0x5c>)
  400b96:	4b13      	ldr	r3, [pc, #76]	; (400be4 <configure_UART+0x60>)
  400b98:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400b9a:	4a13      	ldr	r2, [pc, #76]	; (400be8 <configure_UART+0x64>)
  400b9c:	4b13      	ldr	r3, [pc, #76]	; (400bec <configure_UART+0x68>)
  400b9e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400ba0:	4b13      	ldr	r3, [pc, #76]	; (400bf0 <configure_UART+0x6c>)
  400ba2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400ba4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400ba8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400baa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400bae:	9303      	str	r3, [sp, #12]
  400bb0:	2007      	movs	r0, #7
  400bb2:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  400bb4:	a901      	add	r1, sp, #4
  400bb6:	4620      	mov	r0, r4
  400bb8:	4b0e      	ldr	r3, [pc, #56]	; (400bf4 <configure_UART+0x70>)
  400bba:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400bbc:	4d0e      	ldr	r5, [pc, #56]	; (400bf8 <configure_UART+0x74>)
  400bbe:	682b      	ldr	r3, [r5, #0]
  400bc0:	2100      	movs	r1, #0
  400bc2:	6898      	ldr	r0, [r3, #8]
  400bc4:	4c0d      	ldr	r4, [pc, #52]	; (400bfc <configure_UART+0x78>)
  400bc6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400bc8:	682b      	ldr	r3, [r5, #0]
  400bca:	2100      	movs	r1, #0
  400bcc:	6858      	ldr	r0, [r3, #4]
  400bce:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY											
	};
		
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);							
	stdio_serial_init(CONF_UART, &uart_serial_options);							
}
  400bd0:	b005      	add	sp, #20
  400bd2:	bd30      	pop	{r4, r5, pc}
  400bd4:	00401479 	.word	0x00401479
  400bd8:	400e0600 	.word	0x400e0600
  400bdc:	2000cf6c 	.word	0x2000cf6c
  400be0:	00400b05 	.word	0x00400b05
  400be4:	2000cf68 	.word	0x2000cf68
  400be8:	00400a7d 	.word	0x00400a7d
  400bec:	2000cf64 	.word	0x2000cf64
  400bf0:	05b8d800 	.word	0x05b8d800
  400bf4:	0040157f 	.word	0x0040157f
  400bf8:	20000030 	.word	0x20000030
  400bfc:	00402a79 	.word	0x00402a79

00400c00 <send_cycle_plot>:


/* Send the plotting data (8334 12-bit sample values) of one BPM80-cycle */

void send_cycle_plot()
{	
  400c00:	b508      	push	{r3, lr}
	setDelimiters();
  400c02:	4b0a      	ldr	r3, [pc, #40]	; (400c2c <send_cycle_plot+0x2c>)
  400c04:	4798      	blx	r3
	transmit_buffer[0] = 144;
  400c06:	4b0a      	ldr	r3, [pc, #40]	; (400c30 <send_cycle_plot+0x30>)
  400c08:	681a      	ldr	r2, [r3, #0]
  400c0a:	2190      	movs	r1, #144	; 0x90
  400c0c:	8011      	strh	r1, [r2, #0]
	transmit_buffer[8333] = 33;
  400c0e:	681a      	ldr	r2, [r3, #0]
  400c10:	2121      	movs	r1, #33	; 0x21
  400c12:	f244 131a 	movw	r3, #16666	; 0x411a
  400c16:	52d1      	strh	r1, [r2, r3]
	pdc_tx_init(g_p_uart_pdc, &cycle_plot_packet, NULL);
  400c18:	2200      	movs	r2, #0
  400c1a:	4906      	ldr	r1, [pc, #24]	; (400c34 <send_cycle_plot+0x34>)
  400c1c:	4b06      	ldr	r3, [pc, #24]	; (400c38 <send_cycle_plot+0x38>)
  400c1e:	6818      	ldr	r0, [r3, #0]
  400c20:	4b06      	ldr	r3, [pc, #24]	; (400c3c <send_cycle_plot+0x3c>)
  400c22:	4798      	blx	r3
	config[3] = 0;														// reset the plotting data flag in configuration array
  400c24:	2200      	movs	r2, #0
  400c26:	4b06      	ldr	r3, [pc, #24]	; (400c40 <send_cycle_plot+0x40>)
  400c28:	70da      	strb	r2, [r3, #3]
  400c2a:	bd08      	pop	{r3, pc}
  400c2c:	004019d1 	.word	0x004019d1
  400c30:	20000028 	.word	0x20000028
  400c34:	2000cf48 	.word	0x2000cf48
  400c38:	2000cf50 	.word	0x2000cf50
  400c3c:	00400a41 	.word	0x00400a41
  400c40:	20000adc 	.word	0x20000adc

00400c44 <send_beam_parameters>:


/* Send beam parameter values (12 double-precision values) */

void send_beam_parameters()
{
  400c44:	b508      	push	{r3, lr}
	compute_avgd_parameters();
  400c46:	4b09      	ldr	r3, [pc, #36]	; (400c6c <send_beam_parameters+0x28>)
  400c48:	4798      	blx	r3
	beam_parameters_bytes[0] = 111;
  400c4a:	4b09      	ldr	r3, [pc, #36]	; (400c70 <send_beam_parameters+0x2c>)
  400c4c:	226f      	movs	r2, #111	; 0x6f
  400c4e:	701a      	strb	r2, [r3, #0]
	beam_parameters_bytes[37] = 222;
  400c50:	22de      	movs	r2, #222	; 0xde
  400c52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdc_tx_init(g_p_uart_pdc, &beam_parameters_packet, NULL);
  400c56:	2200      	movs	r2, #0
  400c58:	4906      	ldr	r1, [pc, #24]	; (400c74 <send_beam_parameters+0x30>)
  400c5a:	4b07      	ldr	r3, [pc, #28]	; (400c78 <send_beam_parameters+0x34>)
  400c5c:	6818      	ldr	r0, [r3, #0]
  400c5e:	4b07      	ldr	r3, [pc, #28]	; (400c7c <send_beam_parameters+0x38>)
  400c60:	4798      	blx	r3
	config[2] = 0;																		// reset parameter data flag in configuration array
  400c62:	2200      	movs	r2, #0
  400c64:	4b06      	ldr	r3, [pc, #24]	; (400c80 <send_beam_parameters+0x3c>)
  400c66:	709a      	strb	r2, [r3, #2]
  400c68:	bd08      	pop	{r3, pc}
  400c6a:	bf00      	nop
  400c6c:	00400811 	.word	0x00400811
  400c70:	20000914 	.word	0x20000914
  400c74:	2000cf40 	.word	0x2000cf40
  400c78:	2000cf50 	.word	0x2000cf50
  400c7c:	00400a41 	.word	0x00400a41
  400c80:	20000adc 	.word	0x20000adc

00400c84 <UART0_Handler>:


/* Interrupt handler for UART interrupt. */
 
void console_uart_irq_handler(void)
{
  400c84:	b508      	push	{r3, lr}
	//Get UART status and check if PDC receive buffer is full 
	if ((uart_get_status(CONSOLE_UART) & UART_SR_RXBUFF) == UART_SR_RXBUFF) {
  400c86:	4811      	ldr	r0, [pc, #68]	; (400ccc <UART0_Handler+0x48>)
  400c88:	4b11      	ldr	r3, [pc, #68]	; (400cd0 <UART0_Handler+0x4c>)
  400c8a:	4798      	blx	r3
  400c8c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
  400c90:	d100      	bne.n	400c94 <UART0_Handler+0x10>
  400c92:	bd08      	pop	{r3, pc}
		
		// Configure PDC for data transfer (RX and TX) 
		
		pdc_rx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);				// pass the PDC register base and the address of the transfer buffer, will start the transfer and wait until expected amount of data is received (which will trigger interrupt)
  400c94:	2200      	movs	r2, #0
  400c96:	490f      	ldr	r1, [pc, #60]	; (400cd4 <UART0_Handler+0x50>)
  400c98:	4b0f      	ldr	r3, [pc, #60]	; (400cd8 <UART0_Handler+0x54>)
  400c9a:	6818      	ldr	r0, [r3, #0]
  400c9c:	4b0f      	ldr	r3, [pc, #60]	; (400cdc <UART0_Handler+0x58>)
  400c9e:	4798      	blx	r3
		
		uint8_t command_index = 0;
		if(host_command[0] == 255)											// check front delimiter of the host packet
  400ca0:	4b0f      	ldr	r3, [pc, #60]	; (400ce0 <UART0_Handler+0x5c>)
  400ca2:	781b      	ldrb	r3, [r3, #0]
  400ca4:	2bff      	cmp	r3, #255	; 0xff
  400ca6:	d1f4      	bne.n	400c92 <UART0_Handler+0xe>
		{
			command_index= host_command[1];											// second element of host command contains index in configuration array (indicates which setting to change)
  400ca8:	4a0d      	ldr	r2, [pc, #52]	; (400ce0 <UART0_Handler+0x5c>)
  400caa:	7853      	ldrb	r3, [r2, #1]
			config[command_index] = host_command[2];								// third element is the new value of the specified setting
  400cac:	7891      	ldrb	r1, [r2, #2]
  400cae:	4a0d      	ldr	r2, [pc, #52]	; (400ce4 <UART0_Handler+0x60>)
  400cb0:	54d1      	strb	r1, [r2, r3]
		}
		
		//if (command_index == 1) dacc_write_conversion_data(DACC, config[1]*16);		// change trigger level immediately
		if (command_index == 1) afec_channel_set_analog_offset(AFEC0,AFEC_CHANNEL_6, 2048-config[1]);
  400cb2:	2b01      	cmp	r3, #1
  400cb4:	d1ed      	bne.n	400c92 <UART0_Handler+0xe>
  400cb6:	7853      	ldrb	r3, [r2, #1]
  400cb8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400cbc:	4a0a      	ldr	r2, [pc, #40]	; (400ce8 <UART0_Handler+0x64>)
  400cbe:	2106      	movs	r1, #6
  400cc0:	6651      	str	r1, [r2, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  400cc6:	66d3      	str	r3, [r2, #108]	; 0x6c
		//pdc_tx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);						// This transfer echoes the received packet that caused this interrupt, so computer application can check if command is correctly received (only for debugging)
	}
	
	
}
  400cc8:	e7e3      	b.n	400c92 <UART0_Handler+0xe>
  400cca:	bf00      	nop
  400ccc:	400e0600 	.word	0x400e0600
  400cd0:	004015bb 	.word	0x004015bb
  400cd4:	2000cf54 	.word	0x2000cf54
  400cd8:	2000cf50 	.word	0x2000cf50
  400cdc:	00400a59 	.word	0x00400a59
  400ce0:	20000ae4 	.word	0x20000ae4
  400ce4:	20000adc 	.word	0x20000adc
  400ce8:	400b0000 	.word	0x400b0000

00400cec <pdc_uart_initialization>:


void pdc_uart_initialization(void)
{
  400cec:	b570      	push	{r4, r5, r6, lr}
	/* Initialize the UART console */
	configure_UART();
  400cee:	4b15      	ldr	r3, [pc, #84]	; (400d44 <pdc_uart_initialization+0x58>)
  400cf0:	4798      	blx	r3

	/* Get pointer to UART PDC register base */
	g_p_uart_pdc = uart_get_pdc_base(CONSOLE_UART);
  400cf2:	4d15      	ldr	r5, [pc, #84]	; (400d48 <pdc_uart_initialization+0x5c>)
  400cf4:	4628      	mov	r0, r5
  400cf6:	4b15      	ldr	r3, [pc, #84]	; (400d4c <pdc_uart_initialization+0x60>)
  400cf8:	4798      	blx	r3
  400cfa:	4e15      	ldr	r6, [pc, #84]	; (400d50 <pdc_uart_initialization+0x64>)
  400cfc:	6030      	str	r0, [r6, #0]

	/* Initialize PDC data packet for transfer (receive/transmit) by specifying base pointer and size of the packet */
	g_pdc_uart_packet.ul_addr = (uint32_t) host_command;					// receive buffer which we also echo back to the computer
  400cfe:	4c15      	ldr	r4, [pc, #84]	; (400d54 <pdc_uart_initialization+0x68>)
  400d00:	4b15      	ldr	r3, [pc, #84]	; (400d58 <pdc_uart_initialization+0x6c>)
  400d02:	6023      	str	r3, [r4, #0]
	g_pdc_uart_packet.ul_size = BUFFER_SIZE_HOST_COMMAND;								
  400d04:	2303      	movs	r3, #3
  400d06:	6063      	str	r3, [r4, #4]
	
	beam_parameters_packet.ul_addr = (uint32_t) beam_parameters_bytes;			// transmit packet/buffer for beam parameters
  400d08:	4b14      	ldr	r3, [pc, #80]	; (400d5c <pdc_uart_initialization+0x70>)
  400d0a:	4a15      	ldr	r2, [pc, #84]	; (400d60 <pdc_uart_initialization+0x74>)
  400d0c:	601a      	str	r2, [r3, #0]
	beam_parameters_packet.ul_size = BUFFER_SIZE_PARAMETERS;
  400d0e:	2226      	movs	r2, #38	; 0x26
  400d10:	605a      	str	r2, [r3, #4]
	
	cycle_plot_packet.ul_addr = (uint32_t) transmit_buffer;					// start address of transfer packet data is the buffer we defined ourselves
  400d12:	4b14      	ldr	r3, [pc, #80]	; (400d64 <pdc_uart_initialization+0x78>)
  400d14:	4a14      	ldr	r2, [pc, #80]	; (400d68 <pdc_uart_initialization+0x7c>)
  400d16:	6812      	ldr	r2, [r2, #0]
  400d18:	601a      	str	r2, [r3, #0]
	cycle_plot_packet.ul_size = BUFFER_SIZE_PLOTDATA;
  400d1a:	f244 121c 	movw	r2, #16668	; 0x411c
  400d1e:	605a      	str	r2, [r3, #4]
	
	/* Enable PDC transfers, here we set both transmitter and receiver high (full duplex). Receiver and transmitter hardware operate independently. 
	   We start the receive transfer, transmits are always started in response to a received command*/
	pdc_enable_transfer(g_p_uart_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400d20:	f240 1101 	movw	r1, #257	; 0x101
  400d24:	4b11      	ldr	r3, [pc, #68]	; (400d6c <pdc_uart_initialization+0x80>)
  400d26:	4798      	blx	r3
	pdc_rx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);
  400d28:	2200      	movs	r2, #0
  400d2a:	4621      	mov	r1, r4
  400d2c:	6830      	ldr	r0, [r6, #0]
  400d2e:	4b10      	ldr	r3, [pc, #64]	; (400d70 <pdc_uart_initialization+0x84>)
  400d30:	4798      	blx	r3
	
	/* Enable UART IRQ for receive buffer full (host command received)*/
	uart_enable_interrupt(CONSOLE_UART, UART_IER_RXBUFF);
  400d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400d36:	4628      	mov	r0, r5
  400d38:	4b0e      	ldr	r3, [pc, #56]	; (400d74 <pdc_uart_initialization+0x88>)
  400d3a:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d3c:	2280      	movs	r2, #128	; 0x80
  400d3e:	4b0e      	ldr	r3, [pc, #56]	; (400d78 <pdc_uart_initialization+0x8c>)
  400d40:	601a      	str	r2, [r3, #0]
  400d42:	bd70      	pop	{r4, r5, r6, pc}
  400d44:	00400b85 	.word	0x00400b85
  400d48:	400e0600 	.word	0x400e0600
  400d4c:	004015e1 	.word	0x004015e1
  400d50:	2000cf50 	.word	0x2000cf50
  400d54:	2000cf54 	.word	0x2000cf54
  400d58:	20000ae4 	.word	0x20000ae4
  400d5c:	2000cf40 	.word	0x2000cf40
  400d60:	20000914 	.word	0x20000914
  400d64:	2000cf48 	.word	0x2000cf48
  400d68:	20000028 	.word	0x20000028
  400d6c:	00400a71 	.word	0x00400a71
  400d70:	00400a59 	.word	0x00400a59
  400d74:	004015b7 	.word	0x004015b7
  400d78:	e000e100 	.word	0xe000e100

00400d7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400d7c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400d7e:	480e      	ldr	r0, [pc, #56]	; (400db8 <sysclk_init+0x3c>)
  400d80:	4b0e      	ldr	r3, [pc, #56]	; (400dbc <sysclk_init+0x40>)
  400d82:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400d84:	213e      	movs	r1, #62	; 0x3e
  400d86:	2000      	movs	r0, #0
  400d88:	4b0d      	ldr	r3, [pc, #52]	; (400dc0 <sysclk_init+0x44>)
  400d8a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400d8c:	4c0d      	ldr	r4, [pc, #52]	; (400dc4 <sysclk_init+0x48>)
  400d8e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400d90:	2800      	cmp	r0, #0
  400d92:	d0fc      	beq.n	400d8e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400d94:	4b0c      	ldr	r3, [pc, #48]	; (400dc8 <sysclk_init+0x4c>)
  400d96:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400d98:	4a0c      	ldr	r2, [pc, #48]	; (400dcc <sysclk_init+0x50>)
  400d9a:	4b0d      	ldr	r3, [pc, #52]	; (400dd0 <sysclk_init+0x54>)
  400d9c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400d9e:	4c0d      	ldr	r4, [pc, #52]	; (400dd4 <sysclk_init+0x58>)
  400da0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400da2:	2800      	cmp	r0, #0
  400da4:	d0fc      	beq.n	400da0 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400da6:	2010      	movs	r0, #16
  400da8:	4b0b      	ldr	r3, [pc, #44]	; (400dd8 <sysclk_init+0x5c>)
  400daa:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400dac:	4b0b      	ldr	r3, [pc, #44]	; (400ddc <sysclk_init+0x60>)
  400dae:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400db0:	480b      	ldr	r0, [pc, #44]	; (400de0 <sysclk_init+0x64>)
  400db2:	4b02      	ldr	r3, [pc, #8]	; (400dbc <sysclk_init+0x40>)
  400db4:	4798      	blx	r3
  400db6:	bd10      	pop	{r4, pc}
  400db8:	07270e00 	.word	0x07270e00
  400dbc:	00401801 	.word	0x00401801
  400dc0:	004013f5 	.word	0x004013f5
  400dc4:	00401449 	.word	0x00401449
  400dc8:	00401459 	.word	0x00401459
  400dcc:	200f3f01 	.word	0x200f3f01
  400dd0:	400e0400 	.word	0x400e0400
  400dd4:	00401469 	.word	0x00401469
  400dd8:	00401391 	.word	0x00401391
  400ddc:	004016f5 	.word	0x004016f5
  400de0:	05b8d800 	.word	0x05b8d800

00400de4 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  400de4:	2a00      	cmp	r2, #0
  400de6:	d03f      	beq.n	400e68 <usart_serial_read_packet+0x84>
{
  400de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400dec:	b083      	sub	sp, #12
  400dee:	4606      	mov	r6, r0
  400df0:	460c      	mov	r4, r1
  400df2:	4693      	mov	fp, r2
  400df4:	448b      	add	fp, r1
	if (UART0 == (Uart*)p_usart) {
  400df6:	4f1d      	ldr	r7, [pc, #116]	; (400e6c <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  400df8:	4d1d      	ldr	r5, [pc, #116]	; (400e70 <usart_serial_read_packet+0x8c>)
	if (UART1 == (Uart*)p_usart) {
  400dfa:	f8df a080 	ldr.w	sl, [pc, #128]	; 400e7c <usart_serial_read_packet+0x98>
  400dfe:	e00d      	b.n	400e1c <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  400e00:	4621      	mov	r1, r4
  400e02:	4638      	mov	r0, r7
  400e04:	47a8      	blx	r5
  400e06:	2800      	cmp	r0, #0
  400e08:	d1fa      	bne.n	400e00 <usart_serial_read_packet+0x1c>
  400e0a:	e010      	b.n	400e2e <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  400e0c:	4621      	mov	r1, r4
  400e0e:	4650      	mov	r0, sl
  400e10:	47a8      	blx	r5
  400e12:	2800      	cmp	r0, #0
  400e14:	d1fa      	bne.n	400e0c <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  400e16:	3401      	adds	r4, #1
	while (len) {
  400e18:	455c      	cmp	r4, fp
  400e1a:	d021      	beq.n	400e60 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400e1c:	2300      	movs	r3, #0
  400e1e:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400e20:	42be      	cmp	r6, r7
  400e22:	d0ed      	beq.n	400e00 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  400e24:	4556      	cmp	r6, sl
  400e26:	d0f1      	beq.n	400e0c <usart_serial_read_packet+0x28>
	if (USART0 == p_usart) {
  400e28:	4b12      	ldr	r3, [pc, #72]	; (400e74 <usart_serial_read_packet+0x90>)
  400e2a:	429e      	cmp	r6, r3
  400e2c:	d00d      	beq.n	400e4a <usart_serial_read_packet+0x66>
	if (USART1 == p_usart) {
  400e2e:	4b12      	ldr	r3, [pc, #72]	; (400e78 <usart_serial_read_packet+0x94>)
  400e30:	429e      	cmp	r6, r3
  400e32:	d1f0      	bne.n	400e16 <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400e34:	4699      	mov	r9, r3
  400e36:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400e80 <usart_serial_read_packet+0x9c>
  400e3a:	a901      	add	r1, sp, #4
  400e3c:	4648      	mov	r0, r9
  400e3e:	47c0      	blx	r8
  400e40:	2800      	cmp	r0, #0
  400e42:	d1fa      	bne.n	400e3a <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  400e44:	9b01      	ldr	r3, [sp, #4]
  400e46:	7023      	strb	r3, [r4, #0]
  400e48:	e7e5      	b.n	400e16 <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400e4a:	4699      	mov	r9, r3
  400e4c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 400e80 <usart_serial_read_packet+0x9c>
  400e50:	a901      	add	r1, sp, #4
  400e52:	4648      	mov	r0, r9
  400e54:	47c0      	blx	r8
  400e56:	2800      	cmp	r0, #0
  400e58:	d1fa      	bne.n	400e50 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  400e5a:	9b01      	ldr	r3, [sp, #4]
  400e5c:	7023      	strb	r3, [r4, #0]
  400e5e:	e7da      	b.n	400e16 <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  400e60:	2000      	movs	r0, #0
  400e62:	b003      	add	sp, #12
  400e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400e68:	2000      	movs	r0, #0
  400e6a:	4770      	bx	lr
  400e6c:	400e0600 	.word	0x400e0600
  400e70:	004015cf 	.word	0x004015cf
  400e74:	400a0000 	.word	0x400a0000
  400e78:	400a4000 	.word	0x400a4000
  400e7c:	40060600 	.word	0x40060600
  400e80:	00401611 	.word	0x00401611

00400e84 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400e88:	b980      	cbnz	r0, 400eac <_read+0x28>
  400e8a:	460c      	mov	r4, r1
  400e8c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400e8e:	2a00      	cmp	r2, #0
  400e90:	dd0f      	ble.n	400eb2 <_read+0x2e>
  400e92:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400e94:	4e08      	ldr	r6, [pc, #32]	; (400eb8 <_read+0x34>)
  400e96:	4d09      	ldr	r5, [pc, #36]	; (400ebc <_read+0x38>)
  400e98:	6830      	ldr	r0, [r6, #0]
  400e9a:	4621      	mov	r1, r4
  400e9c:	682b      	ldr	r3, [r5, #0]
  400e9e:	4798      	blx	r3
		ptr++;
  400ea0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400ea2:	42bc      	cmp	r4, r7
  400ea4:	d1f8      	bne.n	400e98 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400ea6:	4640      	mov	r0, r8
  400ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400eac:	f04f 38ff 	mov.w	r8, #4294967295
  400eb0:	e7f9      	b.n	400ea6 <_read+0x22>
	for (; len > 0; --len) {
  400eb2:	4680      	mov	r8, r0
  400eb4:	e7f7      	b.n	400ea6 <_read+0x22>
  400eb6:	bf00      	nop
  400eb8:	2000cf6c 	.word	0x2000cf6c
  400ebc:	2000cf64 	.word	0x2000cf64

00400ec0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400ec0:	3801      	subs	r0, #1
  400ec2:	2802      	cmp	r0, #2
  400ec4:	d815      	bhi.n	400ef2 <_write+0x32>
{
  400ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400eca:	460e      	mov	r6, r1
  400ecc:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400ece:	b19a      	cbz	r2, 400ef8 <_write+0x38>
  400ed0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400ed2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400f0c <_write+0x4c>
  400ed6:	4f0c      	ldr	r7, [pc, #48]	; (400f08 <_write+0x48>)
  400ed8:	f8d8 0000 	ldr.w	r0, [r8]
  400edc:	f815 1b01 	ldrb.w	r1, [r5], #1
  400ee0:	683b      	ldr	r3, [r7, #0]
  400ee2:	4798      	blx	r3
  400ee4:	2800      	cmp	r0, #0
  400ee6:	db0a      	blt.n	400efe <_write+0x3e>
  400ee8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400eea:	3c01      	subs	r4, #1
  400eec:	d1f4      	bne.n	400ed8 <_write+0x18>
  400eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400ef2:	f04f 30ff 	mov.w	r0, #4294967295
  400ef6:	4770      	bx	lr
	for (; len != 0; --len) {
  400ef8:	4610      	mov	r0, r2
  400efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400efe:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f06:	bf00      	nop
  400f08:	2000cf68 	.word	0x2000cf68
  400f0c:	2000cf6c 	.word	0x2000cf6c

00400f10 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400f10:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400f12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f16:	4b21      	ldr	r3, [pc, #132]	; (400f9c <board_init+0x8c>)
  400f18:	605a      	str	r2, [r3, #4]
  400f1a:	2009      	movs	r0, #9
  400f1c:	4c20      	ldr	r4, [pc, #128]	; (400fa0 <board_init+0x90>)
  400f1e:	47a0      	blx	r4
  400f20:	200a      	movs	r0, #10
  400f22:	47a0      	blx	r4
  400f24:	200b      	movs	r0, #11
  400f26:	47a0      	blx	r4
  400f28:	200c      	movs	r0, #12
  400f2a:	47a0      	blx	r4
  400f2c:	200d      	movs	r0, #13
  400f2e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f30:	4b1c      	ldr	r3, [pc, #112]	; (400fa4 <board_init+0x94>)
  400f32:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400f36:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400f3c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400f3e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400f42:	2204      	movs	r2, #4
  400f44:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f46:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400f4a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400f4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f50:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400f52:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400f58:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400f5a:	f021 0104 	bic.w	r1, r1, #4
  400f5e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f60:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400f62:	f021 0104 	bic.w	r1, r1, #4
  400f66:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400f68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400f6c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400f70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400f74:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  400f78:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f7e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f80:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f86:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400f88:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400f8c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f8e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400f90:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400f94:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f96:	605a      	str	r2, [r3, #4]
  400f98:	bd10      	pop	{r4, pc}
  400f9a:	bf00      	nop
  400f9c:	400e1850 	.word	0x400e1850
  400fa0:	00401479 	.word	0x00401479
  400fa4:	400e1400 	.word	0x400e1400

00400fa8 <acc_init>:
		Acc *p_acc,
		uint32_t ul_select_plus,
		uint32_t ul_select_minus,
		uint32_t ul_edge_type,
		uint32_t ul_invert)
{
  400fa8:	b410      	push	{r4}
	/* Validate the parameters. */
	Assert(p_acc);
	
	/* Reset the controller. */
	p_acc->ACC_CR |= ACC_CR_SWRST;
  400faa:	6804      	ldr	r4, [r0, #0]
  400fac:	f044 0401 	orr.w	r4, r4, #1
  400fb0:	6004      	str	r4, [r0, #0]

	/* Write to the MR register. */
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400fb2:	9c01      	ldr	r4, [sp, #4]
  400fb4:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
  400fb8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
  400fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400fc0:	431c      	orrs	r4, r3
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
  400fc2:	f002 0207 	and.w	r2, r2, #7
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400fc6:	4314      	orrs	r4, r2
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400fc8:	f001 0170 	and.w	r1, r1, #112	; 0x70
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400fcc:	430c      	orrs	r4, r1
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400fce:	6044      	str	r4, [r0, #4]

	/* Set hysteresis and current option. */
	p_acc->ACC_ACR = (ACC_ACR_ISEL_HISP |
  400fd0:	2303      	movs	r3, #3
  400fd2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
			ACC_ACR_HYST(ACC_ACR_HYST_50mv_max));

	/* Automatic Output Masking Period. */
	while (p_acc->ACC_ISR & (uint32_t) ACC_ISR_MASK);
  400fd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400fd8:	2b00      	cmp	r3, #0
  400fda:	dbfc      	blt.n	400fd6 <acc_init+0x2e>
}
  400fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fe0:	4770      	bx	lr

00400fe2 <acc_get_comparison_result>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	uint32_t ul_temp = p_acc->ACC_MR;
  400fe2:	6843      	ldr	r3, [r0, #4]
	uint32_t ul_status = p_acc->ACC_ISR;
  400fe4:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if ((ul_temp & ACC_MR_INV_EN) == ACC_MR_INV_EN) {
  400fe6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		if (ul_status & ACC_ISR_SCO) {
  400fea:	bf18      	it	ne
  400fec:	f080 0002 	eorne.w	r0, r0, #2
			return 0;	/* inn>inp */
		} else {
			return 1;	/* inp>inn */
		}
	} else {
		if (ul_status & ACC_ISR_SCO) {
  400ff0:	f3c0 0040 	ubfx	r0, r0, #1, #1
			return 1;	/* inp>inn */
		} else {
			return 0;	/* inn>inp */
		}
	}
}
  400ff4:	4770      	bx	lr

00400ff6 <acc_enable_interrupt>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	p_acc->ACC_IER = ACC_IER_CE;
  400ff6:	2301      	movs	r3, #1
  400ff8:	6243      	str	r3, [r0, #36]	; 0x24
  400ffa:	4770      	bx	lr

00400ffc <acc_get_interrupt_status>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	return p_acc->ACC_ISR;
  400ffc:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400ffe:	4770      	bx	lr

00401000 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  401000:	b570      	push	{r4, r5, r6, lr}
  401002:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  401004:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  401006:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  401008:	4013      	ands	r3, r2
  40100a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40100c:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  40100e:	4d21      	ldr	r5, [pc, #132]	; (401094 <afec_process_callback+0x94>)
  401010:	42a8      	cmp	r0, r5
  401012:	bf14      	ite	ne
  401014:	2500      	movne	r5, #0
  401016:	2501      	moveq	r5, #1
  401018:	006e      	lsls	r6, r5, #1
  40101a:	442e      	add	r6, r5
  40101c:	e00b      	b.n	401036 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40101e:	2c14      	cmp	r4, #20
  401020:	d824      	bhi.n	40106c <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  401022:	9a01      	ldr	r2, [sp, #4]
  401024:	f104 0108 	add.w	r1, r4, #8
  401028:	2301      	movs	r3, #1
  40102a:	408b      	lsls	r3, r1
  40102c:	4213      	tst	r3, r2
  40102e:	d113      	bne.n	401058 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  401030:	3401      	adds	r4, #1
  401032:	2c17      	cmp	r4, #23
  401034:	d02b      	beq.n	40108e <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  401036:	2c0f      	cmp	r4, #15
  401038:	d8f1      	bhi.n	40101e <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40103a:	9a01      	ldr	r2, [sp, #4]
  40103c:	2301      	movs	r3, #1
  40103e:	40a3      	lsls	r3, r4
  401040:	4213      	tst	r3, r2
  401042:	d0f5      	beq.n	401030 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  401044:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  401048:	4423      	add	r3, r4
  40104a:	4a13      	ldr	r2, [pc, #76]	; (401098 <afec_process_callback+0x98>)
  40104c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401050:	2b00      	cmp	r3, #0
  401052:	d0ed      	beq.n	401030 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  401054:	4798      	blx	r3
  401056:	e7eb      	b.n	401030 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  401058:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  40105c:	4423      	add	r3, r4
  40105e:	4a0e      	ldr	r2, [pc, #56]	; (401098 <afec_process_callback+0x98>)
  401060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401064:	2b00      	cmp	r3, #0
  401066:	d0e3      	beq.n	401030 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  401068:	4798      	blx	r3
  40106a:	e7e1      	b.n	401030 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40106c:	9a01      	ldr	r2, [sp, #4]
  40106e:	f104 0109 	add.w	r1, r4, #9
  401072:	2301      	movs	r3, #1
  401074:	408b      	lsls	r3, r1
  401076:	4213      	tst	r3, r2
  401078:	d0da      	beq.n	401030 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40107a:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  40107e:	4423      	add	r3, r4
  401080:	4a05      	ldr	r2, [pc, #20]	; (401098 <afec_process_callback+0x98>)
  401082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401086:	2b00      	cmp	r3, #0
  401088:	d0d2      	beq.n	401030 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40108a:	4798      	blx	r3
  40108c:	e7d0      	b.n	401030 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  40108e:	b002      	add	sp, #8
  401090:	bd70      	pop	{r4, r5, r6, pc}
  401092:	bf00      	nop
  401094:	400b4000 	.word	0x400b4000
  401098:	2000cf70 	.word	0x2000cf70

0040109c <afec_ch_set_config>:
{
  40109c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40109e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4010a0:	2301      	movs	r3, #1
  4010a2:	408b      	lsls	r3, r1
  4010a4:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4010a8:	7815      	ldrb	r5, [r2, #0]
  4010aa:	2d00      	cmp	r5, #0
  4010ac:	bf08      	it	eq
  4010ae:	2300      	moveq	r3, #0
  4010b0:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4010b2:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4010b4:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4010b6:	004b      	lsls	r3, r1, #1
  4010b8:	2103      	movs	r1, #3
  4010ba:	4099      	lsls	r1, r3
  4010bc:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4010c0:	7851      	ldrb	r1, [r2, #1]
  4010c2:	4099      	lsls	r1, r3
  4010c4:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4010c6:	6541      	str	r1, [r0, #84]	; 0x54
}
  4010c8:	bc30      	pop	{r4, r5}
  4010ca:	4770      	bx	lr

004010cc <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4010cc:	2200      	movs	r2, #0
  4010ce:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4010d0:	4b08      	ldr	r3, [pc, #32]	; (4010f4 <afec_get_config_defaults+0x28>)
  4010d2:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4010d4:	4b08      	ldr	r3, [pc, #32]	; (4010f8 <afec_get_config_defaults+0x2c>)
  4010d6:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4010d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4010dc:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  4010de:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  4010e0:	2302      	movs	r3, #2
  4010e2:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  4010e4:	2301      	movs	r3, #1
  4010e6:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  4010e8:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  4010ea:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  4010ec:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  4010ee:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  4010f0:	7683      	strb	r3, [r0, #26]
  4010f2:	4770      	bx	lr
  4010f4:	05b8d800 	.word	0x05b8d800
  4010f8:	005b8d80 	.word	0x005b8d80

004010fc <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4010fc:	2300      	movs	r3, #0
  4010fe:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  401100:	2301      	movs	r3, #1
  401102:	7043      	strb	r3, [r0, #1]
  401104:	4770      	bx	lr
	...

00401108 <afec_init>:
	return afec->AFEC_ISR;
  401108:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40110a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40110e:	d001      	beq.n	401114 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  401110:	2019      	movs	r0, #25
  401112:	4770      	bx	lr
{
  401114:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  401116:	2301      	movs	r3, #1
  401118:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40111a:	7dcb      	ldrb	r3, [r1, #23]
  40111c:	2b00      	cmp	r3, #0
  40111e:	bf14      	ite	ne
  401120:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  401124:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  401126:	7d8b      	ldrb	r3, [r1, #22]
  401128:	2b00      	cmp	r3, #0
  40112a:	bf14      	ite	ne
  40112c:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  401130:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  401132:	7d0b      	ldrb	r3, [r1, #20]
  401134:	061b      	lsls	r3, r3, #24
  401136:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40113a:	690a      	ldr	r2, [r1, #16]
  40113c:	68ce      	ldr	r6, [r1, #12]
  40113e:	4332      	orrs	r2, r6
  401140:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  401142:	7d4a      	ldrb	r2, [r1, #21]
  401144:	0712      	lsls	r2, r2, #28
  401146:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40114a:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  40114c:	688a      	ldr	r2, [r1, #8]
  40114e:	0056      	lsls	r6, r2, #1
  401150:	684a      	ldr	r2, [r1, #4]
  401152:	fbb2 f2f6 	udiv	r2, r2, r6
  401156:	3a01      	subs	r2, #1
  401158:	0212      	lsls	r2, r2, #8
  40115a:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40115c:	4313      	orrs	r3, r2
  40115e:	432b      	orrs	r3, r5
  401160:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  401162:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401164:	7e0b      	ldrb	r3, [r1, #24]
  401166:	2b00      	cmp	r3, #0
  401168:	bf14      	ite	ne
  40116a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40116e:	2300      	moveq	r3, #0
  401170:	680a      	ldr	r2, [r1, #0]
  401172:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  401174:	7e4a      	ldrb	r2, [r1, #25]
  401176:	2a00      	cmp	r2, #0
  401178:	bf14      	ite	ne
  40117a:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40117e:	2200      	moveq	r2, #0
			(config->resolution) |
  401180:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401182:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  401184:	7e8b      	ldrb	r3, [r1, #26]
  401186:	021b      	lsls	r3, r3, #8
  401188:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40118c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  401190:	4b0e      	ldr	r3, [pc, #56]	; (4011cc <afec_init+0xc4>)
  401192:	4298      	cmp	r0, r3
  401194:	d005      	beq.n	4011a2 <afec_init+0x9a>
	if(afec == AFEC1) {
  401196:	4b0e      	ldr	r3, [pc, #56]	; (4011d0 <afec_init+0xc8>)
  401198:	4298      	cmp	r0, r3
  40119a:	d00c      	beq.n	4011b6 <afec_init+0xae>
	return STATUS_OK;
  40119c:	2000      	movs	r0, #0
}
  40119e:	bc70      	pop	{r4, r5, r6}
  4011a0:	4770      	bx	lr
  4011a2:	4b0c      	ldr	r3, [pc, #48]	; (4011d4 <afec_init+0xcc>)
  4011a4:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  4011a8:	2200      	movs	r2, #0
  4011aa:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4011ae:	428b      	cmp	r3, r1
  4011b0:	d1fb      	bne.n	4011aa <afec_init+0xa2>
	return STATUS_OK;
  4011b2:	2000      	movs	r0, #0
  4011b4:	e7f3      	b.n	40119e <afec_init+0x96>
  4011b6:	4b08      	ldr	r3, [pc, #32]	; (4011d8 <afec_init+0xd0>)
  4011b8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  4011bc:	2200      	movs	r2, #0
  4011be:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4011c2:	428b      	cmp	r3, r1
  4011c4:	d1fb      	bne.n	4011be <afec_init+0xb6>
	return STATUS_OK;
  4011c6:	2000      	movs	r0, #0
  4011c8:	e7e9      	b.n	40119e <afec_init+0x96>
  4011ca:	bf00      	nop
  4011cc:	400b0000 	.word	0x400b0000
  4011d0:	400b4000 	.word	0x400b4000
  4011d4:	2000cf6c 	.word	0x2000cf6c
  4011d8:	2000cfc8 	.word	0x2000cfc8

004011dc <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4011dc:	4b0c      	ldr	r3, [pc, #48]	; (401210 <afec_enable_interrupt+0x34>)
  4011de:	4299      	cmp	r1, r3
  4011e0:	d007      	beq.n	4011f2 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4011e2:	290f      	cmp	r1, #15
  4011e4:	d80b      	bhi.n	4011fe <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  4011e6:	d006      	beq.n	4011f6 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  4011e8:	2301      	movs	r3, #1
  4011ea:	fa03 f101 	lsl.w	r1, r3, r1
  4011ee:	6241      	str	r1, [r0, #36]	; 0x24
  4011f0:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4011f2:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4011f4:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  4011f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4011fa:	6243      	str	r3, [r0, #36]	; 0x24
  4011fc:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4011fe:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  401200:	bf94      	ite	ls
  401202:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  401204:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  401206:	2301      	movs	r3, #1
  401208:	fa03 f101 	lsl.w	r1, r3, r1
  40120c:	6241      	str	r1, [r0, #36]	; 0x24
  40120e:	4770      	bx	lr
  401210:	df00ffff 	.word	0xdf00ffff

00401214 <afec_set_callback>:
{
  401214:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  401216:	4c11      	ldr	r4, [pc, #68]	; (40125c <afec_set_callback+0x48>)
  401218:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  40121a:	bf0c      	ite	eq
  40121c:	2417      	moveq	r4, #23
  40121e:	2400      	movne	r4, #0
  401220:	440c      	add	r4, r1
  401222:	4d0f      	ldr	r5, [pc, #60]	; (401260 <afec_set_callback+0x4c>)
  401224:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  401228:	d10a      	bne.n	401240 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40122a:	4a0e      	ldr	r2, [pc, #56]	; (401264 <afec_set_callback+0x50>)
  40122c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  401230:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401234:	011b      	lsls	r3, r3, #4
  401236:	b2db      	uxtb	r3, r3
  401238:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40123c:	6014      	str	r4, [r2, #0]
  40123e:	e009      	b.n	401254 <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401240:	4a08      	ldr	r2, [pc, #32]	; (401264 <afec_set_callback+0x50>)
  401242:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401246:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40124a:	011b      	lsls	r3, r3, #4
  40124c:	b2db      	uxtb	r3, r3
  40124e:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401252:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  401254:	4b04      	ldr	r3, [pc, #16]	; (401268 <afec_set_callback+0x54>)
  401256:	4798      	blx	r3
  401258:	bd38      	pop	{r3, r4, r5, pc}
  40125a:	bf00      	nop
  40125c:	400b4000 	.word	0x400b4000
  401260:	2000cf70 	.word	0x2000cf70
  401264:	e000e100 	.word	0xe000e100
  401268:	004011dd 	.word	0x004011dd

0040126c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40126c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40126e:	4802      	ldr	r0, [pc, #8]	; (401278 <AFEC0_Handler+0xc>)
  401270:	4b02      	ldr	r3, [pc, #8]	; (40127c <AFEC0_Handler+0x10>)
  401272:	4798      	blx	r3
  401274:	bd08      	pop	{r3, pc}
  401276:	bf00      	nop
  401278:	400b0000 	.word	0x400b0000
  40127c:	00401001 	.word	0x00401001

00401280 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  401280:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  401282:	4802      	ldr	r0, [pc, #8]	; (40128c <AFEC1_Handler+0xc>)
  401284:	4b02      	ldr	r3, [pc, #8]	; (401290 <AFEC1_Handler+0x10>)
  401286:	4798      	blx	r3
  401288:	bd08      	pop	{r3, pc}
  40128a:	bf00      	nop
  40128c:	400b4000 	.word	0x400b4000
  401290:	00401001 	.word	0x00401001

00401294 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401294:	b500      	push	{lr}
  401296:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  401298:	4b13      	ldr	r3, [pc, #76]	; (4012e8 <afec_enable+0x54>)
  40129a:	4298      	cmp	r0, r3
  40129c:	bf0c      	ite	eq
  40129e:	201f      	moveq	r0, #31
  4012a0:	201e      	movne	r0, #30
  4012a2:	4b12      	ldr	r3, [pc, #72]	; (4012ec <afec_enable+0x58>)
  4012a4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4012a6:	4b12      	ldr	r3, [pc, #72]	; (4012f0 <afec_enable+0x5c>)
  4012a8:	789b      	ldrb	r3, [r3, #2]
  4012aa:	2bff      	cmp	r3, #255	; 0xff
  4012ac:	d01a      	beq.n	4012e4 <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4012ae:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4012b2:	fab3 f383 	clz	r3, r3
  4012b6:	095b      	lsrs	r3, r3, #5
  4012b8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4012ba:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4012bc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4012c0:	2200      	movs	r2, #0
  4012c2:	4b0c      	ldr	r3, [pc, #48]	; (4012f4 <afec_enable+0x60>)
  4012c4:	701a      	strb	r2, [r3, #0]
	return flags;
  4012c6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4012c8:	4a09      	ldr	r2, [pc, #36]	; (4012f0 <afec_enable+0x5c>)
  4012ca:	7893      	ldrb	r3, [r2, #2]
  4012cc:	3301      	adds	r3, #1
  4012ce:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4012d0:	b129      	cbz	r1, 4012de <afec_enable+0x4a>
		cpu_irq_enable();
  4012d2:	2201      	movs	r2, #1
  4012d4:	4b07      	ldr	r3, [pc, #28]	; (4012f4 <afec_enable+0x60>)
  4012d6:	701a      	strb	r2, [r3, #0]
  4012d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4012dc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4012de:	b003      	add	sp, #12
  4012e0:	f85d fb04 	ldr.w	pc, [sp], #4
  4012e4:	e7fe      	b.n	4012e4 <afec_enable+0x50>
  4012e6:	bf00      	nop
  4012e8:	400b4000 	.word	0x400b4000
  4012ec:	00401479 	.word	0x00401479
  4012f0:	2000cf5c 	.word	0x2000cf5c
  4012f4:	20000018 	.word	0x20000018

004012f8 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4012f8:	2301      	movs	r3, #1
  4012fa:	6003      	str	r3, [r0, #0]
  4012fc:	4770      	bx	lr

004012fe <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  4012fe:	6843      	ldr	r3, [r0, #4]
  401300:	f023 0301 	bic.w	r3, r3, #1
  401304:	6043      	str	r3, [r0, #4]
  401306:	4770      	bx	lr

00401308 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  401308:	b949      	cbnz	r1, 40131e <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  40130a:	6843      	ldr	r3, [r0, #4]
  40130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401310:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  401312:	6843      	ldr	r3, [r0, #4]
  401314:	f023 0310 	bic.w	r3, r3, #16
  401318:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  40131a:	2000      	movs	r0, #0
  40131c:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  40131e:	6843      	ldr	r3, [r0, #4]
  401320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401324:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  401326:	6843      	ldr	r3, [r0, #4]
  401328:	f043 0310 	orr.w	r3, r3, #16
  40132c:	6043      	str	r3, [r0, #4]
  40132e:	e7f4      	b.n	40131a <dacc_set_transfer_mode+0x12>

00401330 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  401330:	6201      	str	r1, [r0, #32]
  401332:	4770      	bx	lr

00401334 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  401334:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  401336:	2901      	cmp	r1, #1
  401338:	d901      	bls.n	40133e <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  40133a:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  40133c:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  40133e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  401342:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  401346:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  401348:	2000      	movs	r0, #0
  40134a:	4770      	bx	lr

0040134c <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  40134c:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  40134e:	b941      	cbnz	r1, 401362 <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  401350:	4907      	ldr	r1, [pc, #28]	; (401370 <dacc_set_timing+0x24>)
  401352:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  401354:	0612      	lsls	r2, r2, #24
  401356:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  40135a:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  40135c:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  40135e:	2000      	movs	r0, #0
  401360:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  401362:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  401366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  40136a:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  40136e:	e7f1      	b.n	401354 <dacc_set_timing+0x8>
  401370:	c0df00ff 	.word	0xc0df00ff

00401374 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  401374:	2901      	cmp	r1, #1
  401376:	d901      	bls.n	40137c <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  401378:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  40137a:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  40137c:	2301      	movs	r3, #1
  40137e:	fa03 f101 	lsl.w	r1, r3, r1
  401382:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  401384:	2000      	movs	r0, #0
  401386:	4770      	bx	lr

00401388 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  401388:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  40138c:	2000      	movs	r0, #0
  40138e:	4770      	bx	lr

00401390 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401390:	4a17      	ldr	r2, [pc, #92]	; (4013f0 <pmc_switch_mck_to_pllack+0x60>)
  401392:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401398:	4318      	orrs	r0, r3
  40139a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40139c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40139e:	f013 0f08 	tst.w	r3, #8
  4013a2:	d10a      	bne.n	4013ba <pmc_switch_mck_to_pllack+0x2a>
  4013a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4013a8:	4911      	ldr	r1, [pc, #68]	; (4013f0 <pmc_switch_mck_to_pllack+0x60>)
  4013aa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4013ac:	f012 0f08 	tst.w	r2, #8
  4013b0:	d103      	bne.n	4013ba <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013b2:	3b01      	subs	r3, #1
  4013b4:	d1f9      	bne.n	4013aa <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4013b6:	2001      	movs	r0, #1
  4013b8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4013ba:	4a0d      	ldr	r2, [pc, #52]	; (4013f0 <pmc_switch_mck_to_pllack+0x60>)
  4013bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013be:	f023 0303 	bic.w	r3, r3, #3
  4013c2:	f043 0302 	orr.w	r3, r3, #2
  4013c6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013ca:	f013 0f08 	tst.w	r3, #8
  4013ce:	d10a      	bne.n	4013e6 <pmc_switch_mck_to_pllack+0x56>
  4013d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4013d4:	4906      	ldr	r1, [pc, #24]	; (4013f0 <pmc_switch_mck_to_pllack+0x60>)
  4013d6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4013d8:	f012 0f08 	tst.w	r2, #8
  4013dc:	d105      	bne.n	4013ea <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013de:	3b01      	subs	r3, #1
  4013e0:	d1f9      	bne.n	4013d6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4013e2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4013e4:	4770      	bx	lr
	return 0;
  4013e6:	2000      	movs	r0, #0
  4013e8:	4770      	bx	lr
  4013ea:	2000      	movs	r0, #0
  4013ec:	4770      	bx	lr
  4013ee:	bf00      	nop
  4013f0:	400e0400 	.word	0x400e0400

004013f4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4013f4:	b9c8      	cbnz	r0, 40142a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013f6:	4a11      	ldr	r2, [pc, #68]	; (40143c <pmc_switch_mainck_to_xtal+0x48>)
  4013f8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4013fa:	0209      	lsls	r1, r1, #8
  4013fc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4013fe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401402:	f023 0303 	bic.w	r3, r3, #3
  401406:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40140a:	f043 0301 	orr.w	r3, r3, #1
  40140e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401410:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401412:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401414:	f013 0f01 	tst.w	r3, #1
  401418:	d0fb      	beq.n	401412 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40141a:	4a08      	ldr	r2, [pc, #32]	; (40143c <pmc_switch_mainck_to_xtal+0x48>)
  40141c:	6a13      	ldr	r3, [r2, #32]
  40141e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401426:	6213      	str	r3, [r2, #32]
  401428:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40142a:	4904      	ldr	r1, [pc, #16]	; (40143c <pmc_switch_mainck_to_xtal+0x48>)
  40142c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40142e:	4a04      	ldr	r2, [pc, #16]	; (401440 <pmc_switch_mainck_to_xtal+0x4c>)
  401430:	401a      	ands	r2, r3
  401432:	4b04      	ldr	r3, [pc, #16]	; (401444 <pmc_switch_mainck_to_xtal+0x50>)
  401434:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401436:	620b      	str	r3, [r1, #32]
  401438:	4770      	bx	lr
  40143a:	bf00      	nop
  40143c:	400e0400 	.word	0x400e0400
  401440:	fec8fffc 	.word	0xfec8fffc
  401444:	01370002 	.word	0x01370002

00401448 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401448:	4b02      	ldr	r3, [pc, #8]	; (401454 <pmc_osc_is_ready_mainck+0xc>)
  40144a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40144c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401450:	4770      	bx	lr
  401452:	bf00      	nop
  401454:	400e0400 	.word	0x400e0400

00401458 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401458:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40145c:	4b01      	ldr	r3, [pc, #4]	; (401464 <pmc_disable_pllack+0xc>)
  40145e:	629a      	str	r2, [r3, #40]	; 0x28
  401460:	4770      	bx	lr
  401462:	bf00      	nop
  401464:	400e0400 	.word	0x400e0400

00401468 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401468:	4b02      	ldr	r3, [pc, #8]	; (401474 <pmc_is_locked_pllack+0xc>)
  40146a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40146c:	f000 0002 	and.w	r0, r0, #2
  401470:	4770      	bx	lr
  401472:	bf00      	nop
  401474:	400e0400 	.word	0x400e0400

00401478 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401478:	282f      	cmp	r0, #47	; 0x2f
  40147a:	d81e      	bhi.n	4014ba <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40147c:	281f      	cmp	r0, #31
  40147e:	d80c      	bhi.n	40149a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401480:	4b11      	ldr	r3, [pc, #68]	; (4014c8 <pmc_enable_periph_clk+0x50>)
  401482:	699a      	ldr	r2, [r3, #24]
  401484:	2301      	movs	r3, #1
  401486:	4083      	lsls	r3, r0
  401488:	4393      	bics	r3, r2
  40148a:	d018      	beq.n	4014be <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40148c:	2301      	movs	r3, #1
  40148e:	fa03 f000 	lsl.w	r0, r3, r0
  401492:	4b0d      	ldr	r3, [pc, #52]	; (4014c8 <pmc_enable_periph_clk+0x50>)
  401494:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401496:	2000      	movs	r0, #0
  401498:	4770      	bx	lr
		ul_id -= 32;
  40149a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40149c:	4b0a      	ldr	r3, [pc, #40]	; (4014c8 <pmc_enable_periph_clk+0x50>)
  40149e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4014a2:	2301      	movs	r3, #1
  4014a4:	4083      	lsls	r3, r0
  4014a6:	4393      	bics	r3, r2
  4014a8:	d00b      	beq.n	4014c2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4014aa:	2301      	movs	r3, #1
  4014ac:	fa03 f000 	lsl.w	r0, r3, r0
  4014b0:	4b05      	ldr	r3, [pc, #20]	; (4014c8 <pmc_enable_periph_clk+0x50>)
  4014b2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4014b6:	2000      	movs	r0, #0
  4014b8:	4770      	bx	lr
		return 1;
  4014ba:	2001      	movs	r0, #1
  4014bc:	4770      	bx	lr
	return 0;
  4014be:	2000      	movs	r0, #0
  4014c0:	4770      	bx	lr
  4014c2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4014c4:	4770      	bx	lr
  4014c6:	bf00      	nop
  4014c8:	400e0400 	.word	0x400e0400

004014cc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4014cc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4014ce:	0189      	lsls	r1, r1, #6
  4014d0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4014d2:	2402      	movs	r4, #2
  4014d4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4014d6:	f04f 31ff 	mov.w	r1, #4294967295
  4014da:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4014dc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4014de:	605a      	str	r2, [r3, #4]
}
  4014e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014e4:	4770      	bx	lr

004014e6 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4014e6:	0189      	lsls	r1, r1, #6
  4014e8:	2305      	movs	r3, #5
  4014ea:	5043      	str	r3, [r0, r1]
  4014ec:	4770      	bx	lr

004014ee <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  4014ee:	0189      	lsls	r1, r1, #6
  4014f0:	2302      	movs	r3, #2
  4014f2:	5043      	str	r3, [r0, r1]
  4014f4:	4770      	bx	lr

004014f6 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4014f6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4014fa:	61ca      	str	r2, [r1, #28]
  4014fc:	4770      	bx	lr

004014fe <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4014fe:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  401502:	624a      	str	r2, [r1, #36]	; 0x24
  401504:	4770      	bx	lr

00401506 <tc_disable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401506:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IDR = ul_sources;
  40150a:	628a      	str	r2, [r1, #40]	; 0x28
  40150c:	4770      	bx	lr

0040150e <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40150e:	b4f0      	push	{r4, r5, r6, r7}
  401510:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401512:	2402      	movs	r4, #2
  401514:	9401      	str	r4, [sp, #4]
  401516:	2408      	movs	r4, #8
  401518:	9402      	str	r4, [sp, #8]
  40151a:	2420      	movs	r4, #32
  40151c:	9403      	str	r4, [sp, #12]
  40151e:	2480      	movs	r4, #128	; 0x80
  401520:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  401522:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  401524:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401526:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  401528:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40152c:	d814      	bhi.n	401558 <tc_find_mck_divisor+0x4a>
  40152e:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  401530:	42a0      	cmp	r0, r4
  401532:	d217      	bcs.n	401564 <tc_find_mck_divisor+0x56>
  401534:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  401536:	af01      	add	r7, sp, #4
  401538:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40153c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  401540:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  401542:	4284      	cmp	r4, r0
  401544:	d30a      	bcc.n	40155c <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  401546:	4286      	cmp	r6, r0
  401548:	d90d      	bls.n	401566 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40154a:	3501      	adds	r5, #1
	for (ul_index = 0;
  40154c:	2d05      	cmp	r5, #5
  40154e:	d1f3      	bne.n	401538 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  401550:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  401552:	b006      	add	sp, #24
  401554:	bcf0      	pop	{r4, r5, r6, r7}
  401556:	4770      	bx	lr
			return 0;
  401558:	2000      	movs	r0, #0
  40155a:	e7fa      	b.n	401552 <tc_find_mck_divisor+0x44>
  40155c:	2000      	movs	r0, #0
  40155e:	e7f8      	b.n	401552 <tc_find_mck_divisor+0x44>
	return 1;
  401560:	2001      	movs	r0, #1
  401562:	e7f6      	b.n	401552 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  401564:	2500      	movs	r5, #0
	if (p_uldiv) {
  401566:	b12a      	cbz	r2, 401574 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  401568:	a906      	add	r1, sp, #24
  40156a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40156e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  401572:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  401574:	2b00      	cmp	r3, #0
  401576:	d0f3      	beq.n	401560 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  401578:	601d      	str	r5, [r3, #0]
	return 1;
  40157a:	2001      	movs	r0, #1
  40157c:	e7e9      	b.n	401552 <tc_find_mck_divisor+0x44>

0040157e <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40157e:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401580:	23ac      	movs	r3, #172	; 0xac
  401582:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401584:	680b      	ldr	r3, [r1, #0]
  401586:	684a      	ldr	r2, [r1, #4]
  401588:	fbb3 f3f2 	udiv	r3, r3, r2
  40158c:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40158e:	1e5c      	subs	r4, r3, #1
  401590:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401594:	4294      	cmp	r4, r2
  401596:	d80c      	bhi.n	4015b2 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  401598:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40159a:	688b      	ldr	r3, [r1, #8]
  40159c:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40159e:	f240 2302 	movw	r3, #514	; 0x202
  4015a2:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4015a6:	2350      	movs	r3, #80	; 0x50
  4015a8:	6003      	str	r3, [r0, #0]

	return 0;
  4015aa:	2000      	movs	r0, #0
}
  4015ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  4015b0:	4770      	bx	lr
		return 1;
  4015b2:	2001      	movs	r0, #1
  4015b4:	e7fa      	b.n	4015ac <uart_init+0x2e>

004015b6 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  4015b6:	6081      	str	r1, [r0, #8]
  4015b8:	4770      	bx	lr

004015ba <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  4015ba:	6940      	ldr	r0, [r0, #20]
}
  4015bc:	4770      	bx	lr

004015be <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4015be:	6943      	ldr	r3, [r0, #20]
  4015c0:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4015c4:	bf1a      	itte	ne
  4015c6:	61c1      	strne	r1, [r0, #28]
	return 0;
  4015c8:	2000      	movne	r0, #0
		return 1;
  4015ca:	2001      	moveq	r0, #1
}
  4015cc:	4770      	bx	lr

004015ce <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4015ce:	6943      	ldr	r3, [r0, #20]
  4015d0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4015d4:	bf1d      	ittte	ne
  4015d6:	6983      	ldrne	r3, [r0, #24]
  4015d8:	700b      	strbne	r3, [r1, #0]
	return 0;
  4015da:	2000      	movne	r0, #0
		return 1;
  4015dc:	2001      	moveq	r0, #1
}
  4015de:	4770      	bx	lr

004015e0 <uart_get_pdc_base>:
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
}
  4015e0:	4b03      	ldr	r3, [pc, #12]	; (4015f0 <uart_get_pdc_base+0x10>)
  4015e2:	4a04      	ldr	r2, [pc, #16]	; (4015f4 <uart_get_pdc_base+0x14>)
  4015e4:	4904      	ldr	r1, [pc, #16]	; (4015f8 <uart_get_pdc_base+0x18>)
  4015e6:	4288      	cmp	r0, r1
  4015e8:	bf14      	ite	ne
  4015ea:	4610      	movne	r0, r2
  4015ec:	4618      	moveq	r0, r3
  4015ee:	4770      	bx	lr
  4015f0:	40060700 	.word	0x40060700
  4015f4:	400e0700 	.word	0x400e0700
  4015f8:	40060600 	.word	0x40060600

004015fc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4015fc:	6943      	ldr	r3, [r0, #20]
  4015fe:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401602:	bf1d      	ittte	ne
  401604:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  401608:	61c1      	strne	r1, [r0, #28]
	return 0;
  40160a:	2000      	movne	r0, #0
		return 1;
  40160c:	2001      	moveq	r0, #1
}
  40160e:	4770      	bx	lr

00401610 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401610:	6943      	ldr	r3, [r0, #20]
  401612:	f013 0f01 	tst.w	r3, #1
  401616:	d005      	beq.n	401624 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401618:	6983      	ldr	r3, [r0, #24]
  40161a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40161e:	600b      	str	r3, [r1, #0]

	return 0;
  401620:	2000      	movs	r0, #0
  401622:	4770      	bx	lr
		return 1;
  401624:	2001      	movs	r0, #1
}
  401626:	4770      	bx	lr

00401628 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401628:	e7fe      	b.n	401628 <Dummy_Handler>
	...

0040162c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40162c:	b500      	push	{lr}
  40162e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  401630:	4b25      	ldr	r3, [pc, #148]	; (4016c8 <Reset_Handler+0x9c>)
  401632:	4a26      	ldr	r2, [pc, #152]	; (4016cc <Reset_Handler+0xa0>)
  401634:	429a      	cmp	r2, r3
  401636:	d010      	beq.n	40165a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  401638:	4b25      	ldr	r3, [pc, #148]	; (4016d0 <Reset_Handler+0xa4>)
  40163a:	4a23      	ldr	r2, [pc, #140]	; (4016c8 <Reset_Handler+0x9c>)
  40163c:	429a      	cmp	r2, r3
  40163e:	d20c      	bcs.n	40165a <Reset_Handler+0x2e>
  401640:	3b01      	subs	r3, #1
  401642:	1a9b      	subs	r3, r3, r2
  401644:	f023 0303 	bic.w	r3, r3, #3
  401648:	3304      	adds	r3, #4
  40164a:	4413      	add	r3, r2
  40164c:	491f      	ldr	r1, [pc, #124]	; (4016cc <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40164e:	f851 0b04 	ldr.w	r0, [r1], #4
  401652:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  401656:	429a      	cmp	r2, r3
  401658:	d1f9      	bne.n	40164e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40165a:	4b1e      	ldr	r3, [pc, #120]	; (4016d4 <Reset_Handler+0xa8>)
  40165c:	4a1e      	ldr	r2, [pc, #120]	; (4016d8 <Reset_Handler+0xac>)
  40165e:	429a      	cmp	r2, r3
  401660:	d20a      	bcs.n	401678 <Reset_Handler+0x4c>
  401662:	3b01      	subs	r3, #1
  401664:	1a9b      	subs	r3, r3, r2
  401666:	f023 0303 	bic.w	r3, r3, #3
  40166a:	3304      	adds	r3, #4
  40166c:	4413      	add	r3, r2
		*pDest++ = 0;
  40166e:	2100      	movs	r1, #0
  401670:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  401674:	4293      	cmp	r3, r2
  401676:	d1fb      	bne.n	401670 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401678:	4a18      	ldr	r2, [pc, #96]	; (4016dc <Reset_Handler+0xb0>)
  40167a:	4b19      	ldr	r3, [pc, #100]	; (4016e0 <Reset_Handler+0xb4>)
  40167c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401680:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401682:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401686:	fab3 f383 	clz	r3, r3
  40168a:	095b      	lsrs	r3, r3, #5
  40168c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40168e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401690:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401694:	2200      	movs	r2, #0
  401696:	4b13      	ldr	r3, [pc, #76]	; (4016e4 <Reset_Handler+0xb8>)
  401698:	701a      	strb	r2, [r3, #0]
	return flags;
  40169a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40169c:	4a12      	ldr	r2, [pc, #72]	; (4016e8 <Reset_Handler+0xbc>)
  40169e:	6813      	ldr	r3, [r2, #0]
  4016a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4016a4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4016a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4016aa:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  4016ae:	b129      	cbz	r1, 4016bc <Reset_Handler+0x90>
		cpu_irq_enable();
  4016b0:	2201      	movs	r2, #1
  4016b2:	4b0c      	ldr	r3, [pc, #48]	; (4016e4 <Reset_Handler+0xb8>)
  4016b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4016b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4016ba:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4016bc:	4b0b      	ldr	r3, [pc, #44]	; (4016ec <Reset_Handler+0xc0>)
  4016be:	4798      	blx	r3

	/* Branch to main function */
	main();
  4016c0:	4b0b      	ldr	r3, [pc, #44]	; (4016f0 <Reset_Handler+0xc4>)
  4016c2:	4798      	blx	r3
  4016c4:	e7fe      	b.n	4016c4 <Reset_Handler+0x98>
  4016c6:	bf00      	nop
  4016c8:	20000000 	.word	0x20000000
  4016cc:	00403ab4 	.word	0x00403ab4
  4016d0:	20000874 	.word	0x20000874
  4016d4:	2000d050 	.word	0x2000d050
  4016d8:	20000878 	.word	0x20000878
  4016dc:	e000ed00 	.word	0xe000ed00
  4016e0:	00400000 	.word	0x00400000
  4016e4:	20000018 	.word	0x20000018
  4016e8:	e000ed88 	.word	0xe000ed88
  4016ec:	0040298d 	.word	0x0040298d
  4016f0:	00401b95 	.word	0x00401b95

004016f4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4016f4:	4b3b      	ldr	r3, [pc, #236]	; (4017e4 <SystemCoreClockUpdate+0xf0>)
  4016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016f8:	f003 0303 	and.w	r3, r3, #3
  4016fc:	2b01      	cmp	r3, #1
  4016fe:	d01d      	beq.n	40173c <SystemCoreClockUpdate+0x48>
  401700:	b183      	cbz	r3, 401724 <SystemCoreClockUpdate+0x30>
  401702:	2b02      	cmp	r3, #2
  401704:	d036      	beq.n	401774 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  401706:	4b37      	ldr	r3, [pc, #220]	; (4017e4 <SystemCoreClockUpdate+0xf0>)
  401708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40170a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40170e:	2b70      	cmp	r3, #112	; 0x70
  401710:	d05f      	beq.n	4017d2 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  401712:	4b34      	ldr	r3, [pc, #208]	; (4017e4 <SystemCoreClockUpdate+0xf0>)
  401714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401716:	4934      	ldr	r1, [pc, #208]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  401718:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40171c:	680b      	ldr	r3, [r1, #0]
  40171e:	40d3      	lsrs	r3, r2
  401720:	600b      	str	r3, [r1, #0]
  401722:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401724:	4b31      	ldr	r3, [pc, #196]	; (4017ec <SystemCoreClockUpdate+0xf8>)
  401726:	695b      	ldr	r3, [r3, #20]
  401728:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40172c:	bf14      	ite	ne
  40172e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401732:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401736:	4b2c      	ldr	r3, [pc, #176]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  401738:	601a      	str	r2, [r3, #0]
  40173a:	e7e4      	b.n	401706 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40173c:	4b29      	ldr	r3, [pc, #164]	; (4017e4 <SystemCoreClockUpdate+0xf0>)
  40173e:	6a1b      	ldr	r3, [r3, #32]
  401740:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401744:	d003      	beq.n	40174e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401746:	4a2a      	ldr	r2, [pc, #168]	; (4017f0 <SystemCoreClockUpdate+0xfc>)
  401748:	4b27      	ldr	r3, [pc, #156]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  40174a:	601a      	str	r2, [r3, #0]
  40174c:	e7db      	b.n	401706 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40174e:	4a29      	ldr	r2, [pc, #164]	; (4017f4 <SystemCoreClockUpdate+0x100>)
  401750:	4b25      	ldr	r3, [pc, #148]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  401752:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401754:	4b23      	ldr	r3, [pc, #140]	; (4017e4 <SystemCoreClockUpdate+0xf0>)
  401756:	6a1b      	ldr	r3, [r3, #32]
  401758:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40175c:	2b10      	cmp	r3, #16
  40175e:	d005      	beq.n	40176c <SystemCoreClockUpdate+0x78>
  401760:	2b20      	cmp	r3, #32
  401762:	d1d0      	bne.n	401706 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  401764:	4a22      	ldr	r2, [pc, #136]	; (4017f0 <SystemCoreClockUpdate+0xfc>)
  401766:	4b20      	ldr	r3, [pc, #128]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  401768:	601a      	str	r2, [r3, #0]
				break;
  40176a:	e7cc      	b.n	401706 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  40176c:	4a22      	ldr	r2, [pc, #136]	; (4017f8 <SystemCoreClockUpdate+0x104>)
  40176e:	4b1e      	ldr	r3, [pc, #120]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  401770:	601a      	str	r2, [r3, #0]
				break;
  401772:	e7c8      	b.n	401706 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401774:	4b1b      	ldr	r3, [pc, #108]	; (4017e4 <SystemCoreClockUpdate+0xf0>)
  401776:	6a1b      	ldr	r3, [r3, #32]
  401778:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40177c:	d016      	beq.n	4017ac <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40177e:	4a1c      	ldr	r2, [pc, #112]	; (4017f0 <SystemCoreClockUpdate+0xfc>)
  401780:	4b19      	ldr	r3, [pc, #100]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  401782:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  401784:	4b17      	ldr	r3, [pc, #92]	; (4017e4 <SystemCoreClockUpdate+0xf0>)
  401786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401788:	f003 0303 	and.w	r3, r3, #3
  40178c:	2b02      	cmp	r3, #2
  40178e:	d1ba      	bne.n	401706 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401790:	4a14      	ldr	r2, [pc, #80]	; (4017e4 <SystemCoreClockUpdate+0xf0>)
  401792:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401794:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401796:	4814      	ldr	r0, [pc, #80]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401798:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40179c:	6803      	ldr	r3, [r0, #0]
  40179e:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4017a2:	b2d2      	uxtb	r2, r2
  4017a4:	fbb3 f3f2 	udiv	r3, r3, r2
  4017a8:	6003      	str	r3, [r0, #0]
  4017aa:	e7ac      	b.n	401706 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017ac:	4a11      	ldr	r2, [pc, #68]	; (4017f4 <SystemCoreClockUpdate+0x100>)
  4017ae:	4b0e      	ldr	r3, [pc, #56]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  4017b0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4017b2:	4b0c      	ldr	r3, [pc, #48]	; (4017e4 <SystemCoreClockUpdate+0xf0>)
  4017b4:	6a1b      	ldr	r3, [r3, #32]
  4017b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017ba:	2b10      	cmp	r3, #16
  4017bc:	d005      	beq.n	4017ca <SystemCoreClockUpdate+0xd6>
  4017be:	2b20      	cmp	r3, #32
  4017c0:	d1e0      	bne.n	401784 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4017c2:	4a0b      	ldr	r2, [pc, #44]	; (4017f0 <SystemCoreClockUpdate+0xfc>)
  4017c4:	4b08      	ldr	r3, [pc, #32]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  4017c6:	601a      	str	r2, [r3, #0]
				break;
  4017c8:	e7dc      	b.n	401784 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4017ca:	4a0b      	ldr	r2, [pc, #44]	; (4017f8 <SystemCoreClockUpdate+0x104>)
  4017cc:	4b06      	ldr	r3, [pc, #24]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  4017ce:	601a      	str	r2, [r3, #0]
				break;
  4017d0:	e7d8      	b.n	401784 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4017d2:	4a05      	ldr	r2, [pc, #20]	; (4017e8 <SystemCoreClockUpdate+0xf4>)
  4017d4:	6813      	ldr	r3, [r2, #0]
  4017d6:	4909      	ldr	r1, [pc, #36]	; (4017fc <SystemCoreClockUpdate+0x108>)
  4017d8:	fba1 1303 	umull	r1, r3, r1, r3
  4017dc:	085b      	lsrs	r3, r3, #1
  4017de:	6013      	str	r3, [r2, #0]
  4017e0:	4770      	bx	lr
  4017e2:	bf00      	nop
  4017e4:	400e0400 	.word	0x400e0400
  4017e8:	2000001c 	.word	0x2000001c
  4017ec:	400e1810 	.word	0x400e1810
  4017f0:	00b71b00 	.word	0x00b71b00
  4017f4:	003d0900 	.word	0x003d0900
  4017f8:	007a1200 	.word	0x007a1200
  4017fc:	aaaaaaab 	.word	0xaaaaaaab

00401800 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401800:	4b12      	ldr	r3, [pc, #72]	; (40184c <system_init_flash+0x4c>)
  401802:	4298      	cmp	r0, r3
  401804:	d911      	bls.n	40182a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  401806:	4b12      	ldr	r3, [pc, #72]	; (401850 <system_init_flash+0x50>)
  401808:	4298      	cmp	r0, r3
  40180a:	d913      	bls.n	401834 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  40180c:	4b11      	ldr	r3, [pc, #68]	; (401854 <system_init_flash+0x54>)
  40180e:	4298      	cmp	r0, r3
  401810:	d914      	bls.n	40183c <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401812:	4b11      	ldr	r3, [pc, #68]	; (401858 <system_init_flash+0x58>)
  401814:	4298      	cmp	r0, r3
  401816:	d915      	bls.n	401844 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401818:	4b10      	ldr	r3, [pc, #64]	; (40185c <system_init_flash+0x5c>)
  40181a:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40181c:	bf94      	ite	ls
  40181e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401822:	4a0f      	ldrhi	r2, [pc, #60]	; (401860 <system_init_flash+0x60>)
  401824:	4b0f      	ldr	r3, [pc, #60]	; (401864 <system_init_flash+0x64>)
  401826:	601a      	str	r2, [r3, #0]
  401828:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40182a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40182e:	4b0d      	ldr	r3, [pc, #52]	; (401864 <system_init_flash+0x64>)
  401830:	601a      	str	r2, [r3, #0]
  401832:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401834:	4a0c      	ldr	r2, [pc, #48]	; (401868 <system_init_flash+0x68>)
  401836:	4b0b      	ldr	r3, [pc, #44]	; (401864 <system_init_flash+0x64>)
  401838:	601a      	str	r2, [r3, #0]
  40183a:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40183c:	4a0b      	ldr	r2, [pc, #44]	; (40186c <system_init_flash+0x6c>)
  40183e:	4b09      	ldr	r3, [pc, #36]	; (401864 <system_init_flash+0x64>)
  401840:	601a      	str	r2, [r3, #0]
  401842:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401844:	4a0a      	ldr	r2, [pc, #40]	; (401870 <system_init_flash+0x70>)
  401846:	4b07      	ldr	r3, [pc, #28]	; (401864 <system_init_flash+0x64>)
  401848:	601a      	str	r2, [r3, #0]
  40184a:	4770      	bx	lr
  40184c:	01312cff 	.word	0x01312cff
  401850:	026259ff 	.word	0x026259ff
  401854:	039386ff 	.word	0x039386ff
  401858:	04c4b3ff 	.word	0x04c4b3ff
  40185c:	05f5e0ff 	.word	0x05f5e0ff
  401860:	04000500 	.word	0x04000500
  401864:	400e0a00 	.word	0x400e0a00
  401868:	04000100 	.word	0x04000100
  40186c:	04000200 	.word	0x04000200
  401870:	04000300 	.word	0x04000300

00401874 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401874:	4b0a      	ldr	r3, [pc, #40]	; (4018a0 <_sbrk+0x2c>)
  401876:	681b      	ldr	r3, [r3, #0]
  401878:	b153      	cbz	r3, 401890 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40187a:	4b09      	ldr	r3, [pc, #36]	; (4018a0 <_sbrk+0x2c>)
  40187c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40187e:	181a      	adds	r2, r3, r0
  401880:	4908      	ldr	r1, [pc, #32]	; (4018a4 <_sbrk+0x30>)
  401882:	4291      	cmp	r1, r2
  401884:	db08      	blt.n	401898 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401886:	4610      	mov	r0, r2
  401888:	4a05      	ldr	r2, [pc, #20]	; (4018a0 <_sbrk+0x2c>)
  40188a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40188c:	4618      	mov	r0, r3
  40188e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401890:	4a05      	ldr	r2, [pc, #20]	; (4018a8 <_sbrk+0x34>)
  401892:	4b03      	ldr	r3, [pc, #12]	; (4018a0 <_sbrk+0x2c>)
  401894:	601a      	str	r2, [r3, #0]
  401896:	e7f0      	b.n	40187a <_sbrk+0x6>
		return (caddr_t) -1;	
  401898:	f04f 30ff 	mov.w	r0, #4294967295
}
  40189c:	4770      	bx	lr
  40189e:	bf00      	nop
  4018a0:	20000ae8 	.word	0x20000ae8
  4018a4:	2001fffc 	.word	0x2001fffc
  4018a8:	20010050 	.word	0x20010050

004018ac <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4018ac:	f04f 30ff 	mov.w	r0, #4294967295
  4018b0:	4770      	bx	lr

004018b2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4018b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4018b6:	604b      	str	r3, [r1, #4]

	return 0;
}
  4018b8:	2000      	movs	r0, #0
  4018ba:	4770      	bx	lr

004018bc <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4018bc:	2000      	movs	r0, #0
  4018be:	4770      	bx	lr

004018c0 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  4018c0:	b500      	push	{lr}
  4018c2:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  4018c4:	2201      	movs	r2, #1
  4018c6:	f10d 0107 	add.w	r1, sp, #7
  4018ca:	4810      	ldr	r0, [pc, #64]	; (40190c <USART0_Handler+0x4c>)
  4018cc:	4b10      	ldr	r3, [pc, #64]	; (401910 <USART0_Handler+0x50>)
  4018ce:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4018d0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4018d2:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  4018d6:	2200      	movs	r2, #0
  4018d8:	4b0e      	ldr	r3, [pc, #56]	; (401914 <USART0_Handler+0x54>)
  4018da:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  4018dc:	4b0e      	ldr	r3, [pc, #56]	; (401918 <USART0_Handler+0x58>)
  4018de:	781b      	ldrb	r3, [r3, #0]
  4018e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
  4018e4:	4a0d      	ldr	r2, [pc, #52]	; (40191c <USART0_Handler+0x5c>)
  4018e6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  4018e8:	2b9b      	cmp	r3, #155	; 0x9b
  4018ea:	d00b      	beq.n	401904 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  4018ec:	3301      	adds	r3, #1
  4018ee:	4a0a      	ldr	r2, [pc, #40]	; (401918 <USART0_Handler+0x58>)
  4018f0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  4018f2:	2201      	movs	r2, #1
  4018f4:	4b07      	ldr	r3, [pc, #28]	; (401914 <USART0_Handler+0x54>)
  4018f6:	701a      	strb	r2, [r3, #0]
  4018f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4018fc:	b662      	cpsie	i
}
  4018fe:	b003      	add	sp, #12
  401900:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  401904:	2200      	movs	r2, #0
  401906:	4b04      	ldr	r3, [pc, #16]	; (401918 <USART0_Handler+0x58>)
  401908:	701a      	strb	r2, [r3, #0]
  40190a:	e7f2      	b.n	4018f2 <USART0_Handler+0x32>
  40190c:	400a0000 	.word	0x400a0000
  401910:	00400de5 	.word	0x00400de5
  401914:	20000018 	.word	0x20000018
  401918:	20000b88 	.word	0x20000b88
  40191c:	20000aec 	.word	0x20000aec

00401920 <addSampleCollector>:

/* Add sample to the signal buffer */

void addSampleCollector(uint16_t sample){
	
	if (bufferIndexCollector<buffersize )
  401920:	4b08      	ldr	r3, [pc, #32]	; (401944 <addSampleCollector+0x24>)
  401922:	881b      	ldrh	r3, [r3, #0]
  401924:	f242 028d 	movw	r2, #8333	; 0x208d
  401928:	4293      	cmp	r3, r2
  40192a:	d80a      	bhi.n	401942 <addSampleCollector+0x22>
	{
		if (bufferIndexCollector !=0 && bufferIndexCollector != 8333) afec_buffer_collector[bufferIndexCollector]= sample;
  40192c:	b12b      	cbz	r3, 40193a <addSampleCollector+0x1a>
  40192e:	4293      	cmp	r3, r2
  401930:	d003      	beq.n	40193a <addSampleCollector+0x1a>
  401932:	4a05      	ldr	r2, [pc, #20]	; (401948 <addSampleCollector+0x28>)
  401934:	6812      	ldr	r2, [r2, #0]
  401936:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
		bufferIndexCollector++;
  40193a:	4a02      	ldr	r2, [pc, #8]	; (401944 <addSampleCollector+0x24>)
  40193c:	8813      	ldrh	r3, [r2, #0]
  40193e:	3301      	adds	r3, #1
  401940:	8013      	strh	r3, [r2, #0]
  401942:	4770      	bx	lr
  401944:	2000cee0 	.word	0x2000cee0
  401948:	20000020 	.word	0x20000020

0040194c <switchBuffer>:
/* Buffer switch operation, signal buffer and algorithm are switched. 
   If 16 buffers have been filled, the contents of the algorithm buffer are switched to the transmit buffer. */

volatile void switchBuffer(void){
	
	buffersFilled++;
  40194c:	4b0d      	ldr	r3, [pc, #52]	; (401984 <switchBuffer+0x38>)
  40194e:	881b      	ldrh	r3, [r3, #0]
  401950:	3301      	adds	r3, #1
  401952:	b29b      	uxth	r3, r3
	if (buffersFilled>16)
  401954:	2b10      	cmp	r3, #16
  401956:	d80b      	bhi.n	401970 <switchBuffer+0x24>
	buffersFilled++;
  401958:	4a0a      	ldr	r2, [pc, #40]	; (401984 <switchBuffer+0x38>)
  40195a:	8013      	strh	r3, [r2, #0]
	uint16_t* temp = *x;
  40195c:	4a0a      	ldr	r2, [pc, #40]	; (401988 <switchBuffer+0x3c>)
  40195e:	6811      	ldr	r1, [r2, #0]
	*x=*y;
  401960:	4b0a      	ldr	r3, [pc, #40]	; (40198c <switchBuffer+0x40>)
  401962:	6818      	ldr	r0, [r3, #0]
  401964:	6010      	str	r0, [r2, #0]
	*y=temp;
  401966:	6019      	str	r1, [r3, #0]
		
	} 
	
	swap(&afec_buffer_collector, &algorithm_buffer);
		
	bufferIndexCollector=0;
  401968:	2200      	movs	r2, #0
  40196a:	4b09      	ldr	r3, [pc, #36]	; (401990 <switchBuffer+0x44>)
  40196c:	801a      	strh	r2, [r3, #0]
  40196e:	4770      	bx	lr
		buffersFilled=0; 
  401970:	2200      	movs	r2, #0
  401972:	4b04      	ldr	r3, [pc, #16]	; (401984 <switchBuffer+0x38>)
  401974:	801a      	strh	r2, [r3, #0]
	uint16_t* temp = *x;
  401976:	4a05      	ldr	r2, [pc, #20]	; (40198c <switchBuffer+0x40>)
  401978:	6811      	ldr	r1, [r2, #0]
	*x=*y;
  40197a:	4b06      	ldr	r3, [pc, #24]	; (401994 <switchBuffer+0x48>)
  40197c:	6818      	ldr	r0, [r3, #0]
  40197e:	6010      	str	r0, [r2, #0]
	*y=temp;
  401980:	6019      	str	r1, [r3, #0]
  401982:	e7eb      	b.n	40195c <switchBuffer+0x10>
  401984:	2000cee2 	.word	0x2000cee2
  401988:	20000020 	.word	0x20000020
  40198c:	20000024 	.word	0x20000024
  401990:	2000cee0 	.word	0x2000cee0
  401994:	20000028 	.word	0x20000028

00401998 <cycleEnded>:
		
}

/* Fills possible gap at the end of the signal buffer with zeros, and performs the buffer pointer switch */

void cycleEnded(void){
  401998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	if (bufferIndexCollector < buffersize)
  40199a:	4b0a      	ldr	r3, [pc, #40]	; (4019c4 <cycleEnded+0x2c>)
  40199c:	881b      	ldrh	r3, [r3, #0]
  40199e:	f242 028d 	movw	r2, #8333	; 0x208d
  4019a2:	4293      	cmp	r3, r2
  4019a4:	d80a      	bhi.n	4019bc <cycleEnded+0x24>
	{
		for (int i=bufferIndexCollector;i<buffersize;i++)
  4019a6:	461c      	mov	r4, r3
  4019a8:	dc08      	bgt.n	4019bc <cycleEnded+0x24>
		{
			addSampleCollector(0);
  4019aa:	2700      	movs	r7, #0
  4019ac:	4e06      	ldr	r6, [pc, #24]	; (4019c8 <cycleEnded+0x30>)
		for (int i=bufferIndexCollector;i<buffersize;i++)
  4019ae:	f242 058e 	movw	r5, #8334	; 0x208e
			addSampleCollector(0);
  4019b2:	4638      	mov	r0, r7
  4019b4:	47b0      	blx	r6
		for (int i=bufferIndexCollector;i<buffersize;i++)
  4019b6:	3401      	adds	r4, #1
  4019b8:	42ac      	cmp	r4, r5
  4019ba:	d1fa      	bne.n	4019b2 <cycleEnded+0x1a>
		}
	} 
	
	
	switchBuffer();
  4019bc:	4b03      	ldr	r3, [pc, #12]	; (4019cc <cycleEnded+0x34>)
  4019be:	4798      	blx	r3
  4019c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4019c2:	bf00      	nop
  4019c4:	2000cee0 	.word	0x2000cee0
  4019c8:	00401921 	.word	0x00401921
  4019cc:	0040194d 	.word	0x0040194d

004019d0 <setDelimiters>:



void setDelimiters(void)
{
	buffer0[0] = 144;
  4019d0:	4806      	ldr	r0, [pc, #24]	; (4019ec <setDelimiters+0x1c>)
  4019d2:	2190      	movs	r1, #144	; 0x90
  4019d4:	8001      	strh	r1, [r0, #0]
	buffer0[8333] = 33;
  4019d6:	f244 131a 	movw	r3, #16666	; 0x411a
  4019da:	2221      	movs	r2, #33	; 0x21
  4019dc:	52c2      	strh	r2, [r0, r3]
		
	buffer1[0] = 144;
  4019de:	4804      	ldr	r0, [pc, #16]	; (4019f0 <setDelimiters+0x20>)
  4019e0:	8001      	strh	r1, [r0, #0]
	buffer1[8333] = 33;
  4019e2:	52c2      	strh	r2, [r0, r3]
	
	buffer2[0] = 144;
  4019e4:	4803      	ldr	r0, [pc, #12]	; (4019f4 <setDelimiters+0x24>)
  4019e6:	8001      	strh	r1, [r0, #0]
	buffer2[8333] = 33;
  4019e8:	52c2      	strh	r2, [r0, r3]
  4019ea:	4770      	bx	lr
  4019ec:	20000b8c 	.word	0x20000b8c
  4019f0:	20004ca8 	.word	0x20004ca8
  4019f4:	20008dc4 	.word	0x20008dc4

004019f8 <collector_data_ready>:


/* AFEC0 interrupt callback function. */

static void collector_data_ready(void)
{
  4019f8:	b508      	push	{r3, lr}
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  4019fa:	4b04      	ldr	r3, [pc, #16]	; (401a0c <collector_data_ready+0x14>)
  4019fc:	6a18      	ldr	r0, [r3, #32]
	collector_sample_data = afec_get_latest_value(AFEC0);										// Obtain latest sample from COLLECTOR signal (EXT3 - pin4 (ch6))
  4019fe:	b280      	uxth	r0, r0
  401a00:	4b03      	ldr	r3, [pc, #12]	; (401a10 <collector_data_ready+0x18>)
  401a02:	8018      	strh	r0, [r3, #0]
	addSampleCollector(collector_sample_data);													// Add the sample to the collector signal buffer
  401a04:	4b03      	ldr	r3, [pc, #12]	; (401a14 <collector_data_ready+0x1c>)
  401a06:	4798      	blx	r3
  401a08:	bd08      	pop	{r3, pc}
  401a0a:	bf00      	nop
  401a0c:	400b0000 	.word	0x400b0000
  401a10:	2000cee4 	.word	0x2000cee4
  401a14:	00401921 	.word	0x00401921

00401a18 <ACC_Handler>:
{
  401a18:	b570      	push	{r4, r5, r6, lr}
  401a1a:	b084      	sub	sp, #16
	triggerOffset = config[0];												// Obtain the trigger offset from configuration array
  401a1c:	4b35      	ldr	r3, [pc, #212]	; (401af4 <ACC_Handler+0xdc>)
  401a1e:	781b      	ldrb	r3, [r3, #0]
	if (triggerOffset > 67) triggerOffset = 67;								// Set trigger offset to 67 if larger (upper limit of one cycle)
  401a20:	2b43      	cmp	r3, #67	; 0x43
  401a22:	d809      	bhi.n	401a38 <ACC_Handler+0x20>
	triggerOffset = config[0];												// Obtain the trigger offset from configuration array
  401a24:	4a34      	ldr	r2, [pc, #208]	; (401af8 <ACC_Handler+0xe0>)
  401a26:	7013      	strb	r3, [r2, #0]
	ul_status = acc_get_interrupt_status(ACC);								
  401a28:	4834      	ldr	r0, [pc, #208]	; (401afc <ACC_Handler+0xe4>)
  401a2a:	4b35      	ldr	r3, [pc, #212]	; (401b00 <ACC_Handler+0xe8>)
  401a2c:	4798      	blx	r3
	if ((ul_status & ACC_ISR_CE) == ACC_ISR_CE) 
  401a2e:	f010 0f01 	tst.w	r0, #1
  401a32:	d105      	bne.n	401a40 <ACC_Handler+0x28>
}
  401a34:	b004      	add	sp, #16
  401a36:	bd70      	pop	{r4, r5, r6, pc}
	if (triggerOffset > 67) triggerOffset = 67;								// Set trigger offset to 67 if larger (upper limit of one cycle)
  401a38:	2243      	movs	r2, #67	; 0x43
  401a3a:	4b2f      	ldr	r3, [pc, #188]	; (401af8 <ACC_Handler+0xe0>)
  401a3c:	701a      	strb	r2, [r3, #0]
  401a3e:	e7f3      	b.n	401a28 <ACC_Handler+0x10>
		if (acc_get_comparison_result(ACC))									// check if Vin+ > Vin-
  401a40:	482e      	ldr	r0, [pc, #184]	; (401afc <ACC_Handler+0xe4>)
  401a42:	4b30      	ldr	r3, [pc, #192]	; (401b04 <ACC_Handler+0xec>)
  401a44:	4798      	blx	r3
  401a46:	2800      	cmp	r0, #0
  401a48:	d04b      	beq.n	401ae2 <ACC_Handler+0xca>
			if(!triggered)
  401a4a:	4b2f      	ldr	r3, [pc, #188]	; (401b08 <ACC_Handler+0xf0>)
  401a4c:	781b      	ldrb	r3, [r3, #0]
  401a4e:	2b00      	cmp	r3, #0
  401a50:	d1f0      	bne.n	401a34 <ACC_Handler+0x1c>
				triggered= true;											
  401a52:	2301      	movs	r3, #1
  401a54:	4a2c      	ldr	r2, [pc, #176]	; (401b08 <ACC_Handler+0xf0>)
  401a56:	7013      	strb	r3, [r2, #0]
				fullBuffer=true;											
  401a58:	4a2c      	ldr	r2, [pc, #176]	; (401b0c <ACC_Handler+0xf4>)
  401a5a:	7013      	strb	r3, [r2, #0]
				if(triggerOffset == 0)
  401a5c:	4b26      	ldr	r3, [pc, #152]	; (401af8 <ACC_Handler+0xe0>)
  401a5e:	781a      	ldrb	r2, [r3, #0]
  401a60:	b932      	cbnz	r2, 401a70 <ACC_Handler+0x58>
					tc_start(TC0,0);
  401a62:	2100      	movs	r1, #0
  401a64:	482a      	ldr	r0, [pc, #168]	; (401b10 <ACC_Handler+0xf8>)
  401a66:	4b2b      	ldr	r3, [pc, #172]	; (401b14 <ACC_Handler+0xfc>)
  401a68:	4798      	blx	r3
					cycleEnded();											// performs the buffer pointer switch 
  401a6a:	4b2b      	ldr	r3, [pc, #172]	; (401b18 <ACC_Handler+0x100>)
  401a6c:	4798      	blx	r3
  401a6e:	e7e1      	b.n	401a34 <ACC_Handler+0x1c>
/* Configure a delay timer to create the desired phase offset configured by the operator */

static void setDelayTimer(int delayFreq){
	
	uint32_t ul_sysclk = sysclk_get_cpu_hz();											
	uint32_t ul_div=0;
  401a70:	2100      	movs	r1, #0
  401a72:	9102      	str	r1, [sp, #8]
	uint32_t ul_tc_clks=0;
  401a74:	ab04      	add	r3, sp, #16
  401a76:	f843 1d04 	str.w	r1, [r3, #-4]!
					setDelayTimer(1000/triggerOffset);						// set the delay timer frequency based on trigger delay time
  401a7a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  401a7e:	fb96 f6f2 	sdiv	r6, r6, r2
	uint32_t counts=0;
	tc_find_mck_divisor(delayFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  401a82:	4c26      	ldr	r4, [pc, #152]	; (401b1c <ACC_Handler+0x104>)
  401a84:	9400      	str	r4, [sp, #0]
  401a86:	aa02      	add	r2, sp, #8
  401a88:	4621      	mov	r1, r4
  401a8a:	4630      	mov	r0, r6
  401a8c:	4d24      	ldr	r5, [pc, #144]	; (401b20 <ACC_Handler+0x108>)
  401a8e:	47a8      	blx	r5
	tc_init(TC0,1,ul_tc_clks | TC_CMR_CPCTRG);
  401a90:	4d1f      	ldr	r5, [pc, #124]	; (401b10 <ACC_Handler+0xf8>)
  401a92:	9a03      	ldr	r2, [sp, #12]
  401a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401a98:	2101      	movs	r1, #1
  401a9a:	4628      	mov	r0, r5
  401a9c:	4b21      	ldr	r3, [pc, #132]	; (401b24 <ACC_Handler+0x10c>)
  401a9e:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/delayFreq;
  401aa0:	9a02      	ldr	r2, [sp, #8]
  401aa2:	fbb4 f2f2 	udiv	r2, r4, r2
	tc_write_rc(TC0,1,counts);
  401aa6:	fbb2 f2f6 	udiv	r2, r2, r6
  401aaa:	2101      	movs	r1, #1
  401aac:	4628      	mov	r0, r5
  401aae:	4b1e      	ldr	r3, [pc, #120]	; (401b28 <ACC_Handler+0x110>)
  401ab0:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ab2:	4b1e      	ldr	r3, [pc, #120]	; (401b2c <ACC_Handler+0x114>)
  401ab4:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
  401ab8:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  401abc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401ac0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ac4:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ac8:	601c      	str	r4, [r3, #0]
	
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	NVIC_EnableIRQ((IRQn_Type) ID_TC1);
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
  401aca:	2210      	movs	r2, #16
  401acc:	2101      	movs	r1, #1
  401ace:	4628      	mov	r0, r5
  401ad0:	4b17      	ldr	r3, [pc, #92]	; (401b30 <ACC_Handler+0x118>)
  401ad2:	4798      	blx	r3
					tc_start(TC0,1);
  401ad4:	2101      	movs	r1, #1
  401ad6:	4628      	mov	r0, r5
  401ad8:	4b0e      	ldr	r3, [pc, #56]	; (401b14 <ACC_Handler+0xfc>)
  401ada:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401adc:	4b15      	ldr	r3, [pc, #84]	; (401b34 <ACC_Handler+0x11c>)
  401ade:	635c      	str	r4, [r3, #52]	; 0x34
  401ae0:	e7a8      	b.n	401a34 <ACC_Handler+0x1c>
			if(triggered)
  401ae2:	4b09      	ldr	r3, [pc, #36]	; (401b08 <ACC_Handler+0xf0>)
  401ae4:	781b      	ldrb	r3, [r3, #0]
  401ae6:	2b00      	cmp	r3, #0
  401ae8:	d0a4      	beq.n	401a34 <ACC_Handler+0x1c>
			triggered=false;
  401aea:	2200      	movs	r2, #0
  401aec:	4b06      	ldr	r3, [pc, #24]	; (401b08 <ACC_Handler+0xf0>)
  401aee:	701a      	strb	r2, [r3, #0]
}
  401af0:	e7a0      	b.n	401a34 <ACC_Handler+0x1c>
  401af2:	bf00      	nop
  401af4:	20000adc 	.word	0x20000adc
  401af8:	2000cee7 	.word	0x2000cee7
  401afc:	400bc000 	.word	0x400bc000
  401b00:	00400ffd 	.word	0x00400ffd
  401b04:	00400fe3 	.word	0x00400fe3
  401b08:	2000cee8 	.word	0x2000cee8
  401b0c:	2000cee6 	.word	0x2000cee6
  401b10:	40090000 	.word	0x40090000
  401b14:	004014e7 	.word	0x004014e7
  401b18:	00401999 	.word	0x00401999
  401b1c:	05b8d800 	.word	0x05b8d800
  401b20:	0040150f 	.word	0x0040150f
  401b24:	004014cd 	.word	0x004014cd
  401b28:	004014f7 	.word	0x004014f7
  401b2c:	e000e100 	.word	0xe000e100
  401b30:	004014ff 	.word	0x004014ff
  401b34:	400e1400 	.word	0x400e1400

00401b38 <TC1_Handler>:
void TC1_Handler(void){
  401b38:	b510      	push	{r4, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401b3e:	4a0e      	ldr	r2, [pc, #56]	; (401b78 <TC1_Handler+0x40>)
  401b40:	6313      	str	r3, [r2, #48]	; 0x30
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b42:	4a0e      	ldr	r2, [pc, #56]	; (401b7c <TC1_Handler+0x44>)
  401b44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  401b48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401b4c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b50:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	tc_disable_interrupt(TC0, 1, TC_IER_CPCS);
  401b54:	4c0a      	ldr	r4, [pc, #40]	; (401b80 <TC1_Handler+0x48>)
  401b56:	2210      	movs	r2, #16
  401b58:	2101      	movs	r1, #1
  401b5a:	4620      	mov	r0, r4
  401b5c:	4b09      	ldr	r3, [pc, #36]	; (401b84 <TC1_Handler+0x4c>)
  401b5e:	4798      	blx	r3
	tc_stop(TC0,1);
  401b60:	2101      	movs	r1, #1
  401b62:	4620      	mov	r0, r4
  401b64:	4b08      	ldr	r3, [pc, #32]	; (401b88 <TC1_Handler+0x50>)
  401b66:	4798      	blx	r3
	cycleEnded();
  401b68:	4b08      	ldr	r3, [pc, #32]	; (401b8c <TC1_Handler+0x54>)
  401b6a:	4798      	blx	r3
	tc_start(TC0,0);
  401b6c:	2100      	movs	r1, #0
  401b6e:	4620      	mov	r0, r4
  401b70:	4b07      	ldr	r3, [pc, #28]	; (401b90 <TC1_Handler+0x58>)
  401b72:	4798      	blx	r3
  401b74:	bd10      	pop	{r4, pc}
  401b76:	bf00      	nop
  401b78:	400e1400 	.word	0x400e1400
  401b7c:	e000e100 	.word	0xe000e100
  401b80:	40090000 	.word	0x40090000
  401b84:	00401507 	.word	0x00401507
  401b88:	004014ef 	.word	0x004014ef
  401b8c:	00401999 	.word	0x00401999
  401b90:	004014e7 	.word	0x004014e7

00401b94 <main>:
}

/* Main entry point of the application */

int main (void)
{
  401b94:	b580      	push	{r7, lr}
  401b96:	b08c      	sub	sp, #48	; 0x30
	/* Initializations of peripherals */
	
	sysclk_init();
  401b98:	4b57      	ldr	r3, [pc, #348]	; (401cf8 <main+0x164>)
  401b9a:	4798      	blx	r3
	board_init();
  401b9c:	4b57      	ldr	r3, [pc, #348]	; (401cfc <main+0x168>)
  401b9e:	4798      	blx	r3
	pdc_uart_initialization();
  401ba0:	4b57      	ldr	r3, [pc, #348]	; (401d00 <main+0x16c>)
  401ba2:	4798      	blx	r3
	afec_enable(AFEC0);
  401ba4:	4c57      	ldr	r4, [pc, #348]	; (401d04 <main+0x170>)
  401ba6:	4620      	mov	r0, r4
  401ba8:	4b57      	ldr	r3, [pc, #348]	; (401d08 <main+0x174>)
  401baa:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  401bac:	a805      	add	r0, sp, #20
  401bae:	4b57      	ldr	r3, [pc, #348]	; (401d0c <main+0x178>)
  401bb0:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  401bb2:	a802      	add	r0, sp, #8
  401bb4:	4b56      	ldr	r3, [pc, #344]	; (401d10 <main+0x17c>)
  401bb6:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  401bb8:	a905      	add	r1, sp, #20
  401bba:	4620      	mov	r0, r4
  401bbc:	4b55      	ldr	r3, [pc, #340]	; (401d14 <main+0x180>)
  401bbe:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  401bc0:	aa02      	add	r2, sp, #8
  401bc2:	2106      	movs	r1, #6
  401bc4:	4620      	mov	r0, r4
  401bc6:	4b54      	ldr	r3, [pc, #336]	; (401d18 <main+0x184>)
  401bc8:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  401bca:	2306      	movs	r3, #6
  401bcc:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  401bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401bd2:	66e3      	str	r3, [r4, #108]	; 0x6c
    uint32_t ul_div = 0;
  401bd4:	2700      	movs	r7, #0
  401bd6:	9703      	str	r7, [sp, #12]
	uint32_t ul_tc_clks = 0;
  401bd8:	ae0c      	add	r6, sp, #48	; 0x30
  401bda:	f846 7d20 	str.w	r7, [r6, #-32]!
	pmc_enable_periph_clk(ID_TC0);														// Enable peripheral clock of timer counter 0
  401bde:	2015      	movs	r0, #21
  401be0:	4d4e      	ldr	r5, [pc, #312]	; (401d1c <main+0x188>)
  401be2:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_TC1);
  401be4:	2016      	movs	r0, #22
  401be6:	47a8      	blx	r5
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  401be8:	4d4d      	ldr	r5, [pc, #308]	; (401d20 <main+0x18c>)
  401bea:	9500      	str	r5, [sp, #0]
  401bec:	4633      	mov	r3, r6
  401bee:	aa03      	add	r2, sp, #12
  401bf0:	4629      	mov	r1, r5
  401bf2:	484c      	ldr	r0, [pc, #304]	; (401d24 <main+0x190>)
  401bf4:	4e4c      	ldr	r6, [pc, #304]	; (401d28 <main+0x194>)
  401bf6:	47b0      	blx	r6
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  401bf8:	4e4c      	ldr	r6, [pc, #304]	; (401d2c <main+0x198>)
  401bfa:	9a04      	ldr	r2, [sp, #16]
  401bfc:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  401c00:	4639      	mov	r1, r7
  401c02:	4630      	mov	r0, r6
  401c04:	4b4a      	ldr	r3, [pc, #296]	; (401d30 <main+0x19c>)
  401c06:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  401c08:	9b03      	ldr	r3, [sp, #12]
  401c0a:	fbb5 f3f3 	udiv	r3, r5, r3
  401c0e:	4a49      	ldr	r2, [pc, #292]	; (401d34 <main+0x1a0>)
  401c10:	fba2 2303 	umull	r2, r3, r2, r3
  401c14:	0c1a      	lsrs	r2, r3, #16
  401c16:	6172      	str	r2, [r6, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  401c18:	0bdb      	lsrs	r3, r3, #15
  401c1a:	61f3      	str	r3, [r6, #28]
	reg = afec->AFEC_MR;
  401c1c:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  401c1e:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  401c22:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  401c26:	6063      	str	r3, [r4, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401c28:	2340      	movs	r3, #64	; 0x40
  401c2a:	6163      	str	r3, [r4, #20]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, collector_data_ready, 1);
  401c2c:	2301      	movs	r3, #1
  401c2e:	4a42      	ldr	r2, [pc, #264]	; (401d38 <main+0x1a4>)
  401c30:	2110      	movs	r1, #16
  401c32:	4620      	mov	r0, r4
  401c34:	4d41      	ldr	r5, [pc, #260]	; (401d3c <main+0x1a8>)
  401c36:	47a8      	blx	r5
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  401c38:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  401c3a:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  401c3c:	6863      	ldr	r3, [r4, #4]
  401c3e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401c42:	d101      	bne.n	401c48 <main+0xb4>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  401c44:	2208      	movs	r2, #8
  401c46:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  401c48:	4b2e      	ldr	r3, [pc, #184]	; (401d04 <main+0x170>)
  401c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  401c4c:	2a00      	cmp	r2, #0
  401c4e:	dafc      	bge.n	401c4a <main+0xb6>
	pmc_enable_periph_clk(ID_DACC);
  401c50:	2020      	movs	r0, #32
  401c52:	4d32      	ldr	r5, [pc, #200]	; (401d1c <main+0x188>)
  401c54:	47a8      	blx	r5
	dacc_reset(DACC);
  401c56:	4c3a      	ldr	r4, [pc, #232]	; (401d40 <main+0x1ac>)
  401c58:	4620      	mov	r0, r4
  401c5a:	4b3a      	ldr	r3, [pc, #232]	; (401d44 <main+0x1b0>)
  401c5c:	4798      	blx	r3
	dacc_disable_trigger(DACC);
  401c5e:	4620      	mov	r0, r4
  401c60:	4b39      	ldr	r3, [pc, #228]	; (401d48 <main+0x1b4>)
  401c62:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
  401c64:	2100      	movs	r1, #0
  401c66:	4620      	mov	r0, r4
  401c68:	4b38      	ldr	r3, [pc, #224]	; (401d4c <main+0x1b8>)
  401c6a:	4798      	blx	r3
	dacc_set_timing(DACC, 0, 0xf);
  401c6c:	220f      	movs	r2, #15
  401c6e:	2100      	movs	r1, #0
  401c70:	4620      	mov	r0, r4
  401c72:	4b37      	ldr	r3, [pc, #220]	; (401d50 <main+0x1bc>)
  401c74:	4798      	blx	r3
	dacc_set_channel_selection(DACC, DACC_CHANNEL_0);
  401c76:	2100      	movs	r1, #0
  401c78:	4620      	mov	r0, r4
  401c7a:	4b36      	ldr	r3, [pc, #216]	; (401d54 <main+0x1c0>)
  401c7c:	4798      	blx	r3
	dacc_enable_channel(DACC, DACC_CHANNEL_0);
  401c7e:	2100      	movs	r1, #0
  401c80:	4620      	mov	r0, r4
  401c82:	4b35      	ldr	r3, [pc, #212]	; (401d58 <main+0x1c4>)
  401c84:	4798      	blx	r3
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  401c86:	f44f 7185 	mov.w	r1, #266	; 0x10a
  401c8a:	4620      	mov	r0, r4
  401c8c:	4b33      	ldr	r3, [pc, #204]	; (401d5c <main+0x1c8>)
  401c8e:	4798      	blx	r3
	dacc_write_conversion_data(DACC, 3100);
  401c90:	f640 411c 	movw	r1, #3100	; 0xc1c
  401c94:	4620      	mov	r0, r4
  401c96:	4b32      	ldr	r3, [pc, #200]	; (401d60 <main+0x1cc>)
  401c98:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401c9a:	4b32      	ldr	r3, [pc, #200]	; (401d64 <main+0x1d0>)
  401c9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401ca0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ca2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	configure_afec();
	configureDACC();
	ioport_set_pin_dir(delayPin,IOPORT_DIR_OUTPUT);
	pmc_enable_periph_clk(ID_ACC);
  401ca6:	2021      	movs	r0, #33	; 0x21
  401ca8:	47a8      	blx	r5
	acc_init(ACC, ACC_MR_SELPLUS_AD7, ACC_MR_SELMINUS_DAC0,			// set pin AFEC1 AD1 (EXT1 pin 4) as + comparator and DAC channel 0 as -
  401caa:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
  401cae:	2300      	movs	r3, #0
  401cb0:	9300      	str	r3, [sp, #0]
  401cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401cb6:	2202      	movs	r2, #2
  401cb8:	2170      	movs	r1, #112	; 0x70
  401cba:	4620      	mov	r0, r4
  401cbc:	4d2a      	ldr	r5, [pc, #168]	; (401d68 <main+0x1d4>)
  401cbe:	47a8      	blx	r5
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401cc0:	2202      	movs	r2, #2
  401cc2:	4b2a      	ldr	r3, [pc, #168]	; (401d6c <main+0x1d8>)
  401cc4:	605a      	str	r2, [r3, #4]
	ACC_MR_EDGETYP_ANY, ACC_MR_INV_DIS);
	NVIC_EnableIRQ(ACC_IRQn);
	acc_enable_interrupt(ACC);	
  401cc6:	4620      	mov	r0, r4
  401cc8:	4b29      	ldr	r3, [pc, #164]	; (401d70 <main+0x1dc>)
  401cca:	4798      	blx	r3
	/* Main event loop, polling for asynchronous data requests from Matlab application*/
	
	while (1) 
	{
		
		if(fullBuffer)												// flag that indicates a cycle has ended
  401ccc:	4c29      	ldr	r4, [pc, #164]	; (401d74 <main+0x1e0>)
		{
			fullBuffer=false;
			
			/* Compute the parameters corresponding to this cycle*/
			compute_beam_parameters();
  401cce:	4e2a      	ldr	r6, [pc, #168]	; (401d78 <main+0x1e4>)
			
			/* Check if data has to be send */
			if (config[2]!= 0) send_beam_parameters();
  401cd0:	4d2a      	ldr	r5, [pc, #168]	; (401d7c <main+0x1e8>)
  401cd2:	e001      	b.n	401cd8 <main+0x144>
  401cd4:	4b2a      	ldr	r3, [pc, #168]	; (401d80 <main+0x1ec>)
  401cd6:	4798      	blx	r3
		if(fullBuffer)												// flag that indicates a cycle has ended
  401cd8:	7823      	ldrb	r3, [r4, #0]
  401cda:	2b00      	cmp	r3, #0
  401cdc:	d0fc      	beq.n	401cd8 <main+0x144>
			fullBuffer=false;
  401cde:	2300      	movs	r3, #0
  401ce0:	7023      	strb	r3, [r4, #0]
			compute_beam_parameters();
  401ce2:	47b0      	blx	r6
			if (config[2]!= 0) send_beam_parameters();
  401ce4:	78ab      	ldrb	r3, [r5, #2]
  401ce6:	2b00      	cmp	r3, #0
  401ce8:	d1f4      	bne.n	401cd4 <main+0x140>
			else if (config[3]!= 0) send_cycle_plot();
  401cea:	78eb      	ldrb	r3, [r5, #3]
  401cec:	2b00      	cmp	r3, #0
  401cee:	d0f3      	beq.n	401cd8 <main+0x144>
  401cf0:	4b24      	ldr	r3, [pc, #144]	; (401d84 <main+0x1f0>)
  401cf2:	4798      	blx	r3
  401cf4:	e7f0      	b.n	401cd8 <main+0x144>
  401cf6:	bf00      	nop
  401cf8:	00400d7d 	.word	0x00400d7d
  401cfc:	00400f11 	.word	0x00400f11
  401d00:	00400ced 	.word	0x00400ced
  401d04:	400b0000 	.word	0x400b0000
  401d08:	00401295 	.word	0x00401295
  401d0c:	004010cd 	.word	0x004010cd
  401d10:	004010fd 	.word	0x004010fd
  401d14:	00401109 	.word	0x00401109
  401d18:	0040109d 	.word	0x0040109d
  401d1c:	00401479 	.word	0x00401479
  401d20:	05b8d800 	.word	0x05b8d800
  401d24:	0001e848 	.word	0x0001e848
  401d28:	0040150f 	.word	0x0040150f
  401d2c:	40090000 	.word	0x40090000
  401d30:	004014cd 	.word	0x004014cd
  401d34:	431bde83 	.word	0x431bde83
  401d38:	004019f9 	.word	0x004019f9
  401d3c:	00401215 	.word	0x00401215
  401d40:	400b8000 	.word	0x400b8000
  401d44:	004012f9 	.word	0x004012f9
  401d48:	004012ff 	.word	0x004012ff
  401d4c:	00401309 	.word	0x00401309
  401d50:	0040134d 	.word	0x0040134d
  401d54:	00401335 	.word	0x00401335
  401d58:	00401375 	.word	0x00401375
  401d5c:	00401389 	.word	0x00401389
  401d60:	00401331 	.word	0x00401331
  401d64:	400e1400 	.word	0x400e1400
  401d68:	00400fa9 	.word	0x00400fa9
  401d6c:	e000e100 	.word	0xe000e100
  401d70:	00400ff7 	.word	0x00400ff7
  401d74:	2000cee6 	.word	0x2000cee6
  401d78:	0040074d 	.word	0x0040074d
  401d7c:	20000adc 	.word	0x20000adc
  401d80:	00400c45 	.word	0x00400c45
  401d84:	00400c01 	.word	0x00400c01

00401d88 <sqrt>:
  401d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d8c:	b08b      	sub	sp, #44	; 0x2c
  401d8e:	4604      	mov	r4, r0
  401d90:	460d      	mov	r5, r1
  401d92:	f000 f857 	bl	401e44 <__ieee754_sqrt>
  401d96:	4b29      	ldr	r3, [pc, #164]	; (401e3c <sqrt+0xb4>)
  401d98:	f993 a000 	ldrsb.w	sl, [r3]
  401d9c:	f1ba 3fff 	cmp.w	sl, #4294967295
  401da0:	4606      	mov	r6, r0
  401da2:	460f      	mov	r7, r1
  401da4:	d012      	beq.n	401dcc <sqrt+0x44>
  401da6:	4622      	mov	r2, r4
  401da8:	462b      	mov	r3, r5
  401daa:	4620      	mov	r0, r4
  401dac:	4629      	mov	r1, r5
  401dae:	f000 fd59 	bl	402864 <__aeabi_dcmpun>
  401db2:	4683      	mov	fp, r0
  401db4:	b950      	cbnz	r0, 401dcc <sqrt+0x44>
  401db6:	f04f 0800 	mov.w	r8, #0
  401dba:	f04f 0900 	mov.w	r9, #0
  401dbe:	4642      	mov	r2, r8
  401dc0:	464b      	mov	r3, r9
  401dc2:	4620      	mov	r0, r4
  401dc4:	4629      	mov	r1, r5
  401dc6:	f000 fd25 	bl	402814 <__aeabi_dcmplt>
  401dca:	b920      	cbnz	r0, 401dd6 <sqrt+0x4e>
  401dcc:	4630      	mov	r0, r6
  401dce:	4639      	mov	r1, r7
  401dd0:	b00b      	add	sp, #44	; 0x2c
  401dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dd6:	4b1a      	ldr	r3, [pc, #104]	; (401e40 <sqrt+0xb8>)
  401dd8:	f8cd b020 	str.w	fp, [sp, #32]
  401ddc:	2201      	movs	r2, #1
  401dde:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401de2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401de6:	e88d 000c 	stmia.w	sp, {r2, r3}
  401dea:	f1ba 0f00 	cmp.w	sl, #0
  401dee:	d017      	beq.n	401e20 <sqrt+0x98>
  401df0:	4642      	mov	r2, r8
  401df2:	464b      	mov	r3, r9
  401df4:	4640      	mov	r0, r8
  401df6:	4649      	mov	r1, r9
  401df8:	f000 fbc4 	bl	402584 <__aeabi_ddiv>
  401dfc:	f1ba 0f02 	cmp.w	sl, #2
  401e00:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401e04:	d10e      	bne.n	401e24 <sqrt+0x9c>
  401e06:	f000 fdbb 	bl	402980 <__errno>
  401e0a:	2321      	movs	r3, #33	; 0x21
  401e0c:	6003      	str	r3, [r0, #0]
  401e0e:	9b08      	ldr	r3, [sp, #32]
  401e10:	b973      	cbnz	r3, 401e30 <sqrt+0xa8>
  401e12:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  401e16:	4630      	mov	r0, r6
  401e18:	4639      	mov	r1, r7
  401e1a:	b00b      	add	sp, #44	; 0x2c
  401e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e20:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401e24:	4668      	mov	r0, sp
  401e26:	f000 f8c9 	bl	401fbc <matherr>
  401e2a:	2800      	cmp	r0, #0
  401e2c:	d1ef      	bne.n	401e0e <sqrt+0x86>
  401e2e:	e7ea      	b.n	401e06 <sqrt+0x7e>
  401e30:	f000 fda6 	bl	402980 <__errno>
  401e34:	9b08      	ldr	r3, [sp, #32]
  401e36:	6003      	str	r3, [r0, #0]
  401e38:	e7eb      	b.n	401e12 <sqrt+0x8a>
  401e3a:	bf00      	nop
  401e3c:	2000002c 	.word	0x2000002c
  401e40:	00403a84 	.word	0x00403a84

00401e44 <__ieee754_sqrt>:
  401e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401e48:	4f5b      	ldr	r7, [pc, #364]	; (401fb8 <__ieee754_sqrt+0x174>)
  401e4a:	438f      	bics	r7, r1
  401e4c:	4605      	mov	r5, r0
  401e4e:	460c      	mov	r4, r1
  401e50:	f000 8092 	beq.w	401f78 <__ieee754_sqrt+0x134>
  401e54:	2900      	cmp	r1, #0
  401e56:	460b      	mov	r3, r1
  401e58:	4602      	mov	r2, r0
  401e5a:	dd6f      	ble.n	401f3c <__ieee754_sqrt+0xf8>
  401e5c:	150f      	asrs	r7, r1, #20
  401e5e:	d07b      	beq.n	401f58 <__ieee754_sqrt+0x114>
  401e60:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  401e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
  401e68:	07f8      	lsls	r0, r7, #31
  401e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401e6e:	d45c      	bmi.n	401f2a <__ieee754_sqrt+0xe6>
  401e70:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  401e74:	2600      	movs	r6, #0
  401e76:	440b      	add	r3, r1
  401e78:	107f      	asrs	r7, r7, #1
  401e7a:	0052      	lsls	r2, r2, #1
  401e7c:	46b6      	mov	lr, r6
  401e7e:	2016      	movs	r0, #22
  401e80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401e84:	eb0e 0401 	add.w	r4, lr, r1
  401e88:	429c      	cmp	r4, r3
  401e8a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  401e8e:	ea4f 0242 	mov.w	r2, r2, lsl #1
  401e92:	dc03      	bgt.n	401e9c <__ieee754_sqrt+0x58>
  401e94:	1b1b      	subs	r3, r3, r4
  401e96:	eb04 0e01 	add.w	lr, r4, r1
  401e9a:	440e      	add	r6, r1
  401e9c:	3801      	subs	r0, #1
  401e9e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  401ea2:	ea4f 0151 	mov.w	r1, r1, lsr #1
  401ea6:	d1ed      	bne.n	401e84 <__ieee754_sqrt+0x40>
  401ea8:	4684      	mov	ip, r0
  401eaa:	2420      	movs	r4, #32
  401eac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401eb0:	e009      	b.n	401ec6 <__ieee754_sqrt+0x82>
  401eb2:	d020      	beq.n	401ef6 <__ieee754_sqrt+0xb2>
  401eb4:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  401eb8:	3c01      	subs	r4, #1
  401eba:	ea4f 0151 	mov.w	r1, r1, lsr #1
  401ebe:	442b      	add	r3, r5
  401ec0:	ea4f 0242 	mov.w	r2, r2, lsl #1
  401ec4:	d020      	beq.n	401f08 <__ieee754_sqrt+0xc4>
  401ec6:	4573      	cmp	r3, lr
  401ec8:	eb01 050c 	add.w	r5, r1, ip
  401ecc:	ddf1      	ble.n	401eb2 <__ieee754_sqrt+0x6e>
  401ece:	2d00      	cmp	r5, #0
  401ed0:	eb05 0c01 	add.w	ip, r5, r1
  401ed4:	db09      	blt.n	401eea <__ieee754_sqrt+0xa6>
  401ed6:	46f0      	mov	r8, lr
  401ed8:	4295      	cmp	r5, r2
  401eda:	eba3 030e 	sub.w	r3, r3, lr
  401ede:	d900      	bls.n	401ee2 <__ieee754_sqrt+0x9e>
  401ee0:	3b01      	subs	r3, #1
  401ee2:	1b52      	subs	r2, r2, r5
  401ee4:	4408      	add	r0, r1
  401ee6:	46c6      	mov	lr, r8
  401ee8:	e7e4      	b.n	401eb4 <__ieee754_sqrt+0x70>
  401eea:	f1bc 0f00 	cmp.w	ip, #0
  401eee:	dbf2      	blt.n	401ed6 <__ieee754_sqrt+0x92>
  401ef0:	f10e 0801 	add.w	r8, lr, #1
  401ef4:	e7f0      	b.n	401ed8 <__ieee754_sqrt+0x94>
  401ef6:	4295      	cmp	r5, r2
  401ef8:	d8dc      	bhi.n	401eb4 <__ieee754_sqrt+0x70>
  401efa:	2d00      	cmp	r5, #0
  401efc:	eb05 0c01 	add.w	ip, r5, r1
  401f00:	db44      	blt.n	401f8c <__ieee754_sqrt+0x148>
  401f02:	4698      	mov	r8, r3
  401f04:	2300      	movs	r3, #0
  401f06:	e7ec      	b.n	401ee2 <__ieee754_sqrt+0x9e>
  401f08:	4313      	orrs	r3, r2
  401f0a:	d113      	bne.n	401f34 <__ieee754_sqrt+0xf0>
  401f0c:	0840      	lsrs	r0, r0, #1
  401f0e:	1073      	asrs	r3, r6, #1
  401f10:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  401f14:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401f18:	07f2      	lsls	r2, r6, #31
  401f1a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  401f1e:	bf48      	it	mi
  401f20:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  401f24:	4649      	mov	r1, r9
  401f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f2a:	005b      	lsls	r3, r3, #1
  401f2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  401f30:	0052      	lsls	r2, r2, #1
  401f32:	e79d      	b.n	401e70 <__ieee754_sqrt+0x2c>
  401f34:	1c41      	adds	r1, r0, #1
  401f36:	d02d      	beq.n	401f94 <__ieee754_sqrt+0x150>
  401f38:	3001      	adds	r0, #1
  401f3a:	e7e7      	b.n	401f0c <__ieee754_sqrt+0xc8>
  401f3c:	4606      	mov	r6, r0
  401f3e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  401f42:	433e      	orrs	r6, r7
  401f44:	d0ef      	beq.n	401f26 <__ieee754_sqrt+0xe2>
  401f46:	bb69      	cbnz	r1, 401fa4 <__ieee754_sqrt+0x160>
  401f48:	460f      	mov	r7, r1
  401f4a:	0ad3      	lsrs	r3, r2, #11
  401f4c:	3f15      	subs	r7, #21
  401f4e:	0552      	lsls	r2, r2, #21
  401f50:	2b00      	cmp	r3, #0
  401f52:	d0fa      	beq.n	401f4a <__ieee754_sqrt+0x106>
  401f54:	02de      	lsls	r6, r3, #11
  401f56:	d420      	bmi.n	401f9a <__ieee754_sqrt+0x156>
  401f58:	2400      	movs	r4, #0
  401f5a:	e000      	b.n	401f5e <__ieee754_sqrt+0x11a>
  401f5c:	4604      	mov	r4, r0
  401f5e:	005b      	lsls	r3, r3, #1
  401f60:	02dd      	lsls	r5, r3, #11
  401f62:	f104 0001 	add.w	r0, r4, #1
  401f66:	d5f9      	bpl.n	401f5c <__ieee754_sqrt+0x118>
  401f68:	f1c0 0120 	rsb	r1, r0, #32
  401f6c:	fa22 f101 	lsr.w	r1, r2, r1
  401f70:	430b      	orrs	r3, r1
  401f72:	1b3f      	subs	r7, r7, r4
  401f74:	4082      	lsls	r2, r0
  401f76:	e773      	b.n	401e60 <__ieee754_sqrt+0x1c>
  401f78:	4602      	mov	r2, r0
  401f7a:	460b      	mov	r3, r1
  401f7c:	f000 f9d8 	bl	402330 <__aeabi_dmul>
  401f80:	462a      	mov	r2, r5
  401f82:	4623      	mov	r3, r4
  401f84:	f000 f822 	bl	401fcc <__adddf3>
  401f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f8c:	f1bc 0f00 	cmp.w	ip, #0
  401f90:	daae      	bge.n	401ef0 <__ieee754_sqrt+0xac>
  401f92:	e7b6      	b.n	401f02 <__ieee754_sqrt+0xbe>
  401f94:	3601      	adds	r6, #1
  401f96:	4620      	mov	r0, r4
  401f98:	e7b9      	b.n	401f0e <__ieee754_sqrt+0xca>
  401f9a:	2000      	movs	r0, #0
  401f9c:	2120      	movs	r1, #32
  401f9e:	f04f 34ff 	mov.w	r4, #4294967295
  401fa2:	e7e3      	b.n	401f6c <__ieee754_sqrt+0x128>
  401fa4:	4602      	mov	r2, r0
  401fa6:	460b      	mov	r3, r1
  401fa8:	f000 f80e 	bl	401fc8 <__aeabi_dsub>
  401fac:	4602      	mov	r2, r0
  401fae:	460b      	mov	r3, r1
  401fb0:	f000 fae8 	bl	402584 <__aeabi_ddiv>
  401fb4:	e7b7      	b.n	401f26 <__ieee754_sqrt+0xe2>
  401fb6:	bf00      	nop
  401fb8:	7ff00000 	.word	0x7ff00000

00401fbc <matherr>:
  401fbc:	2000      	movs	r0, #0
  401fbe:	4770      	bx	lr

00401fc0 <__aeabi_drsub>:
  401fc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401fc4:	e002      	b.n	401fcc <__adddf3>
  401fc6:	bf00      	nop

00401fc8 <__aeabi_dsub>:
  401fc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401fcc <__adddf3>:
  401fcc:	b530      	push	{r4, r5, lr}
  401fce:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401fd2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401fd6:	ea94 0f05 	teq	r4, r5
  401fda:	bf08      	it	eq
  401fdc:	ea90 0f02 	teqeq	r0, r2
  401fe0:	bf1f      	itttt	ne
  401fe2:	ea54 0c00 	orrsne.w	ip, r4, r0
  401fe6:	ea55 0c02 	orrsne.w	ip, r5, r2
  401fea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401fee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401ff2:	f000 80e2 	beq.w	4021ba <__adddf3+0x1ee>
  401ff6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401ffa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401ffe:	bfb8      	it	lt
  402000:	426d      	neglt	r5, r5
  402002:	dd0c      	ble.n	40201e <__adddf3+0x52>
  402004:	442c      	add	r4, r5
  402006:	ea80 0202 	eor.w	r2, r0, r2
  40200a:	ea81 0303 	eor.w	r3, r1, r3
  40200e:	ea82 0000 	eor.w	r0, r2, r0
  402012:	ea83 0101 	eor.w	r1, r3, r1
  402016:	ea80 0202 	eor.w	r2, r0, r2
  40201a:	ea81 0303 	eor.w	r3, r1, r3
  40201e:	2d36      	cmp	r5, #54	; 0x36
  402020:	bf88      	it	hi
  402022:	bd30      	pophi	{r4, r5, pc}
  402024:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402028:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40202c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402030:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402034:	d002      	beq.n	40203c <__adddf3+0x70>
  402036:	4240      	negs	r0, r0
  402038:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40203c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402040:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402044:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402048:	d002      	beq.n	402050 <__adddf3+0x84>
  40204a:	4252      	negs	r2, r2
  40204c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402050:	ea94 0f05 	teq	r4, r5
  402054:	f000 80a7 	beq.w	4021a6 <__adddf3+0x1da>
  402058:	f1a4 0401 	sub.w	r4, r4, #1
  40205c:	f1d5 0e20 	rsbs	lr, r5, #32
  402060:	db0d      	blt.n	40207e <__adddf3+0xb2>
  402062:	fa02 fc0e 	lsl.w	ip, r2, lr
  402066:	fa22 f205 	lsr.w	r2, r2, r5
  40206a:	1880      	adds	r0, r0, r2
  40206c:	f141 0100 	adc.w	r1, r1, #0
  402070:	fa03 f20e 	lsl.w	r2, r3, lr
  402074:	1880      	adds	r0, r0, r2
  402076:	fa43 f305 	asr.w	r3, r3, r5
  40207a:	4159      	adcs	r1, r3
  40207c:	e00e      	b.n	40209c <__adddf3+0xd0>
  40207e:	f1a5 0520 	sub.w	r5, r5, #32
  402082:	f10e 0e20 	add.w	lr, lr, #32
  402086:	2a01      	cmp	r2, #1
  402088:	fa03 fc0e 	lsl.w	ip, r3, lr
  40208c:	bf28      	it	cs
  40208e:	f04c 0c02 	orrcs.w	ip, ip, #2
  402092:	fa43 f305 	asr.w	r3, r3, r5
  402096:	18c0      	adds	r0, r0, r3
  402098:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40209c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4020a0:	d507      	bpl.n	4020b2 <__adddf3+0xe6>
  4020a2:	f04f 0e00 	mov.w	lr, #0
  4020a6:	f1dc 0c00 	rsbs	ip, ip, #0
  4020aa:	eb7e 0000 	sbcs.w	r0, lr, r0
  4020ae:	eb6e 0101 	sbc.w	r1, lr, r1
  4020b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4020b6:	d31b      	bcc.n	4020f0 <__adddf3+0x124>
  4020b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4020bc:	d30c      	bcc.n	4020d8 <__adddf3+0x10c>
  4020be:	0849      	lsrs	r1, r1, #1
  4020c0:	ea5f 0030 	movs.w	r0, r0, rrx
  4020c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4020c8:	f104 0401 	add.w	r4, r4, #1
  4020cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4020d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4020d4:	f080 809a 	bcs.w	40220c <__adddf3+0x240>
  4020d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4020dc:	bf08      	it	eq
  4020de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4020e2:	f150 0000 	adcs.w	r0, r0, #0
  4020e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4020ea:	ea41 0105 	orr.w	r1, r1, r5
  4020ee:	bd30      	pop	{r4, r5, pc}
  4020f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4020f4:	4140      	adcs	r0, r0
  4020f6:	eb41 0101 	adc.w	r1, r1, r1
  4020fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4020fe:	f1a4 0401 	sub.w	r4, r4, #1
  402102:	d1e9      	bne.n	4020d8 <__adddf3+0x10c>
  402104:	f091 0f00 	teq	r1, #0
  402108:	bf04      	itt	eq
  40210a:	4601      	moveq	r1, r0
  40210c:	2000      	moveq	r0, #0
  40210e:	fab1 f381 	clz	r3, r1
  402112:	bf08      	it	eq
  402114:	3320      	addeq	r3, #32
  402116:	f1a3 030b 	sub.w	r3, r3, #11
  40211a:	f1b3 0220 	subs.w	r2, r3, #32
  40211e:	da0c      	bge.n	40213a <__adddf3+0x16e>
  402120:	320c      	adds	r2, #12
  402122:	dd08      	ble.n	402136 <__adddf3+0x16a>
  402124:	f102 0c14 	add.w	ip, r2, #20
  402128:	f1c2 020c 	rsb	r2, r2, #12
  40212c:	fa01 f00c 	lsl.w	r0, r1, ip
  402130:	fa21 f102 	lsr.w	r1, r1, r2
  402134:	e00c      	b.n	402150 <__adddf3+0x184>
  402136:	f102 0214 	add.w	r2, r2, #20
  40213a:	bfd8      	it	le
  40213c:	f1c2 0c20 	rsble	ip, r2, #32
  402140:	fa01 f102 	lsl.w	r1, r1, r2
  402144:	fa20 fc0c 	lsr.w	ip, r0, ip
  402148:	bfdc      	itt	le
  40214a:	ea41 010c 	orrle.w	r1, r1, ip
  40214e:	4090      	lslle	r0, r2
  402150:	1ae4      	subs	r4, r4, r3
  402152:	bfa2      	ittt	ge
  402154:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402158:	4329      	orrge	r1, r5
  40215a:	bd30      	popge	{r4, r5, pc}
  40215c:	ea6f 0404 	mvn.w	r4, r4
  402160:	3c1f      	subs	r4, #31
  402162:	da1c      	bge.n	40219e <__adddf3+0x1d2>
  402164:	340c      	adds	r4, #12
  402166:	dc0e      	bgt.n	402186 <__adddf3+0x1ba>
  402168:	f104 0414 	add.w	r4, r4, #20
  40216c:	f1c4 0220 	rsb	r2, r4, #32
  402170:	fa20 f004 	lsr.w	r0, r0, r4
  402174:	fa01 f302 	lsl.w	r3, r1, r2
  402178:	ea40 0003 	orr.w	r0, r0, r3
  40217c:	fa21 f304 	lsr.w	r3, r1, r4
  402180:	ea45 0103 	orr.w	r1, r5, r3
  402184:	bd30      	pop	{r4, r5, pc}
  402186:	f1c4 040c 	rsb	r4, r4, #12
  40218a:	f1c4 0220 	rsb	r2, r4, #32
  40218e:	fa20 f002 	lsr.w	r0, r0, r2
  402192:	fa01 f304 	lsl.w	r3, r1, r4
  402196:	ea40 0003 	orr.w	r0, r0, r3
  40219a:	4629      	mov	r1, r5
  40219c:	bd30      	pop	{r4, r5, pc}
  40219e:	fa21 f004 	lsr.w	r0, r1, r4
  4021a2:	4629      	mov	r1, r5
  4021a4:	bd30      	pop	{r4, r5, pc}
  4021a6:	f094 0f00 	teq	r4, #0
  4021aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4021ae:	bf06      	itte	eq
  4021b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4021b4:	3401      	addeq	r4, #1
  4021b6:	3d01      	subne	r5, #1
  4021b8:	e74e      	b.n	402058 <__adddf3+0x8c>
  4021ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4021be:	bf18      	it	ne
  4021c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4021c4:	d029      	beq.n	40221a <__adddf3+0x24e>
  4021c6:	ea94 0f05 	teq	r4, r5
  4021ca:	bf08      	it	eq
  4021cc:	ea90 0f02 	teqeq	r0, r2
  4021d0:	d005      	beq.n	4021de <__adddf3+0x212>
  4021d2:	ea54 0c00 	orrs.w	ip, r4, r0
  4021d6:	bf04      	itt	eq
  4021d8:	4619      	moveq	r1, r3
  4021da:	4610      	moveq	r0, r2
  4021dc:	bd30      	pop	{r4, r5, pc}
  4021de:	ea91 0f03 	teq	r1, r3
  4021e2:	bf1e      	ittt	ne
  4021e4:	2100      	movne	r1, #0
  4021e6:	2000      	movne	r0, #0
  4021e8:	bd30      	popne	{r4, r5, pc}
  4021ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4021ee:	d105      	bne.n	4021fc <__adddf3+0x230>
  4021f0:	0040      	lsls	r0, r0, #1
  4021f2:	4149      	adcs	r1, r1
  4021f4:	bf28      	it	cs
  4021f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4021fa:	bd30      	pop	{r4, r5, pc}
  4021fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402200:	bf3c      	itt	cc
  402202:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402206:	bd30      	popcc	{r4, r5, pc}
  402208:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40220c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402210:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402214:	f04f 0000 	mov.w	r0, #0
  402218:	bd30      	pop	{r4, r5, pc}
  40221a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40221e:	bf1a      	itte	ne
  402220:	4619      	movne	r1, r3
  402222:	4610      	movne	r0, r2
  402224:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402228:	bf1c      	itt	ne
  40222a:	460b      	movne	r3, r1
  40222c:	4602      	movne	r2, r0
  40222e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402232:	bf06      	itte	eq
  402234:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402238:	ea91 0f03 	teqeq	r1, r3
  40223c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402240:	bd30      	pop	{r4, r5, pc}
  402242:	bf00      	nop

00402244 <__aeabi_ui2d>:
  402244:	f090 0f00 	teq	r0, #0
  402248:	bf04      	itt	eq
  40224a:	2100      	moveq	r1, #0
  40224c:	4770      	bxeq	lr
  40224e:	b530      	push	{r4, r5, lr}
  402250:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402254:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402258:	f04f 0500 	mov.w	r5, #0
  40225c:	f04f 0100 	mov.w	r1, #0
  402260:	e750      	b.n	402104 <__adddf3+0x138>
  402262:	bf00      	nop

00402264 <__aeabi_i2d>:
  402264:	f090 0f00 	teq	r0, #0
  402268:	bf04      	itt	eq
  40226a:	2100      	moveq	r1, #0
  40226c:	4770      	bxeq	lr
  40226e:	b530      	push	{r4, r5, lr}
  402270:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402274:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402278:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40227c:	bf48      	it	mi
  40227e:	4240      	negmi	r0, r0
  402280:	f04f 0100 	mov.w	r1, #0
  402284:	e73e      	b.n	402104 <__adddf3+0x138>
  402286:	bf00      	nop

00402288 <__aeabi_f2d>:
  402288:	0042      	lsls	r2, r0, #1
  40228a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40228e:	ea4f 0131 	mov.w	r1, r1, rrx
  402292:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402296:	bf1f      	itttt	ne
  402298:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40229c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4022a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4022a4:	4770      	bxne	lr
  4022a6:	f092 0f00 	teq	r2, #0
  4022aa:	bf14      	ite	ne
  4022ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4022b0:	4770      	bxeq	lr
  4022b2:	b530      	push	{r4, r5, lr}
  4022b4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4022b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4022bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4022c0:	e720      	b.n	402104 <__adddf3+0x138>
  4022c2:	bf00      	nop

004022c4 <__aeabi_ul2d>:
  4022c4:	ea50 0201 	orrs.w	r2, r0, r1
  4022c8:	bf08      	it	eq
  4022ca:	4770      	bxeq	lr
  4022cc:	b530      	push	{r4, r5, lr}
  4022ce:	f04f 0500 	mov.w	r5, #0
  4022d2:	e00a      	b.n	4022ea <__aeabi_l2d+0x16>

004022d4 <__aeabi_l2d>:
  4022d4:	ea50 0201 	orrs.w	r2, r0, r1
  4022d8:	bf08      	it	eq
  4022da:	4770      	bxeq	lr
  4022dc:	b530      	push	{r4, r5, lr}
  4022de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4022e2:	d502      	bpl.n	4022ea <__aeabi_l2d+0x16>
  4022e4:	4240      	negs	r0, r0
  4022e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4022ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4022ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4022f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4022f6:	f43f aedc 	beq.w	4020b2 <__adddf3+0xe6>
  4022fa:	f04f 0203 	mov.w	r2, #3
  4022fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402302:	bf18      	it	ne
  402304:	3203      	addne	r2, #3
  402306:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40230a:	bf18      	it	ne
  40230c:	3203      	addne	r2, #3
  40230e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402312:	f1c2 0320 	rsb	r3, r2, #32
  402316:	fa00 fc03 	lsl.w	ip, r0, r3
  40231a:	fa20 f002 	lsr.w	r0, r0, r2
  40231e:	fa01 fe03 	lsl.w	lr, r1, r3
  402322:	ea40 000e 	orr.w	r0, r0, lr
  402326:	fa21 f102 	lsr.w	r1, r1, r2
  40232a:	4414      	add	r4, r2
  40232c:	e6c1      	b.n	4020b2 <__adddf3+0xe6>
  40232e:	bf00      	nop

00402330 <__aeabi_dmul>:
  402330:	b570      	push	{r4, r5, r6, lr}
  402332:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402336:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40233a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40233e:	bf1d      	ittte	ne
  402340:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402344:	ea94 0f0c 	teqne	r4, ip
  402348:	ea95 0f0c 	teqne	r5, ip
  40234c:	f000 f8de 	bleq	40250c <__aeabi_dmul+0x1dc>
  402350:	442c      	add	r4, r5
  402352:	ea81 0603 	eor.w	r6, r1, r3
  402356:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40235a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40235e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402362:	bf18      	it	ne
  402364:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402368:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40236c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402370:	d038      	beq.n	4023e4 <__aeabi_dmul+0xb4>
  402372:	fba0 ce02 	umull	ip, lr, r0, r2
  402376:	f04f 0500 	mov.w	r5, #0
  40237a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40237e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402382:	fbe0 e503 	umlal	lr, r5, r0, r3
  402386:	f04f 0600 	mov.w	r6, #0
  40238a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40238e:	f09c 0f00 	teq	ip, #0
  402392:	bf18      	it	ne
  402394:	f04e 0e01 	orrne.w	lr, lr, #1
  402398:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40239c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4023a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4023a4:	d204      	bcs.n	4023b0 <__aeabi_dmul+0x80>
  4023a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4023aa:	416d      	adcs	r5, r5
  4023ac:	eb46 0606 	adc.w	r6, r6, r6
  4023b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4023b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4023b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4023bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4023c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4023c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4023c8:	bf88      	it	hi
  4023ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4023ce:	d81e      	bhi.n	40240e <__aeabi_dmul+0xde>
  4023d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4023d4:	bf08      	it	eq
  4023d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4023da:	f150 0000 	adcs.w	r0, r0, #0
  4023de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4023e2:	bd70      	pop	{r4, r5, r6, pc}
  4023e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4023e8:	ea46 0101 	orr.w	r1, r6, r1
  4023ec:	ea40 0002 	orr.w	r0, r0, r2
  4023f0:	ea81 0103 	eor.w	r1, r1, r3
  4023f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4023f8:	bfc2      	ittt	gt
  4023fa:	ebd4 050c 	rsbsgt	r5, r4, ip
  4023fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402402:	bd70      	popgt	{r4, r5, r6, pc}
  402404:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402408:	f04f 0e00 	mov.w	lr, #0
  40240c:	3c01      	subs	r4, #1
  40240e:	f300 80ab 	bgt.w	402568 <__aeabi_dmul+0x238>
  402412:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402416:	bfde      	ittt	le
  402418:	2000      	movle	r0, #0
  40241a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40241e:	bd70      	pople	{r4, r5, r6, pc}
  402420:	f1c4 0400 	rsb	r4, r4, #0
  402424:	3c20      	subs	r4, #32
  402426:	da35      	bge.n	402494 <__aeabi_dmul+0x164>
  402428:	340c      	adds	r4, #12
  40242a:	dc1b      	bgt.n	402464 <__aeabi_dmul+0x134>
  40242c:	f104 0414 	add.w	r4, r4, #20
  402430:	f1c4 0520 	rsb	r5, r4, #32
  402434:	fa00 f305 	lsl.w	r3, r0, r5
  402438:	fa20 f004 	lsr.w	r0, r0, r4
  40243c:	fa01 f205 	lsl.w	r2, r1, r5
  402440:	ea40 0002 	orr.w	r0, r0, r2
  402444:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40244c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402450:	fa21 f604 	lsr.w	r6, r1, r4
  402454:	eb42 0106 	adc.w	r1, r2, r6
  402458:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40245c:	bf08      	it	eq
  40245e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402462:	bd70      	pop	{r4, r5, r6, pc}
  402464:	f1c4 040c 	rsb	r4, r4, #12
  402468:	f1c4 0520 	rsb	r5, r4, #32
  40246c:	fa00 f304 	lsl.w	r3, r0, r4
  402470:	fa20 f005 	lsr.w	r0, r0, r5
  402474:	fa01 f204 	lsl.w	r2, r1, r4
  402478:	ea40 0002 	orr.w	r0, r0, r2
  40247c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402480:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402484:	f141 0100 	adc.w	r1, r1, #0
  402488:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40248c:	bf08      	it	eq
  40248e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402492:	bd70      	pop	{r4, r5, r6, pc}
  402494:	f1c4 0520 	rsb	r5, r4, #32
  402498:	fa00 f205 	lsl.w	r2, r0, r5
  40249c:	ea4e 0e02 	orr.w	lr, lr, r2
  4024a0:	fa20 f304 	lsr.w	r3, r0, r4
  4024a4:	fa01 f205 	lsl.w	r2, r1, r5
  4024a8:	ea43 0302 	orr.w	r3, r3, r2
  4024ac:	fa21 f004 	lsr.w	r0, r1, r4
  4024b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4024b4:	fa21 f204 	lsr.w	r2, r1, r4
  4024b8:	ea20 0002 	bic.w	r0, r0, r2
  4024bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4024c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4024c4:	bf08      	it	eq
  4024c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4024ca:	bd70      	pop	{r4, r5, r6, pc}
  4024cc:	f094 0f00 	teq	r4, #0
  4024d0:	d10f      	bne.n	4024f2 <__aeabi_dmul+0x1c2>
  4024d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4024d6:	0040      	lsls	r0, r0, #1
  4024d8:	eb41 0101 	adc.w	r1, r1, r1
  4024dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4024e0:	bf08      	it	eq
  4024e2:	3c01      	subeq	r4, #1
  4024e4:	d0f7      	beq.n	4024d6 <__aeabi_dmul+0x1a6>
  4024e6:	ea41 0106 	orr.w	r1, r1, r6
  4024ea:	f095 0f00 	teq	r5, #0
  4024ee:	bf18      	it	ne
  4024f0:	4770      	bxne	lr
  4024f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4024f6:	0052      	lsls	r2, r2, #1
  4024f8:	eb43 0303 	adc.w	r3, r3, r3
  4024fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402500:	bf08      	it	eq
  402502:	3d01      	subeq	r5, #1
  402504:	d0f7      	beq.n	4024f6 <__aeabi_dmul+0x1c6>
  402506:	ea43 0306 	orr.w	r3, r3, r6
  40250a:	4770      	bx	lr
  40250c:	ea94 0f0c 	teq	r4, ip
  402510:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402514:	bf18      	it	ne
  402516:	ea95 0f0c 	teqne	r5, ip
  40251a:	d00c      	beq.n	402536 <__aeabi_dmul+0x206>
  40251c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402520:	bf18      	it	ne
  402522:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402526:	d1d1      	bne.n	4024cc <__aeabi_dmul+0x19c>
  402528:	ea81 0103 	eor.w	r1, r1, r3
  40252c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402530:	f04f 0000 	mov.w	r0, #0
  402534:	bd70      	pop	{r4, r5, r6, pc}
  402536:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40253a:	bf06      	itte	eq
  40253c:	4610      	moveq	r0, r2
  40253e:	4619      	moveq	r1, r3
  402540:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402544:	d019      	beq.n	40257a <__aeabi_dmul+0x24a>
  402546:	ea94 0f0c 	teq	r4, ip
  40254a:	d102      	bne.n	402552 <__aeabi_dmul+0x222>
  40254c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402550:	d113      	bne.n	40257a <__aeabi_dmul+0x24a>
  402552:	ea95 0f0c 	teq	r5, ip
  402556:	d105      	bne.n	402564 <__aeabi_dmul+0x234>
  402558:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40255c:	bf1c      	itt	ne
  40255e:	4610      	movne	r0, r2
  402560:	4619      	movne	r1, r3
  402562:	d10a      	bne.n	40257a <__aeabi_dmul+0x24a>
  402564:	ea81 0103 	eor.w	r1, r1, r3
  402568:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40256c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402574:	f04f 0000 	mov.w	r0, #0
  402578:	bd70      	pop	{r4, r5, r6, pc}
  40257a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40257e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402582:	bd70      	pop	{r4, r5, r6, pc}

00402584 <__aeabi_ddiv>:
  402584:	b570      	push	{r4, r5, r6, lr}
  402586:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40258a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40258e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402592:	bf1d      	ittte	ne
  402594:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402598:	ea94 0f0c 	teqne	r4, ip
  40259c:	ea95 0f0c 	teqne	r5, ip
  4025a0:	f000 f8a7 	bleq	4026f2 <__aeabi_ddiv+0x16e>
  4025a4:	eba4 0405 	sub.w	r4, r4, r5
  4025a8:	ea81 0e03 	eor.w	lr, r1, r3
  4025ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4025b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4025b4:	f000 8088 	beq.w	4026c8 <__aeabi_ddiv+0x144>
  4025b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4025bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4025c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4025c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4025c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4025cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4025d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4025d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4025d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4025dc:	429d      	cmp	r5, r3
  4025de:	bf08      	it	eq
  4025e0:	4296      	cmpeq	r6, r2
  4025e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4025e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4025ea:	d202      	bcs.n	4025f2 <__aeabi_ddiv+0x6e>
  4025ec:	085b      	lsrs	r3, r3, #1
  4025ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4025f2:	1ab6      	subs	r6, r6, r2
  4025f4:	eb65 0503 	sbc.w	r5, r5, r3
  4025f8:	085b      	lsrs	r3, r3, #1
  4025fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4025fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402602:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402606:	ebb6 0e02 	subs.w	lr, r6, r2
  40260a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40260e:	bf22      	ittt	cs
  402610:	1ab6      	subcs	r6, r6, r2
  402612:	4675      	movcs	r5, lr
  402614:	ea40 000c 	orrcs.w	r0, r0, ip
  402618:	085b      	lsrs	r3, r3, #1
  40261a:	ea4f 0232 	mov.w	r2, r2, rrx
  40261e:	ebb6 0e02 	subs.w	lr, r6, r2
  402622:	eb75 0e03 	sbcs.w	lr, r5, r3
  402626:	bf22      	ittt	cs
  402628:	1ab6      	subcs	r6, r6, r2
  40262a:	4675      	movcs	r5, lr
  40262c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402630:	085b      	lsrs	r3, r3, #1
  402632:	ea4f 0232 	mov.w	r2, r2, rrx
  402636:	ebb6 0e02 	subs.w	lr, r6, r2
  40263a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40263e:	bf22      	ittt	cs
  402640:	1ab6      	subcs	r6, r6, r2
  402642:	4675      	movcs	r5, lr
  402644:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402648:	085b      	lsrs	r3, r3, #1
  40264a:	ea4f 0232 	mov.w	r2, r2, rrx
  40264e:	ebb6 0e02 	subs.w	lr, r6, r2
  402652:	eb75 0e03 	sbcs.w	lr, r5, r3
  402656:	bf22      	ittt	cs
  402658:	1ab6      	subcs	r6, r6, r2
  40265a:	4675      	movcs	r5, lr
  40265c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402660:	ea55 0e06 	orrs.w	lr, r5, r6
  402664:	d018      	beq.n	402698 <__aeabi_ddiv+0x114>
  402666:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40266a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40266e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402672:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402676:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40267a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40267e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402682:	d1c0      	bne.n	402606 <__aeabi_ddiv+0x82>
  402684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402688:	d10b      	bne.n	4026a2 <__aeabi_ddiv+0x11e>
  40268a:	ea41 0100 	orr.w	r1, r1, r0
  40268e:	f04f 0000 	mov.w	r0, #0
  402692:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402696:	e7b6      	b.n	402606 <__aeabi_ddiv+0x82>
  402698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40269c:	bf04      	itt	eq
  40269e:	4301      	orreq	r1, r0
  4026a0:	2000      	moveq	r0, #0
  4026a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4026a6:	bf88      	it	hi
  4026a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4026ac:	f63f aeaf 	bhi.w	40240e <__aeabi_dmul+0xde>
  4026b0:	ebb5 0c03 	subs.w	ip, r5, r3
  4026b4:	bf04      	itt	eq
  4026b6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4026ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4026be:	f150 0000 	adcs.w	r0, r0, #0
  4026c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4026c6:	bd70      	pop	{r4, r5, r6, pc}
  4026c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4026cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4026d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4026d4:	bfc2      	ittt	gt
  4026d6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4026da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4026de:	bd70      	popgt	{r4, r5, r6, pc}
  4026e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4026e4:	f04f 0e00 	mov.w	lr, #0
  4026e8:	3c01      	subs	r4, #1
  4026ea:	e690      	b.n	40240e <__aeabi_dmul+0xde>
  4026ec:	ea45 0e06 	orr.w	lr, r5, r6
  4026f0:	e68d      	b.n	40240e <__aeabi_dmul+0xde>
  4026f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4026f6:	ea94 0f0c 	teq	r4, ip
  4026fa:	bf08      	it	eq
  4026fc:	ea95 0f0c 	teqeq	r5, ip
  402700:	f43f af3b 	beq.w	40257a <__aeabi_dmul+0x24a>
  402704:	ea94 0f0c 	teq	r4, ip
  402708:	d10a      	bne.n	402720 <__aeabi_ddiv+0x19c>
  40270a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40270e:	f47f af34 	bne.w	40257a <__aeabi_dmul+0x24a>
  402712:	ea95 0f0c 	teq	r5, ip
  402716:	f47f af25 	bne.w	402564 <__aeabi_dmul+0x234>
  40271a:	4610      	mov	r0, r2
  40271c:	4619      	mov	r1, r3
  40271e:	e72c      	b.n	40257a <__aeabi_dmul+0x24a>
  402720:	ea95 0f0c 	teq	r5, ip
  402724:	d106      	bne.n	402734 <__aeabi_ddiv+0x1b0>
  402726:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40272a:	f43f aefd 	beq.w	402528 <__aeabi_dmul+0x1f8>
  40272e:	4610      	mov	r0, r2
  402730:	4619      	mov	r1, r3
  402732:	e722      	b.n	40257a <__aeabi_dmul+0x24a>
  402734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402738:	bf18      	it	ne
  40273a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40273e:	f47f aec5 	bne.w	4024cc <__aeabi_dmul+0x19c>
  402742:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402746:	f47f af0d 	bne.w	402564 <__aeabi_dmul+0x234>
  40274a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40274e:	f47f aeeb 	bne.w	402528 <__aeabi_dmul+0x1f8>
  402752:	e712      	b.n	40257a <__aeabi_dmul+0x24a>

00402754 <__gedf2>:
  402754:	f04f 3cff 	mov.w	ip, #4294967295
  402758:	e006      	b.n	402768 <__cmpdf2+0x4>
  40275a:	bf00      	nop

0040275c <__ledf2>:
  40275c:	f04f 0c01 	mov.w	ip, #1
  402760:	e002      	b.n	402768 <__cmpdf2+0x4>
  402762:	bf00      	nop

00402764 <__cmpdf2>:
  402764:	f04f 0c01 	mov.w	ip, #1
  402768:	f84d cd04 	str.w	ip, [sp, #-4]!
  40276c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402770:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402774:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402778:	bf18      	it	ne
  40277a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40277e:	d01b      	beq.n	4027b8 <__cmpdf2+0x54>
  402780:	b001      	add	sp, #4
  402782:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  402786:	bf0c      	ite	eq
  402788:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40278c:	ea91 0f03 	teqne	r1, r3
  402790:	bf02      	ittt	eq
  402792:	ea90 0f02 	teqeq	r0, r2
  402796:	2000      	moveq	r0, #0
  402798:	4770      	bxeq	lr
  40279a:	f110 0f00 	cmn.w	r0, #0
  40279e:	ea91 0f03 	teq	r1, r3
  4027a2:	bf58      	it	pl
  4027a4:	4299      	cmppl	r1, r3
  4027a6:	bf08      	it	eq
  4027a8:	4290      	cmpeq	r0, r2
  4027aa:	bf2c      	ite	cs
  4027ac:	17d8      	asrcs	r0, r3, #31
  4027ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4027b2:	f040 0001 	orr.w	r0, r0, #1
  4027b6:	4770      	bx	lr
  4027b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4027bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4027c0:	d102      	bne.n	4027c8 <__cmpdf2+0x64>
  4027c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4027c6:	d107      	bne.n	4027d8 <__cmpdf2+0x74>
  4027c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4027cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4027d0:	d1d6      	bne.n	402780 <__cmpdf2+0x1c>
  4027d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4027d6:	d0d3      	beq.n	402780 <__cmpdf2+0x1c>
  4027d8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4027dc:	4770      	bx	lr
  4027de:	bf00      	nop

004027e0 <__aeabi_cdrcmple>:
  4027e0:	4684      	mov	ip, r0
  4027e2:	4610      	mov	r0, r2
  4027e4:	4662      	mov	r2, ip
  4027e6:	468c      	mov	ip, r1
  4027e8:	4619      	mov	r1, r3
  4027ea:	4663      	mov	r3, ip
  4027ec:	e000      	b.n	4027f0 <__aeabi_cdcmpeq>
  4027ee:	bf00      	nop

004027f0 <__aeabi_cdcmpeq>:
  4027f0:	b501      	push	{r0, lr}
  4027f2:	f7ff ffb7 	bl	402764 <__cmpdf2>
  4027f6:	2800      	cmp	r0, #0
  4027f8:	bf48      	it	mi
  4027fa:	f110 0f00 	cmnmi.w	r0, #0
  4027fe:	bd01      	pop	{r0, pc}

00402800 <__aeabi_dcmpeq>:
  402800:	f84d ed08 	str.w	lr, [sp, #-8]!
  402804:	f7ff fff4 	bl	4027f0 <__aeabi_cdcmpeq>
  402808:	bf0c      	ite	eq
  40280a:	2001      	moveq	r0, #1
  40280c:	2000      	movne	r0, #0
  40280e:	f85d fb08 	ldr.w	pc, [sp], #8
  402812:	bf00      	nop

00402814 <__aeabi_dcmplt>:
  402814:	f84d ed08 	str.w	lr, [sp, #-8]!
  402818:	f7ff ffea 	bl	4027f0 <__aeabi_cdcmpeq>
  40281c:	bf34      	ite	cc
  40281e:	2001      	movcc	r0, #1
  402820:	2000      	movcs	r0, #0
  402822:	f85d fb08 	ldr.w	pc, [sp], #8
  402826:	bf00      	nop

00402828 <__aeabi_dcmple>:
  402828:	f84d ed08 	str.w	lr, [sp, #-8]!
  40282c:	f7ff ffe0 	bl	4027f0 <__aeabi_cdcmpeq>
  402830:	bf94      	ite	ls
  402832:	2001      	movls	r0, #1
  402834:	2000      	movhi	r0, #0
  402836:	f85d fb08 	ldr.w	pc, [sp], #8
  40283a:	bf00      	nop

0040283c <__aeabi_dcmpge>:
  40283c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402840:	f7ff ffce 	bl	4027e0 <__aeabi_cdrcmple>
  402844:	bf94      	ite	ls
  402846:	2001      	movls	r0, #1
  402848:	2000      	movhi	r0, #0
  40284a:	f85d fb08 	ldr.w	pc, [sp], #8
  40284e:	bf00      	nop

00402850 <__aeabi_dcmpgt>:
  402850:	f84d ed08 	str.w	lr, [sp, #-8]!
  402854:	f7ff ffc4 	bl	4027e0 <__aeabi_cdrcmple>
  402858:	bf34      	ite	cc
  40285a:	2001      	movcc	r0, #1
  40285c:	2000      	movcs	r0, #0
  40285e:	f85d fb08 	ldr.w	pc, [sp], #8
  402862:	bf00      	nop

00402864 <__aeabi_dcmpun>:
  402864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40286c:	d102      	bne.n	402874 <__aeabi_dcmpun+0x10>
  40286e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  402872:	d10a      	bne.n	40288a <__aeabi_dcmpun+0x26>
  402874:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40287c:	d102      	bne.n	402884 <__aeabi_dcmpun+0x20>
  40287e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  402882:	d102      	bne.n	40288a <__aeabi_dcmpun+0x26>
  402884:	f04f 0000 	mov.w	r0, #0
  402888:	4770      	bx	lr
  40288a:	f04f 0001 	mov.w	r0, #1
  40288e:	4770      	bx	lr

00402890 <__aeabi_d2iz>:
  402890:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402894:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402898:	d215      	bcs.n	4028c6 <__aeabi_d2iz+0x36>
  40289a:	d511      	bpl.n	4028c0 <__aeabi_d2iz+0x30>
  40289c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4028a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4028a4:	d912      	bls.n	4028cc <__aeabi_d2iz+0x3c>
  4028a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4028aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4028ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4028b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4028b6:	fa23 f002 	lsr.w	r0, r3, r2
  4028ba:	bf18      	it	ne
  4028bc:	4240      	negne	r0, r0
  4028be:	4770      	bx	lr
  4028c0:	f04f 0000 	mov.w	r0, #0
  4028c4:	4770      	bx	lr
  4028c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4028ca:	d105      	bne.n	4028d8 <__aeabi_d2iz+0x48>
  4028cc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4028d0:	bf08      	it	eq
  4028d2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4028d6:	4770      	bx	lr
  4028d8:	f04f 0000 	mov.w	r0, #0
  4028dc:	4770      	bx	lr
  4028de:	bf00      	nop

004028e0 <__aeabi_d2f>:
  4028e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4028e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4028e8:	bf24      	itt	cs
  4028ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4028ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4028f2:	d90d      	bls.n	402910 <__aeabi_d2f+0x30>
  4028f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4028f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4028fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  402900:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  402904:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  402908:	bf08      	it	eq
  40290a:	f020 0001 	biceq.w	r0, r0, #1
  40290e:	4770      	bx	lr
  402910:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  402914:	d121      	bne.n	40295a <__aeabi_d2f+0x7a>
  402916:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40291a:	bfbc      	itt	lt
  40291c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  402920:	4770      	bxlt	lr
  402922:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402926:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40292a:	f1c2 0218 	rsb	r2, r2, #24
  40292e:	f1c2 0c20 	rsb	ip, r2, #32
  402932:	fa10 f30c 	lsls.w	r3, r0, ip
  402936:	fa20 f002 	lsr.w	r0, r0, r2
  40293a:	bf18      	it	ne
  40293c:	f040 0001 	orrne.w	r0, r0, #1
  402940:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402944:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  402948:	fa03 fc0c 	lsl.w	ip, r3, ip
  40294c:	ea40 000c 	orr.w	r0, r0, ip
  402950:	fa23 f302 	lsr.w	r3, r3, r2
  402954:	ea4f 0343 	mov.w	r3, r3, lsl #1
  402958:	e7cc      	b.n	4028f4 <__aeabi_d2f+0x14>
  40295a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40295e:	d107      	bne.n	402970 <__aeabi_d2f+0x90>
  402960:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  402964:	bf1e      	ittt	ne
  402966:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40296a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40296e:	4770      	bxne	lr
  402970:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  402974:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402978:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40297c:	4770      	bx	lr
  40297e:	bf00      	nop

00402980 <__errno>:
  402980:	4b01      	ldr	r3, [pc, #4]	; (402988 <__errno+0x8>)
  402982:	6818      	ldr	r0, [r3, #0]
  402984:	4770      	bx	lr
  402986:	bf00      	nop
  402988:	20000030 	.word	0x20000030

0040298c <__libc_init_array>:
  40298c:	b570      	push	{r4, r5, r6, lr}
  40298e:	4e0f      	ldr	r6, [pc, #60]	; (4029cc <__libc_init_array+0x40>)
  402990:	4d0f      	ldr	r5, [pc, #60]	; (4029d0 <__libc_init_array+0x44>)
  402992:	1b76      	subs	r6, r6, r5
  402994:	10b6      	asrs	r6, r6, #2
  402996:	bf18      	it	ne
  402998:	2400      	movne	r4, #0
  40299a:	d005      	beq.n	4029a8 <__libc_init_array+0x1c>
  40299c:	3401      	adds	r4, #1
  40299e:	f855 3b04 	ldr.w	r3, [r5], #4
  4029a2:	4798      	blx	r3
  4029a4:	42a6      	cmp	r6, r4
  4029a6:	d1f9      	bne.n	40299c <__libc_init_array+0x10>
  4029a8:	4e0a      	ldr	r6, [pc, #40]	; (4029d4 <__libc_init_array+0x48>)
  4029aa:	4d0b      	ldr	r5, [pc, #44]	; (4029d8 <__libc_init_array+0x4c>)
  4029ac:	1b76      	subs	r6, r6, r5
  4029ae:	f001 f86f 	bl	403a90 <_init>
  4029b2:	10b6      	asrs	r6, r6, #2
  4029b4:	bf18      	it	ne
  4029b6:	2400      	movne	r4, #0
  4029b8:	d006      	beq.n	4029c8 <__libc_init_array+0x3c>
  4029ba:	3401      	adds	r4, #1
  4029bc:	f855 3b04 	ldr.w	r3, [r5], #4
  4029c0:	4798      	blx	r3
  4029c2:	42a6      	cmp	r6, r4
  4029c4:	d1f9      	bne.n	4029ba <__libc_init_array+0x2e>
  4029c6:	bd70      	pop	{r4, r5, r6, pc}
  4029c8:	bd70      	pop	{r4, r5, r6, pc}
  4029ca:	bf00      	nop
  4029cc:	00403a9c 	.word	0x00403a9c
  4029d0:	00403a9c 	.word	0x00403a9c
  4029d4:	00403aa4 	.word	0x00403aa4
  4029d8:	00403a9c 	.word	0x00403a9c

004029dc <memset>:
  4029dc:	b470      	push	{r4, r5, r6}
  4029de:	0786      	lsls	r6, r0, #30
  4029e0:	d046      	beq.n	402a70 <memset+0x94>
  4029e2:	1e54      	subs	r4, r2, #1
  4029e4:	2a00      	cmp	r2, #0
  4029e6:	d041      	beq.n	402a6c <memset+0x90>
  4029e8:	b2ca      	uxtb	r2, r1
  4029ea:	4603      	mov	r3, r0
  4029ec:	e002      	b.n	4029f4 <memset+0x18>
  4029ee:	f114 34ff 	adds.w	r4, r4, #4294967295
  4029f2:	d33b      	bcc.n	402a6c <memset+0x90>
  4029f4:	f803 2b01 	strb.w	r2, [r3], #1
  4029f8:	079d      	lsls	r5, r3, #30
  4029fa:	d1f8      	bne.n	4029ee <memset+0x12>
  4029fc:	2c03      	cmp	r4, #3
  4029fe:	d92e      	bls.n	402a5e <memset+0x82>
  402a00:	b2cd      	uxtb	r5, r1
  402a02:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402a06:	2c0f      	cmp	r4, #15
  402a08:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402a0c:	d919      	bls.n	402a42 <memset+0x66>
  402a0e:	f103 0210 	add.w	r2, r3, #16
  402a12:	4626      	mov	r6, r4
  402a14:	3e10      	subs	r6, #16
  402a16:	2e0f      	cmp	r6, #15
  402a18:	f842 5c10 	str.w	r5, [r2, #-16]
  402a1c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402a20:	f842 5c08 	str.w	r5, [r2, #-8]
  402a24:	f842 5c04 	str.w	r5, [r2, #-4]
  402a28:	f102 0210 	add.w	r2, r2, #16
  402a2c:	d8f2      	bhi.n	402a14 <memset+0x38>
  402a2e:	f1a4 0210 	sub.w	r2, r4, #16
  402a32:	f022 020f 	bic.w	r2, r2, #15
  402a36:	f004 040f 	and.w	r4, r4, #15
  402a3a:	3210      	adds	r2, #16
  402a3c:	2c03      	cmp	r4, #3
  402a3e:	4413      	add	r3, r2
  402a40:	d90d      	bls.n	402a5e <memset+0x82>
  402a42:	461e      	mov	r6, r3
  402a44:	4622      	mov	r2, r4
  402a46:	3a04      	subs	r2, #4
  402a48:	2a03      	cmp	r2, #3
  402a4a:	f846 5b04 	str.w	r5, [r6], #4
  402a4e:	d8fa      	bhi.n	402a46 <memset+0x6a>
  402a50:	1f22      	subs	r2, r4, #4
  402a52:	f022 0203 	bic.w	r2, r2, #3
  402a56:	3204      	adds	r2, #4
  402a58:	4413      	add	r3, r2
  402a5a:	f004 0403 	and.w	r4, r4, #3
  402a5e:	b12c      	cbz	r4, 402a6c <memset+0x90>
  402a60:	b2c9      	uxtb	r1, r1
  402a62:	441c      	add	r4, r3
  402a64:	f803 1b01 	strb.w	r1, [r3], #1
  402a68:	429c      	cmp	r4, r3
  402a6a:	d1fb      	bne.n	402a64 <memset+0x88>
  402a6c:	bc70      	pop	{r4, r5, r6}
  402a6e:	4770      	bx	lr
  402a70:	4614      	mov	r4, r2
  402a72:	4603      	mov	r3, r0
  402a74:	e7c2      	b.n	4029fc <memset+0x20>
  402a76:	bf00      	nop

00402a78 <setbuf>:
  402a78:	2900      	cmp	r1, #0
  402a7a:	bf0c      	ite	eq
  402a7c:	2202      	moveq	r2, #2
  402a7e:	2200      	movne	r2, #0
  402a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402a84:	f000 b800 	b.w	402a88 <setvbuf>

00402a88 <setvbuf>:
  402a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402a8c:	4c61      	ldr	r4, [pc, #388]	; (402c14 <setvbuf+0x18c>)
  402a8e:	6825      	ldr	r5, [r4, #0]
  402a90:	b083      	sub	sp, #12
  402a92:	4604      	mov	r4, r0
  402a94:	460f      	mov	r7, r1
  402a96:	4690      	mov	r8, r2
  402a98:	461e      	mov	r6, r3
  402a9a:	b115      	cbz	r5, 402aa2 <setvbuf+0x1a>
  402a9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402a9e:	2b00      	cmp	r3, #0
  402aa0:	d064      	beq.n	402b6c <setvbuf+0xe4>
  402aa2:	f1b8 0f02 	cmp.w	r8, #2
  402aa6:	d006      	beq.n	402ab6 <setvbuf+0x2e>
  402aa8:	f1b8 0f01 	cmp.w	r8, #1
  402aac:	f200 809f 	bhi.w	402bee <setvbuf+0x166>
  402ab0:	2e00      	cmp	r6, #0
  402ab2:	f2c0 809c 	blt.w	402bee <setvbuf+0x166>
  402ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402ab8:	07d8      	lsls	r0, r3, #31
  402aba:	d534      	bpl.n	402b26 <setvbuf+0x9e>
  402abc:	4621      	mov	r1, r4
  402abe:	4628      	mov	r0, r5
  402ac0:	f000 f95a 	bl	402d78 <_fflush_r>
  402ac4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402ac6:	b141      	cbz	r1, 402ada <setvbuf+0x52>
  402ac8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402acc:	4299      	cmp	r1, r3
  402ace:	d002      	beq.n	402ad6 <setvbuf+0x4e>
  402ad0:	4628      	mov	r0, r5
  402ad2:	f000 fa4b 	bl	402f6c <_free_r>
  402ad6:	2300      	movs	r3, #0
  402ad8:	6323      	str	r3, [r4, #48]	; 0x30
  402ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ade:	2200      	movs	r2, #0
  402ae0:	61a2      	str	r2, [r4, #24]
  402ae2:	6062      	str	r2, [r4, #4]
  402ae4:	061a      	lsls	r2, r3, #24
  402ae6:	d43a      	bmi.n	402b5e <setvbuf+0xd6>
  402ae8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402aec:	f023 0303 	bic.w	r3, r3, #3
  402af0:	f1b8 0f02 	cmp.w	r8, #2
  402af4:	81a3      	strh	r3, [r4, #12]
  402af6:	d01d      	beq.n	402b34 <setvbuf+0xac>
  402af8:	ab01      	add	r3, sp, #4
  402afa:	466a      	mov	r2, sp
  402afc:	4621      	mov	r1, r4
  402afe:	4628      	mov	r0, r5
  402b00:	f000 fb4c 	bl	40319c <__swhatbuf_r>
  402b04:	89a3      	ldrh	r3, [r4, #12]
  402b06:	4318      	orrs	r0, r3
  402b08:	81a0      	strh	r0, [r4, #12]
  402b0a:	2e00      	cmp	r6, #0
  402b0c:	d132      	bne.n	402b74 <setvbuf+0xec>
  402b0e:	9e00      	ldr	r6, [sp, #0]
  402b10:	4630      	mov	r0, r6
  402b12:	f000 fb71 	bl	4031f8 <malloc>
  402b16:	4607      	mov	r7, r0
  402b18:	2800      	cmp	r0, #0
  402b1a:	d06b      	beq.n	402bf4 <setvbuf+0x16c>
  402b1c:	89a3      	ldrh	r3, [r4, #12]
  402b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402b22:	81a3      	strh	r3, [r4, #12]
  402b24:	e028      	b.n	402b78 <setvbuf+0xf0>
  402b26:	89a3      	ldrh	r3, [r4, #12]
  402b28:	0599      	lsls	r1, r3, #22
  402b2a:	d4c7      	bmi.n	402abc <setvbuf+0x34>
  402b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402b2e:	f000 fb31 	bl	403194 <__retarget_lock_acquire_recursive>
  402b32:	e7c3      	b.n	402abc <setvbuf+0x34>
  402b34:	2500      	movs	r5, #0
  402b36:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402b38:	2600      	movs	r6, #0
  402b3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402b3e:	f043 0302 	orr.w	r3, r3, #2
  402b42:	2001      	movs	r0, #1
  402b44:	60a6      	str	r6, [r4, #8]
  402b46:	07ce      	lsls	r6, r1, #31
  402b48:	81a3      	strh	r3, [r4, #12]
  402b4a:	6022      	str	r2, [r4, #0]
  402b4c:	6122      	str	r2, [r4, #16]
  402b4e:	6160      	str	r0, [r4, #20]
  402b50:	d401      	bmi.n	402b56 <setvbuf+0xce>
  402b52:	0598      	lsls	r0, r3, #22
  402b54:	d53e      	bpl.n	402bd4 <setvbuf+0x14c>
  402b56:	4628      	mov	r0, r5
  402b58:	b003      	add	sp, #12
  402b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402b5e:	6921      	ldr	r1, [r4, #16]
  402b60:	4628      	mov	r0, r5
  402b62:	f000 fa03 	bl	402f6c <_free_r>
  402b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b6a:	e7bd      	b.n	402ae8 <setvbuf+0x60>
  402b6c:	4628      	mov	r0, r5
  402b6e:	f000 f95b 	bl	402e28 <__sinit>
  402b72:	e796      	b.n	402aa2 <setvbuf+0x1a>
  402b74:	2f00      	cmp	r7, #0
  402b76:	d0cb      	beq.n	402b10 <setvbuf+0x88>
  402b78:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402b7a:	2b00      	cmp	r3, #0
  402b7c:	d033      	beq.n	402be6 <setvbuf+0x15e>
  402b7e:	9b00      	ldr	r3, [sp, #0]
  402b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402b84:	6027      	str	r7, [r4, #0]
  402b86:	429e      	cmp	r6, r3
  402b88:	bf1c      	itt	ne
  402b8a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402b8e:	81a2      	strhne	r2, [r4, #12]
  402b90:	f1b8 0f01 	cmp.w	r8, #1
  402b94:	bf04      	itt	eq
  402b96:	f042 0201 	orreq.w	r2, r2, #1
  402b9a:	81a2      	strheq	r2, [r4, #12]
  402b9c:	b292      	uxth	r2, r2
  402b9e:	f012 0308 	ands.w	r3, r2, #8
  402ba2:	6127      	str	r7, [r4, #16]
  402ba4:	6166      	str	r6, [r4, #20]
  402ba6:	d00e      	beq.n	402bc6 <setvbuf+0x13e>
  402ba8:	07d1      	lsls	r1, r2, #31
  402baa:	d51a      	bpl.n	402be2 <setvbuf+0x15a>
  402bac:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402bae:	4276      	negs	r6, r6
  402bb0:	2300      	movs	r3, #0
  402bb2:	f015 0501 	ands.w	r5, r5, #1
  402bb6:	61a6      	str	r6, [r4, #24]
  402bb8:	60a3      	str	r3, [r4, #8]
  402bba:	d009      	beq.n	402bd0 <setvbuf+0x148>
  402bbc:	2500      	movs	r5, #0
  402bbe:	4628      	mov	r0, r5
  402bc0:	b003      	add	sp, #12
  402bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402bc6:	60a3      	str	r3, [r4, #8]
  402bc8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402bca:	f015 0501 	ands.w	r5, r5, #1
  402bce:	d1f5      	bne.n	402bbc <setvbuf+0x134>
  402bd0:	0593      	lsls	r3, r2, #22
  402bd2:	d4c0      	bmi.n	402b56 <setvbuf+0xce>
  402bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402bd6:	f000 fadf 	bl	403198 <__retarget_lock_release_recursive>
  402bda:	4628      	mov	r0, r5
  402bdc:	b003      	add	sp, #12
  402bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402be2:	60a6      	str	r6, [r4, #8]
  402be4:	e7f0      	b.n	402bc8 <setvbuf+0x140>
  402be6:	4628      	mov	r0, r5
  402be8:	f000 f91e 	bl	402e28 <__sinit>
  402bec:	e7c7      	b.n	402b7e <setvbuf+0xf6>
  402bee:	f04f 35ff 	mov.w	r5, #4294967295
  402bf2:	e7b0      	b.n	402b56 <setvbuf+0xce>
  402bf4:	f8dd 9000 	ldr.w	r9, [sp]
  402bf8:	45b1      	cmp	r9, r6
  402bfa:	d004      	beq.n	402c06 <setvbuf+0x17e>
  402bfc:	4648      	mov	r0, r9
  402bfe:	f000 fafb 	bl	4031f8 <malloc>
  402c02:	4607      	mov	r7, r0
  402c04:	b920      	cbnz	r0, 402c10 <setvbuf+0x188>
  402c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c0a:	f04f 35ff 	mov.w	r5, #4294967295
  402c0e:	e792      	b.n	402b36 <setvbuf+0xae>
  402c10:	464e      	mov	r6, r9
  402c12:	e783      	b.n	402b1c <setvbuf+0x94>
  402c14:	20000030 	.word	0x20000030

00402c18 <register_fini>:
  402c18:	4b02      	ldr	r3, [pc, #8]	; (402c24 <register_fini+0xc>)
  402c1a:	b113      	cbz	r3, 402c22 <register_fini+0xa>
  402c1c:	4802      	ldr	r0, [pc, #8]	; (402c28 <register_fini+0x10>)
  402c1e:	f000 b805 	b.w	402c2c <atexit>
  402c22:	4770      	bx	lr
  402c24:	00000000 	.word	0x00000000
  402c28:	00402e99 	.word	0x00402e99

00402c2c <atexit>:
  402c2c:	2300      	movs	r3, #0
  402c2e:	4601      	mov	r1, r0
  402c30:	461a      	mov	r2, r3
  402c32:	4618      	mov	r0, r3
  402c34:	f000 be10 	b.w	403858 <__register_exitproc>

00402c38 <__sflush_r>:
  402c38:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402c3c:	b29a      	uxth	r2, r3
  402c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c42:	460d      	mov	r5, r1
  402c44:	0711      	lsls	r1, r2, #28
  402c46:	4680      	mov	r8, r0
  402c48:	d43a      	bmi.n	402cc0 <__sflush_r+0x88>
  402c4a:	686a      	ldr	r2, [r5, #4]
  402c4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402c50:	2a00      	cmp	r2, #0
  402c52:	81ab      	strh	r3, [r5, #12]
  402c54:	dd6f      	ble.n	402d36 <__sflush_r+0xfe>
  402c56:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402c58:	2c00      	cmp	r4, #0
  402c5a:	d049      	beq.n	402cf0 <__sflush_r+0xb8>
  402c5c:	2200      	movs	r2, #0
  402c5e:	b29b      	uxth	r3, r3
  402c60:	f8d8 6000 	ldr.w	r6, [r8]
  402c64:	f8c8 2000 	str.w	r2, [r8]
  402c68:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402c6c:	d067      	beq.n	402d3e <__sflush_r+0x106>
  402c6e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402c70:	075f      	lsls	r7, r3, #29
  402c72:	d505      	bpl.n	402c80 <__sflush_r+0x48>
  402c74:	6869      	ldr	r1, [r5, #4]
  402c76:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402c78:	1a52      	subs	r2, r2, r1
  402c7a:	b10b      	cbz	r3, 402c80 <__sflush_r+0x48>
  402c7c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402c7e:	1ad2      	subs	r2, r2, r3
  402c80:	2300      	movs	r3, #0
  402c82:	69e9      	ldr	r1, [r5, #28]
  402c84:	4640      	mov	r0, r8
  402c86:	47a0      	blx	r4
  402c88:	1c44      	adds	r4, r0, #1
  402c8a:	d03c      	beq.n	402d06 <__sflush_r+0xce>
  402c8c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402c90:	692a      	ldr	r2, [r5, #16]
  402c92:	602a      	str	r2, [r5, #0]
  402c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402c98:	2200      	movs	r2, #0
  402c9a:	81ab      	strh	r3, [r5, #12]
  402c9c:	04db      	lsls	r3, r3, #19
  402c9e:	606a      	str	r2, [r5, #4]
  402ca0:	d447      	bmi.n	402d32 <__sflush_r+0xfa>
  402ca2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402ca4:	f8c8 6000 	str.w	r6, [r8]
  402ca8:	b311      	cbz	r1, 402cf0 <__sflush_r+0xb8>
  402caa:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402cae:	4299      	cmp	r1, r3
  402cb0:	d002      	beq.n	402cb8 <__sflush_r+0x80>
  402cb2:	4640      	mov	r0, r8
  402cb4:	f000 f95a 	bl	402f6c <_free_r>
  402cb8:	2000      	movs	r0, #0
  402cba:	6328      	str	r0, [r5, #48]	; 0x30
  402cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402cc0:	692e      	ldr	r6, [r5, #16]
  402cc2:	b1ae      	cbz	r6, 402cf0 <__sflush_r+0xb8>
  402cc4:	682c      	ldr	r4, [r5, #0]
  402cc6:	602e      	str	r6, [r5, #0]
  402cc8:	0791      	lsls	r1, r2, #30
  402cca:	bf0c      	ite	eq
  402ccc:	696b      	ldreq	r3, [r5, #20]
  402cce:	2300      	movne	r3, #0
  402cd0:	1ba4      	subs	r4, r4, r6
  402cd2:	60ab      	str	r3, [r5, #8]
  402cd4:	e00a      	b.n	402cec <__sflush_r+0xb4>
  402cd6:	4623      	mov	r3, r4
  402cd8:	4632      	mov	r2, r6
  402cda:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402cdc:	69e9      	ldr	r1, [r5, #28]
  402cde:	4640      	mov	r0, r8
  402ce0:	47b8      	blx	r7
  402ce2:	2800      	cmp	r0, #0
  402ce4:	eba4 0400 	sub.w	r4, r4, r0
  402ce8:	4406      	add	r6, r0
  402cea:	dd04      	ble.n	402cf6 <__sflush_r+0xbe>
  402cec:	2c00      	cmp	r4, #0
  402cee:	dcf2      	bgt.n	402cd6 <__sflush_r+0x9e>
  402cf0:	2000      	movs	r0, #0
  402cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402cf6:	89ab      	ldrh	r3, [r5, #12]
  402cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402cfc:	81ab      	strh	r3, [r5, #12]
  402cfe:	f04f 30ff 	mov.w	r0, #4294967295
  402d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d06:	f8d8 4000 	ldr.w	r4, [r8]
  402d0a:	2c1d      	cmp	r4, #29
  402d0c:	d8f3      	bhi.n	402cf6 <__sflush_r+0xbe>
  402d0e:	4b19      	ldr	r3, [pc, #100]	; (402d74 <__sflush_r+0x13c>)
  402d10:	40e3      	lsrs	r3, r4
  402d12:	43db      	mvns	r3, r3
  402d14:	f013 0301 	ands.w	r3, r3, #1
  402d18:	d1ed      	bne.n	402cf6 <__sflush_r+0xbe>
  402d1a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402d1e:	606b      	str	r3, [r5, #4]
  402d20:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402d24:	6929      	ldr	r1, [r5, #16]
  402d26:	81ab      	strh	r3, [r5, #12]
  402d28:	04da      	lsls	r2, r3, #19
  402d2a:	6029      	str	r1, [r5, #0]
  402d2c:	d5b9      	bpl.n	402ca2 <__sflush_r+0x6a>
  402d2e:	2c00      	cmp	r4, #0
  402d30:	d1b7      	bne.n	402ca2 <__sflush_r+0x6a>
  402d32:	6528      	str	r0, [r5, #80]	; 0x50
  402d34:	e7b5      	b.n	402ca2 <__sflush_r+0x6a>
  402d36:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402d38:	2a00      	cmp	r2, #0
  402d3a:	dc8c      	bgt.n	402c56 <__sflush_r+0x1e>
  402d3c:	e7d8      	b.n	402cf0 <__sflush_r+0xb8>
  402d3e:	2301      	movs	r3, #1
  402d40:	69e9      	ldr	r1, [r5, #28]
  402d42:	4640      	mov	r0, r8
  402d44:	47a0      	blx	r4
  402d46:	1c43      	adds	r3, r0, #1
  402d48:	4602      	mov	r2, r0
  402d4a:	d002      	beq.n	402d52 <__sflush_r+0x11a>
  402d4c:	89ab      	ldrh	r3, [r5, #12]
  402d4e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402d50:	e78e      	b.n	402c70 <__sflush_r+0x38>
  402d52:	f8d8 3000 	ldr.w	r3, [r8]
  402d56:	2b00      	cmp	r3, #0
  402d58:	d0f8      	beq.n	402d4c <__sflush_r+0x114>
  402d5a:	2b1d      	cmp	r3, #29
  402d5c:	d001      	beq.n	402d62 <__sflush_r+0x12a>
  402d5e:	2b16      	cmp	r3, #22
  402d60:	d102      	bne.n	402d68 <__sflush_r+0x130>
  402d62:	f8c8 6000 	str.w	r6, [r8]
  402d66:	e7c3      	b.n	402cf0 <__sflush_r+0xb8>
  402d68:	89ab      	ldrh	r3, [r5, #12]
  402d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402d6e:	81ab      	strh	r3, [r5, #12]
  402d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d74:	20400001 	.word	0x20400001

00402d78 <_fflush_r>:
  402d78:	b538      	push	{r3, r4, r5, lr}
  402d7a:	460d      	mov	r5, r1
  402d7c:	4604      	mov	r4, r0
  402d7e:	b108      	cbz	r0, 402d84 <_fflush_r+0xc>
  402d80:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402d82:	b1bb      	cbz	r3, 402db4 <_fflush_r+0x3c>
  402d84:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402d88:	b188      	cbz	r0, 402dae <_fflush_r+0x36>
  402d8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402d8c:	07db      	lsls	r3, r3, #31
  402d8e:	d401      	bmi.n	402d94 <_fflush_r+0x1c>
  402d90:	0581      	lsls	r1, r0, #22
  402d92:	d517      	bpl.n	402dc4 <_fflush_r+0x4c>
  402d94:	4620      	mov	r0, r4
  402d96:	4629      	mov	r1, r5
  402d98:	f7ff ff4e 	bl	402c38 <__sflush_r>
  402d9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402d9e:	07da      	lsls	r2, r3, #31
  402da0:	4604      	mov	r4, r0
  402da2:	d402      	bmi.n	402daa <_fflush_r+0x32>
  402da4:	89ab      	ldrh	r3, [r5, #12]
  402da6:	059b      	lsls	r3, r3, #22
  402da8:	d507      	bpl.n	402dba <_fflush_r+0x42>
  402daa:	4620      	mov	r0, r4
  402dac:	bd38      	pop	{r3, r4, r5, pc}
  402dae:	4604      	mov	r4, r0
  402db0:	4620      	mov	r0, r4
  402db2:	bd38      	pop	{r3, r4, r5, pc}
  402db4:	f000 f838 	bl	402e28 <__sinit>
  402db8:	e7e4      	b.n	402d84 <_fflush_r+0xc>
  402dba:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402dbc:	f000 f9ec 	bl	403198 <__retarget_lock_release_recursive>
  402dc0:	4620      	mov	r0, r4
  402dc2:	bd38      	pop	{r3, r4, r5, pc}
  402dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402dc6:	f000 f9e5 	bl	403194 <__retarget_lock_acquire_recursive>
  402dca:	e7e3      	b.n	402d94 <_fflush_r+0x1c>

00402dcc <_cleanup_r>:
  402dcc:	4901      	ldr	r1, [pc, #4]	; (402dd4 <_cleanup_r+0x8>)
  402dce:	f000 b9b3 	b.w	403138 <_fwalk_reent>
  402dd2:	bf00      	nop
  402dd4:	00403941 	.word	0x00403941

00402dd8 <std.isra.0>:
  402dd8:	b510      	push	{r4, lr}
  402dda:	2300      	movs	r3, #0
  402ddc:	4604      	mov	r4, r0
  402dde:	8181      	strh	r1, [r0, #12]
  402de0:	81c2      	strh	r2, [r0, #14]
  402de2:	6003      	str	r3, [r0, #0]
  402de4:	6043      	str	r3, [r0, #4]
  402de6:	6083      	str	r3, [r0, #8]
  402de8:	6643      	str	r3, [r0, #100]	; 0x64
  402dea:	6103      	str	r3, [r0, #16]
  402dec:	6143      	str	r3, [r0, #20]
  402dee:	6183      	str	r3, [r0, #24]
  402df0:	4619      	mov	r1, r3
  402df2:	2208      	movs	r2, #8
  402df4:	305c      	adds	r0, #92	; 0x5c
  402df6:	f7ff fdf1 	bl	4029dc <memset>
  402dfa:	4807      	ldr	r0, [pc, #28]	; (402e18 <std.isra.0+0x40>)
  402dfc:	4907      	ldr	r1, [pc, #28]	; (402e1c <std.isra.0+0x44>)
  402dfe:	4a08      	ldr	r2, [pc, #32]	; (402e20 <std.isra.0+0x48>)
  402e00:	4b08      	ldr	r3, [pc, #32]	; (402e24 <std.isra.0+0x4c>)
  402e02:	6220      	str	r0, [r4, #32]
  402e04:	61e4      	str	r4, [r4, #28]
  402e06:	6261      	str	r1, [r4, #36]	; 0x24
  402e08:	62a2      	str	r2, [r4, #40]	; 0x28
  402e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
  402e0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402e14:	f000 b9ba 	b.w	40318c <__retarget_lock_init_recursive>
  402e18:	004037a5 	.word	0x004037a5
  402e1c:	004037c9 	.word	0x004037c9
  402e20:	00403805 	.word	0x00403805
  402e24:	00403825 	.word	0x00403825

00402e28 <__sinit>:
  402e28:	b510      	push	{r4, lr}
  402e2a:	4604      	mov	r4, r0
  402e2c:	4812      	ldr	r0, [pc, #72]	; (402e78 <__sinit+0x50>)
  402e2e:	f000 f9b1 	bl	403194 <__retarget_lock_acquire_recursive>
  402e32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402e34:	b9d2      	cbnz	r2, 402e6c <__sinit+0x44>
  402e36:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402e3a:	4810      	ldr	r0, [pc, #64]	; (402e7c <__sinit+0x54>)
  402e3c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402e40:	2103      	movs	r1, #3
  402e42:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402e46:	63e0      	str	r0, [r4, #60]	; 0x3c
  402e48:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402e4c:	6860      	ldr	r0, [r4, #4]
  402e4e:	2104      	movs	r1, #4
  402e50:	f7ff ffc2 	bl	402dd8 <std.isra.0>
  402e54:	2201      	movs	r2, #1
  402e56:	2109      	movs	r1, #9
  402e58:	68a0      	ldr	r0, [r4, #8]
  402e5a:	f7ff ffbd 	bl	402dd8 <std.isra.0>
  402e5e:	2202      	movs	r2, #2
  402e60:	2112      	movs	r1, #18
  402e62:	68e0      	ldr	r0, [r4, #12]
  402e64:	f7ff ffb8 	bl	402dd8 <std.isra.0>
  402e68:	2301      	movs	r3, #1
  402e6a:	63a3      	str	r3, [r4, #56]	; 0x38
  402e6c:	4802      	ldr	r0, [pc, #8]	; (402e78 <__sinit+0x50>)
  402e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402e72:	f000 b991 	b.w	403198 <__retarget_lock_release_recursive>
  402e76:	bf00      	nop
  402e78:	2000d034 	.word	0x2000d034
  402e7c:	00402dcd 	.word	0x00402dcd

00402e80 <__sfp_lock_acquire>:
  402e80:	4801      	ldr	r0, [pc, #4]	; (402e88 <__sfp_lock_acquire+0x8>)
  402e82:	f000 b987 	b.w	403194 <__retarget_lock_acquire_recursive>
  402e86:	bf00      	nop
  402e88:	2000d048 	.word	0x2000d048

00402e8c <__sfp_lock_release>:
  402e8c:	4801      	ldr	r0, [pc, #4]	; (402e94 <__sfp_lock_release+0x8>)
  402e8e:	f000 b983 	b.w	403198 <__retarget_lock_release_recursive>
  402e92:	bf00      	nop
  402e94:	2000d048 	.word	0x2000d048

00402e98 <__libc_fini_array>:
  402e98:	b538      	push	{r3, r4, r5, lr}
  402e9a:	4c0a      	ldr	r4, [pc, #40]	; (402ec4 <__libc_fini_array+0x2c>)
  402e9c:	4d0a      	ldr	r5, [pc, #40]	; (402ec8 <__libc_fini_array+0x30>)
  402e9e:	1b64      	subs	r4, r4, r5
  402ea0:	10a4      	asrs	r4, r4, #2
  402ea2:	d00a      	beq.n	402eba <__libc_fini_array+0x22>
  402ea4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402ea8:	3b01      	subs	r3, #1
  402eaa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402eae:	3c01      	subs	r4, #1
  402eb0:	f855 3904 	ldr.w	r3, [r5], #-4
  402eb4:	4798      	blx	r3
  402eb6:	2c00      	cmp	r4, #0
  402eb8:	d1f9      	bne.n	402eae <__libc_fini_array+0x16>
  402eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402ebe:	f000 bdf1 	b.w	403aa4 <_fini>
  402ec2:	bf00      	nop
  402ec4:	00403ab4 	.word	0x00403ab4
  402ec8:	00403ab0 	.word	0x00403ab0

00402ecc <_malloc_trim_r>:
  402ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ece:	4f24      	ldr	r7, [pc, #144]	; (402f60 <_malloc_trim_r+0x94>)
  402ed0:	460c      	mov	r4, r1
  402ed2:	4606      	mov	r6, r0
  402ed4:	f000 fc48 	bl	403768 <__malloc_lock>
  402ed8:	68bb      	ldr	r3, [r7, #8]
  402eda:	685d      	ldr	r5, [r3, #4]
  402edc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402ee0:	310f      	adds	r1, #15
  402ee2:	f025 0503 	bic.w	r5, r5, #3
  402ee6:	4429      	add	r1, r5
  402ee8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402eec:	f021 010f 	bic.w	r1, r1, #15
  402ef0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402ef4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402ef8:	db07      	blt.n	402f0a <_malloc_trim_r+0x3e>
  402efa:	2100      	movs	r1, #0
  402efc:	4630      	mov	r0, r6
  402efe:	f000 fc3f 	bl	403780 <_sbrk_r>
  402f02:	68bb      	ldr	r3, [r7, #8]
  402f04:	442b      	add	r3, r5
  402f06:	4298      	cmp	r0, r3
  402f08:	d004      	beq.n	402f14 <_malloc_trim_r+0x48>
  402f0a:	4630      	mov	r0, r6
  402f0c:	f000 fc32 	bl	403774 <__malloc_unlock>
  402f10:	2000      	movs	r0, #0
  402f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f14:	4261      	negs	r1, r4
  402f16:	4630      	mov	r0, r6
  402f18:	f000 fc32 	bl	403780 <_sbrk_r>
  402f1c:	3001      	adds	r0, #1
  402f1e:	d00d      	beq.n	402f3c <_malloc_trim_r+0x70>
  402f20:	4b10      	ldr	r3, [pc, #64]	; (402f64 <_malloc_trim_r+0x98>)
  402f22:	68ba      	ldr	r2, [r7, #8]
  402f24:	6819      	ldr	r1, [r3, #0]
  402f26:	1b2d      	subs	r5, r5, r4
  402f28:	f045 0501 	orr.w	r5, r5, #1
  402f2c:	4630      	mov	r0, r6
  402f2e:	1b09      	subs	r1, r1, r4
  402f30:	6055      	str	r5, [r2, #4]
  402f32:	6019      	str	r1, [r3, #0]
  402f34:	f000 fc1e 	bl	403774 <__malloc_unlock>
  402f38:	2001      	movs	r0, #1
  402f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f3c:	2100      	movs	r1, #0
  402f3e:	4630      	mov	r0, r6
  402f40:	f000 fc1e 	bl	403780 <_sbrk_r>
  402f44:	68ba      	ldr	r2, [r7, #8]
  402f46:	1a83      	subs	r3, r0, r2
  402f48:	2b0f      	cmp	r3, #15
  402f4a:	ddde      	ble.n	402f0a <_malloc_trim_r+0x3e>
  402f4c:	4c06      	ldr	r4, [pc, #24]	; (402f68 <_malloc_trim_r+0x9c>)
  402f4e:	4905      	ldr	r1, [pc, #20]	; (402f64 <_malloc_trim_r+0x98>)
  402f50:	6824      	ldr	r4, [r4, #0]
  402f52:	f043 0301 	orr.w	r3, r3, #1
  402f56:	1b00      	subs	r0, r0, r4
  402f58:	6053      	str	r3, [r2, #4]
  402f5a:	6008      	str	r0, [r1, #0]
  402f5c:	e7d5      	b.n	402f0a <_malloc_trim_r+0x3e>
  402f5e:	bf00      	nop
  402f60:	20000464 	.word	0x20000464
  402f64:	2000ceec 	.word	0x2000ceec
  402f68:	2000086c 	.word	0x2000086c

00402f6c <_free_r>:
  402f6c:	2900      	cmp	r1, #0
  402f6e:	d044      	beq.n	402ffa <_free_r+0x8e>
  402f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402f74:	460d      	mov	r5, r1
  402f76:	4680      	mov	r8, r0
  402f78:	f000 fbf6 	bl	403768 <__malloc_lock>
  402f7c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402f80:	4969      	ldr	r1, [pc, #420]	; (403128 <_free_r+0x1bc>)
  402f82:	f027 0301 	bic.w	r3, r7, #1
  402f86:	f1a5 0408 	sub.w	r4, r5, #8
  402f8a:	18e2      	adds	r2, r4, r3
  402f8c:	688e      	ldr	r6, [r1, #8]
  402f8e:	6850      	ldr	r0, [r2, #4]
  402f90:	42b2      	cmp	r2, r6
  402f92:	f020 0003 	bic.w	r0, r0, #3
  402f96:	d05e      	beq.n	403056 <_free_r+0xea>
  402f98:	07fe      	lsls	r6, r7, #31
  402f9a:	6050      	str	r0, [r2, #4]
  402f9c:	d40b      	bmi.n	402fb6 <_free_r+0x4a>
  402f9e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402fa2:	1be4      	subs	r4, r4, r7
  402fa4:	f101 0e08 	add.w	lr, r1, #8
  402fa8:	68a5      	ldr	r5, [r4, #8]
  402faa:	4575      	cmp	r5, lr
  402fac:	443b      	add	r3, r7
  402fae:	d06d      	beq.n	40308c <_free_r+0x120>
  402fb0:	68e7      	ldr	r7, [r4, #12]
  402fb2:	60ef      	str	r7, [r5, #12]
  402fb4:	60bd      	str	r5, [r7, #8]
  402fb6:	1815      	adds	r5, r2, r0
  402fb8:	686d      	ldr	r5, [r5, #4]
  402fba:	07ed      	lsls	r5, r5, #31
  402fbc:	d53e      	bpl.n	40303c <_free_r+0xd0>
  402fbe:	f043 0201 	orr.w	r2, r3, #1
  402fc2:	6062      	str	r2, [r4, #4]
  402fc4:	50e3      	str	r3, [r4, r3]
  402fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402fca:	d217      	bcs.n	402ffc <_free_r+0x90>
  402fcc:	08db      	lsrs	r3, r3, #3
  402fce:	1c58      	adds	r0, r3, #1
  402fd0:	109a      	asrs	r2, r3, #2
  402fd2:	684d      	ldr	r5, [r1, #4]
  402fd4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402fd8:	60a7      	str	r7, [r4, #8]
  402fda:	2301      	movs	r3, #1
  402fdc:	4093      	lsls	r3, r2
  402fde:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402fe2:	432b      	orrs	r3, r5
  402fe4:	3a08      	subs	r2, #8
  402fe6:	60e2      	str	r2, [r4, #12]
  402fe8:	604b      	str	r3, [r1, #4]
  402fea:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402fee:	60fc      	str	r4, [r7, #12]
  402ff0:	4640      	mov	r0, r8
  402ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402ff6:	f000 bbbd 	b.w	403774 <__malloc_unlock>
  402ffa:	4770      	bx	lr
  402ffc:	0a5a      	lsrs	r2, r3, #9
  402ffe:	2a04      	cmp	r2, #4
  403000:	d852      	bhi.n	4030a8 <_free_r+0x13c>
  403002:	099a      	lsrs	r2, r3, #6
  403004:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403008:	00ff      	lsls	r7, r7, #3
  40300a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40300e:	19c8      	adds	r0, r1, r7
  403010:	59ca      	ldr	r2, [r1, r7]
  403012:	3808      	subs	r0, #8
  403014:	4290      	cmp	r0, r2
  403016:	d04f      	beq.n	4030b8 <_free_r+0x14c>
  403018:	6851      	ldr	r1, [r2, #4]
  40301a:	f021 0103 	bic.w	r1, r1, #3
  40301e:	428b      	cmp	r3, r1
  403020:	d232      	bcs.n	403088 <_free_r+0x11c>
  403022:	6892      	ldr	r2, [r2, #8]
  403024:	4290      	cmp	r0, r2
  403026:	d1f7      	bne.n	403018 <_free_r+0xac>
  403028:	68c3      	ldr	r3, [r0, #12]
  40302a:	60a0      	str	r0, [r4, #8]
  40302c:	60e3      	str	r3, [r4, #12]
  40302e:	609c      	str	r4, [r3, #8]
  403030:	60c4      	str	r4, [r0, #12]
  403032:	4640      	mov	r0, r8
  403034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403038:	f000 bb9c 	b.w	403774 <__malloc_unlock>
  40303c:	6895      	ldr	r5, [r2, #8]
  40303e:	4f3b      	ldr	r7, [pc, #236]	; (40312c <_free_r+0x1c0>)
  403040:	42bd      	cmp	r5, r7
  403042:	4403      	add	r3, r0
  403044:	d040      	beq.n	4030c8 <_free_r+0x15c>
  403046:	68d0      	ldr	r0, [r2, #12]
  403048:	60e8      	str	r0, [r5, #12]
  40304a:	f043 0201 	orr.w	r2, r3, #1
  40304e:	6085      	str	r5, [r0, #8]
  403050:	6062      	str	r2, [r4, #4]
  403052:	50e3      	str	r3, [r4, r3]
  403054:	e7b7      	b.n	402fc6 <_free_r+0x5a>
  403056:	07ff      	lsls	r7, r7, #31
  403058:	4403      	add	r3, r0
  40305a:	d407      	bmi.n	40306c <_free_r+0x100>
  40305c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403060:	1aa4      	subs	r4, r4, r2
  403062:	4413      	add	r3, r2
  403064:	68a0      	ldr	r0, [r4, #8]
  403066:	68e2      	ldr	r2, [r4, #12]
  403068:	60c2      	str	r2, [r0, #12]
  40306a:	6090      	str	r0, [r2, #8]
  40306c:	4a30      	ldr	r2, [pc, #192]	; (403130 <_free_r+0x1c4>)
  40306e:	6812      	ldr	r2, [r2, #0]
  403070:	f043 0001 	orr.w	r0, r3, #1
  403074:	4293      	cmp	r3, r2
  403076:	6060      	str	r0, [r4, #4]
  403078:	608c      	str	r4, [r1, #8]
  40307a:	d3b9      	bcc.n	402ff0 <_free_r+0x84>
  40307c:	4b2d      	ldr	r3, [pc, #180]	; (403134 <_free_r+0x1c8>)
  40307e:	4640      	mov	r0, r8
  403080:	6819      	ldr	r1, [r3, #0]
  403082:	f7ff ff23 	bl	402ecc <_malloc_trim_r>
  403086:	e7b3      	b.n	402ff0 <_free_r+0x84>
  403088:	4610      	mov	r0, r2
  40308a:	e7cd      	b.n	403028 <_free_r+0xbc>
  40308c:	1811      	adds	r1, r2, r0
  40308e:	6849      	ldr	r1, [r1, #4]
  403090:	07c9      	lsls	r1, r1, #31
  403092:	d444      	bmi.n	40311e <_free_r+0x1b2>
  403094:	6891      	ldr	r1, [r2, #8]
  403096:	68d2      	ldr	r2, [r2, #12]
  403098:	60ca      	str	r2, [r1, #12]
  40309a:	4403      	add	r3, r0
  40309c:	f043 0001 	orr.w	r0, r3, #1
  4030a0:	6091      	str	r1, [r2, #8]
  4030a2:	6060      	str	r0, [r4, #4]
  4030a4:	50e3      	str	r3, [r4, r3]
  4030a6:	e7a3      	b.n	402ff0 <_free_r+0x84>
  4030a8:	2a14      	cmp	r2, #20
  4030aa:	d816      	bhi.n	4030da <_free_r+0x16e>
  4030ac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4030b0:	00ff      	lsls	r7, r7, #3
  4030b2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4030b6:	e7aa      	b.n	40300e <_free_r+0xa2>
  4030b8:	10aa      	asrs	r2, r5, #2
  4030ba:	2301      	movs	r3, #1
  4030bc:	684d      	ldr	r5, [r1, #4]
  4030be:	4093      	lsls	r3, r2
  4030c0:	432b      	orrs	r3, r5
  4030c2:	604b      	str	r3, [r1, #4]
  4030c4:	4603      	mov	r3, r0
  4030c6:	e7b0      	b.n	40302a <_free_r+0xbe>
  4030c8:	f043 0201 	orr.w	r2, r3, #1
  4030cc:	614c      	str	r4, [r1, #20]
  4030ce:	610c      	str	r4, [r1, #16]
  4030d0:	60e5      	str	r5, [r4, #12]
  4030d2:	60a5      	str	r5, [r4, #8]
  4030d4:	6062      	str	r2, [r4, #4]
  4030d6:	50e3      	str	r3, [r4, r3]
  4030d8:	e78a      	b.n	402ff0 <_free_r+0x84>
  4030da:	2a54      	cmp	r2, #84	; 0x54
  4030dc:	d806      	bhi.n	4030ec <_free_r+0x180>
  4030de:	0b1a      	lsrs	r2, r3, #12
  4030e0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4030e4:	00ff      	lsls	r7, r7, #3
  4030e6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4030ea:	e790      	b.n	40300e <_free_r+0xa2>
  4030ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4030f0:	d806      	bhi.n	403100 <_free_r+0x194>
  4030f2:	0bda      	lsrs	r2, r3, #15
  4030f4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4030f8:	00ff      	lsls	r7, r7, #3
  4030fa:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4030fe:	e786      	b.n	40300e <_free_r+0xa2>
  403100:	f240 5054 	movw	r0, #1364	; 0x554
  403104:	4282      	cmp	r2, r0
  403106:	d806      	bhi.n	403116 <_free_r+0x1aa>
  403108:	0c9a      	lsrs	r2, r3, #18
  40310a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40310e:	00ff      	lsls	r7, r7, #3
  403110:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403114:	e77b      	b.n	40300e <_free_r+0xa2>
  403116:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40311a:	257e      	movs	r5, #126	; 0x7e
  40311c:	e777      	b.n	40300e <_free_r+0xa2>
  40311e:	f043 0101 	orr.w	r1, r3, #1
  403122:	6061      	str	r1, [r4, #4]
  403124:	6013      	str	r3, [r2, #0]
  403126:	e763      	b.n	402ff0 <_free_r+0x84>
  403128:	20000464 	.word	0x20000464
  40312c:	2000046c 	.word	0x2000046c
  403130:	20000870 	.word	0x20000870
  403134:	2000cf1c 	.word	0x2000cf1c

00403138 <_fwalk_reent>:
  403138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40313c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403140:	d01f      	beq.n	403182 <_fwalk_reent+0x4a>
  403142:	4688      	mov	r8, r1
  403144:	4606      	mov	r6, r0
  403146:	f04f 0900 	mov.w	r9, #0
  40314a:	687d      	ldr	r5, [r7, #4]
  40314c:	68bc      	ldr	r4, [r7, #8]
  40314e:	3d01      	subs	r5, #1
  403150:	d411      	bmi.n	403176 <_fwalk_reent+0x3e>
  403152:	89a3      	ldrh	r3, [r4, #12]
  403154:	2b01      	cmp	r3, #1
  403156:	f105 35ff 	add.w	r5, r5, #4294967295
  40315a:	d908      	bls.n	40316e <_fwalk_reent+0x36>
  40315c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403160:	3301      	adds	r3, #1
  403162:	4621      	mov	r1, r4
  403164:	4630      	mov	r0, r6
  403166:	d002      	beq.n	40316e <_fwalk_reent+0x36>
  403168:	47c0      	blx	r8
  40316a:	ea49 0900 	orr.w	r9, r9, r0
  40316e:	1c6b      	adds	r3, r5, #1
  403170:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403174:	d1ed      	bne.n	403152 <_fwalk_reent+0x1a>
  403176:	683f      	ldr	r7, [r7, #0]
  403178:	2f00      	cmp	r7, #0
  40317a:	d1e6      	bne.n	40314a <_fwalk_reent+0x12>
  40317c:	4648      	mov	r0, r9
  40317e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403182:	46b9      	mov	r9, r7
  403184:	4648      	mov	r0, r9
  403186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40318a:	bf00      	nop

0040318c <__retarget_lock_init_recursive>:
  40318c:	4770      	bx	lr
  40318e:	bf00      	nop

00403190 <__retarget_lock_close_recursive>:
  403190:	4770      	bx	lr
  403192:	bf00      	nop

00403194 <__retarget_lock_acquire_recursive>:
  403194:	4770      	bx	lr
  403196:	bf00      	nop

00403198 <__retarget_lock_release_recursive>:
  403198:	4770      	bx	lr
  40319a:	bf00      	nop

0040319c <__swhatbuf_r>:
  40319c:	b570      	push	{r4, r5, r6, lr}
  40319e:	460c      	mov	r4, r1
  4031a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4031a4:	2900      	cmp	r1, #0
  4031a6:	b090      	sub	sp, #64	; 0x40
  4031a8:	4615      	mov	r5, r2
  4031aa:	461e      	mov	r6, r3
  4031ac:	db14      	blt.n	4031d8 <__swhatbuf_r+0x3c>
  4031ae:	aa01      	add	r2, sp, #4
  4031b0:	f000 fc28 	bl	403a04 <_fstat_r>
  4031b4:	2800      	cmp	r0, #0
  4031b6:	db0f      	blt.n	4031d8 <__swhatbuf_r+0x3c>
  4031b8:	9a02      	ldr	r2, [sp, #8]
  4031ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4031be:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4031c2:	fab2 f282 	clz	r2, r2
  4031c6:	0952      	lsrs	r2, r2, #5
  4031c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4031cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4031d0:	6032      	str	r2, [r6, #0]
  4031d2:	602b      	str	r3, [r5, #0]
  4031d4:	b010      	add	sp, #64	; 0x40
  4031d6:	bd70      	pop	{r4, r5, r6, pc}
  4031d8:	89a2      	ldrh	r2, [r4, #12]
  4031da:	2300      	movs	r3, #0
  4031dc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4031e0:	6033      	str	r3, [r6, #0]
  4031e2:	d004      	beq.n	4031ee <__swhatbuf_r+0x52>
  4031e4:	2240      	movs	r2, #64	; 0x40
  4031e6:	4618      	mov	r0, r3
  4031e8:	602a      	str	r2, [r5, #0]
  4031ea:	b010      	add	sp, #64	; 0x40
  4031ec:	bd70      	pop	{r4, r5, r6, pc}
  4031ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4031f2:	602b      	str	r3, [r5, #0]
  4031f4:	b010      	add	sp, #64	; 0x40
  4031f6:	bd70      	pop	{r4, r5, r6, pc}

004031f8 <malloc>:
  4031f8:	4b02      	ldr	r3, [pc, #8]	; (403204 <malloc+0xc>)
  4031fa:	4601      	mov	r1, r0
  4031fc:	6818      	ldr	r0, [r3, #0]
  4031fe:	f000 b803 	b.w	403208 <_malloc_r>
  403202:	bf00      	nop
  403204:	20000030 	.word	0x20000030

00403208 <_malloc_r>:
  403208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40320c:	f101 060b 	add.w	r6, r1, #11
  403210:	2e16      	cmp	r6, #22
  403212:	b083      	sub	sp, #12
  403214:	4605      	mov	r5, r0
  403216:	f240 809e 	bls.w	403356 <_malloc_r+0x14e>
  40321a:	f036 0607 	bics.w	r6, r6, #7
  40321e:	f100 80bd 	bmi.w	40339c <_malloc_r+0x194>
  403222:	42b1      	cmp	r1, r6
  403224:	f200 80ba 	bhi.w	40339c <_malloc_r+0x194>
  403228:	f000 fa9e 	bl	403768 <__malloc_lock>
  40322c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403230:	f0c0 8293 	bcc.w	40375a <_malloc_r+0x552>
  403234:	0a73      	lsrs	r3, r6, #9
  403236:	f000 80b8 	beq.w	4033aa <_malloc_r+0x1a2>
  40323a:	2b04      	cmp	r3, #4
  40323c:	f200 8179 	bhi.w	403532 <_malloc_r+0x32a>
  403240:	09b3      	lsrs	r3, r6, #6
  403242:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403246:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40324a:	00c3      	lsls	r3, r0, #3
  40324c:	4fbf      	ldr	r7, [pc, #764]	; (40354c <_malloc_r+0x344>)
  40324e:	443b      	add	r3, r7
  403250:	f1a3 0108 	sub.w	r1, r3, #8
  403254:	685c      	ldr	r4, [r3, #4]
  403256:	42a1      	cmp	r1, r4
  403258:	d106      	bne.n	403268 <_malloc_r+0x60>
  40325a:	e00c      	b.n	403276 <_malloc_r+0x6e>
  40325c:	2a00      	cmp	r2, #0
  40325e:	f280 80aa 	bge.w	4033b6 <_malloc_r+0x1ae>
  403262:	68e4      	ldr	r4, [r4, #12]
  403264:	42a1      	cmp	r1, r4
  403266:	d006      	beq.n	403276 <_malloc_r+0x6e>
  403268:	6863      	ldr	r3, [r4, #4]
  40326a:	f023 0303 	bic.w	r3, r3, #3
  40326e:	1b9a      	subs	r2, r3, r6
  403270:	2a0f      	cmp	r2, #15
  403272:	ddf3      	ble.n	40325c <_malloc_r+0x54>
  403274:	4670      	mov	r0, lr
  403276:	693c      	ldr	r4, [r7, #16]
  403278:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403560 <_malloc_r+0x358>
  40327c:	4574      	cmp	r4, lr
  40327e:	f000 81ab 	beq.w	4035d8 <_malloc_r+0x3d0>
  403282:	6863      	ldr	r3, [r4, #4]
  403284:	f023 0303 	bic.w	r3, r3, #3
  403288:	1b9a      	subs	r2, r3, r6
  40328a:	2a0f      	cmp	r2, #15
  40328c:	f300 8190 	bgt.w	4035b0 <_malloc_r+0x3a8>
  403290:	2a00      	cmp	r2, #0
  403292:	f8c7 e014 	str.w	lr, [r7, #20]
  403296:	f8c7 e010 	str.w	lr, [r7, #16]
  40329a:	f280 809d 	bge.w	4033d8 <_malloc_r+0x1d0>
  40329e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4032a2:	f080 8161 	bcs.w	403568 <_malloc_r+0x360>
  4032a6:	08db      	lsrs	r3, r3, #3
  4032a8:	f103 0c01 	add.w	ip, r3, #1
  4032ac:	1099      	asrs	r1, r3, #2
  4032ae:	687a      	ldr	r2, [r7, #4]
  4032b0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4032b4:	f8c4 8008 	str.w	r8, [r4, #8]
  4032b8:	2301      	movs	r3, #1
  4032ba:	408b      	lsls	r3, r1
  4032bc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4032c0:	4313      	orrs	r3, r2
  4032c2:	3908      	subs	r1, #8
  4032c4:	60e1      	str	r1, [r4, #12]
  4032c6:	607b      	str	r3, [r7, #4]
  4032c8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4032cc:	f8c8 400c 	str.w	r4, [r8, #12]
  4032d0:	1082      	asrs	r2, r0, #2
  4032d2:	2401      	movs	r4, #1
  4032d4:	4094      	lsls	r4, r2
  4032d6:	429c      	cmp	r4, r3
  4032d8:	f200 808b 	bhi.w	4033f2 <_malloc_r+0x1ea>
  4032dc:	421c      	tst	r4, r3
  4032de:	d106      	bne.n	4032ee <_malloc_r+0xe6>
  4032e0:	f020 0003 	bic.w	r0, r0, #3
  4032e4:	0064      	lsls	r4, r4, #1
  4032e6:	421c      	tst	r4, r3
  4032e8:	f100 0004 	add.w	r0, r0, #4
  4032ec:	d0fa      	beq.n	4032e4 <_malloc_r+0xdc>
  4032ee:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4032f2:	46cc      	mov	ip, r9
  4032f4:	4680      	mov	r8, r0
  4032f6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4032fa:	459c      	cmp	ip, r3
  4032fc:	d107      	bne.n	40330e <_malloc_r+0x106>
  4032fe:	e16d      	b.n	4035dc <_malloc_r+0x3d4>
  403300:	2a00      	cmp	r2, #0
  403302:	f280 817b 	bge.w	4035fc <_malloc_r+0x3f4>
  403306:	68db      	ldr	r3, [r3, #12]
  403308:	459c      	cmp	ip, r3
  40330a:	f000 8167 	beq.w	4035dc <_malloc_r+0x3d4>
  40330e:	6859      	ldr	r1, [r3, #4]
  403310:	f021 0103 	bic.w	r1, r1, #3
  403314:	1b8a      	subs	r2, r1, r6
  403316:	2a0f      	cmp	r2, #15
  403318:	ddf2      	ble.n	403300 <_malloc_r+0xf8>
  40331a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40331e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403322:	9300      	str	r3, [sp, #0]
  403324:	199c      	adds	r4, r3, r6
  403326:	4628      	mov	r0, r5
  403328:	f046 0601 	orr.w	r6, r6, #1
  40332c:	f042 0501 	orr.w	r5, r2, #1
  403330:	605e      	str	r6, [r3, #4]
  403332:	f8c8 c00c 	str.w	ip, [r8, #12]
  403336:	f8cc 8008 	str.w	r8, [ip, #8]
  40333a:	617c      	str	r4, [r7, #20]
  40333c:	613c      	str	r4, [r7, #16]
  40333e:	f8c4 e00c 	str.w	lr, [r4, #12]
  403342:	f8c4 e008 	str.w	lr, [r4, #8]
  403346:	6065      	str	r5, [r4, #4]
  403348:	505a      	str	r2, [r3, r1]
  40334a:	f000 fa13 	bl	403774 <__malloc_unlock>
  40334e:	9b00      	ldr	r3, [sp, #0]
  403350:	f103 0408 	add.w	r4, r3, #8
  403354:	e01e      	b.n	403394 <_malloc_r+0x18c>
  403356:	2910      	cmp	r1, #16
  403358:	d820      	bhi.n	40339c <_malloc_r+0x194>
  40335a:	f000 fa05 	bl	403768 <__malloc_lock>
  40335e:	2610      	movs	r6, #16
  403360:	2318      	movs	r3, #24
  403362:	2002      	movs	r0, #2
  403364:	4f79      	ldr	r7, [pc, #484]	; (40354c <_malloc_r+0x344>)
  403366:	443b      	add	r3, r7
  403368:	f1a3 0208 	sub.w	r2, r3, #8
  40336c:	685c      	ldr	r4, [r3, #4]
  40336e:	4294      	cmp	r4, r2
  403370:	f000 813d 	beq.w	4035ee <_malloc_r+0x3e6>
  403374:	6863      	ldr	r3, [r4, #4]
  403376:	68e1      	ldr	r1, [r4, #12]
  403378:	68a6      	ldr	r6, [r4, #8]
  40337a:	f023 0303 	bic.w	r3, r3, #3
  40337e:	4423      	add	r3, r4
  403380:	4628      	mov	r0, r5
  403382:	685a      	ldr	r2, [r3, #4]
  403384:	60f1      	str	r1, [r6, #12]
  403386:	f042 0201 	orr.w	r2, r2, #1
  40338a:	608e      	str	r6, [r1, #8]
  40338c:	605a      	str	r2, [r3, #4]
  40338e:	f000 f9f1 	bl	403774 <__malloc_unlock>
  403392:	3408      	adds	r4, #8
  403394:	4620      	mov	r0, r4
  403396:	b003      	add	sp, #12
  403398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40339c:	2400      	movs	r4, #0
  40339e:	230c      	movs	r3, #12
  4033a0:	4620      	mov	r0, r4
  4033a2:	602b      	str	r3, [r5, #0]
  4033a4:	b003      	add	sp, #12
  4033a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033aa:	2040      	movs	r0, #64	; 0x40
  4033ac:	f44f 7300 	mov.w	r3, #512	; 0x200
  4033b0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4033b4:	e74a      	b.n	40324c <_malloc_r+0x44>
  4033b6:	4423      	add	r3, r4
  4033b8:	68e1      	ldr	r1, [r4, #12]
  4033ba:	685a      	ldr	r2, [r3, #4]
  4033bc:	68a6      	ldr	r6, [r4, #8]
  4033be:	f042 0201 	orr.w	r2, r2, #1
  4033c2:	60f1      	str	r1, [r6, #12]
  4033c4:	4628      	mov	r0, r5
  4033c6:	608e      	str	r6, [r1, #8]
  4033c8:	605a      	str	r2, [r3, #4]
  4033ca:	f000 f9d3 	bl	403774 <__malloc_unlock>
  4033ce:	3408      	adds	r4, #8
  4033d0:	4620      	mov	r0, r4
  4033d2:	b003      	add	sp, #12
  4033d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033d8:	4423      	add	r3, r4
  4033da:	4628      	mov	r0, r5
  4033dc:	685a      	ldr	r2, [r3, #4]
  4033de:	f042 0201 	orr.w	r2, r2, #1
  4033e2:	605a      	str	r2, [r3, #4]
  4033e4:	f000 f9c6 	bl	403774 <__malloc_unlock>
  4033e8:	3408      	adds	r4, #8
  4033ea:	4620      	mov	r0, r4
  4033ec:	b003      	add	sp, #12
  4033ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033f2:	68bc      	ldr	r4, [r7, #8]
  4033f4:	6863      	ldr	r3, [r4, #4]
  4033f6:	f023 0803 	bic.w	r8, r3, #3
  4033fa:	45b0      	cmp	r8, r6
  4033fc:	d304      	bcc.n	403408 <_malloc_r+0x200>
  4033fe:	eba8 0306 	sub.w	r3, r8, r6
  403402:	2b0f      	cmp	r3, #15
  403404:	f300 8085 	bgt.w	403512 <_malloc_r+0x30a>
  403408:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403564 <_malloc_r+0x35c>
  40340c:	4b50      	ldr	r3, [pc, #320]	; (403550 <_malloc_r+0x348>)
  40340e:	f8d9 2000 	ldr.w	r2, [r9]
  403412:	681b      	ldr	r3, [r3, #0]
  403414:	3201      	adds	r2, #1
  403416:	4433      	add	r3, r6
  403418:	eb04 0a08 	add.w	sl, r4, r8
  40341c:	f000 8155 	beq.w	4036ca <_malloc_r+0x4c2>
  403420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403424:	330f      	adds	r3, #15
  403426:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40342a:	f02b 0b0f 	bic.w	fp, fp, #15
  40342e:	4659      	mov	r1, fp
  403430:	4628      	mov	r0, r5
  403432:	f000 f9a5 	bl	403780 <_sbrk_r>
  403436:	1c41      	adds	r1, r0, #1
  403438:	4602      	mov	r2, r0
  40343a:	f000 80fc 	beq.w	403636 <_malloc_r+0x42e>
  40343e:	4582      	cmp	sl, r0
  403440:	f200 80f7 	bhi.w	403632 <_malloc_r+0x42a>
  403444:	4b43      	ldr	r3, [pc, #268]	; (403554 <_malloc_r+0x34c>)
  403446:	6819      	ldr	r1, [r3, #0]
  403448:	4459      	add	r1, fp
  40344a:	6019      	str	r1, [r3, #0]
  40344c:	f000 814d 	beq.w	4036ea <_malloc_r+0x4e2>
  403450:	f8d9 0000 	ldr.w	r0, [r9]
  403454:	3001      	adds	r0, #1
  403456:	bf1b      	ittet	ne
  403458:	eba2 0a0a 	subne.w	sl, r2, sl
  40345c:	4451      	addne	r1, sl
  40345e:	f8c9 2000 	streq.w	r2, [r9]
  403462:	6019      	strne	r1, [r3, #0]
  403464:	f012 0107 	ands.w	r1, r2, #7
  403468:	f000 8115 	beq.w	403696 <_malloc_r+0x48e>
  40346c:	f1c1 0008 	rsb	r0, r1, #8
  403470:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403474:	4402      	add	r2, r0
  403476:	3108      	adds	r1, #8
  403478:	eb02 090b 	add.w	r9, r2, fp
  40347c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403480:	eba1 0909 	sub.w	r9, r1, r9
  403484:	4649      	mov	r1, r9
  403486:	4628      	mov	r0, r5
  403488:	9301      	str	r3, [sp, #4]
  40348a:	9200      	str	r2, [sp, #0]
  40348c:	f000 f978 	bl	403780 <_sbrk_r>
  403490:	1c43      	adds	r3, r0, #1
  403492:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403496:	f000 8143 	beq.w	403720 <_malloc_r+0x518>
  40349a:	1a80      	subs	r0, r0, r2
  40349c:	4448      	add	r0, r9
  40349e:	f040 0001 	orr.w	r0, r0, #1
  4034a2:	6819      	ldr	r1, [r3, #0]
  4034a4:	60ba      	str	r2, [r7, #8]
  4034a6:	4449      	add	r1, r9
  4034a8:	42bc      	cmp	r4, r7
  4034aa:	6050      	str	r0, [r2, #4]
  4034ac:	6019      	str	r1, [r3, #0]
  4034ae:	d017      	beq.n	4034e0 <_malloc_r+0x2d8>
  4034b0:	f1b8 0f0f 	cmp.w	r8, #15
  4034b4:	f240 80fb 	bls.w	4036ae <_malloc_r+0x4a6>
  4034b8:	6860      	ldr	r0, [r4, #4]
  4034ba:	f1a8 020c 	sub.w	r2, r8, #12
  4034be:	f022 0207 	bic.w	r2, r2, #7
  4034c2:	eb04 0e02 	add.w	lr, r4, r2
  4034c6:	f000 0001 	and.w	r0, r0, #1
  4034ca:	f04f 0c05 	mov.w	ip, #5
  4034ce:	4310      	orrs	r0, r2
  4034d0:	2a0f      	cmp	r2, #15
  4034d2:	6060      	str	r0, [r4, #4]
  4034d4:	f8ce c004 	str.w	ip, [lr, #4]
  4034d8:	f8ce c008 	str.w	ip, [lr, #8]
  4034dc:	f200 8117 	bhi.w	40370e <_malloc_r+0x506>
  4034e0:	4b1d      	ldr	r3, [pc, #116]	; (403558 <_malloc_r+0x350>)
  4034e2:	68bc      	ldr	r4, [r7, #8]
  4034e4:	681a      	ldr	r2, [r3, #0]
  4034e6:	4291      	cmp	r1, r2
  4034e8:	bf88      	it	hi
  4034ea:	6019      	strhi	r1, [r3, #0]
  4034ec:	4b1b      	ldr	r3, [pc, #108]	; (40355c <_malloc_r+0x354>)
  4034ee:	681a      	ldr	r2, [r3, #0]
  4034f0:	4291      	cmp	r1, r2
  4034f2:	6862      	ldr	r2, [r4, #4]
  4034f4:	bf88      	it	hi
  4034f6:	6019      	strhi	r1, [r3, #0]
  4034f8:	f022 0203 	bic.w	r2, r2, #3
  4034fc:	4296      	cmp	r6, r2
  4034fe:	eba2 0306 	sub.w	r3, r2, r6
  403502:	d801      	bhi.n	403508 <_malloc_r+0x300>
  403504:	2b0f      	cmp	r3, #15
  403506:	dc04      	bgt.n	403512 <_malloc_r+0x30a>
  403508:	4628      	mov	r0, r5
  40350a:	f000 f933 	bl	403774 <__malloc_unlock>
  40350e:	2400      	movs	r4, #0
  403510:	e740      	b.n	403394 <_malloc_r+0x18c>
  403512:	19a2      	adds	r2, r4, r6
  403514:	f043 0301 	orr.w	r3, r3, #1
  403518:	f046 0601 	orr.w	r6, r6, #1
  40351c:	6066      	str	r6, [r4, #4]
  40351e:	4628      	mov	r0, r5
  403520:	60ba      	str	r2, [r7, #8]
  403522:	6053      	str	r3, [r2, #4]
  403524:	f000 f926 	bl	403774 <__malloc_unlock>
  403528:	3408      	adds	r4, #8
  40352a:	4620      	mov	r0, r4
  40352c:	b003      	add	sp, #12
  40352e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403532:	2b14      	cmp	r3, #20
  403534:	d971      	bls.n	40361a <_malloc_r+0x412>
  403536:	2b54      	cmp	r3, #84	; 0x54
  403538:	f200 80a3 	bhi.w	403682 <_malloc_r+0x47a>
  40353c:	0b33      	lsrs	r3, r6, #12
  40353e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403542:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403546:	00c3      	lsls	r3, r0, #3
  403548:	e680      	b.n	40324c <_malloc_r+0x44>
  40354a:	bf00      	nop
  40354c:	20000464 	.word	0x20000464
  403550:	2000cf1c 	.word	0x2000cf1c
  403554:	2000ceec 	.word	0x2000ceec
  403558:	2000cf14 	.word	0x2000cf14
  40355c:	2000cf18 	.word	0x2000cf18
  403560:	2000046c 	.word	0x2000046c
  403564:	2000086c 	.word	0x2000086c
  403568:	0a5a      	lsrs	r2, r3, #9
  40356a:	2a04      	cmp	r2, #4
  40356c:	d95b      	bls.n	403626 <_malloc_r+0x41e>
  40356e:	2a14      	cmp	r2, #20
  403570:	f200 80ae 	bhi.w	4036d0 <_malloc_r+0x4c8>
  403574:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403578:	00c9      	lsls	r1, r1, #3
  40357a:	325b      	adds	r2, #91	; 0x5b
  40357c:	eb07 0c01 	add.w	ip, r7, r1
  403580:	5879      	ldr	r1, [r7, r1]
  403582:	f1ac 0c08 	sub.w	ip, ip, #8
  403586:	458c      	cmp	ip, r1
  403588:	f000 8088 	beq.w	40369c <_malloc_r+0x494>
  40358c:	684a      	ldr	r2, [r1, #4]
  40358e:	f022 0203 	bic.w	r2, r2, #3
  403592:	4293      	cmp	r3, r2
  403594:	d273      	bcs.n	40367e <_malloc_r+0x476>
  403596:	6889      	ldr	r1, [r1, #8]
  403598:	458c      	cmp	ip, r1
  40359a:	d1f7      	bne.n	40358c <_malloc_r+0x384>
  40359c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4035a0:	687b      	ldr	r3, [r7, #4]
  4035a2:	60e2      	str	r2, [r4, #12]
  4035a4:	f8c4 c008 	str.w	ip, [r4, #8]
  4035a8:	6094      	str	r4, [r2, #8]
  4035aa:	f8cc 400c 	str.w	r4, [ip, #12]
  4035ae:	e68f      	b.n	4032d0 <_malloc_r+0xc8>
  4035b0:	19a1      	adds	r1, r4, r6
  4035b2:	f046 0c01 	orr.w	ip, r6, #1
  4035b6:	f042 0601 	orr.w	r6, r2, #1
  4035ba:	f8c4 c004 	str.w	ip, [r4, #4]
  4035be:	4628      	mov	r0, r5
  4035c0:	6179      	str	r1, [r7, #20]
  4035c2:	6139      	str	r1, [r7, #16]
  4035c4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4035c8:	f8c1 e008 	str.w	lr, [r1, #8]
  4035cc:	604e      	str	r6, [r1, #4]
  4035ce:	50e2      	str	r2, [r4, r3]
  4035d0:	f000 f8d0 	bl	403774 <__malloc_unlock>
  4035d4:	3408      	adds	r4, #8
  4035d6:	e6dd      	b.n	403394 <_malloc_r+0x18c>
  4035d8:	687b      	ldr	r3, [r7, #4]
  4035da:	e679      	b.n	4032d0 <_malloc_r+0xc8>
  4035dc:	f108 0801 	add.w	r8, r8, #1
  4035e0:	f018 0f03 	tst.w	r8, #3
  4035e4:	f10c 0c08 	add.w	ip, ip, #8
  4035e8:	f47f ae85 	bne.w	4032f6 <_malloc_r+0xee>
  4035ec:	e02d      	b.n	40364a <_malloc_r+0x442>
  4035ee:	68dc      	ldr	r4, [r3, #12]
  4035f0:	42a3      	cmp	r3, r4
  4035f2:	bf08      	it	eq
  4035f4:	3002      	addeq	r0, #2
  4035f6:	f43f ae3e 	beq.w	403276 <_malloc_r+0x6e>
  4035fa:	e6bb      	b.n	403374 <_malloc_r+0x16c>
  4035fc:	4419      	add	r1, r3
  4035fe:	461c      	mov	r4, r3
  403600:	684a      	ldr	r2, [r1, #4]
  403602:	68db      	ldr	r3, [r3, #12]
  403604:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403608:	f042 0201 	orr.w	r2, r2, #1
  40360c:	604a      	str	r2, [r1, #4]
  40360e:	4628      	mov	r0, r5
  403610:	60f3      	str	r3, [r6, #12]
  403612:	609e      	str	r6, [r3, #8]
  403614:	f000 f8ae 	bl	403774 <__malloc_unlock>
  403618:	e6bc      	b.n	403394 <_malloc_r+0x18c>
  40361a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40361e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403622:	00c3      	lsls	r3, r0, #3
  403624:	e612      	b.n	40324c <_malloc_r+0x44>
  403626:	099a      	lsrs	r2, r3, #6
  403628:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40362c:	00c9      	lsls	r1, r1, #3
  40362e:	3238      	adds	r2, #56	; 0x38
  403630:	e7a4      	b.n	40357c <_malloc_r+0x374>
  403632:	42bc      	cmp	r4, r7
  403634:	d054      	beq.n	4036e0 <_malloc_r+0x4d8>
  403636:	68bc      	ldr	r4, [r7, #8]
  403638:	6862      	ldr	r2, [r4, #4]
  40363a:	f022 0203 	bic.w	r2, r2, #3
  40363e:	e75d      	b.n	4034fc <_malloc_r+0x2f4>
  403640:	f859 3908 	ldr.w	r3, [r9], #-8
  403644:	4599      	cmp	r9, r3
  403646:	f040 8086 	bne.w	403756 <_malloc_r+0x54e>
  40364a:	f010 0f03 	tst.w	r0, #3
  40364e:	f100 30ff 	add.w	r0, r0, #4294967295
  403652:	d1f5      	bne.n	403640 <_malloc_r+0x438>
  403654:	687b      	ldr	r3, [r7, #4]
  403656:	ea23 0304 	bic.w	r3, r3, r4
  40365a:	607b      	str	r3, [r7, #4]
  40365c:	0064      	lsls	r4, r4, #1
  40365e:	429c      	cmp	r4, r3
  403660:	f63f aec7 	bhi.w	4033f2 <_malloc_r+0x1ea>
  403664:	2c00      	cmp	r4, #0
  403666:	f43f aec4 	beq.w	4033f2 <_malloc_r+0x1ea>
  40366a:	421c      	tst	r4, r3
  40366c:	4640      	mov	r0, r8
  40366e:	f47f ae3e 	bne.w	4032ee <_malloc_r+0xe6>
  403672:	0064      	lsls	r4, r4, #1
  403674:	421c      	tst	r4, r3
  403676:	f100 0004 	add.w	r0, r0, #4
  40367a:	d0fa      	beq.n	403672 <_malloc_r+0x46a>
  40367c:	e637      	b.n	4032ee <_malloc_r+0xe6>
  40367e:	468c      	mov	ip, r1
  403680:	e78c      	b.n	40359c <_malloc_r+0x394>
  403682:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403686:	d815      	bhi.n	4036b4 <_malloc_r+0x4ac>
  403688:	0bf3      	lsrs	r3, r6, #15
  40368a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40368e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403692:	00c3      	lsls	r3, r0, #3
  403694:	e5da      	b.n	40324c <_malloc_r+0x44>
  403696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40369a:	e6ed      	b.n	403478 <_malloc_r+0x270>
  40369c:	687b      	ldr	r3, [r7, #4]
  40369e:	1092      	asrs	r2, r2, #2
  4036a0:	2101      	movs	r1, #1
  4036a2:	fa01 f202 	lsl.w	r2, r1, r2
  4036a6:	4313      	orrs	r3, r2
  4036a8:	607b      	str	r3, [r7, #4]
  4036aa:	4662      	mov	r2, ip
  4036ac:	e779      	b.n	4035a2 <_malloc_r+0x39a>
  4036ae:	2301      	movs	r3, #1
  4036b0:	6053      	str	r3, [r2, #4]
  4036b2:	e729      	b.n	403508 <_malloc_r+0x300>
  4036b4:	f240 5254 	movw	r2, #1364	; 0x554
  4036b8:	4293      	cmp	r3, r2
  4036ba:	d822      	bhi.n	403702 <_malloc_r+0x4fa>
  4036bc:	0cb3      	lsrs	r3, r6, #18
  4036be:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4036c2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4036c6:	00c3      	lsls	r3, r0, #3
  4036c8:	e5c0      	b.n	40324c <_malloc_r+0x44>
  4036ca:	f103 0b10 	add.w	fp, r3, #16
  4036ce:	e6ae      	b.n	40342e <_malloc_r+0x226>
  4036d0:	2a54      	cmp	r2, #84	; 0x54
  4036d2:	d829      	bhi.n	403728 <_malloc_r+0x520>
  4036d4:	0b1a      	lsrs	r2, r3, #12
  4036d6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4036da:	00c9      	lsls	r1, r1, #3
  4036dc:	326e      	adds	r2, #110	; 0x6e
  4036de:	e74d      	b.n	40357c <_malloc_r+0x374>
  4036e0:	4b20      	ldr	r3, [pc, #128]	; (403764 <_malloc_r+0x55c>)
  4036e2:	6819      	ldr	r1, [r3, #0]
  4036e4:	4459      	add	r1, fp
  4036e6:	6019      	str	r1, [r3, #0]
  4036e8:	e6b2      	b.n	403450 <_malloc_r+0x248>
  4036ea:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4036ee:	2800      	cmp	r0, #0
  4036f0:	f47f aeae 	bne.w	403450 <_malloc_r+0x248>
  4036f4:	eb08 030b 	add.w	r3, r8, fp
  4036f8:	68ba      	ldr	r2, [r7, #8]
  4036fa:	f043 0301 	orr.w	r3, r3, #1
  4036fe:	6053      	str	r3, [r2, #4]
  403700:	e6ee      	b.n	4034e0 <_malloc_r+0x2d8>
  403702:	207f      	movs	r0, #127	; 0x7f
  403704:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403708:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40370c:	e59e      	b.n	40324c <_malloc_r+0x44>
  40370e:	f104 0108 	add.w	r1, r4, #8
  403712:	4628      	mov	r0, r5
  403714:	9300      	str	r3, [sp, #0]
  403716:	f7ff fc29 	bl	402f6c <_free_r>
  40371a:	9b00      	ldr	r3, [sp, #0]
  40371c:	6819      	ldr	r1, [r3, #0]
  40371e:	e6df      	b.n	4034e0 <_malloc_r+0x2d8>
  403720:	2001      	movs	r0, #1
  403722:	f04f 0900 	mov.w	r9, #0
  403726:	e6bc      	b.n	4034a2 <_malloc_r+0x29a>
  403728:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40372c:	d805      	bhi.n	40373a <_malloc_r+0x532>
  40372e:	0bda      	lsrs	r2, r3, #15
  403730:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403734:	00c9      	lsls	r1, r1, #3
  403736:	3277      	adds	r2, #119	; 0x77
  403738:	e720      	b.n	40357c <_malloc_r+0x374>
  40373a:	f240 5154 	movw	r1, #1364	; 0x554
  40373e:	428a      	cmp	r2, r1
  403740:	d805      	bhi.n	40374e <_malloc_r+0x546>
  403742:	0c9a      	lsrs	r2, r3, #18
  403744:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403748:	00c9      	lsls	r1, r1, #3
  40374a:	327c      	adds	r2, #124	; 0x7c
  40374c:	e716      	b.n	40357c <_malloc_r+0x374>
  40374e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403752:	227e      	movs	r2, #126	; 0x7e
  403754:	e712      	b.n	40357c <_malloc_r+0x374>
  403756:	687b      	ldr	r3, [r7, #4]
  403758:	e780      	b.n	40365c <_malloc_r+0x454>
  40375a:	08f0      	lsrs	r0, r6, #3
  40375c:	f106 0308 	add.w	r3, r6, #8
  403760:	e600      	b.n	403364 <_malloc_r+0x15c>
  403762:	bf00      	nop
  403764:	2000ceec 	.word	0x2000ceec

00403768 <__malloc_lock>:
  403768:	4801      	ldr	r0, [pc, #4]	; (403770 <__malloc_lock+0x8>)
  40376a:	f7ff bd13 	b.w	403194 <__retarget_lock_acquire_recursive>
  40376e:	bf00      	nop
  403770:	2000d038 	.word	0x2000d038

00403774 <__malloc_unlock>:
  403774:	4801      	ldr	r0, [pc, #4]	; (40377c <__malloc_unlock+0x8>)
  403776:	f7ff bd0f 	b.w	403198 <__retarget_lock_release_recursive>
  40377a:	bf00      	nop
  40377c:	2000d038 	.word	0x2000d038

00403780 <_sbrk_r>:
  403780:	b538      	push	{r3, r4, r5, lr}
  403782:	4c07      	ldr	r4, [pc, #28]	; (4037a0 <_sbrk_r+0x20>)
  403784:	2300      	movs	r3, #0
  403786:	4605      	mov	r5, r0
  403788:	4608      	mov	r0, r1
  40378a:	6023      	str	r3, [r4, #0]
  40378c:	f7fe f872 	bl	401874 <_sbrk>
  403790:	1c43      	adds	r3, r0, #1
  403792:	d000      	beq.n	403796 <_sbrk_r+0x16>
  403794:	bd38      	pop	{r3, r4, r5, pc}
  403796:	6823      	ldr	r3, [r4, #0]
  403798:	2b00      	cmp	r3, #0
  40379a:	d0fb      	beq.n	403794 <_sbrk_r+0x14>
  40379c:	602b      	str	r3, [r5, #0]
  40379e:	bd38      	pop	{r3, r4, r5, pc}
  4037a0:	2000d04c 	.word	0x2000d04c

004037a4 <__sread>:
  4037a4:	b510      	push	{r4, lr}
  4037a6:	460c      	mov	r4, r1
  4037a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037ac:	f000 f954 	bl	403a58 <_read_r>
  4037b0:	2800      	cmp	r0, #0
  4037b2:	db03      	blt.n	4037bc <__sread+0x18>
  4037b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4037b6:	4403      	add	r3, r0
  4037b8:	6523      	str	r3, [r4, #80]	; 0x50
  4037ba:	bd10      	pop	{r4, pc}
  4037bc:	89a3      	ldrh	r3, [r4, #12]
  4037be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4037c2:	81a3      	strh	r3, [r4, #12]
  4037c4:	bd10      	pop	{r4, pc}
  4037c6:	bf00      	nop

004037c8 <__swrite>:
  4037c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4037cc:	4616      	mov	r6, r2
  4037ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4037d2:	461f      	mov	r7, r3
  4037d4:	05d3      	lsls	r3, r2, #23
  4037d6:	460c      	mov	r4, r1
  4037d8:	4605      	mov	r5, r0
  4037da:	d507      	bpl.n	4037ec <__swrite+0x24>
  4037dc:	2200      	movs	r2, #0
  4037de:	2302      	movs	r3, #2
  4037e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037e4:	f000 f922 	bl	403a2c <_lseek_r>
  4037e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4037ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4037f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4037f4:	81a2      	strh	r2, [r4, #12]
  4037f6:	463b      	mov	r3, r7
  4037f8:	4632      	mov	r2, r6
  4037fa:	4628      	mov	r0, r5
  4037fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403800:	f000 b814 	b.w	40382c <_write_r>

00403804 <__sseek>:
  403804:	b510      	push	{r4, lr}
  403806:	460c      	mov	r4, r1
  403808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40380c:	f000 f90e 	bl	403a2c <_lseek_r>
  403810:	89a3      	ldrh	r3, [r4, #12]
  403812:	1c42      	adds	r2, r0, #1
  403814:	bf0e      	itee	eq
  403816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40381a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40381e:	6520      	strne	r0, [r4, #80]	; 0x50
  403820:	81a3      	strh	r3, [r4, #12]
  403822:	bd10      	pop	{r4, pc}

00403824 <__sclose>:
  403824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403828:	f000 b878 	b.w	40391c <_close_r>

0040382c <_write_r>:
  40382c:	b570      	push	{r4, r5, r6, lr}
  40382e:	460d      	mov	r5, r1
  403830:	4c08      	ldr	r4, [pc, #32]	; (403854 <_write_r+0x28>)
  403832:	4611      	mov	r1, r2
  403834:	4606      	mov	r6, r0
  403836:	461a      	mov	r2, r3
  403838:	4628      	mov	r0, r5
  40383a:	2300      	movs	r3, #0
  40383c:	6023      	str	r3, [r4, #0]
  40383e:	f7fd fb3f 	bl	400ec0 <_write>
  403842:	1c43      	adds	r3, r0, #1
  403844:	d000      	beq.n	403848 <_write_r+0x1c>
  403846:	bd70      	pop	{r4, r5, r6, pc}
  403848:	6823      	ldr	r3, [r4, #0]
  40384a:	2b00      	cmp	r3, #0
  40384c:	d0fb      	beq.n	403846 <_write_r+0x1a>
  40384e:	6033      	str	r3, [r6, #0]
  403850:	bd70      	pop	{r4, r5, r6, pc}
  403852:	bf00      	nop
  403854:	2000d04c 	.word	0x2000d04c

00403858 <__register_exitproc>:
  403858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40385c:	4d2c      	ldr	r5, [pc, #176]	; (403910 <__register_exitproc+0xb8>)
  40385e:	4606      	mov	r6, r0
  403860:	6828      	ldr	r0, [r5, #0]
  403862:	4698      	mov	r8, r3
  403864:	460f      	mov	r7, r1
  403866:	4691      	mov	r9, r2
  403868:	f7ff fc94 	bl	403194 <__retarget_lock_acquire_recursive>
  40386c:	4b29      	ldr	r3, [pc, #164]	; (403914 <__register_exitproc+0xbc>)
  40386e:	681c      	ldr	r4, [r3, #0]
  403870:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403874:	2b00      	cmp	r3, #0
  403876:	d03e      	beq.n	4038f6 <__register_exitproc+0x9e>
  403878:	685a      	ldr	r2, [r3, #4]
  40387a:	2a1f      	cmp	r2, #31
  40387c:	dc1c      	bgt.n	4038b8 <__register_exitproc+0x60>
  40387e:	f102 0e01 	add.w	lr, r2, #1
  403882:	b176      	cbz	r6, 4038a2 <__register_exitproc+0x4a>
  403884:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403888:	2401      	movs	r4, #1
  40388a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40388e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403892:	4094      	lsls	r4, r2
  403894:	4320      	orrs	r0, r4
  403896:	2e02      	cmp	r6, #2
  403898:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40389c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4038a0:	d023      	beq.n	4038ea <__register_exitproc+0x92>
  4038a2:	3202      	adds	r2, #2
  4038a4:	f8c3 e004 	str.w	lr, [r3, #4]
  4038a8:	6828      	ldr	r0, [r5, #0]
  4038aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4038ae:	f7ff fc73 	bl	403198 <__retarget_lock_release_recursive>
  4038b2:	2000      	movs	r0, #0
  4038b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4038b8:	4b17      	ldr	r3, [pc, #92]	; (403918 <__register_exitproc+0xc0>)
  4038ba:	b30b      	cbz	r3, 403900 <__register_exitproc+0xa8>
  4038bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4038c0:	f7ff fc9a 	bl	4031f8 <malloc>
  4038c4:	4603      	mov	r3, r0
  4038c6:	b1d8      	cbz	r0, 403900 <__register_exitproc+0xa8>
  4038c8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4038cc:	6002      	str	r2, [r0, #0]
  4038ce:	2100      	movs	r1, #0
  4038d0:	6041      	str	r1, [r0, #4]
  4038d2:	460a      	mov	r2, r1
  4038d4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4038d8:	f04f 0e01 	mov.w	lr, #1
  4038dc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4038e0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4038e4:	2e00      	cmp	r6, #0
  4038e6:	d0dc      	beq.n	4038a2 <__register_exitproc+0x4a>
  4038e8:	e7cc      	b.n	403884 <__register_exitproc+0x2c>
  4038ea:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4038ee:	430c      	orrs	r4, r1
  4038f0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4038f4:	e7d5      	b.n	4038a2 <__register_exitproc+0x4a>
  4038f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4038fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4038fe:	e7bb      	b.n	403878 <__register_exitproc+0x20>
  403900:	6828      	ldr	r0, [r5, #0]
  403902:	f7ff fc49 	bl	403198 <__retarget_lock_release_recursive>
  403906:	f04f 30ff 	mov.w	r0, #4294967295
  40390a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40390e:	bf00      	nop
  403910:	20000460 	.word	0x20000460
  403914:	00403a8c 	.word	0x00403a8c
  403918:	004031f9 	.word	0x004031f9

0040391c <_close_r>:
  40391c:	b538      	push	{r3, r4, r5, lr}
  40391e:	4c07      	ldr	r4, [pc, #28]	; (40393c <_close_r+0x20>)
  403920:	2300      	movs	r3, #0
  403922:	4605      	mov	r5, r0
  403924:	4608      	mov	r0, r1
  403926:	6023      	str	r3, [r4, #0]
  403928:	f7fd ffc0 	bl	4018ac <_close>
  40392c:	1c43      	adds	r3, r0, #1
  40392e:	d000      	beq.n	403932 <_close_r+0x16>
  403930:	bd38      	pop	{r3, r4, r5, pc}
  403932:	6823      	ldr	r3, [r4, #0]
  403934:	2b00      	cmp	r3, #0
  403936:	d0fb      	beq.n	403930 <_close_r+0x14>
  403938:	602b      	str	r3, [r5, #0]
  40393a:	bd38      	pop	{r3, r4, r5, pc}
  40393c:	2000d04c 	.word	0x2000d04c

00403940 <_fclose_r>:
  403940:	b570      	push	{r4, r5, r6, lr}
  403942:	b159      	cbz	r1, 40395c <_fclose_r+0x1c>
  403944:	4605      	mov	r5, r0
  403946:	460c      	mov	r4, r1
  403948:	b110      	cbz	r0, 403950 <_fclose_r+0x10>
  40394a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40394c:	2b00      	cmp	r3, #0
  40394e:	d03c      	beq.n	4039ca <_fclose_r+0x8a>
  403950:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403952:	07d8      	lsls	r0, r3, #31
  403954:	d505      	bpl.n	403962 <_fclose_r+0x22>
  403956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40395a:	b92b      	cbnz	r3, 403968 <_fclose_r+0x28>
  40395c:	2600      	movs	r6, #0
  40395e:	4630      	mov	r0, r6
  403960:	bd70      	pop	{r4, r5, r6, pc}
  403962:	89a3      	ldrh	r3, [r4, #12]
  403964:	0599      	lsls	r1, r3, #22
  403966:	d53c      	bpl.n	4039e2 <_fclose_r+0xa2>
  403968:	4621      	mov	r1, r4
  40396a:	4628      	mov	r0, r5
  40396c:	f7ff f964 	bl	402c38 <__sflush_r>
  403970:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403972:	4606      	mov	r6, r0
  403974:	b133      	cbz	r3, 403984 <_fclose_r+0x44>
  403976:	69e1      	ldr	r1, [r4, #28]
  403978:	4628      	mov	r0, r5
  40397a:	4798      	blx	r3
  40397c:	2800      	cmp	r0, #0
  40397e:	bfb8      	it	lt
  403980:	f04f 36ff 	movlt.w	r6, #4294967295
  403984:	89a3      	ldrh	r3, [r4, #12]
  403986:	061a      	lsls	r2, r3, #24
  403988:	d422      	bmi.n	4039d0 <_fclose_r+0x90>
  40398a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40398c:	b141      	cbz	r1, 4039a0 <_fclose_r+0x60>
  40398e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403992:	4299      	cmp	r1, r3
  403994:	d002      	beq.n	40399c <_fclose_r+0x5c>
  403996:	4628      	mov	r0, r5
  403998:	f7ff fae8 	bl	402f6c <_free_r>
  40399c:	2300      	movs	r3, #0
  40399e:	6323      	str	r3, [r4, #48]	; 0x30
  4039a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4039a2:	b121      	cbz	r1, 4039ae <_fclose_r+0x6e>
  4039a4:	4628      	mov	r0, r5
  4039a6:	f7ff fae1 	bl	402f6c <_free_r>
  4039aa:	2300      	movs	r3, #0
  4039ac:	6463      	str	r3, [r4, #68]	; 0x44
  4039ae:	f7ff fa67 	bl	402e80 <__sfp_lock_acquire>
  4039b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4039b4:	2200      	movs	r2, #0
  4039b6:	07db      	lsls	r3, r3, #31
  4039b8:	81a2      	strh	r2, [r4, #12]
  4039ba:	d50e      	bpl.n	4039da <_fclose_r+0x9a>
  4039bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4039be:	f7ff fbe7 	bl	403190 <__retarget_lock_close_recursive>
  4039c2:	f7ff fa63 	bl	402e8c <__sfp_lock_release>
  4039c6:	4630      	mov	r0, r6
  4039c8:	bd70      	pop	{r4, r5, r6, pc}
  4039ca:	f7ff fa2d 	bl	402e28 <__sinit>
  4039ce:	e7bf      	b.n	403950 <_fclose_r+0x10>
  4039d0:	6921      	ldr	r1, [r4, #16]
  4039d2:	4628      	mov	r0, r5
  4039d4:	f7ff faca 	bl	402f6c <_free_r>
  4039d8:	e7d7      	b.n	40398a <_fclose_r+0x4a>
  4039da:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4039dc:	f7ff fbdc 	bl	403198 <__retarget_lock_release_recursive>
  4039e0:	e7ec      	b.n	4039bc <_fclose_r+0x7c>
  4039e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4039e4:	f7ff fbd6 	bl	403194 <__retarget_lock_acquire_recursive>
  4039e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039ec:	2b00      	cmp	r3, #0
  4039ee:	d1bb      	bne.n	403968 <_fclose_r+0x28>
  4039f0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4039f2:	f016 0601 	ands.w	r6, r6, #1
  4039f6:	d1b1      	bne.n	40395c <_fclose_r+0x1c>
  4039f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4039fa:	f7ff fbcd 	bl	403198 <__retarget_lock_release_recursive>
  4039fe:	4630      	mov	r0, r6
  403a00:	bd70      	pop	{r4, r5, r6, pc}
  403a02:	bf00      	nop

00403a04 <_fstat_r>:
  403a04:	b538      	push	{r3, r4, r5, lr}
  403a06:	460b      	mov	r3, r1
  403a08:	4c07      	ldr	r4, [pc, #28]	; (403a28 <_fstat_r+0x24>)
  403a0a:	4605      	mov	r5, r0
  403a0c:	4611      	mov	r1, r2
  403a0e:	4618      	mov	r0, r3
  403a10:	2300      	movs	r3, #0
  403a12:	6023      	str	r3, [r4, #0]
  403a14:	f7fd ff4d 	bl	4018b2 <_fstat>
  403a18:	1c43      	adds	r3, r0, #1
  403a1a:	d000      	beq.n	403a1e <_fstat_r+0x1a>
  403a1c:	bd38      	pop	{r3, r4, r5, pc}
  403a1e:	6823      	ldr	r3, [r4, #0]
  403a20:	2b00      	cmp	r3, #0
  403a22:	d0fb      	beq.n	403a1c <_fstat_r+0x18>
  403a24:	602b      	str	r3, [r5, #0]
  403a26:	bd38      	pop	{r3, r4, r5, pc}
  403a28:	2000d04c 	.word	0x2000d04c

00403a2c <_lseek_r>:
  403a2c:	b570      	push	{r4, r5, r6, lr}
  403a2e:	460d      	mov	r5, r1
  403a30:	4c08      	ldr	r4, [pc, #32]	; (403a54 <_lseek_r+0x28>)
  403a32:	4611      	mov	r1, r2
  403a34:	4606      	mov	r6, r0
  403a36:	461a      	mov	r2, r3
  403a38:	4628      	mov	r0, r5
  403a3a:	2300      	movs	r3, #0
  403a3c:	6023      	str	r3, [r4, #0]
  403a3e:	f7fd ff3d 	bl	4018bc <_lseek>
  403a42:	1c43      	adds	r3, r0, #1
  403a44:	d000      	beq.n	403a48 <_lseek_r+0x1c>
  403a46:	bd70      	pop	{r4, r5, r6, pc}
  403a48:	6823      	ldr	r3, [r4, #0]
  403a4a:	2b00      	cmp	r3, #0
  403a4c:	d0fb      	beq.n	403a46 <_lseek_r+0x1a>
  403a4e:	6033      	str	r3, [r6, #0]
  403a50:	bd70      	pop	{r4, r5, r6, pc}
  403a52:	bf00      	nop
  403a54:	2000d04c 	.word	0x2000d04c

00403a58 <_read_r>:
  403a58:	b570      	push	{r4, r5, r6, lr}
  403a5a:	460d      	mov	r5, r1
  403a5c:	4c08      	ldr	r4, [pc, #32]	; (403a80 <_read_r+0x28>)
  403a5e:	4611      	mov	r1, r2
  403a60:	4606      	mov	r6, r0
  403a62:	461a      	mov	r2, r3
  403a64:	4628      	mov	r0, r5
  403a66:	2300      	movs	r3, #0
  403a68:	6023      	str	r3, [r4, #0]
  403a6a:	f7fd fa0b 	bl	400e84 <_read>
  403a6e:	1c43      	adds	r3, r0, #1
  403a70:	d000      	beq.n	403a74 <_read_r+0x1c>
  403a72:	bd70      	pop	{r4, r5, r6, pc}
  403a74:	6823      	ldr	r3, [r4, #0]
  403a76:	2b00      	cmp	r3, #0
  403a78:	d0fb      	beq.n	403a72 <_read_r+0x1a>
  403a7a:	6033      	str	r3, [r6, #0]
  403a7c:	bd70      	pop	{r4, r5, r6, pc}
  403a7e:	bf00      	nop
  403a80:	2000d04c 	.word	0x2000d04c
  403a84:	74727173 	.word	0x74727173
  403a88:	00000000 	.word	0x00000000

00403a8c <_global_impure_ptr>:
  403a8c:	20000038                                8.. 

00403a90 <_init>:
  403a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a92:	bf00      	nop
  403a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403a96:	bc08      	pop	{r3}
  403a98:	469e      	mov	lr, r3
  403a9a:	4770      	bx	lr

00403a9c <__init_array_start>:
  403a9c:	00402c19 	.word	0x00402c19

00403aa0 <__frame_dummy_init_array_entry>:
  403aa0:	0040011d                                ..@.

00403aa4 <_fini>:
  403aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403aa6:	bf00      	nop
  403aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403aaa:	bc08      	pop	{r3}
  403aac:	469e      	mov	lr, r3
  403aae:	4770      	bx	lr

00403ab0 <__fini_array_start>:
  403ab0:	004000f9 	.word	0x004000f9

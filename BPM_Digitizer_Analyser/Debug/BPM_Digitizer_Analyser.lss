
BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004af0  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404af0  00404af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000854  20000000  00404af8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008460  20000858  00405350  00020854  2**3
                  ALLOC
  4 .stack        00003000  20008cb8  0040d7b0  00020854  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020882  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001916a  00000000  00000000  000208db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000039dd  00000000  00000000  00039a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000516a  00000000  00000000  0003d422  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000aa0  00000000  00000000  0004258c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a30  00000000  00000000  0004302c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a382  00000000  00000000  00043a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000db9a  00000000  00000000  0005ddde  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00065c0d  00000000  00000000  0006b978  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023e8  00000000  00000000  000d1588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 bc 00 20 81 0a 40 00 7d 0a 40 00 7d 0a 40 00     ... ..@.}.@.}.@.
  400010:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 00 00 00 00     }.@.}.@.}.@.....
	...
  40002c:	7d 0a 40 00 7d 0a 40 00 00 00 00 00 7d 0a 40 00     }.@.}.@.....}.@.
  40003c:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 7d 0a 40 00     }.@.}.@.}.@.}.@.
  40004c:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 7d 0a 40 00     }.@.}.@.}.@.}.@.
  40005c:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 7d 0a 40 00     }.@.}.@.}.@.}.@.
  40006c:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 15 0d 40 00     }.@.}.@.}.@...@.
  40007c:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 7d 0a 40 00     }.@.}.@.}.@.}.@.
  40008c:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 a5 17 40 00     }.@.}.@.}.@...@.
  40009c:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 7d 0a 40 00     }.@.}.@.}.@.}.@.
  4000ac:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 e5 06 40 00     }.@.}.@.}.@...@.
  4000bc:	f9 06 40 00 7d 0a 40 00 01 17 40 00 7d 0a 40 00     ..@.}.@...@.}.@.
  4000cc:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 7d 0a 40 00     }.@.}.@.}.@.}.@.
  4000dc:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00 7d 0a 40 00     }.@.}.@.}.@.}.@.
  4000ec:	7d 0a 40 00 7d 0a 40 00 7d 0a 40 00                 }.@.}.@.}.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000858 	.word	0x20000858
  400114:	00000000 	.word	0x00000000
  400118:	00404af8 	.word	0x00404af8

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00404af8 	.word	0x00404af8
  400158:	2000085c 	.word	0x2000085c
  40015c:	00404af8 	.word	0x00404af8
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	480b      	ldr	r0, [pc, #44]	; (4001c8 <sysclk_init+0x64>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	00400c55 	.word	0x00400c55
  4001a8:	0040086d 	.word	0x0040086d
  4001ac:	004008c1 	.word	0x004008c1
  4001b0:	004008d1 	.word	0x004008d1
  4001b4:	200f3f01 	.word	0x200f3f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	004008e1 	.word	0x004008e1
  4001c0:	00400809 	.word	0x00400809
  4001c4:	00400b49 	.word	0x00400b49
  4001c8:	05b8d800 	.word	0x05b8d800

004001cc <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  4001cc:	2a00      	cmp	r2, #0
  4001ce:	d037      	beq.n	400240 <usart_serial_write_packet+0x74>
{
  4001d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4001d4:	4693      	mov	fp, r2
  4001d6:	4605      	mov	r5, r0
  4001d8:	460f      	mov	r7, r1
  4001da:	448b      	add	fp, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001dc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 400250 <usart_serial_write_packet+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001e0:	4e18      	ldr	r6, [pc, #96]	; (400244 <usart_serial_write_packet+0x78>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001e2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400254 <usart_serial_write_packet+0x88>
  4001e6:	e006      	b.n	4001f6 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001e8:	4621      	mov	r1, r4
  4001ea:	4640      	mov	r0, r8
  4001ec:	47b0      	blx	r6
  4001ee:	2800      	cmp	r0, #0
  4001f0:	d1fa      	bne.n	4001e8 <usart_serial_write_packet+0x1c>
	while (len) {
  4001f2:	45bb      	cmp	fp, r7
  4001f4:	d021      	beq.n	40023a <usart_serial_write_packet+0x6e>
		usart_serial_putchar(usart, *data);
  4001f6:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  4001fa:	4545      	cmp	r5, r8
  4001fc:	d0f4      	beq.n	4001e8 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  4001fe:	454d      	cmp	r5, r9
  400200:	d00d      	beq.n	40021e <usart_serial_write_packet+0x52>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400202:	4b11      	ldr	r3, [pc, #68]	; (400248 <usart_serial_write_packet+0x7c>)
  400204:	429d      	cmp	r5, r3
  400206:	d010      	beq.n	40022a <usart_serial_write_packet+0x5e>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400208:	4b10      	ldr	r3, [pc, #64]	; (40024c <usart_serial_write_packet+0x80>)
  40020a:	429d      	cmp	r5, r3
  40020c:	d1f1      	bne.n	4001f2 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40020e:	f8df a048 	ldr.w	sl, [pc, #72]	; 400258 <usart_serial_write_packet+0x8c>
  400212:	4621      	mov	r1, r4
  400214:	480d      	ldr	r0, [pc, #52]	; (40024c <usart_serial_write_packet+0x80>)
  400216:	47d0      	blx	sl
  400218:	2800      	cmp	r0, #0
  40021a:	d1fa      	bne.n	400212 <usart_serial_write_packet+0x46>
  40021c:	e7e9      	b.n	4001f2 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40021e:	4621      	mov	r1, r4
  400220:	4648      	mov	r0, r9
  400222:	47b0      	blx	r6
  400224:	2800      	cmp	r0, #0
  400226:	d1fa      	bne.n	40021e <usart_serial_write_packet+0x52>
  400228:	e7e3      	b.n	4001f2 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40022a:	f8df a02c 	ldr.w	sl, [pc, #44]	; 400258 <usart_serial_write_packet+0x8c>
  40022e:	4621      	mov	r1, r4
  400230:	4805      	ldr	r0, [pc, #20]	; (400248 <usart_serial_write_packet+0x7c>)
  400232:	47d0      	blx	sl
  400234:	2800      	cmp	r0, #0
  400236:	d1fa      	bne.n	40022e <usart_serial_write_packet+0x62>
  400238:	e7db      	b.n	4001f2 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  40023a:	2000      	movs	r0, #0
  40023c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400240:	2000      	movs	r0, #0
  400242:	4770      	bx	lr
  400244:	00400a2f 	.word	0x00400a2f
  400248:	400a0000 	.word	0x400a0000
  40024c:	400a4000 	.word	0x400a4000
  400250:	400e0600 	.word	0x400e0600
  400254:	40060600 	.word	0x40060600
  400258:	00400a51 	.word	0x00400a51

0040025c <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  40025c:	2a00      	cmp	r2, #0
  40025e:	d03f      	beq.n	4002e0 <usart_serial_read_packet+0x84>
{
  400260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400264:	b083      	sub	sp, #12
  400266:	4606      	mov	r6, r0
  400268:	460c      	mov	r4, r1
  40026a:	4693      	mov	fp, r2
  40026c:	448b      	add	fp, r1
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40026e:	4f1d      	ldr	r7, [pc, #116]	; (4002e4 <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  400270:	4d1d      	ldr	r5, [pc, #116]	; (4002e8 <usart_serial_read_packet+0x8c>)
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400272:	f8df a080 	ldr.w	sl, [pc, #128]	; 4002f4 <usart_serial_read_packet+0x98>
  400276:	e00d      	b.n	400294 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  400278:	4621      	mov	r1, r4
  40027a:	4638      	mov	r0, r7
  40027c:	47a8      	blx	r5
  40027e:	2800      	cmp	r0, #0
  400280:	d1fa      	bne.n	400278 <usart_serial_read_packet+0x1c>
  400282:	e010      	b.n	4002a6 <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  400284:	4621      	mov	r1, r4
  400286:	4650      	mov	r0, sl
  400288:	47a8      	blx	r5
  40028a:	2800      	cmp	r0, #0
  40028c:	d1fa      	bne.n	400284 <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  40028e:	3401      	adds	r4, #1
	while (len) {
  400290:	455c      	cmp	r4, fp
  400292:	d021      	beq.n	4002d8 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400294:	2300      	movs	r3, #0
  400296:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400298:	42be      	cmp	r6, r7
  40029a:	d0ed      	beq.n	400278 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40029c:	4556      	cmp	r6, sl
  40029e:	d0f1      	beq.n	400284 <usart_serial_read_packet+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002a0:	4b12      	ldr	r3, [pc, #72]	; (4002ec <usart_serial_read_packet+0x90>)
  4002a2:	429e      	cmp	r6, r3
  4002a4:	d00d      	beq.n	4002c2 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002a6:	4b12      	ldr	r3, [pc, #72]	; (4002f0 <usart_serial_read_packet+0x94>)
  4002a8:	429e      	cmp	r6, r3
  4002aa:	d1f0      	bne.n	40028e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  4002ac:	4699      	mov	r9, r3
  4002ae:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4002f8 <usart_serial_read_packet+0x9c>
  4002b2:	a901      	add	r1, sp, #4
  4002b4:	4648      	mov	r0, r9
  4002b6:	47c0      	blx	r8
  4002b8:	2800      	cmp	r0, #0
  4002ba:	d1fa      	bne.n	4002b2 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  4002bc:	9b01      	ldr	r3, [sp, #4]
  4002be:	7023      	strb	r3, [r4, #0]
  4002c0:	e7e5      	b.n	40028e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  4002c2:	4699      	mov	r9, r3
  4002c4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4002f8 <usart_serial_read_packet+0x9c>
  4002c8:	a901      	add	r1, sp, #4
  4002ca:	4648      	mov	r0, r9
  4002cc:	47c0      	blx	r8
  4002ce:	2800      	cmp	r0, #0
  4002d0:	d1fa      	bne.n	4002c8 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  4002d2:	9b01      	ldr	r3, [sp, #4]
  4002d4:	7023      	strb	r3, [r4, #0]
  4002d6:	e7da      	b.n	40028e <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  4002d8:	2000      	movs	r0, #0
  4002da:	b003      	add	sp, #12
  4002dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002e0:	2000      	movs	r0, #0
  4002e2:	4770      	bx	lr
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	00400a3f 	.word	0x00400a3f
  4002ec:	400a0000 	.word	0x400a0000
  4002f0:	400a4000 	.word	0x400a4000
  4002f4:	40060600 	.word	0x40060600
  4002f8:	00400a65 	.word	0x00400a65

004002fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400300:	b980      	cbnz	r0, 400324 <_read+0x28>
  400302:	460c      	mov	r4, r1
  400304:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400306:	2a00      	cmp	r2, #0
  400308:	dd0f      	ble.n	40032a <_read+0x2e>
  40030a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40030c:	4e08      	ldr	r6, [pc, #32]	; (400330 <_read+0x34>)
  40030e:	4d09      	ldr	r5, [pc, #36]	; (400334 <_read+0x38>)
  400310:	6830      	ldr	r0, [r6, #0]
  400312:	4621      	mov	r1, r4
  400314:	682b      	ldr	r3, [r5, #0]
  400316:	4798      	blx	r3
		ptr++;
  400318:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40031a:	42bc      	cmp	r4, r7
  40031c:	d1f8      	bne.n	400310 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40031e:	4640      	mov	r0, r8
  400320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400324:	f04f 38ff 	mov.w	r8, #4294967295
  400328:	e7f9      	b.n	40031e <_read+0x22>
	for (; len > 0; --len) {
  40032a:	4680      	mov	r8, r0
  40032c:	e7f7      	b.n	40031e <_read+0x22>
  40032e:	bf00      	nop
  400330:	20008bd0 	.word	0x20008bd0
  400334:	20008bc8 	.word	0x20008bc8

00400338 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400338:	3801      	subs	r0, #1
  40033a:	2802      	cmp	r0, #2
  40033c:	d815      	bhi.n	40036a <_write+0x32>
{
  40033e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400342:	460e      	mov	r6, r1
  400344:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400346:	b19a      	cbz	r2, 400370 <_write+0x38>
  400348:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40034a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400384 <_write+0x4c>
  40034e:	4f0c      	ldr	r7, [pc, #48]	; (400380 <_write+0x48>)
  400350:	f8d8 0000 	ldr.w	r0, [r8]
  400354:	f815 1b01 	ldrb.w	r1, [r5], #1
  400358:	683b      	ldr	r3, [r7, #0]
  40035a:	4798      	blx	r3
  40035c:	2800      	cmp	r0, #0
  40035e:	db0a      	blt.n	400376 <_write+0x3e>
  400360:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400362:	3c01      	subs	r4, #1
  400364:	d1f4      	bne.n	400350 <_write+0x18>
  400366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40036a:	f04f 30ff 	mov.w	r0, #4294967295
  40036e:	4770      	bx	lr
	for (; len != 0; --len) {
  400370:	4610      	mov	r0, r2
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400376:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40037e:	bf00      	nop
  400380:	20008bcc 	.word	0x20008bcc
  400384:	20008bd0 	.word	0x20008bd0

00400388 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400388:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40038a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40038e:	4b21      	ldr	r3, [pc, #132]	; (400414 <board_init+0x8c>)
  400390:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	2009      	movs	r0, #9
  400394:	4c20      	ldr	r4, [pc, #128]	; (400418 <board_init+0x90>)
  400396:	47a0      	blx	r4
  400398:	200a      	movs	r0, #10
  40039a:	47a0      	blx	r4
  40039c:	200b      	movs	r0, #11
  40039e:	47a0      	blx	r4
  4003a0:	200c      	movs	r0, #12
  4003a2:	47a0      	blx	r4
  4003a4:	200d      	movs	r0, #13
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b1c      	ldr	r3, [pc, #112]	; (40041c <board_init+0x94>)
  4003aa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4003ba:	2204      	movs	r2, #4
  4003bc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003c8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003ca:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d2:	f021 0104 	bic.w	r1, r1, #4
  4003d6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003d8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003da:	f021 0104 	bic.w	r1, r1, #4
  4003de:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4003f0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003f8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400400:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400404:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400406:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400408:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40040c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40040e:	605a      	str	r2, [r3, #4]
  400410:	bd10      	pop	{r4, pc}
  400412:	bf00      	nop
  400414:	400e1850 	.word	0x400e1850
  400418:	004008f1 	.word	0x004008f1
  40041c:	400e1400 	.word	0x400e1400

00400420 <acc_init>:
		Acc *p_acc,
		uint32_t ul_select_plus,
		uint32_t ul_select_minus,
		uint32_t ul_edge_type,
		uint32_t ul_invert)
{
  400420:	b410      	push	{r4}
	/* Validate the parameters. */
	Assert(p_acc);
	
	/* Reset the controller. */
	p_acc->ACC_CR |= ACC_CR_SWRST;
  400422:	6804      	ldr	r4, [r0, #0]
  400424:	f044 0401 	orr.w	r4, r4, #1
  400428:	6004      	str	r4, [r0, #0]

	/* Write to the MR register. */
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  40042a:	9c01      	ldr	r4, [sp, #4]
  40042c:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
  400430:	f444 7480 	orr.w	r4, r4, #256	; 0x100
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
  400434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400438:	431c      	orrs	r4, r3
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
  40043a:	f002 0207 	and.w	r2, r2, #7
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  40043e:	4314      	orrs	r4, r2
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400440:	f001 0170 	and.w	r1, r1, #112	; 0x70
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400444:	430c      	orrs	r4, r1
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400446:	6044      	str	r4, [r0, #4]

	/* Set hysteresis and current option. */
	p_acc->ACC_ACR = (ACC_ACR_ISEL_HISP |
  400448:	2303      	movs	r3, #3
  40044a:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
			ACC_ACR_HYST(ACC_ACR_HYST_50mv_max));

	/* Automatic Output Masking Period. */
	while (p_acc->ACC_ISR & (uint32_t) ACC_ISR_MASK);
  40044e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400450:	2b00      	cmp	r3, #0
  400452:	dbfc      	blt.n	40044e <acc_init+0x2e>
}
  400454:	f85d 4b04 	ldr.w	r4, [sp], #4
  400458:	4770      	bx	lr

0040045a <acc_get_comparison_result>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	uint32_t ul_temp = p_acc->ACC_MR;
  40045a:	6843      	ldr	r3, [r0, #4]
	uint32_t ul_status = p_acc->ACC_ISR;
  40045c:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if ((ul_temp & ACC_MR_INV_EN) == ACC_MR_INV_EN) {
  40045e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		if (ul_status & ACC_ISR_SCO) {
  400462:	bf18      	it	ne
  400464:	f080 0002 	eorne.w	r0, r0, #2
			return 0;	/* inn>inp */
		} else {
			return 1;	/* inp>inn */
		}
	} else {
		if (ul_status & ACC_ISR_SCO) {
  400468:	f3c0 0040 	ubfx	r0, r0, #1, #1
			return 1;	/* inp>inn */
		} else {
			return 0;	/* inn>inp */
		}
	}
}
  40046c:	4770      	bx	lr

0040046e <acc_enable_interrupt>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	p_acc->ACC_IER = ACC_IER_CE;
  40046e:	2301      	movs	r3, #1
  400470:	6243      	str	r3, [r0, #36]	; 0x24
  400472:	4770      	bx	lr

00400474 <acc_get_interrupt_status>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	return p_acc->ACC_ISR;
  400474:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400476:	4770      	bx	lr

00400478 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400478:	b570      	push	{r4, r5, r6, lr}
  40047a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40047c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40047e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400480:	4013      	ands	r3, r2
  400482:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400484:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400486:	4d21      	ldr	r5, [pc, #132]	; (40050c <afec_process_callback+0x94>)
  400488:	42a8      	cmp	r0, r5
  40048a:	bf14      	ite	ne
  40048c:	2500      	movne	r5, #0
  40048e:	2501      	moveq	r5, #1
  400490:	006e      	lsls	r6, r5, #1
  400492:	442e      	add	r6, r5
  400494:	e00b      	b.n	4004ae <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400496:	2c14      	cmp	r4, #20
  400498:	d824      	bhi.n	4004e4 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40049a:	9a01      	ldr	r2, [sp, #4]
  40049c:	f104 0108 	add.w	r1, r4, #8
  4004a0:	2301      	movs	r3, #1
  4004a2:	408b      	lsls	r3, r1
  4004a4:	4213      	tst	r3, r2
  4004a6:	d113      	bne.n	4004d0 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4004a8:	3401      	adds	r4, #1
  4004aa:	2c17      	cmp	r4, #23
  4004ac:	d02b      	beq.n	400506 <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4004ae:	2c0f      	cmp	r4, #15
  4004b0:	d8f1      	bhi.n	400496 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4004b2:	9a01      	ldr	r2, [sp, #4]
  4004b4:	2301      	movs	r3, #1
  4004b6:	40a3      	lsls	r3, r4
  4004b8:	4213      	tst	r3, r2
  4004ba:	d0f5      	beq.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004bc:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004c0:	4423      	add	r3, r4
  4004c2:	4a13      	ldr	r2, [pc, #76]	; (400510 <afec_process_callback+0x98>)
  4004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004c8:	2b00      	cmp	r3, #0
  4004ca:	d0ed      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004cc:	4798      	blx	r3
  4004ce:	e7eb      	b.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004d0:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004d4:	4423      	add	r3, r4
  4004d6:	4a0e      	ldr	r2, [pc, #56]	; (400510 <afec_process_callback+0x98>)
  4004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004dc:	2b00      	cmp	r3, #0
  4004de:	d0e3      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004e0:	4798      	blx	r3
  4004e2:	e7e1      	b.n	4004a8 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4004e4:	9a01      	ldr	r2, [sp, #4]
  4004e6:	f104 0109 	add.w	r1, r4, #9
  4004ea:	2301      	movs	r3, #1
  4004ec:	408b      	lsls	r3, r1
  4004ee:	4213      	tst	r3, r2
  4004f0:	d0da      	beq.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004f2:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004f6:	4423      	add	r3, r4
  4004f8:	4a05      	ldr	r2, [pc, #20]	; (400510 <afec_process_callback+0x98>)
  4004fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004fe:	2b00      	cmp	r3, #0
  400500:	d0d2      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400502:	4798      	blx	r3
  400504:	e7d0      	b.n	4004a8 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400506:	b002      	add	sp, #8
  400508:	bd70      	pop	{r4, r5, r6, pc}
  40050a:	bf00      	nop
  40050c:	400b4000 	.word	0x400b4000
  400510:	20008bd4 	.word	0x20008bd4

00400514 <afec_ch_set_config>:
{
  400514:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400516:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400518:	2301      	movs	r3, #1
  40051a:	408b      	lsls	r3, r1
  40051c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400520:	7815      	ldrb	r5, [r2, #0]
  400522:	2d00      	cmp	r5, #0
  400524:	bf08      	it	eq
  400526:	2300      	moveq	r3, #0
  400528:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40052a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40052c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40052e:	004b      	lsls	r3, r1, #1
  400530:	2103      	movs	r1, #3
  400532:	4099      	lsls	r1, r3
  400534:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400538:	7851      	ldrb	r1, [r2, #1]
  40053a:	4099      	lsls	r1, r3
  40053c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40053e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400540:	bc30      	pop	{r4, r5}
  400542:	4770      	bx	lr

00400544 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400544:	2200      	movs	r2, #0
  400546:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400548:	4b08      	ldr	r3, [pc, #32]	; (40056c <afec_get_config_defaults+0x28>)
  40054a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40054c:	4b08      	ldr	r3, [pc, #32]	; (400570 <afec_get_config_defaults+0x2c>)
  40054e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400550:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400554:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400556:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400558:	2302      	movs	r3, #2
  40055a:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  40055c:	2301      	movs	r3, #1
  40055e:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400560:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400562:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400564:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400566:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400568:	7683      	strb	r3, [r0, #26]
  40056a:	4770      	bx	lr
  40056c:	05b8d800 	.word	0x05b8d800
  400570:	005b8d80 	.word	0x005b8d80

00400574 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400574:	2300      	movs	r3, #0
  400576:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400578:	2301      	movs	r3, #1
  40057a:	7043      	strb	r3, [r0, #1]
  40057c:	4770      	bx	lr
	...

00400580 <afec_init>:
	return afec->AFEC_ISR;
  400580:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400582:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400586:	d001      	beq.n	40058c <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400588:	2019      	movs	r0, #25
  40058a:	4770      	bx	lr
{
  40058c:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40058e:	2301      	movs	r3, #1
  400590:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400592:	7dcb      	ldrb	r3, [r1, #23]
  400594:	2b00      	cmp	r3, #0
  400596:	bf14      	ite	ne
  400598:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  40059c:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  40059e:	7d8b      	ldrb	r3, [r1, #22]
  4005a0:	2b00      	cmp	r3, #0
  4005a2:	bf14      	ite	ne
  4005a4:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  4005a8:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  4005aa:	7d0b      	ldrb	r3, [r1, #20]
  4005ac:	061b      	lsls	r3, r3, #24
  4005ae:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005b2:	690a      	ldr	r2, [r1, #16]
  4005b4:	68ce      	ldr	r6, [r1, #12]
  4005b6:	4332      	orrs	r2, r6
  4005b8:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4005ba:	7d4a      	ldrb	r2, [r1, #21]
  4005bc:	0712      	lsls	r2, r2, #28
  4005be:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005c2:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  4005c4:	688a      	ldr	r2, [r1, #8]
  4005c6:	0056      	lsls	r6, r2, #1
  4005c8:	684a      	ldr	r2, [r1, #4]
  4005ca:	fbb2 f2f6 	udiv	r2, r2, r6
  4005ce:	3a01      	subs	r2, #1
  4005d0:	0212      	lsls	r2, r2, #8
  4005d2:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005d4:	4313      	orrs	r3, r2
  4005d6:	432b      	orrs	r3, r5
  4005d8:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  4005da:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005dc:	7e0b      	ldrb	r3, [r1, #24]
  4005de:	2b00      	cmp	r3, #0
  4005e0:	bf14      	ite	ne
  4005e2:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4005e6:	2300      	moveq	r3, #0
  4005e8:	680a      	ldr	r2, [r1, #0]
  4005ea:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4005ec:	7e4a      	ldrb	r2, [r1, #25]
  4005ee:	2a00      	cmp	r2, #0
  4005f0:	bf14      	ite	ne
  4005f2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4005f6:	2200      	moveq	r2, #0
			(config->resolution) |
  4005f8:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005fa:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  4005fc:	7e8b      	ldrb	r3, [r1, #26]
  4005fe:	021b      	lsls	r3, r3, #8
  400600:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400604:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400608:	4b0e      	ldr	r3, [pc, #56]	; (400644 <afec_init+0xc4>)
  40060a:	4298      	cmp	r0, r3
  40060c:	d005      	beq.n	40061a <afec_init+0x9a>
	if(afec == AFEC1) {
  40060e:	4b0e      	ldr	r3, [pc, #56]	; (400648 <afec_init+0xc8>)
  400610:	4298      	cmp	r0, r3
  400612:	d00c      	beq.n	40062e <afec_init+0xae>
	return STATUS_OK;
  400614:	2000      	movs	r0, #0
}
  400616:	bc70      	pop	{r4, r5, r6}
  400618:	4770      	bx	lr
  40061a:	4b0c      	ldr	r3, [pc, #48]	; (40064c <afec_init+0xcc>)
  40061c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400620:	2200      	movs	r2, #0
  400622:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400626:	428b      	cmp	r3, r1
  400628:	d1fb      	bne.n	400622 <afec_init+0xa2>
	return STATUS_OK;
  40062a:	2000      	movs	r0, #0
  40062c:	e7f3      	b.n	400616 <afec_init+0x96>
  40062e:	4b08      	ldr	r3, [pc, #32]	; (400650 <afec_init+0xd0>)
  400630:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400634:	2200      	movs	r2, #0
  400636:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40063a:	428b      	cmp	r3, r1
  40063c:	d1fb      	bne.n	400636 <afec_init+0xb6>
	return STATUS_OK;
  40063e:	2000      	movs	r0, #0
  400640:	e7e9      	b.n	400616 <afec_init+0x96>
  400642:	bf00      	nop
  400644:	400b0000 	.word	0x400b0000
  400648:	400b4000 	.word	0x400b4000
  40064c:	20008bd0 	.word	0x20008bd0
  400650:	20008c2c 	.word	0x20008c2c

00400654 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400654:	4b0c      	ldr	r3, [pc, #48]	; (400688 <afec_enable_interrupt+0x34>)
  400656:	4299      	cmp	r1, r3
  400658:	d007      	beq.n	40066a <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40065a:	290f      	cmp	r1, #15
  40065c:	d80b      	bhi.n	400676 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  40065e:	d006      	beq.n	40066e <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400660:	2301      	movs	r3, #1
  400662:	fa03 f101 	lsl.w	r1, r3, r1
  400666:	6241      	str	r1, [r0, #36]	; 0x24
  400668:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40066a:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  40066c:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  40066e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400672:	6243      	str	r3, [r0, #36]	; 0x24
  400674:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400676:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400678:	bf94      	ite	ls
  40067a:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  40067c:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  40067e:	2301      	movs	r3, #1
  400680:	fa03 f101 	lsl.w	r1, r3, r1
  400684:	6241      	str	r1, [r0, #36]	; 0x24
  400686:	4770      	bx	lr
  400688:	df00ffff 	.word	0xdf00ffff

0040068c <afec_set_callback>:
{
  40068c:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  40068e:	4c11      	ldr	r4, [pc, #68]	; (4006d4 <afec_set_callback+0x48>)
  400690:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400692:	bf0c      	ite	eq
  400694:	2417      	moveq	r4, #23
  400696:	2400      	movne	r4, #0
  400698:	440c      	add	r4, r1
  40069a:	4d0f      	ldr	r5, [pc, #60]	; (4006d8 <afec_set_callback+0x4c>)
  40069c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4006a0:	d10a      	bne.n	4006b8 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006a2:	4a0e      	ldr	r2, [pc, #56]	; (4006dc <afec_set_callback+0x50>)
  4006a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  4006a8:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006ac:	011b      	lsls	r3, r3, #4
  4006ae:	b2db      	uxtb	r3, r3
  4006b0:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006b4:	6014      	str	r4, [r2, #0]
  4006b6:	e009      	b.n	4006cc <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006b8:	4a08      	ldr	r2, [pc, #32]	; (4006dc <afec_set_callback+0x50>)
  4006ba:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4006be:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006c2:	011b      	lsls	r3, r3, #4
  4006c4:	b2db      	uxtb	r3, r3
  4006c6:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006ca:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  4006cc:	4b04      	ldr	r3, [pc, #16]	; (4006e0 <afec_set_callback+0x54>)
  4006ce:	4798      	blx	r3
  4006d0:	bd38      	pop	{r3, r4, r5, pc}
  4006d2:	bf00      	nop
  4006d4:	400b4000 	.word	0x400b4000
  4006d8:	20008bd4 	.word	0x20008bd4
  4006dc:	e000e100 	.word	0xe000e100
  4006e0:	00400655 	.word	0x00400655

004006e4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4006e4:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4006e6:	4802      	ldr	r0, [pc, #8]	; (4006f0 <AFEC0_Handler+0xc>)
  4006e8:	4b02      	ldr	r3, [pc, #8]	; (4006f4 <AFEC0_Handler+0x10>)
  4006ea:	4798      	blx	r3
  4006ec:	bd08      	pop	{r3, pc}
  4006ee:	bf00      	nop
  4006f0:	400b0000 	.word	0x400b0000
  4006f4:	00400479 	.word	0x00400479

004006f8 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4006f8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4006fa:	4802      	ldr	r0, [pc, #8]	; (400704 <AFEC1_Handler+0xc>)
  4006fc:	4b02      	ldr	r3, [pc, #8]	; (400708 <AFEC1_Handler+0x10>)
  4006fe:	4798      	blx	r3
  400700:	bd08      	pop	{r3, pc}
  400702:	bf00      	nop
  400704:	400b4000 	.word	0x400b4000
  400708:	00400479 	.word	0x00400479

0040070c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40070c:	b500      	push	{lr}
  40070e:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400710:	4b13      	ldr	r3, [pc, #76]	; (400760 <afec_enable+0x54>)
  400712:	4298      	cmp	r0, r3
  400714:	bf0c      	ite	eq
  400716:	201f      	moveq	r0, #31
  400718:	201e      	movne	r0, #30
  40071a:	4b12      	ldr	r3, [pc, #72]	; (400764 <afec_enable+0x58>)
  40071c:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40071e:	4b12      	ldr	r3, [pc, #72]	; (400768 <afec_enable+0x5c>)
  400720:	789b      	ldrb	r3, [r3, #2]
  400722:	2bff      	cmp	r3, #255	; 0xff
  400724:	d01a      	beq.n	40075c <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400726:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40072a:	fab3 f383 	clz	r3, r3
  40072e:	095b      	lsrs	r3, r3, #5
  400730:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400732:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400734:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400738:	2200      	movs	r2, #0
  40073a:	4b0c      	ldr	r3, [pc, #48]	; (40076c <afec_enable+0x60>)
  40073c:	701a      	strb	r2, [r3, #0]
	return flags;
  40073e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400740:	4a09      	ldr	r2, [pc, #36]	; (400768 <afec_enable+0x5c>)
  400742:	7893      	ldrb	r3, [r2, #2]
  400744:	3301      	adds	r3, #1
  400746:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400748:	b129      	cbz	r1, 400756 <afec_enable+0x4a>
		cpu_irq_enable();
  40074a:	2201      	movs	r2, #1
  40074c:	4b07      	ldr	r3, [pc, #28]	; (40076c <afec_enable+0x60>)
  40074e:	701a      	strb	r2, [r3, #0]
  400750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400754:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400756:	b003      	add	sp, #12
  400758:	f85d fb04 	ldr.w	pc, [sp], #4
  40075c:	e7fe      	b.n	40075c <afec_enable+0x50>
  40075e:	bf00      	nop
  400760:	400b4000 	.word	0x400b4000
  400764:	004008f1 	.word	0x004008f1
  400768:	20008bc0 	.word	0x20008bc0
  40076c:	20000000 	.word	0x20000000

00400770 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  400770:	2301      	movs	r3, #1
  400772:	6003      	str	r3, [r0, #0]
  400774:	4770      	bx	lr

00400776 <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  400776:	6843      	ldr	r3, [r0, #4]
  400778:	f023 0301 	bic.w	r3, r3, #1
  40077c:	6043      	str	r3, [r0, #4]
  40077e:	4770      	bx	lr

00400780 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  400780:	b949      	cbnz	r1, 400796 <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400782:	6843      	ldr	r3, [r0, #4]
  400784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400788:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  40078a:	6843      	ldr	r3, [r0, #4]
  40078c:	f023 0310 	bic.w	r3, r3, #16
  400790:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  400792:	2000      	movs	r0, #0
  400794:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400796:	6843      	ldr	r3, [r0, #4]
  400798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40079c:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  40079e:	6843      	ldr	r3, [r0, #4]
  4007a0:	f043 0310 	orr.w	r3, r3, #16
  4007a4:	6043      	str	r3, [r0, #4]
  4007a6:	e7f4      	b.n	400792 <dacc_set_transfer_mode+0x12>

004007a8 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  4007a8:	6201      	str	r1, [r0, #32]
  4007aa:	4770      	bx	lr

004007ac <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4007ac:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4007ae:	2901      	cmp	r1, #1
  4007b0:	d901      	bls.n	4007b6 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  4007b2:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4007b4:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  4007b6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4007ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4007be:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  4007c0:	2000      	movs	r0, #0
  4007c2:	4770      	bx	lr

004007c4 <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  4007c4:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  4007c6:	b941      	cbnz	r1, 4007da <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  4007c8:	4907      	ldr	r1, [pc, #28]	; (4007e8 <dacc_set_timing+0x24>)
  4007ca:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  4007cc:	0612      	lsls	r2, r2, #24
  4007ce:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  4007d2:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  4007d4:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  4007d6:	2000      	movs	r0, #0
  4007d8:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  4007da:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  4007de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  4007e2:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  4007e6:	e7f1      	b.n	4007cc <dacc_set_timing+0x8>
  4007e8:	c0df00ff 	.word	0xc0df00ff

004007ec <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  4007ec:	2901      	cmp	r1, #1
  4007ee:	d901      	bls.n	4007f4 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  4007f0:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  4007f2:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  4007f4:	2301      	movs	r3, #1
  4007f6:	fa03 f101 	lsl.w	r1, r3, r1
  4007fa:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  4007fc:	2000      	movs	r0, #0
  4007fe:	4770      	bx	lr

00400800 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400800:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400804:	2000      	movs	r0, #0
  400806:	4770      	bx	lr

00400808 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400808:	4a17      	ldr	r2, [pc, #92]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  40080a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40080c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400810:	4318      	orrs	r0, r3
  400812:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400814:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400816:	f013 0f08 	tst.w	r3, #8
  40081a:	d10a      	bne.n	400832 <pmc_switch_mck_to_pllack+0x2a>
  40081c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400820:	4911      	ldr	r1, [pc, #68]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  400822:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400824:	f012 0f08 	tst.w	r2, #8
  400828:	d103      	bne.n	400832 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40082a:	3b01      	subs	r3, #1
  40082c:	d1f9      	bne.n	400822 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40082e:	2001      	movs	r0, #1
  400830:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400832:	4a0d      	ldr	r2, [pc, #52]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  400834:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400836:	f023 0303 	bic.w	r3, r3, #3
  40083a:	f043 0302 	orr.w	r3, r3, #2
  40083e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400840:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400842:	f013 0f08 	tst.w	r3, #8
  400846:	d10a      	bne.n	40085e <pmc_switch_mck_to_pllack+0x56>
  400848:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40084c:	4906      	ldr	r1, [pc, #24]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  40084e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400850:	f012 0f08 	tst.w	r2, #8
  400854:	d105      	bne.n	400862 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400856:	3b01      	subs	r3, #1
  400858:	d1f9      	bne.n	40084e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40085a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40085c:	4770      	bx	lr
	return 0;
  40085e:	2000      	movs	r0, #0
  400860:	4770      	bx	lr
  400862:	2000      	movs	r0, #0
  400864:	4770      	bx	lr
  400866:	bf00      	nop
  400868:	400e0400 	.word	0x400e0400

0040086c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40086c:	b9c8      	cbnz	r0, 4008a2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40086e:	4a11      	ldr	r2, [pc, #68]	; (4008b4 <pmc_switch_mainck_to_xtal+0x48>)
  400870:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400872:	0209      	lsls	r1, r1, #8
  400874:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400876:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40087a:	f023 0303 	bic.w	r3, r3, #3
  40087e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400882:	f043 0301 	orr.w	r3, r3, #1
  400886:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400888:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40088a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40088c:	f013 0f01 	tst.w	r3, #1
  400890:	d0fb      	beq.n	40088a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400892:	4a08      	ldr	r2, [pc, #32]	; (4008b4 <pmc_switch_mainck_to_xtal+0x48>)
  400894:	6a13      	ldr	r3, [r2, #32]
  400896:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40089a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40089e:	6213      	str	r3, [r2, #32]
  4008a0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008a2:	4904      	ldr	r1, [pc, #16]	; (4008b4 <pmc_switch_mainck_to_xtal+0x48>)
  4008a4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4008a6:	4a04      	ldr	r2, [pc, #16]	; (4008b8 <pmc_switch_mainck_to_xtal+0x4c>)
  4008a8:	401a      	ands	r2, r3
  4008aa:	4b04      	ldr	r3, [pc, #16]	; (4008bc <pmc_switch_mainck_to_xtal+0x50>)
  4008ac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008ae:	620b      	str	r3, [r1, #32]
  4008b0:	4770      	bx	lr
  4008b2:	bf00      	nop
  4008b4:	400e0400 	.word	0x400e0400
  4008b8:	fec8fffc 	.word	0xfec8fffc
  4008bc:	01370002 	.word	0x01370002

004008c0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4008c0:	4b02      	ldr	r3, [pc, #8]	; (4008cc <pmc_osc_is_ready_mainck+0xc>)
  4008c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008c4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4008c8:	4770      	bx	lr
  4008ca:	bf00      	nop
  4008cc:	400e0400 	.word	0x400e0400

004008d0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4008d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008d4:	4b01      	ldr	r3, [pc, #4]	; (4008dc <pmc_disable_pllack+0xc>)
  4008d6:	629a      	str	r2, [r3, #40]	; 0x28
  4008d8:	4770      	bx	lr
  4008da:	bf00      	nop
  4008dc:	400e0400 	.word	0x400e0400

004008e0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4008e0:	4b02      	ldr	r3, [pc, #8]	; (4008ec <pmc_is_locked_pllack+0xc>)
  4008e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008e4:	f000 0002 	and.w	r0, r0, #2
  4008e8:	4770      	bx	lr
  4008ea:	bf00      	nop
  4008ec:	400e0400 	.word	0x400e0400

004008f0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4008f0:	282f      	cmp	r0, #47	; 0x2f
  4008f2:	d81e      	bhi.n	400932 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4008f4:	281f      	cmp	r0, #31
  4008f6:	d80c      	bhi.n	400912 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008f8:	4b11      	ldr	r3, [pc, #68]	; (400940 <pmc_enable_periph_clk+0x50>)
  4008fa:	699a      	ldr	r2, [r3, #24]
  4008fc:	2301      	movs	r3, #1
  4008fe:	4083      	lsls	r3, r0
  400900:	4393      	bics	r3, r2
  400902:	d018      	beq.n	400936 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400904:	2301      	movs	r3, #1
  400906:	fa03 f000 	lsl.w	r0, r3, r0
  40090a:	4b0d      	ldr	r3, [pc, #52]	; (400940 <pmc_enable_periph_clk+0x50>)
  40090c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40090e:	2000      	movs	r0, #0
  400910:	4770      	bx	lr
		ul_id -= 32;
  400912:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400914:	4b0a      	ldr	r3, [pc, #40]	; (400940 <pmc_enable_periph_clk+0x50>)
  400916:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40091a:	2301      	movs	r3, #1
  40091c:	4083      	lsls	r3, r0
  40091e:	4393      	bics	r3, r2
  400920:	d00b      	beq.n	40093a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400922:	2301      	movs	r3, #1
  400924:	fa03 f000 	lsl.w	r0, r3, r0
  400928:	4b05      	ldr	r3, [pc, #20]	; (400940 <pmc_enable_periph_clk+0x50>)
  40092a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40092e:	2000      	movs	r0, #0
  400930:	4770      	bx	lr
		return 1;
  400932:	2001      	movs	r0, #1
  400934:	4770      	bx	lr
	return 0;
  400936:	2000      	movs	r0, #0
  400938:	4770      	bx	lr
  40093a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40093c:	4770      	bx	lr
  40093e:	bf00      	nop
  400940:	400e0400 	.word	0x400e0400

00400944 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400944:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400946:	0189      	lsls	r1, r1, #6
  400948:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40094a:	2402      	movs	r4, #2
  40094c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40094e:	f04f 31ff 	mov.w	r1, #4294967295
  400952:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400954:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400956:	605a      	str	r2, [r3, #4]
}
  400958:	f85d 4b04 	ldr.w	r4, [sp], #4
  40095c:	4770      	bx	lr

0040095e <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40095e:	0189      	lsls	r1, r1, #6
  400960:	2305      	movs	r3, #5
  400962:	5043      	str	r3, [r0, r1]
  400964:	4770      	bx	lr

00400966 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400966:	0189      	lsls	r1, r1, #6
  400968:	2302      	movs	r3, #2
  40096a:	5043      	str	r3, [r0, r1]
  40096c:	4770      	bx	lr

0040096e <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40096e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400972:	61ca      	str	r2, [r1, #28]
  400974:	4770      	bx	lr

00400976 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400976:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  40097a:	624a      	str	r2, [r1, #36]	; 0x24
  40097c:	4770      	bx	lr

0040097e <tc_disable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40097e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IDR = ul_sources;
  400982:	628a      	str	r2, [r1, #40]	; 0x28
  400984:	4770      	bx	lr

00400986 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400986:	b4f0      	push	{r4, r5, r6, r7}
  400988:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40098a:	2402      	movs	r4, #2
  40098c:	9401      	str	r4, [sp, #4]
  40098e:	2408      	movs	r4, #8
  400990:	9402      	str	r4, [sp, #8]
  400992:	2420      	movs	r4, #32
  400994:	9403      	str	r4, [sp, #12]
  400996:	2480      	movs	r4, #128	; 0x80
  400998:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40099a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40099c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40099e:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4009a0:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4009a4:	d814      	bhi.n	4009d0 <tc_find_mck_divisor+0x4a>
  4009a6:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4009a8:	42a0      	cmp	r0, r4
  4009aa:	d217      	bcs.n	4009dc <tc_find_mck_divisor+0x56>
  4009ac:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4009ae:	af01      	add	r7, sp, #4
  4009b0:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4009b4:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4009b8:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4009ba:	4284      	cmp	r4, r0
  4009bc:	d30a      	bcc.n	4009d4 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4009be:	4286      	cmp	r6, r0
  4009c0:	d90d      	bls.n	4009de <tc_find_mck_divisor+0x58>
			ul_index++) {
  4009c2:	3501      	adds	r5, #1
	for (ul_index = 0;
  4009c4:	2d05      	cmp	r5, #5
  4009c6:	d1f3      	bne.n	4009b0 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4009c8:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4009ca:	b006      	add	sp, #24
  4009cc:	bcf0      	pop	{r4, r5, r6, r7}
  4009ce:	4770      	bx	lr
			return 0;
  4009d0:	2000      	movs	r0, #0
  4009d2:	e7fa      	b.n	4009ca <tc_find_mck_divisor+0x44>
  4009d4:	2000      	movs	r0, #0
  4009d6:	e7f8      	b.n	4009ca <tc_find_mck_divisor+0x44>
	return 1;
  4009d8:	2001      	movs	r0, #1
  4009da:	e7f6      	b.n	4009ca <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4009dc:	2500      	movs	r5, #0
	if (p_uldiv) {
  4009de:	b12a      	cbz	r2, 4009ec <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4009e0:	a906      	add	r1, sp, #24
  4009e2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4009e6:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4009ea:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4009ec:	2b00      	cmp	r3, #0
  4009ee:	d0f3      	beq.n	4009d8 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4009f0:	601d      	str	r5, [r3, #0]
	return 1;
  4009f2:	2001      	movs	r0, #1
  4009f4:	e7e9      	b.n	4009ca <tc_find_mck_divisor+0x44>

004009f6 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4009f6:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4009f8:	23ac      	movs	r3, #172	; 0xac
  4009fa:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4009fc:	680b      	ldr	r3, [r1, #0]
  4009fe:	684a      	ldr	r2, [r1, #4]
  400a00:	fbb3 f3f2 	udiv	r3, r3, r2
  400a04:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400a06:	1e5c      	subs	r4, r3, #1
  400a08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400a0c:	4294      	cmp	r4, r2
  400a0e:	d80c      	bhi.n	400a2a <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400a10:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400a12:	688b      	ldr	r3, [r1, #8]
  400a14:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400a16:	f240 2302 	movw	r3, #514	; 0x202
  400a1a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400a1e:	2350      	movs	r3, #80	; 0x50
  400a20:	6003      	str	r3, [r0, #0]

	return 0;
  400a22:	2000      	movs	r0, #0
}
  400a24:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a28:	4770      	bx	lr
		return 1;
  400a2a:	2001      	movs	r0, #1
  400a2c:	e7fa      	b.n	400a24 <uart_init+0x2e>

00400a2e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400a2e:	6943      	ldr	r3, [r0, #20]
  400a30:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400a34:	bf1a      	itte	ne
  400a36:	61c1      	strne	r1, [r0, #28]
	return 0;
  400a38:	2000      	movne	r0, #0
		return 1;
  400a3a:	2001      	moveq	r0, #1
}
  400a3c:	4770      	bx	lr

00400a3e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400a3e:	6943      	ldr	r3, [r0, #20]
  400a40:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400a44:	bf1d      	ittte	ne
  400a46:	6983      	ldrne	r3, [r0, #24]
  400a48:	700b      	strbne	r3, [r1, #0]
	return 0;
  400a4a:	2000      	movne	r0, #0
		return 1;
  400a4c:	2001      	moveq	r0, #1
}
  400a4e:	4770      	bx	lr

00400a50 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a50:	6943      	ldr	r3, [r0, #20]
  400a52:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400a56:	bf1d      	ittte	ne
  400a58:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400a5c:	61c1      	strne	r1, [r0, #28]
	return 0;
  400a5e:	2000      	movne	r0, #0
		return 1;
  400a60:	2001      	moveq	r0, #1
}
  400a62:	4770      	bx	lr

00400a64 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a64:	6943      	ldr	r3, [r0, #20]
  400a66:	f013 0f01 	tst.w	r3, #1
  400a6a:	d005      	beq.n	400a78 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a6c:	6983      	ldr	r3, [r0, #24]
  400a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a72:	600b      	str	r3, [r1, #0]

	return 0;
  400a74:	2000      	movs	r0, #0
  400a76:	4770      	bx	lr
		return 1;
  400a78:	2001      	movs	r0, #1
}
  400a7a:	4770      	bx	lr

00400a7c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400a7c:	e7fe      	b.n	400a7c <Dummy_Handler>
	...

00400a80 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400a80:	b500      	push	{lr}
  400a82:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400a84:	4b25      	ldr	r3, [pc, #148]	; (400b1c <Reset_Handler+0x9c>)
  400a86:	4a26      	ldr	r2, [pc, #152]	; (400b20 <Reset_Handler+0xa0>)
  400a88:	429a      	cmp	r2, r3
  400a8a:	d010      	beq.n	400aae <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400a8c:	4b25      	ldr	r3, [pc, #148]	; (400b24 <Reset_Handler+0xa4>)
  400a8e:	4a23      	ldr	r2, [pc, #140]	; (400b1c <Reset_Handler+0x9c>)
  400a90:	429a      	cmp	r2, r3
  400a92:	d20c      	bcs.n	400aae <Reset_Handler+0x2e>
  400a94:	3b01      	subs	r3, #1
  400a96:	1a9b      	subs	r3, r3, r2
  400a98:	f023 0303 	bic.w	r3, r3, #3
  400a9c:	3304      	adds	r3, #4
  400a9e:	4413      	add	r3, r2
  400aa0:	491f      	ldr	r1, [pc, #124]	; (400b20 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400aa2:	f851 0b04 	ldr.w	r0, [r1], #4
  400aa6:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400aaa:	429a      	cmp	r2, r3
  400aac:	d1f9      	bne.n	400aa2 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400aae:	4b1e      	ldr	r3, [pc, #120]	; (400b28 <Reset_Handler+0xa8>)
  400ab0:	4a1e      	ldr	r2, [pc, #120]	; (400b2c <Reset_Handler+0xac>)
  400ab2:	429a      	cmp	r2, r3
  400ab4:	d20a      	bcs.n	400acc <Reset_Handler+0x4c>
  400ab6:	3b01      	subs	r3, #1
  400ab8:	1a9b      	subs	r3, r3, r2
  400aba:	f023 0303 	bic.w	r3, r3, #3
  400abe:	3304      	adds	r3, #4
  400ac0:	4413      	add	r3, r2
		*pDest++ = 0;
  400ac2:	2100      	movs	r1, #0
  400ac4:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400ac8:	4293      	cmp	r3, r2
  400aca:	d1fb      	bne.n	400ac4 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400acc:	4a18      	ldr	r2, [pc, #96]	; (400b30 <Reset_Handler+0xb0>)
  400ace:	4b19      	ldr	r3, [pc, #100]	; (400b34 <Reset_Handler+0xb4>)
  400ad0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400ad4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400ad6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400ada:	fab3 f383 	clz	r3, r3
  400ade:	095b      	lsrs	r3, r3, #5
  400ae0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400ae2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400ae4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400ae8:	2200      	movs	r2, #0
  400aea:	4b13      	ldr	r3, [pc, #76]	; (400b38 <Reset_Handler+0xb8>)
  400aec:	701a      	strb	r2, [r3, #0]
	return flags;
  400aee:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400af0:	4a12      	ldr	r2, [pc, #72]	; (400b3c <Reset_Handler+0xbc>)
  400af2:	6813      	ldr	r3, [r2, #0]
  400af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400af8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400afa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400afe:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400b02:	b129      	cbz	r1, 400b10 <Reset_Handler+0x90>
		cpu_irq_enable();
  400b04:	2201      	movs	r2, #1
  400b06:	4b0c      	ldr	r3, [pc, #48]	; (400b38 <Reset_Handler+0xb8>)
  400b08:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400b0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400b0e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400b10:	4b0b      	ldr	r3, [pc, #44]	; (400b40 <Reset_Handler+0xc0>)
  400b12:	4798      	blx	r3

	/* Branch to main function */
	main();
  400b14:	4b0b      	ldr	r3, [pc, #44]	; (400b44 <Reset_Handler+0xc4>)
  400b16:	4798      	blx	r3
  400b18:	e7fe      	b.n	400b18 <Reset_Handler+0x98>
  400b1a:	bf00      	nop
  400b1c:	20000000 	.word	0x20000000
  400b20:	00404af8 	.word	0x00404af8
  400b24:	20000854 	.word	0x20000854
  400b28:	20008cb8 	.word	0x20008cb8
  400b2c:	20000858 	.word	0x20000858
  400b30:	e000ed00 	.word	0xe000ed00
  400b34:	00400000 	.word	0x00400000
  400b38:	20000000 	.word	0x20000000
  400b3c:	e000ed88 	.word	0xe000ed88
  400b40:	004039b5 	.word	0x004039b5
  400b44:	00401809 	.word	0x00401809

00400b48 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400b48:	4b3b      	ldr	r3, [pc, #236]	; (400c38 <SystemCoreClockUpdate+0xf0>)
  400b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b4c:	f003 0303 	and.w	r3, r3, #3
  400b50:	2b01      	cmp	r3, #1
  400b52:	d01d      	beq.n	400b90 <SystemCoreClockUpdate+0x48>
  400b54:	b183      	cbz	r3, 400b78 <SystemCoreClockUpdate+0x30>
  400b56:	2b02      	cmp	r3, #2
  400b58:	d036      	beq.n	400bc8 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400b5a:	4b37      	ldr	r3, [pc, #220]	; (400c38 <SystemCoreClockUpdate+0xf0>)
  400b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b62:	2b70      	cmp	r3, #112	; 0x70
  400b64:	d05f      	beq.n	400c26 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400b66:	4b34      	ldr	r3, [pc, #208]	; (400c38 <SystemCoreClockUpdate+0xf0>)
  400b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400b6a:	4934      	ldr	r1, [pc, #208]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400b6c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400b70:	680b      	ldr	r3, [r1, #0]
  400b72:	40d3      	lsrs	r3, r2
  400b74:	600b      	str	r3, [r1, #0]
  400b76:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400b78:	4b31      	ldr	r3, [pc, #196]	; (400c40 <SystemCoreClockUpdate+0xf8>)
  400b7a:	695b      	ldr	r3, [r3, #20]
  400b7c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b80:	bf14      	ite	ne
  400b82:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b86:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400b8a:	4b2c      	ldr	r3, [pc, #176]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400b8c:	601a      	str	r2, [r3, #0]
  400b8e:	e7e4      	b.n	400b5a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400b90:	4b29      	ldr	r3, [pc, #164]	; (400c38 <SystemCoreClockUpdate+0xf0>)
  400b92:	6a1b      	ldr	r3, [r3, #32]
  400b94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b98:	d003      	beq.n	400ba2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400b9a:	4a2a      	ldr	r2, [pc, #168]	; (400c44 <SystemCoreClockUpdate+0xfc>)
  400b9c:	4b27      	ldr	r3, [pc, #156]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400b9e:	601a      	str	r2, [r3, #0]
  400ba0:	e7db      	b.n	400b5a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ba2:	4a29      	ldr	r2, [pc, #164]	; (400c48 <SystemCoreClockUpdate+0x100>)
  400ba4:	4b25      	ldr	r3, [pc, #148]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400ba6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ba8:	4b23      	ldr	r3, [pc, #140]	; (400c38 <SystemCoreClockUpdate+0xf0>)
  400baa:	6a1b      	ldr	r3, [r3, #32]
  400bac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bb0:	2b10      	cmp	r3, #16
  400bb2:	d005      	beq.n	400bc0 <SystemCoreClockUpdate+0x78>
  400bb4:	2b20      	cmp	r3, #32
  400bb6:	d1d0      	bne.n	400b5a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400bb8:	4a22      	ldr	r2, [pc, #136]	; (400c44 <SystemCoreClockUpdate+0xfc>)
  400bba:	4b20      	ldr	r3, [pc, #128]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400bbc:	601a      	str	r2, [r3, #0]
				break;
  400bbe:	e7cc      	b.n	400b5a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400bc0:	4a22      	ldr	r2, [pc, #136]	; (400c4c <SystemCoreClockUpdate+0x104>)
  400bc2:	4b1e      	ldr	r3, [pc, #120]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400bc4:	601a      	str	r2, [r3, #0]
				break;
  400bc6:	e7c8      	b.n	400b5a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400bc8:	4b1b      	ldr	r3, [pc, #108]	; (400c38 <SystemCoreClockUpdate+0xf0>)
  400bca:	6a1b      	ldr	r3, [r3, #32]
  400bcc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bd0:	d016      	beq.n	400c00 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400bd2:	4a1c      	ldr	r2, [pc, #112]	; (400c44 <SystemCoreClockUpdate+0xfc>)
  400bd4:	4b19      	ldr	r3, [pc, #100]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400bd6:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400bd8:	4b17      	ldr	r3, [pc, #92]	; (400c38 <SystemCoreClockUpdate+0xf0>)
  400bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bdc:	f003 0303 	and.w	r3, r3, #3
  400be0:	2b02      	cmp	r3, #2
  400be2:	d1ba      	bne.n	400b5a <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400be4:	4a14      	ldr	r2, [pc, #80]	; (400c38 <SystemCoreClockUpdate+0xf0>)
  400be6:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400be8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400bea:	4814      	ldr	r0, [pc, #80]	; (400c3c <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bec:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400bf0:	6803      	ldr	r3, [r0, #0]
  400bf2:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bf6:	b2d2      	uxtb	r2, r2
  400bf8:	fbb3 f3f2 	udiv	r3, r3, r2
  400bfc:	6003      	str	r3, [r0, #0]
  400bfe:	e7ac      	b.n	400b5a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c00:	4a11      	ldr	r2, [pc, #68]	; (400c48 <SystemCoreClockUpdate+0x100>)
  400c02:	4b0e      	ldr	r3, [pc, #56]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400c04:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400c06:	4b0c      	ldr	r3, [pc, #48]	; (400c38 <SystemCoreClockUpdate+0xf0>)
  400c08:	6a1b      	ldr	r3, [r3, #32]
  400c0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c0e:	2b10      	cmp	r3, #16
  400c10:	d005      	beq.n	400c1e <SystemCoreClockUpdate+0xd6>
  400c12:	2b20      	cmp	r3, #32
  400c14:	d1e0      	bne.n	400bd8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400c16:	4a0b      	ldr	r2, [pc, #44]	; (400c44 <SystemCoreClockUpdate+0xfc>)
  400c18:	4b08      	ldr	r3, [pc, #32]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400c1a:	601a      	str	r2, [r3, #0]
				break;
  400c1c:	e7dc      	b.n	400bd8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400c1e:	4a0b      	ldr	r2, [pc, #44]	; (400c4c <SystemCoreClockUpdate+0x104>)
  400c20:	4b06      	ldr	r3, [pc, #24]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400c22:	601a      	str	r2, [r3, #0]
				break;
  400c24:	e7d8      	b.n	400bd8 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400c26:	4a05      	ldr	r2, [pc, #20]	; (400c3c <SystemCoreClockUpdate+0xf4>)
  400c28:	6813      	ldr	r3, [r2, #0]
  400c2a:	4909      	ldr	r1, [pc, #36]	; (400c50 <SystemCoreClockUpdate+0x108>)
  400c2c:	fba1 1303 	umull	r1, r3, r1, r3
  400c30:	085b      	lsrs	r3, r3, #1
  400c32:	6013      	str	r3, [r2, #0]
  400c34:	4770      	bx	lr
  400c36:	bf00      	nop
  400c38:	400e0400 	.word	0x400e0400
  400c3c:	20000004 	.word	0x20000004
  400c40:	400e1810 	.word	0x400e1810
  400c44:	00b71b00 	.word	0x00b71b00
  400c48:	003d0900 	.word	0x003d0900
  400c4c:	007a1200 	.word	0x007a1200
  400c50:	aaaaaaab 	.word	0xaaaaaaab

00400c54 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400c54:	4b12      	ldr	r3, [pc, #72]	; (400ca0 <system_init_flash+0x4c>)
  400c56:	4298      	cmp	r0, r3
  400c58:	d911      	bls.n	400c7e <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400c5a:	4b12      	ldr	r3, [pc, #72]	; (400ca4 <system_init_flash+0x50>)
  400c5c:	4298      	cmp	r0, r3
  400c5e:	d913      	bls.n	400c88 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400c60:	4b11      	ldr	r3, [pc, #68]	; (400ca8 <system_init_flash+0x54>)
  400c62:	4298      	cmp	r0, r3
  400c64:	d914      	bls.n	400c90 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400c66:	4b11      	ldr	r3, [pc, #68]	; (400cac <system_init_flash+0x58>)
  400c68:	4298      	cmp	r0, r3
  400c6a:	d915      	bls.n	400c98 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400c6c:	4b10      	ldr	r3, [pc, #64]	; (400cb0 <system_init_flash+0x5c>)
  400c6e:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400c70:	bf94      	ite	ls
  400c72:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c76:	4a0f      	ldrhi	r2, [pc, #60]	; (400cb4 <system_init_flash+0x60>)
  400c78:	4b0f      	ldr	r3, [pc, #60]	; (400cb8 <system_init_flash+0x64>)
  400c7a:	601a      	str	r2, [r3, #0]
  400c7c:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c82:	4b0d      	ldr	r3, [pc, #52]	; (400cb8 <system_init_flash+0x64>)
  400c84:	601a      	str	r2, [r3, #0]
  400c86:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c88:	4a0c      	ldr	r2, [pc, #48]	; (400cbc <system_init_flash+0x68>)
  400c8a:	4b0b      	ldr	r3, [pc, #44]	; (400cb8 <system_init_flash+0x64>)
  400c8c:	601a      	str	r2, [r3, #0]
  400c8e:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c90:	4a0b      	ldr	r2, [pc, #44]	; (400cc0 <system_init_flash+0x6c>)
  400c92:	4b09      	ldr	r3, [pc, #36]	; (400cb8 <system_init_flash+0x64>)
  400c94:	601a      	str	r2, [r3, #0]
  400c96:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400c98:	4a0a      	ldr	r2, [pc, #40]	; (400cc4 <system_init_flash+0x70>)
  400c9a:	4b07      	ldr	r3, [pc, #28]	; (400cb8 <system_init_flash+0x64>)
  400c9c:	601a      	str	r2, [r3, #0]
  400c9e:	4770      	bx	lr
  400ca0:	01312cff 	.word	0x01312cff
  400ca4:	026259ff 	.word	0x026259ff
  400ca8:	039386ff 	.word	0x039386ff
  400cac:	04c4b3ff 	.word	0x04c4b3ff
  400cb0:	05f5e0ff 	.word	0x05f5e0ff
  400cb4:	04000500 	.word	0x04000500
  400cb8:	400e0a00 	.word	0x400e0a00
  400cbc:	04000100 	.word	0x04000100
  400cc0:	04000200 	.word	0x04000200
  400cc4:	04000300 	.word	0x04000300

00400cc8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400cc8:	4b0a      	ldr	r3, [pc, #40]	; (400cf4 <_sbrk+0x2c>)
  400cca:	681b      	ldr	r3, [r3, #0]
  400ccc:	b153      	cbz	r3, 400ce4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400cce:	4b09      	ldr	r3, [pc, #36]	; (400cf4 <_sbrk+0x2c>)
  400cd0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400cd2:	181a      	adds	r2, r3, r0
  400cd4:	4908      	ldr	r1, [pc, #32]	; (400cf8 <_sbrk+0x30>)
  400cd6:	4291      	cmp	r1, r2
  400cd8:	db08      	blt.n	400cec <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400cda:	4610      	mov	r0, r2
  400cdc:	4a05      	ldr	r2, [pc, #20]	; (400cf4 <_sbrk+0x2c>)
  400cde:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400ce0:	4618      	mov	r0, r3
  400ce2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400ce4:	4a05      	ldr	r2, [pc, #20]	; (400cfc <_sbrk+0x34>)
  400ce6:	4b03      	ldr	r3, [pc, #12]	; (400cf4 <_sbrk+0x2c>)
  400ce8:	601a      	str	r2, [r3, #0]
  400cea:	e7f0      	b.n	400cce <_sbrk+0x6>
		return (caddr_t) -1;	
  400cec:	f04f 30ff 	mov.w	r0, #4294967295
}
  400cf0:	4770      	bx	lr
  400cf2:	bf00      	nop
  400cf4:	20000874 	.word	0x20000874
  400cf8:	2001fffc 	.word	0x2001fffc
  400cfc:	2000bcb8 	.word	0x2000bcb8

00400d00 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400d00:	f04f 30ff 	mov.w	r0, #4294967295
  400d04:	4770      	bx	lr

00400d06 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d0a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d0c:	2000      	movs	r0, #0
  400d0e:	4770      	bx	lr

00400d10 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400d10:	2000      	movs	r0, #0
  400d12:	4770      	bx	lr

00400d14 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  400d14:	b500      	push	{lr}
  400d16:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  400d18:	2201      	movs	r2, #1
  400d1a:	f10d 0107 	add.w	r1, sp, #7
  400d1e:	4810      	ldr	r0, [pc, #64]	; (400d60 <USART0_Handler+0x4c>)
  400d20:	4b10      	ldr	r3, [pc, #64]	; (400d64 <USART0_Handler+0x50>)
  400d22:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400d24:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d26:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  400d2a:	2200      	movs	r2, #0
  400d2c:	4b0e      	ldr	r3, [pc, #56]	; (400d68 <USART0_Handler+0x54>)
  400d2e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  400d30:	4b0e      	ldr	r3, [pc, #56]	; (400d6c <USART0_Handler+0x58>)
  400d32:	781b      	ldrb	r3, [r3, #0]
  400d34:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400d38:	4a0d      	ldr	r2, [pc, #52]	; (400d70 <USART0_Handler+0x5c>)
  400d3a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  400d3c:	2b9b      	cmp	r3, #155	; 0x9b
  400d3e:	d00b      	beq.n	400d58 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  400d40:	3301      	adds	r3, #1
  400d42:	4a0a      	ldr	r2, [pc, #40]	; (400d6c <USART0_Handler+0x58>)
  400d44:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  400d46:	2201      	movs	r2, #1
  400d48:	4b07      	ldr	r3, [pc, #28]	; (400d68 <USART0_Handler+0x54>)
  400d4a:	701a      	strb	r2, [r3, #0]
  400d4c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d50:	b662      	cpsie	i
}
  400d52:	b003      	add	sp, #12
  400d54:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  400d58:	2200      	movs	r2, #0
  400d5a:	4b04      	ldr	r3, [pc, #16]	; (400d6c <USART0_Handler+0x58>)
  400d5c:	701a      	strb	r2, [r3, #0]
  400d5e:	e7f2      	b.n	400d46 <USART0_Handler+0x32>
  400d60:	400a0000 	.word	0x400a0000
  400d64:	0040025d 	.word	0x0040025d
  400d68:	20000000 	.word	0x20000000
  400d6c:	20000914 	.word	0x20000914
  400d70:	20000878 	.word	0x20000878

00400d74 <addSample>:
		}
	}	
}

void addSample(uint16_t sample){
	if (bufferIndex<buffersize)
  400d74:	4b09      	ldr	r3, [pc, #36]	; (400d9c <addSample+0x28>)
  400d76:	881b      	ldrh	r3, [r3, #0]
  400d78:	f242 028d 	movw	r2, #8333	; 0x208d
  400d7c:	4293      	cmp	r3, r2
  400d7e:	d808      	bhi.n	400d92 <addSample+0x1e>
	{
		if (currentbuffer)
  400d80:	4a07      	ldr	r2, [pc, #28]	; (400da0 <addSample+0x2c>)
  400d82:	7812      	ldrb	r2, [r2, #0]
  400d84:	b132      	cbz	r2, 400d94 <addSample+0x20>
		{
			//puts("filling buffer 1\n");
			buffer1[bufferIndex]= sample;
  400d86:	4a07      	ldr	r2, [pc, #28]	; (400da4 <addSample+0x30>)
  400d88:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
		}else{
			//puts("filling buffer 0\n");
			buffer0[bufferIndex]= sample;
		}
		bufferIndex++;
  400d8c:	3301      	adds	r3, #1
  400d8e:	4a03      	ldr	r2, [pc, #12]	; (400d9c <addSample+0x28>)
  400d90:	8013      	strh	r3, [r2, #0]
  400d92:	4770      	bx	lr
			buffer0[bufferIndex]= sample;
  400d94:	4a04      	ldr	r2, [pc, #16]	; (400da8 <addSample+0x34>)
  400d96:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  400d9a:	e7f7      	b.n	400d8c <addSample+0x18>
  400d9c:	20008b50 	.word	0x20008b50
  400da0:	20008b54 	.word	0x20008b54
  400da4:	20004a34 	.word	0x20004a34
  400da8:	20000918 	.word	0x20000918

00400dac <switchBuffer>:
	}
}

volatile void switchBuffer(void){
	buffersFilled++;
  400dac:	4a06      	ldr	r2, [pc, #24]	; (400dc8 <switchBuffer+0x1c>)
  400dae:	8813      	ldrh	r3, [r2, #0]
  400db0:	3301      	adds	r3, #1
  400db2:	8013      	strh	r3, [r2, #0]
	bufferIndex=0;
  400db4:	2200      	movs	r2, #0
  400db6:	4b05      	ldr	r3, [pc, #20]	; (400dcc <switchBuffer+0x20>)
  400db8:	801a      	strh	r2, [r3, #0]
	//puts("buffer index reset\n");
	currentbuffer= !currentbuffer;
  400dba:	4a05      	ldr	r2, [pc, #20]	; (400dd0 <switchBuffer+0x24>)
  400dbc:	7813      	ldrb	r3, [r2, #0]
  400dbe:	f083 0301 	eor.w	r3, r3, #1
  400dc2:	7013      	strb	r3, [r2, #0]
  400dc4:	4770      	bx	lr
  400dc6:	bf00      	nop
  400dc8:	20008b52 	.word	0x20008b52
  400dcc:	20008b50 	.word	0x20008b50
  400dd0:	20008b54 	.word	0x20008b54

00400dd4 <cycleEnded>:
}

void cycleEnded(void){
  400dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("%u\n\r", bufferIndex);
	if (bufferIndex<buffersize)
  400dd6:	4b0a      	ldr	r3, [pc, #40]	; (400e00 <cycleEnded+0x2c>)
  400dd8:	881b      	ldrh	r3, [r3, #0]
  400dda:	f242 028d 	movw	r2, #8333	; 0x208d
  400dde:	4293      	cmp	r3, r2
  400de0:	d80a      	bhi.n	400df8 <cycleEnded+0x24>
	{
		for (int i=bufferIndex;i<buffersize;i++)
  400de2:	461c      	mov	r4, r3
  400de4:	dc08      	bgt.n	400df8 <cycleEnded+0x24>
		{
			addSample(0);
  400de6:	2700      	movs	r7, #0
  400de8:	4e06      	ldr	r6, [pc, #24]	; (400e04 <cycleEnded+0x30>)
		for (int i=bufferIndex;i<buffersize;i++)
  400dea:	f242 058e 	movw	r5, #8334	; 0x208e
			addSample(0);
  400dee:	4638      	mov	r0, r7
  400df0:	47b0      	blx	r6
		for (int i=bufferIndex;i<buffersize;i++)
  400df2:	3401      	adds	r4, #1
  400df4:	42ac      	cmp	r4, r5
  400df6:	d1fa      	bne.n	400dee <cycleEnded+0x1a>
		}
	} 
	
	switchBuffer();
  400df8:	4b03      	ldr	r3, [pc, #12]	; (400e08 <cycleEnded+0x34>)
  400dfa:	4798      	blx	r3
  400dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400dfe:	bf00      	nop
  400e00:	20008b50 	.word	0x20008b50
  400e04:	00400d75 	.word	0x00400d75
  400e08:	00400dad 	.word	0x00400dad

00400e0c <getbuffersFilled>:
	
}

uint16_t getbuffersFilled(){
	return buffersFilled;
}
  400e0c:	4b01      	ldr	r3, [pc, #4]	; (400e14 <getbuffersFilled+0x8>)
  400e0e:	8818      	ldrh	r0, [r3, #0]
  400e10:	4770      	bx	lr
  400e12:	bf00      	nop
  400e14:	20008b52 	.word	0x20008b52

00400e18 <getFilledBuffer>:
		printf("%u\n\r", buffer1[i]);
	}
}

uint16_t* getFilledBuffer(void){
	if (currentbuffer)
  400e18:	4b04      	ldr	r3, [pc, #16]	; (400e2c <getFilledBuffer+0x14>)
  400e1a:	7818      	ldrb	r0, [r3, #0]
	} 
	else
	{
		return buffer1;
	}
  400e1c:	4b04      	ldr	r3, [pc, #16]	; (400e30 <getFilledBuffer+0x18>)
  400e1e:	4a05      	ldr	r2, [pc, #20]	; (400e34 <getFilledBuffer+0x1c>)
  400e20:	2800      	cmp	r0, #0
  400e22:	bf14      	ite	ne
  400e24:	4610      	movne	r0, r2
  400e26:	4618      	moveq	r0, r3
  400e28:	4770      	bx	lr
  400e2a:	bf00      	nop
  400e2c:	20008b54 	.word	0x20008b54
  400e30:	20004a34 	.word	0x20004a34
  400e34:	20000918 	.word	0x20000918

00400e38 <setDelayTimer>:
	

    afec_set_trigger(AFEC0, AFEC_TRIG_TIO_CH_0);										// Set TC0 as the trigger for AFEC module
	
}
static void setDelayTimer(int delayFreq){
  400e38:	b570      	push	{r4, r5, r6, lr}
  400e3a:	b084      	sub	sp, #16
  400e3c:	4606      	mov	r6, r0
	uint32_t ul_sysclk = sysclk_get_cpu_hz();											// returns (possibly prescaled) clock frequency
	uint32_t ul_div=0;
  400e3e:	2200      	movs	r2, #0
  400e40:	9203      	str	r2, [sp, #12]
	uint32_t ul_tc_clks=0;
  400e42:	ab04      	add	r3, sp, #16
  400e44:	f843 2d08 	str.w	r2, [r3, #-8]!
	uint32_t counts=0;
	tc_find_mck_divisor(delayFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  400e48:	4c14      	ldr	r4, [pc, #80]	; (400e9c <setDelayTimer+0x64>)
  400e4a:	9400      	str	r4, [sp, #0]
  400e4c:	aa03      	add	r2, sp, #12
  400e4e:	4621      	mov	r1, r4
  400e50:	4d13      	ldr	r5, [pc, #76]	; (400ea0 <setDelayTimer+0x68>)
  400e52:	47a8      	blx	r5
	tc_init(TC0,1,ul_tc_clks | TC_CMR_CPCTRG);
  400e54:	4d13      	ldr	r5, [pc, #76]	; (400ea4 <setDelayTimer+0x6c>)
  400e56:	9a02      	ldr	r2, [sp, #8]
  400e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  400e5c:	2101      	movs	r1, #1
  400e5e:	4628      	mov	r0, r5
  400e60:	4b11      	ldr	r3, [pc, #68]	; (400ea8 <setDelayTimer+0x70>)
  400e62:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/delayFreq;
  400e64:	9a03      	ldr	r2, [sp, #12]
  400e66:	fbb4 f2f2 	udiv	r2, r4, r2
	tc_write_rc(TC0,1,counts);
  400e6a:	fbb2 f2f6 	udiv	r2, r2, r6
  400e6e:	2101      	movs	r1, #1
  400e70:	4628      	mov	r0, r5
  400e72:	4b0e      	ldr	r3, [pc, #56]	; (400eac <setDelayTimer+0x74>)
  400e74:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e76:	4b0e      	ldr	r3, [pc, #56]	; (400eb0 <setDelayTimer+0x78>)
  400e78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400e80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e84:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e88:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e8c:	601a      	str	r2, [r3, #0]
	
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	NVIC_EnableIRQ((IRQn_Type) ID_TC1);
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
  400e8e:	2210      	movs	r2, #16
  400e90:	2101      	movs	r1, #1
  400e92:	4628      	mov	r0, r5
  400e94:	4b07      	ldr	r3, [pc, #28]	; (400eb4 <setDelayTimer+0x7c>)
  400e96:	4798      	blx	r3
}
  400e98:	b004      	add	sp, #16
  400e9a:	bd70      	pop	{r4, r5, r6, pc}
  400e9c:	05b8d800 	.word	0x05b8d800
  400ea0:	00400987 	.word	0x00400987
  400ea4:	40090000 	.word	0x40090000
  400ea8:	00400945 	.word	0x00400945
  400eac:	0040096f 	.word	0x0040096f
  400eb0:	e000e100 	.word	0xe000e100
  400eb4:	00400977 	.word	0x00400977

00400eb8 <usart_serial_getchar>:
{
  400eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400eba:	b083      	sub	sp, #12
  400ebc:	4605      	mov	r5, r0
  400ebe:	460c      	mov	r4, r1
	uint32_t val = 0;
  400ec0:	2300      	movs	r3, #0
  400ec2:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400ec4:	4b18      	ldr	r3, [pc, #96]	; (400f28 <usart_serial_getchar+0x70>)
  400ec6:	4298      	cmp	r0, r3
  400ec8:	d00a      	beq.n	400ee0 <usart_serial_getchar+0x28>
	if (UART1 == (Uart*)p_usart) {
  400eca:	4b18      	ldr	r3, [pc, #96]	; (400f2c <usart_serial_getchar+0x74>)
  400ecc:	4298      	cmp	r0, r3
  400ece:	d00f      	beq.n	400ef0 <usart_serial_getchar+0x38>
	if (USART0 == p_usart) {
  400ed0:	4b17      	ldr	r3, [pc, #92]	; (400f30 <usart_serial_getchar+0x78>)
  400ed2:	4298      	cmp	r0, r3
  400ed4:	d014      	beq.n	400f00 <usart_serial_getchar+0x48>
	if (USART1 == p_usart) {
  400ed6:	4b17      	ldr	r3, [pc, #92]	; (400f34 <usart_serial_getchar+0x7c>)
  400ed8:	429d      	cmp	r5, r3
  400eda:	d01b      	beq.n	400f14 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400edc:	b003      	add	sp, #12
  400ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400ee0:	461f      	mov	r7, r3
  400ee2:	4e15      	ldr	r6, [pc, #84]	; (400f38 <usart_serial_getchar+0x80>)
  400ee4:	4621      	mov	r1, r4
  400ee6:	4638      	mov	r0, r7
  400ee8:	47b0      	blx	r6
  400eea:	2800      	cmp	r0, #0
  400eec:	d1fa      	bne.n	400ee4 <usart_serial_getchar+0x2c>
  400eee:	e7f2      	b.n	400ed6 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400ef0:	461e      	mov	r6, r3
  400ef2:	4d11      	ldr	r5, [pc, #68]	; (400f38 <usart_serial_getchar+0x80>)
  400ef4:	4621      	mov	r1, r4
  400ef6:	4630      	mov	r0, r6
  400ef8:	47a8      	blx	r5
  400efa:	2800      	cmp	r0, #0
  400efc:	d1fa      	bne.n	400ef4 <usart_serial_getchar+0x3c>
  400efe:	e7ed      	b.n	400edc <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400f00:	461e      	mov	r6, r3
  400f02:	4d0e      	ldr	r5, [pc, #56]	; (400f3c <usart_serial_getchar+0x84>)
  400f04:	a901      	add	r1, sp, #4
  400f06:	4630      	mov	r0, r6
  400f08:	47a8      	blx	r5
  400f0a:	2800      	cmp	r0, #0
  400f0c:	d1fa      	bne.n	400f04 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400f0e:	9b01      	ldr	r3, [sp, #4]
  400f10:	7023      	strb	r3, [r4, #0]
  400f12:	e7e3      	b.n	400edc <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400f14:	461e      	mov	r6, r3
  400f16:	4d09      	ldr	r5, [pc, #36]	; (400f3c <usart_serial_getchar+0x84>)
  400f18:	a901      	add	r1, sp, #4
  400f1a:	4630      	mov	r0, r6
  400f1c:	47a8      	blx	r5
  400f1e:	2800      	cmp	r0, #0
  400f20:	d1fa      	bne.n	400f18 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400f22:	9b01      	ldr	r3, [sp, #4]
  400f24:	7023      	strb	r3, [r4, #0]
}
  400f26:	e7d9      	b.n	400edc <usart_serial_getchar+0x24>
  400f28:	400e0600 	.word	0x400e0600
  400f2c:	40060600 	.word	0x40060600
  400f30:	400a0000 	.word	0x400a0000
  400f34:	400a4000 	.word	0x400a4000
  400f38:	00400a3f 	.word	0x00400a3f
  400f3c:	00400a65 	.word	0x00400a65

00400f40 <usart_serial_putchar>:
{
  400f40:	b570      	push	{r4, r5, r6, lr}
  400f42:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400f44:	4b18      	ldr	r3, [pc, #96]	; (400fa8 <usart_serial_putchar+0x68>)
  400f46:	4298      	cmp	r0, r3
  400f48:	d00a      	beq.n	400f60 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400f4a:	4b18      	ldr	r3, [pc, #96]	; (400fac <usart_serial_putchar+0x6c>)
  400f4c:	4298      	cmp	r0, r3
  400f4e:	d010      	beq.n	400f72 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400f50:	4b17      	ldr	r3, [pc, #92]	; (400fb0 <usart_serial_putchar+0x70>)
  400f52:	4298      	cmp	r0, r3
  400f54:	d016      	beq.n	400f84 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400f56:	4b17      	ldr	r3, [pc, #92]	; (400fb4 <usart_serial_putchar+0x74>)
  400f58:	4298      	cmp	r0, r3
  400f5a:	d01c      	beq.n	400f96 <usart_serial_putchar+0x56>
	return 0;
  400f5c:	2000      	movs	r0, #0
}
  400f5e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400f60:	461e      	mov	r6, r3
  400f62:	4d15      	ldr	r5, [pc, #84]	; (400fb8 <usart_serial_putchar+0x78>)
  400f64:	4621      	mov	r1, r4
  400f66:	4630      	mov	r0, r6
  400f68:	47a8      	blx	r5
  400f6a:	2800      	cmp	r0, #0
  400f6c:	d1fa      	bne.n	400f64 <usart_serial_putchar+0x24>
		return 1;
  400f6e:	2001      	movs	r0, #1
  400f70:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400f72:	461e      	mov	r6, r3
  400f74:	4d10      	ldr	r5, [pc, #64]	; (400fb8 <usart_serial_putchar+0x78>)
  400f76:	4621      	mov	r1, r4
  400f78:	4630      	mov	r0, r6
  400f7a:	47a8      	blx	r5
  400f7c:	2800      	cmp	r0, #0
  400f7e:	d1fa      	bne.n	400f76 <usart_serial_putchar+0x36>
		return 1;
  400f80:	2001      	movs	r0, #1
  400f82:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400f84:	461e      	mov	r6, r3
  400f86:	4d0d      	ldr	r5, [pc, #52]	; (400fbc <usart_serial_putchar+0x7c>)
  400f88:	4621      	mov	r1, r4
  400f8a:	4630      	mov	r0, r6
  400f8c:	47a8      	blx	r5
  400f8e:	2800      	cmp	r0, #0
  400f90:	d1fa      	bne.n	400f88 <usart_serial_putchar+0x48>
		return 1;
  400f92:	2001      	movs	r0, #1
  400f94:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400f96:	461e      	mov	r6, r3
  400f98:	4d08      	ldr	r5, [pc, #32]	; (400fbc <usart_serial_putchar+0x7c>)
  400f9a:	4621      	mov	r1, r4
  400f9c:	4630      	mov	r0, r6
  400f9e:	47a8      	blx	r5
  400fa0:	2800      	cmp	r0, #0
  400fa2:	d1fa      	bne.n	400f9a <usart_serial_putchar+0x5a>
		return 1;
  400fa4:	2001      	movs	r0, #1
  400fa6:	bd70      	pop	{r4, r5, r6, pc}
  400fa8:	400e0600 	.word	0x400e0600
  400fac:	40060600 	.word	0x40060600
  400fb0:	400a0000 	.word	0x400a0000
  400fb4:	400a4000 	.word	0x400a4000
  400fb8:	00400a2f 	.word	0x00400a2f
  400fbc:	00400a51 	.word	0x00400a51

00400fc0 <afec0_data_ready>:
{
  400fc0:	b508      	push	{r3, lr}
	if (!startedSampling)
  400fc2:	4b07      	ldr	r3, [pc, #28]	; (400fe0 <afec0_data_ready+0x20>)
  400fc4:	781b      	ldrb	r3, [r3, #0]
  400fc6:	b91b      	cbnz	r3, 400fd0 <afec0_data_ready+0x10>
		test++;
  400fc8:	4a06      	ldr	r2, [pc, #24]	; (400fe4 <afec0_data_ready+0x24>)
  400fca:	6813      	ldr	r3, [r2, #0]
  400fcc:	3301      	adds	r3, #1
  400fce:	6013      	str	r3, [r2, #0]
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  400fd0:	4b05      	ldr	r3, [pc, #20]	; (400fe8 <afec0_data_ready+0x28>)
  400fd2:	6a18      	ldr	r0, [r3, #32]
	g_afec0_sample_data = afec_get_latest_value(AFEC0);					// Obtain latest sample from COLLECTOR signal (EXT3 - pin4 (ch6))
  400fd4:	b280      	uxth	r0, r0
  400fd6:	4b05      	ldr	r3, [pc, #20]	; (400fec <afec0_data_ready+0x2c>)
  400fd8:	8018      	strh	r0, [r3, #0]
	addSample(g_afec0_sample_data);
  400fda:	4b05      	ldr	r3, [pc, #20]	; (400ff0 <afec0_data_ready+0x30>)
  400fdc:	4798      	blx	r3
  400fde:	bd08      	pop	{r3, pc}
  400fe0:	20008b80 	.word	0x20008b80
  400fe4:	20008b84 	.word	0x20008b84
  400fe8:	400b0000 	.word	0x400b0000
  400fec:	20008c8c 	.word	0x20008c8c
  400ff0:	00400d75 	.word	0x00400d75

00400ff4 <sample_average>:
 ***************************** BEAM PARAMETER ALGORITHMS ****************************************
 **************************************************************************************************/

/*	Compute average/mean from given sample data within a certain window  */

uint16_t sample_average(uint16_t start, uint16_t end, uint16_t* buffer) {
  400ff4:	b4f0      	push	{r4, r5, r6, r7}
		
	uint32_t sample_avg = 0;
	uint32_t total_frequency = 0;
	
	for (uint16_t i = start; i < end; i++)
  400ff6:	4288      	cmp	r0, r1
  400ff8:	d21e      	bcs.n	401038 <sample_average+0x44>
  400ffa:	eb02 0440 	add.w	r4, r2, r0, lsl #1
  400ffe:	4603      	mov	r3, r0
  401000:	4626      	mov	r6, r4
  401002:	2500      	movs	r5, #0
	{
		sample_avg += (uint32_t)buffer[i]*i;
  401004:	f836 7b02 	ldrh.w	r7, [r6], #2
  401008:	fb03 5507 	mla	r5, r3, r7, r5
  40100c:	3301      	adds	r3, #1
	for (uint16_t i = start; i < end; i++)
  40100e:	b29f      	uxth	r7, r3
  401010:	42b9      	cmp	r1, r7
  401012:	d8f7      	bhi.n	401004 <sample_average+0x10>
  401014:	3901      	subs	r1, #1
  401016:	1a09      	subs	r1, r1, r0
  401018:	3001      	adds	r0, #1
  40101a:	fa10 f181 	uxtah	r1, r0, r1
  40101e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  401022:	2000      	movs	r0, #0
	}
	
	for (uint16_t i = start; i < end; i++)
	{
		total_frequency += (uint32_t)buffer[i];
  401024:	f834 3b02 	ldrh.w	r3, [r4], #2
  401028:	4418      	add	r0, r3
	for (uint16_t i = start; i < end; i++)
  40102a:	428c      	cmp	r4, r1
  40102c:	d1fa      	bne.n	401024 <sample_average+0x30>
	}
	
	return sample_avg/total_frequency;
  40102e:	fbb5 f0f0 	udiv	r0, r5, r0
}
  401032:	b280      	uxth	r0, r0
  401034:	bcf0      	pop	{r4, r5, r6, r7}
  401036:	4770      	bx	lr
	uint32_t sample_avg = 0;
  401038:	2500      	movs	r5, #0
	for (uint16_t i = start; i < end; i++)
  40103a:	4628      	mov	r0, r5
  40103c:	e7f7      	b.n	40102e <sample_average+0x3a>

0040103e <find_max>:


/* Find the maximum of the BPM-80 data half cycle and return its index*/

uint16_t find_max(uint16_t* halfcycle, uint16_t length)
{
  40103e:	b470      	push	{r4, r5, r6}
	uint16_t maximum = 0;
	uint16_t max_index = 0;
									
	for (uint16_t i = 0; i < length; i++)
  401040:	460e      	mov	r6, r1
  401042:	b181      	cbz	r1, 401066 <find_max+0x28>
  401044:	1e81      	subs	r1, r0, #2
  401046:	2300      	movs	r3, #0
  401048:	4618      	mov	r0, r3
  40104a:	461c      	mov	r4, r3
  40104c:	b29d      	uxth	r5, r3
	{
		if (halfcycle[i] > maximum) 
  40104e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  401052:	42a2      	cmp	r2, r4
  401054:	bf84      	itt	hi
  401056:	4628      	movhi	r0, r5
		{
			max_index = i;
			maximum = halfcycle[i];
  401058:	4614      	movhi	r4, r2
  40105a:	3301      	adds	r3, #1
	for (uint16_t i = 0; i < length; i++)
  40105c:	b29a      	uxth	r2, r3
  40105e:	4296      	cmp	r6, r2
  401060:	d8f4      	bhi.n	40104c <find_max+0xe>
		}
	}
	
	
	return max_index;
}
  401062:	bc70      	pop	{r4, r5, r6}
  401064:	4770      	bx	lr
	uint16_t max_index = 0;
  401066:	4608      	mov	r0, r1
  401068:	e7fb      	b.n	401062 <find_max+0x24>
	...

0040106c <detect_peaks>:
/* Find beam peak locations and peak widths X and Y using the dispersion-based algorithm */
/* Returns an array of 6 elements : 1. peak position X  2. peak edge left X  3. peak edge right X 
									4. peak position Y  5. peak edge left Y  6. peak edge right Y */

void detect_peaks(uint16_t threshold, uint16_t* buffer)
{
  40106c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401070:	4605      	mov	r5, r0
  401072:	460c      	mov	r4, r1
	uint16_t peak1 = find_max(buffer, half_cycle_length);
  401074:	4b3a      	ldr	r3, [pc, #232]	; (401160 <detect_peaks+0xf4>)
  401076:	881f      	ldrh	r7, [r3, #0]
  401078:	4639      	mov	r1, r7
  40107a:	4620      	mov	r0, r4
  40107c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 401168 <detect_peaks+0xfc>
  401080:	47c0      	blx	r8
  401082:	4606      	mov	r6, r0
	uint16_t peak2 = half_cycle_length + find_max(buffer+half_cycle_length, half_cycle_length);
  401084:	4639      	mov	r1, r7
  401086:	eb04 0047 	add.w	r0, r4, r7, lsl #1
  40108a:	47c0      	blx	r8
  40108c:	4438      	add	r0, r7
  40108e:	b280      	uxth	r0, r0
	
	// Use peak1 and peak2 to find the 4 corner points of the beams, possibly combine with dispersion-based algorithm
	
	peaks_localization[0] = peak1;
  401090:	4b34      	ldr	r3, [pc, #208]	; (401164 <detect_peaks+0xf8>)
  401092:	801e      	strh	r6, [r3, #0]
	peaks_localization[3] = peak2;
  401094:	80d8      	strh	r0, [r3, #6]
			
	// find left corner of X peak
		
	for (uint16_t i = 0; i <= peak1; i++)
	{
		if(buffer[peak1 - i] < threshold) 
  401096:	4631      	mov	r1, r6
  401098:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  40109c:	42ab      	cmp	r3, r5
  40109e:	d349      	bcc.n	401134 <detect_peaks+0xc8>
  4010a0:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak1; i++)
  4010a2:	3301      	adds	r3, #1
  4010a4:	b29b      	uxth	r3, r3
  4010a6:	429e      	cmp	r6, r3
  4010a8:	d350      	bcc.n	40114c <detect_peaks+0xe0>
		if(buffer[peak1 - i] < threshold) 
  4010aa:	1aca      	subs	r2, r1, r3
  4010ac:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  4010b0:	42aa      	cmp	r2, r5
  4010b2:	d2f6      	bcs.n	4010a2 <detect_peaks+0x36>
		{
			peaks_localization[1] = peak1-i;
  4010b4:	1af3      	subs	r3, r6, r3
  4010b6:	4a2b      	ldr	r2, [pc, #172]	; (401164 <detect_peaks+0xf8>)
  4010b8:	8053      	strh	r3, [r2, #2]
		}
	}
	
	// find right corner of X peak
	
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  4010ba:	1bbf      	subs	r7, r7, r6
  4010bc:	d410      	bmi.n	4010e0 <detect_peaks+0x74>
	{
		if(buffer[peak1 + i] < threshold) 
  4010be:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  4010c2:	42ab      	cmp	r3, r5
  4010c4:	d338      	bcc.n	401138 <detect_peaks+0xcc>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  4010c6:	2200      	movs	r2, #0
  4010c8:	3201      	adds	r2, #1
  4010ca:	b292      	uxth	r2, r2
  4010cc:	42ba      	cmp	r2, r7
  4010ce:	dc07      	bgt.n	4010e0 <detect_peaks+0x74>
		if(buffer[peak1 + i] < threshold) 
  4010d0:	1853      	adds	r3, r2, r1
  4010d2:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
  4010d6:	42ab      	cmp	r3, r5
  4010d8:	d2f6      	bcs.n	4010c8 <detect_peaks+0x5c>
		{
			peaks_localization[2] = peak1+i;
  4010da:	4432      	add	r2, r6
  4010dc:	4b21      	ldr	r3, [pc, #132]	; (401164 <detect_peaks+0xf8>)
  4010de:	809a      	strh	r2, [r3, #4]
	
	// find left corner of Y peak
	
	for (uint16_t i = 0; i <= peak2; i++)
	{
		if(buffer[peak2 - i] < threshold)
  4010e0:	4602      	mov	r2, r0
  4010e2:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  4010e6:	42ab      	cmp	r3, r5
  4010e8:	d328      	bcc.n	40113c <detect_peaks+0xd0>
  4010ea:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak2; i++)
  4010ec:	3301      	adds	r3, #1
  4010ee:	b29b      	uxth	r3, r3
  4010f0:	4298      	cmp	r0, r3
  4010f2:	d32e      	bcc.n	401152 <detect_peaks+0xe6>
		if(buffer[peak2 - i] < threshold)
  4010f4:	1ad1      	subs	r1, r2, r3
  4010f6:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  4010fa:	42a9      	cmp	r1, r5
  4010fc:	d2f6      	bcs.n	4010ec <detect_peaks+0x80>
		{
			peaks_localization[4] = peak2-i;
  4010fe:	1ac3      	subs	r3, r0, r3
  401100:	4918      	ldr	r1, [pc, #96]	; (401164 <detect_peaks+0xf8>)
  401102:	810b      	strh	r3, [r1, #8]
		}
	}
	
	// find right corner of Y peak
	
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  401104:	f5c0 5602 	rsb	r6, r0, #8320	; 0x2080
  401108:	360e      	adds	r6, #14
  40110a:	2e00      	cmp	r6, #0
  40110c:	db18      	blt.n	401140 <detect_peaks+0xd4>
	{
		if(buffer[peak2 + i] < threshold)
  40110e:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  401112:	42ab      	cmp	r3, r5
  401114:	d316      	bcc.n	401144 <detect_peaks+0xd8>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  401116:	2300      	movs	r3, #0
  401118:	3301      	adds	r3, #1
  40111a:	b29b      	uxth	r3, r3
  40111c:	42b3      	cmp	r3, r6
  40111e:	dc13      	bgt.n	401148 <detect_peaks+0xdc>
		if(buffer[peak2 + i] < threshold)
  401120:	1899      	adds	r1, r3, r2
  401122:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  401126:	42a9      	cmp	r1, r5
  401128:	d2f6      	bcs.n	401118 <detect_peaks+0xac>
		{
			peaks_localization[5] = peak2+i;
  40112a:	4403      	add	r3, r0
  40112c:	4a0d      	ldr	r2, [pc, #52]	; (401164 <detect_peaks+0xf8>)
  40112e:	8153      	strh	r3, [r2, #10]
			break;
  401130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= peak1; i++)
  401134:	2300      	movs	r3, #0
  401136:	e7bd      	b.n	4010b4 <detect_peaks+0x48>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  401138:	2200      	movs	r2, #0
  40113a:	e7ce      	b.n	4010da <detect_peaks+0x6e>
	for (uint16_t i = 0; i <= peak2; i++)
  40113c:	2300      	movs	r3, #0
  40113e:	e7de      	b.n	4010fe <detect_peaks+0x92>
  401140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  401144:	2300      	movs	r3, #0
  401146:	e7f0      	b.n	40112a <detect_peaks+0xbe>
  401148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40114c:	1bbf      	subs	r7, r7, r6
  40114e:	d5ba      	bpl.n	4010c6 <detect_peaks+0x5a>
  401150:	e7c6      	b.n	4010e0 <detect_peaks+0x74>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  401152:	f5c0 5602 	rsb	r6, r0, #8320	; 0x2080
  401156:	360e      	adds	r6, #14
  401158:	2e00      	cmp	r6, #0
  40115a:	dadc      	bge.n	401116 <detect_peaks+0xaa>
  40115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401160:	2000000c 	.word	0x2000000c
  401164:	20008b64 	.word	0x20008b64
  401168:	0040103f 	.word	0x0040103f

0040116c <compute_beam_intensity>:
/* Compute beam intensity of a cycle in X and Y cross section */
/* Takes as input the borders of both peaks*/
/* Outputs beam intensity of X and Y crossection, so that higher level data representation can choose whether to multiply or sum them*/

void compute_beam_intensity(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right, uint16_t* buffer)
{
  40116c:	b4f0      	push	{r4, r5, r6, r7}
  40116e:	9f04      	ldr	r7, [sp, #16]
	beam_intensity[0] = 0;
  401170:	4c15      	ldr	r4, [pc, #84]	; (4011c8 <compute_beam_intensity+0x5c>)
  401172:	2500      	movs	r5, #0
  401174:	8025      	strh	r5, [r4, #0]
	beam_intensity[1] = 0;
  401176:	8065      	strh	r5, [r4, #2]
	
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  401178:	4288      	cmp	r0, r1
  40117a:	d210      	bcs.n	40119e <compute_beam_intensity+0x32>
  40117c:	eb07 0440 	add.w	r4, r7, r0, lsl #1
  401180:	1e4e      	subs	r6, r1, #1
  401182:	1a36      	subs	r6, r6, r0
  401184:	3001      	adds	r0, #1
  401186:	fa10 f686 	uxtah	r6, r0, r6
  40118a:	eb07 0646 	add.w	r6, r7, r6, lsl #1
	{
		beam_intensity[0] += (uint32_t)buffer[i];
  40118e:	480e      	ldr	r0, [pc, #56]	; (4011c8 <compute_beam_intensity+0x5c>)
  401190:	f834 1b02 	ldrh.w	r1, [r4], #2
  401194:	8805      	ldrh	r5, [r0, #0]
  401196:	4429      	add	r1, r5
  401198:	8001      	strh	r1, [r0, #0]
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  40119a:	42b4      	cmp	r4, r6
  40119c:	d1f8      	bne.n	401190 <compute_beam_intensity+0x24>
	}
	
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  40119e:	429a      	cmp	r2, r3
  4011a0:	d210      	bcs.n	4011c4 <compute_beam_intensity+0x58>
  4011a2:	eb07 0142 	add.w	r1, r7, r2, lsl #1
  4011a6:	1e5c      	subs	r4, r3, #1
  4011a8:	1aa4      	subs	r4, r4, r2
  4011aa:	3201      	adds	r2, #1
  4011ac:	fa12 f484 	uxtah	r4, r2, r4
  4011b0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
	{
		beam_intensity[1] += (uint32_t)buffer[i];
  4011b4:	4a04      	ldr	r2, [pc, #16]	; (4011c8 <compute_beam_intensity+0x5c>)
  4011b6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4011ba:	8850      	ldrh	r0, [r2, #2]
  4011bc:	4403      	add	r3, r0
  4011be:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  4011c0:	42a1      	cmp	r1, r4
  4011c2:	d1f8      	bne.n	4011b6 <compute_beam_intensity+0x4a>
	}
	
}
  4011c4:	bcf0      	pop	{r4, r5, r6, r7}
  4011c6:	4770      	bx	lr
  4011c8:	20008b58 	.word	0x20008b58

004011cc <sum>:

 uint16_t sum(uint16_t start, uint16_t end, uint16_t* buffer)
 {
	 uint16_t result=0;
	 for (uint16_t i=start; i< end; i++ )
  4011cc:	4288      	cmp	r0, r1
  4011ce:	d210      	bcs.n	4011f2 <sum+0x26>
  4011d0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
  4011d4:	3901      	subs	r1, #1
  4011d6:	1a09      	subs	r1, r1, r0
  4011d8:	3001      	adds	r0, #1
  4011da:	fa10 f181 	uxtah	r1, r0, r1
  4011de:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  4011e2:	2000      	movs	r0, #0
	 {
		 result+=buffer[i];
  4011e4:	f833 1b02 	ldrh.w	r1, [r3], #2
  4011e8:	4408      	add	r0, r1
  4011ea:	b280      	uxth	r0, r0
	 for (uint16_t i=start; i< end; i++ )
  4011ec:	4293      	cmp	r3, r2
  4011ee:	d1f9      	bne.n	4011e4 <sum+0x18>
  4011f0:	4770      	bx	lr
	 uint16_t result=0;
  4011f2:	2000      	movs	r0, #0
	 }
	 return result;
 }
  4011f4:	4770      	bx	lr
	...

004011f8 <compute_fwhm>:
 
 /* Compute FWHM X and Y */

 void compute_fwhm(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right,uint16_t* buffer)
 {
  4011f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011fc:	b08b      	sub	sp, #44	; 0x2c
  4011fe:	4680      	mov	r8, r0
  401200:	9007      	str	r0, [sp, #28]
  401202:	460f      	mov	r7, r1
  401204:	9108      	str	r1, [sp, #32]
  401206:	4616      	mov	r6, r2
  401208:	9205      	str	r2, [sp, #20]
  40120a:	461d      	mov	r5, r3
  40120c:	9306      	str	r3, [sp, #24]
	 
	 uint16_t mean[2] = {0,0};
	 long long summed=0;
	 int variance=0;
	 
	 mean[0] = sample_average(peak1_left, peak1_right,buffer);
  40120e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401210:	4c63      	ldr	r4, [pc, #396]	; (4013a0 <compute_fwhm+0x1a8>)
  401212:	47a0      	blx	r4
  401214:	4682      	mov	sl, r0
	 mean[1] = sample_average(peak2_left, peak2_right,buffer);
  401216:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401218:	4629      	mov	r1, r5
  40121a:	4630      	mov	r0, r6
  40121c:	47a0      	blx	r4
  40121e:	9009      	str	r0, [sp, #36]	; 0x24
	 
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  401220:	45b8      	cmp	r8, r7
  401222:	f080 80ae 	bcs.w	401382 <compute_fwhm+0x18a>
  401226:	4638      	mov	r0, r7
  401228:	eba8 040a 	sub.w	r4, r8, sl
  40122c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40122e:	4615      	mov	r5, r2
  401230:	4642      	mov	r2, r8
  401232:	eb05 0748 	add.w	r7, r5, r8, lsl #1
  401236:	1e43      	subs	r3, r0, #1
  401238:	1a9b      	subs	r3, r3, r2
  40123a:	3201      	adds	r2, #1
  40123c:	fa12 f383 	uxtah	r3, r2, r3
  401240:	eba3 0a0a 	sub.w	sl, r3, sl
  401244:	2200      	movs	r2, #0
  401246:	2300      	movs	r3, #0
  401248:	e9cd 2300 	strd	r2, r3, [sp]
	 {
		 summed+= (pow((i-mean[0]),2)*buffer[i]);
  40124c:	4e55      	ldr	r6, [pc, #340]	; (4013a4 <compute_fwhm+0x1ac>)
  40124e:	4d56      	ldr	r5, [pc, #344]	; (4013a8 <compute_fwhm+0x1b0>)
  401250:	f8df 8170 	ldr.w	r8, [pc, #368]	; 4013c4 <compute_fwhm+0x1cc>
  401254:	f8df 9170 	ldr.w	r9, [pc, #368]	; 4013c8 <compute_fwhm+0x1d0>
  401258:	46d3      	mov	fp, sl
  40125a:	46ba      	mov	sl, r7
  40125c:	4620      	mov	r0, r4
  40125e:	47b0      	blx	r6
  401260:	f83a 7b02 	ldrh.w	r7, [sl], #2
  401264:	4602      	mov	r2, r0
  401266:	460b      	mov	r3, r1
  401268:	47a8      	blx	r5
  40126a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40126e:	4638      	mov	r0, r7
  401270:	47b0      	blx	r6
  401272:	4602      	mov	r2, r0
  401274:	460b      	mov	r3, r1
  401276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40127a:	47a8      	blx	r5
  40127c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401280:	e9dd 0100 	ldrd	r0, r1, [sp]
  401284:	4b49      	ldr	r3, [pc, #292]	; (4013ac <compute_fwhm+0x1b4>)
  401286:	4798      	blx	r3
  401288:	4602      	mov	r2, r0
  40128a:	460b      	mov	r3, r1
  40128c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401290:	47c0      	blx	r8
  401292:	47c8      	blx	r9
  401294:	e9cd 0100 	strd	r0, r1, [sp]
  401298:	3401      	adds	r4, #1
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  40129a:	455c      	cmp	r4, fp
  40129c:	d1de      	bne.n	40125c <compute_fwhm+0x64>
	 }
	 variance=summed/sum(peak1_left,peak1_right,buffer);
  40129e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4012a0:	9908      	ldr	r1, [sp, #32]
  4012a2:	9807      	ldr	r0, [sp, #28]
  4012a4:	4b42      	ldr	r3, [pc, #264]	; (4013b0 <compute_fwhm+0x1b8>)
  4012a6:	4798      	blx	r3
  4012a8:	b282      	uxth	r2, r0
  4012aa:	2300      	movs	r3, #0
  4012ac:	e9dd 0100 	ldrd	r0, r1, [sp]
  4012b0:	4c40      	ldr	r4, [pc, #256]	; (4013b4 <compute_fwhm+0x1bc>)
  4012b2:	47a0      	blx	r4
	
	 fwhm[0]= (uint16_t)(sqrt(variance)*2.355);
  4012b4:	4b3b      	ldr	r3, [pc, #236]	; (4013a4 <compute_fwhm+0x1ac>)
  4012b6:	4798      	blx	r3
  4012b8:	4b3f      	ldr	r3, [pc, #252]	; (4013b8 <compute_fwhm+0x1c0>)
  4012ba:	4798      	blx	r3
  4012bc:	a336      	add	r3, pc, #216	; (adr r3, 401398 <compute_fwhm+0x1a0>)
  4012be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012c2:	4c39      	ldr	r4, [pc, #228]	; (4013a8 <compute_fwhm+0x1b0>)
  4012c4:	47a0      	blx	r4
  4012c6:	4b3d      	ldr	r3, [pc, #244]	; (4013bc <compute_fwhm+0x1c4>)
  4012c8:	4798      	blx	r3
  4012ca:	4b3d      	ldr	r3, [pc, #244]	; (4013c0 <compute_fwhm+0x1c8>)
  4012cc:	8018      	strh	r0, [r3, #0]
	 summed=0;
	 variance=0;
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  4012ce:	9a05      	ldr	r2, [sp, #20]
  4012d0:	4613      	mov	r3, r2
  4012d2:	9806      	ldr	r0, [sp, #24]
  4012d4:	4282      	cmp	r2, r0
  4012d6:	d259      	bcs.n	40138c <compute_fwhm+0x194>
  4012d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4012da:	1b5c      	subs	r4, r3, r5
  4012dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4012de:	4611      	mov	r1, r2
  4012e0:	eb01 0743 	add.w	r7, r1, r3, lsl #1
  4012e4:	f100 3aff 	add.w	sl, r0, #4294967295
  4012e8:	ebaa 0a03 	sub.w	sl, sl, r3
  4012ec:	3301      	adds	r3, #1
  4012ee:	fa13 fa8a 	uxtah	sl, r3, sl
  4012f2:	ebaa 0a05 	sub.w	sl, sl, r5
  4012f6:	2200      	movs	r2, #0
  4012f8:	2300      	movs	r3, #0
  4012fa:	e9cd 2300 	strd	r2, r3, [sp]
	 {
		 summed+= (pow((i-mean[1]),2)*buffer[i]);
  4012fe:	4e29      	ldr	r6, [pc, #164]	; (4013a4 <compute_fwhm+0x1ac>)
  401300:	4d29      	ldr	r5, [pc, #164]	; (4013a8 <compute_fwhm+0x1b0>)
  401302:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4013c4 <compute_fwhm+0x1cc>
  401306:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 4013c8 <compute_fwhm+0x1d0>
  40130a:	4620      	mov	r0, r4
  40130c:	47b0      	blx	r6
  40130e:	f837 bb02 	ldrh.w	fp, [r7], #2
  401312:	4602      	mov	r2, r0
  401314:	460b      	mov	r3, r1
  401316:	47a8      	blx	r5
  401318:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40131c:	4658      	mov	r0, fp
  40131e:	47b0      	blx	r6
  401320:	4602      	mov	r2, r0
  401322:	460b      	mov	r3, r1
  401324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401328:	47a8      	blx	r5
  40132a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40132e:	e9dd 0100 	ldrd	r0, r1, [sp]
  401332:	4b1e      	ldr	r3, [pc, #120]	; (4013ac <compute_fwhm+0x1b4>)
  401334:	4798      	blx	r3
  401336:	4602      	mov	r2, r0
  401338:	460b      	mov	r3, r1
  40133a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40133e:	47c8      	blx	r9
  401340:	47c0      	blx	r8
  401342:	e9cd 0100 	strd	r0, r1, [sp]
  401346:	3401      	adds	r4, #1
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  401348:	4554      	cmp	r4, sl
  40134a:	d1de      	bne.n	40130a <compute_fwhm+0x112>
	 }
	 variance=summed/sum(peak2_left,peak2_right,buffer);
  40134c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40134e:	9906      	ldr	r1, [sp, #24]
  401350:	9805      	ldr	r0, [sp, #20]
  401352:	4b17      	ldr	r3, [pc, #92]	; (4013b0 <compute_fwhm+0x1b8>)
  401354:	4798      	blx	r3
  401356:	b282      	uxth	r2, r0
  401358:	2300      	movs	r3, #0
  40135a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40135e:	4c15      	ldr	r4, [pc, #84]	; (4013b4 <compute_fwhm+0x1bc>)
  401360:	47a0      	blx	r4
	 fwhm[1]=(uint16_t) (sqrt(variance)*2.355);
  401362:	4b10      	ldr	r3, [pc, #64]	; (4013a4 <compute_fwhm+0x1ac>)
  401364:	4798      	blx	r3
  401366:	4b14      	ldr	r3, [pc, #80]	; (4013b8 <compute_fwhm+0x1c0>)
  401368:	4798      	blx	r3
  40136a:	a30b      	add	r3, pc, #44	; (adr r3, 401398 <compute_fwhm+0x1a0>)
  40136c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401370:	4c0d      	ldr	r4, [pc, #52]	; (4013a8 <compute_fwhm+0x1b0>)
  401372:	47a0      	blx	r4
  401374:	4b11      	ldr	r3, [pc, #68]	; (4013bc <compute_fwhm+0x1c4>)
  401376:	4798      	blx	r3
  401378:	4b11      	ldr	r3, [pc, #68]	; (4013c0 <compute_fwhm+0x1c8>)
  40137a:	8058      	strh	r0, [r3, #2]
 }
  40137c:	b00b      	add	sp, #44	; 0x2c
  40137e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 long long summed=0;
  401382:	2300      	movs	r3, #0
  401384:	2400      	movs	r4, #0
  401386:	e9cd 3400 	strd	r3, r4, [sp]
  40138a:	e788      	b.n	40129e <compute_fwhm+0xa6>
	 summed=0;
  40138c:	2300      	movs	r3, #0
  40138e:	2400      	movs	r4, #0
  401390:	e9cd 3400 	strd	r3, r4, [sp]
  401394:	e7da      	b.n	40134c <compute_fwhm+0x154>
  401396:	bf00      	nop
  401398:	3d70a3d7 	.word	0x3d70a3d7
  40139c:	4002d70a 	.word	0x4002d70a
  4013a0:	00400ff5 	.word	0x00400ff5
  4013a4:	00402f41 	.word	0x00402f41
  4013a8:	0040300d 	.word	0x0040300d
  4013ac:	00402fb1 	.word	0x00402fb1
  4013b0:	004011cd 	.word	0x004011cd
  4013b4:	004035ad 	.word	0x004035ad
  4013b8:	00401d91 	.word	0x00401d91
  4013bc:	0040356d 	.word	0x0040356d
  4013c0:	20008b60 	.word	0x20008b60
  4013c4:	00402ca9 	.word	0x00402ca9
  4013c8:	0040364d 	.word	0x0040364d
  4013cc:	00000000 	.word	0x00000000

004013d0 <compute_skewness>:


/* Compute skewness of the beam  X and Y */

void compute_skewness(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right,uint16_t* buffer)
{
  4013d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013d4:	ed2d 8b02 	vpush	{d8}
  4013d8:	b085      	sub	sp, #20
  4013da:	4680      	mov	r8, r0
  4013dc:	4689      	mov	r9, r1
  4013de:	4617      	mov	r7, r2
  4013e0:	9202      	str	r2, [sp, #8]
  4013e2:	461e      	mov	r6, r3
  4013e4:	9303      	str	r3, [sp, #12]
	int first_peak_mean  =  sample_average(peak1_left, peak1_right,buffer);
  4013e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4013e8:	4c39      	ldr	r4, [pc, #228]	; (4014d0 <compute_skewness+0x100>)
  4013ea:	47a0      	blx	r4
  4013ec:	4605      	mov	r5, r0
	int second_peak_mean =  sample_average(peak2_left, peak2_right,buffer);
  4013ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4013f0:	4631      	mov	r1, r6
  4013f2:	4638      	mov	r0, r7
  4013f4:	47a0      	blx	r4
  4013f6:	4604      	mov	r4, r0
	
	double third_central = 0;
	uint32_t second_central = 0;
	
	 for (int i=peak1_left;i<peak1_right;i++ )
  4013f8:	45c8      	cmp	r8, r9
  4013fa:	da0f      	bge.n	40141c <compute_skewness+0x4c>
  4013fc:	4646      	mov	r6, r8
  4013fe:	464f      	mov	r7, r9
  401400:	eba8 0505 	sub.w	r5, r8, r5
	 {
		 third_central = (double)i-1054;//(pow((i-first_peak_mean),3)*buffer[i]);
		 second_central += (pow((i-first_peak_mean),2)*buffer[i]);
  401404:	ed9f 8b30 	vldr	d8, [pc, #192]	; 4014c8 <compute_skewness+0xf8>
  401408:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 4014dc <compute_skewness+0x10c>
  40140c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 4014ec <compute_skewness+0x11c>
  401410:	2d00      	cmp	r5, #0
  401412:	dd4d      	ble.n	4014b0 <compute_skewness+0xe0>
	 for (int i=peak1_left;i<peak1_right;i++ )
  401414:	3601      	adds	r6, #1
  401416:	3501      	adds	r5, #1
  401418:	42be      	cmp	r6, r7
  40141a:	dbf9      	blt.n	401410 <compute_skewness+0x40>
	 }
	 
	 second_central = second_central / sum(peak1_left,peak1_right,buffer);
	 //third_central = third_central / sum(peak1_left,peak1_right,buffer);
	
	skewness[0] = peak1_left;
  40141c:	4640      	mov	r0, r8
  40141e:	4b2d      	ldr	r3, [pc, #180]	; (4014d4 <compute_skewness+0x104>)
  401420:	4798      	blx	r3
  401422:	4b2d      	ldr	r3, [pc, #180]	; (4014d8 <compute_skewness+0x108>)
  401424:	e9c3 0100 	strd	r0, r1, [r3]
	
	third_central = 0;
	second_central = 0;
	
	
	 for (int i=peak2_left;i<peak2_right;i++ )
  401428:	9a02      	ldr	r2, [sp, #8]
  40142a:	4613      	mov	r3, r2
  40142c:	9803      	ldr	r0, [sp, #12]
  40142e:	4282      	cmp	r2, r0
  401430:	da44      	bge.n	4014bc <compute_skewness+0xec>
  401432:	1b14      	subs	r4, r2, r4
  401434:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401436:	eb02 0543 	add.w	r5, r2, r3, lsl #1
  40143a:	eb02 0840 	add.w	r8, r2, r0, lsl #1
  40143e:	2300      	movs	r3, #0
  401440:	461e      	mov	r6, r3
	 {
		 second_central += (pow((i-second_peak_mean),2)*buffer[i]);
  401442:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4014d4 <compute_skewness+0x104>
  401446:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 4014f0 <compute_skewness+0x120>
  40144a:	4620      	mov	r0, r4
  40144c:	4b23      	ldr	r3, [pc, #140]	; (4014dc <compute_skewness+0x10c>)
  40144e:	4798      	blx	r3
  401450:	f835 bb02 	ldrh.w	fp, [r5], #2
  401454:	4602      	mov	r2, r0
  401456:	460b      	mov	r3, r1
  401458:	4f21      	ldr	r7, [pc, #132]	; (4014e0 <compute_skewness+0x110>)
  40145a:	47b8      	blx	r7
  40145c:	e9cd 0100 	strd	r0, r1, [sp]
  401460:	4658      	mov	r0, fp
  401462:	4b1e      	ldr	r3, [pc, #120]	; (4014dc <compute_skewness+0x10c>)
  401464:	4798      	blx	r3
  401466:	4602      	mov	r2, r0
  401468:	460b      	mov	r3, r1
  40146a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40146e:	47b8      	blx	r7
  401470:	e9cd 0100 	strd	r0, r1, [sp]
  401474:	4630      	mov	r0, r6
  401476:	47c8      	blx	r9
  401478:	4602      	mov	r2, r0
  40147a:	460b      	mov	r3, r1
  40147c:	e9dd 0100 	ldrd	r0, r1, [sp]
  401480:	4e18      	ldr	r6, [pc, #96]	; (4014e4 <compute_skewness+0x114>)
  401482:	47b0      	blx	r6
  401484:	47d0      	blx	sl
  401486:	4606      	mov	r6, r0
  401488:	3401      	adds	r4, #1
	 for (int i=peak2_left;i<peak2_right;i++ )
  40148a:	4545      	cmp	r5, r8
  40148c:	d1dd      	bne.n	40144a <compute_skewness+0x7a>
	 }
	 
	 second_central = second_central / sum(peak2_left,peak2_right,buffer);
  40148e:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401490:	9903      	ldr	r1, [sp, #12]
  401492:	9802      	ldr	r0, [sp, #8]
  401494:	4b14      	ldr	r3, [pc, #80]	; (4014e8 <compute_skewness+0x118>)
  401496:	4798      	blx	r3
	
	skewness[1] = second_central;
  401498:	fbb6 f0f0 	udiv	r0, r6, r0
  40149c:	4b0d      	ldr	r3, [pc, #52]	; (4014d4 <compute_skewness+0x104>)
  40149e:	4798      	blx	r3
  4014a0:	4b0d      	ldr	r3, [pc, #52]	; (4014d8 <compute_skewness+0x108>)
  4014a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
	
}
  4014a6:	b005      	add	sp, #20
  4014a8:	ecbd 8b02 	vpop	{d8}
  4014ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 second_central += (pow((i-first_peak_mean),2)*buffer[i]);
  4014b0:	4628      	mov	r0, r5
  4014b2:	47d0      	blx	sl
  4014b4:	ec53 2b18 	vmov	r2, r3, d8
  4014b8:	47c8      	blx	r9
  4014ba:	e7ab      	b.n	401414 <compute_skewness+0x44>
	second_central = 0;
  4014bc:	2300      	movs	r3, #0
  4014be:	461e      	mov	r6, r3
  4014c0:	e7e5      	b.n	40148e <compute_skewness+0xbe>
  4014c2:	bf00      	nop
  4014c4:	f3af 8000 	nop.w
  4014c8:	00000000 	.word	0x00000000
  4014cc:	40000000 	.word	0x40000000
  4014d0:	00400ff5 	.word	0x00400ff5
  4014d4:	00402f21 	.word	0x00402f21
  4014d8:	20008b70 	.word	0x20008b70
  4014dc:	00402f41 	.word	0x00402f41
  4014e0:	0040300d 	.word	0x0040300d
  4014e4:	00402ca9 	.word	0x00402ca9
  4014e8:	004011cd 	.word	0x004011cd
  4014ec:	00401a95 	.word	0x00401a95
  4014f0:	0040356d 	.word	0x0040356d

004014f4 <show_beam_parameters>:


/* Present beam parameters on terminal*/

void show_beam_parameters(uint16_t* buffer)
{
  4014f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014f8:	b08b      	sub	sp, #44	; 0x2c
  4014fa:	af02      	add	r7, sp, #8
  4014fc:	4682      	mov	sl, r0
	
 	detect_peaks(20, buffer);
  4014fe:	4601      	mov	r1, r0
  401500:	2014      	movs	r0, #20
  401502:	4b75      	ldr	r3, [pc, #468]	; (4016d8 <show_beam_parameters+0x1e4>)
  401504:	4798      	blx	r3
 	compute_beam_intensity(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5], buffer);
  401506:	4d75      	ldr	r5, [pc, #468]	; (4016dc <show_beam_parameters+0x1e8>)
  401508:	896b      	ldrh	r3, [r5, #10]
  40150a:	892a      	ldrh	r2, [r5, #8]
  40150c:	88a9      	ldrh	r1, [r5, #4]
  40150e:	8868      	ldrh	r0, [r5, #2]
  401510:	f8cd a000 	str.w	sl, [sp]
  401514:	4c72      	ldr	r4, [pc, #456]	; (4016e0 <show_beam_parameters+0x1ec>)
  401516:	47a0      	blx	r4
 	compute_fwhm(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5],buffer);
  401518:	896b      	ldrh	r3, [r5, #10]
  40151a:	892a      	ldrh	r2, [r5, #8]
  40151c:	88a9      	ldrh	r1, [r5, #4]
  40151e:	8868      	ldrh	r0, [r5, #2]
  401520:	f8cd a000 	str.w	sl, [sp]
  401524:	4c6f      	ldr	r4, [pc, #444]	; (4016e4 <show_beam_parameters+0x1f0>)
  401526:	47a0      	blx	r4
 	compute_skewness(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5],buffer);
  401528:	896b      	ldrh	r3, [r5, #10]
  40152a:	892a      	ldrh	r2, [r5, #8]
  40152c:	88a9      	ldrh	r1, [r5, #4]
  40152e:	8868      	ldrh	r0, [r5, #2]
  401530:	f8cd a000 	str.w	sl, [sp]
  401534:	4c6c      	ldr	r4, [pc, #432]	; (4016e8 <show_beam_parameters+0x1f4>)
  401536:	47a0      	blx	r4

	
	uint16_t peak_info[7] = {0,0,0,0,0,0,9999};
  401538:	2300      	movs	r3, #0
  40153a:	823b      	strh	r3, [r7, #16]
  40153c:	827b      	strh	r3, [r7, #18]
  40153e:	82bb      	strh	r3, [r7, #20]
  401540:	82fb      	strh	r3, [r7, #22]
  401542:	833b      	strh	r3, [r7, #24]
  401544:	837b      	strh	r3, [r7, #26]
  401546:	f242 730f 	movw	r3, #9999	; 0x270f
  40154a:	83bb      	strh	r3, [r7, #28]
  40154c:	462b      	mov	r3, r5
  40154e:	f107 0410 	add.w	r4, r7, #16
  401552:	350c      	adds	r5, #12
  401554:	4622      	mov	r2, r4
	
	
	
	for (uint16_t i = 0; i < 6; i++)
	{
		 peak_info[i] = peaks_localization[i];
  401556:	f833 1b02 	ldrh.w	r1, [r3], #2
  40155a:	f822 1b02 	strh.w	r1, [r2], #2
	for (uint16_t i = 0; i < 6; i++)
  40155e:	42ab      	cmp	r3, r5
  401560:	d1f9      	bne.n	401556 <show_beam_parameters+0x62>
	}
	
	uint16_t peak_width1 = peak_info[2] - peak_info[1] + 1;
  401562:	f8b7 c012 	ldrh.w	ip, [r7, #18]
  401566:	f8b7 9014 	ldrh.w	r9, [r7, #20]
  40156a:	f109 0901 	add.w	r9, r9, #1
  40156e:	eba9 090c 	sub.w	r9, r9, ip
  401572:	fa1f f989 	uxth.w	r9, r9
	uint16_t peak_one_plot_data[peak_width1];
  401576:	f109 31ff 	add.w	r1, r9, #4294967295
  40157a:	ea4f 0349 	mov.w	r3, r9, lsl #1
  40157e:	3308      	adds	r3, #8
  401580:	f023 0307 	bic.w	r3, r3, #7
  401584:	ebad 0d03 	sub.w	sp, sp, r3
  401588:	ae02      	add	r6, sp, #8
	uint16_t peak_width2 = peak_info[5] - peak_info[4] + 1;
  40158a:	f8b7 e018 	ldrh.w	lr, [r7, #24]
  40158e:	f8b7 801a 	ldrh.w	r8, [r7, #26]
  401592:	f108 0801 	add.w	r8, r8, #1
  401596:	eba8 080e 	sub.w	r8, r8, lr
  40159a:	fa1f f888 	uxth.w	r8, r8
	uint16_t peak_two_plot_data[peak_width2];
  40159e:	f108 30ff 	add.w	r0, r8, #4294967295
  4015a2:	ea4f 0348 	mov.w	r3, r8, lsl #1
  4015a6:	3308      	adds	r3, #8
  4015a8:	f023 0307 	bic.w	r3, r3, #7
  4015ac:	ebad 0d03 	sub.w	sp, sp, r3
  4015b0:	ad02      	add	r5, sp, #8
	
	
	for (uint16_t i = 0; i < peak_width1-1; i++)
  4015b2:	2900      	cmp	r1, #0
  4015b4:	dd0c      	ble.n	4015d0 <show_beam_parameters+0xdc>
  4015b6:	2200      	movs	r2, #0
  4015b8:	4613      	mov	r3, r2
	{
		peak_one_plot_data[i] =  buffer[peak_info[1] + i];
  4015ba:	eb0c 0b02 	add.w	fp, ip, r2
  4015be:	f83a b01b 	ldrh.w	fp, [sl, fp, lsl #1]
  4015c2:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
	for (uint16_t i = 0; i < peak_width1-1; i++)
  4015c6:	3301      	adds	r3, #1
  4015c8:	b29b      	uxth	r3, r3
  4015ca:	461a      	mov	r2, r3
  4015cc:	4299      	cmp	r1, r3
  4015ce:	dcf4      	bgt.n	4015ba <show_beam_parameters+0xc6>
	}
	
	peak_one_plot_data[peak_width1-1] = 8888; 
  4015d0:	f242 23b8 	movw	r3, #8888	; 0x22b8
  4015d4:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
	
	for (uint16_t i = 0; i < peak_width2-1; i++)
  4015d8:	2800      	cmp	r0, #0
  4015da:	dd0c      	ble.n	4015f6 <show_beam_parameters+0x102>
  4015dc:	2200      	movs	r2, #0
  4015de:	4613      	mov	r3, r2
	{
		peak_two_plot_data[i] =  buffer[peak_info[4] + i];
  4015e0:	eb0e 0102 	add.w	r1, lr, r2
  4015e4:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
  4015e8:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
	for (uint16_t i = 0; i < peak_width2-1; i++)
  4015ec:	3301      	adds	r3, #1
  4015ee:	b29b      	uxth	r3, r3
  4015f0:	461a      	mov	r2, r3
  4015f2:	4298      	cmp	r0, r3
  4015f4:	dcf4      	bgt.n	4015e0 <show_beam_parameters+0xec>
	}
	
	peak_two_plot_data[peak_width2-1] = 7777; 
  4015f6:	f641 6361 	movw	r3, #7777	; 0x1e61
  4015fa:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
	
	
	
	uint16_t beam_parameters[4] = {0,0,0,0};
	
	beam_parameters[0] = beam_intensity[0];
  4015fe:	4b3b      	ldr	r3, [pc, #236]	; (4016ec <show_beam_parameters+0x1f8>)
  401600:	881a      	ldrh	r2, [r3, #0]
  401602:	813a      	strh	r2, [r7, #8]
	beam_parameters[1] = beam_intensity[1];
  401604:	885b      	ldrh	r3, [r3, #2]
  401606:	817b      	strh	r3, [r7, #10]
	beam_parameters[2] = fwhm[0];
  401608:	4b39      	ldr	r3, [pc, #228]	; (4016f0 <show_beam_parameters+0x1fc>)
  40160a:	881a      	ldrh	r2, [r3, #0]
  40160c:	81ba      	strh	r2, [r7, #12]
	beam_parameters[3] = fwhm[1];
  40160e:	885b      	ldrh	r3, [r3, #2]
  401610:	81fb      	strh	r3, [r7, #14]
  401612:	f107 0b1e 	add.w	fp, r7, #30
	
	
	
	for (uint16_t i = 0; i < 7; i++)
    {
		usart_serial_write_packet(CONF_UART, peak_info+i,2);
  401616:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 4016f8 <show_beam_parameters+0x204>
  40161a:	2202      	movs	r2, #2
  40161c:	4621      	mov	r1, r4
  40161e:	4835      	ldr	r0, [pc, #212]	; (4016f4 <show_beam_parameters+0x200>)
  401620:	47d0      	blx	sl
  401622:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < 7; i++)
  401624:	455c      	cmp	r4, fp
  401626:	d1f8      	bne.n	40161a <show_beam_parameters+0x126>
				
	}
	
	for (uint16_t i = 0; i < peak_width1; i++)
  401628:	f1b9 0f00 	cmp.w	r9, #0
  40162c:	d015      	beq.n	40165a <show_beam_parameters+0x166>
  40162e:	4634      	mov	r4, r6
  401630:	f109 39ff 	add.w	r9, r9, #4294967295
  401634:	fa1f f989 	uxth.w	r9, r9
  401638:	f109 0901 	add.w	r9, r9, #1
  40163c:	eb06 0649 	add.w	r6, r6, r9, lsl #1
	{
		usart_serial_write_packet(CONF_UART, peak_one_plot_data + i,2);
  401640:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 4016f4 <show_beam_parameters+0x200>
  401644:	f04f 0a02 	mov.w	sl, #2
  401648:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 4016f8 <show_beam_parameters+0x204>
  40164c:	4652      	mov	r2, sl
  40164e:	4621      	mov	r1, r4
  401650:	4658      	mov	r0, fp
  401652:	47c8      	blx	r9
  401654:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < peak_width1; i++)
  401656:	42b4      	cmp	r4, r6
  401658:	d1f8      	bne.n	40164c <show_beam_parameters+0x158>
	}
	
	for (uint16_t i = 0; i < peak_width2; i++)
  40165a:	f1b8 0f00 	cmp.w	r8, #0
  40165e:	d014      	beq.n	40168a <show_beam_parameters+0x196>
  401660:	462c      	mov	r4, r5
  401662:	f108 38ff 	add.w	r8, r8, #4294967295
  401666:	fa1f f888 	uxth.w	r8, r8
  40166a:	f108 0801 	add.w	r8, r8, #1
  40166e:	eb05 0548 	add.w	r5, r5, r8, lsl #1
	{
		usart_serial_write_packet(CONF_UART, peak_two_plot_data + i,2);
  401672:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4016f4 <show_beam_parameters+0x200>
  401676:	f04f 0802 	mov.w	r8, #2
  40167a:	4e1f      	ldr	r6, [pc, #124]	; (4016f8 <show_beam_parameters+0x204>)
  40167c:	4642      	mov	r2, r8
  40167e:	4621      	mov	r1, r4
  401680:	4648      	mov	r0, r9
  401682:	47b0      	blx	r6
  401684:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < peak_width2; i++)
  401686:	42a5      	cmp	r5, r4
  401688:	d1f8      	bne.n	40167c <show_beam_parameters+0x188>
  40168a:	f107 0408 	add.w	r4, r7, #8
  40168e:	f107 0910 	add.w	r9, r7, #16
	}
	
	for (uint16_t i = 0; i < 4; i++)
	{
		usart_serial_write_packet(CONF_UART, beam_parameters + i,2);
  401692:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4016f4 <show_beam_parameters+0x200>
  401696:	2602      	movs	r6, #2
  401698:	4d17      	ldr	r5, [pc, #92]	; (4016f8 <show_beam_parameters+0x204>)
  40169a:	4632      	mov	r2, r6
  40169c:	4621      	mov	r1, r4
  40169e:	4640      	mov	r0, r8
  4016a0:	47a8      	blx	r5
  4016a2:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < 4; i++)
  4016a4:	45a1      	cmp	r9, r4
  4016a6:	d1f8      	bne.n	40169a <show_beam_parameters+0x1a6>
	}
	
	for (uint16_t i = 0; i < 2; i++)
	{
		usart_serial_write_packet(CONF_UART, skewness + i,8);
  4016a8:	4e14      	ldr	r6, [pc, #80]	; (4016fc <show_beam_parameters+0x208>)
  4016aa:	4d12      	ldr	r5, [pc, #72]	; (4016f4 <show_beam_parameters+0x200>)
  4016ac:	2208      	movs	r2, #8
  4016ae:	4631      	mov	r1, r6
  4016b0:	4628      	mov	r0, r5
  4016b2:	4c11      	ldr	r4, [pc, #68]	; (4016f8 <show_beam_parameters+0x204>)
  4016b4:	47a0      	blx	r4
  4016b6:	2208      	movs	r2, #8
  4016b8:	18b1      	adds	r1, r6, r2
  4016ba:	4628      	mov	r0, r5
  4016bc:	47a0      	blx	r4
	}
	
	uint16_t delimiter = 6666;
  4016be:	f107 0120 	add.w	r1, r7, #32
  4016c2:	f641 230a 	movw	r3, #6666	; 0x1a0a
  4016c6:	f821 3d1a 	strh.w	r3, [r1, #-26]!
	usart_serial_write_packet(CONF_UART, &delimiter,2);
  4016ca:	2202      	movs	r2, #2
  4016cc:	4628      	mov	r0, r5
  4016ce:	47a0      	blx	r4
	
	printf("Y skewness : ");
	print_float(skewness[1]);
	
	*/
}
  4016d0:	3724      	adds	r7, #36	; 0x24
  4016d2:	46bd      	mov	sp, r7
  4016d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016d8:	0040106d 	.word	0x0040106d
  4016dc:	20008b64 	.word	0x20008b64
  4016e0:	0040116d 	.word	0x0040116d
  4016e4:	004011f9 	.word	0x004011f9
  4016e8:	004013d1 	.word	0x004013d1
  4016ec:	20008b58 	.word	0x20008b58
  4016f0:	20008b60 	.word	0x20008b60
  4016f4:	400e0600 	.word	0x400e0600
  4016f8:	004001cd 	.word	0x004001cd
  4016fc:	20008b70 	.word	0x20008b70

00401700 <ACC_Handler>:
{
  401700:	b508      	push	{r3, lr}
	ul_status = acc_get_interrupt_status(ACC);
  401702:	481b      	ldr	r0, [pc, #108]	; (401770 <ACC_Handler+0x70>)
  401704:	4b1b      	ldr	r3, [pc, #108]	; (401774 <ACC_Handler+0x74>)
  401706:	4798      	blx	r3
	if ((ul_status & ACC_ISR_CE) == ACC_ISR_CE) {
  401708:	f010 0f01 	tst.w	r0, #1
  40170c:	d100      	bne.n	401710 <ACC_Handler+0x10>
  40170e:	bd08      	pop	{r3, pc}
		if (acc_get_comparison_result(ACC)) {
  401710:	4817      	ldr	r0, [pc, #92]	; (401770 <ACC_Handler+0x70>)
  401712:	4b19      	ldr	r3, [pc, #100]	; (401778 <ACC_Handler+0x78>)
  401714:	4798      	blx	r3
  401716:	b310      	cbz	r0, 40175e <ACC_Handler+0x5e>
			if(!triggered){
  401718:	4b18      	ldr	r3, [pc, #96]	; (40177c <ACC_Handler+0x7c>)
  40171a:	781b      	ldrb	r3, [r3, #0]
  40171c:	2b00      	cmp	r3, #0
  40171e:	d1f6      	bne.n	40170e <ACC_Handler+0xe>
				fullBuffer=true;
  401720:	2301      	movs	r3, #1
  401722:	4a17      	ldr	r2, [pc, #92]	; (401780 <ACC_Handler+0x80>)
  401724:	7013      	strb	r3, [r2, #0]
				startedSampling=false;
  401726:	2200      	movs	r2, #0
  401728:	4916      	ldr	r1, [pc, #88]	; (401784 <ACC_Handler+0x84>)
  40172a:	700a      	strb	r2, [r1, #0]
				test=0;
  40172c:	4916      	ldr	r1, [pc, #88]	; (401788 <ACC_Handler+0x88>)
  40172e:	600a      	str	r2, [r1, #0]
				triggered= true;
  401730:	4a12      	ldr	r2, [pc, #72]	; (40177c <ACC_Handler+0x7c>)
  401732:	7013      	strb	r3, [r2, #0]
				if(delay==0){
  401734:	4b15      	ldr	r3, [pc, #84]	; (40178c <ACC_Handler+0x8c>)
  401736:	6818      	ldr	r0, [r3, #0]
  401738:	b930      	cbnz	r0, 401748 <ACC_Handler+0x48>
					tc_start(TC0,0);
  40173a:	2100      	movs	r1, #0
  40173c:	4814      	ldr	r0, [pc, #80]	; (401790 <ACC_Handler+0x90>)
  40173e:	4b15      	ldr	r3, [pc, #84]	; (401794 <ACC_Handler+0x94>)
  401740:	4798      	blx	r3
					cycleEnded();
  401742:	4b15      	ldr	r3, [pc, #84]	; (401798 <ACC_Handler+0x98>)
  401744:	4798      	blx	r3
  401746:	bd08      	pop	{r3, pc}
					setDelayTimer(delay);
  401748:	4b14      	ldr	r3, [pc, #80]	; (40179c <ACC_Handler+0x9c>)
  40174a:	4798      	blx	r3
					tc_start(TC0,1);
  40174c:	2101      	movs	r1, #1
  40174e:	4810      	ldr	r0, [pc, #64]	; (401790 <ACC_Handler+0x90>)
  401750:	4b10      	ldr	r3, [pc, #64]	; (401794 <ACC_Handler+0x94>)
  401752:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401754:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401758:	4b11      	ldr	r3, [pc, #68]	; (4017a0 <ACC_Handler+0xa0>)
  40175a:	635a      	str	r2, [r3, #52]	; 0x34
  40175c:	bd08      	pop	{r3, pc}
			if(triggered)
  40175e:	4b07      	ldr	r3, [pc, #28]	; (40177c <ACC_Handler+0x7c>)
  401760:	781b      	ldrb	r3, [r3, #0]
  401762:	2b00      	cmp	r3, #0
  401764:	d0d3      	beq.n	40170e <ACC_Handler+0xe>
				triggered=false;
  401766:	2200      	movs	r2, #0
  401768:	4b04      	ldr	r3, [pc, #16]	; (40177c <ACC_Handler+0x7c>)
  40176a:	701a      	strb	r2, [r3, #0]
}
  40176c:	e7cf      	b.n	40170e <ACC_Handler+0xe>
  40176e:	bf00      	nop
  401770:	400bc000 	.word	0x400bc000
  401774:	00400475 	.word	0x00400475
  401778:	0040045b 	.word	0x0040045b
  40177c:	20008b88 	.word	0x20008b88
  401780:	20008b5c 	.word	0x20008b5c
  401784:	20008b80 	.word	0x20008b80
  401788:	20008b84 	.word	0x20008b84
  40178c:	20000008 	.word	0x20000008
  401790:	40090000 	.word	0x40090000
  401794:	0040095f 	.word	0x0040095f
  401798:	00400dd5 	.word	0x00400dd5
  40179c:	00400e39 	.word	0x00400e39
  4017a0:	400e1400 	.word	0x400e1400

004017a4 <TC1_Handler>:
void TC1_Handler(void){
  4017a4:	b538      	push	{r3, r4, r5, lr}
	startedSampling=true;
  4017a6:	2501      	movs	r5, #1
  4017a8:	4b0f      	ldr	r3, [pc, #60]	; (4017e8 <TC1_Handler+0x44>)
  4017aa:	701d      	strb	r5, [r3, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4017ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  4017b0:	4a0e      	ldr	r2, [pc, #56]	; (4017ec <TC1_Handler+0x48>)
  4017b2:	6313      	str	r3, [r2, #48]	; 0x30
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4017b4:	4a0e      	ldr	r2, [pc, #56]	; (4017f0 <TC1_Handler+0x4c>)
  4017b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4017ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4017be:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4017c2:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	tc_disable_interrupt(TC0, 1, TC_IER_CPCS);
  4017c6:	4c0b      	ldr	r4, [pc, #44]	; (4017f4 <TC1_Handler+0x50>)
  4017c8:	2210      	movs	r2, #16
  4017ca:	4629      	mov	r1, r5
  4017cc:	4620      	mov	r0, r4
  4017ce:	4b0a      	ldr	r3, [pc, #40]	; (4017f8 <TC1_Handler+0x54>)
  4017d0:	4798      	blx	r3
	tc_stop(TC0,1);
  4017d2:	4629      	mov	r1, r5
  4017d4:	4620      	mov	r0, r4
  4017d6:	4b09      	ldr	r3, [pc, #36]	; (4017fc <TC1_Handler+0x58>)
  4017d8:	4798      	blx	r3
	cycleEnded();
  4017da:	4b09      	ldr	r3, [pc, #36]	; (401800 <TC1_Handler+0x5c>)
  4017dc:	4798      	blx	r3
	tc_start(TC0,0);
  4017de:	2100      	movs	r1, #0
  4017e0:	4620      	mov	r0, r4
  4017e2:	4b08      	ldr	r3, [pc, #32]	; (401804 <TC1_Handler+0x60>)
  4017e4:	4798      	blx	r3
  4017e6:	bd38      	pop	{r3, r4, r5, pc}
  4017e8:	20008b80 	.word	0x20008b80
  4017ec:	400e1400 	.word	0x400e1400
  4017f0:	e000e100 	.word	0xe000e100
  4017f4:	40090000 	.word	0x40090000
  4017f8:	0040097f 	.word	0x0040097f
  4017fc:	00400967 	.word	0x00400967
  401800:	00400dd5 	.word	0x00400dd5
  401804:	0040095f 	.word	0x0040095f

00401808 <main>:
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
	dacc_write_conversion_data(DACC, 3100);
}

int main (void)
{
  401808:	b580      	push	{r7, lr}
  40180a:	b08c      	sub	sp, #48	; 0x30
	sysclk_init();
  40180c:	4b71      	ldr	r3, [pc, #452]	; (4019d4 <main+0x1cc>)
  40180e:	4798      	blx	r3
	board_init();
  401810:	4b71      	ldr	r3, [pc, #452]	; (4019d8 <main+0x1d0>)
  401812:	4798      	blx	r3
  401814:	2007      	movs	r0, #7
  401816:	f8df 8250 	ldr.w	r8, [pc, #592]	; 401a68 <main+0x260>
  40181a:	47c0      	blx	r8
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40181c:	4d6f      	ldr	r5, [pc, #444]	; (4019dc <main+0x1d4>)
  40181e:	4b70      	ldr	r3, [pc, #448]	; (4019e0 <main+0x1d8>)
  401820:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401822:	4a70      	ldr	r2, [pc, #448]	; (4019e4 <main+0x1dc>)
  401824:	4b70      	ldr	r3, [pc, #448]	; (4019e8 <main+0x1e0>)
  401826:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401828:	4a70      	ldr	r2, [pc, #448]	; (4019ec <main+0x1e4>)
  40182a:	4b71      	ldr	r3, [pc, #452]	; (4019f0 <main+0x1e8>)
  40182c:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40182e:	4c71      	ldr	r4, [pc, #452]	; (4019f4 <main+0x1ec>)
  401830:	9405      	str	r4, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
  401832:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401836:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
  401838:	f44f 6900 	mov.w	r9, #2048	; 0x800
  40183c:	f8cd 901c 	str.w	r9, [sp, #28]
  401840:	2007      	movs	r0, #7
  401842:	47c0      	blx	r8
		uart_init((Uart*)p_usart, &uart_settings);
  401844:	a905      	add	r1, sp, #20
  401846:	4628      	mov	r0, r5
  401848:	4b6b      	ldr	r3, [pc, #428]	; (4019f8 <main+0x1f0>)
  40184a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40184c:	4e6b      	ldr	r6, [pc, #428]	; (4019fc <main+0x1f4>)
  40184e:	6833      	ldr	r3, [r6, #0]
  401850:	2100      	movs	r1, #0
  401852:	6898      	ldr	r0, [r3, #8]
  401854:	4d6a      	ldr	r5, [pc, #424]	; (401a00 <main+0x1f8>)
  401856:	47a8      	blx	r5
	setbuf(stdin, NULL);
  401858:	6833      	ldr	r3, [r6, #0]
  40185a:	2100      	movs	r1, #0
  40185c:	6858      	ldr	r0, [r3, #4]
  40185e:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_DACC);
  401860:	2020      	movs	r0, #32
  401862:	47c0      	blx	r8
	dacc_reset(DACC);
  401864:	4d67      	ldr	r5, [pc, #412]	; (401a04 <main+0x1fc>)
  401866:	4628      	mov	r0, r5
  401868:	4b67      	ldr	r3, [pc, #412]	; (401a08 <main+0x200>)
  40186a:	4798      	blx	r3
	dacc_disable_trigger(DACC);
  40186c:	4628      	mov	r0, r5
  40186e:	4b67      	ldr	r3, [pc, #412]	; (401a0c <main+0x204>)
  401870:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
  401872:	2100      	movs	r1, #0
  401874:	4628      	mov	r0, r5
  401876:	4b66      	ldr	r3, [pc, #408]	; (401a10 <main+0x208>)
  401878:	4798      	blx	r3
	dacc_set_timing(DACC, 0, 0xf);
  40187a:	220f      	movs	r2, #15
  40187c:	2100      	movs	r1, #0
  40187e:	4628      	mov	r0, r5
  401880:	4b64      	ldr	r3, [pc, #400]	; (401a14 <main+0x20c>)
  401882:	4798      	blx	r3
	dacc_set_channel_selection(DACC, DACC_CHANNEL_0);
  401884:	2100      	movs	r1, #0
  401886:	4628      	mov	r0, r5
  401888:	4b63      	ldr	r3, [pc, #396]	; (401a18 <main+0x210>)
  40188a:	4798      	blx	r3
	dacc_enable_channel(DACC, DACC_CHANNEL_0);
  40188c:	2100      	movs	r1, #0
  40188e:	4628      	mov	r0, r5
  401890:	4b62      	ldr	r3, [pc, #392]	; (401a1c <main+0x214>)
  401892:	4798      	blx	r3
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  401894:	f44f 7185 	mov.w	r1, #266	; 0x10a
  401898:	4628      	mov	r0, r5
  40189a:	4b61      	ldr	r3, [pc, #388]	; (401a20 <main+0x218>)
  40189c:	4798      	blx	r3
	dacc_write_conversion_data(DACC, 3100);
  40189e:	f640 411c 	movw	r1, #3100	; 0xc1c
  4018a2:	4628      	mov	r0, r5
  4018a4:	4b5f      	ldr	r3, [pc, #380]	; (401a24 <main+0x21c>)
  4018a6:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4018a8:	4b5f      	ldr	r3, [pc, #380]	; (401a28 <main+0x220>)
  4018aa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4018ae:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	configure_console();
	configureDACC();
	
	ioport_set_pin_dir(delayPin,IOPORT_DIR_OUTPUT);
	g_afec0_sample_data = 0;
  4018b4:	2600      	movs	r6, #0
  4018b6:	4b5d      	ldr	r3, [pc, #372]	; (401a2c <main+0x224>)
  4018b8:	801e      	strh	r6, [r3, #0]
	afec_enable(AFEC0);
  4018ba:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
  4018be:	4628      	mov	r0, r5
  4018c0:	4b5b      	ldr	r3, [pc, #364]	; (401a30 <main+0x228>)
  4018c2:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  4018c4:	a805      	add	r0, sp, #20
  4018c6:	4b5b      	ldr	r3, [pc, #364]	; (401a34 <main+0x22c>)
  4018c8:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4018ca:	a802      	add	r0, sp, #8
  4018cc:	4b5a      	ldr	r3, [pc, #360]	; (401a38 <main+0x230>)
  4018ce:	4798      	blx	r3
		afec_init(AFEC0, &afec_cfg);
  4018d0:	a905      	add	r1, sp, #20
  4018d2:	4628      	mov	r0, r5
  4018d4:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 401a8c <main+0x284>
  4018d8:	47d0      	blx	sl
		afec_init(AFEC1, &afec_cfg);
  4018da:	4f58      	ldr	r7, [pc, #352]	; (401a3c <main+0x234>)
  4018dc:	a905      	add	r1, sp, #20
  4018de:	4638      	mov	r0, r7
  4018e0:	47d0      	blx	sl
		afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  4018e2:	aa02      	add	r2, sp, #8
  4018e4:	2106      	movs	r1, #6
  4018e6:	4628      	mov	r0, r5
  4018e8:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 401a90 <main+0x288>
  4018ec:	47d0      	blx	sl
		afec_ch_set_config(AFEC1, AFEC_CHANNEL_0, &afec_ch_cfg);
  4018ee:	aa02      	add	r2, sp, #8
  4018f0:	4631      	mov	r1, r6
  4018f2:	4638      	mov	r0, r7
  4018f4:	47d0      	blx	sl
	afec->AFEC_CSELR = afec_ch;
  4018f6:	667e      	str	r6, [r7, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4018f8:	f8c7 906c 	str.w	r9, [r7, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  4018fc:	2306      	movs	r3, #6
  4018fe:	666b      	str	r3, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  401900:	f8c5 906c 	str.w	r9, [r5, #108]	; 0x6c
	reg = afec->AFEC_MR;
  401904:	687b      	ldr	r3, [r7, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  401906:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  40190a:	607b      	str	r3, [r7, #4]
    uint32_t ul_div = 0;
  40190c:	9603      	str	r6, [sp, #12]
	uint32_t ul_tc_clks = 0;
  40190e:	af0c      	add	r7, sp, #48	; 0x30
  401910:	f847 6d20 	str.w	r6, [r7, #-32]!
	pmc_enable_periph_clk(ID_TC0);														// Enable peripheral clock of timer counter 0
  401914:	2015      	movs	r0, #21
  401916:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_TC1);
  401918:	2016      	movs	r0, #22
  40191a:	47c0      	blx	r8
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  40191c:	9400      	str	r4, [sp, #0]
  40191e:	463b      	mov	r3, r7
  401920:	aa03      	add	r2, sp, #12
  401922:	4621      	mov	r1, r4
  401924:	4846      	ldr	r0, [pc, #280]	; (401a40 <main+0x238>)
  401926:	4f47      	ldr	r7, [pc, #284]	; (401a44 <main+0x23c>)
  401928:	47b8      	blx	r7
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  40192a:	4f47      	ldr	r7, [pc, #284]	; (401a48 <main+0x240>)
  40192c:	9a04      	ldr	r2, [sp, #16]
  40192e:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  401932:	4631      	mov	r1, r6
  401934:	4638      	mov	r0, r7
  401936:	4b45      	ldr	r3, [pc, #276]	; (401a4c <main+0x244>)
  401938:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  40193a:	9b03      	ldr	r3, [sp, #12]
  40193c:	fbb4 f3f3 	udiv	r3, r4, r3
  401940:	4a43      	ldr	r2, [pc, #268]	; (401a50 <main+0x248>)
  401942:	fba2 2303 	umull	r2, r3, r2, r3
  401946:	0c5a      	lsrs	r2, r3, #17
  401948:	617a      	str	r2, [r7, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  40194a:	0c1b      	lsrs	r3, r3, #16
  40194c:	61fb      	str	r3, [r7, #28]
	reg = afec->AFEC_MR;
  40194e:	686b      	ldr	r3, [r5, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  401950:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  401954:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  401958:	606b      	str	r3, [r5, #4]
		if(delay!=0){
  40195a:	4b3e      	ldr	r3, [pc, #248]	; (401a54 <main+0x24c>)
  40195c:	6818      	ldr	r0, [r3, #0]
  40195e:	b108      	cbz	r0, 401964 <main+0x15c>
			setDelayTimer(delay);
  401960:	4b3d      	ldr	r3, [pc, #244]	; (401a58 <main+0x250>)
  401962:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401964:	2301      	movs	r3, #1
  401966:	4a35      	ldr	r2, [pc, #212]	; (401a3c <main+0x234>)
  401968:	6153      	str	r3, [r2, #20]
  40196a:	4c3c      	ldr	r4, [pc, #240]	; (401a5c <main+0x254>)
  40196c:	2240      	movs	r2, #64	; 0x40
  40196e:	6162      	str	r2, [r4, #20]
		afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  401970:	4a3b      	ldr	r2, [pc, #236]	; (401a60 <main+0x258>)
  401972:	2110      	movs	r1, #16
  401974:	4620      	mov	r0, r4
  401976:	4d3b      	ldr	r5, [pc, #236]	; (401a64 <main+0x25c>)
  401978:	47a8      	blx	r5
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  40197a:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  40197c:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  40197e:	6863      	ldr	r3, [r4, #4]
  401980:	f013 0f80 	tst.w	r3, #128	; 0x80
  401984:	d101      	bne.n	40198a <main+0x182>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  401986:	2208      	movs	r2, #8
  401988:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  40198a:	4b34      	ldr	r3, [pc, #208]	; (401a5c <main+0x254>)
  40198c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  40198e:	2a00      	cmp	r2, #0
  401990:	dafc      	bge.n	40198c <main+0x184>
	g_max_digital = MAX_DIGITAL_12_BIT;
	set_afec_test();
	pmc_enable_periph_clk(ID_ACC);
  401992:	2021      	movs	r0, #33	; 0x21
  401994:	4b34      	ldr	r3, [pc, #208]	; (401a68 <main+0x260>)
  401996:	4798      	blx	r3
	acc_init(ACC, ACC_MR_SELPLUS_AD7, ACC_MR_SELMINUS_DAC1,
  401998:	4c34      	ldr	r4, [pc, #208]	; (401a6c <main+0x264>)
  40199a:	2300      	movs	r3, #0
  40199c:	9300      	str	r3, [sp, #0]
  40199e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4019a2:	2203      	movs	r2, #3
  4019a4:	2170      	movs	r1, #112	; 0x70
  4019a6:	4620      	mov	r0, r4
  4019a8:	4d31      	ldr	r5, [pc, #196]	; (401a70 <main+0x268>)
  4019aa:	47a8      	blx	r5
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4019ac:	2202      	movs	r2, #2
  4019ae:	4b31      	ldr	r3, [pc, #196]	; (401a74 <main+0x26c>)
  4019b0:	605a      	str	r2, [r3, #4]
	ACC_MR_EDGETYP_ANY, ACC_MR_INV_DIS);
	NVIC_EnableIRQ(ACC_IRQn);
	acc_enable_interrupt(ACC);	
  4019b2:	4620      	mov	r0, r4
  4019b4:	4b30      	ldr	r3, [pc, #192]	; (401a78 <main+0x270>)
  4019b6:	4798      	blx	r3
	while (1) {
		if(getbuffersFilled()==100){
  4019b8:	4d30      	ldr	r5, [pc, #192]	; (401a7c <main+0x274>)
			//break;
		}
					
		if(fullBuffer){
  4019ba:	4c31      	ldr	r4, [pc, #196]	; (401a80 <main+0x278>)
			fullBuffer=false;
			show_beam_parameters(getFilledBuffer());
  4019bc:	4e31      	ldr	r6, [pc, #196]	; (401a84 <main+0x27c>)
		if(getbuffersFilled()==100){
  4019be:	47a8      	blx	r5
		if(fullBuffer){
  4019c0:	7823      	ldrb	r3, [r4, #0]
  4019c2:	2b00      	cmp	r3, #0
  4019c4:	d0fb      	beq.n	4019be <main+0x1b6>
			fullBuffer=false;
  4019c6:	2300      	movs	r3, #0
  4019c8:	7023      	strb	r3, [r4, #0]
			show_beam_parameters(getFilledBuffer());
  4019ca:	47b0      	blx	r6
  4019cc:	4b2e      	ldr	r3, [pc, #184]	; (401a88 <main+0x280>)
  4019ce:	4798      	blx	r3
  4019d0:	e7f5      	b.n	4019be <main+0x1b6>
  4019d2:	bf00      	nop
  4019d4:	00400165 	.word	0x00400165
  4019d8:	00400389 	.word	0x00400389
  4019dc:	400e0600 	.word	0x400e0600
  4019e0:	20008bd0 	.word	0x20008bd0
  4019e4:	00400f41 	.word	0x00400f41
  4019e8:	20008bcc 	.word	0x20008bcc
  4019ec:	00400eb9 	.word	0x00400eb9
  4019f0:	20008bc8 	.word	0x20008bc8
  4019f4:	05b8d800 	.word	0x05b8d800
  4019f8:	004009f7 	.word	0x004009f7
  4019fc:	20000010 	.word	0x20000010
  401a00:	00403aa1 	.word	0x00403aa1
  401a04:	400b8000 	.word	0x400b8000
  401a08:	00400771 	.word	0x00400771
  401a0c:	00400777 	.word	0x00400777
  401a10:	00400781 	.word	0x00400781
  401a14:	004007c5 	.word	0x004007c5
  401a18:	004007ad 	.word	0x004007ad
  401a1c:	004007ed 	.word	0x004007ed
  401a20:	00400801 	.word	0x00400801
  401a24:	004007a9 	.word	0x004007a9
  401a28:	400e1400 	.word	0x400e1400
  401a2c:	20008c8c 	.word	0x20008c8c
  401a30:	0040070d 	.word	0x0040070d
  401a34:	00400545 	.word	0x00400545
  401a38:	00400575 	.word	0x00400575
  401a3c:	400b4000 	.word	0x400b4000
  401a40:	0003d090 	.word	0x0003d090
  401a44:	00400987 	.word	0x00400987
  401a48:	40090000 	.word	0x40090000
  401a4c:	00400945 	.word	0x00400945
  401a50:	431bde83 	.word	0x431bde83
  401a54:	20000008 	.word	0x20000008
  401a58:	00400e39 	.word	0x00400e39
  401a5c:	400b0000 	.word	0x400b0000
  401a60:	00400fc1 	.word	0x00400fc1
  401a64:	0040068d 	.word	0x0040068d
  401a68:	004008f1 	.word	0x004008f1
  401a6c:	400bc000 	.word	0x400bc000
  401a70:	00400421 	.word	0x00400421
  401a74:	e000e100 	.word	0xe000e100
  401a78:	0040046f 	.word	0x0040046f
  401a7c:	00400e0d 	.word	0x00400e0d
  401a80:	20008b5c 	.word	0x20008b5c
  401a84:	00400e19 	.word	0x00400e19
  401a88:	004014f5 	.word	0x004014f5
  401a8c:	00400581 	.word	0x00400581
  401a90:	00400515 	.word	0x00400515

00401a94 <pow>:
  401a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a98:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 401d8c <pow+0x2f8>
  401a9c:	b08d      	sub	sp, #52	; 0x34
  401a9e:	4606      	mov	r6, r0
  401aa0:	460f      	mov	r7, r1
  401aa2:	4614      	mov	r4, r2
  401aa4:	461d      	mov	r5, r3
  401aa6:	f000 f9d3 	bl	401e50 <__ieee754_pow>
  401aaa:	f999 8000 	ldrsb.w	r8, [r9]
  401aae:	f1b8 3fff 	cmp.w	r8, #4294967295
  401ab2:	e9cd 0100 	strd	r0, r1, [sp]
  401ab6:	d036      	beq.n	401b26 <pow+0x92>
  401ab8:	4622      	mov	r2, r4
  401aba:	462b      	mov	r3, r5
  401abc:	4620      	mov	r0, r4
  401abe:	4629      	mov	r1, r5
  401ac0:	f001 fd3e 	bl	403540 <__aeabi_dcmpun>
  401ac4:	4683      	mov	fp, r0
  401ac6:	bb70      	cbnz	r0, 401b26 <pow+0x92>
  401ac8:	4632      	mov	r2, r6
  401aca:	463b      	mov	r3, r7
  401acc:	4630      	mov	r0, r6
  401ace:	4639      	mov	r1, r7
  401ad0:	f001 fd36 	bl	403540 <__aeabi_dcmpun>
  401ad4:	2200      	movs	r2, #0
  401ad6:	4682      	mov	sl, r0
  401ad8:	2300      	movs	r3, #0
  401ada:	2800      	cmp	r0, #0
  401adc:	f040 80a0 	bne.w	401c20 <pow+0x18c>
  401ae0:	4630      	mov	r0, r6
  401ae2:	4639      	mov	r1, r7
  401ae4:	f001 fcfa 	bl	4034dc <__aeabi_dcmpeq>
  401ae8:	b310      	cbz	r0, 401b30 <pow+0x9c>
  401aea:	2200      	movs	r2, #0
  401aec:	2300      	movs	r3, #0
  401aee:	4620      	mov	r0, r4
  401af0:	4629      	mov	r1, r5
  401af2:	f001 fcf3 	bl	4034dc <__aeabi_dcmpeq>
  401af6:	4683      	mov	fp, r0
  401af8:	2800      	cmp	r0, #0
  401afa:	d06a      	beq.n	401bd2 <pow+0x13e>
  401afc:	2201      	movs	r2, #1
  401afe:	4b9c      	ldr	r3, [pc, #624]	; (401d70 <pow+0x2dc>)
  401b00:	9202      	str	r2, [sp, #8]
  401b02:	2100      	movs	r1, #0
  401b04:	2200      	movs	r2, #0
  401b06:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  401b0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401b0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401b12:	e9cd 1208 	strd	r1, r2, [sp, #32]
  401b16:	9303      	str	r3, [sp, #12]
  401b18:	f1b8 0f00 	cmp.w	r8, #0
  401b1c:	d045      	beq.n	401baa <pow+0x116>
  401b1e:	4c95      	ldr	r4, [pc, #596]	; (401d74 <pow+0x2e0>)
  401b20:	2300      	movs	r3, #0
  401b22:	e9cd 3400 	strd	r3, r4, [sp]
  401b26:	e9dd 0100 	ldrd	r0, r1, [sp]
  401b2a:	b00d      	add	sp, #52	; 0x34
  401b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b30:	e9dd 0100 	ldrd	r0, r1, [sp]
  401b34:	f000 ff92 	bl	402a5c <finite>
  401b38:	4680      	mov	r8, r0
  401b3a:	2800      	cmp	r0, #0
  401b3c:	f000 808b 	beq.w	401c56 <pow+0x1c2>
  401b40:	f04f 0a00 	mov.w	sl, #0
  401b44:	f04f 0b00 	mov.w	fp, #0
  401b48:	4652      	mov	r2, sl
  401b4a:	465b      	mov	r3, fp
  401b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
  401b50:	f001 fcc4 	bl	4034dc <__aeabi_dcmpeq>
  401b54:	2800      	cmp	r0, #0
  401b56:	d0e6      	beq.n	401b26 <pow+0x92>
  401b58:	4630      	mov	r0, r6
  401b5a:	4639      	mov	r1, r7
  401b5c:	f000 ff7e 	bl	402a5c <finite>
  401b60:	2800      	cmp	r0, #0
  401b62:	d0e0      	beq.n	401b26 <pow+0x92>
  401b64:	4620      	mov	r0, r4
  401b66:	4629      	mov	r1, r5
  401b68:	f000 ff78 	bl	402a5c <finite>
  401b6c:	2800      	cmp	r0, #0
  401b6e:	d0da      	beq.n	401b26 <pow+0x92>
  401b70:	f999 3000 	ldrsb.w	r3, [r9]
  401b74:	4a7e      	ldr	r2, [pc, #504]	; (401d70 <pow+0x2dc>)
  401b76:	9203      	str	r2, [sp, #12]
  401b78:	2104      	movs	r1, #4
  401b7a:	2200      	movs	r2, #0
  401b7c:	2b02      	cmp	r3, #2
  401b7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401b82:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401b86:	e9cd ab08 	strd	sl, fp, [sp, #32]
  401b8a:	9102      	str	r1, [sp, #8]
  401b8c:	920a      	str	r2, [sp, #40]	; 0x28
  401b8e:	d003      	beq.n	401b98 <pow+0x104>
  401b90:	a802      	add	r0, sp, #8
  401b92:	f000 ff69 	bl	402a68 <matherr>
  401b96:	b968      	cbnz	r0, 401bb4 <pow+0x120>
  401b98:	f001 ff06 	bl	4039a8 <__errno>
  401b9c:	2322      	movs	r3, #34	; 0x22
  401b9e:	6003      	str	r3, [r0, #0]
  401ba0:	e008      	b.n	401bb4 <pow+0x120>
  401ba2:	2300      	movs	r3, #0
  401ba4:	2400      	movs	r4, #0
  401ba6:	e9cd 3408 	strd	r3, r4, [sp, #32]
  401baa:	a802      	add	r0, sp, #8
  401bac:	f000 ff5c 	bl	402a68 <matherr>
  401bb0:	2800      	cmp	r0, #0
  401bb2:	d030      	beq.n	401c16 <pow+0x182>
  401bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401bb6:	b11b      	cbz	r3, 401bc0 <pow+0x12c>
  401bb8:	f001 fef6 	bl	4039a8 <__errno>
  401bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401bbe:	6003      	str	r3, [r0, #0]
  401bc0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
  401bc4:	e9cd 3400 	strd	r3, r4, [sp]
  401bc8:	e9dd 0100 	ldrd	r0, r1, [sp]
  401bcc:	b00d      	add	sp, #52	; 0x34
  401bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bd2:	4620      	mov	r0, r4
  401bd4:	4629      	mov	r1, r5
  401bd6:	f000 ff41 	bl	402a5c <finite>
  401bda:	2800      	cmp	r0, #0
  401bdc:	d0a3      	beq.n	401b26 <pow+0x92>
  401bde:	2200      	movs	r2, #0
  401be0:	2300      	movs	r3, #0
  401be2:	4620      	mov	r0, r4
  401be4:	4629      	mov	r1, r5
  401be6:	f001 fc83 	bl	4034f0 <__aeabi_dcmplt>
  401bea:	2800      	cmp	r0, #0
  401bec:	d09b      	beq.n	401b26 <pow+0x92>
  401bee:	f999 3000 	ldrsb.w	r3, [r9]
  401bf2:	4a5f      	ldr	r2, [pc, #380]	; (401d70 <pow+0x2dc>)
  401bf4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401bf8:	2101      	movs	r1, #1
  401bfa:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401bfe:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401c02:	9102      	str	r1, [sp, #8]
  401c04:	9203      	str	r2, [sp, #12]
  401c06:	2b00      	cmp	r3, #0
  401c08:	d0cb      	beq.n	401ba2 <pow+0x10e>
  401c0a:	495b      	ldr	r1, [pc, #364]	; (401d78 <pow+0x2e4>)
  401c0c:	2000      	movs	r0, #0
  401c0e:	2b02      	cmp	r3, #2
  401c10:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401c14:	d1c9      	bne.n	401baa <pow+0x116>
  401c16:	f001 fec7 	bl	4039a8 <__errno>
  401c1a:	2321      	movs	r3, #33	; 0x21
  401c1c:	6003      	str	r3, [r0, #0]
  401c1e:	e7c9      	b.n	401bb4 <pow+0x120>
  401c20:	4620      	mov	r0, r4
  401c22:	4629      	mov	r1, r5
  401c24:	f001 fc5a 	bl	4034dc <__aeabi_dcmpeq>
  401c28:	2800      	cmp	r0, #0
  401c2a:	f43f af7c 	beq.w	401b26 <pow+0x92>
  401c2e:	4b51      	ldr	r3, [pc, #324]	; (401d74 <pow+0x2e0>)
  401c30:	494f      	ldr	r1, [pc, #316]	; (401d70 <pow+0x2dc>)
  401c32:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401c36:	2001      	movs	r0, #1
  401c38:	2200      	movs	r2, #0
  401c3a:	f1b8 0f02 	cmp.w	r8, #2
  401c3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401c42:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401c46:	9002      	str	r0, [sp, #8]
  401c48:	9103      	str	r1, [sp, #12]
  401c4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401c4e:	d1ac      	bne.n	401baa <pow+0x116>
  401c50:	e9cd 2300 	strd	r2, r3, [sp]
  401c54:	e767      	b.n	401b26 <pow+0x92>
  401c56:	4630      	mov	r0, r6
  401c58:	4639      	mov	r1, r7
  401c5a:	f000 feff 	bl	402a5c <finite>
  401c5e:	2800      	cmp	r0, #0
  401c60:	f43f af6e 	beq.w	401b40 <pow+0xac>
  401c64:	4620      	mov	r0, r4
  401c66:	4629      	mov	r1, r5
  401c68:	f000 fef8 	bl	402a5c <finite>
  401c6c:	2800      	cmp	r0, #0
  401c6e:	f43f af67 	beq.w	401b40 <pow+0xac>
  401c72:	e9dd 2300 	ldrd	r2, r3, [sp]
  401c76:	4610      	mov	r0, r2
  401c78:	4619      	mov	r1, r3
  401c7a:	f001 fc61 	bl	403540 <__aeabi_dcmpun>
  401c7e:	2800      	cmp	r0, #0
  401c80:	d158      	bne.n	401d34 <pow+0x2a0>
  401c82:	2303      	movs	r3, #3
  401c84:	f999 8000 	ldrsb.w	r8, [r9]
  401c88:	9302      	str	r3, [sp, #8]
  401c8a:	4b39      	ldr	r3, [pc, #228]	; (401d70 <pow+0x2dc>)
  401c8c:	900a      	str	r0, [sp, #40]	; 0x28
  401c8e:	9303      	str	r3, [sp, #12]
  401c90:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401c94:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401c98:	2200      	movs	r2, #0
  401c9a:	2300      	movs	r3, #0
  401c9c:	4630      	mov	r0, r6
  401c9e:	4639      	mov	r1, r7
  401ca0:	f1b8 0f00 	cmp.w	r8, #0
  401ca4:	d126      	bne.n	401cf4 <pow+0x260>
  401ca6:	4f35      	ldr	r7, [pc, #212]	; (401d7c <pow+0x2e8>)
  401ca8:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
  401cac:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401cb0:	f001 fc1e 	bl	4034f0 <__aeabi_dcmplt>
  401cb4:	2800      	cmp	r0, #0
  401cb6:	f43f af6b 	beq.w	401b90 <pow+0xfc>
  401cba:	2200      	movs	r2, #0
  401cbc:	4b30      	ldr	r3, [pc, #192]	; (401d80 <pow+0x2ec>)
  401cbe:	4620      	mov	r0, r4
  401cc0:	4629      	mov	r1, r5
  401cc2:	f001 f9a3 	bl	40300c <__aeabi_dmul>
  401cc6:	4604      	mov	r4, r0
  401cc8:	460d      	mov	r5, r1
  401cca:	f000 fed5 	bl	402a78 <rint>
  401cce:	4602      	mov	r2, r0
  401cd0:	460b      	mov	r3, r1
  401cd2:	4620      	mov	r0, r4
  401cd4:	4629      	mov	r1, r5
  401cd6:	f001 fc01 	bl	4034dc <__aeabi_dcmpeq>
  401cda:	bb40      	cbnz	r0, 401d2e <pow+0x29a>
  401cdc:	4b29      	ldr	r3, [pc, #164]	; (401d84 <pow+0x2f0>)
  401cde:	f999 8000 	ldrsb.w	r8, [r9]
  401ce2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  401ce6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401cea:	f1b8 0f02 	cmp.w	r8, #2
  401cee:	f47f af4f 	bne.w	401b90 <pow+0xfc>
  401cf2:	e751      	b.n	401b98 <pow+0x104>
  401cf4:	4f24      	ldr	r7, [pc, #144]	; (401d88 <pow+0x2f4>)
  401cf6:	2600      	movs	r6, #0
  401cf8:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401cfc:	f001 fbf8 	bl	4034f0 <__aeabi_dcmplt>
  401d00:	2800      	cmp	r0, #0
  401d02:	d0f2      	beq.n	401cea <pow+0x256>
  401d04:	2200      	movs	r2, #0
  401d06:	4b1e      	ldr	r3, [pc, #120]	; (401d80 <pow+0x2ec>)
  401d08:	4620      	mov	r0, r4
  401d0a:	4629      	mov	r1, r5
  401d0c:	f001 f97e 	bl	40300c <__aeabi_dmul>
  401d10:	4604      	mov	r4, r0
  401d12:	460d      	mov	r5, r1
  401d14:	f000 feb0 	bl	402a78 <rint>
  401d18:	4602      	mov	r2, r0
  401d1a:	460b      	mov	r3, r1
  401d1c:	4620      	mov	r0, r4
  401d1e:	4629      	mov	r1, r5
  401d20:	f001 fbdc 	bl	4034dc <__aeabi_dcmpeq>
  401d24:	b918      	cbnz	r0, 401d2e <pow+0x29a>
  401d26:	4b14      	ldr	r3, [pc, #80]	; (401d78 <pow+0x2e4>)
  401d28:	2200      	movs	r2, #0
  401d2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401d2e:	f999 8000 	ldrsb.w	r8, [r9]
  401d32:	e7da      	b.n	401cea <pow+0x256>
  401d34:	f999 9000 	ldrsb.w	r9, [r9]
  401d38:	4b0d      	ldr	r3, [pc, #52]	; (401d70 <pow+0x2dc>)
  401d3a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  401d3e:	2201      	movs	r2, #1
  401d40:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401d44:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401d48:	9202      	str	r2, [sp, #8]
  401d4a:	9303      	str	r3, [sp, #12]
  401d4c:	f1b9 0f00 	cmp.w	r9, #0
  401d50:	f43f af27 	beq.w	401ba2 <pow+0x10e>
  401d54:	2200      	movs	r2, #0
  401d56:	2300      	movs	r3, #0
  401d58:	4610      	mov	r0, r2
  401d5a:	4619      	mov	r1, r3
  401d5c:	f001 fa80 	bl	403260 <__aeabi_ddiv>
  401d60:	f1b9 0f02 	cmp.w	r9, #2
  401d64:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401d68:	f43f af55 	beq.w	401c16 <pow+0x182>
  401d6c:	e71d      	b.n	401baa <pow+0x116>
  401d6e:	bf00      	nop
  401d70:	00404aac 	.word	0x00404aac
  401d74:	3ff00000 	.word	0x3ff00000
  401d78:	fff00000 	.word	0xfff00000
  401d7c:	47efffff 	.word	0x47efffff
  401d80:	3fe00000 	.word	0x3fe00000
  401d84:	c7efffff 	.word	0xc7efffff
  401d88:	7ff00000 	.word	0x7ff00000
  401d8c:	2000000e 	.word	0x2000000e

00401d90 <sqrt>:
  401d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d94:	b08b      	sub	sp, #44	; 0x2c
  401d96:	4604      	mov	r4, r0
  401d98:	460d      	mov	r5, r1
  401d9a:	f000 fd9f 	bl	4028dc <__ieee754_sqrt>
  401d9e:	4b29      	ldr	r3, [pc, #164]	; (401e44 <sqrt+0xb4>)
  401da0:	f993 a000 	ldrsb.w	sl, [r3]
  401da4:	f1ba 3fff 	cmp.w	sl, #4294967295
  401da8:	4606      	mov	r6, r0
  401daa:	460f      	mov	r7, r1
  401dac:	d012      	beq.n	401dd4 <sqrt+0x44>
  401dae:	4622      	mov	r2, r4
  401db0:	462b      	mov	r3, r5
  401db2:	4620      	mov	r0, r4
  401db4:	4629      	mov	r1, r5
  401db6:	f001 fbc3 	bl	403540 <__aeabi_dcmpun>
  401dba:	4683      	mov	fp, r0
  401dbc:	b950      	cbnz	r0, 401dd4 <sqrt+0x44>
  401dbe:	f04f 0800 	mov.w	r8, #0
  401dc2:	f04f 0900 	mov.w	r9, #0
  401dc6:	4642      	mov	r2, r8
  401dc8:	464b      	mov	r3, r9
  401dca:	4620      	mov	r0, r4
  401dcc:	4629      	mov	r1, r5
  401dce:	f001 fb8f 	bl	4034f0 <__aeabi_dcmplt>
  401dd2:	b920      	cbnz	r0, 401dde <sqrt+0x4e>
  401dd4:	4630      	mov	r0, r6
  401dd6:	4639      	mov	r1, r7
  401dd8:	b00b      	add	sp, #44	; 0x2c
  401dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dde:	4b1a      	ldr	r3, [pc, #104]	; (401e48 <sqrt+0xb8>)
  401de0:	f8cd b020 	str.w	fp, [sp, #32]
  401de4:	2201      	movs	r2, #1
  401de6:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401dea:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401dee:	e88d 000c 	stmia.w	sp, {r2, r3}
  401df2:	f1ba 0f00 	cmp.w	sl, #0
  401df6:	d017      	beq.n	401e28 <sqrt+0x98>
  401df8:	4642      	mov	r2, r8
  401dfa:	464b      	mov	r3, r9
  401dfc:	4640      	mov	r0, r8
  401dfe:	4649      	mov	r1, r9
  401e00:	f001 fa2e 	bl	403260 <__aeabi_ddiv>
  401e04:	f1ba 0f02 	cmp.w	sl, #2
  401e08:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401e0c:	d10e      	bne.n	401e2c <sqrt+0x9c>
  401e0e:	f001 fdcb 	bl	4039a8 <__errno>
  401e12:	2321      	movs	r3, #33	; 0x21
  401e14:	6003      	str	r3, [r0, #0]
  401e16:	9b08      	ldr	r3, [sp, #32]
  401e18:	b973      	cbnz	r3, 401e38 <sqrt+0xa8>
  401e1a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  401e1e:	4630      	mov	r0, r6
  401e20:	4639      	mov	r1, r7
  401e22:	b00b      	add	sp, #44	; 0x2c
  401e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e28:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401e2c:	4668      	mov	r0, sp
  401e2e:	f000 fe1b 	bl	402a68 <matherr>
  401e32:	2800      	cmp	r0, #0
  401e34:	d1ef      	bne.n	401e16 <sqrt+0x86>
  401e36:	e7ea      	b.n	401e0e <sqrt+0x7e>
  401e38:	f001 fdb6 	bl	4039a8 <__errno>
  401e3c:	9b08      	ldr	r3, [sp, #32]
  401e3e:	6003      	str	r3, [r0, #0]
  401e40:	e7eb      	b.n	401e1a <sqrt+0x8a>
  401e42:	bf00      	nop
  401e44:	2000000e 	.word	0x2000000e
  401e48:	00404ab0 	.word	0x00404ab0
  401e4c:	00000000 	.word	0x00000000

00401e50 <__ieee754_pow>:
  401e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e54:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  401e58:	ea57 0402 	orrs.w	r4, r7, r2
  401e5c:	b093      	sub	sp, #76	; 0x4c
  401e5e:	d037      	beq.n	401ed0 <__ieee754_pow+0x80>
  401e60:	4c67      	ldr	r4, [pc, #412]	; (402000 <__ieee754_pow+0x1b0>)
  401e62:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  401e66:	42a6      	cmp	r6, r4
  401e68:	4683      	mov	fp, r0
  401e6a:	460d      	mov	r5, r1
  401e6c:	dc29      	bgt.n	401ec2 <__ieee754_pow+0x72>
  401e6e:	469a      	mov	sl, r3
  401e70:	4696      	mov	lr, r2
  401e72:	d025      	beq.n	401ec0 <__ieee754_pow+0x70>
  401e74:	42a7      	cmp	r7, r4
  401e76:	dc24      	bgt.n	401ec2 <__ieee754_pow+0x72>
  401e78:	4c61      	ldr	r4, [pc, #388]	; (402000 <__ieee754_pow+0x1b0>)
  401e7a:	42a7      	cmp	r7, r4
  401e7c:	d079      	beq.n	401f72 <__ieee754_pow+0x122>
  401e7e:	2d00      	cmp	r5, #0
  401e80:	4689      	mov	r9, r1
  401e82:	4680      	mov	r8, r0
  401e84:	e9cd 2300 	strd	r2, r3, [sp]
  401e88:	db77      	blt.n	401f7a <__ieee754_pow+0x12a>
  401e8a:	2400      	movs	r4, #0
  401e8c:	f1be 0f00 	cmp.w	lr, #0
  401e90:	d12c      	bne.n	401eec <__ieee754_pow+0x9c>
  401e92:	4b5b      	ldr	r3, [pc, #364]	; (402000 <__ieee754_pow+0x1b0>)
  401e94:	429f      	cmp	r7, r3
  401e96:	f000 808b 	beq.w	401fb0 <__ieee754_pow+0x160>
  401e9a:	4b5a      	ldr	r3, [pc, #360]	; (402004 <__ieee754_pow+0x1b4>)
  401e9c:	429f      	cmp	r7, r3
  401e9e:	d061      	beq.n	401f64 <__ieee754_pow+0x114>
  401ea0:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
  401ea4:	f000 83ba 	beq.w	40261c <__ieee754_pow+0x7cc>
  401ea8:	4b57      	ldr	r3, [pc, #348]	; (402008 <__ieee754_pow+0x1b8>)
  401eaa:	459a      	cmp	sl, r3
  401eac:	d11e      	bne.n	401eec <__ieee754_pow+0x9c>
  401eae:	2d00      	cmp	r5, #0
  401eb0:	db1c      	blt.n	401eec <__ieee754_pow+0x9c>
  401eb2:	4640      	mov	r0, r8
  401eb4:	4649      	mov	r1, r9
  401eb6:	b013      	add	sp, #76	; 0x4c
  401eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ebc:	f000 bd0e 	b.w	4028dc <__ieee754_sqrt>
  401ec0:	b158      	cbz	r0, 401eda <__ieee754_pow+0x8a>
  401ec2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  401ec6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  401eca:	ea56 030b 	orrs.w	r3, r6, fp
  401ece:	d106      	bne.n	401ede <__ieee754_pow+0x8e>
  401ed0:	494c      	ldr	r1, [pc, #304]	; (402004 <__ieee754_pow+0x1b4>)
  401ed2:	2000      	movs	r0, #0
  401ed4:	b013      	add	sp, #76	; 0x4c
  401ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401eda:	42b7      	cmp	r7, r6
  401edc:	ddcc      	ble.n	401e78 <__ieee754_pow+0x28>
  401ede:	484b      	ldr	r0, [pc, #300]	; (40200c <__ieee754_pow+0x1bc>)
  401ee0:	b013      	add	sp, #76	; 0x4c
  401ee2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ee6:	f000 bdc1 	b.w	402a6c <nan>
  401eea:	2400      	movs	r4, #0
  401eec:	4640      	mov	r0, r8
  401eee:	4649      	mov	r1, r9
  401ef0:	f000 fdb0 	bl	402a54 <fabs>
  401ef4:	f1bb 0f00 	cmp.w	fp, #0
  401ef8:	d119      	bne.n	401f2e <__ieee754_pow+0xde>
  401efa:	b126      	cbz	r6, 401f06 <__ieee754_pow+0xb6>
  401efc:	4b41      	ldr	r3, [pc, #260]	; (402004 <__ieee754_pow+0x1b4>)
  401efe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
  401f02:	429a      	cmp	r2, r3
  401f04:	d113      	bne.n	401f2e <__ieee754_pow+0xde>
  401f06:	f1ba 0f00 	cmp.w	sl, #0
  401f0a:	f2c0 83bc 	blt.w	402686 <__ieee754_pow+0x836>
  401f0e:	2d00      	cmp	r5, #0
  401f10:	dae0      	bge.n	401ed4 <__ieee754_pow+0x84>
  401f12:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  401f16:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  401f1a:	ea56 0304 	orrs.w	r3, r6, r4
  401f1e:	f000 848f 	beq.w	402840 <__ieee754_pow+0x9f0>
  401f22:	2c01      	cmp	r4, #1
  401f24:	d1d6      	bne.n	401ed4 <__ieee754_pow+0x84>
  401f26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  401f2a:	4619      	mov	r1, r3
  401f2c:	e7d2      	b.n	401ed4 <__ieee754_pow+0x84>
  401f2e:	0fed      	lsrs	r5, r5, #31
  401f30:	3d01      	subs	r5, #1
  401f32:	ea54 0305 	orrs.w	r3, r4, r5
  401f36:	d04e      	beq.n	401fd6 <__ieee754_pow+0x186>
  401f38:	4b35      	ldr	r3, [pc, #212]	; (402010 <__ieee754_pow+0x1c0>)
  401f3a:	429f      	cmp	r7, r3
  401f3c:	dd6e      	ble.n	40201c <__ieee754_pow+0x1cc>
  401f3e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
  401f42:	429f      	cmp	r7, r3
  401f44:	f340 83e8 	ble.w	402718 <__ieee754_pow+0x8c8>
  401f48:	4b32      	ldr	r3, [pc, #200]	; (402014 <__ieee754_pow+0x1c4>)
  401f4a:	429e      	cmp	r6, r3
  401f4c:	dd4e      	ble.n	401fec <__ieee754_pow+0x19c>
  401f4e:	f1ba 0f00 	cmp.w	sl, #0
  401f52:	dd4e      	ble.n	401ff2 <__ieee754_pow+0x1a2>
  401f54:	a328      	add	r3, pc, #160	; (adr r3, 401ff8 <__ieee754_pow+0x1a8>)
  401f56:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f5a:	4610      	mov	r0, r2
  401f5c:	4619      	mov	r1, r3
  401f5e:	f001 f855 	bl	40300c <__aeabi_dmul>
  401f62:	e7b7      	b.n	401ed4 <__ieee754_pow+0x84>
  401f64:	f1ba 0f00 	cmp.w	sl, #0
  401f68:	f2c0 843c 	blt.w	4027e4 <__ieee754_pow+0x994>
  401f6c:	4640      	mov	r0, r8
  401f6e:	4649      	mov	r1, r9
  401f70:	e7b0      	b.n	401ed4 <__ieee754_pow+0x84>
  401f72:	f1be 0f00 	cmp.w	lr, #0
  401f76:	d082      	beq.n	401e7e <__ieee754_pow+0x2e>
  401f78:	e7a3      	b.n	401ec2 <__ieee754_pow+0x72>
  401f7a:	4b27      	ldr	r3, [pc, #156]	; (402018 <__ieee754_pow+0x1c8>)
  401f7c:	429f      	cmp	r7, r3
  401f7e:	dc28      	bgt.n	401fd2 <__ieee754_pow+0x182>
  401f80:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  401f84:	429f      	cmp	r7, r3
  401f86:	dd80      	ble.n	401e8a <__ieee754_pow+0x3a>
  401f88:	153b      	asrs	r3, r7, #20
  401f8a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  401f8e:	2b14      	cmp	r3, #20
  401f90:	f340 843e 	ble.w	402810 <__ieee754_pow+0x9c0>
  401f94:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
  401f98:	fa2e f203 	lsr.w	r2, lr, r3
  401f9c:	fa02 f303 	lsl.w	r3, r2, r3
  401fa0:	459e      	cmp	lr, r3
  401fa2:	f47f af72 	bne.w	401e8a <__ieee754_pow+0x3a>
  401fa6:	f002 0201 	and.w	r2, r2, #1
  401faa:	f1c2 0402 	rsb	r4, r2, #2
  401fae:	e76d      	b.n	401e8c <__ieee754_pow+0x3c>
  401fb0:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
  401fb4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  401fb8:	ea53 030b 	orrs.w	r3, r3, fp
  401fbc:	d088      	beq.n	401ed0 <__ieee754_pow+0x80>
  401fbe:	4b15      	ldr	r3, [pc, #84]	; (402014 <__ieee754_pow+0x1c4>)
  401fc0:	429e      	cmp	r6, r3
  401fc2:	f340 8332 	ble.w	40262a <__ieee754_pow+0x7da>
  401fc6:	f1ba 0f00 	cmp.w	sl, #0
  401fca:	db12      	blt.n	401ff2 <__ieee754_pow+0x1a2>
  401fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
  401fd0:	e780      	b.n	401ed4 <__ieee754_pow+0x84>
  401fd2:	2402      	movs	r4, #2
  401fd4:	e75a      	b.n	401e8c <__ieee754_pow+0x3c>
  401fd6:	4642      	mov	r2, r8
  401fd8:	464b      	mov	r3, r9
  401fda:	4640      	mov	r0, r8
  401fdc:	4649      	mov	r1, r9
  401fde:	f000 fe61 	bl	402ca4 <__aeabi_dsub>
  401fe2:	4602      	mov	r2, r0
  401fe4:	460b      	mov	r3, r1
  401fe6:	f001 f93b 	bl	403260 <__aeabi_ddiv>
  401fea:	e773      	b.n	401ed4 <__ieee754_pow+0x84>
  401fec:	f1ba 0f00 	cmp.w	sl, #0
  401ff0:	dbb0      	blt.n	401f54 <__ieee754_pow+0x104>
  401ff2:	2000      	movs	r0, #0
  401ff4:	2100      	movs	r1, #0
  401ff6:	e76d      	b.n	401ed4 <__ieee754_pow+0x84>
  401ff8:	8800759c 	.word	0x8800759c
  401ffc:	7e37e43c 	.word	0x7e37e43c
  402000:	7ff00000 	.word	0x7ff00000
  402004:	3ff00000 	.word	0x3ff00000
  402008:	3fe00000 	.word	0x3fe00000
  40200c:	00404ab4 	.word	0x00404ab4
  402010:	41e00000 	.word	0x41e00000
  402014:	3fefffff 	.word	0x3fefffff
  402018:	433fffff 	.word	0x433fffff
  40201c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
  402020:	f04f 0200 	mov.w	r2, #0
  402024:	da05      	bge.n	402032 <__ieee754_pow+0x1e2>
  402026:	4bd4      	ldr	r3, [pc, #848]	; (402378 <__ieee754_pow+0x528>)
  402028:	f000 fff0 	bl	40300c <__aeabi_dmul>
  40202c:	f06f 0234 	mvn.w	r2, #52	; 0x34
  402030:	460e      	mov	r6, r1
  402032:	1533      	asrs	r3, r6, #20
  402034:	4fd1      	ldr	r7, [pc, #836]	; (40237c <__ieee754_pow+0x52c>)
  402036:	f3c6 0613 	ubfx	r6, r6, #0, #20
  40203a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  40203e:	4413      	add	r3, r2
  402040:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
  402044:	42be      	cmp	r6, r7
  402046:	461a      	mov	r2, r3
  402048:	930d      	str	r3, [sp, #52]	; 0x34
  40204a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
  40204e:	f340 8321 	ble.w	402694 <__ieee754_pow+0x844>
  402052:	4bcb      	ldr	r3, [pc, #812]	; (402380 <__ieee754_pow+0x530>)
  402054:	429e      	cmp	r6, r3
  402056:	f340 83fd 	ble.w	402854 <__ieee754_pow+0xa04>
  40205a:	4613      	mov	r3, r2
  40205c:	3301      	adds	r3, #1
  40205e:	930d      	str	r3, [sp, #52]	; 0x34
  402060:	4bc8      	ldr	r3, [pc, #800]	; (402384 <__ieee754_pow+0x534>)
  402062:	2200      	movs	r2, #0
  402064:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402068:	2700      	movs	r7, #0
  40206a:	2600      	movs	r6, #0
  40206c:	e9cd 6708 	strd	r6, r7, [sp, #32]
  402070:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  402074:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
  402078:	2700      	movs	r7, #0
  40207a:	4602      	mov	r2, r0
  40207c:	4653      	mov	r3, sl
  40207e:	4651      	mov	r1, sl
  402080:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402084:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402088:	f000 fe0c 	bl	402ca4 <__aeabi_dsub>
  40208c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402090:	4680      	mov	r8, r0
  402092:	4689      	mov	r9, r1
  402094:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  402098:	f000 fe06 	bl	402ca8 <__adddf3>
  40209c:	4602      	mov	r2, r0
  40209e:	460b      	mov	r3, r1
  4020a0:	2000      	movs	r0, #0
  4020a2:	49b8      	ldr	r1, [pc, #736]	; (402384 <__ieee754_pow+0x534>)
  4020a4:	f001 f8dc 	bl	403260 <__aeabi_ddiv>
  4020a8:	460a      	mov	r2, r1
  4020aa:	4601      	mov	r1, r0
  4020ac:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  4020b0:	4613      	mov	r3, r2
  4020b2:	4649      	mov	r1, r9
  4020b4:	4602      	mov	r2, r0
  4020b6:	4640      	mov	r0, r8
  4020b8:	f000 ffa8 	bl	40300c <__aeabi_dmul>
  4020bc:	ea4f 036a 	mov.w	r3, sl, asr #1
  4020c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4020c4:	468c      	mov	ip, r1
  4020c6:	4683      	mov	fp, r0
  4020c8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
  4020cc:	e9cd bc04 	strd	fp, ip, [sp, #16]
  4020d0:	46da      	mov	sl, fp
  4020d2:	468b      	mov	fp, r1
  4020d4:	19d9      	adds	r1, r3, r7
  4020d6:	2300      	movs	r3, #0
  4020d8:	e9cd ab02 	strd	sl, fp, [sp, #8]
  4020dc:	9302      	str	r3, [sp, #8]
  4020de:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  4020e2:	2000      	movs	r0, #0
  4020e4:	4606      	mov	r6, r0
  4020e6:	460f      	mov	r7, r1
  4020e8:	4602      	mov	r2, r0
  4020ea:	460b      	mov	r3, r1
  4020ec:	4650      	mov	r0, sl
  4020ee:	4659      	mov	r1, fp
  4020f0:	f000 ff8c 	bl	40300c <__aeabi_dmul>
  4020f4:	4602      	mov	r2, r0
  4020f6:	460b      	mov	r3, r1
  4020f8:	4640      	mov	r0, r8
  4020fa:	4649      	mov	r1, r9
  4020fc:	f000 fdd2 	bl	402ca4 <__aeabi_dsub>
  402100:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402104:	4680      	mov	r8, r0
  402106:	4689      	mov	r9, r1
  402108:	4630      	mov	r0, r6
  40210a:	4639      	mov	r1, r7
  40210c:	f000 fdca 	bl	402ca4 <__aeabi_dsub>
  402110:	4602      	mov	r2, r0
  402112:	460b      	mov	r3, r1
  402114:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  402118:	f000 fdc4 	bl	402ca4 <__aeabi_dsub>
  40211c:	4652      	mov	r2, sl
  40211e:	465b      	mov	r3, fp
  402120:	f000 ff74 	bl	40300c <__aeabi_dmul>
  402124:	4602      	mov	r2, r0
  402126:	460b      	mov	r3, r1
  402128:	4640      	mov	r0, r8
  40212a:	4649      	mov	r1, r9
  40212c:	f000 fdba 	bl	402ca4 <__aeabi_dsub>
  402130:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  402134:	f000 ff6a 	bl	40300c <__aeabi_dmul>
  402138:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  40213c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402140:	4632      	mov	r2, r6
  402142:	463b      	mov	r3, r7
  402144:	4630      	mov	r0, r6
  402146:	4639      	mov	r1, r7
  402148:	f000 ff60 	bl	40300c <__aeabi_dmul>
  40214c:	a378      	add	r3, pc, #480	; (adr r3, 402330 <__ieee754_pow+0x4e0>)
  40214e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402152:	4606      	mov	r6, r0
  402154:	460f      	mov	r7, r1
  402156:	f000 ff59 	bl	40300c <__aeabi_dmul>
  40215a:	a377      	add	r3, pc, #476	; (adr r3, 402338 <__ieee754_pow+0x4e8>)
  40215c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402160:	f000 fda2 	bl	402ca8 <__adddf3>
  402164:	4632      	mov	r2, r6
  402166:	463b      	mov	r3, r7
  402168:	f000 ff50 	bl	40300c <__aeabi_dmul>
  40216c:	a374      	add	r3, pc, #464	; (adr r3, 402340 <__ieee754_pow+0x4f0>)
  40216e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402172:	f000 fd99 	bl	402ca8 <__adddf3>
  402176:	4632      	mov	r2, r6
  402178:	463b      	mov	r3, r7
  40217a:	f000 ff47 	bl	40300c <__aeabi_dmul>
  40217e:	a372      	add	r3, pc, #456	; (adr r3, 402348 <__ieee754_pow+0x4f8>)
  402180:	e9d3 2300 	ldrd	r2, r3, [r3]
  402184:	f000 fd90 	bl	402ca8 <__adddf3>
  402188:	4632      	mov	r2, r6
  40218a:	463b      	mov	r3, r7
  40218c:	f000 ff3e 	bl	40300c <__aeabi_dmul>
  402190:	a36f      	add	r3, pc, #444	; (adr r3, 402350 <__ieee754_pow+0x500>)
  402192:	e9d3 2300 	ldrd	r2, r3, [r3]
  402196:	f000 fd87 	bl	402ca8 <__adddf3>
  40219a:	4632      	mov	r2, r6
  40219c:	463b      	mov	r3, r7
  40219e:	f000 ff35 	bl	40300c <__aeabi_dmul>
  4021a2:	a36d      	add	r3, pc, #436	; (adr r3, 402358 <__ieee754_pow+0x508>)
  4021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021a8:	f000 fd7e 	bl	402ca8 <__adddf3>
  4021ac:	4632      	mov	r2, r6
  4021ae:	4680      	mov	r8, r0
  4021b0:	4689      	mov	r9, r1
  4021b2:	463b      	mov	r3, r7
  4021b4:	4630      	mov	r0, r6
  4021b6:	4639      	mov	r1, r7
  4021b8:	f000 ff28 	bl	40300c <__aeabi_dmul>
  4021bc:	4602      	mov	r2, r0
  4021be:	460b      	mov	r3, r1
  4021c0:	4640      	mov	r0, r8
  4021c2:	4649      	mov	r1, r9
  4021c4:	f000 ff22 	bl	40300c <__aeabi_dmul>
  4021c8:	4652      	mov	r2, sl
  4021ca:	4606      	mov	r6, r0
  4021cc:	460f      	mov	r7, r1
  4021ce:	465b      	mov	r3, fp
  4021d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4021d4:	f000 fd68 	bl	402ca8 <__adddf3>
  4021d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4021dc:	f000 ff16 	bl	40300c <__aeabi_dmul>
  4021e0:	4632      	mov	r2, r6
  4021e2:	463b      	mov	r3, r7
  4021e4:	f000 fd60 	bl	402ca8 <__adddf3>
  4021e8:	4652      	mov	r2, sl
  4021ea:	4680      	mov	r8, r0
  4021ec:	4689      	mov	r9, r1
  4021ee:	465b      	mov	r3, fp
  4021f0:	4650      	mov	r0, sl
  4021f2:	4659      	mov	r1, fp
  4021f4:	f000 ff0a 	bl	40300c <__aeabi_dmul>
  4021f8:	2200      	movs	r2, #0
  4021fa:	4b63      	ldr	r3, [pc, #396]	; (402388 <__ieee754_pow+0x538>)
  4021fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  402200:	f000 fd52 	bl	402ca8 <__adddf3>
  402204:	4642      	mov	r2, r8
  402206:	464b      	mov	r3, r9
  402208:	f000 fd4e 	bl	402ca8 <__adddf3>
  40220c:	9802      	ldr	r0, [sp, #8]
  40220e:	460f      	mov	r7, r1
  402210:	4606      	mov	r6, r0
  402212:	4632      	mov	r2, r6
  402214:	463b      	mov	r3, r7
  402216:	4650      	mov	r0, sl
  402218:	4659      	mov	r1, fp
  40221a:	f000 fef7 	bl	40300c <__aeabi_dmul>
  40221e:	2200      	movs	r2, #0
  402220:	4682      	mov	sl, r0
  402222:	468b      	mov	fp, r1
  402224:	4b58      	ldr	r3, [pc, #352]	; (402388 <__ieee754_pow+0x538>)
  402226:	4630      	mov	r0, r6
  402228:	4639      	mov	r1, r7
  40222a:	f000 fd3b 	bl	402ca4 <__aeabi_dsub>
  40222e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  402232:	f000 fd37 	bl	402ca4 <__aeabi_dsub>
  402236:	4602      	mov	r2, r0
  402238:	460b      	mov	r3, r1
  40223a:	4640      	mov	r0, r8
  40223c:	4649      	mov	r1, r9
  40223e:	f000 fd31 	bl	402ca4 <__aeabi_dsub>
  402242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402246:	f000 fee1 	bl	40300c <__aeabi_dmul>
  40224a:	4632      	mov	r2, r6
  40224c:	4680      	mov	r8, r0
  40224e:	4689      	mov	r9, r1
  402250:	463b      	mov	r3, r7
  402252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402256:	f000 fed9 	bl	40300c <__aeabi_dmul>
  40225a:	4602      	mov	r2, r0
  40225c:	460b      	mov	r3, r1
  40225e:	4640      	mov	r0, r8
  402260:	4649      	mov	r1, r9
  402262:	f000 fd21 	bl	402ca8 <__adddf3>
  402266:	4680      	mov	r8, r0
  402268:	4689      	mov	r9, r1
  40226a:	4602      	mov	r2, r0
  40226c:	460b      	mov	r3, r1
  40226e:	4650      	mov	r0, sl
  402270:	4659      	mov	r1, fp
  402272:	e9cd ab04 	strd	sl, fp, [sp, #16]
  402276:	f000 fd17 	bl	402ca8 <__adddf3>
  40227a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40227e:	a338      	add	r3, pc, #224	; (adr r3, 402360 <__ieee754_pow+0x510>)
  402280:	e9d3 2300 	ldrd	r2, r3, [r3]
  402284:	4650      	mov	r0, sl
  402286:	460f      	mov	r7, r1
  402288:	f000 fec0 	bl	40300c <__aeabi_dmul>
  40228c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402290:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402294:	4639      	mov	r1, r7
  402296:	4650      	mov	r0, sl
  402298:	f000 fd04 	bl	402ca4 <__aeabi_dsub>
  40229c:	4602      	mov	r2, r0
  40229e:	460b      	mov	r3, r1
  4022a0:	4640      	mov	r0, r8
  4022a2:	4649      	mov	r1, r9
  4022a4:	f000 fcfe 	bl	402ca4 <__aeabi_dsub>
  4022a8:	a32f      	add	r3, pc, #188	; (adr r3, 402368 <__ieee754_pow+0x518>)
  4022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022ae:	f000 fead 	bl	40300c <__aeabi_dmul>
  4022b2:	a32f      	add	r3, pc, #188	; (adr r3, 402370 <__ieee754_pow+0x520>)
  4022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022b8:	4680      	mov	r8, r0
  4022ba:	4689      	mov	r9, r1
  4022bc:	4650      	mov	r0, sl
  4022be:	4639      	mov	r1, r7
  4022c0:	f000 fea4 	bl	40300c <__aeabi_dmul>
  4022c4:	4602      	mov	r2, r0
  4022c6:	460b      	mov	r3, r1
  4022c8:	4640      	mov	r0, r8
  4022ca:	4649      	mov	r1, r9
  4022cc:	f000 fcec 	bl	402ca8 <__adddf3>
  4022d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4022d4:	f000 fce8 	bl	402ca8 <__adddf3>
  4022d8:	4680      	mov	r8, r0
  4022da:	980d      	ldr	r0, [sp, #52]	; 0x34
  4022dc:	4689      	mov	r9, r1
  4022de:	f000 fe2f 	bl	402f40 <__aeabi_i2d>
  4022e2:	4642      	mov	r2, r8
  4022e4:	4606      	mov	r6, r0
  4022e6:	460f      	mov	r7, r1
  4022e8:	464b      	mov	r3, r9
  4022ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4022ee:	f000 fcdb 	bl	402ca8 <__adddf3>
  4022f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4022f6:	f000 fcd7 	bl	402ca8 <__adddf3>
  4022fa:	4632      	mov	r2, r6
  4022fc:	463b      	mov	r3, r7
  4022fe:	f000 fcd3 	bl	402ca8 <__adddf3>
  402302:	4632      	mov	r2, r6
  402304:	463b      	mov	r3, r7
  402306:	4650      	mov	r0, sl
  402308:	468b      	mov	fp, r1
  40230a:	f000 fccb 	bl	402ca4 <__aeabi_dsub>
  40230e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  402312:	f000 fcc7 	bl	402ca4 <__aeabi_dsub>
  402316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40231a:	f000 fcc3 	bl	402ca4 <__aeabi_dsub>
  40231e:	4602      	mov	r2, r0
  402320:	460b      	mov	r3, r1
  402322:	4640      	mov	r0, r8
  402324:	4649      	mov	r1, r9
  402326:	f000 fcbd 	bl	402ca4 <__aeabi_dsub>
  40232a:	4680      	mov	r8, r0
  40232c:	e02e      	b.n	40238c <__ieee754_pow+0x53c>
  40232e:	bf00      	nop
  402330:	4a454eef 	.word	0x4a454eef
  402334:	3fca7e28 	.word	0x3fca7e28
  402338:	93c9db65 	.word	0x93c9db65
  40233c:	3fcd864a 	.word	0x3fcd864a
  402340:	a91d4101 	.word	0xa91d4101
  402344:	3fd17460 	.word	0x3fd17460
  402348:	518f264d 	.word	0x518f264d
  40234c:	3fd55555 	.word	0x3fd55555
  402350:	db6fabff 	.word	0xdb6fabff
  402354:	3fdb6db6 	.word	0x3fdb6db6
  402358:	33333303 	.word	0x33333303
  40235c:	3fe33333 	.word	0x3fe33333
  402360:	e0000000 	.word	0xe0000000
  402364:	3feec709 	.word	0x3feec709
  402368:	dc3a03fd 	.word	0xdc3a03fd
  40236c:	3feec709 	.word	0x3feec709
  402370:	145b01f5 	.word	0x145b01f5
  402374:	be3e2fe0 	.word	0xbe3e2fe0
  402378:	43400000 	.word	0x43400000
  40237c:	0003988e 	.word	0x0003988e
  402380:	000bb679 	.word	0x000bb679
  402384:	3ff00000 	.word	0x3ff00000
  402388:	40080000 	.word	0x40080000
  40238c:	4689      	mov	r9, r1
  40238e:	3c01      	subs	r4, #1
  402390:	ea54 0305 	orrs.w	r3, r4, r5
  402394:	e9dd 0100 	ldrd	r0, r1, [sp]
  402398:	bf14      	ite	ne
  40239a:	4cd9      	ldrne	r4, [pc, #868]	; (402700 <__ieee754_pow+0x8b0>)
  40239c:	4cd9      	ldreq	r4, [pc, #868]	; (402704 <__ieee754_pow+0x8b4>)
  40239e:	2300      	movs	r3, #0
  4023a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
  4023a4:	4603      	mov	r3, r0
  4023a6:	460c      	mov	r4, r1
  4023a8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4023ac:	2300      	movs	r3, #0
  4023ae:	9302      	str	r3, [sp, #8]
  4023b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  4023b4:	4622      	mov	r2, r4
  4023b6:	462b      	mov	r3, r5
  4023b8:	f000 fc74 	bl	402ca4 <__aeabi_dsub>
  4023bc:	4652      	mov	r2, sl
  4023be:	465b      	mov	r3, fp
  4023c0:	f000 fe24 	bl	40300c <__aeabi_dmul>
  4023c4:	e9dd 2300 	ldrd	r2, r3, [sp]
  4023c8:	4606      	mov	r6, r0
  4023ca:	460f      	mov	r7, r1
  4023cc:	4640      	mov	r0, r8
  4023ce:	4649      	mov	r1, r9
  4023d0:	f000 fe1c 	bl	40300c <__aeabi_dmul>
  4023d4:	4602      	mov	r2, r0
  4023d6:	460b      	mov	r3, r1
  4023d8:	4630      	mov	r0, r6
  4023da:	4639      	mov	r1, r7
  4023dc:	f000 fc64 	bl	402ca8 <__adddf3>
  4023e0:	4622      	mov	r2, r4
  4023e2:	4680      	mov	r8, r0
  4023e4:	4689      	mov	r9, r1
  4023e6:	462b      	mov	r3, r5
  4023e8:	4650      	mov	r0, sl
  4023ea:	4659      	mov	r1, fp
  4023ec:	e9cd 8900 	strd	r8, r9, [sp]
  4023f0:	f000 fe0c 	bl	40300c <__aeabi_dmul>
  4023f4:	460b      	mov	r3, r1
  4023f6:	4602      	mov	r2, r0
  4023f8:	4606      	mov	r6, r0
  4023fa:	460f      	mov	r7, r1
  4023fc:	4640      	mov	r0, r8
  4023fe:	4649      	mov	r1, r9
  402400:	f000 fc52 	bl	402ca8 <__adddf3>
  402404:	4bc0      	ldr	r3, [pc, #768]	; (402708 <__ieee754_pow+0x8b8>)
  402406:	4299      	cmp	r1, r3
  402408:	4604      	mov	r4, r0
  40240a:	460d      	mov	r5, r1
  40240c:	468a      	mov	sl, r1
  40240e:	f340 8116 	ble.w	40263e <__ieee754_pow+0x7ee>
  402412:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
  402416:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
  40241a:	4303      	orrs	r3, r0
  40241c:	f040 81ea 	bne.w	4027f4 <__ieee754_pow+0x9a4>
  402420:	a3a3      	add	r3, pc, #652	; (adr r3, 4026b0 <__ieee754_pow+0x860>)
  402422:	e9d3 2300 	ldrd	r2, r3, [r3]
  402426:	e9dd 0100 	ldrd	r0, r1, [sp]
  40242a:	f000 fc3d 	bl	402ca8 <__adddf3>
  40242e:	4632      	mov	r2, r6
  402430:	4680      	mov	r8, r0
  402432:	4689      	mov	r9, r1
  402434:	463b      	mov	r3, r7
  402436:	4620      	mov	r0, r4
  402438:	4629      	mov	r1, r5
  40243a:	f000 fc33 	bl	402ca4 <__aeabi_dsub>
  40243e:	4602      	mov	r2, r0
  402440:	460b      	mov	r3, r1
  402442:	4640      	mov	r0, r8
  402444:	4649      	mov	r1, r9
  402446:	f001 f871 	bl	40352c <__aeabi_dcmpgt>
  40244a:	2800      	cmp	r0, #0
  40244c:	f040 81d2 	bne.w	4027f4 <__ieee754_pow+0x9a4>
  402450:	46a8      	mov	r8, r5
  402452:	ea4f 5328 	mov.w	r3, r8, asr #20
  402456:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40245a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
  40245e:	fa42 f303 	asr.w	r3, r2, r3
  402462:	4453      	add	r3, sl
  402464:	f3c3 520a 	ubfx	r2, r3, #20, #11
  402468:	4da8      	ldr	r5, [pc, #672]	; (40270c <__ieee754_pow+0x8bc>)
  40246a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
  40246e:	4115      	asrs	r5, r2
  402470:	f3c3 0413 	ubfx	r4, r3, #0, #20
  402474:	ea23 0105 	bic.w	r1, r3, r5
  402478:	2000      	movs	r0, #0
  40247a:	f1c2 0b14 	rsb	fp, r2, #20
  40247e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  402482:	f1ba 0f00 	cmp.w	sl, #0
  402486:	4602      	mov	r2, r0
  402488:	460b      	mov	r3, r1
  40248a:	fa44 fb0b 	asr.w	fp, r4, fp
  40248e:	4630      	mov	r0, r6
  402490:	4639      	mov	r1, r7
  402492:	bfb8      	it	lt
  402494:	f1cb 0b00 	rsblt	fp, fp, #0
  402498:	f000 fc04 	bl	402ca4 <__aeabi_dsub>
  40249c:	4602      	mov	r2, r0
  40249e:	460b      	mov	r3, r1
  4024a0:	4606      	mov	r6, r0
  4024a2:	460f      	mov	r7, r1
  4024a4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4024a8:	f000 fbfe 	bl	402ca8 <__adddf3>
  4024ac:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
  4024b0:	460d      	mov	r5, r1
  4024b2:	2400      	movs	r4, #0
  4024b4:	a380      	add	r3, pc, #512	; (adr r3, 4026b8 <__ieee754_pow+0x868>)
  4024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024ba:	4620      	mov	r0, r4
  4024bc:	4629      	mov	r1, r5
  4024be:	f000 fda5 	bl	40300c <__aeabi_dmul>
  4024c2:	4632      	mov	r2, r6
  4024c4:	4680      	mov	r8, r0
  4024c6:	4689      	mov	r9, r1
  4024c8:	463b      	mov	r3, r7
  4024ca:	4620      	mov	r0, r4
  4024cc:	4629      	mov	r1, r5
  4024ce:	f000 fbe9 	bl	402ca4 <__aeabi_dsub>
  4024d2:	4602      	mov	r2, r0
  4024d4:	460b      	mov	r3, r1
  4024d6:	e9dd 0100 	ldrd	r0, r1, [sp]
  4024da:	f000 fbe3 	bl	402ca4 <__aeabi_dsub>
  4024de:	a378      	add	r3, pc, #480	; (adr r3, 4026c0 <__ieee754_pow+0x870>)
  4024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024e4:	f000 fd92 	bl	40300c <__aeabi_dmul>
  4024e8:	a377      	add	r3, pc, #476	; (adr r3, 4026c8 <__ieee754_pow+0x878>)
  4024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024ee:	4606      	mov	r6, r0
  4024f0:	460f      	mov	r7, r1
  4024f2:	4620      	mov	r0, r4
  4024f4:	4629      	mov	r1, r5
  4024f6:	f000 fd89 	bl	40300c <__aeabi_dmul>
  4024fa:	4602      	mov	r2, r0
  4024fc:	460b      	mov	r3, r1
  4024fe:	4630      	mov	r0, r6
  402500:	4639      	mov	r1, r7
  402502:	f000 fbd1 	bl	402ca8 <__adddf3>
  402506:	4606      	mov	r6, r0
  402508:	460f      	mov	r7, r1
  40250a:	4602      	mov	r2, r0
  40250c:	460b      	mov	r3, r1
  40250e:	4640      	mov	r0, r8
  402510:	4649      	mov	r1, r9
  402512:	f000 fbc9 	bl	402ca8 <__adddf3>
  402516:	4642      	mov	r2, r8
  402518:	464b      	mov	r3, r9
  40251a:	4604      	mov	r4, r0
  40251c:	460d      	mov	r5, r1
  40251e:	f000 fbc1 	bl	402ca4 <__aeabi_dsub>
  402522:	4602      	mov	r2, r0
  402524:	460b      	mov	r3, r1
  402526:	4630      	mov	r0, r6
  402528:	4639      	mov	r1, r7
  40252a:	f000 fbbb 	bl	402ca4 <__aeabi_dsub>
  40252e:	4622      	mov	r2, r4
  402530:	4680      	mov	r8, r0
  402532:	4689      	mov	r9, r1
  402534:	462b      	mov	r3, r5
  402536:	4620      	mov	r0, r4
  402538:	4629      	mov	r1, r5
  40253a:	f000 fd67 	bl	40300c <__aeabi_dmul>
  40253e:	a364      	add	r3, pc, #400	; (adr r3, 4026d0 <__ieee754_pow+0x880>)
  402540:	e9d3 2300 	ldrd	r2, r3, [r3]
  402544:	4606      	mov	r6, r0
  402546:	460f      	mov	r7, r1
  402548:	f000 fd60 	bl	40300c <__aeabi_dmul>
  40254c:	a362      	add	r3, pc, #392	; (adr r3, 4026d8 <__ieee754_pow+0x888>)
  40254e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402552:	f000 fba7 	bl	402ca4 <__aeabi_dsub>
  402556:	4632      	mov	r2, r6
  402558:	463b      	mov	r3, r7
  40255a:	f000 fd57 	bl	40300c <__aeabi_dmul>
  40255e:	a360      	add	r3, pc, #384	; (adr r3, 4026e0 <__ieee754_pow+0x890>)
  402560:	e9d3 2300 	ldrd	r2, r3, [r3]
  402564:	f000 fba0 	bl	402ca8 <__adddf3>
  402568:	4632      	mov	r2, r6
  40256a:	463b      	mov	r3, r7
  40256c:	f000 fd4e 	bl	40300c <__aeabi_dmul>
  402570:	a35d      	add	r3, pc, #372	; (adr r3, 4026e8 <__ieee754_pow+0x898>)
  402572:	e9d3 2300 	ldrd	r2, r3, [r3]
  402576:	f000 fb95 	bl	402ca4 <__aeabi_dsub>
  40257a:	4632      	mov	r2, r6
  40257c:	463b      	mov	r3, r7
  40257e:	f000 fd45 	bl	40300c <__aeabi_dmul>
  402582:	a35b      	add	r3, pc, #364	; (adr r3, 4026f0 <__ieee754_pow+0x8a0>)
  402584:	e9d3 2300 	ldrd	r2, r3, [r3]
  402588:	f000 fb8e 	bl	402ca8 <__adddf3>
  40258c:	4632      	mov	r2, r6
  40258e:	463b      	mov	r3, r7
  402590:	f000 fd3c 	bl	40300c <__aeabi_dmul>
  402594:	4602      	mov	r2, r0
  402596:	460b      	mov	r3, r1
  402598:	4620      	mov	r0, r4
  40259a:	4629      	mov	r1, r5
  40259c:	f000 fb82 	bl	402ca4 <__aeabi_dsub>
  4025a0:	4606      	mov	r6, r0
  4025a2:	460f      	mov	r7, r1
  4025a4:	4602      	mov	r2, r0
  4025a6:	460b      	mov	r3, r1
  4025a8:	4620      	mov	r0, r4
  4025aa:	4629      	mov	r1, r5
  4025ac:	f000 fd2e 	bl	40300c <__aeabi_dmul>
  4025b0:	2200      	movs	r2, #0
  4025b2:	e9cd 0100 	strd	r0, r1, [sp]
  4025b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4025ba:	4630      	mov	r0, r6
  4025bc:	4639      	mov	r1, r7
  4025be:	f000 fb71 	bl	402ca4 <__aeabi_dsub>
  4025c2:	4602      	mov	r2, r0
  4025c4:	460b      	mov	r3, r1
  4025c6:	e9dd 0100 	ldrd	r0, r1, [sp]
  4025ca:	f000 fe49 	bl	403260 <__aeabi_ddiv>
  4025ce:	4642      	mov	r2, r8
  4025d0:	4606      	mov	r6, r0
  4025d2:	460f      	mov	r7, r1
  4025d4:	464b      	mov	r3, r9
  4025d6:	4620      	mov	r0, r4
  4025d8:	4629      	mov	r1, r5
  4025da:	f000 fd17 	bl	40300c <__aeabi_dmul>
  4025de:	4642      	mov	r2, r8
  4025e0:	464b      	mov	r3, r9
  4025e2:	f000 fb61 	bl	402ca8 <__adddf3>
  4025e6:	4602      	mov	r2, r0
  4025e8:	460b      	mov	r3, r1
  4025ea:	4630      	mov	r0, r6
  4025ec:	4639      	mov	r1, r7
  4025ee:	f000 fb59 	bl	402ca4 <__aeabi_dsub>
  4025f2:	4622      	mov	r2, r4
  4025f4:	462b      	mov	r3, r5
  4025f6:	f000 fb55 	bl	402ca4 <__aeabi_dsub>
  4025fa:	4602      	mov	r2, r0
  4025fc:	460b      	mov	r3, r1
  4025fe:	2000      	movs	r0, #0
  402600:	493f      	ldr	r1, [pc, #252]	; (402700 <__ieee754_pow+0x8b0>)
  402602:	f000 fb4f 	bl	402ca4 <__aeabi_dsub>
  402606:	448a      	add	sl, r1
  402608:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
  40260c:	f2c0 8133 	blt.w	402876 <__ieee754_pow+0xa26>
  402610:	4651      	mov	r1, sl
  402612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402616:	f000 fcf9 	bl	40300c <__aeabi_dmul>
  40261a:	e45b      	b.n	401ed4 <__ieee754_pow+0x84>
  40261c:	4642      	mov	r2, r8
  40261e:	4640      	mov	r0, r8
  402620:	464b      	mov	r3, r9
  402622:	4649      	mov	r1, r9
  402624:	f000 fcf2 	bl	40300c <__aeabi_dmul>
  402628:	e454      	b.n	401ed4 <__ieee754_pow+0x84>
  40262a:	f1ba 0f00 	cmp.w	sl, #0
  40262e:	f6bf ace0 	bge.w	401ff2 <__ieee754_pow+0x1a2>
  402632:	e9dd 3400 	ldrd	r3, r4, [sp]
  402636:	4618      	mov	r0, r3
  402638:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  40263c:	e44a      	b.n	401ed4 <__ieee754_pow+0x84>
  40263e:	4b34      	ldr	r3, [pc, #208]	; (402710 <__ieee754_pow+0x8c0>)
  402640:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  402644:	4598      	cmp	r8, r3
  402646:	f340 80f2 	ble.w	40282e <__ieee754_pow+0x9de>
  40264a:	4b32      	ldr	r3, [pc, #200]	; (402714 <__ieee754_pow+0x8c4>)
  40264c:	440b      	add	r3, r1
  40264e:	4303      	orrs	r3, r0
  402650:	d10c      	bne.n	40266c <__ieee754_pow+0x81c>
  402652:	4632      	mov	r2, r6
  402654:	463b      	mov	r3, r7
  402656:	f000 fb25 	bl	402ca4 <__aeabi_dsub>
  40265a:	4602      	mov	r2, r0
  40265c:	460b      	mov	r3, r1
  40265e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402662:	f000 ff4f 	bl	403504 <__aeabi_dcmple>
  402666:	2800      	cmp	r0, #0
  402668:	f43f aef3 	beq.w	402452 <__ieee754_pow+0x602>
  40266c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402670:	a321      	add	r3, pc, #132	; (adr r3, 4026f8 <__ieee754_pow+0x8a8>)
  402672:	e9d3 2300 	ldrd	r2, r3, [r3]
  402676:	f000 fcc9 	bl	40300c <__aeabi_dmul>
  40267a:	a31f      	add	r3, pc, #124	; (adr r3, 4026f8 <__ieee754_pow+0x8a8>)
  40267c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402680:	f000 fcc4 	bl	40300c <__aeabi_dmul>
  402684:	e426      	b.n	401ed4 <__ieee754_pow+0x84>
  402686:	4602      	mov	r2, r0
  402688:	460b      	mov	r3, r1
  40268a:	2000      	movs	r0, #0
  40268c:	491c      	ldr	r1, [pc, #112]	; (402700 <__ieee754_pow+0x8b0>)
  40268e:	f000 fde7 	bl	403260 <__aeabi_ddiv>
  402692:	e43c      	b.n	401f0e <__ieee754_pow+0xbe>
  402694:	2200      	movs	r2, #0
  402696:	2300      	movs	r3, #0
  402698:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40269c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4026a0:	4b17      	ldr	r3, [pc, #92]	; (402700 <__ieee754_pow+0x8b0>)
  4026a2:	2200      	movs	r2, #0
  4026a4:	2700      	movs	r7, #0
  4026a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  4026aa:	e4e6      	b.n	40207a <__ieee754_pow+0x22a>
  4026ac:	f3af 8000 	nop.w
  4026b0:	652b82fe 	.word	0x652b82fe
  4026b4:	3c971547 	.word	0x3c971547
  4026b8:	00000000 	.word	0x00000000
  4026bc:	3fe62e43 	.word	0x3fe62e43
  4026c0:	fefa39ef 	.word	0xfefa39ef
  4026c4:	3fe62e42 	.word	0x3fe62e42
  4026c8:	0ca86c39 	.word	0x0ca86c39
  4026cc:	be205c61 	.word	0xbe205c61
  4026d0:	72bea4d0 	.word	0x72bea4d0
  4026d4:	3e663769 	.word	0x3e663769
  4026d8:	c5d26bf1 	.word	0xc5d26bf1
  4026dc:	3ebbbd41 	.word	0x3ebbbd41
  4026e0:	af25de2c 	.word	0xaf25de2c
  4026e4:	3f11566a 	.word	0x3f11566a
  4026e8:	16bebd93 	.word	0x16bebd93
  4026ec:	3f66c16c 	.word	0x3f66c16c
  4026f0:	5555553e 	.word	0x5555553e
  4026f4:	3fc55555 	.word	0x3fc55555
  4026f8:	c2f8f359 	.word	0xc2f8f359
  4026fc:	01a56e1f 	.word	0x01a56e1f
  402700:	3ff00000 	.word	0x3ff00000
  402704:	bff00000 	.word	0xbff00000
  402708:	408fffff 	.word	0x408fffff
  40270c:	000fffff 	.word	0x000fffff
  402710:	4090cbff 	.word	0x4090cbff
  402714:	3f6f3400 	.word	0x3f6f3400
  402718:	4b6b      	ldr	r3, [pc, #428]	; (4028c8 <__ieee754_pow+0xa78>)
  40271a:	429e      	cmp	r6, r3
  40271c:	f77f ac66 	ble.w	401fec <__ieee754_pow+0x19c>
  402720:	4b6a      	ldr	r3, [pc, #424]	; (4028cc <__ieee754_pow+0xa7c>)
  402722:	429e      	cmp	r6, r3
  402724:	f73f ac13 	bgt.w	401f4e <__ieee754_pow+0xfe>
  402728:	2200      	movs	r2, #0
  40272a:	4b68      	ldr	r3, [pc, #416]	; (4028cc <__ieee754_pow+0xa7c>)
  40272c:	f000 faba 	bl	402ca4 <__aeabi_dsub>
  402730:	a357      	add	r3, pc, #348	; (adr r3, 402890 <__ieee754_pow+0xa40>)
  402732:	e9d3 2300 	ldrd	r2, r3, [r3]
  402736:	4606      	mov	r6, r0
  402738:	460f      	mov	r7, r1
  40273a:	f000 fc67 	bl	40300c <__aeabi_dmul>
  40273e:	a356      	add	r3, pc, #344	; (adr r3, 402898 <__ieee754_pow+0xa48>)
  402740:	e9d3 2300 	ldrd	r2, r3, [r3]
  402744:	4680      	mov	r8, r0
  402746:	4689      	mov	r9, r1
  402748:	4630      	mov	r0, r6
  40274a:	4639      	mov	r1, r7
  40274c:	f000 fc5e 	bl	40300c <__aeabi_dmul>
  402750:	2200      	movs	r2, #0
  402752:	4682      	mov	sl, r0
  402754:	468b      	mov	fp, r1
  402756:	4b5e      	ldr	r3, [pc, #376]	; (4028d0 <__ieee754_pow+0xa80>)
  402758:	4630      	mov	r0, r6
  40275a:	4639      	mov	r1, r7
  40275c:	f000 fc56 	bl	40300c <__aeabi_dmul>
  402760:	4602      	mov	r2, r0
  402762:	460b      	mov	r3, r1
  402764:	a14e      	add	r1, pc, #312	; (adr r1, 4028a0 <__ieee754_pow+0xa50>)
  402766:	e9d1 0100 	ldrd	r0, r1, [r1]
  40276a:	f000 fa9b 	bl	402ca4 <__aeabi_dsub>
  40276e:	4632      	mov	r2, r6
  402770:	463b      	mov	r3, r7
  402772:	f000 fc4b 	bl	40300c <__aeabi_dmul>
  402776:	4602      	mov	r2, r0
  402778:	460b      	mov	r3, r1
  40277a:	2000      	movs	r0, #0
  40277c:	4955      	ldr	r1, [pc, #340]	; (4028d4 <__ieee754_pow+0xa84>)
  40277e:	f000 fa91 	bl	402ca4 <__aeabi_dsub>
  402782:	4632      	mov	r2, r6
  402784:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402788:	463b      	mov	r3, r7
  40278a:	4630      	mov	r0, r6
  40278c:	4639      	mov	r1, r7
  40278e:	f000 fc3d 	bl	40300c <__aeabi_dmul>
  402792:	4602      	mov	r2, r0
  402794:	460b      	mov	r3, r1
  402796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40279a:	f000 fc37 	bl	40300c <__aeabi_dmul>
  40279e:	a342      	add	r3, pc, #264	; (adr r3, 4028a8 <__ieee754_pow+0xa58>)
  4027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027a4:	f000 fc32 	bl	40300c <__aeabi_dmul>
  4027a8:	4602      	mov	r2, r0
  4027aa:	460b      	mov	r3, r1
  4027ac:	4650      	mov	r0, sl
  4027ae:	4659      	mov	r1, fp
  4027b0:	f000 fa78 	bl	402ca4 <__aeabi_dsub>
  4027b4:	4602      	mov	r2, r0
  4027b6:	460b      	mov	r3, r1
  4027b8:	4606      	mov	r6, r0
  4027ba:	460f      	mov	r7, r1
  4027bc:	4640      	mov	r0, r8
  4027be:	4649      	mov	r1, r9
  4027c0:	f000 fa72 	bl	402ca8 <__adddf3>
  4027c4:	4642      	mov	r2, r8
  4027c6:	464b      	mov	r3, r9
  4027c8:	2000      	movs	r0, #0
  4027ca:	4682      	mov	sl, r0
  4027cc:	468b      	mov	fp, r1
  4027ce:	f000 fa69 	bl	402ca4 <__aeabi_dsub>
  4027d2:	4602      	mov	r2, r0
  4027d4:	460b      	mov	r3, r1
  4027d6:	4630      	mov	r0, r6
  4027d8:	4639      	mov	r1, r7
  4027da:	f000 fa63 	bl	402ca4 <__aeabi_dsub>
  4027de:	4680      	mov	r8, r0
  4027e0:	4689      	mov	r9, r1
  4027e2:	e5d4      	b.n	40238e <__ieee754_pow+0x53e>
  4027e4:	4642      	mov	r2, r8
  4027e6:	464b      	mov	r3, r9
  4027e8:	2000      	movs	r0, #0
  4027ea:	4938      	ldr	r1, [pc, #224]	; (4028cc <__ieee754_pow+0xa7c>)
  4027ec:	f000 fd38 	bl	403260 <__aeabi_ddiv>
  4027f0:	f7ff bb70 	b.w	401ed4 <__ieee754_pow+0x84>
  4027f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4027f8:	a32d      	add	r3, pc, #180	; (adr r3, 4028b0 <__ieee754_pow+0xa60>)
  4027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027fe:	f000 fc05 	bl	40300c <__aeabi_dmul>
  402802:	a32b      	add	r3, pc, #172	; (adr r3, 4028b0 <__ieee754_pow+0xa60>)
  402804:	e9d3 2300 	ldrd	r2, r3, [r3]
  402808:	f000 fc00 	bl	40300c <__aeabi_dmul>
  40280c:	f7ff bb62 	b.w	401ed4 <__ieee754_pow+0x84>
  402810:	f1be 0f00 	cmp.w	lr, #0
  402814:	f47f ab69 	bne.w	401eea <__ieee754_pow+0x9a>
  402818:	f1c3 0314 	rsb	r3, r3, #20
  40281c:	fa47 f203 	asr.w	r2, r7, r3
  402820:	fa02 f303 	lsl.w	r3, r2, r3
  402824:	429f      	cmp	r7, r3
  402826:	d02a      	beq.n	40287e <__ieee754_pow+0xa2e>
  402828:	4674      	mov	r4, lr
  40282a:	f7ff bb36 	b.w	401e9a <__ieee754_pow+0x4a>
  40282e:	4b29      	ldr	r3, [pc, #164]	; (4028d4 <__ieee754_pow+0xa84>)
  402830:	4598      	cmp	r8, r3
  402832:	f73f ae0e 	bgt.w	402452 <__ieee754_pow+0x602>
  402836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40283a:	4692      	mov	sl, r2
  40283c:	4693      	mov	fp, r2
  40283e:	e638      	b.n	4024b2 <__ieee754_pow+0x662>
  402840:	4602      	mov	r2, r0
  402842:	460b      	mov	r3, r1
  402844:	f000 fa2e 	bl	402ca4 <__aeabi_dsub>
  402848:	4602      	mov	r2, r0
  40284a:	460b      	mov	r3, r1
  40284c:	f000 fd08 	bl	403260 <__aeabi_ddiv>
  402850:	f7ff bb40 	b.w	401ed4 <__ieee754_pow+0x84>
  402854:	a318      	add	r3, pc, #96	; (adr r3, 4028b8 <__ieee754_pow+0xa68>)
  402856:	e9d3 2300 	ldrd	r2, r3, [r3]
  40285a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40285e:	a318      	add	r3, pc, #96	; (adr r3, 4028c0 <__ieee754_pow+0xa70>)
  402860:	e9d3 2300 	ldrd	r2, r3, [r3]
  402864:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402868:	4b1b      	ldr	r3, [pc, #108]	; (4028d8 <__ieee754_pow+0xa88>)
  40286a:	2200      	movs	r2, #0
  40286c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
  402870:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402874:	e401      	b.n	40207a <__ieee754_pow+0x22a>
  402876:	465a      	mov	r2, fp
  402878:	f000 f98a 	bl	402b90 <scalbn>
  40287c:	e6c9      	b.n	402612 <__ieee754_pow+0x7c2>
  40287e:	f002 0201 	and.w	r2, r2, #1
  402882:	f1c2 0402 	rsb	r4, r2, #2
  402886:	f7ff bb08 	b.w	401e9a <__ieee754_pow+0x4a>
  40288a:	bf00      	nop
  40288c:	f3af 8000 	nop.w
  402890:	60000000 	.word	0x60000000
  402894:	3ff71547 	.word	0x3ff71547
  402898:	f85ddf44 	.word	0xf85ddf44
  40289c:	3e54ae0b 	.word	0x3e54ae0b
  4028a0:	55555555 	.word	0x55555555
  4028a4:	3fd55555 	.word	0x3fd55555
  4028a8:	652b82fe 	.word	0x652b82fe
  4028ac:	3ff71547 	.word	0x3ff71547
  4028b0:	8800759c 	.word	0x8800759c
  4028b4:	7e37e43c 	.word	0x7e37e43c
  4028b8:	40000000 	.word	0x40000000
  4028bc:	3fe2b803 	.word	0x3fe2b803
  4028c0:	43cfd006 	.word	0x43cfd006
  4028c4:	3e4cfdeb 	.word	0x3e4cfdeb
  4028c8:	3feffffe 	.word	0x3feffffe
  4028cc:	3ff00000 	.word	0x3ff00000
  4028d0:	3fd00000 	.word	0x3fd00000
  4028d4:	3fe00000 	.word	0x3fe00000
  4028d8:	3ff80000 	.word	0x3ff80000

004028dc <__ieee754_sqrt>:
  4028dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4028e0:	4f5b      	ldr	r7, [pc, #364]	; (402a50 <__ieee754_sqrt+0x174>)
  4028e2:	438f      	bics	r7, r1
  4028e4:	4605      	mov	r5, r0
  4028e6:	460c      	mov	r4, r1
  4028e8:	f000 8092 	beq.w	402a10 <__ieee754_sqrt+0x134>
  4028ec:	2900      	cmp	r1, #0
  4028ee:	460b      	mov	r3, r1
  4028f0:	4602      	mov	r2, r0
  4028f2:	dd6f      	ble.n	4029d4 <__ieee754_sqrt+0xf8>
  4028f4:	150f      	asrs	r7, r1, #20
  4028f6:	d07b      	beq.n	4029f0 <__ieee754_sqrt+0x114>
  4028f8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4028fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
  402900:	07f8      	lsls	r0, r7, #31
  402902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402906:	d45c      	bmi.n	4029c2 <__ieee754_sqrt+0xe6>
  402908:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  40290c:	2600      	movs	r6, #0
  40290e:	440b      	add	r3, r1
  402910:	107f      	asrs	r7, r7, #1
  402912:	0052      	lsls	r2, r2, #1
  402914:	46b6      	mov	lr, r6
  402916:	2016      	movs	r0, #22
  402918:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  40291c:	eb0e 0401 	add.w	r4, lr, r1
  402920:	429c      	cmp	r4, r3
  402922:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  402926:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40292a:	dc03      	bgt.n	402934 <__ieee754_sqrt+0x58>
  40292c:	1b1b      	subs	r3, r3, r4
  40292e:	eb04 0e01 	add.w	lr, r4, r1
  402932:	440e      	add	r6, r1
  402934:	3801      	subs	r0, #1
  402936:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40293a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40293e:	d1ed      	bne.n	40291c <__ieee754_sqrt+0x40>
  402940:	4684      	mov	ip, r0
  402942:	2420      	movs	r4, #32
  402944:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402948:	e009      	b.n	40295e <__ieee754_sqrt+0x82>
  40294a:	d020      	beq.n	40298e <__ieee754_sqrt+0xb2>
  40294c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  402950:	3c01      	subs	r4, #1
  402952:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402956:	442b      	add	r3, r5
  402958:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40295c:	d020      	beq.n	4029a0 <__ieee754_sqrt+0xc4>
  40295e:	4573      	cmp	r3, lr
  402960:	eb01 050c 	add.w	r5, r1, ip
  402964:	ddf1      	ble.n	40294a <__ieee754_sqrt+0x6e>
  402966:	2d00      	cmp	r5, #0
  402968:	eb05 0c01 	add.w	ip, r5, r1
  40296c:	db09      	blt.n	402982 <__ieee754_sqrt+0xa6>
  40296e:	46f0      	mov	r8, lr
  402970:	4295      	cmp	r5, r2
  402972:	eba3 030e 	sub.w	r3, r3, lr
  402976:	d900      	bls.n	40297a <__ieee754_sqrt+0x9e>
  402978:	3b01      	subs	r3, #1
  40297a:	1b52      	subs	r2, r2, r5
  40297c:	4408      	add	r0, r1
  40297e:	46c6      	mov	lr, r8
  402980:	e7e4      	b.n	40294c <__ieee754_sqrt+0x70>
  402982:	f1bc 0f00 	cmp.w	ip, #0
  402986:	dbf2      	blt.n	40296e <__ieee754_sqrt+0x92>
  402988:	f10e 0801 	add.w	r8, lr, #1
  40298c:	e7f0      	b.n	402970 <__ieee754_sqrt+0x94>
  40298e:	4295      	cmp	r5, r2
  402990:	d8dc      	bhi.n	40294c <__ieee754_sqrt+0x70>
  402992:	2d00      	cmp	r5, #0
  402994:	eb05 0c01 	add.w	ip, r5, r1
  402998:	db44      	blt.n	402a24 <__ieee754_sqrt+0x148>
  40299a:	4698      	mov	r8, r3
  40299c:	2300      	movs	r3, #0
  40299e:	e7ec      	b.n	40297a <__ieee754_sqrt+0x9e>
  4029a0:	4313      	orrs	r3, r2
  4029a2:	d113      	bne.n	4029cc <__ieee754_sqrt+0xf0>
  4029a4:	0840      	lsrs	r0, r0, #1
  4029a6:	1073      	asrs	r3, r6, #1
  4029a8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  4029ac:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4029b0:	07f2      	lsls	r2, r6, #31
  4029b2:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  4029b6:	bf48      	it	mi
  4029b8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  4029bc:	4649      	mov	r1, r9
  4029be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4029c2:	005b      	lsls	r3, r3, #1
  4029c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  4029c8:	0052      	lsls	r2, r2, #1
  4029ca:	e79d      	b.n	402908 <__ieee754_sqrt+0x2c>
  4029cc:	1c41      	adds	r1, r0, #1
  4029ce:	d02d      	beq.n	402a2c <__ieee754_sqrt+0x150>
  4029d0:	3001      	adds	r0, #1
  4029d2:	e7e7      	b.n	4029a4 <__ieee754_sqrt+0xc8>
  4029d4:	4606      	mov	r6, r0
  4029d6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4029da:	433e      	orrs	r6, r7
  4029dc:	d0ef      	beq.n	4029be <__ieee754_sqrt+0xe2>
  4029de:	bb69      	cbnz	r1, 402a3c <__ieee754_sqrt+0x160>
  4029e0:	460f      	mov	r7, r1
  4029e2:	0ad3      	lsrs	r3, r2, #11
  4029e4:	3f15      	subs	r7, #21
  4029e6:	0552      	lsls	r2, r2, #21
  4029e8:	2b00      	cmp	r3, #0
  4029ea:	d0fa      	beq.n	4029e2 <__ieee754_sqrt+0x106>
  4029ec:	02de      	lsls	r6, r3, #11
  4029ee:	d420      	bmi.n	402a32 <__ieee754_sqrt+0x156>
  4029f0:	2400      	movs	r4, #0
  4029f2:	e000      	b.n	4029f6 <__ieee754_sqrt+0x11a>
  4029f4:	4604      	mov	r4, r0
  4029f6:	005b      	lsls	r3, r3, #1
  4029f8:	02dd      	lsls	r5, r3, #11
  4029fa:	f104 0001 	add.w	r0, r4, #1
  4029fe:	d5f9      	bpl.n	4029f4 <__ieee754_sqrt+0x118>
  402a00:	f1c0 0120 	rsb	r1, r0, #32
  402a04:	fa22 f101 	lsr.w	r1, r2, r1
  402a08:	430b      	orrs	r3, r1
  402a0a:	1b3f      	subs	r7, r7, r4
  402a0c:	4082      	lsls	r2, r0
  402a0e:	e773      	b.n	4028f8 <__ieee754_sqrt+0x1c>
  402a10:	4602      	mov	r2, r0
  402a12:	460b      	mov	r3, r1
  402a14:	f000 fafa 	bl	40300c <__aeabi_dmul>
  402a18:	462a      	mov	r2, r5
  402a1a:	4623      	mov	r3, r4
  402a1c:	f000 f944 	bl	402ca8 <__adddf3>
  402a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a24:	f1bc 0f00 	cmp.w	ip, #0
  402a28:	daae      	bge.n	402988 <__ieee754_sqrt+0xac>
  402a2a:	e7b6      	b.n	40299a <__ieee754_sqrt+0xbe>
  402a2c:	3601      	adds	r6, #1
  402a2e:	4620      	mov	r0, r4
  402a30:	e7b9      	b.n	4029a6 <__ieee754_sqrt+0xca>
  402a32:	2000      	movs	r0, #0
  402a34:	2120      	movs	r1, #32
  402a36:	f04f 34ff 	mov.w	r4, #4294967295
  402a3a:	e7e3      	b.n	402a04 <__ieee754_sqrt+0x128>
  402a3c:	4602      	mov	r2, r0
  402a3e:	460b      	mov	r3, r1
  402a40:	f000 f930 	bl	402ca4 <__aeabi_dsub>
  402a44:	4602      	mov	r2, r0
  402a46:	460b      	mov	r3, r1
  402a48:	f000 fc0a 	bl	403260 <__aeabi_ddiv>
  402a4c:	e7b7      	b.n	4029be <__ieee754_sqrt+0xe2>
  402a4e:	bf00      	nop
  402a50:	7ff00000 	.word	0x7ff00000

00402a54 <fabs>:
  402a54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402a58:	4770      	bx	lr
  402a5a:	bf00      	nop

00402a5c <finite>:
  402a5c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  402a60:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
  402a64:	0fc0      	lsrs	r0, r0, #31
  402a66:	4770      	bx	lr

00402a68 <matherr>:
  402a68:	2000      	movs	r0, #0
  402a6a:	4770      	bx	lr

00402a6c <nan>:
  402a6c:	2000      	movs	r0, #0
  402a6e:	4901      	ldr	r1, [pc, #4]	; (402a74 <nan+0x8>)
  402a70:	4770      	bx	lr
  402a72:	bf00      	nop
  402a74:	7ff80000 	.word	0x7ff80000

00402a78 <rint>:
  402a78:	b5f0      	push	{r4, r5, r6, r7, lr}
  402a7a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
  402a7e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
  402a82:	2e13      	cmp	r6, #19
  402a84:	b083      	sub	sp, #12
  402a86:	4602      	mov	r2, r0
  402a88:	460b      	mov	r3, r1
  402a8a:	460c      	mov	r4, r1
  402a8c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
  402a90:	4607      	mov	r7, r0
  402a92:	dc2e      	bgt.n	402af2 <rint+0x7a>
  402a94:	2e00      	cmp	r6, #0
  402a96:	db49      	blt.n	402b2c <rint+0xb4>
  402a98:	493a      	ldr	r1, [pc, #232]	; (402b84 <rint+0x10c>)
  402a9a:	4131      	asrs	r1, r6
  402a9c:	ea03 0001 	and.w	r0, r3, r1
  402aa0:	4310      	orrs	r0, r2
  402aa2:	d02b      	beq.n	402afc <rint+0x84>
  402aa4:	0849      	lsrs	r1, r1, #1
  402aa6:	400b      	ands	r3, r1
  402aa8:	ea53 0702 	orrs.w	r7, r3, r2
  402aac:	d00c      	beq.n	402ac8 <rint+0x50>
  402aae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  402ab2:	2e13      	cmp	r6, #19
  402ab4:	ea24 0101 	bic.w	r1, r4, r1
  402ab8:	fa43 f406 	asr.w	r4, r3, r6
  402abc:	ea44 0401 	orr.w	r4, r4, r1
  402ac0:	bf0c      	ite	eq
  402ac2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
  402ac6:	2700      	movne	r7, #0
  402ac8:	4b2f      	ldr	r3, [pc, #188]	; (402b88 <rint+0x110>)
  402aca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  402ace:	4621      	mov	r1, r4
  402ad0:	e9d5 4500 	ldrd	r4, r5, [r5]
  402ad4:	4638      	mov	r0, r7
  402ad6:	4622      	mov	r2, r4
  402ad8:	462b      	mov	r3, r5
  402ada:	f000 f8e5 	bl	402ca8 <__adddf3>
  402ade:	e9cd 0100 	strd	r0, r1, [sp]
  402ae2:	4622      	mov	r2, r4
  402ae4:	462b      	mov	r3, r5
  402ae6:	e9dd 0100 	ldrd	r0, r1, [sp]
  402aea:	f000 f8db 	bl	402ca4 <__aeabi_dsub>
  402aee:	b003      	add	sp, #12
  402af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402af2:	2e33      	cmp	r6, #51	; 0x33
  402af4:	dd06      	ble.n	402b04 <rint+0x8c>
  402af6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  402afa:	d040      	beq.n	402b7e <rint+0x106>
  402afc:	4610      	mov	r0, r2
  402afe:	4619      	mov	r1, r3
  402b00:	b003      	add	sp, #12
  402b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b04:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
  402b08:	f04f 31ff 	mov.w	r1, #4294967295
  402b0c:	fa21 f10e 	lsr.w	r1, r1, lr
  402b10:	4208      	tst	r0, r1
  402b12:	d0f3      	beq.n	402afc <rint+0x84>
  402b14:	0849      	lsrs	r1, r1, #1
  402b16:	4208      	tst	r0, r1
  402b18:	d0d6      	beq.n	402ac8 <rint+0x50>
  402b1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402b1e:	ea20 0101 	bic.w	r1, r0, r1
  402b22:	fa43 fe0e 	asr.w	lr, r3, lr
  402b26:	ea4e 0701 	orr.w	r7, lr, r1
  402b2a:	e7cd      	b.n	402ac8 <rint+0x50>
  402b2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402b30:	4301      	orrs	r1, r0
  402b32:	d0e3      	beq.n	402afc <rint+0x84>
  402b34:	f3c3 0113 	ubfx	r1, r3, #0, #20
  402b38:	4e13      	ldr	r6, [pc, #76]	; (402b88 <rint+0x110>)
  402b3a:	4301      	orrs	r1, r0
  402b3c:	f1c1 0c00 	rsb	ip, r1, #0
  402b40:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
  402b44:	e9d6 6700 	ldrd	r6, r7, [r6]
  402b48:	ea4c 0c01 	orr.w	ip, ip, r1
  402b4c:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
  402b50:	0c5c      	lsrs	r4, r3, #17
  402b52:	0464      	lsls	r4, r4, #17
  402b54:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
  402b58:	ea43 0104 	orr.w	r1, r3, r4
  402b5c:	4632      	mov	r2, r6
  402b5e:	463b      	mov	r3, r7
  402b60:	f000 f8a2 	bl	402ca8 <__adddf3>
  402b64:	e9cd 0100 	strd	r0, r1, [sp]
  402b68:	4632      	mov	r2, r6
  402b6a:	463b      	mov	r3, r7
  402b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
  402b70:	f000 f898 	bl	402ca4 <__aeabi_dsub>
  402b74:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  402b78:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
  402b7c:	e7c0      	b.n	402b00 <rint+0x88>
  402b7e:	f000 f893 	bl	402ca8 <__adddf3>
  402b82:	e7bd      	b.n	402b00 <rint+0x88>
  402b84:	000fffff 	.word	0x000fffff
  402b88:	00404ab8 	.word	0x00404ab8
  402b8c:	00000000 	.word	0x00000000

00402b90 <scalbn>:
  402b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b92:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402b96:	4604      	mov	r4, r0
  402b98:	460d      	mov	r5, r1
  402b9a:	460b      	mov	r3, r1
  402b9c:	4617      	mov	r7, r2
  402b9e:	bb0e      	cbnz	r6, 402be4 <scalbn+0x54>
  402ba0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402ba4:	4303      	orrs	r3, r0
  402ba6:	4686      	mov	lr, r0
  402ba8:	d025      	beq.n	402bf6 <scalbn+0x66>
  402baa:	2200      	movs	r2, #0
  402bac:	4b34      	ldr	r3, [pc, #208]	; (402c80 <scalbn+0xf0>)
  402bae:	f000 fa2d 	bl	40300c <__aeabi_dmul>
  402bb2:	4a34      	ldr	r2, [pc, #208]	; (402c84 <scalbn+0xf4>)
  402bb4:	4297      	cmp	r7, r2
  402bb6:	4604      	mov	r4, r0
  402bb8:	460d      	mov	r5, r1
  402bba:	460b      	mov	r3, r1
  402bbc:	db2a      	blt.n	402c14 <scalbn+0x84>
  402bbe:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402bc2:	3e36      	subs	r6, #54	; 0x36
  402bc4:	443e      	add	r6, r7
  402bc6:	f240 72fe 	movw	r2, #2046	; 0x7fe
  402bca:	4296      	cmp	r6, r2
  402bcc:	dc28      	bgt.n	402c20 <scalbn+0x90>
  402bce:	2e00      	cmp	r6, #0
  402bd0:	dd12      	ble.n	402bf8 <scalbn+0x68>
  402bd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402bd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402bda:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402bde:	4620      	mov	r0, r4
  402be0:	4629      	mov	r1, r5
  402be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402be4:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402be8:	4296      	cmp	r6, r2
  402bea:	d1eb      	bne.n	402bc4 <scalbn+0x34>
  402bec:	4602      	mov	r2, r0
  402bee:	460b      	mov	r3, r1
  402bf0:	f000 f85a 	bl	402ca8 <__adddf3>
  402bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402bf8:	f116 0f35 	cmn.w	r6, #53	; 0x35
  402bfc:	da1d      	bge.n	402c3a <scalbn+0xaa>
  402bfe:	f24c 3350 	movw	r3, #50000	; 0xc350
  402c02:	429f      	cmp	r7, r3
  402c04:	4622      	mov	r2, r4
  402c06:	462b      	mov	r3, r5
  402c08:	dc25      	bgt.n	402c56 <scalbn+0xc6>
  402c0a:	a119      	add	r1, pc, #100	; (adr r1, 402c70 <scalbn+0xe0>)
  402c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
  402c10:	f000 f83c 	bl	402c8c <copysign>
  402c14:	a316      	add	r3, pc, #88	; (adr r3, 402c70 <scalbn+0xe0>)
  402c16:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c1a:	f000 f9f7 	bl	40300c <__aeabi_dmul>
  402c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c20:	4622      	mov	r2, r4
  402c22:	462b      	mov	r3, r5
  402c24:	a114      	add	r1, pc, #80	; (adr r1, 402c78 <scalbn+0xe8>)
  402c26:	e9d1 0100 	ldrd	r0, r1, [r1]
  402c2a:	f000 f82f 	bl	402c8c <copysign>
  402c2e:	a312      	add	r3, pc, #72	; (adr r3, 402c78 <scalbn+0xe8>)
  402c30:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c34:	f000 f9ea 	bl	40300c <__aeabi_dmul>
  402c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402c3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402c42:	3636      	adds	r6, #54	; 0x36
  402c44:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402c48:	4620      	mov	r0, r4
  402c4a:	4629      	mov	r1, r5
  402c4c:	2200      	movs	r2, #0
  402c4e:	4b0e      	ldr	r3, [pc, #56]	; (402c88 <scalbn+0xf8>)
  402c50:	f000 f9dc 	bl	40300c <__aeabi_dmul>
  402c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c56:	a108      	add	r1, pc, #32	; (adr r1, 402c78 <scalbn+0xe8>)
  402c58:	e9d1 0100 	ldrd	r0, r1, [r1]
  402c5c:	f000 f816 	bl	402c8c <copysign>
  402c60:	a305      	add	r3, pc, #20	; (adr r3, 402c78 <scalbn+0xe8>)
  402c62:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c66:	f000 f9d1 	bl	40300c <__aeabi_dmul>
  402c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c6c:	f3af 8000 	nop.w
  402c70:	c2f8f359 	.word	0xc2f8f359
  402c74:	01a56e1f 	.word	0x01a56e1f
  402c78:	8800759c 	.word	0x8800759c
  402c7c:	7e37e43c 	.word	0x7e37e43c
  402c80:	43500000 	.word	0x43500000
  402c84:	ffff3cb0 	.word	0xffff3cb0
  402c88:	3c900000 	.word	0x3c900000

00402c8c <copysign>:
  402c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  402c90:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  402c94:	ea42 0103 	orr.w	r1, r2, r3
  402c98:	4770      	bx	lr
  402c9a:	bf00      	nop

00402c9c <__aeabi_drsub>:
  402c9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402ca0:	e002      	b.n	402ca8 <__adddf3>
  402ca2:	bf00      	nop

00402ca4 <__aeabi_dsub>:
  402ca4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402ca8 <__adddf3>:
  402ca8:	b530      	push	{r4, r5, lr}
  402caa:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402cae:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402cb2:	ea94 0f05 	teq	r4, r5
  402cb6:	bf08      	it	eq
  402cb8:	ea90 0f02 	teqeq	r0, r2
  402cbc:	bf1f      	itttt	ne
  402cbe:	ea54 0c00 	orrsne.w	ip, r4, r0
  402cc2:	ea55 0c02 	orrsne.w	ip, r5, r2
  402cc6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402cca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402cce:	f000 80e2 	beq.w	402e96 <__adddf3+0x1ee>
  402cd2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402cd6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402cda:	bfb8      	it	lt
  402cdc:	426d      	neglt	r5, r5
  402cde:	dd0c      	ble.n	402cfa <__adddf3+0x52>
  402ce0:	442c      	add	r4, r5
  402ce2:	ea80 0202 	eor.w	r2, r0, r2
  402ce6:	ea81 0303 	eor.w	r3, r1, r3
  402cea:	ea82 0000 	eor.w	r0, r2, r0
  402cee:	ea83 0101 	eor.w	r1, r3, r1
  402cf2:	ea80 0202 	eor.w	r2, r0, r2
  402cf6:	ea81 0303 	eor.w	r3, r1, r3
  402cfa:	2d36      	cmp	r5, #54	; 0x36
  402cfc:	bf88      	it	hi
  402cfe:	bd30      	pophi	{r4, r5, pc}
  402d00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402d04:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402d08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402d0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402d10:	d002      	beq.n	402d18 <__adddf3+0x70>
  402d12:	4240      	negs	r0, r0
  402d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402d18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402d1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402d20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402d24:	d002      	beq.n	402d2c <__adddf3+0x84>
  402d26:	4252      	negs	r2, r2
  402d28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402d2c:	ea94 0f05 	teq	r4, r5
  402d30:	f000 80a7 	beq.w	402e82 <__adddf3+0x1da>
  402d34:	f1a4 0401 	sub.w	r4, r4, #1
  402d38:	f1d5 0e20 	rsbs	lr, r5, #32
  402d3c:	db0d      	blt.n	402d5a <__adddf3+0xb2>
  402d3e:	fa02 fc0e 	lsl.w	ip, r2, lr
  402d42:	fa22 f205 	lsr.w	r2, r2, r5
  402d46:	1880      	adds	r0, r0, r2
  402d48:	f141 0100 	adc.w	r1, r1, #0
  402d4c:	fa03 f20e 	lsl.w	r2, r3, lr
  402d50:	1880      	adds	r0, r0, r2
  402d52:	fa43 f305 	asr.w	r3, r3, r5
  402d56:	4159      	adcs	r1, r3
  402d58:	e00e      	b.n	402d78 <__adddf3+0xd0>
  402d5a:	f1a5 0520 	sub.w	r5, r5, #32
  402d5e:	f10e 0e20 	add.w	lr, lr, #32
  402d62:	2a01      	cmp	r2, #1
  402d64:	fa03 fc0e 	lsl.w	ip, r3, lr
  402d68:	bf28      	it	cs
  402d6a:	f04c 0c02 	orrcs.w	ip, ip, #2
  402d6e:	fa43 f305 	asr.w	r3, r3, r5
  402d72:	18c0      	adds	r0, r0, r3
  402d74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402d78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402d7c:	d507      	bpl.n	402d8e <__adddf3+0xe6>
  402d7e:	f04f 0e00 	mov.w	lr, #0
  402d82:	f1dc 0c00 	rsbs	ip, ip, #0
  402d86:	eb7e 0000 	sbcs.w	r0, lr, r0
  402d8a:	eb6e 0101 	sbc.w	r1, lr, r1
  402d8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402d92:	d31b      	bcc.n	402dcc <__adddf3+0x124>
  402d94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402d98:	d30c      	bcc.n	402db4 <__adddf3+0x10c>
  402d9a:	0849      	lsrs	r1, r1, #1
  402d9c:	ea5f 0030 	movs.w	r0, r0, rrx
  402da0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402da4:	f104 0401 	add.w	r4, r4, #1
  402da8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402dac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402db0:	f080 809a 	bcs.w	402ee8 <__adddf3+0x240>
  402db4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402db8:	bf08      	it	eq
  402dba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402dbe:	f150 0000 	adcs.w	r0, r0, #0
  402dc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402dc6:	ea41 0105 	orr.w	r1, r1, r5
  402dca:	bd30      	pop	{r4, r5, pc}
  402dcc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402dd0:	4140      	adcs	r0, r0
  402dd2:	eb41 0101 	adc.w	r1, r1, r1
  402dd6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402dda:	f1a4 0401 	sub.w	r4, r4, #1
  402dde:	d1e9      	bne.n	402db4 <__adddf3+0x10c>
  402de0:	f091 0f00 	teq	r1, #0
  402de4:	bf04      	itt	eq
  402de6:	4601      	moveq	r1, r0
  402de8:	2000      	moveq	r0, #0
  402dea:	fab1 f381 	clz	r3, r1
  402dee:	bf08      	it	eq
  402df0:	3320      	addeq	r3, #32
  402df2:	f1a3 030b 	sub.w	r3, r3, #11
  402df6:	f1b3 0220 	subs.w	r2, r3, #32
  402dfa:	da0c      	bge.n	402e16 <__adddf3+0x16e>
  402dfc:	320c      	adds	r2, #12
  402dfe:	dd08      	ble.n	402e12 <__adddf3+0x16a>
  402e00:	f102 0c14 	add.w	ip, r2, #20
  402e04:	f1c2 020c 	rsb	r2, r2, #12
  402e08:	fa01 f00c 	lsl.w	r0, r1, ip
  402e0c:	fa21 f102 	lsr.w	r1, r1, r2
  402e10:	e00c      	b.n	402e2c <__adddf3+0x184>
  402e12:	f102 0214 	add.w	r2, r2, #20
  402e16:	bfd8      	it	le
  402e18:	f1c2 0c20 	rsble	ip, r2, #32
  402e1c:	fa01 f102 	lsl.w	r1, r1, r2
  402e20:	fa20 fc0c 	lsr.w	ip, r0, ip
  402e24:	bfdc      	itt	le
  402e26:	ea41 010c 	orrle.w	r1, r1, ip
  402e2a:	4090      	lslle	r0, r2
  402e2c:	1ae4      	subs	r4, r4, r3
  402e2e:	bfa2      	ittt	ge
  402e30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402e34:	4329      	orrge	r1, r5
  402e36:	bd30      	popge	{r4, r5, pc}
  402e38:	ea6f 0404 	mvn.w	r4, r4
  402e3c:	3c1f      	subs	r4, #31
  402e3e:	da1c      	bge.n	402e7a <__adddf3+0x1d2>
  402e40:	340c      	adds	r4, #12
  402e42:	dc0e      	bgt.n	402e62 <__adddf3+0x1ba>
  402e44:	f104 0414 	add.w	r4, r4, #20
  402e48:	f1c4 0220 	rsb	r2, r4, #32
  402e4c:	fa20 f004 	lsr.w	r0, r0, r4
  402e50:	fa01 f302 	lsl.w	r3, r1, r2
  402e54:	ea40 0003 	orr.w	r0, r0, r3
  402e58:	fa21 f304 	lsr.w	r3, r1, r4
  402e5c:	ea45 0103 	orr.w	r1, r5, r3
  402e60:	bd30      	pop	{r4, r5, pc}
  402e62:	f1c4 040c 	rsb	r4, r4, #12
  402e66:	f1c4 0220 	rsb	r2, r4, #32
  402e6a:	fa20 f002 	lsr.w	r0, r0, r2
  402e6e:	fa01 f304 	lsl.w	r3, r1, r4
  402e72:	ea40 0003 	orr.w	r0, r0, r3
  402e76:	4629      	mov	r1, r5
  402e78:	bd30      	pop	{r4, r5, pc}
  402e7a:	fa21 f004 	lsr.w	r0, r1, r4
  402e7e:	4629      	mov	r1, r5
  402e80:	bd30      	pop	{r4, r5, pc}
  402e82:	f094 0f00 	teq	r4, #0
  402e86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402e8a:	bf06      	itte	eq
  402e8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402e90:	3401      	addeq	r4, #1
  402e92:	3d01      	subne	r5, #1
  402e94:	e74e      	b.n	402d34 <__adddf3+0x8c>
  402e96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402e9a:	bf18      	it	ne
  402e9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402ea0:	d029      	beq.n	402ef6 <__adddf3+0x24e>
  402ea2:	ea94 0f05 	teq	r4, r5
  402ea6:	bf08      	it	eq
  402ea8:	ea90 0f02 	teqeq	r0, r2
  402eac:	d005      	beq.n	402eba <__adddf3+0x212>
  402eae:	ea54 0c00 	orrs.w	ip, r4, r0
  402eb2:	bf04      	itt	eq
  402eb4:	4619      	moveq	r1, r3
  402eb6:	4610      	moveq	r0, r2
  402eb8:	bd30      	pop	{r4, r5, pc}
  402eba:	ea91 0f03 	teq	r1, r3
  402ebe:	bf1e      	ittt	ne
  402ec0:	2100      	movne	r1, #0
  402ec2:	2000      	movne	r0, #0
  402ec4:	bd30      	popne	{r4, r5, pc}
  402ec6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402eca:	d105      	bne.n	402ed8 <__adddf3+0x230>
  402ecc:	0040      	lsls	r0, r0, #1
  402ece:	4149      	adcs	r1, r1
  402ed0:	bf28      	it	cs
  402ed2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402ed6:	bd30      	pop	{r4, r5, pc}
  402ed8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402edc:	bf3c      	itt	cc
  402ede:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402ee2:	bd30      	popcc	{r4, r5, pc}
  402ee4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402ee8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402eec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402ef0:	f04f 0000 	mov.w	r0, #0
  402ef4:	bd30      	pop	{r4, r5, pc}
  402ef6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402efa:	bf1a      	itte	ne
  402efc:	4619      	movne	r1, r3
  402efe:	4610      	movne	r0, r2
  402f00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402f04:	bf1c      	itt	ne
  402f06:	460b      	movne	r3, r1
  402f08:	4602      	movne	r2, r0
  402f0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402f0e:	bf06      	itte	eq
  402f10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402f14:	ea91 0f03 	teqeq	r1, r3
  402f18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402f1c:	bd30      	pop	{r4, r5, pc}
  402f1e:	bf00      	nop

00402f20 <__aeabi_ui2d>:
  402f20:	f090 0f00 	teq	r0, #0
  402f24:	bf04      	itt	eq
  402f26:	2100      	moveq	r1, #0
  402f28:	4770      	bxeq	lr
  402f2a:	b530      	push	{r4, r5, lr}
  402f2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402f30:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402f34:	f04f 0500 	mov.w	r5, #0
  402f38:	f04f 0100 	mov.w	r1, #0
  402f3c:	e750      	b.n	402de0 <__adddf3+0x138>
  402f3e:	bf00      	nop

00402f40 <__aeabi_i2d>:
  402f40:	f090 0f00 	teq	r0, #0
  402f44:	bf04      	itt	eq
  402f46:	2100      	moveq	r1, #0
  402f48:	4770      	bxeq	lr
  402f4a:	b530      	push	{r4, r5, lr}
  402f4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402f50:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402f54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402f58:	bf48      	it	mi
  402f5a:	4240      	negmi	r0, r0
  402f5c:	f04f 0100 	mov.w	r1, #0
  402f60:	e73e      	b.n	402de0 <__adddf3+0x138>
  402f62:	bf00      	nop

00402f64 <__aeabi_f2d>:
  402f64:	0042      	lsls	r2, r0, #1
  402f66:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402f6a:	ea4f 0131 	mov.w	r1, r1, rrx
  402f6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402f72:	bf1f      	itttt	ne
  402f74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402f78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402f7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402f80:	4770      	bxne	lr
  402f82:	f092 0f00 	teq	r2, #0
  402f86:	bf14      	ite	ne
  402f88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402f8c:	4770      	bxeq	lr
  402f8e:	b530      	push	{r4, r5, lr}
  402f90:	f44f 7460 	mov.w	r4, #896	; 0x380
  402f94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402f98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402f9c:	e720      	b.n	402de0 <__adddf3+0x138>
  402f9e:	bf00      	nop

00402fa0 <__aeabi_ul2d>:
  402fa0:	ea50 0201 	orrs.w	r2, r0, r1
  402fa4:	bf08      	it	eq
  402fa6:	4770      	bxeq	lr
  402fa8:	b530      	push	{r4, r5, lr}
  402faa:	f04f 0500 	mov.w	r5, #0
  402fae:	e00a      	b.n	402fc6 <__aeabi_l2d+0x16>

00402fb0 <__aeabi_l2d>:
  402fb0:	ea50 0201 	orrs.w	r2, r0, r1
  402fb4:	bf08      	it	eq
  402fb6:	4770      	bxeq	lr
  402fb8:	b530      	push	{r4, r5, lr}
  402fba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402fbe:	d502      	bpl.n	402fc6 <__aeabi_l2d+0x16>
  402fc0:	4240      	negs	r0, r0
  402fc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402fc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402fca:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402fce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402fd2:	f43f aedc 	beq.w	402d8e <__adddf3+0xe6>
  402fd6:	f04f 0203 	mov.w	r2, #3
  402fda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402fde:	bf18      	it	ne
  402fe0:	3203      	addne	r2, #3
  402fe2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402fe6:	bf18      	it	ne
  402fe8:	3203      	addne	r2, #3
  402fea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402fee:	f1c2 0320 	rsb	r3, r2, #32
  402ff2:	fa00 fc03 	lsl.w	ip, r0, r3
  402ff6:	fa20 f002 	lsr.w	r0, r0, r2
  402ffa:	fa01 fe03 	lsl.w	lr, r1, r3
  402ffe:	ea40 000e 	orr.w	r0, r0, lr
  403002:	fa21 f102 	lsr.w	r1, r1, r2
  403006:	4414      	add	r4, r2
  403008:	e6c1      	b.n	402d8e <__adddf3+0xe6>
  40300a:	bf00      	nop

0040300c <__aeabi_dmul>:
  40300c:	b570      	push	{r4, r5, r6, lr}
  40300e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403012:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403016:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40301a:	bf1d      	ittte	ne
  40301c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403020:	ea94 0f0c 	teqne	r4, ip
  403024:	ea95 0f0c 	teqne	r5, ip
  403028:	f000 f8de 	bleq	4031e8 <__aeabi_dmul+0x1dc>
  40302c:	442c      	add	r4, r5
  40302e:	ea81 0603 	eor.w	r6, r1, r3
  403032:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403036:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40303a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40303e:	bf18      	it	ne
  403040:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403044:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40304c:	d038      	beq.n	4030c0 <__aeabi_dmul+0xb4>
  40304e:	fba0 ce02 	umull	ip, lr, r0, r2
  403052:	f04f 0500 	mov.w	r5, #0
  403056:	fbe1 e502 	umlal	lr, r5, r1, r2
  40305a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40305e:	fbe0 e503 	umlal	lr, r5, r0, r3
  403062:	f04f 0600 	mov.w	r6, #0
  403066:	fbe1 5603 	umlal	r5, r6, r1, r3
  40306a:	f09c 0f00 	teq	ip, #0
  40306e:	bf18      	it	ne
  403070:	f04e 0e01 	orrne.w	lr, lr, #1
  403074:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403078:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40307c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403080:	d204      	bcs.n	40308c <__aeabi_dmul+0x80>
  403082:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403086:	416d      	adcs	r5, r5
  403088:	eb46 0606 	adc.w	r6, r6, r6
  40308c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403090:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403094:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403098:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40309c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4030a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4030a4:	bf88      	it	hi
  4030a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4030aa:	d81e      	bhi.n	4030ea <__aeabi_dmul+0xde>
  4030ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4030b0:	bf08      	it	eq
  4030b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4030b6:	f150 0000 	adcs.w	r0, r0, #0
  4030ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4030be:	bd70      	pop	{r4, r5, r6, pc}
  4030c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4030c4:	ea46 0101 	orr.w	r1, r6, r1
  4030c8:	ea40 0002 	orr.w	r0, r0, r2
  4030cc:	ea81 0103 	eor.w	r1, r1, r3
  4030d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4030d4:	bfc2      	ittt	gt
  4030d6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4030da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4030de:	bd70      	popgt	{r4, r5, r6, pc}
  4030e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4030e4:	f04f 0e00 	mov.w	lr, #0
  4030e8:	3c01      	subs	r4, #1
  4030ea:	f300 80ab 	bgt.w	403244 <__aeabi_dmul+0x238>
  4030ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4030f2:	bfde      	ittt	le
  4030f4:	2000      	movle	r0, #0
  4030f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4030fa:	bd70      	pople	{r4, r5, r6, pc}
  4030fc:	f1c4 0400 	rsb	r4, r4, #0
  403100:	3c20      	subs	r4, #32
  403102:	da35      	bge.n	403170 <__aeabi_dmul+0x164>
  403104:	340c      	adds	r4, #12
  403106:	dc1b      	bgt.n	403140 <__aeabi_dmul+0x134>
  403108:	f104 0414 	add.w	r4, r4, #20
  40310c:	f1c4 0520 	rsb	r5, r4, #32
  403110:	fa00 f305 	lsl.w	r3, r0, r5
  403114:	fa20 f004 	lsr.w	r0, r0, r4
  403118:	fa01 f205 	lsl.w	r2, r1, r5
  40311c:	ea40 0002 	orr.w	r0, r0, r2
  403120:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403124:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403128:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40312c:	fa21 f604 	lsr.w	r6, r1, r4
  403130:	eb42 0106 	adc.w	r1, r2, r6
  403134:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403138:	bf08      	it	eq
  40313a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40313e:	bd70      	pop	{r4, r5, r6, pc}
  403140:	f1c4 040c 	rsb	r4, r4, #12
  403144:	f1c4 0520 	rsb	r5, r4, #32
  403148:	fa00 f304 	lsl.w	r3, r0, r4
  40314c:	fa20 f005 	lsr.w	r0, r0, r5
  403150:	fa01 f204 	lsl.w	r2, r1, r4
  403154:	ea40 0002 	orr.w	r0, r0, r2
  403158:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40315c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403160:	f141 0100 	adc.w	r1, r1, #0
  403164:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403168:	bf08      	it	eq
  40316a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40316e:	bd70      	pop	{r4, r5, r6, pc}
  403170:	f1c4 0520 	rsb	r5, r4, #32
  403174:	fa00 f205 	lsl.w	r2, r0, r5
  403178:	ea4e 0e02 	orr.w	lr, lr, r2
  40317c:	fa20 f304 	lsr.w	r3, r0, r4
  403180:	fa01 f205 	lsl.w	r2, r1, r5
  403184:	ea43 0302 	orr.w	r3, r3, r2
  403188:	fa21 f004 	lsr.w	r0, r1, r4
  40318c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403190:	fa21 f204 	lsr.w	r2, r1, r4
  403194:	ea20 0002 	bic.w	r0, r0, r2
  403198:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40319c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4031a0:	bf08      	it	eq
  4031a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4031a6:	bd70      	pop	{r4, r5, r6, pc}
  4031a8:	f094 0f00 	teq	r4, #0
  4031ac:	d10f      	bne.n	4031ce <__aeabi_dmul+0x1c2>
  4031ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4031b2:	0040      	lsls	r0, r0, #1
  4031b4:	eb41 0101 	adc.w	r1, r1, r1
  4031b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4031bc:	bf08      	it	eq
  4031be:	3c01      	subeq	r4, #1
  4031c0:	d0f7      	beq.n	4031b2 <__aeabi_dmul+0x1a6>
  4031c2:	ea41 0106 	orr.w	r1, r1, r6
  4031c6:	f095 0f00 	teq	r5, #0
  4031ca:	bf18      	it	ne
  4031cc:	4770      	bxne	lr
  4031ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4031d2:	0052      	lsls	r2, r2, #1
  4031d4:	eb43 0303 	adc.w	r3, r3, r3
  4031d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4031dc:	bf08      	it	eq
  4031de:	3d01      	subeq	r5, #1
  4031e0:	d0f7      	beq.n	4031d2 <__aeabi_dmul+0x1c6>
  4031e2:	ea43 0306 	orr.w	r3, r3, r6
  4031e6:	4770      	bx	lr
  4031e8:	ea94 0f0c 	teq	r4, ip
  4031ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4031f0:	bf18      	it	ne
  4031f2:	ea95 0f0c 	teqne	r5, ip
  4031f6:	d00c      	beq.n	403212 <__aeabi_dmul+0x206>
  4031f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4031fc:	bf18      	it	ne
  4031fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403202:	d1d1      	bne.n	4031a8 <__aeabi_dmul+0x19c>
  403204:	ea81 0103 	eor.w	r1, r1, r3
  403208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40320c:	f04f 0000 	mov.w	r0, #0
  403210:	bd70      	pop	{r4, r5, r6, pc}
  403212:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403216:	bf06      	itte	eq
  403218:	4610      	moveq	r0, r2
  40321a:	4619      	moveq	r1, r3
  40321c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403220:	d019      	beq.n	403256 <__aeabi_dmul+0x24a>
  403222:	ea94 0f0c 	teq	r4, ip
  403226:	d102      	bne.n	40322e <__aeabi_dmul+0x222>
  403228:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40322c:	d113      	bne.n	403256 <__aeabi_dmul+0x24a>
  40322e:	ea95 0f0c 	teq	r5, ip
  403232:	d105      	bne.n	403240 <__aeabi_dmul+0x234>
  403234:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403238:	bf1c      	itt	ne
  40323a:	4610      	movne	r0, r2
  40323c:	4619      	movne	r1, r3
  40323e:	d10a      	bne.n	403256 <__aeabi_dmul+0x24a>
  403240:	ea81 0103 	eor.w	r1, r1, r3
  403244:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403248:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40324c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403250:	f04f 0000 	mov.w	r0, #0
  403254:	bd70      	pop	{r4, r5, r6, pc}
  403256:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40325a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40325e:	bd70      	pop	{r4, r5, r6, pc}

00403260 <__aeabi_ddiv>:
  403260:	b570      	push	{r4, r5, r6, lr}
  403262:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403266:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40326a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40326e:	bf1d      	ittte	ne
  403270:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403274:	ea94 0f0c 	teqne	r4, ip
  403278:	ea95 0f0c 	teqne	r5, ip
  40327c:	f000 f8a7 	bleq	4033ce <__aeabi_ddiv+0x16e>
  403280:	eba4 0405 	sub.w	r4, r4, r5
  403284:	ea81 0e03 	eor.w	lr, r1, r3
  403288:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40328c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403290:	f000 8088 	beq.w	4033a4 <__aeabi_ddiv+0x144>
  403294:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403298:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40329c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4032a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4032a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4032a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4032ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4032b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4032b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4032b8:	429d      	cmp	r5, r3
  4032ba:	bf08      	it	eq
  4032bc:	4296      	cmpeq	r6, r2
  4032be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4032c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4032c6:	d202      	bcs.n	4032ce <__aeabi_ddiv+0x6e>
  4032c8:	085b      	lsrs	r3, r3, #1
  4032ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4032ce:	1ab6      	subs	r6, r6, r2
  4032d0:	eb65 0503 	sbc.w	r5, r5, r3
  4032d4:	085b      	lsrs	r3, r3, #1
  4032d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4032da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4032de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4032e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4032e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4032ea:	bf22      	ittt	cs
  4032ec:	1ab6      	subcs	r6, r6, r2
  4032ee:	4675      	movcs	r5, lr
  4032f0:	ea40 000c 	orrcs.w	r0, r0, ip
  4032f4:	085b      	lsrs	r3, r3, #1
  4032f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4032fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4032fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  403302:	bf22      	ittt	cs
  403304:	1ab6      	subcs	r6, r6, r2
  403306:	4675      	movcs	r5, lr
  403308:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40330c:	085b      	lsrs	r3, r3, #1
  40330e:	ea4f 0232 	mov.w	r2, r2, rrx
  403312:	ebb6 0e02 	subs.w	lr, r6, r2
  403316:	eb75 0e03 	sbcs.w	lr, r5, r3
  40331a:	bf22      	ittt	cs
  40331c:	1ab6      	subcs	r6, r6, r2
  40331e:	4675      	movcs	r5, lr
  403320:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403324:	085b      	lsrs	r3, r3, #1
  403326:	ea4f 0232 	mov.w	r2, r2, rrx
  40332a:	ebb6 0e02 	subs.w	lr, r6, r2
  40332e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403332:	bf22      	ittt	cs
  403334:	1ab6      	subcs	r6, r6, r2
  403336:	4675      	movcs	r5, lr
  403338:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40333c:	ea55 0e06 	orrs.w	lr, r5, r6
  403340:	d018      	beq.n	403374 <__aeabi_ddiv+0x114>
  403342:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403346:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40334a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40334e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403352:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403356:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40335a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40335e:	d1c0      	bne.n	4032e2 <__aeabi_ddiv+0x82>
  403360:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403364:	d10b      	bne.n	40337e <__aeabi_ddiv+0x11e>
  403366:	ea41 0100 	orr.w	r1, r1, r0
  40336a:	f04f 0000 	mov.w	r0, #0
  40336e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403372:	e7b6      	b.n	4032e2 <__aeabi_ddiv+0x82>
  403374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403378:	bf04      	itt	eq
  40337a:	4301      	orreq	r1, r0
  40337c:	2000      	moveq	r0, #0
  40337e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403382:	bf88      	it	hi
  403384:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403388:	f63f aeaf 	bhi.w	4030ea <__aeabi_dmul+0xde>
  40338c:	ebb5 0c03 	subs.w	ip, r5, r3
  403390:	bf04      	itt	eq
  403392:	ebb6 0c02 	subseq.w	ip, r6, r2
  403396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40339a:	f150 0000 	adcs.w	r0, r0, #0
  40339e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4033a2:	bd70      	pop	{r4, r5, r6, pc}
  4033a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4033a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4033ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4033b0:	bfc2      	ittt	gt
  4033b2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4033b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4033ba:	bd70      	popgt	{r4, r5, r6, pc}
  4033bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4033c0:	f04f 0e00 	mov.w	lr, #0
  4033c4:	3c01      	subs	r4, #1
  4033c6:	e690      	b.n	4030ea <__aeabi_dmul+0xde>
  4033c8:	ea45 0e06 	orr.w	lr, r5, r6
  4033cc:	e68d      	b.n	4030ea <__aeabi_dmul+0xde>
  4033ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4033d2:	ea94 0f0c 	teq	r4, ip
  4033d6:	bf08      	it	eq
  4033d8:	ea95 0f0c 	teqeq	r5, ip
  4033dc:	f43f af3b 	beq.w	403256 <__aeabi_dmul+0x24a>
  4033e0:	ea94 0f0c 	teq	r4, ip
  4033e4:	d10a      	bne.n	4033fc <__aeabi_ddiv+0x19c>
  4033e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4033ea:	f47f af34 	bne.w	403256 <__aeabi_dmul+0x24a>
  4033ee:	ea95 0f0c 	teq	r5, ip
  4033f2:	f47f af25 	bne.w	403240 <__aeabi_dmul+0x234>
  4033f6:	4610      	mov	r0, r2
  4033f8:	4619      	mov	r1, r3
  4033fa:	e72c      	b.n	403256 <__aeabi_dmul+0x24a>
  4033fc:	ea95 0f0c 	teq	r5, ip
  403400:	d106      	bne.n	403410 <__aeabi_ddiv+0x1b0>
  403402:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403406:	f43f aefd 	beq.w	403204 <__aeabi_dmul+0x1f8>
  40340a:	4610      	mov	r0, r2
  40340c:	4619      	mov	r1, r3
  40340e:	e722      	b.n	403256 <__aeabi_dmul+0x24a>
  403410:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403414:	bf18      	it	ne
  403416:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40341a:	f47f aec5 	bne.w	4031a8 <__aeabi_dmul+0x19c>
  40341e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403422:	f47f af0d 	bne.w	403240 <__aeabi_dmul+0x234>
  403426:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40342a:	f47f aeeb 	bne.w	403204 <__aeabi_dmul+0x1f8>
  40342e:	e712      	b.n	403256 <__aeabi_dmul+0x24a>

00403430 <__gedf2>:
  403430:	f04f 3cff 	mov.w	ip, #4294967295
  403434:	e006      	b.n	403444 <__cmpdf2+0x4>
  403436:	bf00      	nop

00403438 <__ledf2>:
  403438:	f04f 0c01 	mov.w	ip, #1
  40343c:	e002      	b.n	403444 <__cmpdf2+0x4>
  40343e:	bf00      	nop

00403440 <__cmpdf2>:
  403440:	f04f 0c01 	mov.w	ip, #1
  403444:	f84d cd04 	str.w	ip, [sp, #-4]!
  403448:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40344c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403450:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403454:	bf18      	it	ne
  403456:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40345a:	d01b      	beq.n	403494 <__cmpdf2+0x54>
  40345c:	b001      	add	sp, #4
  40345e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403462:	bf0c      	ite	eq
  403464:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403468:	ea91 0f03 	teqne	r1, r3
  40346c:	bf02      	ittt	eq
  40346e:	ea90 0f02 	teqeq	r0, r2
  403472:	2000      	moveq	r0, #0
  403474:	4770      	bxeq	lr
  403476:	f110 0f00 	cmn.w	r0, #0
  40347a:	ea91 0f03 	teq	r1, r3
  40347e:	bf58      	it	pl
  403480:	4299      	cmppl	r1, r3
  403482:	bf08      	it	eq
  403484:	4290      	cmpeq	r0, r2
  403486:	bf2c      	ite	cs
  403488:	17d8      	asrcs	r0, r3, #31
  40348a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40348e:	f040 0001 	orr.w	r0, r0, #1
  403492:	4770      	bx	lr
  403494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40349c:	d102      	bne.n	4034a4 <__cmpdf2+0x64>
  40349e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4034a2:	d107      	bne.n	4034b4 <__cmpdf2+0x74>
  4034a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4034a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4034ac:	d1d6      	bne.n	40345c <__cmpdf2+0x1c>
  4034ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4034b2:	d0d3      	beq.n	40345c <__cmpdf2+0x1c>
  4034b4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4034b8:	4770      	bx	lr
  4034ba:	bf00      	nop

004034bc <__aeabi_cdrcmple>:
  4034bc:	4684      	mov	ip, r0
  4034be:	4610      	mov	r0, r2
  4034c0:	4662      	mov	r2, ip
  4034c2:	468c      	mov	ip, r1
  4034c4:	4619      	mov	r1, r3
  4034c6:	4663      	mov	r3, ip
  4034c8:	e000      	b.n	4034cc <__aeabi_cdcmpeq>
  4034ca:	bf00      	nop

004034cc <__aeabi_cdcmpeq>:
  4034cc:	b501      	push	{r0, lr}
  4034ce:	f7ff ffb7 	bl	403440 <__cmpdf2>
  4034d2:	2800      	cmp	r0, #0
  4034d4:	bf48      	it	mi
  4034d6:	f110 0f00 	cmnmi.w	r0, #0
  4034da:	bd01      	pop	{r0, pc}

004034dc <__aeabi_dcmpeq>:
  4034dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4034e0:	f7ff fff4 	bl	4034cc <__aeabi_cdcmpeq>
  4034e4:	bf0c      	ite	eq
  4034e6:	2001      	moveq	r0, #1
  4034e8:	2000      	movne	r0, #0
  4034ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4034ee:	bf00      	nop

004034f0 <__aeabi_dcmplt>:
  4034f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4034f4:	f7ff ffea 	bl	4034cc <__aeabi_cdcmpeq>
  4034f8:	bf34      	ite	cc
  4034fa:	2001      	movcc	r0, #1
  4034fc:	2000      	movcs	r0, #0
  4034fe:	f85d fb08 	ldr.w	pc, [sp], #8
  403502:	bf00      	nop

00403504 <__aeabi_dcmple>:
  403504:	f84d ed08 	str.w	lr, [sp, #-8]!
  403508:	f7ff ffe0 	bl	4034cc <__aeabi_cdcmpeq>
  40350c:	bf94      	ite	ls
  40350e:	2001      	movls	r0, #1
  403510:	2000      	movhi	r0, #0
  403512:	f85d fb08 	ldr.w	pc, [sp], #8
  403516:	bf00      	nop

00403518 <__aeabi_dcmpge>:
  403518:	f84d ed08 	str.w	lr, [sp, #-8]!
  40351c:	f7ff ffce 	bl	4034bc <__aeabi_cdrcmple>
  403520:	bf94      	ite	ls
  403522:	2001      	movls	r0, #1
  403524:	2000      	movhi	r0, #0
  403526:	f85d fb08 	ldr.w	pc, [sp], #8
  40352a:	bf00      	nop

0040352c <__aeabi_dcmpgt>:
  40352c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403530:	f7ff ffc4 	bl	4034bc <__aeabi_cdrcmple>
  403534:	bf34      	ite	cc
  403536:	2001      	movcc	r0, #1
  403538:	2000      	movcs	r0, #0
  40353a:	f85d fb08 	ldr.w	pc, [sp], #8
  40353e:	bf00      	nop

00403540 <__aeabi_dcmpun>:
  403540:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403544:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403548:	d102      	bne.n	403550 <__aeabi_dcmpun+0x10>
  40354a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40354e:	d10a      	bne.n	403566 <__aeabi_dcmpun+0x26>
  403550:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403558:	d102      	bne.n	403560 <__aeabi_dcmpun+0x20>
  40355a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40355e:	d102      	bne.n	403566 <__aeabi_dcmpun+0x26>
  403560:	f04f 0000 	mov.w	r0, #0
  403564:	4770      	bx	lr
  403566:	f04f 0001 	mov.w	r0, #1
  40356a:	4770      	bx	lr

0040356c <__aeabi_d2uiz>:
  40356c:	004a      	lsls	r2, r1, #1
  40356e:	d211      	bcs.n	403594 <__aeabi_d2uiz+0x28>
  403570:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403574:	d211      	bcs.n	40359a <__aeabi_d2uiz+0x2e>
  403576:	d50d      	bpl.n	403594 <__aeabi_d2uiz+0x28>
  403578:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40357c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403580:	d40e      	bmi.n	4035a0 <__aeabi_d2uiz+0x34>
  403582:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403586:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40358a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40358e:	fa23 f002 	lsr.w	r0, r3, r2
  403592:	4770      	bx	lr
  403594:	f04f 0000 	mov.w	r0, #0
  403598:	4770      	bx	lr
  40359a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40359e:	d102      	bne.n	4035a6 <__aeabi_d2uiz+0x3a>
  4035a0:	f04f 30ff 	mov.w	r0, #4294967295
  4035a4:	4770      	bx	lr
  4035a6:	f04f 0000 	mov.w	r0, #0
  4035aa:	4770      	bx	lr

004035ac <__aeabi_ldivmod>:
  4035ac:	b97b      	cbnz	r3, 4035ce <__aeabi_ldivmod+0x22>
  4035ae:	b972      	cbnz	r2, 4035ce <__aeabi_ldivmod+0x22>
  4035b0:	2900      	cmp	r1, #0
  4035b2:	bfbe      	ittt	lt
  4035b4:	2000      	movlt	r0, #0
  4035b6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
  4035ba:	e006      	blt.n	4035ca <__aeabi_ldivmod+0x1e>
  4035bc:	bf08      	it	eq
  4035be:	2800      	cmpeq	r0, #0
  4035c0:	bf1c      	itt	ne
  4035c2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
  4035c6:	f04f 30ff 	movne.w	r0, #4294967295
  4035ca:	f000 b9eb 	b.w	4039a4 <__aeabi_idiv0>
  4035ce:	f1ad 0c08 	sub.w	ip, sp, #8
  4035d2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4035d6:	2900      	cmp	r1, #0
  4035d8:	db09      	blt.n	4035ee <__aeabi_ldivmod+0x42>
  4035da:	2b00      	cmp	r3, #0
  4035dc:	db1a      	blt.n	403614 <__aeabi_ldivmod+0x68>
  4035de:	f000 f873 	bl	4036c8 <__udivmoddi4>
  4035e2:	f8dd e004 	ldr.w	lr, [sp, #4]
  4035e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4035ea:	b004      	add	sp, #16
  4035ec:	4770      	bx	lr
  4035ee:	4240      	negs	r0, r0
  4035f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4035f4:	2b00      	cmp	r3, #0
  4035f6:	db1b      	blt.n	403630 <__aeabi_ldivmod+0x84>
  4035f8:	f000 f866 	bl	4036c8 <__udivmoddi4>
  4035fc:	f8dd e004 	ldr.w	lr, [sp, #4]
  403600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403604:	b004      	add	sp, #16
  403606:	4240      	negs	r0, r0
  403608:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40360c:	4252      	negs	r2, r2
  40360e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403612:	4770      	bx	lr
  403614:	4252      	negs	r2, r2
  403616:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40361a:	f000 f855 	bl	4036c8 <__udivmoddi4>
  40361e:	f8dd e004 	ldr.w	lr, [sp, #4]
  403622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403626:	b004      	add	sp, #16
  403628:	4240      	negs	r0, r0
  40362a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40362e:	4770      	bx	lr
  403630:	4252      	negs	r2, r2
  403632:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403636:	f000 f847 	bl	4036c8 <__udivmoddi4>
  40363a:	f8dd e004 	ldr.w	lr, [sp, #4]
  40363e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403642:	b004      	add	sp, #16
  403644:	4252      	negs	r2, r2
  403646:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40364a:	4770      	bx	lr

0040364c <__aeabi_d2lz>:
  40364c:	b538      	push	{r3, r4, r5, lr}
  40364e:	4605      	mov	r5, r0
  403650:	460c      	mov	r4, r1
  403652:	4628      	mov	r0, r5
  403654:	4621      	mov	r1, r4
  403656:	2200      	movs	r2, #0
  403658:	2300      	movs	r3, #0
  40365a:	f7ff ff49 	bl	4034f0 <__aeabi_dcmplt>
  40365e:	b928      	cbnz	r0, 40366c <__aeabi_d2lz+0x20>
  403660:	4628      	mov	r0, r5
  403662:	4621      	mov	r1, r4
  403664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403668:	f000 b80a 	b.w	403680 <__aeabi_d2ulz>
  40366c:	4628      	mov	r0, r5
  40366e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  403672:	f000 f805 	bl	403680 <__aeabi_d2ulz>
  403676:	4240      	negs	r0, r0
  403678:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40367c:	bd38      	pop	{r3, r4, r5, pc}
  40367e:	bf00      	nop

00403680 <__aeabi_d2ulz>:
  403680:	b5d0      	push	{r4, r6, r7, lr}
  403682:	2200      	movs	r2, #0
  403684:	4b0e      	ldr	r3, [pc, #56]	; (4036c0 <__aeabi_d2ulz+0x40>)
  403686:	4606      	mov	r6, r0
  403688:	460f      	mov	r7, r1
  40368a:	f7ff fcbf 	bl	40300c <__aeabi_dmul>
  40368e:	f7ff ff6d 	bl	40356c <__aeabi_d2uiz>
  403692:	4604      	mov	r4, r0
  403694:	f7ff fc44 	bl	402f20 <__aeabi_ui2d>
  403698:	2200      	movs	r2, #0
  40369a:	4b0a      	ldr	r3, [pc, #40]	; (4036c4 <__aeabi_d2ulz+0x44>)
  40369c:	f7ff fcb6 	bl	40300c <__aeabi_dmul>
  4036a0:	4602      	mov	r2, r0
  4036a2:	460b      	mov	r3, r1
  4036a4:	4630      	mov	r0, r6
  4036a6:	4639      	mov	r1, r7
  4036a8:	f7ff fafc 	bl	402ca4 <__aeabi_dsub>
  4036ac:	f7ff ff5e 	bl	40356c <__aeabi_d2uiz>
  4036b0:	4623      	mov	r3, r4
  4036b2:	2200      	movs	r2, #0
  4036b4:	ea42 0200 	orr.w	r2, r2, r0
  4036b8:	4610      	mov	r0, r2
  4036ba:	4619      	mov	r1, r3
  4036bc:	bdd0      	pop	{r4, r6, r7, pc}
  4036be:	bf00      	nop
  4036c0:	3df00000 	.word	0x3df00000
  4036c4:	41f00000 	.word	0x41f00000

004036c8 <__udivmoddi4>:
  4036c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4036cc:	468c      	mov	ip, r1
  4036ce:	460d      	mov	r5, r1
  4036d0:	4604      	mov	r4, r0
  4036d2:	9e08      	ldr	r6, [sp, #32]
  4036d4:	2b00      	cmp	r3, #0
  4036d6:	d151      	bne.n	40377c <__udivmoddi4+0xb4>
  4036d8:	428a      	cmp	r2, r1
  4036da:	4617      	mov	r7, r2
  4036dc:	d96d      	bls.n	4037ba <__udivmoddi4+0xf2>
  4036de:	fab2 fe82 	clz	lr, r2
  4036e2:	f1be 0f00 	cmp.w	lr, #0
  4036e6:	d00b      	beq.n	403700 <__udivmoddi4+0x38>
  4036e8:	f1ce 0c20 	rsb	ip, lr, #32
  4036ec:	fa01 f50e 	lsl.w	r5, r1, lr
  4036f0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4036f4:	fa02 f70e 	lsl.w	r7, r2, lr
  4036f8:	ea4c 0c05 	orr.w	ip, ip, r5
  4036fc:	fa00 f40e 	lsl.w	r4, r0, lr
  403700:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403704:	0c25      	lsrs	r5, r4, #16
  403706:	fbbc f8fa 	udiv	r8, ip, sl
  40370a:	fa1f f987 	uxth.w	r9, r7
  40370e:	fb0a cc18 	mls	ip, sl, r8, ip
  403712:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403716:	fb08 f309 	mul.w	r3, r8, r9
  40371a:	42ab      	cmp	r3, r5
  40371c:	d90a      	bls.n	403734 <__udivmoddi4+0x6c>
  40371e:	19ed      	adds	r5, r5, r7
  403720:	f108 32ff 	add.w	r2, r8, #4294967295
  403724:	f080 8123 	bcs.w	40396e <__udivmoddi4+0x2a6>
  403728:	42ab      	cmp	r3, r5
  40372a:	f240 8120 	bls.w	40396e <__udivmoddi4+0x2a6>
  40372e:	f1a8 0802 	sub.w	r8, r8, #2
  403732:	443d      	add	r5, r7
  403734:	1aed      	subs	r5, r5, r3
  403736:	b2a4      	uxth	r4, r4
  403738:	fbb5 f0fa 	udiv	r0, r5, sl
  40373c:	fb0a 5510 	mls	r5, sl, r0, r5
  403740:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403744:	fb00 f909 	mul.w	r9, r0, r9
  403748:	45a1      	cmp	r9, r4
  40374a:	d909      	bls.n	403760 <__udivmoddi4+0x98>
  40374c:	19e4      	adds	r4, r4, r7
  40374e:	f100 33ff 	add.w	r3, r0, #4294967295
  403752:	f080 810a 	bcs.w	40396a <__udivmoddi4+0x2a2>
  403756:	45a1      	cmp	r9, r4
  403758:	f240 8107 	bls.w	40396a <__udivmoddi4+0x2a2>
  40375c:	3802      	subs	r0, #2
  40375e:	443c      	add	r4, r7
  403760:	eba4 0409 	sub.w	r4, r4, r9
  403764:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403768:	2100      	movs	r1, #0
  40376a:	2e00      	cmp	r6, #0
  40376c:	d061      	beq.n	403832 <__udivmoddi4+0x16a>
  40376e:	fa24 f40e 	lsr.w	r4, r4, lr
  403772:	2300      	movs	r3, #0
  403774:	6034      	str	r4, [r6, #0]
  403776:	6073      	str	r3, [r6, #4]
  403778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40377c:	428b      	cmp	r3, r1
  40377e:	d907      	bls.n	403790 <__udivmoddi4+0xc8>
  403780:	2e00      	cmp	r6, #0
  403782:	d054      	beq.n	40382e <__udivmoddi4+0x166>
  403784:	2100      	movs	r1, #0
  403786:	e886 0021 	stmia.w	r6, {r0, r5}
  40378a:	4608      	mov	r0, r1
  40378c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403790:	fab3 f183 	clz	r1, r3
  403794:	2900      	cmp	r1, #0
  403796:	f040 808e 	bne.w	4038b6 <__udivmoddi4+0x1ee>
  40379a:	42ab      	cmp	r3, r5
  40379c:	d302      	bcc.n	4037a4 <__udivmoddi4+0xdc>
  40379e:	4282      	cmp	r2, r0
  4037a0:	f200 80fa 	bhi.w	403998 <__udivmoddi4+0x2d0>
  4037a4:	1a84      	subs	r4, r0, r2
  4037a6:	eb65 0503 	sbc.w	r5, r5, r3
  4037aa:	2001      	movs	r0, #1
  4037ac:	46ac      	mov	ip, r5
  4037ae:	2e00      	cmp	r6, #0
  4037b0:	d03f      	beq.n	403832 <__udivmoddi4+0x16a>
  4037b2:	e886 1010 	stmia.w	r6, {r4, ip}
  4037b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037ba:	b912      	cbnz	r2, 4037c2 <__udivmoddi4+0xfa>
  4037bc:	2701      	movs	r7, #1
  4037be:	fbb7 f7f2 	udiv	r7, r7, r2
  4037c2:	fab7 fe87 	clz	lr, r7
  4037c6:	f1be 0f00 	cmp.w	lr, #0
  4037ca:	d134      	bne.n	403836 <__udivmoddi4+0x16e>
  4037cc:	1beb      	subs	r3, r5, r7
  4037ce:	0c3a      	lsrs	r2, r7, #16
  4037d0:	fa1f fc87 	uxth.w	ip, r7
  4037d4:	2101      	movs	r1, #1
  4037d6:	fbb3 f8f2 	udiv	r8, r3, r2
  4037da:	0c25      	lsrs	r5, r4, #16
  4037dc:	fb02 3318 	mls	r3, r2, r8, r3
  4037e0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4037e4:	fb0c f308 	mul.w	r3, ip, r8
  4037e8:	42ab      	cmp	r3, r5
  4037ea:	d907      	bls.n	4037fc <__udivmoddi4+0x134>
  4037ec:	19ed      	adds	r5, r5, r7
  4037ee:	f108 30ff 	add.w	r0, r8, #4294967295
  4037f2:	d202      	bcs.n	4037fa <__udivmoddi4+0x132>
  4037f4:	42ab      	cmp	r3, r5
  4037f6:	f200 80d1 	bhi.w	40399c <__udivmoddi4+0x2d4>
  4037fa:	4680      	mov	r8, r0
  4037fc:	1aed      	subs	r5, r5, r3
  4037fe:	b2a3      	uxth	r3, r4
  403800:	fbb5 f0f2 	udiv	r0, r5, r2
  403804:	fb02 5510 	mls	r5, r2, r0, r5
  403808:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40380c:	fb0c fc00 	mul.w	ip, ip, r0
  403810:	45a4      	cmp	ip, r4
  403812:	d907      	bls.n	403824 <__udivmoddi4+0x15c>
  403814:	19e4      	adds	r4, r4, r7
  403816:	f100 33ff 	add.w	r3, r0, #4294967295
  40381a:	d202      	bcs.n	403822 <__udivmoddi4+0x15a>
  40381c:	45a4      	cmp	ip, r4
  40381e:	f200 80b8 	bhi.w	403992 <__udivmoddi4+0x2ca>
  403822:	4618      	mov	r0, r3
  403824:	eba4 040c 	sub.w	r4, r4, ip
  403828:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40382c:	e79d      	b.n	40376a <__udivmoddi4+0xa2>
  40382e:	4631      	mov	r1, r6
  403830:	4630      	mov	r0, r6
  403832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403836:	f1ce 0420 	rsb	r4, lr, #32
  40383a:	fa05 f30e 	lsl.w	r3, r5, lr
  40383e:	fa07 f70e 	lsl.w	r7, r7, lr
  403842:	fa20 f804 	lsr.w	r8, r0, r4
  403846:	0c3a      	lsrs	r2, r7, #16
  403848:	fa25 f404 	lsr.w	r4, r5, r4
  40384c:	ea48 0803 	orr.w	r8, r8, r3
  403850:	fbb4 f1f2 	udiv	r1, r4, r2
  403854:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403858:	fb02 4411 	mls	r4, r2, r1, r4
  40385c:	fa1f fc87 	uxth.w	ip, r7
  403860:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403864:	fb01 f30c 	mul.w	r3, r1, ip
  403868:	42ab      	cmp	r3, r5
  40386a:	fa00 f40e 	lsl.w	r4, r0, lr
  40386e:	d909      	bls.n	403884 <__udivmoddi4+0x1bc>
  403870:	19ed      	adds	r5, r5, r7
  403872:	f101 30ff 	add.w	r0, r1, #4294967295
  403876:	f080 808a 	bcs.w	40398e <__udivmoddi4+0x2c6>
  40387a:	42ab      	cmp	r3, r5
  40387c:	f240 8087 	bls.w	40398e <__udivmoddi4+0x2c6>
  403880:	3902      	subs	r1, #2
  403882:	443d      	add	r5, r7
  403884:	1aeb      	subs	r3, r5, r3
  403886:	fa1f f588 	uxth.w	r5, r8
  40388a:	fbb3 f0f2 	udiv	r0, r3, r2
  40388e:	fb02 3310 	mls	r3, r2, r0, r3
  403892:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403896:	fb00 f30c 	mul.w	r3, r0, ip
  40389a:	42ab      	cmp	r3, r5
  40389c:	d907      	bls.n	4038ae <__udivmoddi4+0x1e6>
  40389e:	19ed      	adds	r5, r5, r7
  4038a0:	f100 38ff 	add.w	r8, r0, #4294967295
  4038a4:	d26f      	bcs.n	403986 <__udivmoddi4+0x2be>
  4038a6:	42ab      	cmp	r3, r5
  4038a8:	d96d      	bls.n	403986 <__udivmoddi4+0x2be>
  4038aa:	3802      	subs	r0, #2
  4038ac:	443d      	add	r5, r7
  4038ae:	1aeb      	subs	r3, r5, r3
  4038b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4038b4:	e78f      	b.n	4037d6 <__udivmoddi4+0x10e>
  4038b6:	f1c1 0720 	rsb	r7, r1, #32
  4038ba:	fa22 f807 	lsr.w	r8, r2, r7
  4038be:	408b      	lsls	r3, r1
  4038c0:	fa05 f401 	lsl.w	r4, r5, r1
  4038c4:	ea48 0303 	orr.w	r3, r8, r3
  4038c8:	fa20 fe07 	lsr.w	lr, r0, r7
  4038cc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4038d0:	40fd      	lsrs	r5, r7
  4038d2:	ea4e 0e04 	orr.w	lr, lr, r4
  4038d6:	fbb5 f9fc 	udiv	r9, r5, ip
  4038da:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4038de:	fb0c 5519 	mls	r5, ip, r9, r5
  4038e2:	fa1f f883 	uxth.w	r8, r3
  4038e6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4038ea:	fb09 f408 	mul.w	r4, r9, r8
  4038ee:	42ac      	cmp	r4, r5
  4038f0:	fa02 f201 	lsl.w	r2, r2, r1
  4038f4:	fa00 fa01 	lsl.w	sl, r0, r1
  4038f8:	d908      	bls.n	40390c <__udivmoddi4+0x244>
  4038fa:	18ed      	adds	r5, r5, r3
  4038fc:	f109 30ff 	add.w	r0, r9, #4294967295
  403900:	d243      	bcs.n	40398a <__udivmoddi4+0x2c2>
  403902:	42ac      	cmp	r4, r5
  403904:	d941      	bls.n	40398a <__udivmoddi4+0x2c2>
  403906:	f1a9 0902 	sub.w	r9, r9, #2
  40390a:	441d      	add	r5, r3
  40390c:	1b2d      	subs	r5, r5, r4
  40390e:	fa1f fe8e 	uxth.w	lr, lr
  403912:	fbb5 f0fc 	udiv	r0, r5, ip
  403916:	fb0c 5510 	mls	r5, ip, r0, r5
  40391a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40391e:	fb00 f808 	mul.w	r8, r0, r8
  403922:	45a0      	cmp	r8, r4
  403924:	d907      	bls.n	403936 <__udivmoddi4+0x26e>
  403926:	18e4      	adds	r4, r4, r3
  403928:	f100 35ff 	add.w	r5, r0, #4294967295
  40392c:	d229      	bcs.n	403982 <__udivmoddi4+0x2ba>
  40392e:	45a0      	cmp	r8, r4
  403930:	d927      	bls.n	403982 <__udivmoddi4+0x2ba>
  403932:	3802      	subs	r0, #2
  403934:	441c      	add	r4, r3
  403936:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40393a:	eba4 0408 	sub.w	r4, r4, r8
  40393e:	fba0 8902 	umull	r8, r9, r0, r2
  403942:	454c      	cmp	r4, r9
  403944:	46c6      	mov	lr, r8
  403946:	464d      	mov	r5, r9
  403948:	d315      	bcc.n	403976 <__udivmoddi4+0x2ae>
  40394a:	d012      	beq.n	403972 <__udivmoddi4+0x2aa>
  40394c:	b156      	cbz	r6, 403964 <__udivmoddi4+0x29c>
  40394e:	ebba 030e 	subs.w	r3, sl, lr
  403952:	eb64 0405 	sbc.w	r4, r4, r5
  403956:	fa04 f707 	lsl.w	r7, r4, r7
  40395a:	40cb      	lsrs	r3, r1
  40395c:	431f      	orrs	r7, r3
  40395e:	40cc      	lsrs	r4, r1
  403960:	6037      	str	r7, [r6, #0]
  403962:	6074      	str	r4, [r6, #4]
  403964:	2100      	movs	r1, #0
  403966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40396a:	4618      	mov	r0, r3
  40396c:	e6f8      	b.n	403760 <__udivmoddi4+0x98>
  40396e:	4690      	mov	r8, r2
  403970:	e6e0      	b.n	403734 <__udivmoddi4+0x6c>
  403972:	45c2      	cmp	sl, r8
  403974:	d2ea      	bcs.n	40394c <__udivmoddi4+0x284>
  403976:	ebb8 0e02 	subs.w	lr, r8, r2
  40397a:	eb69 0503 	sbc.w	r5, r9, r3
  40397e:	3801      	subs	r0, #1
  403980:	e7e4      	b.n	40394c <__udivmoddi4+0x284>
  403982:	4628      	mov	r0, r5
  403984:	e7d7      	b.n	403936 <__udivmoddi4+0x26e>
  403986:	4640      	mov	r0, r8
  403988:	e791      	b.n	4038ae <__udivmoddi4+0x1e6>
  40398a:	4681      	mov	r9, r0
  40398c:	e7be      	b.n	40390c <__udivmoddi4+0x244>
  40398e:	4601      	mov	r1, r0
  403990:	e778      	b.n	403884 <__udivmoddi4+0x1bc>
  403992:	3802      	subs	r0, #2
  403994:	443c      	add	r4, r7
  403996:	e745      	b.n	403824 <__udivmoddi4+0x15c>
  403998:	4608      	mov	r0, r1
  40399a:	e708      	b.n	4037ae <__udivmoddi4+0xe6>
  40399c:	f1a8 0802 	sub.w	r8, r8, #2
  4039a0:	443d      	add	r5, r7
  4039a2:	e72b      	b.n	4037fc <__udivmoddi4+0x134>

004039a4 <__aeabi_idiv0>:
  4039a4:	4770      	bx	lr
  4039a6:	bf00      	nop

004039a8 <__errno>:
  4039a8:	4b01      	ldr	r3, [pc, #4]	; (4039b0 <__errno+0x8>)
  4039aa:	6818      	ldr	r0, [r3, #0]
  4039ac:	4770      	bx	lr
  4039ae:	bf00      	nop
  4039b0:	20000010 	.word	0x20000010

004039b4 <__libc_init_array>:
  4039b4:	b570      	push	{r4, r5, r6, lr}
  4039b6:	4e0f      	ldr	r6, [pc, #60]	; (4039f4 <__libc_init_array+0x40>)
  4039b8:	4d0f      	ldr	r5, [pc, #60]	; (4039f8 <__libc_init_array+0x44>)
  4039ba:	1b76      	subs	r6, r6, r5
  4039bc:	10b6      	asrs	r6, r6, #2
  4039be:	bf18      	it	ne
  4039c0:	2400      	movne	r4, #0
  4039c2:	d005      	beq.n	4039d0 <__libc_init_array+0x1c>
  4039c4:	3401      	adds	r4, #1
  4039c6:	f855 3b04 	ldr.w	r3, [r5], #4
  4039ca:	4798      	blx	r3
  4039cc:	42a6      	cmp	r6, r4
  4039ce:	d1f9      	bne.n	4039c4 <__libc_init_array+0x10>
  4039d0:	4e0a      	ldr	r6, [pc, #40]	; (4039fc <__libc_init_array+0x48>)
  4039d2:	4d0b      	ldr	r5, [pc, #44]	; (403a00 <__libc_init_array+0x4c>)
  4039d4:	1b76      	subs	r6, r6, r5
  4039d6:	f001 f879 	bl	404acc <_init>
  4039da:	10b6      	asrs	r6, r6, #2
  4039dc:	bf18      	it	ne
  4039de:	2400      	movne	r4, #0
  4039e0:	d006      	beq.n	4039f0 <__libc_init_array+0x3c>
  4039e2:	3401      	adds	r4, #1
  4039e4:	f855 3b04 	ldr.w	r3, [r5], #4
  4039e8:	4798      	blx	r3
  4039ea:	42a6      	cmp	r6, r4
  4039ec:	d1f9      	bne.n	4039e2 <__libc_init_array+0x2e>
  4039ee:	bd70      	pop	{r4, r5, r6, pc}
  4039f0:	bd70      	pop	{r4, r5, r6, pc}
  4039f2:	bf00      	nop
  4039f4:	00404ad8 	.word	0x00404ad8
  4039f8:	00404ad8 	.word	0x00404ad8
  4039fc:	00404ae0 	.word	0x00404ae0
  403a00:	00404ad8 	.word	0x00404ad8

00403a04 <memset>:
  403a04:	b470      	push	{r4, r5, r6}
  403a06:	0786      	lsls	r6, r0, #30
  403a08:	d046      	beq.n	403a98 <memset+0x94>
  403a0a:	1e54      	subs	r4, r2, #1
  403a0c:	2a00      	cmp	r2, #0
  403a0e:	d041      	beq.n	403a94 <memset+0x90>
  403a10:	b2ca      	uxtb	r2, r1
  403a12:	4603      	mov	r3, r0
  403a14:	e002      	b.n	403a1c <memset+0x18>
  403a16:	f114 34ff 	adds.w	r4, r4, #4294967295
  403a1a:	d33b      	bcc.n	403a94 <memset+0x90>
  403a1c:	f803 2b01 	strb.w	r2, [r3], #1
  403a20:	079d      	lsls	r5, r3, #30
  403a22:	d1f8      	bne.n	403a16 <memset+0x12>
  403a24:	2c03      	cmp	r4, #3
  403a26:	d92e      	bls.n	403a86 <memset+0x82>
  403a28:	b2cd      	uxtb	r5, r1
  403a2a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403a2e:	2c0f      	cmp	r4, #15
  403a30:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403a34:	d919      	bls.n	403a6a <memset+0x66>
  403a36:	f103 0210 	add.w	r2, r3, #16
  403a3a:	4626      	mov	r6, r4
  403a3c:	3e10      	subs	r6, #16
  403a3e:	2e0f      	cmp	r6, #15
  403a40:	f842 5c10 	str.w	r5, [r2, #-16]
  403a44:	f842 5c0c 	str.w	r5, [r2, #-12]
  403a48:	f842 5c08 	str.w	r5, [r2, #-8]
  403a4c:	f842 5c04 	str.w	r5, [r2, #-4]
  403a50:	f102 0210 	add.w	r2, r2, #16
  403a54:	d8f2      	bhi.n	403a3c <memset+0x38>
  403a56:	f1a4 0210 	sub.w	r2, r4, #16
  403a5a:	f022 020f 	bic.w	r2, r2, #15
  403a5e:	f004 040f 	and.w	r4, r4, #15
  403a62:	3210      	adds	r2, #16
  403a64:	2c03      	cmp	r4, #3
  403a66:	4413      	add	r3, r2
  403a68:	d90d      	bls.n	403a86 <memset+0x82>
  403a6a:	461e      	mov	r6, r3
  403a6c:	4622      	mov	r2, r4
  403a6e:	3a04      	subs	r2, #4
  403a70:	2a03      	cmp	r2, #3
  403a72:	f846 5b04 	str.w	r5, [r6], #4
  403a76:	d8fa      	bhi.n	403a6e <memset+0x6a>
  403a78:	1f22      	subs	r2, r4, #4
  403a7a:	f022 0203 	bic.w	r2, r2, #3
  403a7e:	3204      	adds	r2, #4
  403a80:	4413      	add	r3, r2
  403a82:	f004 0403 	and.w	r4, r4, #3
  403a86:	b12c      	cbz	r4, 403a94 <memset+0x90>
  403a88:	b2c9      	uxtb	r1, r1
  403a8a:	441c      	add	r4, r3
  403a8c:	f803 1b01 	strb.w	r1, [r3], #1
  403a90:	429c      	cmp	r4, r3
  403a92:	d1fb      	bne.n	403a8c <memset+0x88>
  403a94:	bc70      	pop	{r4, r5, r6}
  403a96:	4770      	bx	lr
  403a98:	4614      	mov	r4, r2
  403a9a:	4603      	mov	r3, r0
  403a9c:	e7c2      	b.n	403a24 <memset+0x20>
  403a9e:	bf00      	nop

00403aa0 <setbuf>:
  403aa0:	2900      	cmp	r1, #0
  403aa2:	bf0c      	ite	eq
  403aa4:	2202      	moveq	r2, #2
  403aa6:	2200      	movne	r2, #0
  403aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403aac:	f000 b800 	b.w	403ab0 <setvbuf>

00403ab0 <setvbuf>:
  403ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403ab4:	4c61      	ldr	r4, [pc, #388]	; (403c3c <setvbuf+0x18c>)
  403ab6:	6825      	ldr	r5, [r4, #0]
  403ab8:	b083      	sub	sp, #12
  403aba:	4604      	mov	r4, r0
  403abc:	460f      	mov	r7, r1
  403abe:	4690      	mov	r8, r2
  403ac0:	461e      	mov	r6, r3
  403ac2:	b115      	cbz	r5, 403aca <setvbuf+0x1a>
  403ac4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403ac6:	2b00      	cmp	r3, #0
  403ac8:	d064      	beq.n	403b94 <setvbuf+0xe4>
  403aca:	f1b8 0f02 	cmp.w	r8, #2
  403ace:	d006      	beq.n	403ade <setvbuf+0x2e>
  403ad0:	f1b8 0f01 	cmp.w	r8, #1
  403ad4:	f200 809f 	bhi.w	403c16 <setvbuf+0x166>
  403ad8:	2e00      	cmp	r6, #0
  403ada:	f2c0 809c 	blt.w	403c16 <setvbuf+0x166>
  403ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ae0:	07d8      	lsls	r0, r3, #31
  403ae2:	d534      	bpl.n	403b4e <setvbuf+0x9e>
  403ae4:	4621      	mov	r1, r4
  403ae6:	4628      	mov	r0, r5
  403ae8:	f000 f95a 	bl	403da0 <_fflush_r>
  403aec:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403aee:	b141      	cbz	r1, 403b02 <setvbuf+0x52>
  403af0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403af4:	4299      	cmp	r1, r3
  403af6:	d002      	beq.n	403afe <setvbuf+0x4e>
  403af8:	4628      	mov	r0, r5
  403afa:	f000 fa4b 	bl	403f94 <_free_r>
  403afe:	2300      	movs	r3, #0
  403b00:	6323      	str	r3, [r4, #48]	; 0x30
  403b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b06:	2200      	movs	r2, #0
  403b08:	61a2      	str	r2, [r4, #24]
  403b0a:	6062      	str	r2, [r4, #4]
  403b0c:	061a      	lsls	r2, r3, #24
  403b0e:	d43a      	bmi.n	403b86 <setvbuf+0xd6>
  403b10:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403b14:	f023 0303 	bic.w	r3, r3, #3
  403b18:	f1b8 0f02 	cmp.w	r8, #2
  403b1c:	81a3      	strh	r3, [r4, #12]
  403b1e:	d01d      	beq.n	403b5c <setvbuf+0xac>
  403b20:	ab01      	add	r3, sp, #4
  403b22:	466a      	mov	r2, sp
  403b24:	4621      	mov	r1, r4
  403b26:	4628      	mov	r0, r5
  403b28:	f000 fb4c 	bl	4041c4 <__swhatbuf_r>
  403b2c:	89a3      	ldrh	r3, [r4, #12]
  403b2e:	4318      	orrs	r0, r3
  403b30:	81a0      	strh	r0, [r4, #12]
  403b32:	2e00      	cmp	r6, #0
  403b34:	d132      	bne.n	403b9c <setvbuf+0xec>
  403b36:	9e00      	ldr	r6, [sp, #0]
  403b38:	4630      	mov	r0, r6
  403b3a:	f000 fb71 	bl	404220 <malloc>
  403b3e:	4607      	mov	r7, r0
  403b40:	2800      	cmp	r0, #0
  403b42:	d06b      	beq.n	403c1c <setvbuf+0x16c>
  403b44:	89a3      	ldrh	r3, [r4, #12]
  403b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403b4a:	81a3      	strh	r3, [r4, #12]
  403b4c:	e028      	b.n	403ba0 <setvbuf+0xf0>
  403b4e:	89a3      	ldrh	r3, [r4, #12]
  403b50:	0599      	lsls	r1, r3, #22
  403b52:	d4c7      	bmi.n	403ae4 <setvbuf+0x34>
  403b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b56:	f000 fb31 	bl	4041bc <__retarget_lock_acquire_recursive>
  403b5a:	e7c3      	b.n	403ae4 <setvbuf+0x34>
  403b5c:	2500      	movs	r5, #0
  403b5e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403b60:	2600      	movs	r6, #0
  403b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403b66:	f043 0302 	orr.w	r3, r3, #2
  403b6a:	2001      	movs	r0, #1
  403b6c:	60a6      	str	r6, [r4, #8]
  403b6e:	07ce      	lsls	r6, r1, #31
  403b70:	81a3      	strh	r3, [r4, #12]
  403b72:	6022      	str	r2, [r4, #0]
  403b74:	6122      	str	r2, [r4, #16]
  403b76:	6160      	str	r0, [r4, #20]
  403b78:	d401      	bmi.n	403b7e <setvbuf+0xce>
  403b7a:	0598      	lsls	r0, r3, #22
  403b7c:	d53e      	bpl.n	403bfc <setvbuf+0x14c>
  403b7e:	4628      	mov	r0, r5
  403b80:	b003      	add	sp, #12
  403b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403b86:	6921      	ldr	r1, [r4, #16]
  403b88:	4628      	mov	r0, r5
  403b8a:	f000 fa03 	bl	403f94 <_free_r>
  403b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b92:	e7bd      	b.n	403b10 <setvbuf+0x60>
  403b94:	4628      	mov	r0, r5
  403b96:	f000 f95b 	bl	403e50 <__sinit>
  403b9a:	e796      	b.n	403aca <setvbuf+0x1a>
  403b9c:	2f00      	cmp	r7, #0
  403b9e:	d0cb      	beq.n	403b38 <setvbuf+0x88>
  403ba0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403ba2:	2b00      	cmp	r3, #0
  403ba4:	d033      	beq.n	403c0e <setvbuf+0x15e>
  403ba6:	9b00      	ldr	r3, [sp, #0]
  403ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403bac:	6027      	str	r7, [r4, #0]
  403bae:	429e      	cmp	r6, r3
  403bb0:	bf1c      	itt	ne
  403bb2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403bb6:	81a2      	strhne	r2, [r4, #12]
  403bb8:	f1b8 0f01 	cmp.w	r8, #1
  403bbc:	bf04      	itt	eq
  403bbe:	f042 0201 	orreq.w	r2, r2, #1
  403bc2:	81a2      	strheq	r2, [r4, #12]
  403bc4:	b292      	uxth	r2, r2
  403bc6:	f012 0308 	ands.w	r3, r2, #8
  403bca:	6127      	str	r7, [r4, #16]
  403bcc:	6166      	str	r6, [r4, #20]
  403bce:	d00e      	beq.n	403bee <setvbuf+0x13e>
  403bd0:	07d1      	lsls	r1, r2, #31
  403bd2:	d51a      	bpl.n	403c0a <setvbuf+0x15a>
  403bd4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403bd6:	4276      	negs	r6, r6
  403bd8:	2300      	movs	r3, #0
  403bda:	f015 0501 	ands.w	r5, r5, #1
  403bde:	61a6      	str	r6, [r4, #24]
  403be0:	60a3      	str	r3, [r4, #8]
  403be2:	d009      	beq.n	403bf8 <setvbuf+0x148>
  403be4:	2500      	movs	r5, #0
  403be6:	4628      	mov	r0, r5
  403be8:	b003      	add	sp, #12
  403bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403bee:	60a3      	str	r3, [r4, #8]
  403bf0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403bf2:	f015 0501 	ands.w	r5, r5, #1
  403bf6:	d1f5      	bne.n	403be4 <setvbuf+0x134>
  403bf8:	0593      	lsls	r3, r2, #22
  403bfa:	d4c0      	bmi.n	403b7e <setvbuf+0xce>
  403bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403bfe:	f000 fadf 	bl	4041c0 <__retarget_lock_release_recursive>
  403c02:	4628      	mov	r0, r5
  403c04:	b003      	add	sp, #12
  403c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403c0a:	60a6      	str	r6, [r4, #8]
  403c0c:	e7f0      	b.n	403bf0 <setvbuf+0x140>
  403c0e:	4628      	mov	r0, r5
  403c10:	f000 f91e 	bl	403e50 <__sinit>
  403c14:	e7c7      	b.n	403ba6 <setvbuf+0xf6>
  403c16:	f04f 35ff 	mov.w	r5, #4294967295
  403c1a:	e7b0      	b.n	403b7e <setvbuf+0xce>
  403c1c:	f8dd 9000 	ldr.w	r9, [sp]
  403c20:	45b1      	cmp	r9, r6
  403c22:	d004      	beq.n	403c2e <setvbuf+0x17e>
  403c24:	4648      	mov	r0, r9
  403c26:	f000 fafb 	bl	404220 <malloc>
  403c2a:	4607      	mov	r7, r0
  403c2c:	b920      	cbnz	r0, 403c38 <setvbuf+0x188>
  403c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c32:	f04f 35ff 	mov.w	r5, #4294967295
  403c36:	e792      	b.n	403b5e <setvbuf+0xae>
  403c38:	464e      	mov	r6, r9
  403c3a:	e783      	b.n	403b44 <setvbuf+0x94>
  403c3c:	20000010 	.word	0x20000010

00403c40 <register_fini>:
  403c40:	4b02      	ldr	r3, [pc, #8]	; (403c4c <register_fini+0xc>)
  403c42:	b113      	cbz	r3, 403c4a <register_fini+0xa>
  403c44:	4802      	ldr	r0, [pc, #8]	; (403c50 <register_fini+0x10>)
  403c46:	f000 b805 	b.w	403c54 <atexit>
  403c4a:	4770      	bx	lr
  403c4c:	00000000 	.word	0x00000000
  403c50:	00403ec1 	.word	0x00403ec1

00403c54 <atexit>:
  403c54:	2300      	movs	r3, #0
  403c56:	4601      	mov	r1, r0
  403c58:	461a      	mov	r2, r3
  403c5a:	4618      	mov	r0, r3
  403c5c:	f000 be10 	b.w	404880 <__register_exitproc>

00403c60 <__sflush_r>:
  403c60:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403c64:	b29a      	uxth	r2, r3
  403c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c6a:	460d      	mov	r5, r1
  403c6c:	0711      	lsls	r1, r2, #28
  403c6e:	4680      	mov	r8, r0
  403c70:	d43a      	bmi.n	403ce8 <__sflush_r+0x88>
  403c72:	686a      	ldr	r2, [r5, #4]
  403c74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403c78:	2a00      	cmp	r2, #0
  403c7a:	81ab      	strh	r3, [r5, #12]
  403c7c:	dd6f      	ble.n	403d5e <__sflush_r+0xfe>
  403c7e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403c80:	2c00      	cmp	r4, #0
  403c82:	d049      	beq.n	403d18 <__sflush_r+0xb8>
  403c84:	2200      	movs	r2, #0
  403c86:	b29b      	uxth	r3, r3
  403c88:	f8d8 6000 	ldr.w	r6, [r8]
  403c8c:	f8c8 2000 	str.w	r2, [r8]
  403c90:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403c94:	d067      	beq.n	403d66 <__sflush_r+0x106>
  403c96:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403c98:	075f      	lsls	r7, r3, #29
  403c9a:	d505      	bpl.n	403ca8 <__sflush_r+0x48>
  403c9c:	6869      	ldr	r1, [r5, #4]
  403c9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403ca0:	1a52      	subs	r2, r2, r1
  403ca2:	b10b      	cbz	r3, 403ca8 <__sflush_r+0x48>
  403ca4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403ca6:	1ad2      	subs	r2, r2, r3
  403ca8:	2300      	movs	r3, #0
  403caa:	69e9      	ldr	r1, [r5, #28]
  403cac:	4640      	mov	r0, r8
  403cae:	47a0      	blx	r4
  403cb0:	1c44      	adds	r4, r0, #1
  403cb2:	d03c      	beq.n	403d2e <__sflush_r+0xce>
  403cb4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403cb8:	692a      	ldr	r2, [r5, #16]
  403cba:	602a      	str	r2, [r5, #0]
  403cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403cc0:	2200      	movs	r2, #0
  403cc2:	81ab      	strh	r3, [r5, #12]
  403cc4:	04db      	lsls	r3, r3, #19
  403cc6:	606a      	str	r2, [r5, #4]
  403cc8:	d447      	bmi.n	403d5a <__sflush_r+0xfa>
  403cca:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403ccc:	f8c8 6000 	str.w	r6, [r8]
  403cd0:	b311      	cbz	r1, 403d18 <__sflush_r+0xb8>
  403cd2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403cd6:	4299      	cmp	r1, r3
  403cd8:	d002      	beq.n	403ce0 <__sflush_r+0x80>
  403cda:	4640      	mov	r0, r8
  403cdc:	f000 f95a 	bl	403f94 <_free_r>
  403ce0:	2000      	movs	r0, #0
  403ce2:	6328      	str	r0, [r5, #48]	; 0x30
  403ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ce8:	692e      	ldr	r6, [r5, #16]
  403cea:	b1ae      	cbz	r6, 403d18 <__sflush_r+0xb8>
  403cec:	682c      	ldr	r4, [r5, #0]
  403cee:	602e      	str	r6, [r5, #0]
  403cf0:	0791      	lsls	r1, r2, #30
  403cf2:	bf0c      	ite	eq
  403cf4:	696b      	ldreq	r3, [r5, #20]
  403cf6:	2300      	movne	r3, #0
  403cf8:	1ba4      	subs	r4, r4, r6
  403cfa:	60ab      	str	r3, [r5, #8]
  403cfc:	e00a      	b.n	403d14 <__sflush_r+0xb4>
  403cfe:	4623      	mov	r3, r4
  403d00:	4632      	mov	r2, r6
  403d02:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403d04:	69e9      	ldr	r1, [r5, #28]
  403d06:	4640      	mov	r0, r8
  403d08:	47b8      	blx	r7
  403d0a:	2800      	cmp	r0, #0
  403d0c:	eba4 0400 	sub.w	r4, r4, r0
  403d10:	4406      	add	r6, r0
  403d12:	dd04      	ble.n	403d1e <__sflush_r+0xbe>
  403d14:	2c00      	cmp	r4, #0
  403d16:	dcf2      	bgt.n	403cfe <__sflush_r+0x9e>
  403d18:	2000      	movs	r0, #0
  403d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d1e:	89ab      	ldrh	r3, [r5, #12]
  403d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403d24:	81ab      	strh	r3, [r5, #12]
  403d26:	f04f 30ff 	mov.w	r0, #4294967295
  403d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d2e:	f8d8 4000 	ldr.w	r4, [r8]
  403d32:	2c1d      	cmp	r4, #29
  403d34:	d8f3      	bhi.n	403d1e <__sflush_r+0xbe>
  403d36:	4b19      	ldr	r3, [pc, #100]	; (403d9c <__sflush_r+0x13c>)
  403d38:	40e3      	lsrs	r3, r4
  403d3a:	43db      	mvns	r3, r3
  403d3c:	f013 0301 	ands.w	r3, r3, #1
  403d40:	d1ed      	bne.n	403d1e <__sflush_r+0xbe>
  403d42:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403d46:	606b      	str	r3, [r5, #4]
  403d48:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403d4c:	6929      	ldr	r1, [r5, #16]
  403d4e:	81ab      	strh	r3, [r5, #12]
  403d50:	04da      	lsls	r2, r3, #19
  403d52:	6029      	str	r1, [r5, #0]
  403d54:	d5b9      	bpl.n	403cca <__sflush_r+0x6a>
  403d56:	2c00      	cmp	r4, #0
  403d58:	d1b7      	bne.n	403cca <__sflush_r+0x6a>
  403d5a:	6528      	str	r0, [r5, #80]	; 0x50
  403d5c:	e7b5      	b.n	403cca <__sflush_r+0x6a>
  403d5e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403d60:	2a00      	cmp	r2, #0
  403d62:	dc8c      	bgt.n	403c7e <__sflush_r+0x1e>
  403d64:	e7d8      	b.n	403d18 <__sflush_r+0xb8>
  403d66:	2301      	movs	r3, #1
  403d68:	69e9      	ldr	r1, [r5, #28]
  403d6a:	4640      	mov	r0, r8
  403d6c:	47a0      	blx	r4
  403d6e:	1c43      	adds	r3, r0, #1
  403d70:	4602      	mov	r2, r0
  403d72:	d002      	beq.n	403d7a <__sflush_r+0x11a>
  403d74:	89ab      	ldrh	r3, [r5, #12]
  403d76:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403d78:	e78e      	b.n	403c98 <__sflush_r+0x38>
  403d7a:	f8d8 3000 	ldr.w	r3, [r8]
  403d7e:	2b00      	cmp	r3, #0
  403d80:	d0f8      	beq.n	403d74 <__sflush_r+0x114>
  403d82:	2b1d      	cmp	r3, #29
  403d84:	d001      	beq.n	403d8a <__sflush_r+0x12a>
  403d86:	2b16      	cmp	r3, #22
  403d88:	d102      	bne.n	403d90 <__sflush_r+0x130>
  403d8a:	f8c8 6000 	str.w	r6, [r8]
  403d8e:	e7c3      	b.n	403d18 <__sflush_r+0xb8>
  403d90:	89ab      	ldrh	r3, [r5, #12]
  403d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403d96:	81ab      	strh	r3, [r5, #12]
  403d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d9c:	20400001 	.word	0x20400001

00403da0 <_fflush_r>:
  403da0:	b538      	push	{r3, r4, r5, lr}
  403da2:	460d      	mov	r5, r1
  403da4:	4604      	mov	r4, r0
  403da6:	b108      	cbz	r0, 403dac <_fflush_r+0xc>
  403da8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403daa:	b1bb      	cbz	r3, 403ddc <_fflush_r+0x3c>
  403dac:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403db0:	b188      	cbz	r0, 403dd6 <_fflush_r+0x36>
  403db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403db4:	07db      	lsls	r3, r3, #31
  403db6:	d401      	bmi.n	403dbc <_fflush_r+0x1c>
  403db8:	0581      	lsls	r1, r0, #22
  403dba:	d517      	bpl.n	403dec <_fflush_r+0x4c>
  403dbc:	4620      	mov	r0, r4
  403dbe:	4629      	mov	r1, r5
  403dc0:	f7ff ff4e 	bl	403c60 <__sflush_r>
  403dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403dc6:	07da      	lsls	r2, r3, #31
  403dc8:	4604      	mov	r4, r0
  403dca:	d402      	bmi.n	403dd2 <_fflush_r+0x32>
  403dcc:	89ab      	ldrh	r3, [r5, #12]
  403dce:	059b      	lsls	r3, r3, #22
  403dd0:	d507      	bpl.n	403de2 <_fflush_r+0x42>
  403dd2:	4620      	mov	r0, r4
  403dd4:	bd38      	pop	{r3, r4, r5, pc}
  403dd6:	4604      	mov	r4, r0
  403dd8:	4620      	mov	r0, r4
  403dda:	bd38      	pop	{r3, r4, r5, pc}
  403ddc:	f000 f838 	bl	403e50 <__sinit>
  403de0:	e7e4      	b.n	403dac <_fflush_r+0xc>
  403de2:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403de4:	f000 f9ec 	bl	4041c0 <__retarget_lock_release_recursive>
  403de8:	4620      	mov	r0, r4
  403dea:	bd38      	pop	{r3, r4, r5, pc}
  403dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403dee:	f000 f9e5 	bl	4041bc <__retarget_lock_acquire_recursive>
  403df2:	e7e3      	b.n	403dbc <_fflush_r+0x1c>

00403df4 <_cleanup_r>:
  403df4:	4901      	ldr	r1, [pc, #4]	; (403dfc <_cleanup_r+0x8>)
  403df6:	f000 b9b3 	b.w	404160 <_fwalk_reent>
  403dfa:	bf00      	nop
  403dfc:	00404969 	.word	0x00404969

00403e00 <std.isra.0>:
  403e00:	b510      	push	{r4, lr}
  403e02:	2300      	movs	r3, #0
  403e04:	4604      	mov	r4, r0
  403e06:	8181      	strh	r1, [r0, #12]
  403e08:	81c2      	strh	r2, [r0, #14]
  403e0a:	6003      	str	r3, [r0, #0]
  403e0c:	6043      	str	r3, [r0, #4]
  403e0e:	6083      	str	r3, [r0, #8]
  403e10:	6643      	str	r3, [r0, #100]	; 0x64
  403e12:	6103      	str	r3, [r0, #16]
  403e14:	6143      	str	r3, [r0, #20]
  403e16:	6183      	str	r3, [r0, #24]
  403e18:	4619      	mov	r1, r3
  403e1a:	2208      	movs	r2, #8
  403e1c:	305c      	adds	r0, #92	; 0x5c
  403e1e:	f7ff fdf1 	bl	403a04 <memset>
  403e22:	4807      	ldr	r0, [pc, #28]	; (403e40 <std.isra.0+0x40>)
  403e24:	4907      	ldr	r1, [pc, #28]	; (403e44 <std.isra.0+0x44>)
  403e26:	4a08      	ldr	r2, [pc, #32]	; (403e48 <std.isra.0+0x48>)
  403e28:	4b08      	ldr	r3, [pc, #32]	; (403e4c <std.isra.0+0x4c>)
  403e2a:	6220      	str	r0, [r4, #32]
  403e2c:	61e4      	str	r4, [r4, #28]
  403e2e:	6261      	str	r1, [r4, #36]	; 0x24
  403e30:	62a2      	str	r2, [r4, #40]	; 0x28
  403e32:	62e3      	str	r3, [r4, #44]	; 0x2c
  403e34:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403e3c:	f000 b9ba 	b.w	4041b4 <__retarget_lock_init_recursive>
  403e40:	004047cd 	.word	0x004047cd
  403e44:	004047f1 	.word	0x004047f1
  403e48:	0040482d 	.word	0x0040482d
  403e4c:	0040484d 	.word	0x0040484d

00403e50 <__sinit>:
  403e50:	b510      	push	{r4, lr}
  403e52:	4604      	mov	r4, r0
  403e54:	4812      	ldr	r0, [pc, #72]	; (403ea0 <__sinit+0x50>)
  403e56:	f000 f9b1 	bl	4041bc <__retarget_lock_acquire_recursive>
  403e5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403e5c:	b9d2      	cbnz	r2, 403e94 <__sinit+0x44>
  403e5e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403e62:	4810      	ldr	r0, [pc, #64]	; (403ea4 <__sinit+0x54>)
  403e64:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403e68:	2103      	movs	r1, #3
  403e6a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403e6e:	63e0      	str	r0, [r4, #60]	; 0x3c
  403e70:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403e74:	6860      	ldr	r0, [r4, #4]
  403e76:	2104      	movs	r1, #4
  403e78:	f7ff ffc2 	bl	403e00 <std.isra.0>
  403e7c:	2201      	movs	r2, #1
  403e7e:	2109      	movs	r1, #9
  403e80:	68a0      	ldr	r0, [r4, #8]
  403e82:	f7ff ffbd 	bl	403e00 <std.isra.0>
  403e86:	2202      	movs	r2, #2
  403e88:	2112      	movs	r1, #18
  403e8a:	68e0      	ldr	r0, [r4, #12]
  403e8c:	f7ff ffb8 	bl	403e00 <std.isra.0>
  403e90:	2301      	movs	r3, #1
  403e92:	63a3      	str	r3, [r4, #56]	; 0x38
  403e94:	4802      	ldr	r0, [pc, #8]	; (403ea0 <__sinit+0x50>)
  403e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403e9a:	f000 b991 	b.w	4041c0 <__retarget_lock_release_recursive>
  403e9e:	bf00      	nop
  403ea0:	20008c9c 	.word	0x20008c9c
  403ea4:	00403df5 	.word	0x00403df5

00403ea8 <__sfp_lock_acquire>:
  403ea8:	4801      	ldr	r0, [pc, #4]	; (403eb0 <__sfp_lock_acquire+0x8>)
  403eaa:	f000 b987 	b.w	4041bc <__retarget_lock_acquire_recursive>
  403eae:	bf00      	nop
  403eb0:	20008cb0 	.word	0x20008cb0

00403eb4 <__sfp_lock_release>:
  403eb4:	4801      	ldr	r0, [pc, #4]	; (403ebc <__sfp_lock_release+0x8>)
  403eb6:	f000 b983 	b.w	4041c0 <__retarget_lock_release_recursive>
  403eba:	bf00      	nop
  403ebc:	20008cb0 	.word	0x20008cb0

00403ec0 <__libc_fini_array>:
  403ec0:	b538      	push	{r3, r4, r5, lr}
  403ec2:	4c0a      	ldr	r4, [pc, #40]	; (403eec <__libc_fini_array+0x2c>)
  403ec4:	4d0a      	ldr	r5, [pc, #40]	; (403ef0 <__libc_fini_array+0x30>)
  403ec6:	1b64      	subs	r4, r4, r5
  403ec8:	10a4      	asrs	r4, r4, #2
  403eca:	d00a      	beq.n	403ee2 <__libc_fini_array+0x22>
  403ecc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403ed0:	3b01      	subs	r3, #1
  403ed2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403ed6:	3c01      	subs	r4, #1
  403ed8:	f855 3904 	ldr.w	r3, [r5], #-4
  403edc:	4798      	blx	r3
  403ede:	2c00      	cmp	r4, #0
  403ee0:	d1f9      	bne.n	403ed6 <__libc_fini_array+0x16>
  403ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403ee6:	f000 bdfb 	b.w	404ae0 <_fini>
  403eea:	bf00      	nop
  403eec:	00404af0 	.word	0x00404af0
  403ef0:	00404aec 	.word	0x00404aec

00403ef4 <_malloc_trim_r>:
  403ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403ef6:	4f24      	ldr	r7, [pc, #144]	; (403f88 <_malloc_trim_r+0x94>)
  403ef8:	460c      	mov	r4, r1
  403efa:	4606      	mov	r6, r0
  403efc:	f000 fc48 	bl	404790 <__malloc_lock>
  403f00:	68bb      	ldr	r3, [r7, #8]
  403f02:	685d      	ldr	r5, [r3, #4]
  403f04:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403f08:	310f      	adds	r1, #15
  403f0a:	f025 0503 	bic.w	r5, r5, #3
  403f0e:	4429      	add	r1, r5
  403f10:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403f14:	f021 010f 	bic.w	r1, r1, #15
  403f18:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403f1c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403f20:	db07      	blt.n	403f32 <_malloc_trim_r+0x3e>
  403f22:	2100      	movs	r1, #0
  403f24:	4630      	mov	r0, r6
  403f26:	f000 fc3f 	bl	4047a8 <_sbrk_r>
  403f2a:	68bb      	ldr	r3, [r7, #8]
  403f2c:	442b      	add	r3, r5
  403f2e:	4298      	cmp	r0, r3
  403f30:	d004      	beq.n	403f3c <_malloc_trim_r+0x48>
  403f32:	4630      	mov	r0, r6
  403f34:	f000 fc32 	bl	40479c <__malloc_unlock>
  403f38:	2000      	movs	r0, #0
  403f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403f3c:	4261      	negs	r1, r4
  403f3e:	4630      	mov	r0, r6
  403f40:	f000 fc32 	bl	4047a8 <_sbrk_r>
  403f44:	3001      	adds	r0, #1
  403f46:	d00d      	beq.n	403f64 <_malloc_trim_r+0x70>
  403f48:	4b10      	ldr	r3, [pc, #64]	; (403f8c <_malloc_trim_r+0x98>)
  403f4a:	68ba      	ldr	r2, [r7, #8]
  403f4c:	6819      	ldr	r1, [r3, #0]
  403f4e:	1b2d      	subs	r5, r5, r4
  403f50:	f045 0501 	orr.w	r5, r5, #1
  403f54:	4630      	mov	r0, r6
  403f56:	1b09      	subs	r1, r1, r4
  403f58:	6055      	str	r5, [r2, #4]
  403f5a:	6019      	str	r1, [r3, #0]
  403f5c:	f000 fc1e 	bl	40479c <__malloc_unlock>
  403f60:	2001      	movs	r0, #1
  403f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403f64:	2100      	movs	r1, #0
  403f66:	4630      	mov	r0, r6
  403f68:	f000 fc1e 	bl	4047a8 <_sbrk_r>
  403f6c:	68ba      	ldr	r2, [r7, #8]
  403f6e:	1a83      	subs	r3, r0, r2
  403f70:	2b0f      	cmp	r3, #15
  403f72:	ddde      	ble.n	403f32 <_malloc_trim_r+0x3e>
  403f74:	4c06      	ldr	r4, [pc, #24]	; (403f90 <_malloc_trim_r+0x9c>)
  403f76:	4905      	ldr	r1, [pc, #20]	; (403f8c <_malloc_trim_r+0x98>)
  403f78:	6824      	ldr	r4, [r4, #0]
  403f7a:	f043 0301 	orr.w	r3, r3, #1
  403f7e:	1b00      	subs	r0, r0, r4
  403f80:	6053      	str	r3, [r2, #4]
  403f82:	6008      	str	r0, [r1, #0]
  403f84:	e7d5      	b.n	403f32 <_malloc_trim_r+0x3e>
  403f86:	bf00      	nop
  403f88:	20000444 	.word	0x20000444
  403f8c:	20008b8c 	.word	0x20008b8c
  403f90:	2000084c 	.word	0x2000084c

00403f94 <_free_r>:
  403f94:	2900      	cmp	r1, #0
  403f96:	d044      	beq.n	404022 <_free_r+0x8e>
  403f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f9c:	460d      	mov	r5, r1
  403f9e:	4680      	mov	r8, r0
  403fa0:	f000 fbf6 	bl	404790 <__malloc_lock>
  403fa4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403fa8:	4969      	ldr	r1, [pc, #420]	; (404150 <_free_r+0x1bc>)
  403faa:	f027 0301 	bic.w	r3, r7, #1
  403fae:	f1a5 0408 	sub.w	r4, r5, #8
  403fb2:	18e2      	adds	r2, r4, r3
  403fb4:	688e      	ldr	r6, [r1, #8]
  403fb6:	6850      	ldr	r0, [r2, #4]
  403fb8:	42b2      	cmp	r2, r6
  403fba:	f020 0003 	bic.w	r0, r0, #3
  403fbe:	d05e      	beq.n	40407e <_free_r+0xea>
  403fc0:	07fe      	lsls	r6, r7, #31
  403fc2:	6050      	str	r0, [r2, #4]
  403fc4:	d40b      	bmi.n	403fde <_free_r+0x4a>
  403fc6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403fca:	1be4      	subs	r4, r4, r7
  403fcc:	f101 0e08 	add.w	lr, r1, #8
  403fd0:	68a5      	ldr	r5, [r4, #8]
  403fd2:	4575      	cmp	r5, lr
  403fd4:	443b      	add	r3, r7
  403fd6:	d06d      	beq.n	4040b4 <_free_r+0x120>
  403fd8:	68e7      	ldr	r7, [r4, #12]
  403fda:	60ef      	str	r7, [r5, #12]
  403fdc:	60bd      	str	r5, [r7, #8]
  403fde:	1815      	adds	r5, r2, r0
  403fe0:	686d      	ldr	r5, [r5, #4]
  403fe2:	07ed      	lsls	r5, r5, #31
  403fe4:	d53e      	bpl.n	404064 <_free_r+0xd0>
  403fe6:	f043 0201 	orr.w	r2, r3, #1
  403fea:	6062      	str	r2, [r4, #4]
  403fec:	50e3      	str	r3, [r4, r3]
  403fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403ff2:	d217      	bcs.n	404024 <_free_r+0x90>
  403ff4:	08db      	lsrs	r3, r3, #3
  403ff6:	1c58      	adds	r0, r3, #1
  403ff8:	109a      	asrs	r2, r3, #2
  403ffa:	684d      	ldr	r5, [r1, #4]
  403ffc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404000:	60a7      	str	r7, [r4, #8]
  404002:	2301      	movs	r3, #1
  404004:	4093      	lsls	r3, r2
  404006:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40400a:	432b      	orrs	r3, r5
  40400c:	3a08      	subs	r2, #8
  40400e:	60e2      	str	r2, [r4, #12]
  404010:	604b      	str	r3, [r1, #4]
  404012:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404016:	60fc      	str	r4, [r7, #12]
  404018:	4640      	mov	r0, r8
  40401a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40401e:	f000 bbbd 	b.w	40479c <__malloc_unlock>
  404022:	4770      	bx	lr
  404024:	0a5a      	lsrs	r2, r3, #9
  404026:	2a04      	cmp	r2, #4
  404028:	d852      	bhi.n	4040d0 <_free_r+0x13c>
  40402a:	099a      	lsrs	r2, r3, #6
  40402c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404030:	00ff      	lsls	r7, r7, #3
  404032:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404036:	19c8      	adds	r0, r1, r7
  404038:	59ca      	ldr	r2, [r1, r7]
  40403a:	3808      	subs	r0, #8
  40403c:	4290      	cmp	r0, r2
  40403e:	d04f      	beq.n	4040e0 <_free_r+0x14c>
  404040:	6851      	ldr	r1, [r2, #4]
  404042:	f021 0103 	bic.w	r1, r1, #3
  404046:	428b      	cmp	r3, r1
  404048:	d232      	bcs.n	4040b0 <_free_r+0x11c>
  40404a:	6892      	ldr	r2, [r2, #8]
  40404c:	4290      	cmp	r0, r2
  40404e:	d1f7      	bne.n	404040 <_free_r+0xac>
  404050:	68c3      	ldr	r3, [r0, #12]
  404052:	60a0      	str	r0, [r4, #8]
  404054:	60e3      	str	r3, [r4, #12]
  404056:	609c      	str	r4, [r3, #8]
  404058:	60c4      	str	r4, [r0, #12]
  40405a:	4640      	mov	r0, r8
  40405c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404060:	f000 bb9c 	b.w	40479c <__malloc_unlock>
  404064:	6895      	ldr	r5, [r2, #8]
  404066:	4f3b      	ldr	r7, [pc, #236]	; (404154 <_free_r+0x1c0>)
  404068:	42bd      	cmp	r5, r7
  40406a:	4403      	add	r3, r0
  40406c:	d040      	beq.n	4040f0 <_free_r+0x15c>
  40406e:	68d0      	ldr	r0, [r2, #12]
  404070:	60e8      	str	r0, [r5, #12]
  404072:	f043 0201 	orr.w	r2, r3, #1
  404076:	6085      	str	r5, [r0, #8]
  404078:	6062      	str	r2, [r4, #4]
  40407a:	50e3      	str	r3, [r4, r3]
  40407c:	e7b7      	b.n	403fee <_free_r+0x5a>
  40407e:	07ff      	lsls	r7, r7, #31
  404080:	4403      	add	r3, r0
  404082:	d407      	bmi.n	404094 <_free_r+0x100>
  404084:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404088:	1aa4      	subs	r4, r4, r2
  40408a:	4413      	add	r3, r2
  40408c:	68a0      	ldr	r0, [r4, #8]
  40408e:	68e2      	ldr	r2, [r4, #12]
  404090:	60c2      	str	r2, [r0, #12]
  404092:	6090      	str	r0, [r2, #8]
  404094:	4a30      	ldr	r2, [pc, #192]	; (404158 <_free_r+0x1c4>)
  404096:	6812      	ldr	r2, [r2, #0]
  404098:	f043 0001 	orr.w	r0, r3, #1
  40409c:	4293      	cmp	r3, r2
  40409e:	6060      	str	r0, [r4, #4]
  4040a0:	608c      	str	r4, [r1, #8]
  4040a2:	d3b9      	bcc.n	404018 <_free_r+0x84>
  4040a4:	4b2d      	ldr	r3, [pc, #180]	; (40415c <_free_r+0x1c8>)
  4040a6:	4640      	mov	r0, r8
  4040a8:	6819      	ldr	r1, [r3, #0]
  4040aa:	f7ff ff23 	bl	403ef4 <_malloc_trim_r>
  4040ae:	e7b3      	b.n	404018 <_free_r+0x84>
  4040b0:	4610      	mov	r0, r2
  4040b2:	e7cd      	b.n	404050 <_free_r+0xbc>
  4040b4:	1811      	adds	r1, r2, r0
  4040b6:	6849      	ldr	r1, [r1, #4]
  4040b8:	07c9      	lsls	r1, r1, #31
  4040ba:	d444      	bmi.n	404146 <_free_r+0x1b2>
  4040bc:	6891      	ldr	r1, [r2, #8]
  4040be:	68d2      	ldr	r2, [r2, #12]
  4040c0:	60ca      	str	r2, [r1, #12]
  4040c2:	4403      	add	r3, r0
  4040c4:	f043 0001 	orr.w	r0, r3, #1
  4040c8:	6091      	str	r1, [r2, #8]
  4040ca:	6060      	str	r0, [r4, #4]
  4040cc:	50e3      	str	r3, [r4, r3]
  4040ce:	e7a3      	b.n	404018 <_free_r+0x84>
  4040d0:	2a14      	cmp	r2, #20
  4040d2:	d816      	bhi.n	404102 <_free_r+0x16e>
  4040d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4040d8:	00ff      	lsls	r7, r7, #3
  4040da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4040de:	e7aa      	b.n	404036 <_free_r+0xa2>
  4040e0:	10aa      	asrs	r2, r5, #2
  4040e2:	2301      	movs	r3, #1
  4040e4:	684d      	ldr	r5, [r1, #4]
  4040e6:	4093      	lsls	r3, r2
  4040e8:	432b      	orrs	r3, r5
  4040ea:	604b      	str	r3, [r1, #4]
  4040ec:	4603      	mov	r3, r0
  4040ee:	e7b0      	b.n	404052 <_free_r+0xbe>
  4040f0:	f043 0201 	orr.w	r2, r3, #1
  4040f4:	614c      	str	r4, [r1, #20]
  4040f6:	610c      	str	r4, [r1, #16]
  4040f8:	60e5      	str	r5, [r4, #12]
  4040fa:	60a5      	str	r5, [r4, #8]
  4040fc:	6062      	str	r2, [r4, #4]
  4040fe:	50e3      	str	r3, [r4, r3]
  404100:	e78a      	b.n	404018 <_free_r+0x84>
  404102:	2a54      	cmp	r2, #84	; 0x54
  404104:	d806      	bhi.n	404114 <_free_r+0x180>
  404106:	0b1a      	lsrs	r2, r3, #12
  404108:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40410c:	00ff      	lsls	r7, r7, #3
  40410e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404112:	e790      	b.n	404036 <_free_r+0xa2>
  404114:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404118:	d806      	bhi.n	404128 <_free_r+0x194>
  40411a:	0bda      	lsrs	r2, r3, #15
  40411c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404120:	00ff      	lsls	r7, r7, #3
  404122:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404126:	e786      	b.n	404036 <_free_r+0xa2>
  404128:	f240 5054 	movw	r0, #1364	; 0x554
  40412c:	4282      	cmp	r2, r0
  40412e:	d806      	bhi.n	40413e <_free_r+0x1aa>
  404130:	0c9a      	lsrs	r2, r3, #18
  404132:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404136:	00ff      	lsls	r7, r7, #3
  404138:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40413c:	e77b      	b.n	404036 <_free_r+0xa2>
  40413e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404142:	257e      	movs	r5, #126	; 0x7e
  404144:	e777      	b.n	404036 <_free_r+0xa2>
  404146:	f043 0101 	orr.w	r1, r3, #1
  40414a:	6061      	str	r1, [r4, #4]
  40414c:	6013      	str	r3, [r2, #0]
  40414e:	e763      	b.n	404018 <_free_r+0x84>
  404150:	20000444 	.word	0x20000444
  404154:	2000044c 	.word	0x2000044c
  404158:	20000850 	.word	0x20000850
  40415c:	20008bbc 	.word	0x20008bbc

00404160 <_fwalk_reent>:
  404160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404164:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404168:	d01f      	beq.n	4041aa <_fwalk_reent+0x4a>
  40416a:	4688      	mov	r8, r1
  40416c:	4606      	mov	r6, r0
  40416e:	f04f 0900 	mov.w	r9, #0
  404172:	687d      	ldr	r5, [r7, #4]
  404174:	68bc      	ldr	r4, [r7, #8]
  404176:	3d01      	subs	r5, #1
  404178:	d411      	bmi.n	40419e <_fwalk_reent+0x3e>
  40417a:	89a3      	ldrh	r3, [r4, #12]
  40417c:	2b01      	cmp	r3, #1
  40417e:	f105 35ff 	add.w	r5, r5, #4294967295
  404182:	d908      	bls.n	404196 <_fwalk_reent+0x36>
  404184:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404188:	3301      	adds	r3, #1
  40418a:	4621      	mov	r1, r4
  40418c:	4630      	mov	r0, r6
  40418e:	d002      	beq.n	404196 <_fwalk_reent+0x36>
  404190:	47c0      	blx	r8
  404192:	ea49 0900 	orr.w	r9, r9, r0
  404196:	1c6b      	adds	r3, r5, #1
  404198:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40419c:	d1ed      	bne.n	40417a <_fwalk_reent+0x1a>
  40419e:	683f      	ldr	r7, [r7, #0]
  4041a0:	2f00      	cmp	r7, #0
  4041a2:	d1e6      	bne.n	404172 <_fwalk_reent+0x12>
  4041a4:	4648      	mov	r0, r9
  4041a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4041aa:	46b9      	mov	r9, r7
  4041ac:	4648      	mov	r0, r9
  4041ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4041b2:	bf00      	nop

004041b4 <__retarget_lock_init_recursive>:
  4041b4:	4770      	bx	lr
  4041b6:	bf00      	nop

004041b8 <__retarget_lock_close_recursive>:
  4041b8:	4770      	bx	lr
  4041ba:	bf00      	nop

004041bc <__retarget_lock_acquire_recursive>:
  4041bc:	4770      	bx	lr
  4041be:	bf00      	nop

004041c0 <__retarget_lock_release_recursive>:
  4041c0:	4770      	bx	lr
  4041c2:	bf00      	nop

004041c4 <__swhatbuf_r>:
  4041c4:	b570      	push	{r4, r5, r6, lr}
  4041c6:	460c      	mov	r4, r1
  4041c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4041cc:	2900      	cmp	r1, #0
  4041ce:	b090      	sub	sp, #64	; 0x40
  4041d0:	4615      	mov	r5, r2
  4041d2:	461e      	mov	r6, r3
  4041d4:	db14      	blt.n	404200 <__swhatbuf_r+0x3c>
  4041d6:	aa01      	add	r2, sp, #4
  4041d8:	f000 fc28 	bl	404a2c <_fstat_r>
  4041dc:	2800      	cmp	r0, #0
  4041de:	db0f      	blt.n	404200 <__swhatbuf_r+0x3c>
  4041e0:	9a02      	ldr	r2, [sp, #8]
  4041e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4041e6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4041ea:	fab2 f282 	clz	r2, r2
  4041ee:	0952      	lsrs	r2, r2, #5
  4041f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4041f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4041f8:	6032      	str	r2, [r6, #0]
  4041fa:	602b      	str	r3, [r5, #0]
  4041fc:	b010      	add	sp, #64	; 0x40
  4041fe:	bd70      	pop	{r4, r5, r6, pc}
  404200:	89a2      	ldrh	r2, [r4, #12]
  404202:	2300      	movs	r3, #0
  404204:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404208:	6033      	str	r3, [r6, #0]
  40420a:	d004      	beq.n	404216 <__swhatbuf_r+0x52>
  40420c:	2240      	movs	r2, #64	; 0x40
  40420e:	4618      	mov	r0, r3
  404210:	602a      	str	r2, [r5, #0]
  404212:	b010      	add	sp, #64	; 0x40
  404214:	bd70      	pop	{r4, r5, r6, pc}
  404216:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40421a:	602b      	str	r3, [r5, #0]
  40421c:	b010      	add	sp, #64	; 0x40
  40421e:	bd70      	pop	{r4, r5, r6, pc}

00404220 <malloc>:
  404220:	4b02      	ldr	r3, [pc, #8]	; (40422c <malloc+0xc>)
  404222:	4601      	mov	r1, r0
  404224:	6818      	ldr	r0, [r3, #0]
  404226:	f000 b803 	b.w	404230 <_malloc_r>
  40422a:	bf00      	nop
  40422c:	20000010 	.word	0x20000010

00404230 <_malloc_r>:
  404230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404234:	f101 060b 	add.w	r6, r1, #11
  404238:	2e16      	cmp	r6, #22
  40423a:	b083      	sub	sp, #12
  40423c:	4605      	mov	r5, r0
  40423e:	f240 809e 	bls.w	40437e <_malloc_r+0x14e>
  404242:	f036 0607 	bics.w	r6, r6, #7
  404246:	f100 80bd 	bmi.w	4043c4 <_malloc_r+0x194>
  40424a:	42b1      	cmp	r1, r6
  40424c:	f200 80ba 	bhi.w	4043c4 <_malloc_r+0x194>
  404250:	f000 fa9e 	bl	404790 <__malloc_lock>
  404254:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404258:	f0c0 8293 	bcc.w	404782 <_malloc_r+0x552>
  40425c:	0a73      	lsrs	r3, r6, #9
  40425e:	f000 80b8 	beq.w	4043d2 <_malloc_r+0x1a2>
  404262:	2b04      	cmp	r3, #4
  404264:	f200 8179 	bhi.w	40455a <_malloc_r+0x32a>
  404268:	09b3      	lsrs	r3, r6, #6
  40426a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40426e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404272:	00c3      	lsls	r3, r0, #3
  404274:	4fbf      	ldr	r7, [pc, #764]	; (404574 <_malloc_r+0x344>)
  404276:	443b      	add	r3, r7
  404278:	f1a3 0108 	sub.w	r1, r3, #8
  40427c:	685c      	ldr	r4, [r3, #4]
  40427e:	42a1      	cmp	r1, r4
  404280:	d106      	bne.n	404290 <_malloc_r+0x60>
  404282:	e00c      	b.n	40429e <_malloc_r+0x6e>
  404284:	2a00      	cmp	r2, #0
  404286:	f280 80aa 	bge.w	4043de <_malloc_r+0x1ae>
  40428a:	68e4      	ldr	r4, [r4, #12]
  40428c:	42a1      	cmp	r1, r4
  40428e:	d006      	beq.n	40429e <_malloc_r+0x6e>
  404290:	6863      	ldr	r3, [r4, #4]
  404292:	f023 0303 	bic.w	r3, r3, #3
  404296:	1b9a      	subs	r2, r3, r6
  404298:	2a0f      	cmp	r2, #15
  40429a:	ddf3      	ble.n	404284 <_malloc_r+0x54>
  40429c:	4670      	mov	r0, lr
  40429e:	693c      	ldr	r4, [r7, #16]
  4042a0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404588 <_malloc_r+0x358>
  4042a4:	4574      	cmp	r4, lr
  4042a6:	f000 81ab 	beq.w	404600 <_malloc_r+0x3d0>
  4042aa:	6863      	ldr	r3, [r4, #4]
  4042ac:	f023 0303 	bic.w	r3, r3, #3
  4042b0:	1b9a      	subs	r2, r3, r6
  4042b2:	2a0f      	cmp	r2, #15
  4042b4:	f300 8190 	bgt.w	4045d8 <_malloc_r+0x3a8>
  4042b8:	2a00      	cmp	r2, #0
  4042ba:	f8c7 e014 	str.w	lr, [r7, #20]
  4042be:	f8c7 e010 	str.w	lr, [r7, #16]
  4042c2:	f280 809d 	bge.w	404400 <_malloc_r+0x1d0>
  4042c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4042ca:	f080 8161 	bcs.w	404590 <_malloc_r+0x360>
  4042ce:	08db      	lsrs	r3, r3, #3
  4042d0:	f103 0c01 	add.w	ip, r3, #1
  4042d4:	1099      	asrs	r1, r3, #2
  4042d6:	687a      	ldr	r2, [r7, #4]
  4042d8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4042dc:	f8c4 8008 	str.w	r8, [r4, #8]
  4042e0:	2301      	movs	r3, #1
  4042e2:	408b      	lsls	r3, r1
  4042e4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4042e8:	4313      	orrs	r3, r2
  4042ea:	3908      	subs	r1, #8
  4042ec:	60e1      	str	r1, [r4, #12]
  4042ee:	607b      	str	r3, [r7, #4]
  4042f0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4042f4:	f8c8 400c 	str.w	r4, [r8, #12]
  4042f8:	1082      	asrs	r2, r0, #2
  4042fa:	2401      	movs	r4, #1
  4042fc:	4094      	lsls	r4, r2
  4042fe:	429c      	cmp	r4, r3
  404300:	f200 808b 	bhi.w	40441a <_malloc_r+0x1ea>
  404304:	421c      	tst	r4, r3
  404306:	d106      	bne.n	404316 <_malloc_r+0xe6>
  404308:	f020 0003 	bic.w	r0, r0, #3
  40430c:	0064      	lsls	r4, r4, #1
  40430e:	421c      	tst	r4, r3
  404310:	f100 0004 	add.w	r0, r0, #4
  404314:	d0fa      	beq.n	40430c <_malloc_r+0xdc>
  404316:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40431a:	46cc      	mov	ip, r9
  40431c:	4680      	mov	r8, r0
  40431e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404322:	459c      	cmp	ip, r3
  404324:	d107      	bne.n	404336 <_malloc_r+0x106>
  404326:	e16d      	b.n	404604 <_malloc_r+0x3d4>
  404328:	2a00      	cmp	r2, #0
  40432a:	f280 817b 	bge.w	404624 <_malloc_r+0x3f4>
  40432e:	68db      	ldr	r3, [r3, #12]
  404330:	459c      	cmp	ip, r3
  404332:	f000 8167 	beq.w	404604 <_malloc_r+0x3d4>
  404336:	6859      	ldr	r1, [r3, #4]
  404338:	f021 0103 	bic.w	r1, r1, #3
  40433c:	1b8a      	subs	r2, r1, r6
  40433e:	2a0f      	cmp	r2, #15
  404340:	ddf2      	ble.n	404328 <_malloc_r+0xf8>
  404342:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404346:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40434a:	9300      	str	r3, [sp, #0]
  40434c:	199c      	adds	r4, r3, r6
  40434e:	4628      	mov	r0, r5
  404350:	f046 0601 	orr.w	r6, r6, #1
  404354:	f042 0501 	orr.w	r5, r2, #1
  404358:	605e      	str	r6, [r3, #4]
  40435a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40435e:	f8cc 8008 	str.w	r8, [ip, #8]
  404362:	617c      	str	r4, [r7, #20]
  404364:	613c      	str	r4, [r7, #16]
  404366:	f8c4 e00c 	str.w	lr, [r4, #12]
  40436a:	f8c4 e008 	str.w	lr, [r4, #8]
  40436e:	6065      	str	r5, [r4, #4]
  404370:	505a      	str	r2, [r3, r1]
  404372:	f000 fa13 	bl	40479c <__malloc_unlock>
  404376:	9b00      	ldr	r3, [sp, #0]
  404378:	f103 0408 	add.w	r4, r3, #8
  40437c:	e01e      	b.n	4043bc <_malloc_r+0x18c>
  40437e:	2910      	cmp	r1, #16
  404380:	d820      	bhi.n	4043c4 <_malloc_r+0x194>
  404382:	f000 fa05 	bl	404790 <__malloc_lock>
  404386:	2610      	movs	r6, #16
  404388:	2318      	movs	r3, #24
  40438a:	2002      	movs	r0, #2
  40438c:	4f79      	ldr	r7, [pc, #484]	; (404574 <_malloc_r+0x344>)
  40438e:	443b      	add	r3, r7
  404390:	f1a3 0208 	sub.w	r2, r3, #8
  404394:	685c      	ldr	r4, [r3, #4]
  404396:	4294      	cmp	r4, r2
  404398:	f000 813d 	beq.w	404616 <_malloc_r+0x3e6>
  40439c:	6863      	ldr	r3, [r4, #4]
  40439e:	68e1      	ldr	r1, [r4, #12]
  4043a0:	68a6      	ldr	r6, [r4, #8]
  4043a2:	f023 0303 	bic.w	r3, r3, #3
  4043a6:	4423      	add	r3, r4
  4043a8:	4628      	mov	r0, r5
  4043aa:	685a      	ldr	r2, [r3, #4]
  4043ac:	60f1      	str	r1, [r6, #12]
  4043ae:	f042 0201 	orr.w	r2, r2, #1
  4043b2:	608e      	str	r6, [r1, #8]
  4043b4:	605a      	str	r2, [r3, #4]
  4043b6:	f000 f9f1 	bl	40479c <__malloc_unlock>
  4043ba:	3408      	adds	r4, #8
  4043bc:	4620      	mov	r0, r4
  4043be:	b003      	add	sp, #12
  4043c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043c4:	2400      	movs	r4, #0
  4043c6:	230c      	movs	r3, #12
  4043c8:	4620      	mov	r0, r4
  4043ca:	602b      	str	r3, [r5, #0]
  4043cc:	b003      	add	sp, #12
  4043ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043d2:	2040      	movs	r0, #64	; 0x40
  4043d4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4043d8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4043dc:	e74a      	b.n	404274 <_malloc_r+0x44>
  4043de:	4423      	add	r3, r4
  4043e0:	68e1      	ldr	r1, [r4, #12]
  4043e2:	685a      	ldr	r2, [r3, #4]
  4043e4:	68a6      	ldr	r6, [r4, #8]
  4043e6:	f042 0201 	orr.w	r2, r2, #1
  4043ea:	60f1      	str	r1, [r6, #12]
  4043ec:	4628      	mov	r0, r5
  4043ee:	608e      	str	r6, [r1, #8]
  4043f0:	605a      	str	r2, [r3, #4]
  4043f2:	f000 f9d3 	bl	40479c <__malloc_unlock>
  4043f6:	3408      	adds	r4, #8
  4043f8:	4620      	mov	r0, r4
  4043fa:	b003      	add	sp, #12
  4043fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404400:	4423      	add	r3, r4
  404402:	4628      	mov	r0, r5
  404404:	685a      	ldr	r2, [r3, #4]
  404406:	f042 0201 	orr.w	r2, r2, #1
  40440a:	605a      	str	r2, [r3, #4]
  40440c:	f000 f9c6 	bl	40479c <__malloc_unlock>
  404410:	3408      	adds	r4, #8
  404412:	4620      	mov	r0, r4
  404414:	b003      	add	sp, #12
  404416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40441a:	68bc      	ldr	r4, [r7, #8]
  40441c:	6863      	ldr	r3, [r4, #4]
  40441e:	f023 0803 	bic.w	r8, r3, #3
  404422:	45b0      	cmp	r8, r6
  404424:	d304      	bcc.n	404430 <_malloc_r+0x200>
  404426:	eba8 0306 	sub.w	r3, r8, r6
  40442a:	2b0f      	cmp	r3, #15
  40442c:	f300 8085 	bgt.w	40453a <_malloc_r+0x30a>
  404430:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40458c <_malloc_r+0x35c>
  404434:	4b50      	ldr	r3, [pc, #320]	; (404578 <_malloc_r+0x348>)
  404436:	f8d9 2000 	ldr.w	r2, [r9]
  40443a:	681b      	ldr	r3, [r3, #0]
  40443c:	3201      	adds	r2, #1
  40443e:	4433      	add	r3, r6
  404440:	eb04 0a08 	add.w	sl, r4, r8
  404444:	f000 8155 	beq.w	4046f2 <_malloc_r+0x4c2>
  404448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40444c:	330f      	adds	r3, #15
  40444e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404452:	f02b 0b0f 	bic.w	fp, fp, #15
  404456:	4659      	mov	r1, fp
  404458:	4628      	mov	r0, r5
  40445a:	f000 f9a5 	bl	4047a8 <_sbrk_r>
  40445e:	1c41      	adds	r1, r0, #1
  404460:	4602      	mov	r2, r0
  404462:	f000 80fc 	beq.w	40465e <_malloc_r+0x42e>
  404466:	4582      	cmp	sl, r0
  404468:	f200 80f7 	bhi.w	40465a <_malloc_r+0x42a>
  40446c:	4b43      	ldr	r3, [pc, #268]	; (40457c <_malloc_r+0x34c>)
  40446e:	6819      	ldr	r1, [r3, #0]
  404470:	4459      	add	r1, fp
  404472:	6019      	str	r1, [r3, #0]
  404474:	f000 814d 	beq.w	404712 <_malloc_r+0x4e2>
  404478:	f8d9 0000 	ldr.w	r0, [r9]
  40447c:	3001      	adds	r0, #1
  40447e:	bf1b      	ittet	ne
  404480:	eba2 0a0a 	subne.w	sl, r2, sl
  404484:	4451      	addne	r1, sl
  404486:	f8c9 2000 	streq.w	r2, [r9]
  40448a:	6019      	strne	r1, [r3, #0]
  40448c:	f012 0107 	ands.w	r1, r2, #7
  404490:	f000 8115 	beq.w	4046be <_malloc_r+0x48e>
  404494:	f1c1 0008 	rsb	r0, r1, #8
  404498:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40449c:	4402      	add	r2, r0
  40449e:	3108      	adds	r1, #8
  4044a0:	eb02 090b 	add.w	r9, r2, fp
  4044a4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4044a8:	eba1 0909 	sub.w	r9, r1, r9
  4044ac:	4649      	mov	r1, r9
  4044ae:	4628      	mov	r0, r5
  4044b0:	9301      	str	r3, [sp, #4]
  4044b2:	9200      	str	r2, [sp, #0]
  4044b4:	f000 f978 	bl	4047a8 <_sbrk_r>
  4044b8:	1c43      	adds	r3, r0, #1
  4044ba:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4044be:	f000 8143 	beq.w	404748 <_malloc_r+0x518>
  4044c2:	1a80      	subs	r0, r0, r2
  4044c4:	4448      	add	r0, r9
  4044c6:	f040 0001 	orr.w	r0, r0, #1
  4044ca:	6819      	ldr	r1, [r3, #0]
  4044cc:	60ba      	str	r2, [r7, #8]
  4044ce:	4449      	add	r1, r9
  4044d0:	42bc      	cmp	r4, r7
  4044d2:	6050      	str	r0, [r2, #4]
  4044d4:	6019      	str	r1, [r3, #0]
  4044d6:	d017      	beq.n	404508 <_malloc_r+0x2d8>
  4044d8:	f1b8 0f0f 	cmp.w	r8, #15
  4044dc:	f240 80fb 	bls.w	4046d6 <_malloc_r+0x4a6>
  4044e0:	6860      	ldr	r0, [r4, #4]
  4044e2:	f1a8 020c 	sub.w	r2, r8, #12
  4044e6:	f022 0207 	bic.w	r2, r2, #7
  4044ea:	eb04 0e02 	add.w	lr, r4, r2
  4044ee:	f000 0001 	and.w	r0, r0, #1
  4044f2:	f04f 0c05 	mov.w	ip, #5
  4044f6:	4310      	orrs	r0, r2
  4044f8:	2a0f      	cmp	r2, #15
  4044fa:	6060      	str	r0, [r4, #4]
  4044fc:	f8ce c004 	str.w	ip, [lr, #4]
  404500:	f8ce c008 	str.w	ip, [lr, #8]
  404504:	f200 8117 	bhi.w	404736 <_malloc_r+0x506>
  404508:	4b1d      	ldr	r3, [pc, #116]	; (404580 <_malloc_r+0x350>)
  40450a:	68bc      	ldr	r4, [r7, #8]
  40450c:	681a      	ldr	r2, [r3, #0]
  40450e:	4291      	cmp	r1, r2
  404510:	bf88      	it	hi
  404512:	6019      	strhi	r1, [r3, #0]
  404514:	4b1b      	ldr	r3, [pc, #108]	; (404584 <_malloc_r+0x354>)
  404516:	681a      	ldr	r2, [r3, #0]
  404518:	4291      	cmp	r1, r2
  40451a:	6862      	ldr	r2, [r4, #4]
  40451c:	bf88      	it	hi
  40451e:	6019      	strhi	r1, [r3, #0]
  404520:	f022 0203 	bic.w	r2, r2, #3
  404524:	4296      	cmp	r6, r2
  404526:	eba2 0306 	sub.w	r3, r2, r6
  40452a:	d801      	bhi.n	404530 <_malloc_r+0x300>
  40452c:	2b0f      	cmp	r3, #15
  40452e:	dc04      	bgt.n	40453a <_malloc_r+0x30a>
  404530:	4628      	mov	r0, r5
  404532:	f000 f933 	bl	40479c <__malloc_unlock>
  404536:	2400      	movs	r4, #0
  404538:	e740      	b.n	4043bc <_malloc_r+0x18c>
  40453a:	19a2      	adds	r2, r4, r6
  40453c:	f043 0301 	orr.w	r3, r3, #1
  404540:	f046 0601 	orr.w	r6, r6, #1
  404544:	6066      	str	r6, [r4, #4]
  404546:	4628      	mov	r0, r5
  404548:	60ba      	str	r2, [r7, #8]
  40454a:	6053      	str	r3, [r2, #4]
  40454c:	f000 f926 	bl	40479c <__malloc_unlock>
  404550:	3408      	adds	r4, #8
  404552:	4620      	mov	r0, r4
  404554:	b003      	add	sp, #12
  404556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40455a:	2b14      	cmp	r3, #20
  40455c:	d971      	bls.n	404642 <_malloc_r+0x412>
  40455e:	2b54      	cmp	r3, #84	; 0x54
  404560:	f200 80a3 	bhi.w	4046aa <_malloc_r+0x47a>
  404564:	0b33      	lsrs	r3, r6, #12
  404566:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40456a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40456e:	00c3      	lsls	r3, r0, #3
  404570:	e680      	b.n	404274 <_malloc_r+0x44>
  404572:	bf00      	nop
  404574:	20000444 	.word	0x20000444
  404578:	20008bbc 	.word	0x20008bbc
  40457c:	20008b8c 	.word	0x20008b8c
  404580:	20008bb4 	.word	0x20008bb4
  404584:	20008bb8 	.word	0x20008bb8
  404588:	2000044c 	.word	0x2000044c
  40458c:	2000084c 	.word	0x2000084c
  404590:	0a5a      	lsrs	r2, r3, #9
  404592:	2a04      	cmp	r2, #4
  404594:	d95b      	bls.n	40464e <_malloc_r+0x41e>
  404596:	2a14      	cmp	r2, #20
  404598:	f200 80ae 	bhi.w	4046f8 <_malloc_r+0x4c8>
  40459c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4045a0:	00c9      	lsls	r1, r1, #3
  4045a2:	325b      	adds	r2, #91	; 0x5b
  4045a4:	eb07 0c01 	add.w	ip, r7, r1
  4045a8:	5879      	ldr	r1, [r7, r1]
  4045aa:	f1ac 0c08 	sub.w	ip, ip, #8
  4045ae:	458c      	cmp	ip, r1
  4045b0:	f000 8088 	beq.w	4046c4 <_malloc_r+0x494>
  4045b4:	684a      	ldr	r2, [r1, #4]
  4045b6:	f022 0203 	bic.w	r2, r2, #3
  4045ba:	4293      	cmp	r3, r2
  4045bc:	d273      	bcs.n	4046a6 <_malloc_r+0x476>
  4045be:	6889      	ldr	r1, [r1, #8]
  4045c0:	458c      	cmp	ip, r1
  4045c2:	d1f7      	bne.n	4045b4 <_malloc_r+0x384>
  4045c4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4045c8:	687b      	ldr	r3, [r7, #4]
  4045ca:	60e2      	str	r2, [r4, #12]
  4045cc:	f8c4 c008 	str.w	ip, [r4, #8]
  4045d0:	6094      	str	r4, [r2, #8]
  4045d2:	f8cc 400c 	str.w	r4, [ip, #12]
  4045d6:	e68f      	b.n	4042f8 <_malloc_r+0xc8>
  4045d8:	19a1      	adds	r1, r4, r6
  4045da:	f046 0c01 	orr.w	ip, r6, #1
  4045de:	f042 0601 	orr.w	r6, r2, #1
  4045e2:	f8c4 c004 	str.w	ip, [r4, #4]
  4045e6:	4628      	mov	r0, r5
  4045e8:	6179      	str	r1, [r7, #20]
  4045ea:	6139      	str	r1, [r7, #16]
  4045ec:	f8c1 e00c 	str.w	lr, [r1, #12]
  4045f0:	f8c1 e008 	str.w	lr, [r1, #8]
  4045f4:	604e      	str	r6, [r1, #4]
  4045f6:	50e2      	str	r2, [r4, r3]
  4045f8:	f000 f8d0 	bl	40479c <__malloc_unlock>
  4045fc:	3408      	adds	r4, #8
  4045fe:	e6dd      	b.n	4043bc <_malloc_r+0x18c>
  404600:	687b      	ldr	r3, [r7, #4]
  404602:	e679      	b.n	4042f8 <_malloc_r+0xc8>
  404604:	f108 0801 	add.w	r8, r8, #1
  404608:	f018 0f03 	tst.w	r8, #3
  40460c:	f10c 0c08 	add.w	ip, ip, #8
  404610:	f47f ae85 	bne.w	40431e <_malloc_r+0xee>
  404614:	e02d      	b.n	404672 <_malloc_r+0x442>
  404616:	68dc      	ldr	r4, [r3, #12]
  404618:	42a3      	cmp	r3, r4
  40461a:	bf08      	it	eq
  40461c:	3002      	addeq	r0, #2
  40461e:	f43f ae3e 	beq.w	40429e <_malloc_r+0x6e>
  404622:	e6bb      	b.n	40439c <_malloc_r+0x16c>
  404624:	4419      	add	r1, r3
  404626:	461c      	mov	r4, r3
  404628:	684a      	ldr	r2, [r1, #4]
  40462a:	68db      	ldr	r3, [r3, #12]
  40462c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404630:	f042 0201 	orr.w	r2, r2, #1
  404634:	604a      	str	r2, [r1, #4]
  404636:	4628      	mov	r0, r5
  404638:	60f3      	str	r3, [r6, #12]
  40463a:	609e      	str	r6, [r3, #8]
  40463c:	f000 f8ae 	bl	40479c <__malloc_unlock>
  404640:	e6bc      	b.n	4043bc <_malloc_r+0x18c>
  404642:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404646:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40464a:	00c3      	lsls	r3, r0, #3
  40464c:	e612      	b.n	404274 <_malloc_r+0x44>
  40464e:	099a      	lsrs	r2, r3, #6
  404650:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404654:	00c9      	lsls	r1, r1, #3
  404656:	3238      	adds	r2, #56	; 0x38
  404658:	e7a4      	b.n	4045a4 <_malloc_r+0x374>
  40465a:	42bc      	cmp	r4, r7
  40465c:	d054      	beq.n	404708 <_malloc_r+0x4d8>
  40465e:	68bc      	ldr	r4, [r7, #8]
  404660:	6862      	ldr	r2, [r4, #4]
  404662:	f022 0203 	bic.w	r2, r2, #3
  404666:	e75d      	b.n	404524 <_malloc_r+0x2f4>
  404668:	f859 3908 	ldr.w	r3, [r9], #-8
  40466c:	4599      	cmp	r9, r3
  40466e:	f040 8086 	bne.w	40477e <_malloc_r+0x54e>
  404672:	f010 0f03 	tst.w	r0, #3
  404676:	f100 30ff 	add.w	r0, r0, #4294967295
  40467a:	d1f5      	bne.n	404668 <_malloc_r+0x438>
  40467c:	687b      	ldr	r3, [r7, #4]
  40467e:	ea23 0304 	bic.w	r3, r3, r4
  404682:	607b      	str	r3, [r7, #4]
  404684:	0064      	lsls	r4, r4, #1
  404686:	429c      	cmp	r4, r3
  404688:	f63f aec7 	bhi.w	40441a <_malloc_r+0x1ea>
  40468c:	2c00      	cmp	r4, #0
  40468e:	f43f aec4 	beq.w	40441a <_malloc_r+0x1ea>
  404692:	421c      	tst	r4, r3
  404694:	4640      	mov	r0, r8
  404696:	f47f ae3e 	bne.w	404316 <_malloc_r+0xe6>
  40469a:	0064      	lsls	r4, r4, #1
  40469c:	421c      	tst	r4, r3
  40469e:	f100 0004 	add.w	r0, r0, #4
  4046a2:	d0fa      	beq.n	40469a <_malloc_r+0x46a>
  4046a4:	e637      	b.n	404316 <_malloc_r+0xe6>
  4046a6:	468c      	mov	ip, r1
  4046a8:	e78c      	b.n	4045c4 <_malloc_r+0x394>
  4046aa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4046ae:	d815      	bhi.n	4046dc <_malloc_r+0x4ac>
  4046b0:	0bf3      	lsrs	r3, r6, #15
  4046b2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4046b6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4046ba:	00c3      	lsls	r3, r0, #3
  4046bc:	e5da      	b.n	404274 <_malloc_r+0x44>
  4046be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4046c2:	e6ed      	b.n	4044a0 <_malloc_r+0x270>
  4046c4:	687b      	ldr	r3, [r7, #4]
  4046c6:	1092      	asrs	r2, r2, #2
  4046c8:	2101      	movs	r1, #1
  4046ca:	fa01 f202 	lsl.w	r2, r1, r2
  4046ce:	4313      	orrs	r3, r2
  4046d0:	607b      	str	r3, [r7, #4]
  4046d2:	4662      	mov	r2, ip
  4046d4:	e779      	b.n	4045ca <_malloc_r+0x39a>
  4046d6:	2301      	movs	r3, #1
  4046d8:	6053      	str	r3, [r2, #4]
  4046da:	e729      	b.n	404530 <_malloc_r+0x300>
  4046dc:	f240 5254 	movw	r2, #1364	; 0x554
  4046e0:	4293      	cmp	r3, r2
  4046e2:	d822      	bhi.n	40472a <_malloc_r+0x4fa>
  4046e4:	0cb3      	lsrs	r3, r6, #18
  4046e6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4046ea:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4046ee:	00c3      	lsls	r3, r0, #3
  4046f0:	e5c0      	b.n	404274 <_malloc_r+0x44>
  4046f2:	f103 0b10 	add.w	fp, r3, #16
  4046f6:	e6ae      	b.n	404456 <_malloc_r+0x226>
  4046f8:	2a54      	cmp	r2, #84	; 0x54
  4046fa:	d829      	bhi.n	404750 <_malloc_r+0x520>
  4046fc:	0b1a      	lsrs	r2, r3, #12
  4046fe:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404702:	00c9      	lsls	r1, r1, #3
  404704:	326e      	adds	r2, #110	; 0x6e
  404706:	e74d      	b.n	4045a4 <_malloc_r+0x374>
  404708:	4b20      	ldr	r3, [pc, #128]	; (40478c <_malloc_r+0x55c>)
  40470a:	6819      	ldr	r1, [r3, #0]
  40470c:	4459      	add	r1, fp
  40470e:	6019      	str	r1, [r3, #0]
  404710:	e6b2      	b.n	404478 <_malloc_r+0x248>
  404712:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404716:	2800      	cmp	r0, #0
  404718:	f47f aeae 	bne.w	404478 <_malloc_r+0x248>
  40471c:	eb08 030b 	add.w	r3, r8, fp
  404720:	68ba      	ldr	r2, [r7, #8]
  404722:	f043 0301 	orr.w	r3, r3, #1
  404726:	6053      	str	r3, [r2, #4]
  404728:	e6ee      	b.n	404508 <_malloc_r+0x2d8>
  40472a:	207f      	movs	r0, #127	; 0x7f
  40472c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404730:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404734:	e59e      	b.n	404274 <_malloc_r+0x44>
  404736:	f104 0108 	add.w	r1, r4, #8
  40473a:	4628      	mov	r0, r5
  40473c:	9300      	str	r3, [sp, #0]
  40473e:	f7ff fc29 	bl	403f94 <_free_r>
  404742:	9b00      	ldr	r3, [sp, #0]
  404744:	6819      	ldr	r1, [r3, #0]
  404746:	e6df      	b.n	404508 <_malloc_r+0x2d8>
  404748:	2001      	movs	r0, #1
  40474a:	f04f 0900 	mov.w	r9, #0
  40474e:	e6bc      	b.n	4044ca <_malloc_r+0x29a>
  404750:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404754:	d805      	bhi.n	404762 <_malloc_r+0x532>
  404756:	0bda      	lsrs	r2, r3, #15
  404758:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40475c:	00c9      	lsls	r1, r1, #3
  40475e:	3277      	adds	r2, #119	; 0x77
  404760:	e720      	b.n	4045a4 <_malloc_r+0x374>
  404762:	f240 5154 	movw	r1, #1364	; 0x554
  404766:	428a      	cmp	r2, r1
  404768:	d805      	bhi.n	404776 <_malloc_r+0x546>
  40476a:	0c9a      	lsrs	r2, r3, #18
  40476c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404770:	00c9      	lsls	r1, r1, #3
  404772:	327c      	adds	r2, #124	; 0x7c
  404774:	e716      	b.n	4045a4 <_malloc_r+0x374>
  404776:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40477a:	227e      	movs	r2, #126	; 0x7e
  40477c:	e712      	b.n	4045a4 <_malloc_r+0x374>
  40477e:	687b      	ldr	r3, [r7, #4]
  404780:	e780      	b.n	404684 <_malloc_r+0x454>
  404782:	08f0      	lsrs	r0, r6, #3
  404784:	f106 0308 	add.w	r3, r6, #8
  404788:	e600      	b.n	40438c <_malloc_r+0x15c>
  40478a:	bf00      	nop
  40478c:	20008b8c 	.word	0x20008b8c

00404790 <__malloc_lock>:
  404790:	4801      	ldr	r0, [pc, #4]	; (404798 <__malloc_lock+0x8>)
  404792:	f7ff bd13 	b.w	4041bc <__retarget_lock_acquire_recursive>
  404796:	bf00      	nop
  404798:	20008ca0 	.word	0x20008ca0

0040479c <__malloc_unlock>:
  40479c:	4801      	ldr	r0, [pc, #4]	; (4047a4 <__malloc_unlock+0x8>)
  40479e:	f7ff bd0f 	b.w	4041c0 <__retarget_lock_release_recursive>
  4047a2:	bf00      	nop
  4047a4:	20008ca0 	.word	0x20008ca0

004047a8 <_sbrk_r>:
  4047a8:	b538      	push	{r3, r4, r5, lr}
  4047aa:	4c07      	ldr	r4, [pc, #28]	; (4047c8 <_sbrk_r+0x20>)
  4047ac:	2300      	movs	r3, #0
  4047ae:	4605      	mov	r5, r0
  4047b0:	4608      	mov	r0, r1
  4047b2:	6023      	str	r3, [r4, #0]
  4047b4:	f7fc fa88 	bl	400cc8 <_sbrk>
  4047b8:	1c43      	adds	r3, r0, #1
  4047ba:	d000      	beq.n	4047be <_sbrk_r+0x16>
  4047bc:	bd38      	pop	{r3, r4, r5, pc}
  4047be:	6823      	ldr	r3, [r4, #0]
  4047c0:	2b00      	cmp	r3, #0
  4047c2:	d0fb      	beq.n	4047bc <_sbrk_r+0x14>
  4047c4:	602b      	str	r3, [r5, #0]
  4047c6:	bd38      	pop	{r3, r4, r5, pc}
  4047c8:	20008cb4 	.word	0x20008cb4

004047cc <__sread>:
  4047cc:	b510      	push	{r4, lr}
  4047ce:	460c      	mov	r4, r1
  4047d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4047d4:	f000 f954 	bl	404a80 <_read_r>
  4047d8:	2800      	cmp	r0, #0
  4047da:	db03      	blt.n	4047e4 <__sread+0x18>
  4047dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4047de:	4403      	add	r3, r0
  4047e0:	6523      	str	r3, [r4, #80]	; 0x50
  4047e2:	bd10      	pop	{r4, pc}
  4047e4:	89a3      	ldrh	r3, [r4, #12]
  4047e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4047ea:	81a3      	strh	r3, [r4, #12]
  4047ec:	bd10      	pop	{r4, pc}
  4047ee:	bf00      	nop

004047f0 <__swrite>:
  4047f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4047f4:	4616      	mov	r6, r2
  4047f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4047fa:	461f      	mov	r7, r3
  4047fc:	05d3      	lsls	r3, r2, #23
  4047fe:	460c      	mov	r4, r1
  404800:	4605      	mov	r5, r0
  404802:	d507      	bpl.n	404814 <__swrite+0x24>
  404804:	2200      	movs	r2, #0
  404806:	2302      	movs	r3, #2
  404808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40480c:	f000 f922 	bl	404a54 <_lseek_r>
  404810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404818:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40481c:	81a2      	strh	r2, [r4, #12]
  40481e:	463b      	mov	r3, r7
  404820:	4632      	mov	r2, r6
  404822:	4628      	mov	r0, r5
  404824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404828:	f000 b814 	b.w	404854 <_write_r>

0040482c <__sseek>:
  40482c:	b510      	push	{r4, lr}
  40482e:	460c      	mov	r4, r1
  404830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404834:	f000 f90e 	bl	404a54 <_lseek_r>
  404838:	89a3      	ldrh	r3, [r4, #12]
  40483a:	1c42      	adds	r2, r0, #1
  40483c:	bf0e      	itee	eq
  40483e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404846:	6520      	strne	r0, [r4, #80]	; 0x50
  404848:	81a3      	strh	r3, [r4, #12]
  40484a:	bd10      	pop	{r4, pc}

0040484c <__sclose>:
  40484c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404850:	f000 b878 	b.w	404944 <_close_r>

00404854 <_write_r>:
  404854:	b570      	push	{r4, r5, r6, lr}
  404856:	460d      	mov	r5, r1
  404858:	4c08      	ldr	r4, [pc, #32]	; (40487c <_write_r+0x28>)
  40485a:	4611      	mov	r1, r2
  40485c:	4606      	mov	r6, r0
  40485e:	461a      	mov	r2, r3
  404860:	4628      	mov	r0, r5
  404862:	2300      	movs	r3, #0
  404864:	6023      	str	r3, [r4, #0]
  404866:	f7fb fd67 	bl	400338 <_write>
  40486a:	1c43      	adds	r3, r0, #1
  40486c:	d000      	beq.n	404870 <_write_r+0x1c>
  40486e:	bd70      	pop	{r4, r5, r6, pc}
  404870:	6823      	ldr	r3, [r4, #0]
  404872:	2b00      	cmp	r3, #0
  404874:	d0fb      	beq.n	40486e <_write_r+0x1a>
  404876:	6033      	str	r3, [r6, #0]
  404878:	bd70      	pop	{r4, r5, r6, pc}
  40487a:	bf00      	nop
  40487c:	20008cb4 	.word	0x20008cb4

00404880 <__register_exitproc>:
  404880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404884:	4d2c      	ldr	r5, [pc, #176]	; (404938 <__register_exitproc+0xb8>)
  404886:	4606      	mov	r6, r0
  404888:	6828      	ldr	r0, [r5, #0]
  40488a:	4698      	mov	r8, r3
  40488c:	460f      	mov	r7, r1
  40488e:	4691      	mov	r9, r2
  404890:	f7ff fc94 	bl	4041bc <__retarget_lock_acquire_recursive>
  404894:	4b29      	ldr	r3, [pc, #164]	; (40493c <__register_exitproc+0xbc>)
  404896:	681c      	ldr	r4, [r3, #0]
  404898:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40489c:	2b00      	cmp	r3, #0
  40489e:	d03e      	beq.n	40491e <__register_exitproc+0x9e>
  4048a0:	685a      	ldr	r2, [r3, #4]
  4048a2:	2a1f      	cmp	r2, #31
  4048a4:	dc1c      	bgt.n	4048e0 <__register_exitproc+0x60>
  4048a6:	f102 0e01 	add.w	lr, r2, #1
  4048aa:	b176      	cbz	r6, 4048ca <__register_exitproc+0x4a>
  4048ac:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4048b0:	2401      	movs	r4, #1
  4048b2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4048b6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4048ba:	4094      	lsls	r4, r2
  4048bc:	4320      	orrs	r0, r4
  4048be:	2e02      	cmp	r6, #2
  4048c0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4048c4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4048c8:	d023      	beq.n	404912 <__register_exitproc+0x92>
  4048ca:	3202      	adds	r2, #2
  4048cc:	f8c3 e004 	str.w	lr, [r3, #4]
  4048d0:	6828      	ldr	r0, [r5, #0]
  4048d2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4048d6:	f7ff fc73 	bl	4041c0 <__retarget_lock_release_recursive>
  4048da:	2000      	movs	r0, #0
  4048dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4048e0:	4b17      	ldr	r3, [pc, #92]	; (404940 <__register_exitproc+0xc0>)
  4048e2:	b30b      	cbz	r3, 404928 <__register_exitproc+0xa8>
  4048e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4048e8:	f7ff fc9a 	bl	404220 <malloc>
  4048ec:	4603      	mov	r3, r0
  4048ee:	b1d8      	cbz	r0, 404928 <__register_exitproc+0xa8>
  4048f0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4048f4:	6002      	str	r2, [r0, #0]
  4048f6:	2100      	movs	r1, #0
  4048f8:	6041      	str	r1, [r0, #4]
  4048fa:	460a      	mov	r2, r1
  4048fc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404900:	f04f 0e01 	mov.w	lr, #1
  404904:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404908:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40490c:	2e00      	cmp	r6, #0
  40490e:	d0dc      	beq.n	4048ca <__register_exitproc+0x4a>
  404910:	e7cc      	b.n	4048ac <__register_exitproc+0x2c>
  404912:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  404916:	430c      	orrs	r4, r1
  404918:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40491c:	e7d5      	b.n	4048ca <__register_exitproc+0x4a>
  40491e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404922:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  404926:	e7bb      	b.n	4048a0 <__register_exitproc+0x20>
  404928:	6828      	ldr	r0, [r5, #0]
  40492a:	f7ff fc49 	bl	4041c0 <__retarget_lock_release_recursive>
  40492e:	f04f 30ff 	mov.w	r0, #4294967295
  404932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404936:	bf00      	nop
  404938:	20000440 	.word	0x20000440
  40493c:	00404ac8 	.word	0x00404ac8
  404940:	00404221 	.word	0x00404221

00404944 <_close_r>:
  404944:	b538      	push	{r3, r4, r5, lr}
  404946:	4c07      	ldr	r4, [pc, #28]	; (404964 <_close_r+0x20>)
  404948:	2300      	movs	r3, #0
  40494a:	4605      	mov	r5, r0
  40494c:	4608      	mov	r0, r1
  40494e:	6023      	str	r3, [r4, #0]
  404950:	f7fc f9d6 	bl	400d00 <_close>
  404954:	1c43      	adds	r3, r0, #1
  404956:	d000      	beq.n	40495a <_close_r+0x16>
  404958:	bd38      	pop	{r3, r4, r5, pc}
  40495a:	6823      	ldr	r3, [r4, #0]
  40495c:	2b00      	cmp	r3, #0
  40495e:	d0fb      	beq.n	404958 <_close_r+0x14>
  404960:	602b      	str	r3, [r5, #0]
  404962:	bd38      	pop	{r3, r4, r5, pc}
  404964:	20008cb4 	.word	0x20008cb4

00404968 <_fclose_r>:
  404968:	b570      	push	{r4, r5, r6, lr}
  40496a:	b159      	cbz	r1, 404984 <_fclose_r+0x1c>
  40496c:	4605      	mov	r5, r0
  40496e:	460c      	mov	r4, r1
  404970:	b110      	cbz	r0, 404978 <_fclose_r+0x10>
  404972:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404974:	2b00      	cmp	r3, #0
  404976:	d03c      	beq.n	4049f2 <_fclose_r+0x8a>
  404978:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40497a:	07d8      	lsls	r0, r3, #31
  40497c:	d505      	bpl.n	40498a <_fclose_r+0x22>
  40497e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404982:	b92b      	cbnz	r3, 404990 <_fclose_r+0x28>
  404984:	2600      	movs	r6, #0
  404986:	4630      	mov	r0, r6
  404988:	bd70      	pop	{r4, r5, r6, pc}
  40498a:	89a3      	ldrh	r3, [r4, #12]
  40498c:	0599      	lsls	r1, r3, #22
  40498e:	d53c      	bpl.n	404a0a <_fclose_r+0xa2>
  404990:	4621      	mov	r1, r4
  404992:	4628      	mov	r0, r5
  404994:	f7ff f964 	bl	403c60 <__sflush_r>
  404998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40499a:	4606      	mov	r6, r0
  40499c:	b133      	cbz	r3, 4049ac <_fclose_r+0x44>
  40499e:	69e1      	ldr	r1, [r4, #28]
  4049a0:	4628      	mov	r0, r5
  4049a2:	4798      	blx	r3
  4049a4:	2800      	cmp	r0, #0
  4049a6:	bfb8      	it	lt
  4049a8:	f04f 36ff 	movlt.w	r6, #4294967295
  4049ac:	89a3      	ldrh	r3, [r4, #12]
  4049ae:	061a      	lsls	r2, r3, #24
  4049b0:	d422      	bmi.n	4049f8 <_fclose_r+0x90>
  4049b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4049b4:	b141      	cbz	r1, 4049c8 <_fclose_r+0x60>
  4049b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4049ba:	4299      	cmp	r1, r3
  4049bc:	d002      	beq.n	4049c4 <_fclose_r+0x5c>
  4049be:	4628      	mov	r0, r5
  4049c0:	f7ff fae8 	bl	403f94 <_free_r>
  4049c4:	2300      	movs	r3, #0
  4049c6:	6323      	str	r3, [r4, #48]	; 0x30
  4049c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4049ca:	b121      	cbz	r1, 4049d6 <_fclose_r+0x6e>
  4049cc:	4628      	mov	r0, r5
  4049ce:	f7ff fae1 	bl	403f94 <_free_r>
  4049d2:	2300      	movs	r3, #0
  4049d4:	6463      	str	r3, [r4, #68]	; 0x44
  4049d6:	f7ff fa67 	bl	403ea8 <__sfp_lock_acquire>
  4049da:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4049dc:	2200      	movs	r2, #0
  4049de:	07db      	lsls	r3, r3, #31
  4049e0:	81a2      	strh	r2, [r4, #12]
  4049e2:	d50e      	bpl.n	404a02 <_fclose_r+0x9a>
  4049e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049e6:	f7ff fbe7 	bl	4041b8 <__retarget_lock_close_recursive>
  4049ea:	f7ff fa63 	bl	403eb4 <__sfp_lock_release>
  4049ee:	4630      	mov	r0, r6
  4049f0:	bd70      	pop	{r4, r5, r6, pc}
  4049f2:	f7ff fa2d 	bl	403e50 <__sinit>
  4049f6:	e7bf      	b.n	404978 <_fclose_r+0x10>
  4049f8:	6921      	ldr	r1, [r4, #16]
  4049fa:	4628      	mov	r0, r5
  4049fc:	f7ff faca 	bl	403f94 <_free_r>
  404a00:	e7d7      	b.n	4049b2 <_fclose_r+0x4a>
  404a02:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404a04:	f7ff fbdc 	bl	4041c0 <__retarget_lock_release_recursive>
  404a08:	e7ec      	b.n	4049e4 <_fclose_r+0x7c>
  404a0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404a0c:	f7ff fbd6 	bl	4041bc <__retarget_lock_acquire_recursive>
  404a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a14:	2b00      	cmp	r3, #0
  404a16:	d1bb      	bne.n	404990 <_fclose_r+0x28>
  404a18:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404a1a:	f016 0601 	ands.w	r6, r6, #1
  404a1e:	d1b1      	bne.n	404984 <_fclose_r+0x1c>
  404a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404a22:	f7ff fbcd 	bl	4041c0 <__retarget_lock_release_recursive>
  404a26:	4630      	mov	r0, r6
  404a28:	bd70      	pop	{r4, r5, r6, pc}
  404a2a:	bf00      	nop

00404a2c <_fstat_r>:
  404a2c:	b538      	push	{r3, r4, r5, lr}
  404a2e:	460b      	mov	r3, r1
  404a30:	4c07      	ldr	r4, [pc, #28]	; (404a50 <_fstat_r+0x24>)
  404a32:	4605      	mov	r5, r0
  404a34:	4611      	mov	r1, r2
  404a36:	4618      	mov	r0, r3
  404a38:	2300      	movs	r3, #0
  404a3a:	6023      	str	r3, [r4, #0]
  404a3c:	f7fc f963 	bl	400d06 <_fstat>
  404a40:	1c43      	adds	r3, r0, #1
  404a42:	d000      	beq.n	404a46 <_fstat_r+0x1a>
  404a44:	bd38      	pop	{r3, r4, r5, pc}
  404a46:	6823      	ldr	r3, [r4, #0]
  404a48:	2b00      	cmp	r3, #0
  404a4a:	d0fb      	beq.n	404a44 <_fstat_r+0x18>
  404a4c:	602b      	str	r3, [r5, #0]
  404a4e:	bd38      	pop	{r3, r4, r5, pc}
  404a50:	20008cb4 	.word	0x20008cb4

00404a54 <_lseek_r>:
  404a54:	b570      	push	{r4, r5, r6, lr}
  404a56:	460d      	mov	r5, r1
  404a58:	4c08      	ldr	r4, [pc, #32]	; (404a7c <_lseek_r+0x28>)
  404a5a:	4611      	mov	r1, r2
  404a5c:	4606      	mov	r6, r0
  404a5e:	461a      	mov	r2, r3
  404a60:	4628      	mov	r0, r5
  404a62:	2300      	movs	r3, #0
  404a64:	6023      	str	r3, [r4, #0]
  404a66:	f7fc f953 	bl	400d10 <_lseek>
  404a6a:	1c43      	adds	r3, r0, #1
  404a6c:	d000      	beq.n	404a70 <_lseek_r+0x1c>
  404a6e:	bd70      	pop	{r4, r5, r6, pc}
  404a70:	6823      	ldr	r3, [r4, #0]
  404a72:	2b00      	cmp	r3, #0
  404a74:	d0fb      	beq.n	404a6e <_lseek_r+0x1a>
  404a76:	6033      	str	r3, [r6, #0]
  404a78:	bd70      	pop	{r4, r5, r6, pc}
  404a7a:	bf00      	nop
  404a7c:	20008cb4 	.word	0x20008cb4

00404a80 <_read_r>:
  404a80:	b570      	push	{r4, r5, r6, lr}
  404a82:	460d      	mov	r5, r1
  404a84:	4c08      	ldr	r4, [pc, #32]	; (404aa8 <_read_r+0x28>)
  404a86:	4611      	mov	r1, r2
  404a88:	4606      	mov	r6, r0
  404a8a:	461a      	mov	r2, r3
  404a8c:	4628      	mov	r0, r5
  404a8e:	2300      	movs	r3, #0
  404a90:	6023      	str	r3, [r4, #0]
  404a92:	f7fb fc33 	bl	4002fc <_read>
  404a96:	1c43      	adds	r3, r0, #1
  404a98:	d000      	beq.n	404a9c <_read_r+0x1c>
  404a9a:	bd70      	pop	{r4, r5, r6, pc}
  404a9c:	6823      	ldr	r3, [r4, #0]
  404a9e:	2b00      	cmp	r3, #0
  404aa0:	d0fb      	beq.n	404a9a <_read_r+0x1a>
  404aa2:	6033      	str	r3, [r6, #0]
  404aa4:	bd70      	pop	{r4, r5, r6, pc}
  404aa6:	bf00      	nop
  404aa8:	20008cb4 	.word	0x20008cb4
  404aac:	00776f70 	.word	0x00776f70
  404ab0:	74727173 	.word	0x74727173
  404ab4:	00000000 	.word	0x00000000

00404ab8 <TWO52>:
  404ab8:	00000000 43300000 00000000 c3300000     ......0C......0.

00404ac8 <_global_impure_ptr>:
  404ac8:	20000018                                ... 

00404acc <_init>:
  404acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404ace:	bf00      	nop
  404ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404ad2:	bc08      	pop	{r3}
  404ad4:	469e      	mov	lr, r3
  404ad6:	4770      	bx	lr

00404ad8 <__init_array_start>:
  404ad8:	00403c41 	.word	0x00403c41

00404adc <__frame_dummy_init_array_entry>:
  404adc:	0040011d                                ..@.

00404ae0 <_fini>:
  404ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404ae2:	bf00      	nop
  404ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404ae6:	bc08      	pop	{r3}
  404ae8:	469e      	mov	lr, r3
  404aea:	4770      	bx	lr

00404aec <__fini_array_start>:
  404aec:	004000f9 	.word	0x004000f9


BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043b0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004043b0  004043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  004043b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000842c  200009b8  00404d70  000209b8  2**2
                  ALLOC
  4 .stack        00003004  20008de4  0040d19c  000209b8  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00016ea8  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000035e8  00000000  00000000  000378e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004152  00000000  00000000  0003aecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a00  00000000  00000000  0003f021  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000900  00000000  00000000  0003fa21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019a0d  00000000  00000000  00040321  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000cb29  00000000  00000000  00059d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000650e8  00000000  00000000  00066857  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000021f4  00000000  00000000  000cb940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 bd 00 20 11 0a 40 00 0d 0a 40 00 0d 0a 40 00     ... ..@...@...@.
  400010:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	0d 0a 40 00 0d 0a 40 00 00 00 00 00 0d 0a 40 00     ..@...@.......@.
  40003c:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 0d 0a 40 00     ..@...@...@...@.
  40004c:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 0d 0a 40 00     ..@...@...@...@.
  40005c:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 0d 0a 40 00     ..@...@...@...@.
  40006c:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 a9 0c 40 00     ..@...@...@...@.
  40007c:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 0d 0a 40 00     ..@...@...@...@.
  40008c:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 0d 0a 40 00     ..@...@...@...@.
  40009c:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 0d 0a 40 00     ..@...@...@...@.
  4000ac:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 8d 06 40 00     ..@...@...@...@.
  4000bc:	a1 06 40 00 0d 0a 40 00 4d 0e 40 00 0d 0a 40 00     ..@...@.M.@...@.
  4000cc:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 0d 0a 40 00     ..@...@...@...@.
  4000dc:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00 0d 0a 40 00     ..@...@...@...@.
  4000ec:	0d 0a 40 00 0d 0a 40 00 0d 0a 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009b8 	.word	0x200009b8
  400114:	00000000 	.word	0x00000000
  400118:	004043b8 	.word	0x004043b8

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004043b8 	.word	0x004043b8
  400158:	200009bc 	.word	0x200009bc
  40015c:	004043b8 	.word	0x004043b8
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	480b      	ldr	r0, [pc, #44]	; (4001c8 <sysclk_init+0x64>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	00400be5 	.word	0x00400be5
  4001a8:	00400815 	.word	0x00400815
  4001ac:	00400869 	.word	0x00400869
  4001b0:	00400879 	.word	0x00400879
  4001b4:	200f3f01 	.word	0x200f3f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	00400889 	.word	0x00400889
  4001c0:	004007b1 	.word	0x004007b1
  4001c4:	00400ad9 	.word	0x00400ad9
  4001c8:	05b8d800 	.word	0x05b8d800

004001cc <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  4001cc:	2a00      	cmp	r2, #0
  4001ce:	d03f      	beq.n	400250 <usart_serial_read_packet+0x84>
{
  4001d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4001d4:	b083      	sub	sp, #12
  4001d6:	4606      	mov	r6, r0
  4001d8:	460c      	mov	r4, r1
  4001da:	4693      	mov	fp, r2
  4001dc:	448b      	add	fp, r1
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001de:	4f1d      	ldr	r7, [pc, #116]	; (400254 <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  4001e0:	4d1d      	ldr	r5, [pc, #116]	; (400258 <usart_serial_read_packet+0x8c>)
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001e2:	f8df a080 	ldr.w	sl, [pc, #128]	; 400264 <usart_serial_read_packet+0x98>
  4001e6:	e00d      	b.n	400204 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  4001e8:	4621      	mov	r1, r4
  4001ea:	4638      	mov	r0, r7
  4001ec:	47a8      	blx	r5
  4001ee:	2800      	cmp	r0, #0
  4001f0:	d1fa      	bne.n	4001e8 <usart_serial_read_packet+0x1c>
  4001f2:	e010      	b.n	400216 <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  4001f4:	4621      	mov	r1, r4
  4001f6:	4650      	mov	r0, sl
  4001f8:	47a8      	blx	r5
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d1fa      	bne.n	4001f4 <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  4001fe:	3401      	adds	r4, #1
	while (len) {
  400200:	455c      	cmp	r4, fp
  400202:	d021      	beq.n	400248 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400208:	42be      	cmp	r6, r7
  40020a:	d0ed      	beq.n	4001e8 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40020c:	4556      	cmp	r6, sl
  40020e:	d0f1      	beq.n	4001f4 <usart_serial_read_packet+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400210:	4b12      	ldr	r3, [pc, #72]	; (40025c <usart_serial_read_packet+0x90>)
  400212:	429e      	cmp	r6, r3
  400214:	d00d      	beq.n	400232 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400216:	4b12      	ldr	r3, [pc, #72]	; (400260 <usart_serial_read_packet+0x94>)
  400218:	429e      	cmp	r6, r3
  40021a:	d1f0      	bne.n	4001fe <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  40021c:	4699      	mov	r9, r3
  40021e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400268 <usart_serial_read_packet+0x9c>
  400222:	a901      	add	r1, sp, #4
  400224:	4648      	mov	r0, r9
  400226:	47c0      	blx	r8
  400228:	2800      	cmp	r0, #0
  40022a:	d1fa      	bne.n	400222 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  40022c:	9b01      	ldr	r3, [sp, #4]
  40022e:	7023      	strb	r3, [r4, #0]
  400230:	e7e5      	b.n	4001fe <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400232:	4699      	mov	r9, r3
  400234:	f8df 8030 	ldr.w	r8, [pc, #48]	; 400268 <usart_serial_read_packet+0x9c>
  400238:	a901      	add	r1, sp, #4
  40023a:	4648      	mov	r0, r9
  40023c:	47c0      	blx	r8
  40023e:	2800      	cmp	r0, #0
  400240:	d1fa      	bne.n	400238 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  400242:	9b01      	ldr	r3, [sp, #4]
  400244:	7023      	strb	r3, [r4, #0]
  400246:	e7da      	b.n	4001fe <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  400248:	2000      	movs	r0, #0
  40024a:	b003      	add	sp, #12
  40024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400250:	2000      	movs	r0, #0
  400252:	4770      	bx	lr
  400254:	400e0600 	.word	0x400e0600
  400258:	004009cf 	.word	0x004009cf
  40025c:	400a0000 	.word	0x400a0000
  400260:	400a4000 	.word	0x400a4000
  400264:	40060600 	.word	0x40060600
  400268:	004009f5 	.word	0x004009f5

0040026c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40026c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400270:	b980      	cbnz	r0, 400294 <_read+0x28>
  400272:	460c      	mov	r4, r1
  400274:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400276:	2a00      	cmp	r2, #0
  400278:	dd0f      	ble.n	40029a <_read+0x2e>
  40027a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40027c:	4e08      	ldr	r6, [pc, #32]	; (4002a0 <_read+0x34>)
  40027e:	4d09      	ldr	r5, [pc, #36]	; (4002a4 <_read+0x38>)
  400280:	6830      	ldr	r0, [r6, #0]
  400282:	4621      	mov	r1, r4
  400284:	682b      	ldr	r3, [r5, #0]
  400286:	4798      	blx	r3
		ptr++;
  400288:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40028a:	42bc      	cmp	r4, r7
  40028c:	d1f8      	bne.n	400280 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40028e:	4640      	mov	r0, r8
  400290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400294:	f04f 38ff 	mov.w	r8, #4294967295
  400298:	e7f9      	b.n	40028e <_read+0x22>
	for (; len > 0; --len) {
  40029a:	4680      	mov	r8, r0
  40029c:	e7f7      	b.n	40028e <_read+0x22>
  40029e:	bf00      	nop
  4002a0:	20000ac0 	.word	0x20000ac0
  4002a4:	20000ab8 	.word	0x20000ab8

004002a8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4002a8:	3801      	subs	r0, #1
  4002aa:	2802      	cmp	r0, #2
  4002ac:	d815      	bhi.n	4002da <_write+0x32>
{
  4002ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002b2:	460e      	mov	r6, r1
  4002b4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4002b6:	b19a      	cbz	r2, 4002e0 <_write+0x38>
  4002b8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4002ba:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002f4 <_write+0x4c>
  4002be:	4f0c      	ldr	r7, [pc, #48]	; (4002f0 <_write+0x48>)
  4002c0:	f8d8 0000 	ldr.w	r0, [r8]
  4002c4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002c8:	683b      	ldr	r3, [r7, #0]
  4002ca:	4798      	blx	r3
  4002cc:	2800      	cmp	r0, #0
  4002ce:	db0a      	blt.n	4002e6 <_write+0x3e>
  4002d0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002d2:	3c01      	subs	r4, #1
  4002d4:	d1f4      	bne.n	4002c0 <_write+0x18>
  4002d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002da:	f04f 30ff 	mov.w	r0, #4294967295
  4002de:	4770      	bx	lr
	for (; len != 0; --len) {
  4002e0:	4610      	mov	r0, r2
  4002e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002e6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002ee:	bf00      	nop
  4002f0:	20000abc 	.word	0x20000abc
  4002f4:	20000ac0 	.word	0x20000ac0

004002f8 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4002f8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002fe:	4b21      	ldr	r3, [pc, #132]	; (400384 <board_init+0x8c>)
  400300:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400302:	2009      	movs	r0, #9
  400304:	4c20      	ldr	r4, [pc, #128]	; (400388 <board_init+0x90>)
  400306:	47a0      	blx	r4
  400308:	200a      	movs	r0, #10
  40030a:	47a0      	blx	r4
  40030c:	200b      	movs	r0, #11
  40030e:	47a0      	blx	r4
  400310:	200c      	movs	r0, #12
  400312:	47a0      	blx	r4
  400314:	200d      	movs	r0, #13
  400316:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400318:	4b1c      	ldr	r3, [pc, #112]	; (40038c <board_init+0x94>)
  40031a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40031e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400320:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400324:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400326:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40032a:	2204      	movs	r2, #4
  40032c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40032e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400332:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400338:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40033a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40033c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400340:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400342:	f021 0104 	bic.w	r1, r1, #4
  400346:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400348:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40034a:	f021 0104 	bic.w	r1, r1, #4
  40034e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400350:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400354:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400358:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40035c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  400360:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400366:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400368:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40036a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40036e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400370:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400374:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400376:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400378:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40037c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40037e:	605a      	str	r2, [r3, #4]
  400380:	bd10      	pop	{r4, pc}
  400382:	bf00      	nop
  400384:	400e1850 	.word	0x400e1850
  400388:	00400899 	.word	0x00400899
  40038c:	400e1400 	.word	0x400e1400

00400390 <acc_init>:
		Acc *p_acc,
		uint32_t ul_select_plus,
		uint32_t ul_select_minus,
		uint32_t ul_edge_type,
		uint32_t ul_invert)
{
  400390:	b410      	push	{r4}
	/* Validate the parameters. */
	Assert(p_acc);
	
	/* Reset the controller. */
	p_acc->ACC_CR |= ACC_CR_SWRST;
  400392:	6804      	ldr	r4, [r0, #0]
  400394:	f044 0401 	orr.w	r4, r4, #1
  400398:	6004      	str	r4, [r0, #0]

	/* Write to the MR register. */
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  40039a:	9c01      	ldr	r4, [sp, #4]
  40039c:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
  4003a0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
  4003a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  4003a8:	431c      	orrs	r4, r3
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
  4003aa:	f002 0207 	and.w	r2, r2, #7
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  4003ae:	4314      	orrs	r4, r2
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  4003b0:	f001 0170 	and.w	r1, r1, #112	; 0x70
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  4003b4:	430c      	orrs	r4, r1
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  4003b6:	6044      	str	r4, [r0, #4]

	/* Set hysteresis and current option. */
	p_acc->ACC_ACR = (ACC_ACR_ISEL_HISP |
  4003b8:	2303      	movs	r3, #3
  4003ba:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
			ACC_ACR_HYST(ACC_ACR_HYST_50mv_max));

	/* Automatic Output Masking Period. */
	while (p_acc->ACC_ISR & (uint32_t) ACC_ISR_MASK);
  4003be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4003c0:	2b00      	cmp	r3, #0
  4003c2:	dbfc      	blt.n	4003be <acc_init+0x2e>
}
  4003c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003c8:	4770      	bx	lr

004003ca <acc_get_comparison_result>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	uint32_t ul_temp = p_acc->ACC_MR;
  4003ca:	6843      	ldr	r3, [r0, #4]
	uint32_t ul_status = p_acc->ACC_ISR;
  4003cc:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if ((ul_temp & ACC_MR_INV_EN) == ACC_MR_INV_EN) {
  4003ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		if (ul_status & ACC_ISR_SCO) {
  4003d2:	bf18      	it	ne
  4003d4:	f080 0002 	eorne.w	r0, r0, #2
			return 0;	/* inn>inp */
		} else {
			return 1;	/* inp>inn */
		}
	} else {
		if (ul_status & ACC_ISR_SCO) {
  4003d8:	f3c0 0040 	ubfx	r0, r0, #1, #1
			return 1;	/* inp>inn */
		} else {
			return 0;	/* inn>inp */
		}
	}
}
  4003dc:	4770      	bx	lr

004003de <acc_enable_interrupt>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	p_acc->ACC_IER = ACC_IER_CE;
  4003de:	2301      	movs	r3, #1
  4003e0:	6243      	str	r3, [r0, #36]	; 0x24
  4003e2:	4770      	bx	lr

004003e4 <acc_get_interrupt_status>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	return p_acc->ACC_ISR;
  4003e4:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  4003e6:	4770      	bx	lr

004003e8 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4003e8:	b570      	push	{r4, r5, r6, lr}
  4003ea:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4003ec:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4003ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4003f0:	4013      	ands	r3, r2
  4003f2:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4003f4:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4003f6:	4d21      	ldr	r5, [pc, #132]	; (40047c <afec_process_callback+0x94>)
  4003f8:	42a8      	cmp	r0, r5
  4003fa:	bf14      	ite	ne
  4003fc:	2500      	movne	r5, #0
  4003fe:	2501      	moveq	r5, #1
  400400:	006e      	lsls	r6, r5, #1
  400402:	442e      	add	r6, r5
  400404:	e00b      	b.n	40041e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400406:	2c14      	cmp	r4, #20
  400408:	d824      	bhi.n	400454 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40040a:	9a01      	ldr	r2, [sp, #4]
  40040c:	f104 0108 	add.w	r1, r4, #8
  400410:	2301      	movs	r3, #1
  400412:	408b      	lsls	r3, r1
  400414:	4213      	tst	r3, r2
  400416:	d113      	bne.n	400440 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400418:	3401      	adds	r4, #1
  40041a:	2c17      	cmp	r4, #23
  40041c:	d02b      	beq.n	400476 <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40041e:	2c0f      	cmp	r4, #15
  400420:	d8f1      	bhi.n	400406 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400422:	9a01      	ldr	r2, [sp, #4]
  400424:	2301      	movs	r3, #1
  400426:	40a3      	lsls	r3, r4
  400428:	4213      	tst	r3, r2
  40042a:	d0f5      	beq.n	400418 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40042c:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400430:	4423      	add	r3, r4
  400432:	4a13      	ldr	r2, [pc, #76]	; (400480 <afec_process_callback+0x98>)
  400434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400438:	2b00      	cmp	r3, #0
  40043a:	d0ed      	beq.n	400418 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40043c:	4798      	blx	r3
  40043e:	e7eb      	b.n	400418 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400440:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400444:	4423      	add	r3, r4
  400446:	4a0e      	ldr	r2, [pc, #56]	; (400480 <afec_process_callback+0x98>)
  400448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40044c:	2b00      	cmp	r3, #0
  40044e:	d0e3      	beq.n	400418 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400450:	4798      	blx	r3
  400452:	e7e1      	b.n	400418 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400454:	9a01      	ldr	r2, [sp, #4]
  400456:	f104 0109 	add.w	r1, r4, #9
  40045a:	2301      	movs	r3, #1
  40045c:	408b      	lsls	r3, r1
  40045e:	4213      	tst	r3, r2
  400460:	d0da      	beq.n	400418 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400462:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400466:	4423      	add	r3, r4
  400468:	4a05      	ldr	r2, [pc, #20]	; (400480 <afec_process_callback+0x98>)
  40046a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40046e:	2b00      	cmp	r3, #0
  400470:	d0d2      	beq.n	400418 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400472:	4798      	blx	r3
  400474:	e7d0      	b.n	400418 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400476:	b002      	add	sp, #8
  400478:	bd70      	pop	{r4, r5, r6, pc}
  40047a:	bf00      	nop
  40047c:	400b4000 	.word	0x400b4000
  400480:	20000ac4 	.word	0x20000ac4

00400484 <afec_ch_set_config>:
{
  400484:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400486:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400488:	2301      	movs	r3, #1
  40048a:	408b      	lsls	r3, r1
  40048c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400490:	7815      	ldrb	r5, [r2, #0]
  400492:	2d00      	cmp	r5, #0
  400494:	bf08      	it	eq
  400496:	2300      	moveq	r3, #0
  400498:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40049a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40049c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40049e:	004b      	lsls	r3, r1, #1
  4004a0:	2103      	movs	r1, #3
  4004a2:	4099      	lsls	r1, r3
  4004a4:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4004a8:	7851      	ldrb	r1, [r2, #1]
  4004aa:	4099      	lsls	r1, r3
  4004ac:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4004ae:	6541      	str	r1, [r0, #84]	; 0x54
}
  4004b0:	bc30      	pop	{r4, r5}
  4004b2:	4770      	bx	lr

004004b4 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4004b4:	2200      	movs	r2, #0
  4004b6:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4004b8:	4b08      	ldr	r3, [pc, #32]	; (4004dc <afec_get_config_defaults+0x28>)
  4004ba:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4004bc:	4b08      	ldr	r3, [pc, #32]	; (4004e0 <afec_get_config_defaults+0x2c>)
  4004be:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4004c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4004c4:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  4004c6:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  4004c8:	2302      	movs	r3, #2
  4004ca:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  4004cc:	2301      	movs	r3, #1
  4004ce:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  4004d0:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  4004d2:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  4004d4:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  4004d6:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  4004d8:	7683      	strb	r3, [r0, #26]
  4004da:	4770      	bx	lr
  4004dc:	05b8d800 	.word	0x05b8d800
  4004e0:	005b8d80 	.word	0x005b8d80

004004e4 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4004e4:	2300      	movs	r3, #0
  4004e6:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4004e8:	2301      	movs	r3, #1
  4004ea:	7043      	strb	r3, [r0, #1]
  4004ec:	4770      	bx	lr
	...

004004f0 <afec_init>:
	return afec->AFEC_ISR;
  4004f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4004f2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4004f6:	d001      	beq.n	4004fc <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4004f8:	2019      	movs	r0, #25
  4004fa:	4770      	bx	lr
{
  4004fc:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4004fe:	2301      	movs	r3, #1
  400500:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400502:	7dcb      	ldrb	r3, [r1, #23]
  400504:	2b00      	cmp	r3, #0
  400506:	bf14      	ite	ne
  400508:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  40050c:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  40050e:	7d8b      	ldrb	r3, [r1, #22]
  400510:	2b00      	cmp	r3, #0
  400512:	bf14      	ite	ne
  400514:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  400518:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  40051a:	7d0b      	ldrb	r3, [r1, #20]
  40051c:	061b      	lsls	r3, r3, #24
  40051e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400522:	690a      	ldr	r2, [r1, #16]
  400524:	68ce      	ldr	r6, [r1, #12]
  400526:	4332      	orrs	r2, r6
  400528:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  40052a:	7d4a      	ldrb	r2, [r1, #21]
  40052c:	0712      	lsls	r2, r2, #28
  40052e:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400532:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  400534:	688a      	ldr	r2, [r1, #8]
  400536:	0056      	lsls	r6, r2, #1
  400538:	684a      	ldr	r2, [r1, #4]
  40053a:	fbb2 f2f6 	udiv	r2, r2, r6
  40053e:	3a01      	subs	r2, #1
  400540:	0212      	lsls	r2, r2, #8
  400542:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400544:	4313      	orrs	r3, r2
  400546:	432b      	orrs	r3, r5
  400548:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  40054a:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40054c:	7e0b      	ldrb	r3, [r1, #24]
  40054e:	2b00      	cmp	r3, #0
  400550:	bf14      	ite	ne
  400552:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400556:	2300      	moveq	r3, #0
  400558:	680a      	ldr	r2, [r1, #0]
  40055a:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40055c:	7e4a      	ldrb	r2, [r1, #25]
  40055e:	2a00      	cmp	r2, #0
  400560:	bf14      	ite	ne
  400562:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400566:	2200      	moveq	r2, #0
			(config->resolution) |
  400568:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40056a:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  40056c:	7e8b      	ldrb	r3, [r1, #26]
  40056e:	021b      	lsls	r3, r3, #8
  400570:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400574:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400578:	4b0e      	ldr	r3, [pc, #56]	; (4005b4 <afec_init+0xc4>)
  40057a:	4298      	cmp	r0, r3
  40057c:	d005      	beq.n	40058a <afec_init+0x9a>
	if(afec == AFEC1) {
  40057e:	4b0e      	ldr	r3, [pc, #56]	; (4005b8 <afec_init+0xc8>)
  400580:	4298      	cmp	r0, r3
  400582:	d00c      	beq.n	40059e <afec_init+0xae>
	return STATUS_OK;
  400584:	2000      	movs	r0, #0
}
  400586:	bc70      	pop	{r4, r5, r6}
  400588:	4770      	bx	lr
  40058a:	4b0c      	ldr	r3, [pc, #48]	; (4005bc <afec_init+0xcc>)
  40058c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400590:	2200      	movs	r2, #0
  400592:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400596:	428b      	cmp	r3, r1
  400598:	d1fb      	bne.n	400592 <afec_init+0xa2>
	return STATUS_OK;
  40059a:	2000      	movs	r0, #0
  40059c:	e7f3      	b.n	400586 <afec_init+0x96>
  40059e:	4b08      	ldr	r3, [pc, #32]	; (4005c0 <afec_init+0xd0>)
  4005a0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  4005a4:	2200      	movs	r2, #0
  4005a6:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005aa:	428b      	cmp	r3, r1
  4005ac:	d1fb      	bne.n	4005a6 <afec_init+0xb6>
	return STATUS_OK;
  4005ae:	2000      	movs	r0, #0
  4005b0:	e7e9      	b.n	400586 <afec_init+0x96>
  4005b2:	bf00      	nop
  4005b4:	400b0000 	.word	0x400b0000
  4005b8:	400b4000 	.word	0x400b4000
  4005bc:	20000ac0 	.word	0x20000ac0
  4005c0:	20000b1c 	.word	0x20000b1c

004005c4 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4005c4:	4b0c      	ldr	r3, [pc, #48]	; (4005f8 <afec_enable_interrupt+0x34>)
  4005c6:	4299      	cmp	r1, r3
  4005c8:	d007      	beq.n	4005da <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4005ca:	290f      	cmp	r1, #15
  4005cc:	d80b      	bhi.n	4005e6 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  4005ce:	d006      	beq.n	4005de <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  4005d0:	2301      	movs	r3, #1
  4005d2:	fa03 f101 	lsl.w	r1, r3, r1
  4005d6:	6241      	str	r1, [r0, #36]	; 0x24
  4005d8:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4005da:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4005dc:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  4005de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005e2:	6243      	str	r3, [r0, #36]	; 0x24
  4005e4:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4005e6:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4005e8:	bf94      	ite	ls
  4005ea:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  4005ec:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4005ee:	2301      	movs	r3, #1
  4005f0:	fa03 f101 	lsl.w	r1, r3, r1
  4005f4:	6241      	str	r1, [r0, #36]	; 0x24
  4005f6:	4770      	bx	lr
  4005f8:	df00ffff 	.word	0xdf00ffff

004005fc <afec_set_callback>:
{
  4005fc:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4005fe:	4c11      	ldr	r4, [pc, #68]	; (400644 <afec_set_callback+0x48>)
  400600:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400602:	bf0c      	ite	eq
  400604:	2417      	moveq	r4, #23
  400606:	2400      	movne	r4, #0
  400608:	440c      	add	r4, r1
  40060a:	4d0f      	ldr	r5, [pc, #60]	; (400648 <afec_set_callback+0x4c>)
  40060c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400610:	d10a      	bne.n	400628 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400612:	4a0e      	ldr	r2, [pc, #56]	; (40064c <afec_set_callback+0x50>)
  400614:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  400618:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40061c:	011b      	lsls	r3, r3, #4
  40061e:	b2db      	uxtb	r3, r3
  400620:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400624:	6014      	str	r4, [r2, #0]
  400626:	e009      	b.n	40063c <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400628:	4a08      	ldr	r2, [pc, #32]	; (40064c <afec_set_callback+0x50>)
  40062a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  40062e:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400632:	011b      	lsls	r3, r3, #4
  400634:	b2db      	uxtb	r3, r3
  400636:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40063a:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  40063c:	4b04      	ldr	r3, [pc, #16]	; (400650 <afec_set_callback+0x54>)
  40063e:	4798      	blx	r3
  400640:	bd38      	pop	{r3, r4, r5, pc}
  400642:	bf00      	nop
  400644:	400b4000 	.word	0x400b4000
  400648:	20000ac4 	.word	0x20000ac4
  40064c:	e000e100 	.word	0xe000e100
  400650:	004005c5 	.word	0x004005c5

00400654 <afec_disable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400654:	4b0c      	ldr	r3, [pc, #48]	; (400688 <afec_disable_interrupt+0x34>)
  400656:	4299      	cmp	r1, r3
  400658:	d007      	beq.n	40066a <afec_disable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40065a:	290f      	cmp	r1, #15
  40065c:	d80b      	bhi.n	400676 <afec_disable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  40065e:	d006      	beq.n	40066e <afec_disable_interrupt+0x1a>
			afec->AFEC_IDR = 1 << interrupt_source;
  400660:	2301      	movs	r3, #1
  400662:	fa03 f101 	lsl.w	r1, r3, r1
  400666:	6281      	str	r1, [r0, #40]	; 0x28
  400668:	4770      	bx	lr
		afec->AFEC_IDR = AFEC_INTERRUPT_ALL;
  40066a:	6283      	str	r3, [r0, #40]	; 0x28
		return;
  40066c:	4770      	bx	lr
			afec->AFEC_IDR = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  40066e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400672:	6283      	str	r3, [r0, #40]	; 0x28
  400674:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400676:	2914      	cmp	r1, #20
		afec->AFEC_IDR = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400678:	bf94      	ite	ls
  40067a:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  40067c:	3109      	addhi	r1, #9
		afec->AFEC_IDR = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  40067e:	2301      	movs	r3, #1
  400680:	fa03 f101 	lsl.w	r1, r3, r1
  400684:	6281      	str	r1, [r0, #40]	; 0x28
  400686:	4770      	bx	lr
  400688:	df00ffff 	.word	0xdf00ffff

0040068c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40068c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40068e:	4802      	ldr	r0, [pc, #8]	; (400698 <AFEC0_Handler+0xc>)
  400690:	4b02      	ldr	r3, [pc, #8]	; (40069c <AFEC0_Handler+0x10>)
  400692:	4798      	blx	r3
  400694:	bd08      	pop	{r3, pc}
  400696:	bf00      	nop
  400698:	400b0000 	.word	0x400b0000
  40069c:	004003e9 	.word	0x004003e9

004006a0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4006a0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4006a2:	4802      	ldr	r0, [pc, #8]	; (4006ac <AFEC1_Handler+0xc>)
  4006a4:	4b02      	ldr	r3, [pc, #8]	; (4006b0 <AFEC1_Handler+0x10>)
  4006a6:	4798      	blx	r3
  4006a8:	bd08      	pop	{r3, pc}
  4006aa:	bf00      	nop
  4006ac:	400b4000 	.word	0x400b4000
  4006b0:	004003e9 	.word	0x004003e9

004006b4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4006b4:	b500      	push	{lr}
  4006b6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4006b8:	4b13      	ldr	r3, [pc, #76]	; (400708 <afec_enable+0x54>)
  4006ba:	4298      	cmp	r0, r3
  4006bc:	bf0c      	ite	eq
  4006be:	201f      	moveq	r0, #31
  4006c0:	201e      	movne	r0, #30
  4006c2:	4b12      	ldr	r3, [pc, #72]	; (40070c <afec_enable+0x58>)
  4006c4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4006c6:	4b12      	ldr	r3, [pc, #72]	; (400710 <afec_enable+0x5c>)
  4006c8:	789b      	ldrb	r3, [r3, #2]
  4006ca:	2bff      	cmp	r3, #255	; 0xff
  4006cc:	d01a      	beq.n	400704 <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4006ce:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006d2:	fab3 f383 	clz	r3, r3
  4006d6:	095b      	lsrs	r3, r3, #5
  4006d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4006da:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4006dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4006e0:	2200      	movs	r2, #0
  4006e2:	4b0c      	ldr	r3, [pc, #48]	; (400714 <afec_enable+0x60>)
  4006e4:	701a      	strb	r2, [r3, #0]
	return flags;
  4006e6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4006e8:	4a09      	ldr	r2, [pc, #36]	; (400710 <afec_enable+0x5c>)
  4006ea:	7893      	ldrb	r3, [r2, #2]
  4006ec:	3301      	adds	r3, #1
  4006ee:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4006f0:	b129      	cbz	r1, 4006fe <afec_enable+0x4a>
		cpu_irq_enable();
  4006f2:	2201      	movs	r2, #1
  4006f4:	4b07      	ldr	r3, [pc, #28]	; (400714 <afec_enable+0x60>)
  4006f6:	701a      	strb	r2, [r3, #0]
  4006f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4006fc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4006fe:	b003      	add	sp, #12
  400700:	f85d fb04 	ldr.w	pc, [sp], #4
  400704:	e7fe      	b.n	400704 <afec_enable+0x50>
  400706:	bf00      	nop
  400708:	400b4000 	.word	0x400b4000
  40070c:	00400899 	.word	0x00400899
  400710:	20000ab0 	.word	0x20000ab0
  400714:	20000000 	.word	0x20000000

00400718 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  400718:	2301      	movs	r3, #1
  40071a:	6003      	str	r3, [r0, #0]
  40071c:	4770      	bx	lr

0040071e <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  40071e:	6843      	ldr	r3, [r0, #4]
  400720:	f023 0301 	bic.w	r3, r3, #1
  400724:	6043      	str	r3, [r0, #4]
  400726:	4770      	bx	lr

00400728 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  400728:	b949      	cbnz	r1, 40073e <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  40072a:	6843      	ldr	r3, [r0, #4]
  40072c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400730:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  400732:	6843      	ldr	r3, [r0, #4]
  400734:	f023 0310 	bic.w	r3, r3, #16
  400738:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  40073a:	2000      	movs	r0, #0
  40073c:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  40073e:	6843      	ldr	r3, [r0, #4]
  400740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400744:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  400746:	6843      	ldr	r3, [r0, #4]
  400748:	f043 0310 	orr.w	r3, r3, #16
  40074c:	6043      	str	r3, [r0, #4]
  40074e:	e7f4      	b.n	40073a <dacc_set_transfer_mode+0x12>

00400750 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  400750:	6201      	str	r1, [r0, #32]
  400752:	4770      	bx	lr

00400754 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  400754:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  400756:	2901      	cmp	r1, #1
  400758:	d901      	bls.n	40075e <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  40075a:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  40075c:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  40075e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  400762:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  400766:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  400768:	2000      	movs	r0, #0
  40076a:	4770      	bx	lr

0040076c <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  40076c:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  40076e:	b941      	cbnz	r1, 400782 <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  400770:	4907      	ldr	r1, [pc, #28]	; (400790 <dacc_set_timing+0x24>)
  400772:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  400774:	0612      	lsls	r2, r2, #24
  400776:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  40077a:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  40077c:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  40077e:	2000      	movs	r0, #0
  400780:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  400782:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  400786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  40078a:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  40078e:	e7f1      	b.n	400774 <dacc_set_timing+0x8>
  400790:	c0df00ff 	.word	0xc0df00ff

00400794 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  400794:	2901      	cmp	r1, #1
  400796:	d901      	bls.n	40079c <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  400798:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  40079a:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  40079c:	2301      	movs	r3, #1
  40079e:	fa03 f101 	lsl.w	r1, r3, r1
  4007a2:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  4007a4:	2000      	movs	r0, #0
  4007a6:	4770      	bx	lr

004007a8 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  4007a8:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  4007ac:	2000      	movs	r0, #0
  4007ae:	4770      	bx	lr

004007b0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4007b0:	4a17      	ldr	r2, [pc, #92]	; (400810 <pmc_switch_mck_to_pllack+0x60>)
  4007b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4007b8:	4318      	orrs	r0, r3
  4007ba:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007be:	f013 0f08 	tst.w	r3, #8
  4007c2:	d10a      	bne.n	4007da <pmc_switch_mck_to_pllack+0x2a>
  4007c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007c8:	4911      	ldr	r1, [pc, #68]	; (400810 <pmc_switch_mck_to_pllack+0x60>)
  4007ca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007cc:	f012 0f08 	tst.w	r2, #8
  4007d0:	d103      	bne.n	4007da <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007d2:	3b01      	subs	r3, #1
  4007d4:	d1f9      	bne.n	4007ca <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4007d6:	2001      	movs	r0, #1
  4007d8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007da:	4a0d      	ldr	r2, [pc, #52]	; (400810 <pmc_switch_mck_to_pllack+0x60>)
  4007dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007de:	f023 0303 	bic.w	r3, r3, #3
  4007e2:	f043 0302 	orr.w	r3, r3, #2
  4007e6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007ea:	f013 0f08 	tst.w	r3, #8
  4007ee:	d10a      	bne.n	400806 <pmc_switch_mck_to_pllack+0x56>
  4007f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007f4:	4906      	ldr	r1, [pc, #24]	; (400810 <pmc_switch_mck_to_pllack+0x60>)
  4007f6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007f8:	f012 0f08 	tst.w	r2, #8
  4007fc:	d105      	bne.n	40080a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007fe:	3b01      	subs	r3, #1
  400800:	d1f9      	bne.n	4007f6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400802:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400804:	4770      	bx	lr
	return 0;
  400806:	2000      	movs	r0, #0
  400808:	4770      	bx	lr
  40080a:	2000      	movs	r0, #0
  40080c:	4770      	bx	lr
  40080e:	bf00      	nop
  400810:	400e0400 	.word	0x400e0400

00400814 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400814:	b9c8      	cbnz	r0, 40084a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400816:	4a11      	ldr	r2, [pc, #68]	; (40085c <pmc_switch_mainck_to_xtal+0x48>)
  400818:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40081a:	0209      	lsls	r1, r1, #8
  40081c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40081e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400822:	f023 0303 	bic.w	r3, r3, #3
  400826:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40082a:	f043 0301 	orr.w	r3, r3, #1
  40082e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400830:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400832:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400834:	f013 0f01 	tst.w	r3, #1
  400838:	d0fb      	beq.n	400832 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40083a:	4a08      	ldr	r2, [pc, #32]	; (40085c <pmc_switch_mainck_to_xtal+0x48>)
  40083c:	6a13      	ldr	r3, [r2, #32]
  40083e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400846:	6213      	str	r3, [r2, #32]
  400848:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40084a:	4904      	ldr	r1, [pc, #16]	; (40085c <pmc_switch_mainck_to_xtal+0x48>)
  40084c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40084e:	4a04      	ldr	r2, [pc, #16]	; (400860 <pmc_switch_mainck_to_xtal+0x4c>)
  400850:	401a      	ands	r2, r3
  400852:	4b04      	ldr	r3, [pc, #16]	; (400864 <pmc_switch_mainck_to_xtal+0x50>)
  400854:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400856:	620b      	str	r3, [r1, #32]
  400858:	4770      	bx	lr
  40085a:	bf00      	nop
  40085c:	400e0400 	.word	0x400e0400
  400860:	fec8fffc 	.word	0xfec8fffc
  400864:	01370002 	.word	0x01370002

00400868 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400868:	4b02      	ldr	r3, [pc, #8]	; (400874 <pmc_osc_is_ready_mainck+0xc>)
  40086a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40086c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400870:	4770      	bx	lr
  400872:	bf00      	nop
  400874:	400e0400 	.word	0x400e0400

00400878 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400878:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40087c:	4b01      	ldr	r3, [pc, #4]	; (400884 <pmc_disable_pllack+0xc>)
  40087e:	629a      	str	r2, [r3, #40]	; 0x28
  400880:	4770      	bx	lr
  400882:	bf00      	nop
  400884:	400e0400 	.word	0x400e0400

00400888 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400888:	4b02      	ldr	r3, [pc, #8]	; (400894 <pmc_is_locked_pllack+0xc>)
  40088a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40088c:	f000 0002 	and.w	r0, r0, #2
  400890:	4770      	bx	lr
  400892:	bf00      	nop
  400894:	400e0400 	.word	0x400e0400

00400898 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400898:	282f      	cmp	r0, #47	; 0x2f
  40089a:	d81e      	bhi.n	4008da <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40089c:	281f      	cmp	r0, #31
  40089e:	d80c      	bhi.n	4008ba <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008a0:	4b11      	ldr	r3, [pc, #68]	; (4008e8 <pmc_enable_periph_clk+0x50>)
  4008a2:	699a      	ldr	r2, [r3, #24]
  4008a4:	2301      	movs	r3, #1
  4008a6:	4083      	lsls	r3, r0
  4008a8:	4393      	bics	r3, r2
  4008aa:	d018      	beq.n	4008de <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4008ac:	2301      	movs	r3, #1
  4008ae:	fa03 f000 	lsl.w	r0, r3, r0
  4008b2:	4b0d      	ldr	r3, [pc, #52]	; (4008e8 <pmc_enable_periph_clk+0x50>)
  4008b4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008b6:	2000      	movs	r0, #0
  4008b8:	4770      	bx	lr
		ul_id -= 32;
  4008ba:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008bc:	4b0a      	ldr	r3, [pc, #40]	; (4008e8 <pmc_enable_periph_clk+0x50>)
  4008be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4008c2:	2301      	movs	r3, #1
  4008c4:	4083      	lsls	r3, r0
  4008c6:	4393      	bics	r3, r2
  4008c8:	d00b      	beq.n	4008e2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4008ca:	2301      	movs	r3, #1
  4008cc:	fa03 f000 	lsl.w	r0, r3, r0
  4008d0:	4b05      	ldr	r3, [pc, #20]	; (4008e8 <pmc_enable_periph_clk+0x50>)
  4008d2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4008d6:	2000      	movs	r0, #0
  4008d8:	4770      	bx	lr
		return 1;
  4008da:	2001      	movs	r0, #1
  4008dc:	4770      	bx	lr
	return 0;
  4008de:	2000      	movs	r0, #0
  4008e0:	4770      	bx	lr
  4008e2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4008e4:	4770      	bx	lr
  4008e6:	bf00      	nop
  4008e8:	400e0400 	.word	0x400e0400

004008ec <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4008ec:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4008ee:	0189      	lsls	r1, r1, #6
  4008f0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4008f2:	2402      	movs	r4, #2
  4008f4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4008f6:	f04f 31ff 	mov.w	r1, #4294967295
  4008fa:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4008fc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4008fe:	605a      	str	r2, [r3, #4]
}
  400900:	f85d 4b04 	ldr.w	r4, [sp], #4
  400904:	4770      	bx	lr

00400906 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400906:	0189      	lsls	r1, r1, #6
  400908:	2305      	movs	r3, #5
  40090a:	5043      	str	r3, [r0, r1]
  40090c:	4770      	bx	lr

0040090e <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  40090e:	0189      	lsls	r1, r1, #6
  400910:	2302      	movs	r3, #2
  400912:	5043      	str	r3, [r0, r1]
  400914:	4770      	bx	lr

00400916 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400916:	b4f0      	push	{r4, r5, r6, r7}
  400918:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40091a:	2402      	movs	r4, #2
  40091c:	9401      	str	r4, [sp, #4]
  40091e:	2408      	movs	r4, #8
  400920:	9402      	str	r4, [sp, #8]
  400922:	2420      	movs	r4, #32
  400924:	9403      	str	r4, [sp, #12]
  400926:	2480      	movs	r4, #128	; 0x80
  400928:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40092a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40092c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40092e:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400930:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400934:	d814      	bhi.n	400960 <tc_find_mck_divisor+0x4a>
  400936:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400938:	42a0      	cmp	r0, r4
  40093a:	d217      	bcs.n	40096c <tc_find_mck_divisor+0x56>
  40093c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40093e:	af01      	add	r7, sp, #4
  400940:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400944:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400948:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  40094a:	4284      	cmp	r4, r0
  40094c:	d30a      	bcc.n	400964 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  40094e:	4286      	cmp	r6, r0
  400950:	d90d      	bls.n	40096e <tc_find_mck_divisor+0x58>
			ul_index++) {
  400952:	3501      	adds	r5, #1
	for (ul_index = 0;
  400954:	2d05      	cmp	r5, #5
  400956:	d1f3      	bne.n	400940 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400958:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  40095a:	b006      	add	sp, #24
  40095c:	bcf0      	pop	{r4, r5, r6, r7}
  40095e:	4770      	bx	lr
			return 0;
  400960:	2000      	movs	r0, #0
  400962:	e7fa      	b.n	40095a <tc_find_mck_divisor+0x44>
  400964:	2000      	movs	r0, #0
  400966:	e7f8      	b.n	40095a <tc_find_mck_divisor+0x44>
	return 1;
  400968:	2001      	movs	r0, #1
  40096a:	e7f6      	b.n	40095a <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40096c:	2500      	movs	r5, #0
	if (p_uldiv) {
  40096e:	b12a      	cbz	r2, 40097c <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400970:	a906      	add	r1, sp, #24
  400972:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400976:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40097a:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40097c:	2b00      	cmp	r3, #0
  40097e:	d0f3      	beq.n	400968 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400980:	601d      	str	r5, [r3, #0]
	return 1;
  400982:	2001      	movs	r0, #1
  400984:	e7e9      	b.n	40095a <tc_find_mck_divisor+0x44>

00400986 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400986:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400988:	23ac      	movs	r3, #172	; 0xac
  40098a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40098c:	680b      	ldr	r3, [r1, #0]
  40098e:	684a      	ldr	r2, [r1, #4]
  400990:	fbb3 f3f2 	udiv	r3, r3, r2
  400994:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400996:	1e5c      	subs	r4, r3, #1
  400998:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40099c:	4294      	cmp	r4, r2
  40099e:	d80c      	bhi.n	4009ba <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  4009a0:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4009a2:	688b      	ldr	r3, [r1, #8]
  4009a4:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4009a6:	f240 2302 	movw	r3, #514	; 0x202
  4009aa:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4009ae:	2350      	movs	r3, #80	; 0x50
  4009b0:	6003      	str	r3, [r0, #0]

	return 0;
  4009b2:	2000      	movs	r0, #0
}
  4009b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009b8:	4770      	bx	lr
		return 1;
  4009ba:	2001      	movs	r0, #1
  4009bc:	e7fa      	b.n	4009b4 <uart_init+0x2e>

004009be <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4009be:	6943      	ldr	r3, [r0, #20]
  4009c0:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4009c4:	bf1a      	itte	ne
  4009c6:	61c1      	strne	r1, [r0, #28]
	return 0;
  4009c8:	2000      	movne	r0, #0
		return 1;
  4009ca:	2001      	moveq	r0, #1
}
  4009cc:	4770      	bx	lr

004009ce <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4009ce:	6943      	ldr	r3, [r0, #20]
  4009d0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4009d4:	bf1d      	ittte	ne
  4009d6:	6983      	ldrne	r3, [r0, #24]
  4009d8:	700b      	strbne	r3, [r1, #0]
	return 0;
  4009da:	2000      	movne	r0, #0
		return 1;
  4009dc:	2001      	moveq	r0, #1
}
  4009de:	4770      	bx	lr

004009e0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4009e0:	6943      	ldr	r3, [r0, #20]
  4009e2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4009e6:	bf1d      	ittte	ne
  4009e8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4009ec:	61c1      	strne	r1, [r0, #28]
	return 0;
  4009ee:	2000      	movne	r0, #0
		return 1;
  4009f0:	2001      	moveq	r0, #1
}
  4009f2:	4770      	bx	lr

004009f4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4009f4:	6943      	ldr	r3, [r0, #20]
  4009f6:	f013 0f01 	tst.w	r3, #1
  4009fa:	d005      	beq.n	400a08 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4009fc:	6983      	ldr	r3, [r0, #24]
  4009fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a02:	600b      	str	r3, [r1, #0]

	return 0;
  400a04:	2000      	movs	r0, #0
  400a06:	4770      	bx	lr
		return 1;
  400a08:	2001      	movs	r0, #1
}
  400a0a:	4770      	bx	lr

00400a0c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400a0c:	e7fe      	b.n	400a0c <Dummy_Handler>
	...

00400a10 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400a10:	b500      	push	{lr}
  400a12:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400a14:	4b25      	ldr	r3, [pc, #148]	; (400aac <Reset_Handler+0x9c>)
  400a16:	4a26      	ldr	r2, [pc, #152]	; (400ab0 <Reset_Handler+0xa0>)
  400a18:	429a      	cmp	r2, r3
  400a1a:	d010      	beq.n	400a3e <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400a1c:	4b25      	ldr	r3, [pc, #148]	; (400ab4 <Reset_Handler+0xa4>)
  400a1e:	4a23      	ldr	r2, [pc, #140]	; (400aac <Reset_Handler+0x9c>)
  400a20:	429a      	cmp	r2, r3
  400a22:	d20c      	bcs.n	400a3e <Reset_Handler+0x2e>
  400a24:	3b01      	subs	r3, #1
  400a26:	1a9b      	subs	r3, r3, r2
  400a28:	f023 0303 	bic.w	r3, r3, #3
  400a2c:	3304      	adds	r3, #4
  400a2e:	4413      	add	r3, r2
  400a30:	491f      	ldr	r1, [pc, #124]	; (400ab0 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400a32:	f851 0b04 	ldr.w	r0, [r1], #4
  400a36:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400a3a:	429a      	cmp	r2, r3
  400a3c:	d1f9      	bne.n	400a32 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400a3e:	4b1e      	ldr	r3, [pc, #120]	; (400ab8 <Reset_Handler+0xa8>)
  400a40:	4a1e      	ldr	r2, [pc, #120]	; (400abc <Reset_Handler+0xac>)
  400a42:	429a      	cmp	r2, r3
  400a44:	d20a      	bcs.n	400a5c <Reset_Handler+0x4c>
  400a46:	3b01      	subs	r3, #1
  400a48:	1a9b      	subs	r3, r3, r2
  400a4a:	f023 0303 	bic.w	r3, r3, #3
  400a4e:	3304      	adds	r3, #4
  400a50:	4413      	add	r3, r2
		*pDest++ = 0;
  400a52:	2100      	movs	r1, #0
  400a54:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400a58:	4293      	cmp	r3, r2
  400a5a:	d1fb      	bne.n	400a54 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400a5c:	4a18      	ldr	r2, [pc, #96]	; (400ac0 <Reset_Handler+0xb0>)
  400a5e:	4b19      	ldr	r3, [pc, #100]	; (400ac4 <Reset_Handler+0xb4>)
  400a60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400a64:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400a66:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a6a:	fab3 f383 	clz	r3, r3
  400a6e:	095b      	lsrs	r3, r3, #5
  400a70:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400a72:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400a74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a78:	2200      	movs	r2, #0
  400a7a:	4b13      	ldr	r3, [pc, #76]	; (400ac8 <Reset_Handler+0xb8>)
  400a7c:	701a      	strb	r2, [r3, #0]
	return flags;
  400a7e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400a80:	4a12      	ldr	r2, [pc, #72]	; (400acc <Reset_Handler+0xbc>)
  400a82:	6813      	ldr	r3, [r2, #0]
  400a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400a88:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a8e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400a92:	b129      	cbz	r1, 400aa0 <Reset_Handler+0x90>
		cpu_irq_enable();
  400a94:	2201      	movs	r2, #1
  400a96:	4b0c      	ldr	r3, [pc, #48]	; (400ac8 <Reset_Handler+0xb8>)
  400a98:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400a9a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a9e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400aa0:	4b0b      	ldr	r3, [pc, #44]	; (400ad0 <Reset_Handler+0xc0>)
  400aa2:	4798      	blx	r3

	/* Branch to main function */
	main();
  400aa4:	4b0b      	ldr	r3, [pc, #44]	; (400ad4 <Reset_Handler+0xc4>)
  400aa6:	4798      	blx	r3
  400aa8:	e7fe      	b.n	400aa8 <Reset_Handler+0x98>
  400aaa:	bf00      	nop
  400aac:	20000000 	.word	0x20000000
  400ab0:	004043b8 	.word	0x004043b8
  400ab4:	200009b8 	.word	0x200009b8
  400ab8:	20008de4 	.word	0x20008de4
  400abc:	200009b8 	.word	0x200009b8
  400ac0:	e000ed00 	.word	0xe000ed00
  400ac4:	00400000 	.word	0x00400000
  400ac8:	20000000 	.word	0x20000000
  400acc:	e000ed88 	.word	0xe000ed88
  400ad0:	00401171 	.word	0x00401171
  400ad4:	00400ead 	.word	0x00400ead

00400ad8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400ad8:	4b3b      	ldr	r3, [pc, #236]	; (400bc8 <SystemCoreClockUpdate+0xf0>)
  400ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400adc:	f003 0303 	and.w	r3, r3, #3
  400ae0:	2b01      	cmp	r3, #1
  400ae2:	d01d      	beq.n	400b20 <SystemCoreClockUpdate+0x48>
  400ae4:	b183      	cbz	r3, 400b08 <SystemCoreClockUpdate+0x30>
  400ae6:	2b02      	cmp	r3, #2
  400ae8:	d036      	beq.n	400b58 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400aea:	4b37      	ldr	r3, [pc, #220]	; (400bc8 <SystemCoreClockUpdate+0xf0>)
  400aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400aee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400af2:	2b70      	cmp	r3, #112	; 0x70
  400af4:	d05f      	beq.n	400bb6 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400af6:	4b34      	ldr	r3, [pc, #208]	; (400bc8 <SystemCoreClockUpdate+0xf0>)
  400af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400afa:	4934      	ldr	r1, [pc, #208]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400afc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400b00:	680b      	ldr	r3, [r1, #0]
  400b02:	40d3      	lsrs	r3, r2
  400b04:	600b      	str	r3, [r1, #0]
  400b06:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400b08:	4b31      	ldr	r3, [pc, #196]	; (400bd0 <SystemCoreClockUpdate+0xf8>)
  400b0a:	695b      	ldr	r3, [r3, #20]
  400b0c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b10:	bf14      	ite	ne
  400b12:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b16:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400b1a:	4b2c      	ldr	r3, [pc, #176]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400b1c:	601a      	str	r2, [r3, #0]
  400b1e:	e7e4      	b.n	400aea <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400b20:	4b29      	ldr	r3, [pc, #164]	; (400bc8 <SystemCoreClockUpdate+0xf0>)
  400b22:	6a1b      	ldr	r3, [r3, #32]
  400b24:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b28:	d003      	beq.n	400b32 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400b2a:	4a2a      	ldr	r2, [pc, #168]	; (400bd4 <SystemCoreClockUpdate+0xfc>)
  400b2c:	4b27      	ldr	r3, [pc, #156]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400b2e:	601a      	str	r2, [r3, #0]
  400b30:	e7db      	b.n	400aea <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b32:	4a29      	ldr	r2, [pc, #164]	; (400bd8 <SystemCoreClockUpdate+0x100>)
  400b34:	4b25      	ldr	r3, [pc, #148]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400b36:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b38:	4b23      	ldr	r3, [pc, #140]	; (400bc8 <SystemCoreClockUpdate+0xf0>)
  400b3a:	6a1b      	ldr	r3, [r3, #32]
  400b3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b40:	2b10      	cmp	r3, #16
  400b42:	d005      	beq.n	400b50 <SystemCoreClockUpdate+0x78>
  400b44:	2b20      	cmp	r3, #32
  400b46:	d1d0      	bne.n	400aea <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400b48:	4a22      	ldr	r2, [pc, #136]	; (400bd4 <SystemCoreClockUpdate+0xfc>)
  400b4a:	4b20      	ldr	r3, [pc, #128]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400b4c:	601a      	str	r2, [r3, #0]
				break;
  400b4e:	e7cc      	b.n	400aea <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400b50:	4a22      	ldr	r2, [pc, #136]	; (400bdc <SystemCoreClockUpdate+0x104>)
  400b52:	4b1e      	ldr	r3, [pc, #120]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400b54:	601a      	str	r2, [r3, #0]
				break;
  400b56:	e7c8      	b.n	400aea <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400b58:	4b1b      	ldr	r3, [pc, #108]	; (400bc8 <SystemCoreClockUpdate+0xf0>)
  400b5a:	6a1b      	ldr	r3, [r3, #32]
  400b5c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b60:	d016      	beq.n	400b90 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400b62:	4a1c      	ldr	r2, [pc, #112]	; (400bd4 <SystemCoreClockUpdate+0xfc>)
  400b64:	4b19      	ldr	r3, [pc, #100]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400b66:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400b68:	4b17      	ldr	r3, [pc, #92]	; (400bc8 <SystemCoreClockUpdate+0xf0>)
  400b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b6c:	f003 0303 	and.w	r3, r3, #3
  400b70:	2b02      	cmp	r3, #2
  400b72:	d1ba      	bne.n	400aea <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b74:	4a14      	ldr	r2, [pc, #80]	; (400bc8 <SystemCoreClockUpdate+0xf0>)
  400b76:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b78:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400b7a:	4814      	ldr	r0, [pc, #80]	; (400bcc <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b7c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400b80:	6803      	ldr	r3, [r0, #0]
  400b82:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b86:	b2d2      	uxtb	r2, r2
  400b88:	fbb3 f3f2 	udiv	r3, r3, r2
  400b8c:	6003      	str	r3, [r0, #0]
  400b8e:	e7ac      	b.n	400aea <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b90:	4a11      	ldr	r2, [pc, #68]	; (400bd8 <SystemCoreClockUpdate+0x100>)
  400b92:	4b0e      	ldr	r3, [pc, #56]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400b94:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b96:	4b0c      	ldr	r3, [pc, #48]	; (400bc8 <SystemCoreClockUpdate+0xf0>)
  400b98:	6a1b      	ldr	r3, [r3, #32]
  400b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b9e:	2b10      	cmp	r3, #16
  400ba0:	d005      	beq.n	400bae <SystemCoreClockUpdate+0xd6>
  400ba2:	2b20      	cmp	r3, #32
  400ba4:	d1e0      	bne.n	400b68 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400ba6:	4a0b      	ldr	r2, [pc, #44]	; (400bd4 <SystemCoreClockUpdate+0xfc>)
  400ba8:	4b08      	ldr	r3, [pc, #32]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400baa:	601a      	str	r2, [r3, #0]
				break;
  400bac:	e7dc      	b.n	400b68 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400bae:	4a0b      	ldr	r2, [pc, #44]	; (400bdc <SystemCoreClockUpdate+0x104>)
  400bb0:	4b06      	ldr	r3, [pc, #24]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400bb2:	601a      	str	r2, [r3, #0]
				break;
  400bb4:	e7d8      	b.n	400b68 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400bb6:	4a05      	ldr	r2, [pc, #20]	; (400bcc <SystemCoreClockUpdate+0xf4>)
  400bb8:	6813      	ldr	r3, [r2, #0]
  400bba:	4909      	ldr	r1, [pc, #36]	; (400be0 <SystemCoreClockUpdate+0x108>)
  400bbc:	fba1 1303 	umull	r1, r3, r1, r3
  400bc0:	085b      	lsrs	r3, r3, #1
  400bc2:	6013      	str	r3, [r2, #0]
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	400e0400 	.word	0x400e0400
  400bcc:	20000004 	.word	0x20000004
  400bd0:	400e1810 	.word	0x400e1810
  400bd4:	00b71b00 	.word	0x00b71b00
  400bd8:	003d0900 	.word	0x003d0900
  400bdc:	007a1200 	.word	0x007a1200
  400be0:	aaaaaaab 	.word	0xaaaaaaab

00400be4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400be4:	4b12      	ldr	r3, [pc, #72]	; (400c30 <system_init_flash+0x4c>)
  400be6:	4298      	cmp	r0, r3
  400be8:	d911      	bls.n	400c0e <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400bea:	4b12      	ldr	r3, [pc, #72]	; (400c34 <system_init_flash+0x50>)
  400bec:	4298      	cmp	r0, r3
  400bee:	d913      	bls.n	400c18 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400bf0:	4b11      	ldr	r3, [pc, #68]	; (400c38 <system_init_flash+0x54>)
  400bf2:	4298      	cmp	r0, r3
  400bf4:	d914      	bls.n	400c20 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400bf6:	4b11      	ldr	r3, [pc, #68]	; (400c3c <system_init_flash+0x58>)
  400bf8:	4298      	cmp	r0, r3
  400bfa:	d915      	bls.n	400c28 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400bfc:	4b10      	ldr	r3, [pc, #64]	; (400c40 <system_init_flash+0x5c>)
  400bfe:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400c00:	bf94      	ite	ls
  400c02:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c06:	4a0f      	ldrhi	r2, [pc, #60]	; (400c44 <system_init_flash+0x60>)
  400c08:	4b0f      	ldr	r3, [pc, #60]	; (400c48 <system_init_flash+0x64>)
  400c0a:	601a      	str	r2, [r3, #0]
  400c0c:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c12:	4b0d      	ldr	r3, [pc, #52]	; (400c48 <system_init_flash+0x64>)
  400c14:	601a      	str	r2, [r3, #0]
  400c16:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c18:	4a0c      	ldr	r2, [pc, #48]	; (400c4c <system_init_flash+0x68>)
  400c1a:	4b0b      	ldr	r3, [pc, #44]	; (400c48 <system_init_flash+0x64>)
  400c1c:	601a      	str	r2, [r3, #0]
  400c1e:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c20:	4a0b      	ldr	r2, [pc, #44]	; (400c50 <system_init_flash+0x6c>)
  400c22:	4b09      	ldr	r3, [pc, #36]	; (400c48 <system_init_flash+0x64>)
  400c24:	601a      	str	r2, [r3, #0]
  400c26:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400c28:	4a0a      	ldr	r2, [pc, #40]	; (400c54 <system_init_flash+0x70>)
  400c2a:	4b07      	ldr	r3, [pc, #28]	; (400c48 <system_init_flash+0x64>)
  400c2c:	601a      	str	r2, [r3, #0]
  400c2e:	4770      	bx	lr
  400c30:	01312cff 	.word	0x01312cff
  400c34:	026259ff 	.word	0x026259ff
  400c38:	039386ff 	.word	0x039386ff
  400c3c:	04c4b3ff 	.word	0x04c4b3ff
  400c40:	05f5e0ff 	.word	0x05f5e0ff
  400c44:	04000500 	.word	0x04000500
  400c48:	400e0a00 	.word	0x400e0a00
  400c4c:	04000100 	.word	0x04000100
  400c50:	04000200 	.word	0x04000200
  400c54:	04000300 	.word	0x04000300

00400c58 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400c58:	4b0a      	ldr	r3, [pc, #40]	; (400c84 <_sbrk+0x2c>)
  400c5a:	681b      	ldr	r3, [r3, #0]
  400c5c:	b153      	cbz	r3, 400c74 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400c5e:	4b09      	ldr	r3, [pc, #36]	; (400c84 <_sbrk+0x2c>)
  400c60:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400c62:	181a      	adds	r2, r3, r0
  400c64:	4908      	ldr	r1, [pc, #32]	; (400c88 <_sbrk+0x30>)
  400c66:	4291      	cmp	r1, r2
  400c68:	db08      	blt.n	400c7c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400c6a:	4610      	mov	r0, r2
  400c6c:	4a05      	ldr	r2, [pc, #20]	; (400c84 <_sbrk+0x2c>)
  400c6e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400c70:	4618      	mov	r0, r3
  400c72:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400c74:	4a05      	ldr	r2, [pc, #20]	; (400c8c <_sbrk+0x34>)
  400c76:	4b03      	ldr	r3, [pc, #12]	; (400c84 <_sbrk+0x2c>)
  400c78:	601a      	str	r2, [r3, #0]
  400c7a:	e7f0      	b.n	400c5e <_sbrk+0x6>
		return (caddr_t) -1;	
  400c7c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400c80:	4770      	bx	lr
  400c82:	bf00      	nop
  400c84:	200009d4 	.word	0x200009d4
  400c88:	2001fffc 	.word	0x2001fffc
  400c8c:	2000bde8 	.word	0x2000bde8

00400c90 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400c90:	f04f 30ff 	mov.w	r0, #4294967295
  400c94:	4770      	bx	lr

00400c96 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400c9a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400c9c:	2000      	movs	r0, #0
  400c9e:	4770      	bx	lr

00400ca0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400ca0:	2001      	movs	r0, #1
  400ca2:	4770      	bx	lr

00400ca4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400ca4:	2000      	movs	r0, #0
  400ca6:	4770      	bx	lr

00400ca8 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  400ca8:	b500      	push	{lr}
  400caa:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  400cac:	2201      	movs	r2, #1
  400cae:	f10d 0107 	add.w	r1, sp, #7
  400cb2:	4810      	ldr	r0, [pc, #64]	; (400cf4 <USART0_Handler+0x4c>)
  400cb4:	4b10      	ldr	r3, [pc, #64]	; (400cf8 <USART0_Handler+0x50>)
  400cb6:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400cb8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400cba:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  400cbe:	2200      	movs	r2, #0
  400cc0:	4b0e      	ldr	r3, [pc, #56]	; (400cfc <USART0_Handler+0x54>)
  400cc2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  400cc4:	4b0e      	ldr	r3, [pc, #56]	; (400d00 <USART0_Handler+0x58>)
  400cc6:	781b      	ldrb	r3, [r3, #0]
  400cc8:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400ccc:	4a0d      	ldr	r2, [pc, #52]	; (400d04 <USART0_Handler+0x5c>)
  400cce:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  400cd0:	2b9b      	cmp	r3, #155	; 0x9b
  400cd2:	d00b      	beq.n	400cec <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  400cd4:	3301      	adds	r3, #1
  400cd6:	4a0a      	ldr	r2, [pc, #40]	; (400d00 <USART0_Handler+0x58>)
  400cd8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  400cda:	2201      	movs	r2, #1
  400cdc:	4b07      	ldr	r3, [pc, #28]	; (400cfc <USART0_Handler+0x54>)
  400cde:	701a      	strb	r2, [r3, #0]
  400ce0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400ce4:	b662      	cpsie	i
}
  400ce6:	b003      	add	sp, #12
  400ce8:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  400cec:	2200      	movs	r2, #0
  400cee:	4b04      	ldr	r3, [pc, #16]	; (400d00 <USART0_Handler+0x58>)
  400cf0:	701a      	strb	r2, [r3, #0]
  400cf2:	e7f2      	b.n	400cda <USART0_Handler+0x32>
  400cf4:	400a0000 	.word	0x400a0000
  400cf8:	004001cd 	.word	0x004001cd
  400cfc:	20000000 	.word	0x20000000
  400d00:	20000a74 	.word	0x20000a74
  400d04:	200009d8 	.word	0x200009d8

00400d08 <afec0_data_ready>:
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  400d08:	4b0a      	ldr	r3, [pc, #40]	; (400d34 <afec0_data_ready+0x2c>)
  400d0a:	6a1b      	ldr	r3, [r3, #32]
  400d0c:	b29b      	uxth	r3, r3

/* brief AFEC0 DRDY interrupt callback function. */

static void afec0_data_ready(void)
{
	g_afec0_sample_data = afec_get_latest_value(AFEC0);					// Obtain latest sample from COLLECTOR signal (EXT3 - pin4 (ch6))
  400d0e:	ee07 3a90 	vmov	s15, r3
  400d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
  400d16:	4b08      	ldr	r3, [pc, #32]	; (400d38 <afec0_data_ready+0x30>)
  400d18:	edc3 7a00 	vstr	s15, [r3]
	buffer[bufferIndex]= g_afec0_sample_data;							// Transfer the sample to the buffer @ sample_index within the scanning wire cycle
  400d1c:	4907      	ldr	r1, [pc, #28]	; (400d3c <afec0_data_ready+0x34>)
  400d1e:	880a      	ldrh	r2, [r1, #0]
  400d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  400d24:	ee17 3a90 	vmov	r3, s15
  400d28:	4805      	ldr	r0, [pc, #20]	; (400d40 <afec0_data_ready+0x38>)
  400d2a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
	bufferIndex++;														// adjust buffer index
  400d2e:	3201      	adds	r2, #1
  400d30:	800a      	strh	r2, [r1, #0]
  400d32:	4770      	bx	lr
  400d34:	400b0000 	.word	0x400b0000
  400d38:	20008db8 	.word	0x20008db8
  400d3c:	20000a76 	.word	0x20000a76
  400d40:	20000b80 	.word	0x20000b80

00400d44 <usart_serial_getchar>:
{
  400d44:	b5f0      	push	{r4, r5, r6, r7, lr}
  400d46:	b083      	sub	sp, #12
  400d48:	4605      	mov	r5, r0
  400d4a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400d4c:	2300      	movs	r3, #0
  400d4e:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400d50:	4b18      	ldr	r3, [pc, #96]	; (400db4 <usart_serial_getchar+0x70>)
  400d52:	4298      	cmp	r0, r3
  400d54:	d00a      	beq.n	400d6c <usart_serial_getchar+0x28>
	if (UART1 == (Uart*)p_usart) {
  400d56:	4b18      	ldr	r3, [pc, #96]	; (400db8 <usart_serial_getchar+0x74>)
  400d58:	4298      	cmp	r0, r3
  400d5a:	d00f      	beq.n	400d7c <usart_serial_getchar+0x38>
	if (USART0 == p_usart) {
  400d5c:	4b17      	ldr	r3, [pc, #92]	; (400dbc <usart_serial_getchar+0x78>)
  400d5e:	4298      	cmp	r0, r3
  400d60:	d014      	beq.n	400d8c <usart_serial_getchar+0x48>
	if (USART1 == p_usart) {
  400d62:	4b17      	ldr	r3, [pc, #92]	; (400dc0 <usart_serial_getchar+0x7c>)
  400d64:	429d      	cmp	r5, r3
  400d66:	d01b      	beq.n	400da0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400d68:	b003      	add	sp, #12
  400d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400d6c:	461f      	mov	r7, r3
  400d6e:	4e15      	ldr	r6, [pc, #84]	; (400dc4 <usart_serial_getchar+0x80>)
  400d70:	4621      	mov	r1, r4
  400d72:	4638      	mov	r0, r7
  400d74:	47b0      	blx	r6
  400d76:	2800      	cmp	r0, #0
  400d78:	d1fa      	bne.n	400d70 <usart_serial_getchar+0x2c>
  400d7a:	e7f2      	b.n	400d62 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400d7c:	461e      	mov	r6, r3
  400d7e:	4d11      	ldr	r5, [pc, #68]	; (400dc4 <usart_serial_getchar+0x80>)
  400d80:	4621      	mov	r1, r4
  400d82:	4630      	mov	r0, r6
  400d84:	47a8      	blx	r5
  400d86:	2800      	cmp	r0, #0
  400d88:	d1fa      	bne.n	400d80 <usart_serial_getchar+0x3c>
  400d8a:	e7ed      	b.n	400d68 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400d8c:	461e      	mov	r6, r3
  400d8e:	4d0e      	ldr	r5, [pc, #56]	; (400dc8 <usart_serial_getchar+0x84>)
  400d90:	a901      	add	r1, sp, #4
  400d92:	4630      	mov	r0, r6
  400d94:	47a8      	blx	r5
  400d96:	2800      	cmp	r0, #0
  400d98:	d1fa      	bne.n	400d90 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400d9a:	9b01      	ldr	r3, [sp, #4]
  400d9c:	7023      	strb	r3, [r4, #0]
  400d9e:	e7e3      	b.n	400d68 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400da0:	461e      	mov	r6, r3
  400da2:	4d09      	ldr	r5, [pc, #36]	; (400dc8 <usart_serial_getchar+0x84>)
  400da4:	a901      	add	r1, sp, #4
  400da6:	4630      	mov	r0, r6
  400da8:	47a8      	blx	r5
  400daa:	2800      	cmp	r0, #0
  400dac:	d1fa      	bne.n	400da4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400dae:	9b01      	ldr	r3, [sp, #4]
  400db0:	7023      	strb	r3, [r4, #0]
}
  400db2:	e7d9      	b.n	400d68 <usart_serial_getchar+0x24>
  400db4:	400e0600 	.word	0x400e0600
  400db8:	40060600 	.word	0x40060600
  400dbc:	400a0000 	.word	0x400a0000
  400dc0:	400a4000 	.word	0x400a4000
  400dc4:	004009cf 	.word	0x004009cf
  400dc8:	004009f5 	.word	0x004009f5

00400dcc <usart_serial_putchar>:
{
  400dcc:	b570      	push	{r4, r5, r6, lr}
  400dce:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400dd0:	4b18      	ldr	r3, [pc, #96]	; (400e34 <usart_serial_putchar+0x68>)
  400dd2:	4298      	cmp	r0, r3
  400dd4:	d00a      	beq.n	400dec <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400dd6:	4b18      	ldr	r3, [pc, #96]	; (400e38 <usart_serial_putchar+0x6c>)
  400dd8:	4298      	cmp	r0, r3
  400dda:	d010      	beq.n	400dfe <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400ddc:	4b17      	ldr	r3, [pc, #92]	; (400e3c <usart_serial_putchar+0x70>)
  400dde:	4298      	cmp	r0, r3
  400de0:	d016      	beq.n	400e10 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400de2:	4b17      	ldr	r3, [pc, #92]	; (400e40 <usart_serial_putchar+0x74>)
  400de4:	4298      	cmp	r0, r3
  400de6:	d01c      	beq.n	400e22 <usart_serial_putchar+0x56>
	return 0;
  400de8:	2000      	movs	r0, #0
}
  400dea:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400dec:	461e      	mov	r6, r3
  400dee:	4d15      	ldr	r5, [pc, #84]	; (400e44 <usart_serial_putchar+0x78>)
  400df0:	4621      	mov	r1, r4
  400df2:	4630      	mov	r0, r6
  400df4:	47a8      	blx	r5
  400df6:	2800      	cmp	r0, #0
  400df8:	d1fa      	bne.n	400df0 <usart_serial_putchar+0x24>
		return 1;
  400dfa:	2001      	movs	r0, #1
  400dfc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400dfe:	461e      	mov	r6, r3
  400e00:	4d10      	ldr	r5, [pc, #64]	; (400e44 <usart_serial_putchar+0x78>)
  400e02:	4621      	mov	r1, r4
  400e04:	4630      	mov	r0, r6
  400e06:	47a8      	blx	r5
  400e08:	2800      	cmp	r0, #0
  400e0a:	d1fa      	bne.n	400e02 <usart_serial_putchar+0x36>
		return 1;
  400e0c:	2001      	movs	r0, #1
  400e0e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400e10:	461e      	mov	r6, r3
  400e12:	4d0d      	ldr	r5, [pc, #52]	; (400e48 <usart_serial_putchar+0x7c>)
  400e14:	4621      	mov	r1, r4
  400e16:	4630      	mov	r0, r6
  400e18:	47a8      	blx	r5
  400e1a:	2800      	cmp	r0, #0
  400e1c:	d1fa      	bne.n	400e14 <usart_serial_putchar+0x48>
		return 1;
  400e1e:	2001      	movs	r0, #1
  400e20:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400e22:	461e      	mov	r6, r3
  400e24:	4d08      	ldr	r5, [pc, #32]	; (400e48 <usart_serial_putchar+0x7c>)
  400e26:	4621      	mov	r1, r4
  400e28:	4630      	mov	r0, r6
  400e2a:	47a8      	blx	r5
  400e2c:	2800      	cmp	r0, #0
  400e2e:	d1fa      	bne.n	400e26 <usart_serial_putchar+0x5a>
		return 1;
  400e30:	2001      	movs	r0, #1
  400e32:	bd70      	pop	{r4, r5, r6, pc}
  400e34:	400e0600 	.word	0x400e0600
  400e38:	40060600 	.word	0x40060600
  400e3c:	400a0000 	.word	0x400a0000
  400e40:	400a4000 	.word	0x400a4000
  400e44:	004009bf 	.word	0x004009bf
  400e48:	004009e1 	.word	0x004009e1

00400e4c <ACC_Handler>:
{
  400e4c:	b508      	push	{r3, lr}
	ul_status = acc_get_interrupt_status(ACC);
  400e4e:	4810      	ldr	r0, [pc, #64]	; (400e90 <ACC_Handler+0x44>)
  400e50:	4b10      	ldr	r3, [pc, #64]	; (400e94 <ACC_Handler+0x48>)
  400e52:	4798      	blx	r3
	if ((ul_status & ACC_ISR_CE) == ACC_ISR_CE) {
  400e54:	f010 0f01 	tst.w	r0, #1
  400e58:	d100      	bne.n	400e5c <ACC_Handler+0x10>
  400e5a:	bd08      	pop	{r3, pc}
		if (acc_get_comparison_result(ACC)) {
  400e5c:	480c      	ldr	r0, [pc, #48]	; (400e90 <ACC_Handler+0x44>)
  400e5e:	4b0e      	ldr	r3, [pc, #56]	; (400e98 <ACC_Handler+0x4c>)
  400e60:	4798      	blx	r3
  400e62:	b150      	cbz	r0, 400e7a <ACC_Handler+0x2e>
			puts("-ISR- Voltage Comparison Result: AD5 > DAC0\r");
  400e64:	480d      	ldr	r0, [pc, #52]	; (400e9c <ACC_Handler+0x50>)
  400e66:	4b0e      	ldr	r3, [pc, #56]	; (400ea0 <ACC_Handler+0x54>)
  400e68:	4798      	blx	r3
			if(!triggered)
  400e6a:	4b0e      	ldr	r3, [pc, #56]	; (400ea4 <ACC_Handler+0x58>)
  400e6c:	781b      	ldrb	r3, [r3, #0]
  400e6e:	2b00      	cmp	r3, #0
  400e70:	d1f3      	bne.n	400e5a <ACC_Handler+0xe>
				triggered= true;
  400e72:	2201      	movs	r2, #1
  400e74:	4b0b      	ldr	r3, [pc, #44]	; (400ea4 <ACC_Handler+0x58>)
  400e76:	701a      	strb	r2, [r3, #0]
  400e78:	bd08      	pop	{r3, pc}
			puts("-ISR- Voltage Comparison Result: AD5 < DAC0\r");
  400e7a:	480b      	ldr	r0, [pc, #44]	; (400ea8 <ACC_Handler+0x5c>)
  400e7c:	4b08      	ldr	r3, [pc, #32]	; (400ea0 <ACC_Handler+0x54>)
  400e7e:	4798      	blx	r3
			if(triggered)
  400e80:	4b08      	ldr	r3, [pc, #32]	; (400ea4 <ACC_Handler+0x58>)
  400e82:	781b      	ldrb	r3, [r3, #0]
  400e84:	2b00      	cmp	r3, #0
  400e86:	d0e8      	beq.n	400e5a <ACC_Handler+0xe>
				triggered=false;
  400e88:	2200      	movs	r2, #0
  400e8a:	4b06      	ldr	r3, [pc, #24]	; (400ea4 <ACC_Handler+0x58>)
  400e8c:	701a      	strb	r2, [r3, #0]
}
  400e8e:	e7e4      	b.n	400e5a <ACC_Handler+0xe>
  400e90:	400bc000 	.word	0x400bc000
  400e94:	004003e5 	.word	0x004003e5
  400e98:	004003cb 	.word	0x004003cb
  400e9c:	004041b8 	.word	0x004041b8
  400ea0:	00401321 	.word	0x00401321
  400ea4:	20000a78 	.word	0x20000a78
  400ea8:	004041e8 	.word	0x004041e8

00400eac <main>:
	

}

int main (void)
{
  400eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400eb0:	b08d      	sub	sp, #52	; 0x34
	/* Initialize the SAM system. */
	sysclk_init();
  400eb2:	4b7b      	ldr	r3, [pc, #492]	; (4010a0 <main+0x1f4>)
  400eb4:	4798      	blx	r3
	board_init();
  400eb6:	4b7b      	ldr	r3, [pc, #492]	; (4010a4 <main+0x1f8>)
  400eb8:	4798      	blx	r3
  400eba:	2007      	movs	r0, #7
  400ebc:	f8df 8270 	ldr.w	r8, [pc, #624]	; 401130 <main+0x284>
  400ec0:	47c0      	blx	r8
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400ec2:	4c79      	ldr	r4, [pc, #484]	; (4010a8 <main+0x1fc>)
  400ec4:	4b79      	ldr	r3, [pc, #484]	; (4010ac <main+0x200>)
  400ec6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400ec8:	4a79      	ldr	r2, [pc, #484]	; (4010b0 <main+0x204>)
  400eca:	4b7a      	ldr	r3, [pc, #488]	; (4010b4 <main+0x208>)
  400ecc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400ece:	4a7a      	ldr	r2, [pc, #488]	; (4010b8 <main+0x20c>)
  400ed0:	4b7a      	ldr	r3, [pc, #488]	; (4010bc <main+0x210>)
  400ed2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400ed4:	4d7a      	ldr	r5, [pc, #488]	; (4010c0 <main+0x214>)
  400ed6:	9505      	str	r5, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
  400ed8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400edc:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
  400ede:	f44f 6900 	mov.w	r9, #2048	; 0x800
  400ee2:	f8cd 901c 	str.w	r9, [sp, #28]
  400ee6:	2007      	movs	r0, #7
  400ee8:	47c0      	blx	r8
		uart_init((Uart*)p_usart, &uart_settings);
  400eea:	a905      	add	r1, sp, #20
  400eec:	4620      	mov	r0, r4
  400eee:	4b75      	ldr	r3, [pc, #468]	; (4010c4 <main+0x218>)
  400ef0:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400ef2:	4e75      	ldr	r6, [pc, #468]	; (4010c8 <main+0x21c>)
  400ef4:	6833      	ldr	r3, [r6, #0]
  400ef6:	2100      	movs	r1, #0
  400ef8:	6898      	ldr	r0, [r3, #8]
  400efa:	4c74      	ldr	r4, [pc, #464]	; (4010cc <main+0x220>)
  400efc:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400efe:	6833      	ldr	r3, [r6, #0]
  400f00:	2100      	movs	r1, #0
  400f02:	6858      	ldr	r0, [r3, #4]
  400f04:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_DACC);
  400f06:	2020      	movs	r0, #32
  400f08:	47c0      	blx	r8
	dacc_reset(DACC);
  400f0a:	4c71      	ldr	r4, [pc, #452]	; (4010d0 <main+0x224>)
  400f0c:	4620      	mov	r0, r4
  400f0e:	4b71      	ldr	r3, [pc, #452]	; (4010d4 <main+0x228>)
  400f10:	4798      	blx	r3
	dacc_disable_trigger(DACC);
  400f12:	4620      	mov	r0, r4
  400f14:	4b70      	ldr	r3, [pc, #448]	; (4010d8 <main+0x22c>)
  400f16:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
  400f18:	2100      	movs	r1, #0
  400f1a:	4620      	mov	r0, r4
  400f1c:	4b6f      	ldr	r3, [pc, #444]	; (4010dc <main+0x230>)
  400f1e:	4798      	blx	r3
	dacc_set_timing(DACC, 0, 0xf);
  400f20:	220f      	movs	r2, #15
  400f22:	2100      	movs	r1, #0
  400f24:	4620      	mov	r0, r4
  400f26:	4b6e      	ldr	r3, [pc, #440]	; (4010e0 <main+0x234>)
  400f28:	4798      	blx	r3
	dacc_set_channel_selection(DACC, DACC_CHANNEL_0);
  400f2a:	2100      	movs	r1, #0
  400f2c:	4620      	mov	r0, r4
  400f2e:	4b6d      	ldr	r3, [pc, #436]	; (4010e4 <main+0x238>)
  400f30:	4798      	blx	r3
	dacc_enable_channel(DACC, DACC_CHANNEL_0);
  400f32:	2100      	movs	r1, #0
  400f34:	4620      	mov	r0, r4
  400f36:	4b6c      	ldr	r3, [pc, #432]	; (4010e8 <main+0x23c>)
  400f38:	4798      	blx	r3
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  400f3a:	f44f 7185 	mov.w	r1, #266	; 0x10a
  400f3e:	4620      	mov	r0, r4
  400f40:	4b6a      	ldr	r3, [pc, #424]	; (4010ec <main+0x240>)
  400f42:	4798      	blx	r3
	dacc_write_conversion_data(DACC, MAX_DIGITAL / 2);
  400f44:	f240 71ff 	movw	r1, #2047	; 0x7ff
  400f48:	4620      	mov	r0, r4
  400f4a:	4b69      	ldr	r3, [pc, #420]	; (4010f0 <main+0x244>)
  400f4c:	4798      	blx	r3
	configure_console();

	/* Output example information. */
	//puts(STRING_HEADER);
	configureDACC();
	g_afec0_sample_data = 0;
  400f4e:	2300      	movs	r3, #0
  400f50:	4a68      	ldr	r2, [pc, #416]	; (4010f4 <main+0x248>)
  400f52:	6013      	str	r3, [r2, #0]
	g_afec1_sample_data = 0;
  400f54:	4a68      	ldr	r2, [pc, #416]	; (4010f8 <main+0x24c>)
  400f56:	6013      	str	r3, [r2, #0]
	afec_enable(AFEC0);
  400f58:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
  400f5c:	4620      	mov	r0, r4
  400f5e:	4b67      	ldr	r3, [pc, #412]	; (4010fc <main+0x250>)
  400f60:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  400f62:	a805      	add	r0, sp, #20
  400f64:	4b66      	ldr	r3, [pc, #408]	; (401100 <main+0x254>)
  400f66:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  400f68:	a802      	add	r0, sp, #8
  400f6a:	4b66      	ldr	r3, [pc, #408]	; (401104 <main+0x258>)
  400f6c:	4798      	blx	r3
		afec_init(AFEC0, &afec_cfg);
  400f6e:	a905      	add	r1, sp, #20
  400f70:	4620      	mov	r0, r4
  400f72:	4f65      	ldr	r7, [pc, #404]	; (401108 <main+0x25c>)
  400f74:	47b8      	blx	r7
		afec_init(AFEC1, &afec_cfg);
  400f76:	4e65      	ldr	r6, [pc, #404]	; (40110c <main+0x260>)
  400f78:	a905      	add	r1, sp, #20
  400f7a:	4630      	mov	r0, r6
  400f7c:	47b8      	blx	r7
		afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  400f7e:	aa02      	add	r2, sp, #8
  400f80:	2106      	movs	r1, #6
  400f82:	4620      	mov	r0, r4
  400f84:	4f62      	ldr	r7, [pc, #392]	; (401110 <main+0x264>)
  400f86:	47b8      	blx	r7
		afec_ch_set_config(AFEC1, AFEC_CHANNEL_0, &afec_ch_cfg);
  400f88:	aa02      	add	r2, sp, #8
  400f8a:	2100      	movs	r1, #0
  400f8c:	4630      	mov	r0, r6
  400f8e:	47b8      	blx	r7
	afec->AFEC_CSELR = afec_ch;
  400f90:	2700      	movs	r7, #0
  400f92:	6677      	str	r7, [r6, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400f94:	f8c6 906c 	str.w	r9, [r6, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  400f98:	2306      	movs	r3, #6
  400f9a:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400f9c:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	reg = afec->AFEC_MR;
  400fa0:	6873      	ldr	r3, [r6, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400fa2:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  400fa6:	6073      	str	r3, [r6, #4]
    uint32_t ul_div = 0;
  400fa8:	9703      	str	r7, [sp, #12]
	uint32_t ul_tc_clks = 0;
  400faa:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  400fae:	f849 7d20 	str.w	r7, [r9, #-32]!
	pmc_enable_periph_clk(ID_TC0);														// Enable peripheral clock of timer counter 0
  400fb2:	2015      	movs	r0, #21
  400fb4:	47c0      	blx	r8
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  400fb6:	9500      	str	r5, [sp, #0]
  400fb8:	464b      	mov	r3, r9
  400fba:	aa03      	add	r2, sp, #12
  400fbc:	4629      	mov	r1, r5
  400fbe:	4855      	ldr	r0, [pc, #340]	; (401114 <main+0x268>)
  400fc0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 40116c <main+0x2c0>
  400fc4:	47c0      	blx	r8
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  400fc6:	f8df 8190 	ldr.w	r8, [pc, #400]	; 401158 <main+0x2ac>
  400fca:	9a04      	ldr	r2, [sp, #16]
  400fcc:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  400fd0:	4639      	mov	r1, r7
  400fd2:	4640      	mov	r0, r8
  400fd4:	4b50      	ldr	r3, [pc, #320]	; (401118 <main+0x26c>)
  400fd6:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  400fd8:	9b03      	ldr	r3, [sp, #12]
  400fda:	fbb5 f3f3 	udiv	r3, r5, r3
  400fde:	4a4f      	ldr	r2, [pc, #316]	; (40111c <main+0x270>)
  400fe0:	fba2 2303 	umull	r2, r3, r2, r3
  400fe4:	0c5a      	lsrs	r2, r3, #17
  400fe6:	f8c8 2014 	str.w	r2, [r8, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  400fea:	0c1b      	lsrs	r3, r3, #16
  400fec:	f8c8 301c 	str.w	r3, [r8, #28]
	tc_start(TC0, 0);																	// Start the TC0 timer
  400ff0:	4639      	mov	r1, r7
  400ff2:	4640      	mov	r0, r8
  400ff4:	4b4a      	ldr	r3, [pc, #296]	; (401120 <main+0x274>)
  400ff6:	4798      	blx	r3
	reg = afec->AFEC_MR;
  400ff8:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400ffa:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  400ffe:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  401002:	6063      	str	r3, [r4, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401004:	2301      	movs	r3, #1
  401006:	6173      	str	r3, [r6, #20]
  401008:	2240      	movs	r2, #64	; 0x40
  40100a:	6162      	str	r2, [r4, #20]
		afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  40100c:	4a45      	ldr	r2, [pc, #276]	; (401124 <main+0x278>)
  40100e:	2110      	movs	r1, #16
  401010:	4620      	mov	r0, r4
  401012:	4d45      	ldr	r5, [pc, #276]	; (401128 <main+0x27c>)
  401014:	47a8      	blx	r5
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  401016:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  401018:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  40101a:	6863      	ldr	r3, [r4, #4]
  40101c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401020:	d101      	bne.n	401026 <main+0x17a>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  401022:	2208      	movs	r2, #8
  401024:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  401026:	4a41      	ldr	r2, [pc, #260]	; (40112c <main+0x280>)
  401028:	6b13      	ldr	r3, [r2, #48]	; 0x30
		while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  40102a:	2b00      	cmp	r3, #0
  40102c:	dafc      	bge.n	401028 <main+0x17c>
	g_max_digital = MAX_DIGITAL_12_BIT;
	bool test;
	set_afec_test();
	/* Enable clock for ACC */
	pmc_enable_periph_clk(ID_ACC);
  40102e:	2021      	movs	r0, #33	; 0x21
  401030:	4b3f      	ldr	r3, [pc, #252]	; (401130 <main+0x284>)
  401032:	4798      	blx	r3
	/* Initialize ACC */
	acc_init(ACC, ACC_MR_SELPLUS_AD5, ACC_MR_SELMINUS_DAC1,
  401034:	4c3f      	ldr	r4, [pc, #252]	; (401134 <main+0x288>)
  401036:	2300      	movs	r3, #0
  401038:	9300      	str	r3, [sp, #0]
  40103a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40103e:	2203      	movs	r2, #3
  401040:	2150      	movs	r1, #80	; 0x50
  401042:	4620      	mov	r0, r4
  401044:	4d3c      	ldr	r5, [pc, #240]	; (401138 <main+0x28c>)
  401046:	47a8      	blx	r5
  401048:	2202      	movs	r2, #2
  40104a:	4b3c      	ldr	r3, [pc, #240]	; (40113c <main+0x290>)
  40104c:	605a      	str	r2, [r3, #4]

	/* Enable ACC interrupt */
	NVIC_EnableIRQ(ACC_IRQn);

	/* Enable */
	acc_enable_interrupt(ACC);
  40104e:	4620      	mov	r0, r4
  401050:	4b3b      	ldr	r3, [pc, #236]	; (401140 <main+0x294>)
  401052:	4798      	blx	r3
	while (bufferIndex<buffersize) {
  401054:	4b3b      	ldr	r3, [pc, #236]	; (401144 <main+0x298>)
  401056:	881a      	ldrh	r2, [r3, #0]
  401058:	f244 131a 	movw	r3, #16666	; 0x411a
  40105c:	429a      	cmp	r2, r3
  40105e:	d809      	bhi.n	401074 <main+0x1c8>
		printf(".");
  401060:	4e39      	ldr	r6, [pc, #228]	; (401148 <main+0x29c>)
  401062:	4d3a      	ldr	r5, [pc, #232]	; (40114c <main+0x2a0>)
	while (bufferIndex<buffersize) {
  401064:	4c37      	ldr	r4, [pc, #220]	; (401144 <main+0x298>)
		printf(".");
  401066:	4630      	mov	r0, r6
  401068:	47a8      	blx	r5
	while (bufferIndex<buffersize) {
  40106a:	8822      	ldrh	r2, [r4, #0]
  40106c:	f244 131a 	movw	r3, #16666	; 0x411a
  401070:	429a      	cmp	r2, r3
  401072:	d9f8      	bls.n	401066 <main+0x1ba>
		//tc_stop(TC0, 0);
		//set_afec_test();
		//}
	}
		
	afec_disable_interrupt(AFEC0, AFEC_INTERRUPT_ALL);
  401074:	4936      	ldr	r1, [pc, #216]	; (401150 <main+0x2a4>)
  401076:	482d      	ldr	r0, [pc, #180]	; (40112c <main+0x280>)
  401078:	4b36      	ldr	r3, [pc, #216]	; (401154 <main+0x2a8>)
  40107a:	4798      	blx	r3
	//afec_disable_interrupt(AFEC1, AFEC_INTERRUPT_ALL);
	tc_stop(TC0, 0);
  40107c:	2100      	movs	r1, #0
  40107e:	4836      	ldr	r0, [pc, #216]	; (401158 <main+0x2ac>)
  401080:	4b36      	ldr	r3, [pc, #216]	; (40115c <main+0x2b0>)
  401082:	4798      	blx	r3
  401084:	4c36      	ldr	r4, [pc, #216]	; (401160 <main+0x2b4>)
  401086:	4f37      	ldr	r7, [pc, #220]	; (401164 <main+0x2b8>)
	printf("%u\n\r", sample);
  401088:	4e37      	ldr	r6, [pc, #220]	; (401168 <main+0x2bc>)
  40108a:	4d30      	ldr	r5, [pc, #192]	; (40114c <main+0x2a0>)
  40108c:	f834 1f02 	ldrh.w	r1, [r4, #2]!
  401090:	4630      	mov	r0, r6
  401092:	47a8      	blx	r5
		
	uint16_t i=0;
	while (i< buffersize)
  401094:	42bc      	cmp	r4, r7
  401096:	d1f9      	bne.n	40108c <main+0x1e0>
			
		i++;
	}
		
		
  401098:	2000      	movs	r0, #0
  40109a:	b00d      	add	sp, #52	; 0x34
  40109c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4010a0:	00400165 	.word	0x00400165
  4010a4:	004002f9 	.word	0x004002f9
  4010a8:	400e0600 	.word	0x400e0600
  4010ac:	20000ac0 	.word	0x20000ac0
  4010b0:	00400dcd 	.word	0x00400dcd
  4010b4:	20000abc 	.word	0x20000abc
  4010b8:	00400d45 	.word	0x00400d45
  4010bc:	20000ab8 	.word	0x20000ab8
  4010c0:	05b8d800 	.word	0x05b8d800
  4010c4:	00400987 	.word	0x00400987
  4010c8:	20000008 	.word	0x20000008
  4010cc:	00401331 	.word	0x00401331
  4010d0:	400b8000 	.word	0x400b8000
  4010d4:	00400719 	.word	0x00400719
  4010d8:	0040071f 	.word	0x0040071f
  4010dc:	00400729 	.word	0x00400729
  4010e0:	0040076d 	.word	0x0040076d
  4010e4:	00400755 	.word	0x00400755
  4010e8:	00400795 	.word	0x00400795
  4010ec:	004007a9 	.word	0x004007a9
  4010f0:	00400751 	.word	0x00400751
  4010f4:	20008db8 	.word	0x20008db8
  4010f8:	20000b7c 	.word	0x20000b7c
  4010fc:	004006b5 	.word	0x004006b5
  401100:	004004b5 	.word	0x004004b5
  401104:	004004e5 	.word	0x004004e5
  401108:	004004f1 	.word	0x004004f1
  40110c:	400b4000 	.word	0x400b4000
  401110:	00400485 	.word	0x00400485
  401114:	0003d090 	.word	0x0003d090
  401118:	004008ed 	.word	0x004008ed
  40111c:	431bde83 	.word	0x431bde83
  401120:	00400907 	.word	0x00400907
  401124:	00400d09 	.word	0x00400d09
  401128:	004005fd 	.word	0x004005fd
  40112c:	400b0000 	.word	0x400b0000
  401130:	00400899 	.word	0x00400899
  401134:	400bc000 	.word	0x400bc000
  401138:	00400391 	.word	0x00400391
  40113c:	e000e100 	.word	0xe000e100
  401140:	004003df 	.word	0x004003df
  401144:	20000a76 	.word	0x20000a76
  401148:	00404218 	.word	0x00404218
  40114c:	004011c1 	.word	0x004011c1
  401150:	df00ffff 	.word	0xdf00ffff
  401154:	00400655 	.word	0x00400655
  401158:	40090000 	.word	0x40090000
  40115c:	0040090f 	.word	0x0040090f
  401160:	20000b7e 	.word	0x20000b7e
  401164:	20008db4 	.word	0x20008db4
  401168:	0040421c 	.word	0x0040421c
  40116c:	00400917 	.word	0x00400917

00401170 <__libc_init_array>:
  401170:	b570      	push	{r4, r5, r6, lr}
  401172:	4e0f      	ldr	r6, [pc, #60]	; (4011b0 <__libc_init_array+0x40>)
  401174:	4d0f      	ldr	r5, [pc, #60]	; (4011b4 <__libc_init_array+0x44>)
  401176:	1b76      	subs	r6, r6, r5
  401178:	10b6      	asrs	r6, r6, #2
  40117a:	bf18      	it	ne
  40117c:	2400      	movne	r4, #0
  40117e:	d005      	beq.n	40118c <__libc_init_array+0x1c>
  401180:	3401      	adds	r4, #1
  401182:	f855 3b04 	ldr.w	r3, [r5], #4
  401186:	4798      	blx	r3
  401188:	42a6      	cmp	r6, r4
  40118a:	d1f9      	bne.n	401180 <__libc_init_array+0x10>
  40118c:	4e0a      	ldr	r6, [pc, #40]	; (4011b8 <__libc_init_array+0x48>)
  40118e:	4d0b      	ldr	r5, [pc, #44]	; (4011bc <__libc_init_array+0x4c>)
  401190:	1b76      	subs	r6, r6, r5
  401192:	f003 f8fb 	bl	40438c <_init>
  401196:	10b6      	asrs	r6, r6, #2
  401198:	bf18      	it	ne
  40119a:	2400      	movne	r4, #0
  40119c:	d006      	beq.n	4011ac <__libc_init_array+0x3c>
  40119e:	3401      	adds	r4, #1
  4011a0:	f855 3b04 	ldr.w	r3, [r5], #4
  4011a4:	4798      	blx	r3
  4011a6:	42a6      	cmp	r6, r4
  4011a8:	d1f9      	bne.n	40119e <__libc_init_array+0x2e>
  4011aa:	bd70      	pop	{r4, r5, r6, pc}
  4011ac:	bd70      	pop	{r4, r5, r6, pc}
  4011ae:	bf00      	nop
  4011b0:	00404398 	.word	0x00404398
  4011b4:	00404398 	.word	0x00404398
  4011b8:	004043a0 	.word	0x004043a0
  4011bc:	00404398 	.word	0x00404398

004011c0 <iprintf>:
  4011c0:	b40f      	push	{r0, r1, r2, r3}
  4011c2:	b500      	push	{lr}
  4011c4:	4907      	ldr	r1, [pc, #28]	; (4011e4 <iprintf+0x24>)
  4011c6:	b083      	sub	sp, #12
  4011c8:	ab04      	add	r3, sp, #16
  4011ca:	6808      	ldr	r0, [r1, #0]
  4011cc:	f853 2b04 	ldr.w	r2, [r3], #4
  4011d0:	6881      	ldr	r1, [r0, #8]
  4011d2:	9301      	str	r3, [sp, #4]
  4011d4:	f000 fa42 	bl	40165c <_vfiprintf_r>
  4011d8:	b003      	add	sp, #12
  4011da:	f85d eb04 	ldr.w	lr, [sp], #4
  4011de:	b004      	add	sp, #16
  4011e0:	4770      	bx	lr
  4011e2:	bf00      	nop
  4011e4:	20000008 	.word	0x20000008

004011e8 <memset>:
  4011e8:	b470      	push	{r4, r5, r6}
  4011ea:	0786      	lsls	r6, r0, #30
  4011ec:	d046      	beq.n	40127c <memset+0x94>
  4011ee:	1e54      	subs	r4, r2, #1
  4011f0:	2a00      	cmp	r2, #0
  4011f2:	d041      	beq.n	401278 <memset+0x90>
  4011f4:	b2ca      	uxtb	r2, r1
  4011f6:	4603      	mov	r3, r0
  4011f8:	e002      	b.n	401200 <memset+0x18>
  4011fa:	f114 34ff 	adds.w	r4, r4, #4294967295
  4011fe:	d33b      	bcc.n	401278 <memset+0x90>
  401200:	f803 2b01 	strb.w	r2, [r3], #1
  401204:	079d      	lsls	r5, r3, #30
  401206:	d1f8      	bne.n	4011fa <memset+0x12>
  401208:	2c03      	cmp	r4, #3
  40120a:	d92e      	bls.n	40126a <memset+0x82>
  40120c:	b2cd      	uxtb	r5, r1
  40120e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401212:	2c0f      	cmp	r4, #15
  401214:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401218:	d919      	bls.n	40124e <memset+0x66>
  40121a:	f103 0210 	add.w	r2, r3, #16
  40121e:	4626      	mov	r6, r4
  401220:	3e10      	subs	r6, #16
  401222:	2e0f      	cmp	r6, #15
  401224:	f842 5c10 	str.w	r5, [r2, #-16]
  401228:	f842 5c0c 	str.w	r5, [r2, #-12]
  40122c:	f842 5c08 	str.w	r5, [r2, #-8]
  401230:	f842 5c04 	str.w	r5, [r2, #-4]
  401234:	f102 0210 	add.w	r2, r2, #16
  401238:	d8f2      	bhi.n	401220 <memset+0x38>
  40123a:	f1a4 0210 	sub.w	r2, r4, #16
  40123e:	f022 020f 	bic.w	r2, r2, #15
  401242:	f004 040f 	and.w	r4, r4, #15
  401246:	3210      	adds	r2, #16
  401248:	2c03      	cmp	r4, #3
  40124a:	4413      	add	r3, r2
  40124c:	d90d      	bls.n	40126a <memset+0x82>
  40124e:	461e      	mov	r6, r3
  401250:	4622      	mov	r2, r4
  401252:	3a04      	subs	r2, #4
  401254:	2a03      	cmp	r2, #3
  401256:	f846 5b04 	str.w	r5, [r6], #4
  40125a:	d8fa      	bhi.n	401252 <memset+0x6a>
  40125c:	1f22      	subs	r2, r4, #4
  40125e:	f022 0203 	bic.w	r2, r2, #3
  401262:	3204      	adds	r2, #4
  401264:	4413      	add	r3, r2
  401266:	f004 0403 	and.w	r4, r4, #3
  40126a:	b12c      	cbz	r4, 401278 <memset+0x90>
  40126c:	b2c9      	uxtb	r1, r1
  40126e:	441c      	add	r4, r3
  401270:	f803 1b01 	strb.w	r1, [r3], #1
  401274:	429c      	cmp	r4, r3
  401276:	d1fb      	bne.n	401270 <memset+0x88>
  401278:	bc70      	pop	{r4, r5, r6}
  40127a:	4770      	bx	lr
  40127c:	4614      	mov	r4, r2
  40127e:	4603      	mov	r3, r0
  401280:	e7c2      	b.n	401208 <memset+0x20>
  401282:	bf00      	nop

00401284 <_puts_r>:
  401284:	b5f0      	push	{r4, r5, r6, r7, lr}
  401286:	4605      	mov	r5, r0
  401288:	b089      	sub	sp, #36	; 0x24
  40128a:	4608      	mov	r0, r1
  40128c:	460c      	mov	r4, r1
  40128e:	f000 f937 	bl	401500 <strlen>
  401292:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401294:	4f21      	ldr	r7, [pc, #132]	; (40131c <_puts_r+0x98>)
  401296:	9404      	str	r4, [sp, #16]
  401298:	2601      	movs	r6, #1
  40129a:	1c44      	adds	r4, r0, #1
  40129c:	a904      	add	r1, sp, #16
  40129e:	2202      	movs	r2, #2
  4012a0:	9403      	str	r4, [sp, #12]
  4012a2:	9005      	str	r0, [sp, #20]
  4012a4:	68ac      	ldr	r4, [r5, #8]
  4012a6:	9706      	str	r7, [sp, #24]
  4012a8:	9607      	str	r6, [sp, #28]
  4012aa:	9101      	str	r1, [sp, #4]
  4012ac:	9202      	str	r2, [sp, #8]
  4012ae:	b353      	cbz	r3, 401306 <_puts_r+0x82>
  4012b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4012b2:	f013 0f01 	tst.w	r3, #1
  4012b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4012ba:	b29a      	uxth	r2, r3
  4012bc:	d101      	bne.n	4012c2 <_puts_r+0x3e>
  4012be:	0590      	lsls	r0, r2, #22
  4012c0:	d525      	bpl.n	40130e <_puts_r+0x8a>
  4012c2:	0491      	lsls	r1, r2, #18
  4012c4:	d406      	bmi.n	4012d4 <_puts_r+0x50>
  4012c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4012c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4012cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4012d0:	81a3      	strh	r3, [r4, #12]
  4012d2:	6662      	str	r2, [r4, #100]	; 0x64
  4012d4:	4628      	mov	r0, r5
  4012d6:	aa01      	add	r2, sp, #4
  4012d8:	4621      	mov	r1, r4
  4012da:	f001 fbc1 	bl	402a60 <__sfvwrite_r>
  4012de:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4012e0:	2800      	cmp	r0, #0
  4012e2:	bf0c      	ite	eq
  4012e4:	250a      	moveq	r5, #10
  4012e6:	f04f 35ff 	movne.w	r5, #4294967295
  4012ea:	07da      	lsls	r2, r3, #31
  4012ec:	d402      	bmi.n	4012f4 <_puts_r+0x70>
  4012ee:	89a3      	ldrh	r3, [r4, #12]
  4012f0:	059b      	lsls	r3, r3, #22
  4012f2:	d502      	bpl.n	4012fa <_puts_r+0x76>
  4012f4:	4628      	mov	r0, r5
  4012f6:	b009      	add	sp, #36	; 0x24
  4012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4012fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4012fc:	f001 fd66 	bl	402dcc <__retarget_lock_release_recursive>
  401300:	4628      	mov	r0, r5
  401302:	b009      	add	sp, #36	; 0x24
  401304:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401306:	4628      	mov	r0, r5
  401308:	f001 f99e 	bl	402648 <__sinit>
  40130c:	e7d0      	b.n	4012b0 <_puts_r+0x2c>
  40130e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401310:	f001 fd5a 	bl	402dc8 <__retarget_lock_acquire_recursive>
  401314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401318:	b29a      	uxth	r2, r3
  40131a:	e7d2      	b.n	4012c2 <_puts_r+0x3e>
  40131c:	00404228 	.word	0x00404228

00401320 <puts>:
  401320:	4b02      	ldr	r3, [pc, #8]	; (40132c <puts+0xc>)
  401322:	4601      	mov	r1, r0
  401324:	6818      	ldr	r0, [r3, #0]
  401326:	f7ff bfad 	b.w	401284 <_puts_r>
  40132a:	bf00      	nop
  40132c:	20000008 	.word	0x20000008

00401330 <setbuf>:
  401330:	2900      	cmp	r1, #0
  401332:	bf0c      	ite	eq
  401334:	2202      	moveq	r2, #2
  401336:	2200      	movne	r2, #0
  401338:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40133c:	f000 b800 	b.w	401340 <setvbuf>

00401340 <setvbuf>:
  401340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401344:	4c61      	ldr	r4, [pc, #388]	; (4014cc <setvbuf+0x18c>)
  401346:	6825      	ldr	r5, [r4, #0]
  401348:	b083      	sub	sp, #12
  40134a:	4604      	mov	r4, r0
  40134c:	460f      	mov	r7, r1
  40134e:	4690      	mov	r8, r2
  401350:	461e      	mov	r6, r3
  401352:	b115      	cbz	r5, 40135a <setvbuf+0x1a>
  401354:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401356:	2b00      	cmp	r3, #0
  401358:	d064      	beq.n	401424 <setvbuf+0xe4>
  40135a:	f1b8 0f02 	cmp.w	r8, #2
  40135e:	d006      	beq.n	40136e <setvbuf+0x2e>
  401360:	f1b8 0f01 	cmp.w	r8, #1
  401364:	f200 809f 	bhi.w	4014a6 <setvbuf+0x166>
  401368:	2e00      	cmp	r6, #0
  40136a:	f2c0 809c 	blt.w	4014a6 <setvbuf+0x166>
  40136e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401370:	07d8      	lsls	r0, r3, #31
  401372:	d534      	bpl.n	4013de <setvbuf+0x9e>
  401374:	4621      	mov	r1, r4
  401376:	4628      	mov	r0, r5
  401378:	f001 f90e 	bl	402598 <_fflush_r>
  40137c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40137e:	b141      	cbz	r1, 401392 <setvbuf+0x52>
  401380:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401384:	4299      	cmp	r1, r3
  401386:	d002      	beq.n	40138e <setvbuf+0x4e>
  401388:	4628      	mov	r0, r5
  40138a:	f001 fa83 	bl	402894 <_free_r>
  40138e:	2300      	movs	r3, #0
  401390:	6323      	str	r3, [r4, #48]	; 0x30
  401392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401396:	2200      	movs	r2, #0
  401398:	61a2      	str	r2, [r4, #24]
  40139a:	6062      	str	r2, [r4, #4]
  40139c:	061a      	lsls	r2, r3, #24
  40139e:	d43a      	bmi.n	401416 <setvbuf+0xd6>
  4013a0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4013a4:	f023 0303 	bic.w	r3, r3, #3
  4013a8:	f1b8 0f02 	cmp.w	r8, #2
  4013ac:	81a3      	strh	r3, [r4, #12]
  4013ae:	d01d      	beq.n	4013ec <setvbuf+0xac>
  4013b0:	ab01      	add	r3, sp, #4
  4013b2:	466a      	mov	r2, sp
  4013b4:	4621      	mov	r1, r4
  4013b6:	4628      	mov	r0, r5
  4013b8:	f001 fd0a 	bl	402dd0 <__swhatbuf_r>
  4013bc:	89a3      	ldrh	r3, [r4, #12]
  4013be:	4318      	orrs	r0, r3
  4013c0:	81a0      	strh	r0, [r4, #12]
  4013c2:	2e00      	cmp	r6, #0
  4013c4:	d132      	bne.n	40142c <setvbuf+0xec>
  4013c6:	9e00      	ldr	r6, [sp, #0]
  4013c8:	4630      	mov	r0, r6
  4013ca:	f001 fd79 	bl	402ec0 <malloc>
  4013ce:	4607      	mov	r7, r0
  4013d0:	2800      	cmp	r0, #0
  4013d2:	d06b      	beq.n	4014ac <setvbuf+0x16c>
  4013d4:	89a3      	ldrh	r3, [r4, #12]
  4013d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4013da:	81a3      	strh	r3, [r4, #12]
  4013dc:	e028      	b.n	401430 <setvbuf+0xf0>
  4013de:	89a3      	ldrh	r3, [r4, #12]
  4013e0:	0599      	lsls	r1, r3, #22
  4013e2:	d4c7      	bmi.n	401374 <setvbuf+0x34>
  4013e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4013e6:	f001 fcef 	bl	402dc8 <__retarget_lock_acquire_recursive>
  4013ea:	e7c3      	b.n	401374 <setvbuf+0x34>
  4013ec:	2500      	movs	r5, #0
  4013ee:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4013f0:	2600      	movs	r6, #0
  4013f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4013f6:	f043 0302 	orr.w	r3, r3, #2
  4013fa:	2001      	movs	r0, #1
  4013fc:	60a6      	str	r6, [r4, #8]
  4013fe:	07ce      	lsls	r6, r1, #31
  401400:	81a3      	strh	r3, [r4, #12]
  401402:	6022      	str	r2, [r4, #0]
  401404:	6122      	str	r2, [r4, #16]
  401406:	6160      	str	r0, [r4, #20]
  401408:	d401      	bmi.n	40140e <setvbuf+0xce>
  40140a:	0598      	lsls	r0, r3, #22
  40140c:	d53e      	bpl.n	40148c <setvbuf+0x14c>
  40140e:	4628      	mov	r0, r5
  401410:	b003      	add	sp, #12
  401412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401416:	6921      	ldr	r1, [r4, #16]
  401418:	4628      	mov	r0, r5
  40141a:	f001 fa3b 	bl	402894 <_free_r>
  40141e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401422:	e7bd      	b.n	4013a0 <setvbuf+0x60>
  401424:	4628      	mov	r0, r5
  401426:	f001 f90f 	bl	402648 <__sinit>
  40142a:	e796      	b.n	40135a <setvbuf+0x1a>
  40142c:	2f00      	cmp	r7, #0
  40142e:	d0cb      	beq.n	4013c8 <setvbuf+0x88>
  401430:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401432:	2b00      	cmp	r3, #0
  401434:	d033      	beq.n	40149e <setvbuf+0x15e>
  401436:	9b00      	ldr	r3, [sp, #0]
  401438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40143c:	6027      	str	r7, [r4, #0]
  40143e:	429e      	cmp	r6, r3
  401440:	bf1c      	itt	ne
  401442:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401446:	81a2      	strhne	r2, [r4, #12]
  401448:	f1b8 0f01 	cmp.w	r8, #1
  40144c:	bf04      	itt	eq
  40144e:	f042 0201 	orreq.w	r2, r2, #1
  401452:	81a2      	strheq	r2, [r4, #12]
  401454:	b292      	uxth	r2, r2
  401456:	f012 0308 	ands.w	r3, r2, #8
  40145a:	6127      	str	r7, [r4, #16]
  40145c:	6166      	str	r6, [r4, #20]
  40145e:	d00e      	beq.n	40147e <setvbuf+0x13e>
  401460:	07d1      	lsls	r1, r2, #31
  401462:	d51a      	bpl.n	40149a <setvbuf+0x15a>
  401464:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401466:	4276      	negs	r6, r6
  401468:	2300      	movs	r3, #0
  40146a:	f015 0501 	ands.w	r5, r5, #1
  40146e:	61a6      	str	r6, [r4, #24]
  401470:	60a3      	str	r3, [r4, #8]
  401472:	d009      	beq.n	401488 <setvbuf+0x148>
  401474:	2500      	movs	r5, #0
  401476:	4628      	mov	r0, r5
  401478:	b003      	add	sp, #12
  40147a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40147e:	60a3      	str	r3, [r4, #8]
  401480:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401482:	f015 0501 	ands.w	r5, r5, #1
  401486:	d1f5      	bne.n	401474 <setvbuf+0x134>
  401488:	0593      	lsls	r3, r2, #22
  40148a:	d4c0      	bmi.n	40140e <setvbuf+0xce>
  40148c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40148e:	f001 fc9d 	bl	402dcc <__retarget_lock_release_recursive>
  401492:	4628      	mov	r0, r5
  401494:	b003      	add	sp, #12
  401496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40149a:	60a6      	str	r6, [r4, #8]
  40149c:	e7f0      	b.n	401480 <setvbuf+0x140>
  40149e:	4628      	mov	r0, r5
  4014a0:	f001 f8d2 	bl	402648 <__sinit>
  4014a4:	e7c7      	b.n	401436 <setvbuf+0xf6>
  4014a6:	f04f 35ff 	mov.w	r5, #4294967295
  4014aa:	e7b0      	b.n	40140e <setvbuf+0xce>
  4014ac:	f8dd 9000 	ldr.w	r9, [sp]
  4014b0:	45b1      	cmp	r9, r6
  4014b2:	d004      	beq.n	4014be <setvbuf+0x17e>
  4014b4:	4648      	mov	r0, r9
  4014b6:	f001 fd03 	bl	402ec0 <malloc>
  4014ba:	4607      	mov	r7, r0
  4014bc:	b920      	cbnz	r0, 4014c8 <setvbuf+0x188>
  4014be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4014c2:	f04f 35ff 	mov.w	r5, #4294967295
  4014c6:	e792      	b.n	4013ee <setvbuf+0xae>
  4014c8:	464e      	mov	r6, r9
  4014ca:	e783      	b.n	4013d4 <setvbuf+0x94>
  4014cc:	20000008 	.word	0x20000008
	...

00401500 <strlen>:
  401500:	f890 f000 	pld	[r0]
  401504:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401508:	f020 0107 	bic.w	r1, r0, #7
  40150c:	f06f 0c00 	mvn.w	ip, #0
  401510:	f010 0407 	ands.w	r4, r0, #7
  401514:	f891 f020 	pld	[r1, #32]
  401518:	f040 8049 	bne.w	4015ae <strlen+0xae>
  40151c:	f04f 0400 	mov.w	r4, #0
  401520:	f06f 0007 	mvn.w	r0, #7
  401524:	e9d1 2300 	ldrd	r2, r3, [r1]
  401528:	f891 f040 	pld	[r1, #64]	; 0x40
  40152c:	f100 0008 	add.w	r0, r0, #8
  401530:	fa82 f24c 	uadd8	r2, r2, ip
  401534:	faa4 f28c 	sel	r2, r4, ip
  401538:	fa83 f34c 	uadd8	r3, r3, ip
  40153c:	faa2 f38c 	sel	r3, r2, ip
  401540:	bb4b      	cbnz	r3, 401596 <strlen+0x96>
  401542:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401546:	fa82 f24c 	uadd8	r2, r2, ip
  40154a:	f100 0008 	add.w	r0, r0, #8
  40154e:	faa4 f28c 	sel	r2, r4, ip
  401552:	fa83 f34c 	uadd8	r3, r3, ip
  401556:	faa2 f38c 	sel	r3, r2, ip
  40155a:	b9e3      	cbnz	r3, 401596 <strlen+0x96>
  40155c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401560:	fa82 f24c 	uadd8	r2, r2, ip
  401564:	f100 0008 	add.w	r0, r0, #8
  401568:	faa4 f28c 	sel	r2, r4, ip
  40156c:	fa83 f34c 	uadd8	r3, r3, ip
  401570:	faa2 f38c 	sel	r3, r2, ip
  401574:	b97b      	cbnz	r3, 401596 <strlen+0x96>
  401576:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40157a:	f101 0120 	add.w	r1, r1, #32
  40157e:	fa82 f24c 	uadd8	r2, r2, ip
  401582:	f100 0008 	add.w	r0, r0, #8
  401586:	faa4 f28c 	sel	r2, r4, ip
  40158a:	fa83 f34c 	uadd8	r3, r3, ip
  40158e:	faa2 f38c 	sel	r3, r2, ip
  401592:	2b00      	cmp	r3, #0
  401594:	d0c6      	beq.n	401524 <strlen+0x24>
  401596:	2a00      	cmp	r2, #0
  401598:	bf04      	itt	eq
  40159a:	3004      	addeq	r0, #4
  40159c:	461a      	moveq	r2, r3
  40159e:	ba12      	rev	r2, r2
  4015a0:	fab2 f282 	clz	r2, r2
  4015a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4015a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4015ac:	4770      	bx	lr
  4015ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4015b2:	f004 0503 	and.w	r5, r4, #3
  4015b6:	f1c4 0000 	rsb	r0, r4, #0
  4015ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4015be:	f014 0f04 	tst.w	r4, #4
  4015c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4015c6:	fa0c f505 	lsl.w	r5, ip, r5
  4015ca:	ea62 0205 	orn	r2, r2, r5
  4015ce:	bf1c      	itt	ne
  4015d0:	ea63 0305 	ornne	r3, r3, r5
  4015d4:	4662      	movne	r2, ip
  4015d6:	f04f 0400 	mov.w	r4, #0
  4015da:	e7a9      	b.n	401530 <strlen+0x30>

004015dc <__sprint_r.part.0>:
  4015dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4015e2:	049c      	lsls	r4, r3, #18
  4015e4:	4693      	mov	fp, r2
  4015e6:	d52f      	bpl.n	401648 <__sprint_r.part.0+0x6c>
  4015e8:	6893      	ldr	r3, [r2, #8]
  4015ea:	6812      	ldr	r2, [r2, #0]
  4015ec:	b353      	cbz	r3, 401644 <__sprint_r.part.0+0x68>
  4015ee:	460e      	mov	r6, r1
  4015f0:	4607      	mov	r7, r0
  4015f2:	f102 0908 	add.w	r9, r2, #8
  4015f6:	e919 0420 	ldmdb	r9, {r5, sl}
  4015fa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4015fe:	d017      	beq.n	401630 <__sprint_r.part.0+0x54>
  401600:	3d04      	subs	r5, #4
  401602:	2400      	movs	r4, #0
  401604:	e001      	b.n	40160a <__sprint_r.part.0+0x2e>
  401606:	45a0      	cmp	r8, r4
  401608:	d010      	beq.n	40162c <__sprint_r.part.0+0x50>
  40160a:	4632      	mov	r2, r6
  40160c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401610:	4638      	mov	r0, r7
  401612:	f001 f8bb 	bl	40278c <_fputwc_r>
  401616:	1c43      	adds	r3, r0, #1
  401618:	f104 0401 	add.w	r4, r4, #1
  40161c:	d1f3      	bne.n	401606 <__sprint_r.part.0+0x2a>
  40161e:	2300      	movs	r3, #0
  401620:	f8cb 3008 	str.w	r3, [fp, #8]
  401624:	f8cb 3004 	str.w	r3, [fp, #4]
  401628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40162c:	f8db 3008 	ldr.w	r3, [fp, #8]
  401630:	f02a 0a03 	bic.w	sl, sl, #3
  401634:	eba3 030a 	sub.w	r3, r3, sl
  401638:	f8cb 3008 	str.w	r3, [fp, #8]
  40163c:	f109 0908 	add.w	r9, r9, #8
  401640:	2b00      	cmp	r3, #0
  401642:	d1d8      	bne.n	4015f6 <__sprint_r.part.0+0x1a>
  401644:	2000      	movs	r0, #0
  401646:	e7ea      	b.n	40161e <__sprint_r.part.0+0x42>
  401648:	f001 fa0a 	bl	402a60 <__sfvwrite_r>
  40164c:	2300      	movs	r3, #0
  40164e:	f8cb 3008 	str.w	r3, [fp, #8]
  401652:	f8cb 3004 	str.w	r3, [fp, #4]
  401656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40165a:	bf00      	nop

0040165c <_vfiprintf_r>:
  40165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401660:	b0ad      	sub	sp, #180	; 0xb4
  401662:	461d      	mov	r5, r3
  401664:	468b      	mov	fp, r1
  401666:	4690      	mov	r8, r2
  401668:	9307      	str	r3, [sp, #28]
  40166a:	9006      	str	r0, [sp, #24]
  40166c:	b118      	cbz	r0, 401676 <_vfiprintf_r+0x1a>
  40166e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401670:	2b00      	cmp	r3, #0
  401672:	f000 80f3 	beq.w	40185c <_vfiprintf_r+0x200>
  401676:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40167a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40167e:	07df      	lsls	r7, r3, #31
  401680:	b281      	uxth	r1, r0
  401682:	d402      	bmi.n	40168a <_vfiprintf_r+0x2e>
  401684:	058e      	lsls	r6, r1, #22
  401686:	f140 80fc 	bpl.w	401882 <_vfiprintf_r+0x226>
  40168a:	048c      	lsls	r4, r1, #18
  40168c:	d40a      	bmi.n	4016a4 <_vfiprintf_r+0x48>
  40168e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401692:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40169a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40169e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4016a2:	b289      	uxth	r1, r1
  4016a4:	0708      	lsls	r0, r1, #28
  4016a6:	f140 80b3 	bpl.w	401810 <_vfiprintf_r+0x1b4>
  4016aa:	f8db 3010 	ldr.w	r3, [fp, #16]
  4016ae:	2b00      	cmp	r3, #0
  4016b0:	f000 80ae 	beq.w	401810 <_vfiprintf_r+0x1b4>
  4016b4:	f001 031a 	and.w	r3, r1, #26
  4016b8:	2b0a      	cmp	r3, #10
  4016ba:	f000 80b5 	beq.w	401828 <_vfiprintf_r+0x1cc>
  4016be:	2300      	movs	r3, #0
  4016c0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4016c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4016c6:	9311      	str	r3, [sp, #68]	; 0x44
  4016c8:	9310      	str	r3, [sp, #64]	; 0x40
  4016ca:	9303      	str	r3, [sp, #12]
  4016cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4016d0:	46ca      	mov	sl, r9
  4016d2:	f8cd b010 	str.w	fp, [sp, #16]
  4016d6:	f898 3000 	ldrb.w	r3, [r8]
  4016da:	4644      	mov	r4, r8
  4016dc:	b1fb      	cbz	r3, 40171e <_vfiprintf_r+0xc2>
  4016de:	2b25      	cmp	r3, #37	; 0x25
  4016e0:	d102      	bne.n	4016e8 <_vfiprintf_r+0x8c>
  4016e2:	e01c      	b.n	40171e <_vfiprintf_r+0xc2>
  4016e4:	2b25      	cmp	r3, #37	; 0x25
  4016e6:	d003      	beq.n	4016f0 <_vfiprintf_r+0x94>
  4016e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4016ec:	2b00      	cmp	r3, #0
  4016ee:	d1f9      	bne.n	4016e4 <_vfiprintf_r+0x88>
  4016f0:	eba4 0508 	sub.w	r5, r4, r8
  4016f4:	b19d      	cbz	r5, 40171e <_vfiprintf_r+0xc2>
  4016f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4016f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4016fa:	f8ca 8000 	str.w	r8, [sl]
  4016fe:	3301      	adds	r3, #1
  401700:	442a      	add	r2, r5
  401702:	2b07      	cmp	r3, #7
  401704:	f8ca 5004 	str.w	r5, [sl, #4]
  401708:	9211      	str	r2, [sp, #68]	; 0x44
  40170a:	9310      	str	r3, [sp, #64]	; 0x40
  40170c:	dd7a      	ble.n	401804 <_vfiprintf_r+0x1a8>
  40170e:	2a00      	cmp	r2, #0
  401710:	f040 84b0 	bne.w	402074 <_vfiprintf_r+0xa18>
  401714:	9b03      	ldr	r3, [sp, #12]
  401716:	9210      	str	r2, [sp, #64]	; 0x40
  401718:	442b      	add	r3, r5
  40171a:	46ca      	mov	sl, r9
  40171c:	9303      	str	r3, [sp, #12]
  40171e:	7823      	ldrb	r3, [r4, #0]
  401720:	2b00      	cmp	r3, #0
  401722:	f000 83e0 	beq.w	401ee6 <_vfiprintf_r+0x88a>
  401726:	2000      	movs	r0, #0
  401728:	f04f 0300 	mov.w	r3, #0
  40172c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401730:	f104 0801 	add.w	r8, r4, #1
  401734:	7862      	ldrb	r2, [r4, #1]
  401736:	4605      	mov	r5, r0
  401738:	4606      	mov	r6, r0
  40173a:	4603      	mov	r3, r0
  40173c:	f04f 34ff 	mov.w	r4, #4294967295
  401740:	f108 0801 	add.w	r8, r8, #1
  401744:	f1a2 0120 	sub.w	r1, r2, #32
  401748:	2958      	cmp	r1, #88	; 0x58
  40174a:	f200 82de 	bhi.w	401d0a <_vfiprintf_r+0x6ae>
  40174e:	e8df f011 	tbh	[pc, r1, lsl #1]
  401752:	0221      	.short	0x0221
  401754:	02dc02dc 	.word	0x02dc02dc
  401758:	02dc0229 	.word	0x02dc0229
  40175c:	02dc02dc 	.word	0x02dc02dc
  401760:	02dc02dc 	.word	0x02dc02dc
  401764:	028902dc 	.word	0x028902dc
  401768:	02dc0295 	.word	0x02dc0295
  40176c:	02bd00a2 	.word	0x02bd00a2
  401770:	019f02dc 	.word	0x019f02dc
  401774:	01a401a4 	.word	0x01a401a4
  401778:	01a401a4 	.word	0x01a401a4
  40177c:	01a401a4 	.word	0x01a401a4
  401780:	01a401a4 	.word	0x01a401a4
  401784:	02dc01a4 	.word	0x02dc01a4
  401788:	02dc02dc 	.word	0x02dc02dc
  40178c:	02dc02dc 	.word	0x02dc02dc
  401790:	02dc02dc 	.word	0x02dc02dc
  401794:	02dc02dc 	.word	0x02dc02dc
  401798:	01b202dc 	.word	0x01b202dc
  40179c:	02dc02dc 	.word	0x02dc02dc
  4017a0:	02dc02dc 	.word	0x02dc02dc
  4017a4:	02dc02dc 	.word	0x02dc02dc
  4017a8:	02dc02dc 	.word	0x02dc02dc
  4017ac:	02dc02dc 	.word	0x02dc02dc
  4017b0:	02dc0197 	.word	0x02dc0197
  4017b4:	02dc02dc 	.word	0x02dc02dc
  4017b8:	02dc02dc 	.word	0x02dc02dc
  4017bc:	02dc019b 	.word	0x02dc019b
  4017c0:	025302dc 	.word	0x025302dc
  4017c4:	02dc02dc 	.word	0x02dc02dc
  4017c8:	02dc02dc 	.word	0x02dc02dc
  4017cc:	02dc02dc 	.word	0x02dc02dc
  4017d0:	02dc02dc 	.word	0x02dc02dc
  4017d4:	02dc02dc 	.word	0x02dc02dc
  4017d8:	021b025a 	.word	0x021b025a
  4017dc:	02dc02dc 	.word	0x02dc02dc
  4017e0:	026e02dc 	.word	0x026e02dc
  4017e4:	02dc021b 	.word	0x02dc021b
  4017e8:	027302dc 	.word	0x027302dc
  4017ec:	01f502dc 	.word	0x01f502dc
  4017f0:	02090182 	.word	0x02090182
  4017f4:	02dc02d7 	.word	0x02dc02d7
  4017f8:	02dc029a 	.word	0x02dc029a
  4017fc:	02dc00a7 	.word	0x02dc00a7
  401800:	022e02dc 	.word	0x022e02dc
  401804:	f10a 0a08 	add.w	sl, sl, #8
  401808:	9b03      	ldr	r3, [sp, #12]
  40180a:	442b      	add	r3, r5
  40180c:	9303      	str	r3, [sp, #12]
  40180e:	e786      	b.n	40171e <_vfiprintf_r+0xc2>
  401810:	4659      	mov	r1, fp
  401812:	9806      	ldr	r0, [sp, #24]
  401814:	f000 fdac 	bl	402370 <__swsetup_r>
  401818:	bb18      	cbnz	r0, 401862 <_vfiprintf_r+0x206>
  40181a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40181e:	f001 031a 	and.w	r3, r1, #26
  401822:	2b0a      	cmp	r3, #10
  401824:	f47f af4b 	bne.w	4016be <_vfiprintf_r+0x62>
  401828:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40182c:	2b00      	cmp	r3, #0
  40182e:	f6ff af46 	blt.w	4016be <_vfiprintf_r+0x62>
  401832:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401836:	07db      	lsls	r3, r3, #31
  401838:	d405      	bmi.n	401846 <_vfiprintf_r+0x1ea>
  40183a:	058f      	lsls	r7, r1, #22
  40183c:	d403      	bmi.n	401846 <_vfiprintf_r+0x1ea>
  40183e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401842:	f001 fac3 	bl	402dcc <__retarget_lock_release_recursive>
  401846:	462b      	mov	r3, r5
  401848:	4642      	mov	r2, r8
  40184a:	4659      	mov	r1, fp
  40184c:	9806      	ldr	r0, [sp, #24]
  40184e:	f000 fd4d 	bl	4022ec <__sbprintf>
  401852:	9003      	str	r0, [sp, #12]
  401854:	9803      	ldr	r0, [sp, #12]
  401856:	b02d      	add	sp, #180	; 0xb4
  401858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40185c:	f000 fef4 	bl	402648 <__sinit>
  401860:	e709      	b.n	401676 <_vfiprintf_r+0x1a>
  401862:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401866:	07d9      	lsls	r1, r3, #31
  401868:	d404      	bmi.n	401874 <_vfiprintf_r+0x218>
  40186a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40186e:	059a      	lsls	r2, r3, #22
  401870:	f140 84aa 	bpl.w	4021c8 <_vfiprintf_r+0xb6c>
  401874:	f04f 33ff 	mov.w	r3, #4294967295
  401878:	9303      	str	r3, [sp, #12]
  40187a:	9803      	ldr	r0, [sp, #12]
  40187c:	b02d      	add	sp, #180	; 0xb4
  40187e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401882:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401886:	f001 fa9f 	bl	402dc8 <__retarget_lock_acquire_recursive>
  40188a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40188e:	b281      	uxth	r1, r0
  401890:	e6fb      	b.n	40168a <_vfiprintf_r+0x2e>
  401892:	4276      	negs	r6, r6
  401894:	9207      	str	r2, [sp, #28]
  401896:	f043 0304 	orr.w	r3, r3, #4
  40189a:	f898 2000 	ldrb.w	r2, [r8]
  40189e:	e74f      	b.n	401740 <_vfiprintf_r+0xe4>
  4018a0:	9608      	str	r6, [sp, #32]
  4018a2:	069e      	lsls	r6, r3, #26
  4018a4:	f100 8450 	bmi.w	402148 <_vfiprintf_r+0xaec>
  4018a8:	9907      	ldr	r1, [sp, #28]
  4018aa:	06dd      	lsls	r5, r3, #27
  4018ac:	460a      	mov	r2, r1
  4018ae:	f100 83ef 	bmi.w	402090 <_vfiprintf_r+0xa34>
  4018b2:	0658      	lsls	r0, r3, #25
  4018b4:	f140 83ec 	bpl.w	402090 <_vfiprintf_r+0xa34>
  4018b8:	880e      	ldrh	r6, [r1, #0]
  4018ba:	3104      	adds	r1, #4
  4018bc:	2700      	movs	r7, #0
  4018be:	2201      	movs	r2, #1
  4018c0:	9107      	str	r1, [sp, #28]
  4018c2:	f04f 0100 	mov.w	r1, #0
  4018c6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4018ca:	2500      	movs	r5, #0
  4018cc:	1c61      	adds	r1, r4, #1
  4018ce:	f000 8116 	beq.w	401afe <_vfiprintf_r+0x4a2>
  4018d2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4018d6:	9102      	str	r1, [sp, #8]
  4018d8:	ea56 0107 	orrs.w	r1, r6, r7
  4018dc:	f040 8114 	bne.w	401b08 <_vfiprintf_r+0x4ac>
  4018e0:	2c00      	cmp	r4, #0
  4018e2:	f040 835c 	bne.w	401f9e <_vfiprintf_r+0x942>
  4018e6:	2a00      	cmp	r2, #0
  4018e8:	f040 83b7 	bne.w	40205a <_vfiprintf_r+0x9fe>
  4018ec:	f013 0301 	ands.w	r3, r3, #1
  4018f0:	9305      	str	r3, [sp, #20]
  4018f2:	f000 8457 	beq.w	4021a4 <_vfiprintf_r+0xb48>
  4018f6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4018fa:	2330      	movs	r3, #48	; 0x30
  4018fc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401900:	9b05      	ldr	r3, [sp, #20]
  401902:	42a3      	cmp	r3, r4
  401904:	bfb8      	it	lt
  401906:	4623      	movlt	r3, r4
  401908:	9301      	str	r3, [sp, #4]
  40190a:	b10d      	cbz	r5, 401910 <_vfiprintf_r+0x2b4>
  40190c:	3301      	adds	r3, #1
  40190e:	9301      	str	r3, [sp, #4]
  401910:	9b02      	ldr	r3, [sp, #8]
  401912:	f013 0302 	ands.w	r3, r3, #2
  401916:	9309      	str	r3, [sp, #36]	; 0x24
  401918:	d002      	beq.n	401920 <_vfiprintf_r+0x2c4>
  40191a:	9b01      	ldr	r3, [sp, #4]
  40191c:	3302      	adds	r3, #2
  40191e:	9301      	str	r3, [sp, #4]
  401920:	9b02      	ldr	r3, [sp, #8]
  401922:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401926:	930a      	str	r3, [sp, #40]	; 0x28
  401928:	f040 8217 	bne.w	401d5a <_vfiprintf_r+0x6fe>
  40192c:	9b08      	ldr	r3, [sp, #32]
  40192e:	9a01      	ldr	r2, [sp, #4]
  401930:	1a9d      	subs	r5, r3, r2
  401932:	2d00      	cmp	r5, #0
  401934:	f340 8211 	ble.w	401d5a <_vfiprintf_r+0x6fe>
  401938:	2d10      	cmp	r5, #16
  40193a:	f340 8490 	ble.w	40225e <_vfiprintf_r+0xc02>
  40193e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401940:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401942:	4ec4      	ldr	r6, [pc, #784]	; (401c54 <_vfiprintf_r+0x5f8>)
  401944:	46d6      	mov	lr, sl
  401946:	2710      	movs	r7, #16
  401948:	46a2      	mov	sl, r4
  40194a:	4619      	mov	r1, r3
  40194c:	9c06      	ldr	r4, [sp, #24]
  40194e:	e007      	b.n	401960 <_vfiprintf_r+0x304>
  401950:	f101 0c02 	add.w	ip, r1, #2
  401954:	f10e 0e08 	add.w	lr, lr, #8
  401958:	4601      	mov	r1, r0
  40195a:	3d10      	subs	r5, #16
  40195c:	2d10      	cmp	r5, #16
  40195e:	dd11      	ble.n	401984 <_vfiprintf_r+0x328>
  401960:	1c48      	adds	r0, r1, #1
  401962:	3210      	adds	r2, #16
  401964:	2807      	cmp	r0, #7
  401966:	9211      	str	r2, [sp, #68]	; 0x44
  401968:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40196c:	9010      	str	r0, [sp, #64]	; 0x40
  40196e:	ddef      	ble.n	401950 <_vfiprintf_r+0x2f4>
  401970:	2a00      	cmp	r2, #0
  401972:	f040 81e4 	bne.w	401d3e <_vfiprintf_r+0x6e2>
  401976:	3d10      	subs	r5, #16
  401978:	2d10      	cmp	r5, #16
  40197a:	4611      	mov	r1, r2
  40197c:	f04f 0c01 	mov.w	ip, #1
  401980:	46ce      	mov	lr, r9
  401982:	dced      	bgt.n	401960 <_vfiprintf_r+0x304>
  401984:	4654      	mov	r4, sl
  401986:	4661      	mov	r1, ip
  401988:	46f2      	mov	sl, lr
  40198a:	442a      	add	r2, r5
  40198c:	2907      	cmp	r1, #7
  40198e:	9211      	str	r2, [sp, #68]	; 0x44
  401990:	f8ca 6000 	str.w	r6, [sl]
  401994:	f8ca 5004 	str.w	r5, [sl, #4]
  401998:	9110      	str	r1, [sp, #64]	; 0x40
  40199a:	f300 82ec 	bgt.w	401f76 <_vfiprintf_r+0x91a>
  40199e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4019a2:	f10a 0a08 	add.w	sl, sl, #8
  4019a6:	1c48      	adds	r0, r1, #1
  4019a8:	2d00      	cmp	r5, #0
  4019aa:	f040 81de 	bne.w	401d6a <_vfiprintf_r+0x70e>
  4019ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4019b0:	2b00      	cmp	r3, #0
  4019b2:	f000 81f8 	beq.w	401da6 <_vfiprintf_r+0x74a>
  4019b6:	3202      	adds	r2, #2
  4019b8:	a90e      	add	r1, sp, #56	; 0x38
  4019ba:	2302      	movs	r3, #2
  4019bc:	2807      	cmp	r0, #7
  4019be:	9211      	str	r2, [sp, #68]	; 0x44
  4019c0:	9010      	str	r0, [sp, #64]	; 0x40
  4019c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4019c6:	f340 81ea 	ble.w	401d9e <_vfiprintf_r+0x742>
  4019ca:	2a00      	cmp	r2, #0
  4019cc:	f040 838c 	bne.w	4020e8 <_vfiprintf_r+0xa8c>
  4019d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4019d2:	2b80      	cmp	r3, #128	; 0x80
  4019d4:	f04f 0001 	mov.w	r0, #1
  4019d8:	4611      	mov	r1, r2
  4019da:	46ca      	mov	sl, r9
  4019dc:	f040 81e7 	bne.w	401dae <_vfiprintf_r+0x752>
  4019e0:	9b08      	ldr	r3, [sp, #32]
  4019e2:	9d01      	ldr	r5, [sp, #4]
  4019e4:	1b5e      	subs	r6, r3, r5
  4019e6:	2e00      	cmp	r6, #0
  4019e8:	f340 81e1 	ble.w	401dae <_vfiprintf_r+0x752>
  4019ec:	2e10      	cmp	r6, #16
  4019ee:	4d9a      	ldr	r5, [pc, #616]	; (401c58 <_vfiprintf_r+0x5fc>)
  4019f0:	f340 8450 	ble.w	402294 <_vfiprintf_r+0xc38>
  4019f4:	46d4      	mov	ip, sl
  4019f6:	2710      	movs	r7, #16
  4019f8:	46a2      	mov	sl, r4
  4019fa:	9c06      	ldr	r4, [sp, #24]
  4019fc:	e007      	b.n	401a0e <_vfiprintf_r+0x3b2>
  4019fe:	f101 0e02 	add.w	lr, r1, #2
  401a02:	f10c 0c08 	add.w	ip, ip, #8
  401a06:	4601      	mov	r1, r0
  401a08:	3e10      	subs	r6, #16
  401a0a:	2e10      	cmp	r6, #16
  401a0c:	dd11      	ble.n	401a32 <_vfiprintf_r+0x3d6>
  401a0e:	1c48      	adds	r0, r1, #1
  401a10:	3210      	adds	r2, #16
  401a12:	2807      	cmp	r0, #7
  401a14:	9211      	str	r2, [sp, #68]	; 0x44
  401a16:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401a1a:	9010      	str	r0, [sp, #64]	; 0x40
  401a1c:	ddef      	ble.n	4019fe <_vfiprintf_r+0x3a2>
  401a1e:	2a00      	cmp	r2, #0
  401a20:	f040 829d 	bne.w	401f5e <_vfiprintf_r+0x902>
  401a24:	3e10      	subs	r6, #16
  401a26:	2e10      	cmp	r6, #16
  401a28:	f04f 0e01 	mov.w	lr, #1
  401a2c:	4611      	mov	r1, r2
  401a2e:	46cc      	mov	ip, r9
  401a30:	dced      	bgt.n	401a0e <_vfiprintf_r+0x3b2>
  401a32:	4654      	mov	r4, sl
  401a34:	46e2      	mov	sl, ip
  401a36:	4432      	add	r2, r6
  401a38:	f1be 0f07 	cmp.w	lr, #7
  401a3c:	9211      	str	r2, [sp, #68]	; 0x44
  401a3e:	e88a 0060 	stmia.w	sl, {r5, r6}
  401a42:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401a46:	f300 8369 	bgt.w	40211c <_vfiprintf_r+0xac0>
  401a4a:	f10a 0a08 	add.w	sl, sl, #8
  401a4e:	f10e 0001 	add.w	r0, lr, #1
  401a52:	4671      	mov	r1, lr
  401a54:	e1ab      	b.n	401dae <_vfiprintf_r+0x752>
  401a56:	9608      	str	r6, [sp, #32]
  401a58:	f013 0220 	ands.w	r2, r3, #32
  401a5c:	f040 838c 	bne.w	402178 <_vfiprintf_r+0xb1c>
  401a60:	f013 0110 	ands.w	r1, r3, #16
  401a64:	f040 831a 	bne.w	40209c <_vfiprintf_r+0xa40>
  401a68:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401a6c:	f000 8316 	beq.w	40209c <_vfiprintf_r+0xa40>
  401a70:	9807      	ldr	r0, [sp, #28]
  401a72:	460a      	mov	r2, r1
  401a74:	4601      	mov	r1, r0
  401a76:	3104      	adds	r1, #4
  401a78:	8806      	ldrh	r6, [r0, #0]
  401a7a:	9107      	str	r1, [sp, #28]
  401a7c:	2700      	movs	r7, #0
  401a7e:	e720      	b.n	4018c2 <_vfiprintf_r+0x266>
  401a80:	9608      	str	r6, [sp, #32]
  401a82:	f043 0310 	orr.w	r3, r3, #16
  401a86:	e7e7      	b.n	401a58 <_vfiprintf_r+0x3fc>
  401a88:	9608      	str	r6, [sp, #32]
  401a8a:	f043 0310 	orr.w	r3, r3, #16
  401a8e:	e708      	b.n	4018a2 <_vfiprintf_r+0x246>
  401a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a94:	f898 2000 	ldrb.w	r2, [r8]
  401a98:	e652      	b.n	401740 <_vfiprintf_r+0xe4>
  401a9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401a9e:	2600      	movs	r6, #0
  401aa0:	f818 2b01 	ldrb.w	r2, [r8], #1
  401aa4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401aa8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  401aac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401ab0:	2909      	cmp	r1, #9
  401ab2:	d9f5      	bls.n	401aa0 <_vfiprintf_r+0x444>
  401ab4:	e646      	b.n	401744 <_vfiprintf_r+0xe8>
  401ab6:	9608      	str	r6, [sp, #32]
  401ab8:	2800      	cmp	r0, #0
  401aba:	f040 8408 	bne.w	4022ce <_vfiprintf_r+0xc72>
  401abe:	f043 0310 	orr.w	r3, r3, #16
  401ac2:	069e      	lsls	r6, r3, #26
  401ac4:	f100 834c 	bmi.w	402160 <_vfiprintf_r+0xb04>
  401ac8:	06dd      	lsls	r5, r3, #27
  401aca:	f100 82f3 	bmi.w	4020b4 <_vfiprintf_r+0xa58>
  401ace:	0658      	lsls	r0, r3, #25
  401ad0:	f140 82f0 	bpl.w	4020b4 <_vfiprintf_r+0xa58>
  401ad4:	9d07      	ldr	r5, [sp, #28]
  401ad6:	f9b5 6000 	ldrsh.w	r6, [r5]
  401ada:	462a      	mov	r2, r5
  401adc:	17f7      	asrs	r7, r6, #31
  401ade:	3204      	adds	r2, #4
  401ae0:	4630      	mov	r0, r6
  401ae2:	4639      	mov	r1, r7
  401ae4:	9207      	str	r2, [sp, #28]
  401ae6:	2800      	cmp	r0, #0
  401ae8:	f171 0200 	sbcs.w	r2, r1, #0
  401aec:	f2c0 835d 	blt.w	4021aa <_vfiprintf_r+0xb4e>
  401af0:	1c61      	adds	r1, r4, #1
  401af2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401af6:	f04f 0201 	mov.w	r2, #1
  401afa:	f47f aeea 	bne.w	4018d2 <_vfiprintf_r+0x276>
  401afe:	ea56 0107 	orrs.w	r1, r6, r7
  401b02:	f000 824d 	beq.w	401fa0 <_vfiprintf_r+0x944>
  401b06:	9302      	str	r3, [sp, #8]
  401b08:	2a01      	cmp	r2, #1
  401b0a:	f000 828c 	beq.w	402026 <_vfiprintf_r+0x9ca>
  401b0e:	2a02      	cmp	r2, #2
  401b10:	f040 825c 	bne.w	401fcc <_vfiprintf_r+0x970>
  401b14:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401b16:	46cb      	mov	fp, r9
  401b18:	0933      	lsrs	r3, r6, #4
  401b1a:	f006 010f 	and.w	r1, r6, #15
  401b1e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401b22:	093a      	lsrs	r2, r7, #4
  401b24:	461e      	mov	r6, r3
  401b26:	4617      	mov	r7, r2
  401b28:	5c43      	ldrb	r3, [r0, r1]
  401b2a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  401b2e:	ea56 0307 	orrs.w	r3, r6, r7
  401b32:	d1f1      	bne.n	401b18 <_vfiprintf_r+0x4bc>
  401b34:	eba9 030b 	sub.w	r3, r9, fp
  401b38:	9305      	str	r3, [sp, #20]
  401b3a:	e6e1      	b.n	401900 <_vfiprintf_r+0x2a4>
  401b3c:	2800      	cmp	r0, #0
  401b3e:	f040 83c0 	bne.w	4022c2 <_vfiprintf_r+0xc66>
  401b42:	0699      	lsls	r1, r3, #26
  401b44:	f100 8367 	bmi.w	402216 <_vfiprintf_r+0xbba>
  401b48:	06da      	lsls	r2, r3, #27
  401b4a:	f100 80f1 	bmi.w	401d30 <_vfiprintf_r+0x6d4>
  401b4e:	065b      	lsls	r3, r3, #25
  401b50:	f140 80ee 	bpl.w	401d30 <_vfiprintf_r+0x6d4>
  401b54:	9a07      	ldr	r2, [sp, #28]
  401b56:	6813      	ldr	r3, [r2, #0]
  401b58:	3204      	adds	r2, #4
  401b5a:	9207      	str	r2, [sp, #28]
  401b5c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401b60:	801a      	strh	r2, [r3, #0]
  401b62:	e5b8      	b.n	4016d6 <_vfiprintf_r+0x7a>
  401b64:	9807      	ldr	r0, [sp, #28]
  401b66:	4a3d      	ldr	r2, [pc, #244]	; (401c5c <_vfiprintf_r+0x600>)
  401b68:	9608      	str	r6, [sp, #32]
  401b6a:	920b      	str	r2, [sp, #44]	; 0x2c
  401b6c:	6806      	ldr	r6, [r0, #0]
  401b6e:	2278      	movs	r2, #120	; 0x78
  401b70:	2130      	movs	r1, #48	; 0x30
  401b72:	3004      	adds	r0, #4
  401b74:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401b78:	f043 0302 	orr.w	r3, r3, #2
  401b7c:	9007      	str	r0, [sp, #28]
  401b7e:	2700      	movs	r7, #0
  401b80:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401b84:	2202      	movs	r2, #2
  401b86:	e69c      	b.n	4018c2 <_vfiprintf_r+0x266>
  401b88:	9608      	str	r6, [sp, #32]
  401b8a:	2800      	cmp	r0, #0
  401b8c:	d099      	beq.n	401ac2 <_vfiprintf_r+0x466>
  401b8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401b92:	e796      	b.n	401ac2 <_vfiprintf_r+0x466>
  401b94:	f898 2000 	ldrb.w	r2, [r8]
  401b98:	2d00      	cmp	r5, #0
  401b9a:	f47f add1 	bne.w	401740 <_vfiprintf_r+0xe4>
  401b9e:	2001      	movs	r0, #1
  401ba0:	2520      	movs	r5, #32
  401ba2:	e5cd      	b.n	401740 <_vfiprintf_r+0xe4>
  401ba4:	f043 0301 	orr.w	r3, r3, #1
  401ba8:	f898 2000 	ldrb.w	r2, [r8]
  401bac:	e5c8      	b.n	401740 <_vfiprintf_r+0xe4>
  401bae:	9608      	str	r6, [sp, #32]
  401bb0:	2800      	cmp	r0, #0
  401bb2:	f040 8393 	bne.w	4022dc <_vfiprintf_r+0xc80>
  401bb6:	4929      	ldr	r1, [pc, #164]	; (401c5c <_vfiprintf_r+0x600>)
  401bb8:	910b      	str	r1, [sp, #44]	; 0x2c
  401bba:	069f      	lsls	r7, r3, #26
  401bbc:	f100 82e8 	bmi.w	402190 <_vfiprintf_r+0xb34>
  401bc0:	9807      	ldr	r0, [sp, #28]
  401bc2:	06de      	lsls	r6, r3, #27
  401bc4:	4601      	mov	r1, r0
  401bc6:	f100 8270 	bmi.w	4020aa <_vfiprintf_r+0xa4e>
  401bca:	065d      	lsls	r5, r3, #25
  401bcc:	f140 826d 	bpl.w	4020aa <_vfiprintf_r+0xa4e>
  401bd0:	3104      	adds	r1, #4
  401bd2:	8806      	ldrh	r6, [r0, #0]
  401bd4:	9107      	str	r1, [sp, #28]
  401bd6:	2700      	movs	r7, #0
  401bd8:	07d8      	lsls	r0, r3, #31
  401bda:	f140 8222 	bpl.w	402022 <_vfiprintf_r+0x9c6>
  401bde:	ea56 0107 	orrs.w	r1, r6, r7
  401be2:	f000 821e 	beq.w	402022 <_vfiprintf_r+0x9c6>
  401be6:	2130      	movs	r1, #48	; 0x30
  401be8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401bec:	f043 0302 	orr.w	r3, r3, #2
  401bf0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401bf4:	2202      	movs	r2, #2
  401bf6:	e664      	b.n	4018c2 <_vfiprintf_r+0x266>
  401bf8:	9608      	str	r6, [sp, #32]
  401bfa:	2800      	cmp	r0, #0
  401bfc:	f040 836b 	bne.w	4022d6 <_vfiprintf_r+0xc7a>
  401c00:	4917      	ldr	r1, [pc, #92]	; (401c60 <_vfiprintf_r+0x604>)
  401c02:	910b      	str	r1, [sp, #44]	; 0x2c
  401c04:	e7d9      	b.n	401bba <_vfiprintf_r+0x55e>
  401c06:	9907      	ldr	r1, [sp, #28]
  401c08:	9608      	str	r6, [sp, #32]
  401c0a:	680a      	ldr	r2, [r1, #0]
  401c0c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401c10:	f04f 0000 	mov.w	r0, #0
  401c14:	460a      	mov	r2, r1
  401c16:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401c1a:	3204      	adds	r2, #4
  401c1c:	2001      	movs	r0, #1
  401c1e:	9001      	str	r0, [sp, #4]
  401c20:	9207      	str	r2, [sp, #28]
  401c22:	9005      	str	r0, [sp, #20]
  401c24:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401c28:	9302      	str	r3, [sp, #8]
  401c2a:	2400      	movs	r4, #0
  401c2c:	e670      	b.n	401910 <_vfiprintf_r+0x2b4>
  401c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401c32:	f898 2000 	ldrb.w	r2, [r8]
  401c36:	e583      	b.n	401740 <_vfiprintf_r+0xe4>
  401c38:	f898 2000 	ldrb.w	r2, [r8]
  401c3c:	2a6c      	cmp	r2, #108	; 0x6c
  401c3e:	bf03      	ittte	eq
  401c40:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401c44:	f043 0320 	orreq.w	r3, r3, #32
  401c48:	f108 0801 	addeq.w	r8, r8, #1
  401c4c:	f043 0310 	orrne.w	r3, r3, #16
  401c50:	e576      	b.n	401740 <_vfiprintf_r+0xe4>
  401c52:	bf00      	nop
  401c54:	0040425c 	.word	0x0040425c
  401c58:	0040426c 	.word	0x0040426c
  401c5c:	00404240 	.word	0x00404240
  401c60:	0040422c 	.word	0x0040422c
  401c64:	9907      	ldr	r1, [sp, #28]
  401c66:	680e      	ldr	r6, [r1, #0]
  401c68:	460a      	mov	r2, r1
  401c6a:	2e00      	cmp	r6, #0
  401c6c:	f102 0204 	add.w	r2, r2, #4
  401c70:	f6ff ae0f 	blt.w	401892 <_vfiprintf_r+0x236>
  401c74:	9207      	str	r2, [sp, #28]
  401c76:	f898 2000 	ldrb.w	r2, [r8]
  401c7a:	e561      	b.n	401740 <_vfiprintf_r+0xe4>
  401c7c:	f898 2000 	ldrb.w	r2, [r8]
  401c80:	2001      	movs	r0, #1
  401c82:	252b      	movs	r5, #43	; 0x2b
  401c84:	e55c      	b.n	401740 <_vfiprintf_r+0xe4>
  401c86:	9907      	ldr	r1, [sp, #28]
  401c88:	9608      	str	r6, [sp, #32]
  401c8a:	f8d1 b000 	ldr.w	fp, [r1]
  401c8e:	f04f 0200 	mov.w	r2, #0
  401c92:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401c96:	1d0e      	adds	r6, r1, #4
  401c98:	f1bb 0f00 	cmp.w	fp, #0
  401c9c:	f000 82e5 	beq.w	40226a <_vfiprintf_r+0xc0e>
  401ca0:	1c67      	adds	r7, r4, #1
  401ca2:	f000 82c4 	beq.w	40222e <_vfiprintf_r+0xbd2>
  401ca6:	4622      	mov	r2, r4
  401ca8:	2100      	movs	r1, #0
  401caa:	4658      	mov	r0, fp
  401cac:	9301      	str	r3, [sp, #4]
  401cae:	f001 fbd7 	bl	403460 <memchr>
  401cb2:	9b01      	ldr	r3, [sp, #4]
  401cb4:	2800      	cmp	r0, #0
  401cb6:	f000 82e5 	beq.w	402284 <_vfiprintf_r+0xc28>
  401cba:	eba0 020b 	sub.w	r2, r0, fp
  401cbe:	9205      	str	r2, [sp, #20]
  401cc0:	9607      	str	r6, [sp, #28]
  401cc2:	9302      	str	r3, [sp, #8]
  401cc4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401cc8:	2400      	movs	r4, #0
  401cca:	e619      	b.n	401900 <_vfiprintf_r+0x2a4>
  401ccc:	f898 2000 	ldrb.w	r2, [r8]
  401cd0:	2a2a      	cmp	r2, #42	; 0x2a
  401cd2:	f108 0701 	add.w	r7, r8, #1
  401cd6:	f000 82e9 	beq.w	4022ac <_vfiprintf_r+0xc50>
  401cda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401cde:	2909      	cmp	r1, #9
  401ce0:	46b8      	mov	r8, r7
  401ce2:	f04f 0400 	mov.w	r4, #0
  401ce6:	f63f ad2d 	bhi.w	401744 <_vfiprintf_r+0xe8>
  401cea:	f818 2b01 	ldrb.w	r2, [r8], #1
  401cee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401cf2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401cf6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401cfa:	2909      	cmp	r1, #9
  401cfc:	d9f5      	bls.n	401cea <_vfiprintf_r+0x68e>
  401cfe:	e521      	b.n	401744 <_vfiprintf_r+0xe8>
  401d00:	f043 0320 	orr.w	r3, r3, #32
  401d04:	f898 2000 	ldrb.w	r2, [r8]
  401d08:	e51a      	b.n	401740 <_vfiprintf_r+0xe4>
  401d0a:	9608      	str	r6, [sp, #32]
  401d0c:	2800      	cmp	r0, #0
  401d0e:	f040 82db 	bne.w	4022c8 <_vfiprintf_r+0xc6c>
  401d12:	2a00      	cmp	r2, #0
  401d14:	f000 80e7 	beq.w	401ee6 <_vfiprintf_r+0x88a>
  401d18:	2101      	movs	r1, #1
  401d1a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401d1e:	f04f 0200 	mov.w	r2, #0
  401d22:	9101      	str	r1, [sp, #4]
  401d24:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401d28:	9105      	str	r1, [sp, #20]
  401d2a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401d2e:	e77b      	b.n	401c28 <_vfiprintf_r+0x5cc>
  401d30:	9a07      	ldr	r2, [sp, #28]
  401d32:	6813      	ldr	r3, [r2, #0]
  401d34:	3204      	adds	r2, #4
  401d36:	9207      	str	r2, [sp, #28]
  401d38:	9a03      	ldr	r2, [sp, #12]
  401d3a:	601a      	str	r2, [r3, #0]
  401d3c:	e4cb      	b.n	4016d6 <_vfiprintf_r+0x7a>
  401d3e:	aa0f      	add	r2, sp, #60	; 0x3c
  401d40:	9904      	ldr	r1, [sp, #16]
  401d42:	4620      	mov	r0, r4
  401d44:	f7ff fc4a 	bl	4015dc <__sprint_r.part.0>
  401d48:	2800      	cmp	r0, #0
  401d4a:	f040 8139 	bne.w	401fc0 <_vfiprintf_r+0x964>
  401d4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d52:	f101 0c01 	add.w	ip, r1, #1
  401d56:	46ce      	mov	lr, r9
  401d58:	e5ff      	b.n	40195a <_vfiprintf_r+0x2fe>
  401d5a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d5e:	1c48      	adds	r0, r1, #1
  401d60:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401d64:	2d00      	cmp	r5, #0
  401d66:	f43f ae22 	beq.w	4019ae <_vfiprintf_r+0x352>
  401d6a:	3201      	adds	r2, #1
  401d6c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401d70:	2101      	movs	r1, #1
  401d72:	2807      	cmp	r0, #7
  401d74:	9211      	str	r2, [sp, #68]	; 0x44
  401d76:	9010      	str	r0, [sp, #64]	; 0x40
  401d78:	f8ca 5000 	str.w	r5, [sl]
  401d7c:	f8ca 1004 	str.w	r1, [sl, #4]
  401d80:	f340 8108 	ble.w	401f94 <_vfiprintf_r+0x938>
  401d84:	2a00      	cmp	r2, #0
  401d86:	f040 81bc 	bne.w	402102 <_vfiprintf_r+0xaa6>
  401d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d8c:	2b00      	cmp	r3, #0
  401d8e:	f43f ae1f 	beq.w	4019d0 <_vfiprintf_r+0x374>
  401d92:	ab0e      	add	r3, sp, #56	; 0x38
  401d94:	2202      	movs	r2, #2
  401d96:	4608      	mov	r0, r1
  401d98:	931c      	str	r3, [sp, #112]	; 0x70
  401d9a:	921d      	str	r2, [sp, #116]	; 0x74
  401d9c:	46ca      	mov	sl, r9
  401d9e:	4601      	mov	r1, r0
  401da0:	f10a 0a08 	add.w	sl, sl, #8
  401da4:	3001      	adds	r0, #1
  401da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401da8:	2b80      	cmp	r3, #128	; 0x80
  401daa:	f43f ae19 	beq.w	4019e0 <_vfiprintf_r+0x384>
  401dae:	9b05      	ldr	r3, [sp, #20]
  401db0:	1ae4      	subs	r4, r4, r3
  401db2:	2c00      	cmp	r4, #0
  401db4:	dd2e      	ble.n	401e14 <_vfiprintf_r+0x7b8>
  401db6:	2c10      	cmp	r4, #16
  401db8:	4db3      	ldr	r5, [pc, #716]	; (402088 <_vfiprintf_r+0xa2c>)
  401dba:	dd1e      	ble.n	401dfa <_vfiprintf_r+0x79e>
  401dbc:	46d6      	mov	lr, sl
  401dbe:	2610      	movs	r6, #16
  401dc0:	9f06      	ldr	r7, [sp, #24]
  401dc2:	f8dd a010 	ldr.w	sl, [sp, #16]
  401dc6:	e006      	b.n	401dd6 <_vfiprintf_r+0x77a>
  401dc8:	1c88      	adds	r0, r1, #2
  401dca:	f10e 0e08 	add.w	lr, lr, #8
  401dce:	4619      	mov	r1, r3
  401dd0:	3c10      	subs	r4, #16
  401dd2:	2c10      	cmp	r4, #16
  401dd4:	dd10      	ble.n	401df8 <_vfiprintf_r+0x79c>
  401dd6:	1c4b      	adds	r3, r1, #1
  401dd8:	3210      	adds	r2, #16
  401dda:	2b07      	cmp	r3, #7
  401ddc:	9211      	str	r2, [sp, #68]	; 0x44
  401dde:	e88e 0060 	stmia.w	lr, {r5, r6}
  401de2:	9310      	str	r3, [sp, #64]	; 0x40
  401de4:	ddf0      	ble.n	401dc8 <_vfiprintf_r+0x76c>
  401de6:	2a00      	cmp	r2, #0
  401de8:	d165      	bne.n	401eb6 <_vfiprintf_r+0x85a>
  401dea:	3c10      	subs	r4, #16
  401dec:	2c10      	cmp	r4, #16
  401dee:	f04f 0001 	mov.w	r0, #1
  401df2:	4611      	mov	r1, r2
  401df4:	46ce      	mov	lr, r9
  401df6:	dcee      	bgt.n	401dd6 <_vfiprintf_r+0x77a>
  401df8:	46f2      	mov	sl, lr
  401dfa:	4422      	add	r2, r4
  401dfc:	2807      	cmp	r0, #7
  401dfe:	9211      	str	r2, [sp, #68]	; 0x44
  401e00:	f8ca 5000 	str.w	r5, [sl]
  401e04:	f8ca 4004 	str.w	r4, [sl, #4]
  401e08:	9010      	str	r0, [sp, #64]	; 0x40
  401e0a:	f300 8085 	bgt.w	401f18 <_vfiprintf_r+0x8bc>
  401e0e:	f10a 0a08 	add.w	sl, sl, #8
  401e12:	3001      	adds	r0, #1
  401e14:	9905      	ldr	r1, [sp, #20]
  401e16:	f8ca b000 	str.w	fp, [sl]
  401e1a:	440a      	add	r2, r1
  401e1c:	2807      	cmp	r0, #7
  401e1e:	9211      	str	r2, [sp, #68]	; 0x44
  401e20:	f8ca 1004 	str.w	r1, [sl, #4]
  401e24:	9010      	str	r0, [sp, #64]	; 0x40
  401e26:	f340 8082 	ble.w	401f2e <_vfiprintf_r+0x8d2>
  401e2a:	2a00      	cmp	r2, #0
  401e2c:	f040 8118 	bne.w	402060 <_vfiprintf_r+0xa04>
  401e30:	9b02      	ldr	r3, [sp, #8]
  401e32:	9210      	str	r2, [sp, #64]	; 0x40
  401e34:	0758      	lsls	r0, r3, #29
  401e36:	d535      	bpl.n	401ea4 <_vfiprintf_r+0x848>
  401e38:	9b08      	ldr	r3, [sp, #32]
  401e3a:	9901      	ldr	r1, [sp, #4]
  401e3c:	1a5c      	subs	r4, r3, r1
  401e3e:	2c00      	cmp	r4, #0
  401e40:	f340 80e7 	ble.w	402012 <_vfiprintf_r+0x9b6>
  401e44:	46ca      	mov	sl, r9
  401e46:	2c10      	cmp	r4, #16
  401e48:	f340 8218 	ble.w	40227c <_vfiprintf_r+0xc20>
  401e4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e4e:	4e8f      	ldr	r6, [pc, #572]	; (40208c <_vfiprintf_r+0xa30>)
  401e50:	9f06      	ldr	r7, [sp, #24]
  401e52:	f8dd b010 	ldr.w	fp, [sp, #16]
  401e56:	2510      	movs	r5, #16
  401e58:	e006      	b.n	401e68 <_vfiprintf_r+0x80c>
  401e5a:	1c88      	adds	r0, r1, #2
  401e5c:	f10a 0a08 	add.w	sl, sl, #8
  401e60:	4619      	mov	r1, r3
  401e62:	3c10      	subs	r4, #16
  401e64:	2c10      	cmp	r4, #16
  401e66:	dd11      	ble.n	401e8c <_vfiprintf_r+0x830>
  401e68:	1c4b      	adds	r3, r1, #1
  401e6a:	3210      	adds	r2, #16
  401e6c:	2b07      	cmp	r3, #7
  401e6e:	9211      	str	r2, [sp, #68]	; 0x44
  401e70:	f8ca 6000 	str.w	r6, [sl]
  401e74:	f8ca 5004 	str.w	r5, [sl, #4]
  401e78:	9310      	str	r3, [sp, #64]	; 0x40
  401e7a:	ddee      	ble.n	401e5a <_vfiprintf_r+0x7fe>
  401e7c:	bb42      	cbnz	r2, 401ed0 <_vfiprintf_r+0x874>
  401e7e:	3c10      	subs	r4, #16
  401e80:	2c10      	cmp	r4, #16
  401e82:	f04f 0001 	mov.w	r0, #1
  401e86:	4611      	mov	r1, r2
  401e88:	46ca      	mov	sl, r9
  401e8a:	dced      	bgt.n	401e68 <_vfiprintf_r+0x80c>
  401e8c:	4422      	add	r2, r4
  401e8e:	2807      	cmp	r0, #7
  401e90:	9211      	str	r2, [sp, #68]	; 0x44
  401e92:	f8ca 6000 	str.w	r6, [sl]
  401e96:	f8ca 4004 	str.w	r4, [sl, #4]
  401e9a:	9010      	str	r0, [sp, #64]	; 0x40
  401e9c:	dd51      	ble.n	401f42 <_vfiprintf_r+0x8e6>
  401e9e:	2a00      	cmp	r2, #0
  401ea0:	f040 819b 	bne.w	4021da <_vfiprintf_r+0xb7e>
  401ea4:	9b03      	ldr	r3, [sp, #12]
  401ea6:	9a08      	ldr	r2, [sp, #32]
  401ea8:	9901      	ldr	r1, [sp, #4]
  401eaa:	428a      	cmp	r2, r1
  401eac:	bfac      	ite	ge
  401eae:	189b      	addge	r3, r3, r2
  401eb0:	185b      	addlt	r3, r3, r1
  401eb2:	9303      	str	r3, [sp, #12]
  401eb4:	e04e      	b.n	401f54 <_vfiprintf_r+0x8f8>
  401eb6:	aa0f      	add	r2, sp, #60	; 0x3c
  401eb8:	4651      	mov	r1, sl
  401eba:	4638      	mov	r0, r7
  401ebc:	f7ff fb8e 	bl	4015dc <__sprint_r.part.0>
  401ec0:	2800      	cmp	r0, #0
  401ec2:	f040 813f 	bne.w	402144 <_vfiprintf_r+0xae8>
  401ec6:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ec8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401eca:	1c48      	adds	r0, r1, #1
  401ecc:	46ce      	mov	lr, r9
  401ece:	e77f      	b.n	401dd0 <_vfiprintf_r+0x774>
  401ed0:	aa0f      	add	r2, sp, #60	; 0x3c
  401ed2:	4659      	mov	r1, fp
  401ed4:	4638      	mov	r0, r7
  401ed6:	f7ff fb81 	bl	4015dc <__sprint_r.part.0>
  401eda:	b960      	cbnz	r0, 401ef6 <_vfiprintf_r+0x89a>
  401edc:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ede:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ee0:	1c48      	adds	r0, r1, #1
  401ee2:	46ca      	mov	sl, r9
  401ee4:	e7bd      	b.n	401e62 <_vfiprintf_r+0x806>
  401ee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401ee8:	f8dd b010 	ldr.w	fp, [sp, #16]
  401eec:	2b00      	cmp	r3, #0
  401eee:	f040 81d4 	bne.w	40229a <_vfiprintf_r+0xc3e>
  401ef2:	2300      	movs	r3, #0
  401ef4:	9310      	str	r3, [sp, #64]	; 0x40
  401ef6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401efa:	f013 0f01 	tst.w	r3, #1
  401efe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401f02:	d102      	bne.n	401f0a <_vfiprintf_r+0x8ae>
  401f04:	059a      	lsls	r2, r3, #22
  401f06:	f140 80de 	bpl.w	4020c6 <_vfiprintf_r+0xa6a>
  401f0a:	065b      	lsls	r3, r3, #25
  401f0c:	f53f acb2 	bmi.w	401874 <_vfiprintf_r+0x218>
  401f10:	9803      	ldr	r0, [sp, #12]
  401f12:	b02d      	add	sp, #180	; 0xb4
  401f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f18:	2a00      	cmp	r2, #0
  401f1a:	f040 8106 	bne.w	40212a <_vfiprintf_r+0xace>
  401f1e:	9a05      	ldr	r2, [sp, #20]
  401f20:	921d      	str	r2, [sp, #116]	; 0x74
  401f22:	2301      	movs	r3, #1
  401f24:	9211      	str	r2, [sp, #68]	; 0x44
  401f26:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401f2a:	9310      	str	r3, [sp, #64]	; 0x40
  401f2c:	46ca      	mov	sl, r9
  401f2e:	f10a 0a08 	add.w	sl, sl, #8
  401f32:	9b02      	ldr	r3, [sp, #8]
  401f34:	0759      	lsls	r1, r3, #29
  401f36:	d504      	bpl.n	401f42 <_vfiprintf_r+0x8e6>
  401f38:	9b08      	ldr	r3, [sp, #32]
  401f3a:	9901      	ldr	r1, [sp, #4]
  401f3c:	1a5c      	subs	r4, r3, r1
  401f3e:	2c00      	cmp	r4, #0
  401f40:	dc81      	bgt.n	401e46 <_vfiprintf_r+0x7ea>
  401f42:	9b03      	ldr	r3, [sp, #12]
  401f44:	9908      	ldr	r1, [sp, #32]
  401f46:	9801      	ldr	r0, [sp, #4]
  401f48:	4281      	cmp	r1, r0
  401f4a:	bfac      	ite	ge
  401f4c:	185b      	addge	r3, r3, r1
  401f4e:	181b      	addlt	r3, r3, r0
  401f50:	9303      	str	r3, [sp, #12]
  401f52:	bb72      	cbnz	r2, 401fb2 <_vfiprintf_r+0x956>
  401f54:	2300      	movs	r3, #0
  401f56:	9310      	str	r3, [sp, #64]	; 0x40
  401f58:	46ca      	mov	sl, r9
  401f5a:	f7ff bbbc 	b.w	4016d6 <_vfiprintf_r+0x7a>
  401f5e:	aa0f      	add	r2, sp, #60	; 0x3c
  401f60:	9904      	ldr	r1, [sp, #16]
  401f62:	4620      	mov	r0, r4
  401f64:	f7ff fb3a 	bl	4015dc <__sprint_r.part.0>
  401f68:	bb50      	cbnz	r0, 401fc0 <_vfiprintf_r+0x964>
  401f6a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f6e:	f101 0e01 	add.w	lr, r1, #1
  401f72:	46cc      	mov	ip, r9
  401f74:	e548      	b.n	401a08 <_vfiprintf_r+0x3ac>
  401f76:	2a00      	cmp	r2, #0
  401f78:	f040 8140 	bne.w	4021fc <_vfiprintf_r+0xba0>
  401f7c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401f80:	2900      	cmp	r1, #0
  401f82:	f000 811b 	beq.w	4021bc <_vfiprintf_r+0xb60>
  401f86:	2201      	movs	r2, #1
  401f88:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401f8c:	4610      	mov	r0, r2
  401f8e:	921d      	str	r2, [sp, #116]	; 0x74
  401f90:	911c      	str	r1, [sp, #112]	; 0x70
  401f92:	46ca      	mov	sl, r9
  401f94:	4601      	mov	r1, r0
  401f96:	f10a 0a08 	add.w	sl, sl, #8
  401f9a:	3001      	adds	r0, #1
  401f9c:	e507      	b.n	4019ae <_vfiprintf_r+0x352>
  401f9e:	9b02      	ldr	r3, [sp, #8]
  401fa0:	2a01      	cmp	r2, #1
  401fa2:	f000 8098 	beq.w	4020d6 <_vfiprintf_r+0xa7a>
  401fa6:	2a02      	cmp	r2, #2
  401fa8:	d10d      	bne.n	401fc6 <_vfiprintf_r+0x96a>
  401faa:	9302      	str	r3, [sp, #8]
  401fac:	2600      	movs	r6, #0
  401fae:	2700      	movs	r7, #0
  401fb0:	e5b0      	b.n	401b14 <_vfiprintf_r+0x4b8>
  401fb2:	aa0f      	add	r2, sp, #60	; 0x3c
  401fb4:	9904      	ldr	r1, [sp, #16]
  401fb6:	9806      	ldr	r0, [sp, #24]
  401fb8:	f7ff fb10 	bl	4015dc <__sprint_r.part.0>
  401fbc:	2800      	cmp	r0, #0
  401fbe:	d0c9      	beq.n	401f54 <_vfiprintf_r+0x8f8>
  401fc0:	f8dd b010 	ldr.w	fp, [sp, #16]
  401fc4:	e797      	b.n	401ef6 <_vfiprintf_r+0x89a>
  401fc6:	9302      	str	r3, [sp, #8]
  401fc8:	2600      	movs	r6, #0
  401fca:	2700      	movs	r7, #0
  401fcc:	4649      	mov	r1, r9
  401fce:	e000      	b.n	401fd2 <_vfiprintf_r+0x976>
  401fd0:	4659      	mov	r1, fp
  401fd2:	08f2      	lsrs	r2, r6, #3
  401fd4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401fd8:	08f8      	lsrs	r0, r7, #3
  401fda:	f006 0307 	and.w	r3, r6, #7
  401fde:	4607      	mov	r7, r0
  401fe0:	4616      	mov	r6, r2
  401fe2:	3330      	adds	r3, #48	; 0x30
  401fe4:	ea56 0207 	orrs.w	r2, r6, r7
  401fe8:	f801 3c01 	strb.w	r3, [r1, #-1]
  401fec:	f101 3bff 	add.w	fp, r1, #4294967295
  401ff0:	d1ee      	bne.n	401fd0 <_vfiprintf_r+0x974>
  401ff2:	9a02      	ldr	r2, [sp, #8]
  401ff4:	07d6      	lsls	r6, r2, #31
  401ff6:	f57f ad9d 	bpl.w	401b34 <_vfiprintf_r+0x4d8>
  401ffa:	2b30      	cmp	r3, #48	; 0x30
  401ffc:	f43f ad9a 	beq.w	401b34 <_vfiprintf_r+0x4d8>
  402000:	3902      	subs	r1, #2
  402002:	2330      	movs	r3, #48	; 0x30
  402004:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402008:	eba9 0301 	sub.w	r3, r9, r1
  40200c:	9305      	str	r3, [sp, #20]
  40200e:	468b      	mov	fp, r1
  402010:	e476      	b.n	401900 <_vfiprintf_r+0x2a4>
  402012:	9b03      	ldr	r3, [sp, #12]
  402014:	9a08      	ldr	r2, [sp, #32]
  402016:	428a      	cmp	r2, r1
  402018:	bfac      	ite	ge
  40201a:	189b      	addge	r3, r3, r2
  40201c:	185b      	addlt	r3, r3, r1
  40201e:	9303      	str	r3, [sp, #12]
  402020:	e798      	b.n	401f54 <_vfiprintf_r+0x8f8>
  402022:	2202      	movs	r2, #2
  402024:	e44d      	b.n	4018c2 <_vfiprintf_r+0x266>
  402026:	2f00      	cmp	r7, #0
  402028:	bf08      	it	eq
  40202a:	2e0a      	cmpeq	r6, #10
  40202c:	d352      	bcc.n	4020d4 <_vfiprintf_r+0xa78>
  40202e:	46cb      	mov	fp, r9
  402030:	4630      	mov	r0, r6
  402032:	4639      	mov	r1, r7
  402034:	220a      	movs	r2, #10
  402036:	2300      	movs	r3, #0
  402038:	f001 ff36 	bl	403ea8 <__aeabi_uldivmod>
  40203c:	3230      	adds	r2, #48	; 0x30
  40203e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  402042:	4630      	mov	r0, r6
  402044:	4639      	mov	r1, r7
  402046:	2300      	movs	r3, #0
  402048:	220a      	movs	r2, #10
  40204a:	f001 ff2d 	bl	403ea8 <__aeabi_uldivmod>
  40204e:	4606      	mov	r6, r0
  402050:	460f      	mov	r7, r1
  402052:	ea56 0307 	orrs.w	r3, r6, r7
  402056:	d1eb      	bne.n	402030 <_vfiprintf_r+0x9d4>
  402058:	e56c      	b.n	401b34 <_vfiprintf_r+0x4d8>
  40205a:	9405      	str	r4, [sp, #20]
  40205c:	46cb      	mov	fp, r9
  40205e:	e44f      	b.n	401900 <_vfiprintf_r+0x2a4>
  402060:	aa0f      	add	r2, sp, #60	; 0x3c
  402062:	9904      	ldr	r1, [sp, #16]
  402064:	9806      	ldr	r0, [sp, #24]
  402066:	f7ff fab9 	bl	4015dc <__sprint_r.part.0>
  40206a:	2800      	cmp	r0, #0
  40206c:	d1a8      	bne.n	401fc0 <_vfiprintf_r+0x964>
  40206e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402070:	46ca      	mov	sl, r9
  402072:	e75e      	b.n	401f32 <_vfiprintf_r+0x8d6>
  402074:	aa0f      	add	r2, sp, #60	; 0x3c
  402076:	9904      	ldr	r1, [sp, #16]
  402078:	9806      	ldr	r0, [sp, #24]
  40207a:	f7ff faaf 	bl	4015dc <__sprint_r.part.0>
  40207e:	2800      	cmp	r0, #0
  402080:	d19e      	bne.n	401fc0 <_vfiprintf_r+0x964>
  402082:	46ca      	mov	sl, r9
  402084:	f7ff bbc0 	b.w	401808 <_vfiprintf_r+0x1ac>
  402088:	0040426c 	.word	0x0040426c
  40208c:	0040425c 	.word	0x0040425c
  402090:	3104      	adds	r1, #4
  402092:	6816      	ldr	r6, [r2, #0]
  402094:	9107      	str	r1, [sp, #28]
  402096:	2201      	movs	r2, #1
  402098:	2700      	movs	r7, #0
  40209a:	e412      	b.n	4018c2 <_vfiprintf_r+0x266>
  40209c:	9807      	ldr	r0, [sp, #28]
  40209e:	4601      	mov	r1, r0
  4020a0:	3104      	adds	r1, #4
  4020a2:	6806      	ldr	r6, [r0, #0]
  4020a4:	9107      	str	r1, [sp, #28]
  4020a6:	2700      	movs	r7, #0
  4020a8:	e40b      	b.n	4018c2 <_vfiprintf_r+0x266>
  4020aa:	680e      	ldr	r6, [r1, #0]
  4020ac:	3104      	adds	r1, #4
  4020ae:	9107      	str	r1, [sp, #28]
  4020b0:	2700      	movs	r7, #0
  4020b2:	e591      	b.n	401bd8 <_vfiprintf_r+0x57c>
  4020b4:	9907      	ldr	r1, [sp, #28]
  4020b6:	680e      	ldr	r6, [r1, #0]
  4020b8:	460a      	mov	r2, r1
  4020ba:	17f7      	asrs	r7, r6, #31
  4020bc:	3204      	adds	r2, #4
  4020be:	9207      	str	r2, [sp, #28]
  4020c0:	4630      	mov	r0, r6
  4020c2:	4639      	mov	r1, r7
  4020c4:	e50f      	b.n	401ae6 <_vfiprintf_r+0x48a>
  4020c6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4020ca:	f000 fe7f 	bl	402dcc <__retarget_lock_release_recursive>
  4020ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4020d2:	e71a      	b.n	401f0a <_vfiprintf_r+0x8ae>
  4020d4:	9b02      	ldr	r3, [sp, #8]
  4020d6:	9302      	str	r3, [sp, #8]
  4020d8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4020dc:	3630      	adds	r6, #48	; 0x30
  4020de:	2301      	movs	r3, #1
  4020e0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4020e4:	9305      	str	r3, [sp, #20]
  4020e6:	e40b      	b.n	401900 <_vfiprintf_r+0x2a4>
  4020e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4020ea:	9904      	ldr	r1, [sp, #16]
  4020ec:	9806      	ldr	r0, [sp, #24]
  4020ee:	f7ff fa75 	bl	4015dc <__sprint_r.part.0>
  4020f2:	2800      	cmp	r0, #0
  4020f4:	f47f af64 	bne.w	401fc0 <_vfiprintf_r+0x964>
  4020f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020fc:	1c48      	adds	r0, r1, #1
  4020fe:	46ca      	mov	sl, r9
  402100:	e651      	b.n	401da6 <_vfiprintf_r+0x74a>
  402102:	aa0f      	add	r2, sp, #60	; 0x3c
  402104:	9904      	ldr	r1, [sp, #16]
  402106:	9806      	ldr	r0, [sp, #24]
  402108:	f7ff fa68 	bl	4015dc <__sprint_r.part.0>
  40210c:	2800      	cmp	r0, #0
  40210e:	f47f af57 	bne.w	401fc0 <_vfiprintf_r+0x964>
  402112:	9910      	ldr	r1, [sp, #64]	; 0x40
  402114:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402116:	1c48      	adds	r0, r1, #1
  402118:	46ca      	mov	sl, r9
  40211a:	e448      	b.n	4019ae <_vfiprintf_r+0x352>
  40211c:	2a00      	cmp	r2, #0
  40211e:	f040 8091 	bne.w	402244 <_vfiprintf_r+0xbe8>
  402122:	2001      	movs	r0, #1
  402124:	4611      	mov	r1, r2
  402126:	46ca      	mov	sl, r9
  402128:	e641      	b.n	401dae <_vfiprintf_r+0x752>
  40212a:	aa0f      	add	r2, sp, #60	; 0x3c
  40212c:	9904      	ldr	r1, [sp, #16]
  40212e:	9806      	ldr	r0, [sp, #24]
  402130:	f7ff fa54 	bl	4015dc <__sprint_r.part.0>
  402134:	2800      	cmp	r0, #0
  402136:	f47f af43 	bne.w	401fc0 <_vfiprintf_r+0x964>
  40213a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40213c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40213e:	3001      	adds	r0, #1
  402140:	46ca      	mov	sl, r9
  402142:	e667      	b.n	401e14 <_vfiprintf_r+0x7b8>
  402144:	46d3      	mov	fp, sl
  402146:	e6d6      	b.n	401ef6 <_vfiprintf_r+0x89a>
  402148:	9e07      	ldr	r6, [sp, #28]
  40214a:	3607      	adds	r6, #7
  40214c:	f026 0207 	bic.w	r2, r6, #7
  402150:	f102 0108 	add.w	r1, r2, #8
  402154:	e9d2 6700 	ldrd	r6, r7, [r2]
  402158:	9107      	str	r1, [sp, #28]
  40215a:	2201      	movs	r2, #1
  40215c:	f7ff bbb1 	b.w	4018c2 <_vfiprintf_r+0x266>
  402160:	9e07      	ldr	r6, [sp, #28]
  402162:	3607      	adds	r6, #7
  402164:	f026 0607 	bic.w	r6, r6, #7
  402168:	e9d6 0100 	ldrd	r0, r1, [r6]
  40216c:	f106 0208 	add.w	r2, r6, #8
  402170:	9207      	str	r2, [sp, #28]
  402172:	4606      	mov	r6, r0
  402174:	460f      	mov	r7, r1
  402176:	e4b6      	b.n	401ae6 <_vfiprintf_r+0x48a>
  402178:	9e07      	ldr	r6, [sp, #28]
  40217a:	3607      	adds	r6, #7
  40217c:	f026 0207 	bic.w	r2, r6, #7
  402180:	f102 0108 	add.w	r1, r2, #8
  402184:	e9d2 6700 	ldrd	r6, r7, [r2]
  402188:	9107      	str	r1, [sp, #28]
  40218a:	2200      	movs	r2, #0
  40218c:	f7ff bb99 	b.w	4018c2 <_vfiprintf_r+0x266>
  402190:	9e07      	ldr	r6, [sp, #28]
  402192:	3607      	adds	r6, #7
  402194:	f026 0107 	bic.w	r1, r6, #7
  402198:	f101 0008 	add.w	r0, r1, #8
  40219c:	9007      	str	r0, [sp, #28]
  40219e:	e9d1 6700 	ldrd	r6, r7, [r1]
  4021a2:	e519      	b.n	401bd8 <_vfiprintf_r+0x57c>
  4021a4:	46cb      	mov	fp, r9
  4021a6:	f7ff bbab 	b.w	401900 <_vfiprintf_r+0x2a4>
  4021aa:	252d      	movs	r5, #45	; 0x2d
  4021ac:	4276      	negs	r6, r6
  4021ae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4021b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4021b6:	2201      	movs	r2, #1
  4021b8:	f7ff bb88 	b.w	4018cc <_vfiprintf_r+0x270>
  4021bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4021be:	b9b3      	cbnz	r3, 4021ee <_vfiprintf_r+0xb92>
  4021c0:	4611      	mov	r1, r2
  4021c2:	2001      	movs	r0, #1
  4021c4:	46ca      	mov	sl, r9
  4021c6:	e5f2      	b.n	401dae <_vfiprintf_r+0x752>
  4021c8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4021cc:	f000 fdfe 	bl	402dcc <__retarget_lock_release_recursive>
  4021d0:	f04f 33ff 	mov.w	r3, #4294967295
  4021d4:	9303      	str	r3, [sp, #12]
  4021d6:	f7ff bb50 	b.w	40187a <_vfiprintf_r+0x21e>
  4021da:	aa0f      	add	r2, sp, #60	; 0x3c
  4021dc:	9904      	ldr	r1, [sp, #16]
  4021de:	9806      	ldr	r0, [sp, #24]
  4021e0:	f7ff f9fc 	bl	4015dc <__sprint_r.part.0>
  4021e4:	2800      	cmp	r0, #0
  4021e6:	f47f aeeb 	bne.w	401fc0 <_vfiprintf_r+0x964>
  4021ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4021ec:	e6a9      	b.n	401f42 <_vfiprintf_r+0x8e6>
  4021ee:	ab0e      	add	r3, sp, #56	; 0x38
  4021f0:	2202      	movs	r2, #2
  4021f2:	931c      	str	r3, [sp, #112]	; 0x70
  4021f4:	921d      	str	r2, [sp, #116]	; 0x74
  4021f6:	2001      	movs	r0, #1
  4021f8:	46ca      	mov	sl, r9
  4021fa:	e5d0      	b.n	401d9e <_vfiprintf_r+0x742>
  4021fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4021fe:	9904      	ldr	r1, [sp, #16]
  402200:	9806      	ldr	r0, [sp, #24]
  402202:	f7ff f9eb 	bl	4015dc <__sprint_r.part.0>
  402206:	2800      	cmp	r0, #0
  402208:	f47f aeda 	bne.w	401fc0 <_vfiprintf_r+0x964>
  40220c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40220e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402210:	1c48      	adds	r0, r1, #1
  402212:	46ca      	mov	sl, r9
  402214:	e5a4      	b.n	401d60 <_vfiprintf_r+0x704>
  402216:	9a07      	ldr	r2, [sp, #28]
  402218:	9903      	ldr	r1, [sp, #12]
  40221a:	6813      	ldr	r3, [r2, #0]
  40221c:	17cd      	asrs	r5, r1, #31
  40221e:	4608      	mov	r0, r1
  402220:	3204      	adds	r2, #4
  402222:	4629      	mov	r1, r5
  402224:	9207      	str	r2, [sp, #28]
  402226:	e9c3 0100 	strd	r0, r1, [r3]
  40222a:	f7ff ba54 	b.w	4016d6 <_vfiprintf_r+0x7a>
  40222e:	4658      	mov	r0, fp
  402230:	9607      	str	r6, [sp, #28]
  402232:	9302      	str	r3, [sp, #8]
  402234:	f7ff f964 	bl	401500 <strlen>
  402238:	2400      	movs	r4, #0
  40223a:	9005      	str	r0, [sp, #20]
  40223c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402240:	f7ff bb5e 	b.w	401900 <_vfiprintf_r+0x2a4>
  402244:	aa0f      	add	r2, sp, #60	; 0x3c
  402246:	9904      	ldr	r1, [sp, #16]
  402248:	9806      	ldr	r0, [sp, #24]
  40224a:	f7ff f9c7 	bl	4015dc <__sprint_r.part.0>
  40224e:	2800      	cmp	r0, #0
  402250:	f47f aeb6 	bne.w	401fc0 <_vfiprintf_r+0x964>
  402254:	9910      	ldr	r1, [sp, #64]	; 0x40
  402256:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402258:	1c48      	adds	r0, r1, #1
  40225a:	46ca      	mov	sl, r9
  40225c:	e5a7      	b.n	401dae <_vfiprintf_r+0x752>
  40225e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402260:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402262:	4e20      	ldr	r6, [pc, #128]	; (4022e4 <_vfiprintf_r+0xc88>)
  402264:	3101      	adds	r1, #1
  402266:	f7ff bb90 	b.w	40198a <_vfiprintf_r+0x32e>
  40226a:	2c06      	cmp	r4, #6
  40226c:	bf28      	it	cs
  40226e:	2406      	movcs	r4, #6
  402270:	9405      	str	r4, [sp, #20]
  402272:	9607      	str	r6, [sp, #28]
  402274:	9401      	str	r4, [sp, #4]
  402276:	f8df b070 	ldr.w	fp, [pc, #112]	; 4022e8 <_vfiprintf_r+0xc8c>
  40227a:	e4d5      	b.n	401c28 <_vfiprintf_r+0x5cc>
  40227c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40227e:	4e19      	ldr	r6, [pc, #100]	; (4022e4 <_vfiprintf_r+0xc88>)
  402280:	3001      	adds	r0, #1
  402282:	e603      	b.n	401e8c <_vfiprintf_r+0x830>
  402284:	9405      	str	r4, [sp, #20]
  402286:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40228a:	9607      	str	r6, [sp, #28]
  40228c:	9302      	str	r3, [sp, #8]
  40228e:	4604      	mov	r4, r0
  402290:	f7ff bb36 	b.w	401900 <_vfiprintf_r+0x2a4>
  402294:	4686      	mov	lr, r0
  402296:	f7ff bbce 	b.w	401a36 <_vfiprintf_r+0x3da>
  40229a:	9806      	ldr	r0, [sp, #24]
  40229c:	aa0f      	add	r2, sp, #60	; 0x3c
  40229e:	4659      	mov	r1, fp
  4022a0:	f7ff f99c 	bl	4015dc <__sprint_r.part.0>
  4022a4:	2800      	cmp	r0, #0
  4022a6:	f43f ae24 	beq.w	401ef2 <_vfiprintf_r+0x896>
  4022aa:	e624      	b.n	401ef6 <_vfiprintf_r+0x89a>
  4022ac:	9907      	ldr	r1, [sp, #28]
  4022ae:	f898 2001 	ldrb.w	r2, [r8, #1]
  4022b2:	680c      	ldr	r4, [r1, #0]
  4022b4:	3104      	adds	r1, #4
  4022b6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4022ba:	46b8      	mov	r8, r7
  4022bc:	9107      	str	r1, [sp, #28]
  4022be:	f7ff ba3f 	b.w	401740 <_vfiprintf_r+0xe4>
  4022c2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4022c6:	e43c      	b.n	401b42 <_vfiprintf_r+0x4e6>
  4022c8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4022cc:	e521      	b.n	401d12 <_vfiprintf_r+0x6b6>
  4022ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4022d2:	f7ff bbf4 	b.w	401abe <_vfiprintf_r+0x462>
  4022d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4022da:	e491      	b.n	401c00 <_vfiprintf_r+0x5a4>
  4022dc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4022e0:	e469      	b.n	401bb6 <_vfiprintf_r+0x55a>
  4022e2:	bf00      	nop
  4022e4:	0040425c 	.word	0x0040425c
  4022e8:	00404254 	.word	0x00404254

004022ec <__sbprintf>:
  4022ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022f0:	460c      	mov	r4, r1
  4022f2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4022f6:	8989      	ldrh	r1, [r1, #12]
  4022f8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4022fa:	89e5      	ldrh	r5, [r4, #14]
  4022fc:	9619      	str	r6, [sp, #100]	; 0x64
  4022fe:	f021 0102 	bic.w	r1, r1, #2
  402302:	4606      	mov	r6, r0
  402304:	69e0      	ldr	r0, [r4, #28]
  402306:	f8ad 100c 	strh.w	r1, [sp, #12]
  40230a:	4617      	mov	r7, r2
  40230c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402310:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402312:	f8ad 500e 	strh.w	r5, [sp, #14]
  402316:	4698      	mov	r8, r3
  402318:	ad1a      	add	r5, sp, #104	; 0x68
  40231a:	2300      	movs	r3, #0
  40231c:	9007      	str	r0, [sp, #28]
  40231e:	a816      	add	r0, sp, #88	; 0x58
  402320:	9209      	str	r2, [sp, #36]	; 0x24
  402322:	9306      	str	r3, [sp, #24]
  402324:	9500      	str	r5, [sp, #0]
  402326:	9504      	str	r5, [sp, #16]
  402328:	9102      	str	r1, [sp, #8]
  40232a:	9105      	str	r1, [sp, #20]
  40232c:	f000 fd48 	bl	402dc0 <__retarget_lock_init_recursive>
  402330:	4643      	mov	r3, r8
  402332:	463a      	mov	r2, r7
  402334:	4669      	mov	r1, sp
  402336:	4630      	mov	r0, r6
  402338:	f7ff f990 	bl	40165c <_vfiprintf_r>
  40233c:	1e05      	subs	r5, r0, #0
  40233e:	db07      	blt.n	402350 <__sbprintf+0x64>
  402340:	4630      	mov	r0, r6
  402342:	4669      	mov	r1, sp
  402344:	f000 f928 	bl	402598 <_fflush_r>
  402348:	2800      	cmp	r0, #0
  40234a:	bf18      	it	ne
  40234c:	f04f 35ff 	movne.w	r5, #4294967295
  402350:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402354:	065b      	lsls	r3, r3, #25
  402356:	d503      	bpl.n	402360 <__sbprintf+0x74>
  402358:	89a3      	ldrh	r3, [r4, #12]
  40235a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40235e:	81a3      	strh	r3, [r4, #12]
  402360:	9816      	ldr	r0, [sp, #88]	; 0x58
  402362:	f000 fd2f 	bl	402dc4 <__retarget_lock_close_recursive>
  402366:	4628      	mov	r0, r5
  402368:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402370 <__swsetup_r>:
  402370:	b538      	push	{r3, r4, r5, lr}
  402372:	4b30      	ldr	r3, [pc, #192]	; (402434 <__swsetup_r+0xc4>)
  402374:	681b      	ldr	r3, [r3, #0]
  402376:	4605      	mov	r5, r0
  402378:	460c      	mov	r4, r1
  40237a:	b113      	cbz	r3, 402382 <__swsetup_r+0x12>
  40237c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40237e:	2a00      	cmp	r2, #0
  402380:	d038      	beq.n	4023f4 <__swsetup_r+0x84>
  402382:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402386:	b293      	uxth	r3, r2
  402388:	0718      	lsls	r0, r3, #28
  40238a:	d50c      	bpl.n	4023a6 <__swsetup_r+0x36>
  40238c:	6920      	ldr	r0, [r4, #16]
  40238e:	b1a8      	cbz	r0, 4023bc <__swsetup_r+0x4c>
  402390:	f013 0201 	ands.w	r2, r3, #1
  402394:	d01e      	beq.n	4023d4 <__swsetup_r+0x64>
  402396:	6963      	ldr	r3, [r4, #20]
  402398:	2200      	movs	r2, #0
  40239a:	425b      	negs	r3, r3
  40239c:	61a3      	str	r3, [r4, #24]
  40239e:	60a2      	str	r2, [r4, #8]
  4023a0:	b1f0      	cbz	r0, 4023e0 <__swsetup_r+0x70>
  4023a2:	2000      	movs	r0, #0
  4023a4:	bd38      	pop	{r3, r4, r5, pc}
  4023a6:	06d9      	lsls	r1, r3, #27
  4023a8:	d53c      	bpl.n	402424 <__swsetup_r+0xb4>
  4023aa:	0758      	lsls	r0, r3, #29
  4023ac:	d426      	bmi.n	4023fc <__swsetup_r+0x8c>
  4023ae:	6920      	ldr	r0, [r4, #16]
  4023b0:	f042 0308 	orr.w	r3, r2, #8
  4023b4:	81a3      	strh	r3, [r4, #12]
  4023b6:	b29b      	uxth	r3, r3
  4023b8:	2800      	cmp	r0, #0
  4023ba:	d1e9      	bne.n	402390 <__swsetup_r+0x20>
  4023bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4023c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4023c4:	d0e4      	beq.n	402390 <__swsetup_r+0x20>
  4023c6:	4628      	mov	r0, r5
  4023c8:	4621      	mov	r1, r4
  4023ca:	f000 fd2f 	bl	402e2c <__smakebuf_r>
  4023ce:	89a3      	ldrh	r3, [r4, #12]
  4023d0:	6920      	ldr	r0, [r4, #16]
  4023d2:	e7dd      	b.n	402390 <__swsetup_r+0x20>
  4023d4:	0799      	lsls	r1, r3, #30
  4023d6:	bf58      	it	pl
  4023d8:	6962      	ldrpl	r2, [r4, #20]
  4023da:	60a2      	str	r2, [r4, #8]
  4023dc:	2800      	cmp	r0, #0
  4023de:	d1e0      	bne.n	4023a2 <__swsetup_r+0x32>
  4023e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023e4:	061a      	lsls	r2, r3, #24
  4023e6:	d5dd      	bpl.n	4023a4 <__swsetup_r+0x34>
  4023e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023ec:	81a3      	strh	r3, [r4, #12]
  4023ee:	f04f 30ff 	mov.w	r0, #4294967295
  4023f2:	bd38      	pop	{r3, r4, r5, pc}
  4023f4:	4618      	mov	r0, r3
  4023f6:	f000 f927 	bl	402648 <__sinit>
  4023fa:	e7c2      	b.n	402382 <__swsetup_r+0x12>
  4023fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4023fe:	b151      	cbz	r1, 402416 <__swsetup_r+0xa6>
  402400:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402404:	4299      	cmp	r1, r3
  402406:	d004      	beq.n	402412 <__swsetup_r+0xa2>
  402408:	4628      	mov	r0, r5
  40240a:	f000 fa43 	bl	402894 <_free_r>
  40240e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402412:	2300      	movs	r3, #0
  402414:	6323      	str	r3, [r4, #48]	; 0x30
  402416:	2300      	movs	r3, #0
  402418:	6920      	ldr	r0, [r4, #16]
  40241a:	6063      	str	r3, [r4, #4]
  40241c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402420:	6020      	str	r0, [r4, #0]
  402422:	e7c5      	b.n	4023b0 <__swsetup_r+0x40>
  402424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402428:	2309      	movs	r3, #9
  40242a:	602b      	str	r3, [r5, #0]
  40242c:	f04f 30ff 	mov.w	r0, #4294967295
  402430:	81a2      	strh	r2, [r4, #12]
  402432:	bd38      	pop	{r3, r4, r5, pc}
  402434:	20000008 	.word	0x20000008

00402438 <register_fini>:
  402438:	4b02      	ldr	r3, [pc, #8]	; (402444 <register_fini+0xc>)
  40243a:	b113      	cbz	r3, 402442 <register_fini+0xa>
  40243c:	4802      	ldr	r0, [pc, #8]	; (402448 <register_fini+0x10>)
  40243e:	f000 b805 	b.w	40244c <atexit>
  402442:	4770      	bx	lr
  402444:	00000000 	.word	0x00000000
  402448:	004026b9 	.word	0x004026b9

0040244c <atexit>:
  40244c:	2300      	movs	r3, #0
  40244e:	4601      	mov	r1, r0
  402450:	461a      	mov	r2, r3
  402452:	4618      	mov	r0, r3
  402454:	f001 bc00 	b.w	403c58 <__register_exitproc>

00402458 <__sflush_r>:
  402458:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40245c:	b29a      	uxth	r2, r3
  40245e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402462:	460d      	mov	r5, r1
  402464:	0711      	lsls	r1, r2, #28
  402466:	4680      	mov	r8, r0
  402468:	d43a      	bmi.n	4024e0 <__sflush_r+0x88>
  40246a:	686a      	ldr	r2, [r5, #4]
  40246c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402470:	2a00      	cmp	r2, #0
  402472:	81ab      	strh	r3, [r5, #12]
  402474:	dd6f      	ble.n	402556 <__sflush_r+0xfe>
  402476:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402478:	2c00      	cmp	r4, #0
  40247a:	d049      	beq.n	402510 <__sflush_r+0xb8>
  40247c:	2200      	movs	r2, #0
  40247e:	b29b      	uxth	r3, r3
  402480:	f8d8 6000 	ldr.w	r6, [r8]
  402484:	f8c8 2000 	str.w	r2, [r8]
  402488:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40248c:	d067      	beq.n	40255e <__sflush_r+0x106>
  40248e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402490:	075f      	lsls	r7, r3, #29
  402492:	d505      	bpl.n	4024a0 <__sflush_r+0x48>
  402494:	6869      	ldr	r1, [r5, #4]
  402496:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402498:	1a52      	subs	r2, r2, r1
  40249a:	b10b      	cbz	r3, 4024a0 <__sflush_r+0x48>
  40249c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40249e:	1ad2      	subs	r2, r2, r3
  4024a0:	2300      	movs	r3, #0
  4024a2:	69e9      	ldr	r1, [r5, #28]
  4024a4:	4640      	mov	r0, r8
  4024a6:	47a0      	blx	r4
  4024a8:	1c44      	adds	r4, r0, #1
  4024aa:	d03c      	beq.n	402526 <__sflush_r+0xce>
  4024ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4024b0:	692a      	ldr	r2, [r5, #16]
  4024b2:	602a      	str	r2, [r5, #0]
  4024b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4024b8:	2200      	movs	r2, #0
  4024ba:	81ab      	strh	r3, [r5, #12]
  4024bc:	04db      	lsls	r3, r3, #19
  4024be:	606a      	str	r2, [r5, #4]
  4024c0:	d447      	bmi.n	402552 <__sflush_r+0xfa>
  4024c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4024c4:	f8c8 6000 	str.w	r6, [r8]
  4024c8:	b311      	cbz	r1, 402510 <__sflush_r+0xb8>
  4024ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4024ce:	4299      	cmp	r1, r3
  4024d0:	d002      	beq.n	4024d8 <__sflush_r+0x80>
  4024d2:	4640      	mov	r0, r8
  4024d4:	f000 f9de 	bl	402894 <_free_r>
  4024d8:	2000      	movs	r0, #0
  4024da:	6328      	str	r0, [r5, #48]	; 0x30
  4024dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024e0:	692e      	ldr	r6, [r5, #16]
  4024e2:	b1ae      	cbz	r6, 402510 <__sflush_r+0xb8>
  4024e4:	682c      	ldr	r4, [r5, #0]
  4024e6:	602e      	str	r6, [r5, #0]
  4024e8:	0791      	lsls	r1, r2, #30
  4024ea:	bf0c      	ite	eq
  4024ec:	696b      	ldreq	r3, [r5, #20]
  4024ee:	2300      	movne	r3, #0
  4024f0:	1ba4      	subs	r4, r4, r6
  4024f2:	60ab      	str	r3, [r5, #8]
  4024f4:	e00a      	b.n	40250c <__sflush_r+0xb4>
  4024f6:	4623      	mov	r3, r4
  4024f8:	4632      	mov	r2, r6
  4024fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4024fc:	69e9      	ldr	r1, [r5, #28]
  4024fe:	4640      	mov	r0, r8
  402500:	47b8      	blx	r7
  402502:	2800      	cmp	r0, #0
  402504:	eba4 0400 	sub.w	r4, r4, r0
  402508:	4406      	add	r6, r0
  40250a:	dd04      	ble.n	402516 <__sflush_r+0xbe>
  40250c:	2c00      	cmp	r4, #0
  40250e:	dcf2      	bgt.n	4024f6 <__sflush_r+0x9e>
  402510:	2000      	movs	r0, #0
  402512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402516:	89ab      	ldrh	r3, [r5, #12]
  402518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40251c:	81ab      	strh	r3, [r5, #12]
  40251e:	f04f 30ff 	mov.w	r0, #4294967295
  402522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402526:	f8d8 4000 	ldr.w	r4, [r8]
  40252a:	2c1d      	cmp	r4, #29
  40252c:	d8f3      	bhi.n	402516 <__sflush_r+0xbe>
  40252e:	4b19      	ldr	r3, [pc, #100]	; (402594 <__sflush_r+0x13c>)
  402530:	40e3      	lsrs	r3, r4
  402532:	43db      	mvns	r3, r3
  402534:	f013 0301 	ands.w	r3, r3, #1
  402538:	d1ed      	bne.n	402516 <__sflush_r+0xbe>
  40253a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40253e:	606b      	str	r3, [r5, #4]
  402540:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402544:	6929      	ldr	r1, [r5, #16]
  402546:	81ab      	strh	r3, [r5, #12]
  402548:	04da      	lsls	r2, r3, #19
  40254a:	6029      	str	r1, [r5, #0]
  40254c:	d5b9      	bpl.n	4024c2 <__sflush_r+0x6a>
  40254e:	2c00      	cmp	r4, #0
  402550:	d1b7      	bne.n	4024c2 <__sflush_r+0x6a>
  402552:	6528      	str	r0, [r5, #80]	; 0x50
  402554:	e7b5      	b.n	4024c2 <__sflush_r+0x6a>
  402556:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402558:	2a00      	cmp	r2, #0
  40255a:	dc8c      	bgt.n	402476 <__sflush_r+0x1e>
  40255c:	e7d8      	b.n	402510 <__sflush_r+0xb8>
  40255e:	2301      	movs	r3, #1
  402560:	69e9      	ldr	r1, [r5, #28]
  402562:	4640      	mov	r0, r8
  402564:	47a0      	blx	r4
  402566:	1c43      	adds	r3, r0, #1
  402568:	4602      	mov	r2, r0
  40256a:	d002      	beq.n	402572 <__sflush_r+0x11a>
  40256c:	89ab      	ldrh	r3, [r5, #12]
  40256e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402570:	e78e      	b.n	402490 <__sflush_r+0x38>
  402572:	f8d8 3000 	ldr.w	r3, [r8]
  402576:	2b00      	cmp	r3, #0
  402578:	d0f8      	beq.n	40256c <__sflush_r+0x114>
  40257a:	2b1d      	cmp	r3, #29
  40257c:	d001      	beq.n	402582 <__sflush_r+0x12a>
  40257e:	2b16      	cmp	r3, #22
  402580:	d102      	bne.n	402588 <__sflush_r+0x130>
  402582:	f8c8 6000 	str.w	r6, [r8]
  402586:	e7c3      	b.n	402510 <__sflush_r+0xb8>
  402588:	89ab      	ldrh	r3, [r5, #12]
  40258a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40258e:	81ab      	strh	r3, [r5, #12]
  402590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402594:	20400001 	.word	0x20400001

00402598 <_fflush_r>:
  402598:	b538      	push	{r3, r4, r5, lr}
  40259a:	460d      	mov	r5, r1
  40259c:	4604      	mov	r4, r0
  40259e:	b108      	cbz	r0, 4025a4 <_fflush_r+0xc>
  4025a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4025a2:	b1bb      	cbz	r3, 4025d4 <_fflush_r+0x3c>
  4025a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4025a8:	b188      	cbz	r0, 4025ce <_fflush_r+0x36>
  4025aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4025ac:	07db      	lsls	r3, r3, #31
  4025ae:	d401      	bmi.n	4025b4 <_fflush_r+0x1c>
  4025b0:	0581      	lsls	r1, r0, #22
  4025b2:	d517      	bpl.n	4025e4 <_fflush_r+0x4c>
  4025b4:	4620      	mov	r0, r4
  4025b6:	4629      	mov	r1, r5
  4025b8:	f7ff ff4e 	bl	402458 <__sflush_r>
  4025bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4025be:	07da      	lsls	r2, r3, #31
  4025c0:	4604      	mov	r4, r0
  4025c2:	d402      	bmi.n	4025ca <_fflush_r+0x32>
  4025c4:	89ab      	ldrh	r3, [r5, #12]
  4025c6:	059b      	lsls	r3, r3, #22
  4025c8:	d507      	bpl.n	4025da <_fflush_r+0x42>
  4025ca:	4620      	mov	r0, r4
  4025cc:	bd38      	pop	{r3, r4, r5, pc}
  4025ce:	4604      	mov	r4, r0
  4025d0:	4620      	mov	r0, r4
  4025d2:	bd38      	pop	{r3, r4, r5, pc}
  4025d4:	f000 f838 	bl	402648 <__sinit>
  4025d8:	e7e4      	b.n	4025a4 <_fflush_r+0xc>
  4025da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4025dc:	f000 fbf6 	bl	402dcc <__retarget_lock_release_recursive>
  4025e0:	4620      	mov	r0, r4
  4025e2:	bd38      	pop	{r3, r4, r5, pc}
  4025e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4025e6:	f000 fbef 	bl	402dc8 <__retarget_lock_acquire_recursive>
  4025ea:	e7e3      	b.n	4025b4 <_fflush_r+0x1c>

004025ec <_cleanup_r>:
  4025ec:	4901      	ldr	r1, [pc, #4]	; (4025f4 <_cleanup_r+0x8>)
  4025ee:	f000 bbaf 	b.w	402d50 <_fwalk_reent>
  4025f2:	bf00      	nop
  4025f4:	00403d41 	.word	0x00403d41

004025f8 <std.isra.0>:
  4025f8:	b510      	push	{r4, lr}
  4025fa:	2300      	movs	r3, #0
  4025fc:	4604      	mov	r4, r0
  4025fe:	8181      	strh	r1, [r0, #12]
  402600:	81c2      	strh	r2, [r0, #14]
  402602:	6003      	str	r3, [r0, #0]
  402604:	6043      	str	r3, [r0, #4]
  402606:	6083      	str	r3, [r0, #8]
  402608:	6643      	str	r3, [r0, #100]	; 0x64
  40260a:	6103      	str	r3, [r0, #16]
  40260c:	6143      	str	r3, [r0, #20]
  40260e:	6183      	str	r3, [r0, #24]
  402610:	4619      	mov	r1, r3
  402612:	2208      	movs	r2, #8
  402614:	305c      	adds	r0, #92	; 0x5c
  402616:	f7fe fde7 	bl	4011e8 <memset>
  40261a:	4807      	ldr	r0, [pc, #28]	; (402638 <std.isra.0+0x40>)
  40261c:	4907      	ldr	r1, [pc, #28]	; (40263c <std.isra.0+0x44>)
  40261e:	4a08      	ldr	r2, [pc, #32]	; (402640 <std.isra.0+0x48>)
  402620:	4b08      	ldr	r3, [pc, #32]	; (402644 <std.isra.0+0x4c>)
  402622:	6220      	str	r0, [r4, #32]
  402624:	61e4      	str	r4, [r4, #28]
  402626:	6261      	str	r1, [r4, #36]	; 0x24
  402628:	62a2      	str	r2, [r4, #40]	; 0x28
  40262a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40262c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402634:	f000 bbc4 	b.w	402dc0 <__retarget_lock_init_recursive>
  402638:	00403a85 	.word	0x00403a85
  40263c:	00403aa9 	.word	0x00403aa9
  402640:	00403ae5 	.word	0x00403ae5
  402644:	00403b05 	.word	0x00403b05

00402648 <__sinit>:
  402648:	b510      	push	{r4, lr}
  40264a:	4604      	mov	r4, r0
  40264c:	4812      	ldr	r0, [pc, #72]	; (402698 <__sinit+0x50>)
  40264e:	f000 fbbb 	bl	402dc8 <__retarget_lock_acquire_recursive>
  402652:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402654:	b9d2      	cbnz	r2, 40268c <__sinit+0x44>
  402656:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40265a:	4810      	ldr	r0, [pc, #64]	; (40269c <__sinit+0x54>)
  40265c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402660:	2103      	movs	r1, #3
  402662:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402666:	63e0      	str	r0, [r4, #60]	; 0x3c
  402668:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40266c:	6860      	ldr	r0, [r4, #4]
  40266e:	2104      	movs	r1, #4
  402670:	f7ff ffc2 	bl	4025f8 <std.isra.0>
  402674:	2201      	movs	r2, #1
  402676:	2109      	movs	r1, #9
  402678:	68a0      	ldr	r0, [r4, #8]
  40267a:	f7ff ffbd 	bl	4025f8 <std.isra.0>
  40267e:	2202      	movs	r2, #2
  402680:	2112      	movs	r1, #18
  402682:	68e0      	ldr	r0, [r4, #12]
  402684:	f7ff ffb8 	bl	4025f8 <std.isra.0>
  402688:	2301      	movs	r3, #1
  40268a:	63a3      	str	r3, [r4, #56]	; 0x38
  40268c:	4802      	ldr	r0, [pc, #8]	; (402698 <__sinit+0x50>)
  40268e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402692:	f000 bb9b 	b.w	402dcc <__retarget_lock_release_recursive>
  402696:	bf00      	nop
  402698:	20008dc8 	.word	0x20008dc8
  40269c:	004025ed 	.word	0x004025ed

004026a0 <__sfp_lock_acquire>:
  4026a0:	4801      	ldr	r0, [pc, #4]	; (4026a8 <__sfp_lock_acquire+0x8>)
  4026a2:	f000 bb91 	b.w	402dc8 <__retarget_lock_acquire_recursive>
  4026a6:	bf00      	nop
  4026a8:	20008ddc 	.word	0x20008ddc

004026ac <__sfp_lock_release>:
  4026ac:	4801      	ldr	r0, [pc, #4]	; (4026b4 <__sfp_lock_release+0x8>)
  4026ae:	f000 bb8d 	b.w	402dcc <__retarget_lock_release_recursive>
  4026b2:	bf00      	nop
  4026b4:	20008ddc 	.word	0x20008ddc

004026b8 <__libc_fini_array>:
  4026b8:	b538      	push	{r3, r4, r5, lr}
  4026ba:	4c0a      	ldr	r4, [pc, #40]	; (4026e4 <__libc_fini_array+0x2c>)
  4026bc:	4d0a      	ldr	r5, [pc, #40]	; (4026e8 <__libc_fini_array+0x30>)
  4026be:	1b64      	subs	r4, r4, r5
  4026c0:	10a4      	asrs	r4, r4, #2
  4026c2:	d00a      	beq.n	4026da <__libc_fini_array+0x22>
  4026c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4026c8:	3b01      	subs	r3, #1
  4026ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4026ce:	3c01      	subs	r4, #1
  4026d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4026d4:	4798      	blx	r3
  4026d6:	2c00      	cmp	r4, #0
  4026d8:	d1f9      	bne.n	4026ce <__libc_fini_array+0x16>
  4026da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4026de:	f001 be5f 	b.w	4043a0 <_fini>
  4026e2:	bf00      	nop
  4026e4:	004043b0 	.word	0x004043b0
  4026e8:	004043ac 	.word	0x004043ac

004026ec <__fputwc>:
  4026ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026f0:	b082      	sub	sp, #8
  4026f2:	4680      	mov	r8, r0
  4026f4:	4689      	mov	r9, r1
  4026f6:	4614      	mov	r4, r2
  4026f8:	f000 fb54 	bl	402da4 <__locale_mb_cur_max>
  4026fc:	2801      	cmp	r0, #1
  4026fe:	d036      	beq.n	40276e <__fputwc+0x82>
  402700:	464a      	mov	r2, r9
  402702:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402706:	a901      	add	r1, sp, #4
  402708:	4640      	mov	r0, r8
  40270a:	f001 fa57 	bl	403bbc <_wcrtomb_r>
  40270e:	1c42      	adds	r2, r0, #1
  402710:	4606      	mov	r6, r0
  402712:	d025      	beq.n	402760 <__fputwc+0x74>
  402714:	b3a8      	cbz	r0, 402782 <__fputwc+0x96>
  402716:	f89d e004 	ldrb.w	lr, [sp, #4]
  40271a:	2500      	movs	r5, #0
  40271c:	f10d 0a04 	add.w	sl, sp, #4
  402720:	e009      	b.n	402736 <__fputwc+0x4a>
  402722:	6823      	ldr	r3, [r4, #0]
  402724:	1c5a      	adds	r2, r3, #1
  402726:	6022      	str	r2, [r4, #0]
  402728:	f883 e000 	strb.w	lr, [r3]
  40272c:	3501      	adds	r5, #1
  40272e:	42b5      	cmp	r5, r6
  402730:	d227      	bcs.n	402782 <__fputwc+0x96>
  402732:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402736:	68a3      	ldr	r3, [r4, #8]
  402738:	3b01      	subs	r3, #1
  40273a:	2b00      	cmp	r3, #0
  40273c:	60a3      	str	r3, [r4, #8]
  40273e:	daf0      	bge.n	402722 <__fputwc+0x36>
  402740:	69a7      	ldr	r7, [r4, #24]
  402742:	42bb      	cmp	r3, r7
  402744:	4671      	mov	r1, lr
  402746:	4622      	mov	r2, r4
  402748:	4640      	mov	r0, r8
  40274a:	db02      	blt.n	402752 <__fputwc+0x66>
  40274c:	f1be 0f0a 	cmp.w	lr, #10
  402750:	d1e7      	bne.n	402722 <__fputwc+0x36>
  402752:	f001 f9db 	bl	403b0c <__swbuf_r>
  402756:	1c43      	adds	r3, r0, #1
  402758:	d1e8      	bne.n	40272c <__fputwc+0x40>
  40275a:	b002      	add	sp, #8
  40275c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402760:	89a3      	ldrh	r3, [r4, #12]
  402762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402766:	81a3      	strh	r3, [r4, #12]
  402768:	b002      	add	sp, #8
  40276a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40276e:	f109 33ff 	add.w	r3, r9, #4294967295
  402772:	2bfe      	cmp	r3, #254	; 0xfe
  402774:	d8c4      	bhi.n	402700 <__fputwc+0x14>
  402776:	fa5f fe89 	uxtb.w	lr, r9
  40277a:	4606      	mov	r6, r0
  40277c:	f88d e004 	strb.w	lr, [sp, #4]
  402780:	e7cb      	b.n	40271a <__fputwc+0x2e>
  402782:	4648      	mov	r0, r9
  402784:	b002      	add	sp, #8
  402786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40278a:	bf00      	nop

0040278c <_fputwc_r>:
  40278c:	b530      	push	{r4, r5, lr}
  40278e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402790:	f013 0f01 	tst.w	r3, #1
  402794:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402798:	4614      	mov	r4, r2
  40279a:	b083      	sub	sp, #12
  40279c:	4605      	mov	r5, r0
  40279e:	b29a      	uxth	r2, r3
  4027a0:	d101      	bne.n	4027a6 <_fputwc_r+0x1a>
  4027a2:	0590      	lsls	r0, r2, #22
  4027a4:	d51c      	bpl.n	4027e0 <_fputwc_r+0x54>
  4027a6:	0490      	lsls	r0, r2, #18
  4027a8:	d406      	bmi.n	4027b8 <_fputwc_r+0x2c>
  4027aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4027ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4027b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4027b4:	81a3      	strh	r3, [r4, #12]
  4027b6:	6662      	str	r2, [r4, #100]	; 0x64
  4027b8:	4628      	mov	r0, r5
  4027ba:	4622      	mov	r2, r4
  4027bc:	f7ff ff96 	bl	4026ec <__fputwc>
  4027c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4027c2:	07da      	lsls	r2, r3, #31
  4027c4:	4605      	mov	r5, r0
  4027c6:	d402      	bmi.n	4027ce <_fputwc_r+0x42>
  4027c8:	89a3      	ldrh	r3, [r4, #12]
  4027ca:	059b      	lsls	r3, r3, #22
  4027cc:	d502      	bpl.n	4027d4 <_fputwc_r+0x48>
  4027ce:	4628      	mov	r0, r5
  4027d0:	b003      	add	sp, #12
  4027d2:	bd30      	pop	{r4, r5, pc}
  4027d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4027d6:	f000 faf9 	bl	402dcc <__retarget_lock_release_recursive>
  4027da:	4628      	mov	r0, r5
  4027dc:	b003      	add	sp, #12
  4027de:	bd30      	pop	{r4, r5, pc}
  4027e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4027e2:	9101      	str	r1, [sp, #4]
  4027e4:	f000 faf0 	bl	402dc8 <__retarget_lock_acquire_recursive>
  4027e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4027ec:	9901      	ldr	r1, [sp, #4]
  4027ee:	b29a      	uxth	r2, r3
  4027f0:	e7d9      	b.n	4027a6 <_fputwc_r+0x1a>
  4027f2:	bf00      	nop

004027f4 <_malloc_trim_r>:
  4027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4027f6:	4f24      	ldr	r7, [pc, #144]	; (402888 <_malloc_trim_r+0x94>)
  4027f8:	460c      	mov	r4, r1
  4027fa:	4606      	mov	r6, r0
  4027fc:	f000 ff7e 	bl	4036fc <__malloc_lock>
  402800:	68bb      	ldr	r3, [r7, #8]
  402802:	685d      	ldr	r5, [r3, #4]
  402804:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402808:	310f      	adds	r1, #15
  40280a:	f025 0503 	bic.w	r5, r5, #3
  40280e:	4429      	add	r1, r5
  402810:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402814:	f021 010f 	bic.w	r1, r1, #15
  402818:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40281c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402820:	db07      	blt.n	402832 <_malloc_trim_r+0x3e>
  402822:	2100      	movs	r1, #0
  402824:	4630      	mov	r0, r6
  402826:	f001 f91b 	bl	403a60 <_sbrk_r>
  40282a:	68bb      	ldr	r3, [r7, #8]
  40282c:	442b      	add	r3, r5
  40282e:	4298      	cmp	r0, r3
  402830:	d004      	beq.n	40283c <_malloc_trim_r+0x48>
  402832:	4630      	mov	r0, r6
  402834:	f000 ff68 	bl	403708 <__malloc_unlock>
  402838:	2000      	movs	r0, #0
  40283a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40283c:	4261      	negs	r1, r4
  40283e:	4630      	mov	r0, r6
  402840:	f001 f90e 	bl	403a60 <_sbrk_r>
  402844:	3001      	adds	r0, #1
  402846:	d00d      	beq.n	402864 <_malloc_trim_r+0x70>
  402848:	4b10      	ldr	r3, [pc, #64]	; (40288c <_malloc_trim_r+0x98>)
  40284a:	68ba      	ldr	r2, [r7, #8]
  40284c:	6819      	ldr	r1, [r3, #0]
  40284e:	1b2d      	subs	r5, r5, r4
  402850:	f045 0501 	orr.w	r5, r5, #1
  402854:	4630      	mov	r0, r6
  402856:	1b09      	subs	r1, r1, r4
  402858:	6055      	str	r5, [r2, #4]
  40285a:	6019      	str	r1, [r3, #0]
  40285c:	f000 ff54 	bl	403708 <__malloc_unlock>
  402860:	2001      	movs	r0, #1
  402862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402864:	2100      	movs	r1, #0
  402866:	4630      	mov	r0, r6
  402868:	f001 f8fa 	bl	403a60 <_sbrk_r>
  40286c:	68ba      	ldr	r2, [r7, #8]
  40286e:	1a83      	subs	r3, r0, r2
  402870:	2b0f      	cmp	r3, #15
  402872:	ddde      	ble.n	402832 <_malloc_trim_r+0x3e>
  402874:	4c06      	ldr	r4, [pc, #24]	; (402890 <_malloc_trim_r+0x9c>)
  402876:	4905      	ldr	r1, [pc, #20]	; (40288c <_malloc_trim_r+0x98>)
  402878:	6824      	ldr	r4, [r4, #0]
  40287a:	f043 0301 	orr.w	r3, r3, #1
  40287e:	1b00      	subs	r0, r0, r4
  402880:	6053      	str	r3, [r2, #4]
  402882:	6008      	str	r0, [r1, #0]
  402884:	e7d5      	b.n	402832 <_malloc_trim_r+0x3e>
  402886:	bf00      	nop
  402888:	200005a8 	.word	0x200005a8
  40288c:	20000a7c 	.word	0x20000a7c
  402890:	200009b0 	.word	0x200009b0

00402894 <_free_r>:
  402894:	2900      	cmp	r1, #0
  402896:	d044      	beq.n	402922 <_free_r+0x8e>
  402898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40289c:	460d      	mov	r5, r1
  40289e:	4680      	mov	r8, r0
  4028a0:	f000 ff2c 	bl	4036fc <__malloc_lock>
  4028a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4028a8:	4969      	ldr	r1, [pc, #420]	; (402a50 <_free_r+0x1bc>)
  4028aa:	f027 0301 	bic.w	r3, r7, #1
  4028ae:	f1a5 0408 	sub.w	r4, r5, #8
  4028b2:	18e2      	adds	r2, r4, r3
  4028b4:	688e      	ldr	r6, [r1, #8]
  4028b6:	6850      	ldr	r0, [r2, #4]
  4028b8:	42b2      	cmp	r2, r6
  4028ba:	f020 0003 	bic.w	r0, r0, #3
  4028be:	d05e      	beq.n	40297e <_free_r+0xea>
  4028c0:	07fe      	lsls	r6, r7, #31
  4028c2:	6050      	str	r0, [r2, #4]
  4028c4:	d40b      	bmi.n	4028de <_free_r+0x4a>
  4028c6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4028ca:	1be4      	subs	r4, r4, r7
  4028cc:	f101 0e08 	add.w	lr, r1, #8
  4028d0:	68a5      	ldr	r5, [r4, #8]
  4028d2:	4575      	cmp	r5, lr
  4028d4:	443b      	add	r3, r7
  4028d6:	d06d      	beq.n	4029b4 <_free_r+0x120>
  4028d8:	68e7      	ldr	r7, [r4, #12]
  4028da:	60ef      	str	r7, [r5, #12]
  4028dc:	60bd      	str	r5, [r7, #8]
  4028de:	1815      	adds	r5, r2, r0
  4028e0:	686d      	ldr	r5, [r5, #4]
  4028e2:	07ed      	lsls	r5, r5, #31
  4028e4:	d53e      	bpl.n	402964 <_free_r+0xd0>
  4028e6:	f043 0201 	orr.w	r2, r3, #1
  4028ea:	6062      	str	r2, [r4, #4]
  4028ec:	50e3      	str	r3, [r4, r3]
  4028ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4028f2:	d217      	bcs.n	402924 <_free_r+0x90>
  4028f4:	08db      	lsrs	r3, r3, #3
  4028f6:	1c58      	adds	r0, r3, #1
  4028f8:	109a      	asrs	r2, r3, #2
  4028fa:	684d      	ldr	r5, [r1, #4]
  4028fc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402900:	60a7      	str	r7, [r4, #8]
  402902:	2301      	movs	r3, #1
  402904:	4093      	lsls	r3, r2
  402906:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40290a:	432b      	orrs	r3, r5
  40290c:	3a08      	subs	r2, #8
  40290e:	60e2      	str	r2, [r4, #12]
  402910:	604b      	str	r3, [r1, #4]
  402912:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402916:	60fc      	str	r4, [r7, #12]
  402918:	4640      	mov	r0, r8
  40291a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40291e:	f000 bef3 	b.w	403708 <__malloc_unlock>
  402922:	4770      	bx	lr
  402924:	0a5a      	lsrs	r2, r3, #9
  402926:	2a04      	cmp	r2, #4
  402928:	d852      	bhi.n	4029d0 <_free_r+0x13c>
  40292a:	099a      	lsrs	r2, r3, #6
  40292c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402930:	00ff      	lsls	r7, r7, #3
  402932:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402936:	19c8      	adds	r0, r1, r7
  402938:	59ca      	ldr	r2, [r1, r7]
  40293a:	3808      	subs	r0, #8
  40293c:	4290      	cmp	r0, r2
  40293e:	d04f      	beq.n	4029e0 <_free_r+0x14c>
  402940:	6851      	ldr	r1, [r2, #4]
  402942:	f021 0103 	bic.w	r1, r1, #3
  402946:	428b      	cmp	r3, r1
  402948:	d232      	bcs.n	4029b0 <_free_r+0x11c>
  40294a:	6892      	ldr	r2, [r2, #8]
  40294c:	4290      	cmp	r0, r2
  40294e:	d1f7      	bne.n	402940 <_free_r+0xac>
  402950:	68c3      	ldr	r3, [r0, #12]
  402952:	60a0      	str	r0, [r4, #8]
  402954:	60e3      	str	r3, [r4, #12]
  402956:	609c      	str	r4, [r3, #8]
  402958:	60c4      	str	r4, [r0, #12]
  40295a:	4640      	mov	r0, r8
  40295c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402960:	f000 bed2 	b.w	403708 <__malloc_unlock>
  402964:	6895      	ldr	r5, [r2, #8]
  402966:	4f3b      	ldr	r7, [pc, #236]	; (402a54 <_free_r+0x1c0>)
  402968:	42bd      	cmp	r5, r7
  40296a:	4403      	add	r3, r0
  40296c:	d040      	beq.n	4029f0 <_free_r+0x15c>
  40296e:	68d0      	ldr	r0, [r2, #12]
  402970:	60e8      	str	r0, [r5, #12]
  402972:	f043 0201 	orr.w	r2, r3, #1
  402976:	6085      	str	r5, [r0, #8]
  402978:	6062      	str	r2, [r4, #4]
  40297a:	50e3      	str	r3, [r4, r3]
  40297c:	e7b7      	b.n	4028ee <_free_r+0x5a>
  40297e:	07ff      	lsls	r7, r7, #31
  402980:	4403      	add	r3, r0
  402982:	d407      	bmi.n	402994 <_free_r+0x100>
  402984:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402988:	1aa4      	subs	r4, r4, r2
  40298a:	4413      	add	r3, r2
  40298c:	68a0      	ldr	r0, [r4, #8]
  40298e:	68e2      	ldr	r2, [r4, #12]
  402990:	60c2      	str	r2, [r0, #12]
  402992:	6090      	str	r0, [r2, #8]
  402994:	4a30      	ldr	r2, [pc, #192]	; (402a58 <_free_r+0x1c4>)
  402996:	6812      	ldr	r2, [r2, #0]
  402998:	f043 0001 	orr.w	r0, r3, #1
  40299c:	4293      	cmp	r3, r2
  40299e:	6060      	str	r0, [r4, #4]
  4029a0:	608c      	str	r4, [r1, #8]
  4029a2:	d3b9      	bcc.n	402918 <_free_r+0x84>
  4029a4:	4b2d      	ldr	r3, [pc, #180]	; (402a5c <_free_r+0x1c8>)
  4029a6:	4640      	mov	r0, r8
  4029a8:	6819      	ldr	r1, [r3, #0]
  4029aa:	f7ff ff23 	bl	4027f4 <_malloc_trim_r>
  4029ae:	e7b3      	b.n	402918 <_free_r+0x84>
  4029b0:	4610      	mov	r0, r2
  4029b2:	e7cd      	b.n	402950 <_free_r+0xbc>
  4029b4:	1811      	adds	r1, r2, r0
  4029b6:	6849      	ldr	r1, [r1, #4]
  4029b8:	07c9      	lsls	r1, r1, #31
  4029ba:	d444      	bmi.n	402a46 <_free_r+0x1b2>
  4029bc:	6891      	ldr	r1, [r2, #8]
  4029be:	68d2      	ldr	r2, [r2, #12]
  4029c0:	60ca      	str	r2, [r1, #12]
  4029c2:	4403      	add	r3, r0
  4029c4:	f043 0001 	orr.w	r0, r3, #1
  4029c8:	6091      	str	r1, [r2, #8]
  4029ca:	6060      	str	r0, [r4, #4]
  4029cc:	50e3      	str	r3, [r4, r3]
  4029ce:	e7a3      	b.n	402918 <_free_r+0x84>
  4029d0:	2a14      	cmp	r2, #20
  4029d2:	d816      	bhi.n	402a02 <_free_r+0x16e>
  4029d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4029d8:	00ff      	lsls	r7, r7, #3
  4029da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4029de:	e7aa      	b.n	402936 <_free_r+0xa2>
  4029e0:	10aa      	asrs	r2, r5, #2
  4029e2:	2301      	movs	r3, #1
  4029e4:	684d      	ldr	r5, [r1, #4]
  4029e6:	4093      	lsls	r3, r2
  4029e8:	432b      	orrs	r3, r5
  4029ea:	604b      	str	r3, [r1, #4]
  4029ec:	4603      	mov	r3, r0
  4029ee:	e7b0      	b.n	402952 <_free_r+0xbe>
  4029f0:	f043 0201 	orr.w	r2, r3, #1
  4029f4:	614c      	str	r4, [r1, #20]
  4029f6:	610c      	str	r4, [r1, #16]
  4029f8:	60e5      	str	r5, [r4, #12]
  4029fa:	60a5      	str	r5, [r4, #8]
  4029fc:	6062      	str	r2, [r4, #4]
  4029fe:	50e3      	str	r3, [r4, r3]
  402a00:	e78a      	b.n	402918 <_free_r+0x84>
  402a02:	2a54      	cmp	r2, #84	; 0x54
  402a04:	d806      	bhi.n	402a14 <_free_r+0x180>
  402a06:	0b1a      	lsrs	r2, r3, #12
  402a08:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402a0c:	00ff      	lsls	r7, r7, #3
  402a0e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402a12:	e790      	b.n	402936 <_free_r+0xa2>
  402a14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402a18:	d806      	bhi.n	402a28 <_free_r+0x194>
  402a1a:	0bda      	lsrs	r2, r3, #15
  402a1c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402a20:	00ff      	lsls	r7, r7, #3
  402a22:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402a26:	e786      	b.n	402936 <_free_r+0xa2>
  402a28:	f240 5054 	movw	r0, #1364	; 0x554
  402a2c:	4282      	cmp	r2, r0
  402a2e:	d806      	bhi.n	402a3e <_free_r+0x1aa>
  402a30:	0c9a      	lsrs	r2, r3, #18
  402a32:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402a36:	00ff      	lsls	r7, r7, #3
  402a38:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402a3c:	e77b      	b.n	402936 <_free_r+0xa2>
  402a3e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402a42:	257e      	movs	r5, #126	; 0x7e
  402a44:	e777      	b.n	402936 <_free_r+0xa2>
  402a46:	f043 0101 	orr.w	r1, r3, #1
  402a4a:	6061      	str	r1, [r4, #4]
  402a4c:	6013      	str	r3, [r2, #0]
  402a4e:	e763      	b.n	402918 <_free_r+0x84>
  402a50:	200005a8 	.word	0x200005a8
  402a54:	200005b0 	.word	0x200005b0
  402a58:	200009b4 	.word	0x200009b4
  402a5c:	20000aac 	.word	0x20000aac

00402a60 <__sfvwrite_r>:
  402a60:	6893      	ldr	r3, [r2, #8]
  402a62:	2b00      	cmp	r3, #0
  402a64:	d073      	beq.n	402b4e <__sfvwrite_r+0xee>
  402a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a6a:	898b      	ldrh	r3, [r1, #12]
  402a6c:	b083      	sub	sp, #12
  402a6e:	460c      	mov	r4, r1
  402a70:	0719      	lsls	r1, r3, #28
  402a72:	9000      	str	r0, [sp, #0]
  402a74:	4616      	mov	r6, r2
  402a76:	d526      	bpl.n	402ac6 <__sfvwrite_r+0x66>
  402a78:	6922      	ldr	r2, [r4, #16]
  402a7a:	b322      	cbz	r2, 402ac6 <__sfvwrite_r+0x66>
  402a7c:	f013 0002 	ands.w	r0, r3, #2
  402a80:	6835      	ldr	r5, [r6, #0]
  402a82:	d02c      	beq.n	402ade <__sfvwrite_r+0x7e>
  402a84:	f04f 0900 	mov.w	r9, #0
  402a88:	4fb0      	ldr	r7, [pc, #704]	; (402d4c <__sfvwrite_r+0x2ec>)
  402a8a:	46c8      	mov	r8, r9
  402a8c:	46b2      	mov	sl, r6
  402a8e:	45b8      	cmp	r8, r7
  402a90:	4643      	mov	r3, r8
  402a92:	464a      	mov	r2, r9
  402a94:	bf28      	it	cs
  402a96:	463b      	movcs	r3, r7
  402a98:	9800      	ldr	r0, [sp, #0]
  402a9a:	f1b8 0f00 	cmp.w	r8, #0
  402a9e:	d050      	beq.n	402b42 <__sfvwrite_r+0xe2>
  402aa0:	69e1      	ldr	r1, [r4, #28]
  402aa2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402aa4:	47b0      	blx	r6
  402aa6:	2800      	cmp	r0, #0
  402aa8:	dd58      	ble.n	402b5c <__sfvwrite_r+0xfc>
  402aaa:	f8da 3008 	ldr.w	r3, [sl, #8]
  402aae:	1a1b      	subs	r3, r3, r0
  402ab0:	4481      	add	r9, r0
  402ab2:	eba8 0800 	sub.w	r8, r8, r0
  402ab6:	f8ca 3008 	str.w	r3, [sl, #8]
  402aba:	2b00      	cmp	r3, #0
  402abc:	d1e7      	bne.n	402a8e <__sfvwrite_r+0x2e>
  402abe:	2000      	movs	r0, #0
  402ac0:	b003      	add	sp, #12
  402ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ac6:	4621      	mov	r1, r4
  402ac8:	9800      	ldr	r0, [sp, #0]
  402aca:	f7ff fc51 	bl	402370 <__swsetup_r>
  402ace:	2800      	cmp	r0, #0
  402ad0:	f040 8133 	bne.w	402d3a <__sfvwrite_r+0x2da>
  402ad4:	89a3      	ldrh	r3, [r4, #12]
  402ad6:	6835      	ldr	r5, [r6, #0]
  402ad8:	f013 0002 	ands.w	r0, r3, #2
  402adc:	d1d2      	bne.n	402a84 <__sfvwrite_r+0x24>
  402ade:	f013 0901 	ands.w	r9, r3, #1
  402ae2:	d145      	bne.n	402b70 <__sfvwrite_r+0x110>
  402ae4:	464f      	mov	r7, r9
  402ae6:	9601      	str	r6, [sp, #4]
  402ae8:	b337      	cbz	r7, 402b38 <__sfvwrite_r+0xd8>
  402aea:	059a      	lsls	r2, r3, #22
  402aec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402af0:	f140 8083 	bpl.w	402bfa <__sfvwrite_r+0x19a>
  402af4:	4547      	cmp	r7, r8
  402af6:	46c3      	mov	fp, r8
  402af8:	f0c0 80ab 	bcc.w	402c52 <__sfvwrite_r+0x1f2>
  402afc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402b00:	f040 80ac 	bne.w	402c5c <__sfvwrite_r+0x1fc>
  402b04:	6820      	ldr	r0, [r4, #0]
  402b06:	46ba      	mov	sl, r7
  402b08:	465a      	mov	r2, fp
  402b0a:	4649      	mov	r1, r9
  402b0c:	f000 fd92 	bl	403634 <memmove>
  402b10:	68a2      	ldr	r2, [r4, #8]
  402b12:	6823      	ldr	r3, [r4, #0]
  402b14:	eba2 0208 	sub.w	r2, r2, r8
  402b18:	445b      	add	r3, fp
  402b1a:	60a2      	str	r2, [r4, #8]
  402b1c:	6023      	str	r3, [r4, #0]
  402b1e:	9a01      	ldr	r2, [sp, #4]
  402b20:	6893      	ldr	r3, [r2, #8]
  402b22:	eba3 030a 	sub.w	r3, r3, sl
  402b26:	44d1      	add	r9, sl
  402b28:	eba7 070a 	sub.w	r7, r7, sl
  402b2c:	6093      	str	r3, [r2, #8]
  402b2e:	2b00      	cmp	r3, #0
  402b30:	d0c5      	beq.n	402abe <__sfvwrite_r+0x5e>
  402b32:	89a3      	ldrh	r3, [r4, #12]
  402b34:	2f00      	cmp	r7, #0
  402b36:	d1d8      	bne.n	402aea <__sfvwrite_r+0x8a>
  402b38:	f8d5 9000 	ldr.w	r9, [r5]
  402b3c:	686f      	ldr	r7, [r5, #4]
  402b3e:	3508      	adds	r5, #8
  402b40:	e7d2      	b.n	402ae8 <__sfvwrite_r+0x88>
  402b42:	f8d5 9000 	ldr.w	r9, [r5]
  402b46:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402b4a:	3508      	adds	r5, #8
  402b4c:	e79f      	b.n	402a8e <__sfvwrite_r+0x2e>
  402b4e:	2000      	movs	r0, #0
  402b50:	4770      	bx	lr
  402b52:	4621      	mov	r1, r4
  402b54:	9800      	ldr	r0, [sp, #0]
  402b56:	f7ff fd1f 	bl	402598 <_fflush_r>
  402b5a:	b370      	cbz	r0, 402bba <__sfvwrite_r+0x15a>
  402b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b64:	f04f 30ff 	mov.w	r0, #4294967295
  402b68:	81a3      	strh	r3, [r4, #12]
  402b6a:	b003      	add	sp, #12
  402b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b70:	4681      	mov	r9, r0
  402b72:	4633      	mov	r3, r6
  402b74:	464e      	mov	r6, r9
  402b76:	46a8      	mov	r8, r5
  402b78:	469a      	mov	sl, r3
  402b7a:	464d      	mov	r5, r9
  402b7c:	b34e      	cbz	r6, 402bd2 <__sfvwrite_r+0x172>
  402b7e:	b380      	cbz	r0, 402be2 <__sfvwrite_r+0x182>
  402b80:	6820      	ldr	r0, [r4, #0]
  402b82:	6923      	ldr	r3, [r4, #16]
  402b84:	6962      	ldr	r2, [r4, #20]
  402b86:	45b1      	cmp	r9, r6
  402b88:	46cb      	mov	fp, r9
  402b8a:	bf28      	it	cs
  402b8c:	46b3      	movcs	fp, r6
  402b8e:	4298      	cmp	r0, r3
  402b90:	465f      	mov	r7, fp
  402b92:	d904      	bls.n	402b9e <__sfvwrite_r+0x13e>
  402b94:	68a3      	ldr	r3, [r4, #8]
  402b96:	4413      	add	r3, r2
  402b98:	459b      	cmp	fp, r3
  402b9a:	f300 80a6 	bgt.w	402cea <__sfvwrite_r+0x28a>
  402b9e:	4593      	cmp	fp, r2
  402ba0:	db4b      	blt.n	402c3a <__sfvwrite_r+0x1da>
  402ba2:	4613      	mov	r3, r2
  402ba4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402ba6:	69e1      	ldr	r1, [r4, #28]
  402ba8:	9800      	ldr	r0, [sp, #0]
  402baa:	462a      	mov	r2, r5
  402bac:	47b8      	blx	r7
  402bae:	1e07      	subs	r7, r0, #0
  402bb0:	ddd4      	ble.n	402b5c <__sfvwrite_r+0xfc>
  402bb2:	ebb9 0907 	subs.w	r9, r9, r7
  402bb6:	d0cc      	beq.n	402b52 <__sfvwrite_r+0xf2>
  402bb8:	2001      	movs	r0, #1
  402bba:	f8da 3008 	ldr.w	r3, [sl, #8]
  402bbe:	1bdb      	subs	r3, r3, r7
  402bc0:	443d      	add	r5, r7
  402bc2:	1bf6      	subs	r6, r6, r7
  402bc4:	f8ca 3008 	str.w	r3, [sl, #8]
  402bc8:	2b00      	cmp	r3, #0
  402bca:	f43f af78 	beq.w	402abe <__sfvwrite_r+0x5e>
  402bce:	2e00      	cmp	r6, #0
  402bd0:	d1d5      	bne.n	402b7e <__sfvwrite_r+0x11e>
  402bd2:	f108 0308 	add.w	r3, r8, #8
  402bd6:	e913 0060 	ldmdb	r3, {r5, r6}
  402bda:	4698      	mov	r8, r3
  402bdc:	3308      	adds	r3, #8
  402bde:	2e00      	cmp	r6, #0
  402be0:	d0f9      	beq.n	402bd6 <__sfvwrite_r+0x176>
  402be2:	4632      	mov	r2, r6
  402be4:	210a      	movs	r1, #10
  402be6:	4628      	mov	r0, r5
  402be8:	f000 fc3a 	bl	403460 <memchr>
  402bec:	2800      	cmp	r0, #0
  402bee:	f000 80a1 	beq.w	402d34 <__sfvwrite_r+0x2d4>
  402bf2:	3001      	adds	r0, #1
  402bf4:	eba0 0905 	sub.w	r9, r0, r5
  402bf8:	e7c2      	b.n	402b80 <__sfvwrite_r+0x120>
  402bfa:	6820      	ldr	r0, [r4, #0]
  402bfc:	6923      	ldr	r3, [r4, #16]
  402bfe:	4298      	cmp	r0, r3
  402c00:	d802      	bhi.n	402c08 <__sfvwrite_r+0x1a8>
  402c02:	6963      	ldr	r3, [r4, #20]
  402c04:	429f      	cmp	r7, r3
  402c06:	d25d      	bcs.n	402cc4 <__sfvwrite_r+0x264>
  402c08:	45b8      	cmp	r8, r7
  402c0a:	bf28      	it	cs
  402c0c:	46b8      	movcs	r8, r7
  402c0e:	4642      	mov	r2, r8
  402c10:	4649      	mov	r1, r9
  402c12:	f000 fd0f 	bl	403634 <memmove>
  402c16:	68a3      	ldr	r3, [r4, #8]
  402c18:	6822      	ldr	r2, [r4, #0]
  402c1a:	eba3 0308 	sub.w	r3, r3, r8
  402c1e:	4442      	add	r2, r8
  402c20:	60a3      	str	r3, [r4, #8]
  402c22:	6022      	str	r2, [r4, #0]
  402c24:	b10b      	cbz	r3, 402c2a <__sfvwrite_r+0x1ca>
  402c26:	46c2      	mov	sl, r8
  402c28:	e779      	b.n	402b1e <__sfvwrite_r+0xbe>
  402c2a:	4621      	mov	r1, r4
  402c2c:	9800      	ldr	r0, [sp, #0]
  402c2e:	f7ff fcb3 	bl	402598 <_fflush_r>
  402c32:	2800      	cmp	r0, #0
  402c34:	d192      	bne.n	402b5c <__sfvwrite_r+0xfc>
  402c36:	46c2      	mov	sl, r8
  402c38:	e771      	b.n	402b1e <__sfvwrite_r+0xbe>
  402c3a:	465a      	mov	r2, fp
  402c3c:	4629      	mov	r1, r5
  402c3e:	f000 fcf9 	bl	403634 <memmove>
  402c42:	68a2      	ldr	r2, [r4, #8]
  402c44:	6823      	ldr	r3, [r4, #0]
  402c46:	eba2 020b 	sub.w	r2, r2, fp
  402c4a:	445b      	add	r3, fp
  402c4c:	60a2      	str	r2, [r4, #8]
  402c4e:	6023      	str	r3, [r4, #0]
  402c50:	e7af      	b.n	402bb2 <__sfvwrite_r+0x152>
  402c52:	6820      	ldr	r0, [r4, #0]
  402c54:	46b8      	mov	r8, r7
  402c56:	46ba      	mov	sl, r7
  402c58:	46bb      	mov	fp, r7
  402c5a:	e755      	b.n	402b08 <__sfvwrite_r+0xa8>
  402c5c:	6962      	ldr	r2, [r4, #20]
  402c5e:	6820      	ldr	r0, [r4, #0]
  402c60:	6921      	ldr	r1, [r4, #16]
  402c62:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402c66:	eba0 0a01 	sub.w	sl, r0, r1
  402c6a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402c6e:	f10a 0001 	add.w	r0, sl, #1
  402c72:	ea4f 0868 	mov.w	r8, r8, asr #1
  402c76:	4438      	add	r0, r7
  402c78:	4540      	cmp	r0, r8
  402c7a:	4642      	mov	r2, r8
  402c7c:	bf84      	itt	hi
  402c7e:	4680      	movhi	r8, r0
  402c80:	4642      	movhi	r2, r8
  402c82:	055b      	lsls	r3, r3, #21
  402c84:	d544      	bpl.n	402d10 <__sfvwrite_r+0x2b0>
  402c86:	4611      	mov	r1, r2
  402c88:	9800      	ldr	r0, [sp, #0]
  402c8a:	f000 f921 	bl	402ed0 <_malloc_r>
  402c8e:	4683      	mov	fp, r0
  402c90:	2800      	cmp	r0, #0
  402c92:	d055      	beq.n	402d40 <__sfvwrite_r+0x2e0>
  402c94:	4652      	mov	r2, sl
  402c96:	6921      	ldr	r1, [r4, #16]
  402c98:	f000 fc32 	bl	403500 <memcpy>
  402c9c:	89a3      	ldrh	r3, [r4, #12]
  402c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ca6:	81a3      	strh	r3, [r4, #12]
  402ca8:	eb0b 000a 	add.w	r0, fp, sl
  402cac:	eba8 030a 	sub.w	r3, r8, sl
  402cb0:	f8c4 b010 	str.w	fp, [r4, #16]
  402cb4:	f8c4 8014 	str.w	r8, [r4, #20]
  402cb8:	6020      	str	r0, [r4, #0]
  402cba:	60a3      	str	r3, [r4, #8]
  402cbc:	46b8      	mov	r8, r7
  402cbe:	46ba      	mov	sl, r7
  402cc0:	46bb      	mov	fp, r7
  402cc2:	e721      	b.n	402b08 <__sfvwrite_r+0xa8>
  402cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402cc8:	42b9      	cmp	r1, r7
  402cca:	bf28      	it	cs
  402ccc:	4639      	movcs	r1, r7
  402cce:	464a      	mov	r2, r9
  402cd0:	fb91 f1f3 	sdiv	r1, r1, r3
  402cd4:	9800      	ldr	r0, [sp, #0]
  402cd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402cd8:	fb03 f301 	mul.w	r3, r3, r1
  402cdc:	69e1      	ldr	r1, [r4, #28]
  402cde:	47b0      	blx	r6
  402ce0:	f1b0 0a00 	subs.w	sl, r0, #0
  402ce4:	f73f af1b 	bgt.w	402b1e <__sfvwrite_r+0xbe>
  402ce8:	e738      	b.n	402b5c <__sfvwrite_r+0xfc>
  402cea:	461a      	mov	r2, r3
  402cec:	4629      	mov	r1, r5
  402cee:	9301      	str	r3, [sp, #4]
  402cf0:	f000 fca0 	bl	403634 <memmove>
  402cf4:	6822      	ldr	r2, [r4, #0]
  402cf6:	9b01      	ldr	r3, [sp, #4]
  402cf8:	9800      	ldr	r0, [sp, #0]
  402cfa:	441a      	add	r2, r3
  402cfc:	6022      	str	r2, [r4, #0]
  402cfe:	4621      	mov	r1, r4
  402d00:	f7ff fc4a 	bl	402598 <_fflush_r>
  402d04:	9b01      	ldr	r3, [sp, #4]
  402d06:	2800      	cmp	r0, #0
  402d08:	f47f af28 	bne.w	402b5c <__sfvwrite_r+0xfc>
  402d0c:	461f      	mov	r7, r3
  402d0e:	e750      	b.n	402bb2 <__sfvwrite_r+0x152>
  402d10:	9800      	ldr	r0, [sp, #0]
  402d12:	f000 fcff 	bl	403714 <_realloc_r>
  402d16:	4683      	mov	fp, r0
  402d18:	2800      	cmp	r0, #0
  402d1a:	d1c5      	bne.n	402ca8 <__sfvwrite_r+0x248>
  402d1c:	9d00      	ldr	r5, [sp, #0]
  402d1e:	6921      	ldr	r1, [r4, #16]
  402d20:	4628      	mov	r0, r5
  402d22:	f7ff fdb7 	bl	402894 <_free_r>
  402d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d2a:	220c      	movs	r2, #12
  402d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402d30:	602a      	str	r2, [r5, #0]
  402d32:	e715      	b.n	402b60 <__sfvwrite_r+0x100>
  402d34:	f106 0901 	add.w	r9, r6, #1
  402d38:	e722      	b.n	402b80 <__sfvwrite_r+0x120>
  402d3a:	f04f 30ff 	mov.w	r0, #4294967295
  402d3e:	e6bf      	b.n	402ac0 <__sfvwrite_r+0x60>
  402d40:	9a00      	ldr	r2, [sp, #0]
  402d42:	230c      	movs	r3, #12
  402d44:	6013      	str	r3, [r2, #0]
  402d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d4a:	e709      	b.n	402b60 <__sfvwrite_r+0x100>
  402d4c:	7ffffc00 	.word	0x7ffffc00

00402d50 <_fwalk_reent>:
  402d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402d54:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402d58:	d01f      	beq.n	402d9a <_fwalk_reent+0x4a>
  402d5a:	4688      	mov	r8, r1
  402d5c:	4606      	mov	r6, r0
  402d5e:	f04f 0900 	mov.w	r9, #0
  402d62:	687d      	ldr	r5, [r7, #4]
  402d64:	68bc      	ldr	r4, [r7, #8]
  402d66:	3d01      	subs	r5, #1
  402d68:	d411      	bmi.n	402d8e <_fwalk_reent+0x3e>
  402d6a:	89a3      	ldrh	r3, [r4, #12]
  402d6c:	2b01      	cmp	r3, #1
  402d6e:	f105 35ff 	add.w	r5, r5, #4294967295
  402d72:	d908      	bls.n	402d86 <_fwalk_reent+0x36>
  402d74:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402d78:	3301      	adds	r3, #1
  402d7a:	4621      	mov	r1, r4
  402d7c:	4630      	mov	r0, r6
  402d7e:	d002      	beq.n	402d86 <_fwalk_reent+0x36>
  402d80:	47c0      	blx	r8
  402d82:	ea49 0900 	orr.w	r9, r9, r0
  402d86:	1c6b      	adds	r3, r5, #1
  402d88:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402d8c:	d1ed      	bne.n	402d6a <_fwalk_reent+0x1a>
  402d8e:	683f      	ldr	r7, [r7, #0]
  402d90:	2f00      	cmp	r7, #0
  402d92:	d1e6      	bne.n	402d62 <_fwalk_reent+0x12>
  402d94:	4648      	mov	r0, r9
  402d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d9a:	46b9      	mov	r9, r7
  402d9c:	4648      	mov	r0, r9
  402d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402da2:	bf00      	nop

00402da4 <__locale_mb_cur_max>:
  402da4:	4b04      	ldr	r3, [pc, #16]	; (402db8 <__locale_mb_cur_max+0x14>)
  402da6:	4a05      	ldr	r2, [pc, #20]	; (402dbc <__locale_mb_cur_max+0x18>)
  402da8:	681b      	ldr	r3, [r3, #0]
  402daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402dac:	2b00      	cmp	r3, #0
  402dae:	bf08      	it	eq
  402db0:	4613      	moveq	r3, r2
  402db2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402db6:	4770      	bx	lr
  402db8:	20000008 	.word	0x20000008
  402dbc:	2000043c 	.word	0x2000043c

00402dc0 <__retarget_lock_init_recursive>:
  402dc0:	4770      	bx	lr
  402dc2:	bf00      	nop

00402dc4 <__retarget_lock_close_recursive>:
  402dc4:	4770      	bx	lr
  402dc6:	bf00      	nop

00402dc8 <__retarget_lock_acquire_recursive>:
  402dc8:	4770      	bx	lr
  402dca:	bf00      	nop

00402dcc <__retarget_lock_release_recursive>:
  402dcc:	4770      	bx	lr
  402dce:	bf00      	nop

00402dd0 <__swhatbuf_r>:
  402dd0:	b570      	push	{r4, r5, r6, lr}
  402dd2:	460c      	mov	r4, r1
  402dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402dd8:	2900      	cmp	r1, #0
  402dda:	b090      	sub	sp, #64	; 0x40
  402ddc:	4615      	mov	r5, r2
  402dde:	461e      	mov	r6, r3
  402de0:	db14      	blt.n	402e0c <__swhatbuf_r+0x3c>
  402de2:	aa01      	add	r2, sp, #4
  402de4:	f001 f80e 	bl	403e04 <_fstat_r>
  402de8:	2800      	cmp	r0, #0
  402dea:	db0f      	blt.n	402e0c <__swhatbuf_r+0x3c>
  402dec:	9a02      	ldr	r2, [sp, #8]
  402dee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402df2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402df6:	fab2 f282 	clz	r2, r2
  402dfa:	0952      	lsrs	r2, r2, #5
  402dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402e00:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402e04:	6032      	str	r2, [r6, #0]
  402e06:	602b      	str	r3, [r5, #0]
  402e08:	b010      	add	sp, #64	; 0x40
  402e0a:	bd70      	pop	{r4, r5, r6, pc}
  402e0c:	89a2      	ldrh	r2, [r4, #12]
  402e0e:	2300      	movs	r3, #0
  402e10:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402e14:	6033      	str	r3, [r6, #0]
  402e16:	d004      	beq.n	402e22 <__swhatbuf_r+0x52>
  402e18:	2240      	movs	r2, #64	; 0x40
  402e1a:	4618      	mov	r0, r3
  402e1c:	602a      	str	r2, [r5, #0]
  402e1e:	b010      	add	sp, #64	; 0x40
  402e20:	bd70      	pop	{r4, r5, r6, pc}
  402e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402e26:	602b      	str	r3, [r5, #0]
  402e28:	b010      	add	sp, #64	; 0x40
  402e2a:	bd70      	pop	{r4, r5, r6, pc}

00402e2c <__smakebuf_r>:
  402e2c:	898a      	ldrh	r2, [r1, #12]
  402e2e:	0792      	lsls	r2, r2, #30
  402e30:	460b      	mov	r3, r1
  402e32:	d506      	bpl.n	402e42 <__smakebuf_r+0x16>
  402e34:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402e38:	2101      	movs	r1, #1
  402e3a:	601a      	str	r2, [r3, #0]
  402e3c:	611a      	str	r2, [r3, #16]
  402e3e:	6159      	str	r1, [r3, #20]
  402e40:	4770      	bx	lr
  402e42:	b5f0      	push	{r4, r5, r6, r7, lr}
  402e44:	b083      	sub	sp, #12
  402e46:	ab01      	add	r3, sp, #4
  402e48:	466a      	mov	r2, sp
  402e4a:	460c      	mov	r4, r1
  402e4c:	4606      	mov	r6, r0
  402e4e:	f7ff ffbf 	bl	402dd0 <__swhatbuf_r>
  402e52:	9900      	ldr	r1, [sp, #0]
  402e54:	4605      	mov	r5, r0
  402e56:	4630      	mov	r0, r6
  402e58:	f000 f83a 	bl	402ed0 <_malloc_r>
  402e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e60:	b1d8      	cbz	r0, 402e9a <__smakebuf_r+0x6e>
  402e62:	9a01      	ldr	r2, [sp, #4]
  402e64:	4f15      	ldr	r7, [pc, #84]	; (402ebc <__smakebuf_r+0x90>)
  402e66:	9900      	ldr	r1, [sp, #0]
  402e68:	63f7      	str	r7, [r6, #60]	; 0x3c
  402e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402e6e:	81a3      	strh	r3, [r4, #12]
  402e70:	6020      	str	r0, [r4, #0]
  402e72:	6120      	str	r0, [r4, #16]
  402e74:	6161      	str	r1, [r4, #20]
  402e76:	b91a      	cbnz	r2, 402e80 <__smakebuf_r+0x54>
  402e78:	432b      	orrs	r3, r5
  402e7a:	81a3      	strh	r3, [r4, #12]
  402e7c:	b003      	add	sp, #12
  402e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402e80:	4630      	mov	r0, r6
  402e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402e86:	f000 ffd1 	bl	403e2c <_isatty_r>
  402e8a:	b1a0      	cbz	r0, 402eb6 <__smakebuf_r+0x8a>
  402e8c:	89a3      	ldrh	r3, [r4, #12]
  402e8e:	f023 0303 	bic.w	r3, r3, #3
  402e92:	f043 0301 	orr.w	r3, r3, #1
  402e96:	b21b      	sxth	r3, r3
  402e98:	e7ee      	b.n	402e78 <__smakebuf_r+0x4c>
  402e9a:	059a      	lsls	r2, r3, #22
  402e9c:	d4ee      	bmi.n	402e7c <__smakebuf_r+0x50>
  402e9e:	f023 0303 	bic.w	r3, r3, #3
  402ea2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402ea6:	f043 0302 	orr.w	r3, r3, #2
  402eaa:	2101      	movs	r1, #1
  402eac:	81a3      	strh	r3, [r4, #12]
  402eae:	6022      	str	r2, [r4, #0]
  402eb0:	6122      	str	r2, [r4, #16]
  402eb2:	6161      	str	r1, [r4, #20]
  402eb4:	e7e2      	b.n	402e7c <__smakebuf_r+0x50>
  402eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402eba:	e7dd      	b.n	402e78 <__smakebuf_r+0x4c>
  402ebc:	004025ed 	.word	0x004025ed

00402ec0 <malloc>:
  402ec0:	4b02      	ldr	r3, [pc, #8]	; (402ecc <malloc+0xc>)
  402ec2:	4601      	mov	r1, r0
  402ec4:	6818      	ldr	r0, [r3, #0]
  402ec6:	f000 b803 	b.w	402ed0 <_malloc_r>
  402eca:	bf00      	nop
  402ecc:	20000008 	.word	0x20000008

00402ed0 <_malloc_r>:
  402ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ed4:	f101 060b 	add.w	r6, r1, #11
  402ed8:	2e16      	cmp	r6, #22
  402eda:	b083      	sub	sp, #12
  402edc:	4605      	mov	r5, r0
  402ede:	f240 809e 	bls.w	40301e <_malloc_r+0x14e>
  402ee2:	f036 0607 	bics.w	r6, r6, #7
  402ee6:	f100 80bd 	bmi.w	403064 <_malloc_r+0x194>
  402eea:	42b1      	cmp	r1, r6
  402eec:	f200 80ba 	bhi.w	403064 <_malloc_r+0x194>
  402ef0:	f000 fc04 	bl	4036fc <__malloc_lock>
  402ef4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402ef8:	f0c0 8293 	bcc.w	403422 <_malloc_r+0x552>
  402efc:	0a73      	lsrs	r3, r6, #9
  402efe:	f000 80b8 	beq.w	403072 <_malloc_r+0x1a2>
  402f02:	2b04      	cmp	r3, #4
  402f04:	f200 8179 	bhi.w	4031fa <_malloc_r+0x32a>
  402f08:	09b3      	lsrs	r3, r6, #6
  402f0a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402f0e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402f12:	00c3      	lsls	r3, r0, #3
  402f14:	4fbf      	ldr	r7, [pc, #764]	; (403214 <_malloc_r+0x344>)
  402f16:	443b      	add	r3, r7
  402f18:	f1a3 0108 	sub.w	r1, r3, #8
  402f1c:	685c      	ldr	r4, [r3, #4]
  402f1e:	42a1      	cmp	r1, r4
  402f20:	d106      	bne.n	402f30 <_malloc_r+0x60>
  402f22:	e00c      	b.n	402f3e <_malloc_r+0x6e>
  402f24:	2a00      	cmp	r2, #0
  402f26:	f280 80aa 	bge.w	40307e <_malloc_r+0x1ae>
  402f2a:	68e4      	ldr	r4, [r4, #12]
  402f2c:	42a1      	cmp	r1, r4
  402f2e:	d006      	beq.n	402f3e <_malloc_r+0x6e>
  402f30:	6863      	ldr	r3, [r4, #4]
  402f32:	f023 0303 	bic.w	r3, r3, #3
  402f36:	1b9a      	subs	r2, r3, r6
  402f38:	2a0f      	cmp	r2, #15
  402f3a:	ddf3      	ble.n	402f24 <_malloc_r+0x54>
  402f3c:	4670      	mov	r0, lr
  402f3e:	693c      	ldr	r4, [r7, #16]
  402f40:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403228 <_malloc_r+0x358>
  402f44:	4574      	cmp	r4, lr
  402f46:	f000 81ab 	beq.w	4032a0 <_malloc_r+0x3d0>
  402f4a:	6863      	ldr	r3, [r4, #4]
  402f4c:	f023 0303 	bic.w	r3, r3, #3
  402f50:	1b9a      	subs	r2, r3, r6
  402f52:	2a0f      	cmp	r2, #15
  402f54:	f300 8190 	bgt.w	403278 <_malloc_r+0x3a8>
  402f58:	2a00      	cmp	r2, #0
  402f5a:	f8c7 e014 	str.w	lr, [r7, #20]
  402f5e:	f8c7 e010 	str.w	lr, [r7, #16]
  402f62:	f280 809d 	bge.w	4030a0 <_malloc_r+0x1d0>
  402f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402f6a:	f080 8161 	bcs.w	403230 <_malloc_r+0x360>
  402f6e:	08db      	lsrs	r3, r3, #3
  402f70:	f103 0c01 	add.w	ip, r3, #1
  402f74:	1099      	asrs	r1, r3, #2
  402f76:	687a      	ldr	r2, [r7, #4]
  402f78:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402f7c:	f8c4 8008 	str.w	r8, [r4, #8]
  402f80:	2301      	movs	r3, #1
  402f82:	408b      	lsls	r3, r1
  402f84:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402f88:	4313      	orrs	r3, r2
  402f8a:	3908      	subs	r1, #8
  402f8c:	60e1      	str	r1, [r4, #12]
  402f8e:	607b      	str	r3, [r7, #4]
  402f90:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402f94:	f8c8 400c 	str.w	r4, [r8, #12]
  402f98:	1082      	asrs	r2, r0, #2
  402f9a:	2401      	movs	r4, #1
  402f9c:	4094      	lsls	r4, r2
  402f9e:	429c      	cmp	r4, r3
  402fa0:	f200 808b 	bhi.w	4030ba <_malloc_r+0x1ea>
  402fa4:	421c      	tst	r4, r3
  402fa6:	d106      	bne.n	402fb6 <_malloc_r+0xe6>
  402fa8:	f020 0003 	bic.w	r0, r0, #3
  402fac:	0064      	lsls	r4, r4, #1
  402fae:	421c      	tst	r4, r3
  402fb0:	f100 0004 	add.w	r0, r0, #4
  402fb4:	d0fa      	beq.n	402fac <_malloc_r+0xdc>
  402fb6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402fba:	46cc      	mov	ip, r9
  402fbc:	4680      	mov	r8, r0
  402fbe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402fc2:	459c      	cmp	ip, r3
  402fc4:	d107      	bne.n	402fd6 <_malloc_r+0x106>
  402fc6:	e16d      	b.n	4032a4 <_malloc_r+0x3d4>
  402fc8:	2a00      	cmp	r2, #0
  402fca:	f280 817b 	bge.w	4032c4 <_malloc_r+0x3f4>
  402fce:	68db      	ldr	r3, [r3, #12]
  402fd0:	459c      	cmp	ip, r3
  402fd2:	f000 8167 	beq.w	4032a4 <_malloc_r+0x3d4>
  402fd6:	6859      	ldr	r1, [r3, #4]
  402fd8:	f021 0103 	bic.w	r1, r1, #3
  402fdc:	1b8a      	subs	r2, r1, r6
  402fde:	2a0f      	cmp	r2, #15
  402fe0:	ddf2      	ble.n	402fc8 <_malloc_r+0xf8>
  402fe2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402fe6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402fea:	9300      	str	r3, [sp, #0]
  402fec:	199c      	adds	r4, r3, r6
  402fee:	4628      	mov	r0, r5
  402ff0:	f046 0601 	orr.w	r6, r6, #1
  402ff4:	f042 0501 	orr.w	r5, r2, #1
  402ff8:	605e      	str	r6, [r3, #4]
  402ffa:	f8c8 c00c 	str.w	ip, [r8, #12]
  402ffe:	f8cc 8008 	str.w	r8, [ip, #8]
  403002:	617c      	str	r4, [r7, #20]
  403004:	613c      	str	r4, [r7, #16]
  403006:	f8c4 e00c 	str.w	lr, [r4, #12]
  40300a:	f8c4 e008 	str.w	lr, [r4, #8]
  40300e:	6065      	str	r5, [r4, #4]
  403010:	505a      	str	r2, [r3, r1]
  403012:	f000 fb79 	bl	403708 <__malloc_unlock>
  403016:	9b00      	ldr	r3, [sp, #0]
  403018:	f103 0408 	add.w	r4, r3, #8
  40301c:	e01e      	b.n	40305c <_malloc_r+0x18c>
  40301e:	2910      	cmp	r1, #16
  403020:	d820      	bhi.n	403064 <_malloc_r+0x194>
  403022:	f000 fb6b 	bl	4036fc <__malloc_lock>
  403026:	2610      	movs	r6, #16
  403028:	2318      	movs	r3, #24
  40302a:	2002      	movs	r0, #2
  40302c:	4f79      	ldr	r7, [pc, #484]	; (403214 <_malloc_r+0x344>)
  40302e:	443b      	add	r3, r7
  403030:	f1a3 0208 	sub.w	r2, r3, #8
  403034:	685c      	ldr	r4, [r3, #4]
  403036:	4294      	cmp	r4, r2
  403038:	f000 813d 	beq.w	4032b6 <_malloc_r+0x3e6>
  40303c:	6863      	ldr	r3, [r4, #4]
  40303e:	68e1      	ldr	r1, [r4, #12]
  403040:	68a6      	ldr	r6, [r4, #8]
  403042:	f023 0303 	bic.w	r3, r3, #3
  403046:	4423      	add	r3, r4
  403048:	4628      	mov	r0, r5
  40304a:	685a      	ldr	r2, [r3, #4]
  40304c:	60f1      	str	r1, [r6, #12]
  40304e:	f042 0201 	orr.w	r2, r2, #1
  403052:	608e      	str	r6, [r1, #8]
  403054:	605a      	str	r2, [r3, #4]
  403056:	f000 fb57 	bl	403708 <__malloc_unlock>
  40305a:	3408      	adds	r4, #8
  40305c:	4620      	mov	r0, r4
  40305e:	b003      	add	sp, #12
  403060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403064:	2400      	movs	r4, #0
  403066:	230c      	movs	r3, #12
  403068:	4620      	mov	r0, r4
  40306a:	602b      	str	r3, [r5, #0]
  40306c:	b003      	add	sp, #12
  40306e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403072:	2040      	movs	r0, #64	; 0x40
  403074:	f44f 7300 	mov.w	r3, #512	; 0x200
  403078:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40307c:	e74a      	b.n	402f14 <_malloc_r+0x44>
  40307e:	4423      	add	r3, r4
  403080:	68e1      	ldr	r1, [r4, #12]
  403082:	685a      	ldr	r2, [r3, #4]
  403084:	68a6      	ldr	r6, [r4, #8]
  403086:	f042 0201 	orr.w	r2, r2, #1
  40308a:	60f1      	str	r1, [r6, #12]
  40308c:	4628      	mov	r0, r5
  40308e:	608e      	str	r6, [r1, #8]
  403090:	605a      	str	r2, [r3, #4]
  403092:	f000 fb39 	bl	403708 <__malloc_unlock>
  403096:	3408      	adds	r4, #8
  403098:	4620      	mov	r0, r4
  40309a:	b003      	add	sp, #12
  40309c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030a0:	4423      	add	r3, r4
  4030a2:	4628      	mov	r0, r5
  4030a4:	685a      	ldr	r2, [r3, #4]
  4030a6:	f042 0201 	orr.w	r2, r2, #1
  4030aa:	605a      	str	r2, [r3, #4]
  4030ac:	f000 fb2c 	bl	403708 <__malloc_unlock>
  4030b0:	3408      	adds	r4, #8
  4030b2:	4620      	mov	r0, r4
  4030b4:	b003      	add	sp, #12
  4030b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030ba:	68bc      	ldr	r4, [r7, #8]
  4030bc:	6863      	ldr	r3, [r4, #4]
  4030be:	f023 0803 	bic.w	r8, r3, #3
  4030c2:	45b0      	cmp	r8, r6
  4030c4:	d304      	bcc.n	4030d0 <_malloc_r+0x200>
  4030c6:	eba8 0306 	sub.w	r3, r8, r6
  4030ca:	2b0f      	cmp	r3, #15
  4030cc:	f300 8085 	bgt.w	4031da <_malloc_r+0x30a>
  4030d0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40322c <_malloc_r+0x35c>
  4030d4:	4b50      	ldr	r3, [pc, #320]	; (403218 <_malloc_r+0x348>)
  4030d6:	f8d9 2000 	ldr.w	r2, [r9]
  4030da:	681b      	ldr	r3, [r3, #0]
  4030dc:	3201      	adds	r2, #1
  4030de:	4433      	add	r3, r6
  4030e0:	eb04 0a08 	add.w	sl, r4, r8
  4030e4:	f000 8155 	beq.w	403392 <_malloc_r+0x4c2>
  4030e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4030ec:	330f      	adds	r3, #15
  4030ee:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4030f2:	f02b 0b0f 	bic.w	fp, fp, #15
  4030f6:	4659      	mov	r1, fp
  4030f8:	4628      	mov	r0, r5
  4030fa:	f000 fcb1 	bl	403a60 <_sbrk_r>
  4030fe:	1c41      	adds	r1, r0, #1
  403100:	4602      	mov	r2, r0
  403102:	f000 80fc 	beq.w	4032fe <_malloc_r+0x42e>
  403106:	4582      	cmp	sl, r0
  403108:	f200 80f7 	bhi.w	4032fa <_malloc_r+0x42a>
  40310c:	4b43      	ldr	r3, [pc, #268]	; (40321c <_malloc_r+0x34c>)
  40310e:	6819      	ldr	r1, [r3, #0]
  403110:	4459      	add	r1, fp
  403112:	6019      	str	r1, [r3, #0]
  403114:	f000 814d 	beq.w	4033b2 <_malloc_r+0x4e2>
  403118:	f8d9 0000 	ldr.w	r0, [r9]
  40311c:	3001      	adds	r0, #1
  40311e:	bf1b      	ittet	ne
  403120:	eba2 0a0a 	subne.w	sl, r2, sl
  403124:	4451      	addne	r1, sl
  403126:	f8c9 2000 	streq.w	r2, [r9]
  40312a:	6019      	strne	r1, [r3, #0]
  40312c:	f012 0107 	ands.w	r1, r2, #7
  403130:	f000 8115 	beq.w	40335e <_malloc_r+0x48e>
  403134:	f1c1 0008 	rsb	r0, r1, #8
  403138:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40313c:	4402      	add	r2, r0
  40313e:	3108      	adds	r1, #8
  403140:	eb02 090b 	add.w	r9, r2, fp
  403144:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403148:	eba1 0909 	sub.w	r9, r1, r9
  40314c:	4649      	mov	r1, r9
  40314e:	4628      	mov	r0, r5
  403150:	9301      	str	r3, [sp, #4]
  403152:	9200      	str	r2, [sp, #0]
  403154:	f000 fc84 	bl	403a60 <_sbrk_r>
  403158:	1c43      	adds	r3, r0, #1
  40315a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40315e:	f000 8143 	beq.w	4033e8 <_malloc_r+0x518>
  403162:	1a80      	subs	r0, r0, r2
  403164:	4448      	add	r0, r9
  403166:	f040 0001 	orr.w	r0, r0, #1
  40316a:	6819      	ldr	r1, [r3, #0]
  40316c:	60ba      	str	r2, [r7, #8]
  40316e:	4449      	add	r1, r9
  403170:	42bc      	cmp	r4, r7
  403172:	6050      	str	r0, [r2, #4]
  403174:	6019      	str	r1, [r3, #0]
  403176:	d017      	beq.n	4031a8 <_malloc_r+0x2d8>
  403178:	f1b8 0f0f 	cmp.w	r8, #15
  40317c:	f240 80fb 	bls.w	403376 <_malloc_r+0x4a6>
  403180:	6860      	ldr	r0, [r4, #4]
  403182:	f1a8 020c 	sub.w	r2, r8, #12
  403186:	f022 0207 	bic.w	r2, r2, #7
  40318a:	eb04 0e02 	add.w	lr, r4, r2
  40318e:	f000 0001 	and.w	r0, r0, #1
  403192:	f04f 0c05 	mov.w	ip, #5
  403196:	4310      	orrs	r0, r2
  403198:	2a0f      	cmp	r2, #15
  40319a:	6060      	str	r0, [r4, #4]
  40319c:	f8ce c004 	str.w	ip, [lr, #4]
  4031a0:	f8ce c008 	str.w	ip, [lr, #8]
  4031a4:	f200 8117 	bhi.w	4033d6 <_malloc_r+0x506>
  4031a8:	4b1d      	ldr	r3, [pc, #116]	; (403220 <_malloc_r+0x350>)
  4031aa:	68bc      	ldr	r4, [r7, #8]
  4031ac:	681a      	ldr	r2, [r3, #0]
  4031ae:	4291      	cmp	r1, r2
  4031b0:	bf88      	it	hi
  4031b2:	6019      	strhi	r1, [r3, #0]
  4031b4:	4b1b      	ldr	r3, [pc, #108]	; (403224 <_malloc_r+0x354>)
  4031b6:	681a      	ldr	r2, [r3, #0]
  4031b8:	4291      	cmp	r1, r2
  4031ba:	6862      	ldr	r2, [r4, #4]
  4031bc:	bf88      	it	hi
  4031be:	6019      	strhi	r1, [r3, #0]
  4031c0:	f022 0203 	bic.w	r2, r2, #3
  4031c4:	4296      	cmp	r6, r2
  4031c6:	eba2 0306 	sub.w	r3, r2, r6
  4031ca:	d801      	bhi.n	4031d0 <_malloc_r+0x300>
  4031cc:	2b0f      	cmp	r3, #15
  4031ce:	dc04      	bgt.n	4031da <_malloc_r+0x30a>
  4031d0:	4628      	mov	r0, r5
  4031d2:	f000 fa99 	bl	403708 <__malloc_unlock>
  4031d6:	2400      	movs	r4, #0
  4031d8:	e740      	b.n	40305c <_malloc_r+0x18c>
  4031da:	19a2      	adds	r2, r4, r6
  4031dc:	f043 0301 	orr.w	r3, r3, #1
  4031e0:	f046 0601 	orr.w	r6, r6, #1
  4031e4:	6066      	str	r6, [r4, #4]
  4031e6:	4628      	mov	r0, r5
  4031e8:	60ba      	str	r2, [r7, #8]
  4031ea:	6053      	str	r3, [r2, #4]
  4031ec:	f000 fa8c 	bl	403708 <__malloc_unlock>
  4031f0:	3408      	adds	r4, #8
  4031f2:	4620      	mov	r0, r4
  4031f4:	b003      	add	sp, #12
  4031f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031fa:	2b14      	cmp	r3, #20
  4031fc:	d971      	bls.n	4032e2 <_malloc_r+0x412>
  4031fe:	2b54      	cmp	r3, #84	; 0x54
  403200:	f200 80a3 	bhi.w	40334a <_malloc_r+0x47a>
  403204:	0b33      	lsrs	r3, r6, #12
  403206:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40320a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40320e:	00c3      	lsls	r3, r0, #3
  403210:	e680      	b.n	402f14 <_malloc_r+0x44>
  403212:	bf00      	nop
  403214:	200005a8 	.word	0x200005a8
  403218:	20000aac 	.word	0x20000aac
  40321c:	20000a7c 	.word	0x20000a7c
  403220:	20000aa4 	.word	0x20000aa4
  403224:	20000aa8 	.word	0x20000aa8
  403228:	200005b0 	.word	0x200005b0
  40322c:	200009b0 	.word	0x200009b0
  403230:	0a5a      	lsrs	r2, r3, #9
  403232:	2a04      	cmp	r2, #4
  403234:	d95b      	bls.n	4032ee <_malloc_r+0x41e>
  403236:	2a14      	cmp	r2, #20
  403238:	f200 80ae 	bhi.w	403398 <_malloc_r+0x4c8>
  40323c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403240:	00c9      	lsls	r1, r1, #3
  403242:	325b      	adds	r2, #91	; 0x5b
  403244:	eb07 0c01 	add.w	ip, r7, r1
  403248:	5879      	ldr	r1, [r7, r1]
  40324a:	f1ac 0c08 	sub.w	ip, ip, #8
  40324e:	458c      	cmp	ip, r1
  403250:	f000 8088 	beq.w	403364 <_malloc_r+0x494>
  403254:	684a      	ldr	r2, [r1, #4]
  403256:	f022 0203 	bic.w	r2, r2, #3
  40325a:	4293      	cmp	r3, r2
  40325c:	d273      	bcs.n	403346 <_malloc_r+0x476>
  40325e:	6889      	ldr	r1, [r1, #8]
  403260:	458c      	cmp	ip, r1
  403262:	d1f7      	bne.n	403254 <_malloc_r+0x384>
  403264:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403268:	687b      	ldr	r3, [r7, #4]
  40326a:	60e2      	str	r2, [r4, #12]
  40326c:	f8c4 c008 	str.w	ip, [r4, #8]
  403270:	6094      	str	r4, [r2, #8]
  403272:	f8cc 400c 	str.w	r4, [ip, #12]
  403276:	e68f      	b.n	402f98 <_malloc_r+0xc8>
  403278:	19a1      	adds	r1, r4, r6
  40327a:	f046 0c01 	orr.w	ip, r6, #1
  40327e:	f042 0601 	orr.w	r6, r2, #1
  403282:	f8c4 c004 	str.w	ip, [r4, #4]
  403286:	4628      	mov	r0, r5
  403288:	6179      	str	r1, [r7, #20]
  40328a:	6139      	str	r1, [r7, #16]
  40328c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403290:	f8c1 e008 	str.w	lr, [r1, #8]
  403294:	604e      	str	r6, [r1, #4]
  403296:	50e2      	str	r2, [r4, r3]
  403298:	f000 fa36 	bl	403708 <__malloc_unlock>
  40329c:	3408      	adds	r4, #8
  40329e:	e6dd      	b.n	40305c <_malloc_r+0x18c>
  4032a0:	687b      	ldr	r3, [r7, #4]
  4032a2:	e679      	b.n	402f98 <_malloc_r+0xc8>
  4032a4:	f108 0801 	add.w	r8, r8, #1
  4032a8:	f018 0f03 	tst.w	r8, #3
  4032ac:	f10c 0c08 	add.w	ip, ip, #8
  4032b0:	f47f ae85 	bne.w	402fbe <_malloc_r+0xee>
  4032b4:	e02d      	b.n	403312 <_malloc_r+0x442>
  4032b6:	68dc      	ldr	r4, [r3, #12]
  4032b8:	42a3      	cmp	r3, r4
  4032ba:	bf08      	it	eq
  4032bc:	3002      	addeq	r0, #2
  4032be:	f43f ae3e 	beq.w	402f3e <_malloc_r+0x6e>
  4032c2:	e6bb      	b.n	40303c <_malloc_r+0x16c>
  4032c4:	4419      	add	r1, r3
  4032c6:	461c      	mov	r4, r3
  4032c8:	684a      	ldr	r2, [r1, #4]
  4032ca:	68db      	ldr	r3, [r3, #12]
  4032cc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4032d0:	f042 0201 	orr.w	r2, r2, #1
  4032d4:	604a      	str	r2, [r1, #4]
  4032d6:	4628      	mov	r0, r5
  4032d8:	60f3      	str	r3, [r6, #12]
  4032da:	609e      	str	r6, [r3, #8]
  4032dc:	f000 fa14 	bl	403708 <__malloc_unlock>
  4032e0:	e6bc      	b.n	40305c <_malloc_r+0x18c>
  4032e2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4032e6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4032ea:	00c3      	lsls	r3, r0, #3
  4032ec:	e612      	b.n	402f14 <_malloc_r+0x44>
  4032ee:	099a      	lsrs	r2, r3, #6
  4032f0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4032f4:	00c9      	lsls	r1, r1, #3
  4032f6:	3238      	adds	r2, #56	; 0x38
  4032f8:	e7a4      	b.n	403244 <_malloc_r+0x374>
  4032fa:	42bc      	cmp	r4, r7
  4032fc:	d054      	beq.n	4033a8 <_malloc_r+0x4d8>
  4032fe:	68bc      	ldr	r4, [r7, #8]
  403300:	6862      	ldr	r2, [r4, #4]
  403302:	f022 0203 	bic.w	r2, r2, #3
  403306:	e75d      	b.n	4031c4 <_malloc_r+0x2f4>
  403308:	f859 3908 	ldr.w	r3, [r9], #-8
  40330c:	4599      	cmp	r9, r3
  40330e:	f040 8086 	bne.w	40341e <_malloc_r+0x54e>
  403312:	f010 0f03 	tst.w	r0, #3
  403316:	f100 30ff 	add.w	r0, r0, #4294967295
  40331a:	d1f5      	bne.n	403308 <_malloc_r+0x438>
  40331c:	687b      	ldr	r3, [r7, #4]
  40331e:	ea23 0304 	bic.w	r3, r3, r4
  403322:	607b      	str	r3, [r7, #4]
  403324:	0064      	lsls	r4, r4, #1
  403326:	429c      	cmp	r4, r3
  403328:	f63f aec7 	bhi.w	4030ba <_malloc_r+0x1ea>
  40332c:	2c00      	cmp	r4, #0
  40332e:	f43f aec4 	beq.w	4030ba <_malloc_r+0x1ea>
  403332:	421c      	tst	r4, r3
  403334:	4640      	mov	r0, r8
  403336:	f47f ae3e 	bne.w	402fb6 <_malloc_r+0xe6>
  40333a:	0064      	lsls	r4, r4, #1
  40333c:	421c      	tst	r4, r3
  40333e:	f100 0004 	add.w	r0, r0, #4
  403342:	d0fa      	beq.n	40333a <_malloc_r+0x46a>
  403344:	e637      	b.n	402fb6 <_malloc_r+0xe6>
  403346:	468c      	mov	ip, r1
  403348:	e78c      	b.n	403264 <_malloc_r+0x394>
  40334a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40334e:	d815      	bhi.n	40337c <_malloc_r+0x4ac>
  403350:	0bf3      	lsrs	r3, r6, #15
  403352:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403356:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40335a:	00c3      	lsls	r3, r0, #3
  40335c:	e5da      	b.n	402f14 <_malloc_r+0x44>
  40335e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403362:	e6ed      	b.n	403140 <_malloc_r+0x270>
  403364:	687b      	ldr	r3, [r7, #4]
  403366:	1092      	asrs	r2, r2, #2
  403368:	2101      	movs	r1, #1
  40336a:	fa01 f202 	lsl.w	r2, r1, r2
  40336e:	4313      	orrs	r3, r2
  403370:	607b      	str	r3, [r7, #4]
  403372:	4662      	mov	r2, ip
  403374:	e779      	b.n	40326a <_malloc_r+0x39a>
  403376:	2301      	movs	r3, #1
  403378:	6053      	str	r3, [r2, #4]
  40337a:	e729      	b.n	4031d0 <_malloc_r+0x300>
  40337c:	f240 5254 	movw	r2, #1364	; 0x554
  403380:	4293      	cmp	r3, r2
  403382:	d822      	bhi.n	4033ca <_malloc_r+0x4fa>
  403384:	0cb3      	lsrs	r3, r6, #18
  403386:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40338a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40338e:	00c3      	lsls	r3, r0, #3
  403390:	e5c0      	b.n	402f14 <_malloc_r+0x44>
  403392:	f103 0b10 	add.w	fp, r3, #16
  403396:	e6ae      	b.n	4030f6 <_malloc_r+0x226>
  403398:	2a54      	cmp	r2, #84	; 0x54
  40339a:	d829      	bhi.n	4033f0 <_malloc_r+0x520>
  40339c:	0b1a      	lsrs	r2, r3, #12
  40339e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4033a2:	00c9      	lsls	r1, r1, #3
  4033a4:	326e      	adds	r2, #110	; 0x6e
  4033a6:	e74d      	b.n	403244 <_malloc_r+0x374>
  4033a8:	4b20      	ldr	r3, [pc, #128]	; (40342c <_malloc_r+0x55c>)
  4033aa:	6819      	ldr	r1, [r3, #0]
  4033ac:	4459      	add	r1, fp
  4033ae:	6019      	str	r1, [r3, #0]
  4033b0:	e6b2      	b.n	403118 <_malloc_r+0x248>
  4033b2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4033b6:	2800      	cmp	r0, #0
  4033b8:	f47f aeae 	bne.w	403118 <_malloc_r+0x248>
  4033bc:	eb08 030b 	add.w	r3, r8, fp
  4033c0:	68ba      	ldr	r2, [r7, #8]
  4033c2:	f043 0301 	orr.w	r3, r3, #1
  4033c6:	6053      	str	r3, [r2, #4]
  4033c8:	e6ee      	b.n	4031a8 <_malloc_r+0x2d8>
  4033ca:	207f      	movs	r0, #127	; 0x7f
  4033cc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4033d0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4033d4:	e59e      	b.n	402f14 <_malloc_r+0x44>
  4033d6:	f104 0108 	add.w	r1, r4, #8
  4033da:	4628      	mov	r0, r5
  4033dc:	9300      	str	r3, [sp, #0]
  4033de:	f7ff fa59 	bl	402894 <_free_r>
  4033e2:	9b00      	ldr	r3, [sp, #0]
  4033e4:	6819      	ldr	r1, [r3, #0]
  4033e6:	e6df      	b.n	4031a8 <_malloc_r+0x2d8>
  4033e8:	2001      	movs	r0, #1
  4033ea:	f04f 0900 	mov.w	r9, #0
  4033ee:	e6bc      	b.n	40316a <_malloc_r+0x29a>
  4033f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4033f4:	d805      	bhi.n	403402 <_malloc_r+0x532>
  4033f6:	0bda      	lsrs	r2, r3, #15
  4033f8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4033fc:	00c9      	lsls	r1, r1, #3
  4033fe:	3277      	adds	r2, #119	; 0x77
  403400:	e720      	b.n	403244 <_malloc_r+0x374>
  403402:	f240 5154 	movw	r1, #1364	; 0x554
  403406:	428a      	cmp	r2, r1
  403408:	d805      	bhi.n	403416 <_malloc_r+0x546>
  40340a:	0c9a      	lsrs	r2, r3, #18
  40340c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403410:	00c9      	lsls	r1, r1, #3
  403412:	327c      	adds	r2, #124	; 0x7c
  403414:	e716      	b.n	403244 <_malloc_r+0x374>
  403416:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40341a:	227e      	movs	r2, #126	; 0x7e
  40341c:	e712      	b.n	403244 <_malloc_r+0x374>
  40341e:	687b      	ldr	r3, [r7, #4]
  403420:	e780      	b.n	403324 <_malloc_r+0x454>
  403422:	08f0      	lsrs	r0, r6, #3
  403424:	f106 0308 	add.w	r3, r6, #8
  403428:	e600      	b.n	40302c <_malloc_r+0x15c>
  40342a:	bf00      	nop
  40342c:	20000a7c 	.word	0x20000a7c

00403430 <__ascii_mbtowc>:
  403430:	b082      	sub	sp, #8
  403432:	b149      	cbz	r1, 403448 <__ascii_mbtowc+0x18>
  403434:	b15a      	cbz	r2, 40344e <__ascii_mbtowc+0x1e>
  403436:	b16b      	cbz	r3, 403454 <__ascii_mbtowc+0x24>
  403438:	7813      	ldrb	r3, [r2, #0]
  40343a:	600b      	str	r3, [r1, #0]
  40343c:	7812      	ldrb	r2, [r2, #0]
  40343e:	1c10      	adds	r0, r2, #0
  403440:	bf18      	it	ne
  403442:	2001      	movne	r0, #1
  403444:	b002      	add	sp, #8
  403446:	4770      	bx	lr
  403448:	a901      	add	r1, sp, #4
  40344a:	2a00      	cmp	r2, #0
  40344c:	d1f3      	bne.n	403436 <__ascii_mbtowc+0x6>
  40344e:	4610      	mov	r0, r2
  403450:	b002      	add	sp, #8
  403452:	4770      	bx	lr
  403454:	f06f 0001 	mvn.w	r0, #1
  403458:	e7f4      	b.n	403444 <__ascii_mbtowc+0x14>
  40345a:	bf00      	nop
  40345c:	0000      	movs	r0, r0
	...

00403460 <memchr>:
  403460:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403464:	2a10      	cmp	r2, #16
  403466:	db2b      	blt.n	4034c0 <memchr+0x60>
  403468:	f010 0f07 	tst.w	r0, #7
  40346c:	d008      	beq.n	403480 <memchr+0x20>
  40346e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403472:	3a01      	subs	r2, #1
  403474:	428b      	cmp	r3, r1
  403476:	d02d      	beq.n	4034d4 <memchr+0x74>
  403478:	f010 0f07 	tst.w	r0, #7
  40347c:	b342      	cbz	r2, 4034d0 <memchr+0x70>
  40347e:	d1f6      	bne.n	40346e <memchr+0xe>
  403480:	b4f0      	push	{r4, r5, r6, r7}
  403482:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403486:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40348a:	f022 0407 	bic.w	r4, r2, #7
  40348e:	f07f 0700 	mvns.w	r7, #0
  403492:	2300      	movs	r3, #0
  403494:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403498:	3c08      	subs	r4, #8
  40349a:	ea85 0501 	eor.w	r5, r5, r1
  40349e:	ea86 0601 	eor.w	r6, r6, r1
  4034a2:	fa85 f547 	uadd8	r5, r5, r7
  4034a6:	faa3 f587 	sel	r5, r3, r7
  4034aa:	fa86 f647 	uadd8	r6, r6, r7
  4034ae:	faa5 f687 	sel	r6, r5, r7
  4034b2:	b98e      	cbnz	r6, 4034d8 <memchr+0x78>
  4034b4:	d1ee      	bne.n	403494 <memchr+0x34>
  4034b6:	bcf0      	pop	{r4, r5, r6, r7}
  4034b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4034bc:	f002 0207 	and.w	r2, r2, #7
  4034c0:	b132      	cbz	r2, 4034d0 <memchr+0x70>
  4034c2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4034c6:	3a01      	subs	r2, #1
  4034c8:	ea83 0301 	eor.w	r3, r3, r1
  4034cc:	b113      	cbz	r3, 4034d4 <memchr+0x74>
  4034ce:	d1f8      	bne.n	4034c2 <memchr+0x62>
  4034d0:	2000      	movs	r0, #0
  4034d2:	4770      	bx	lr
  4034d4:	3801      	subs	r0, #1
  4034d6:	4770      	bx	lr
  4034d8:	2d00      	cmp	r5, #0
  4034da:	bf06      	itte	eq
  4034dc:	4635      	moveq	r5, r6
  4034de:	3803      	subeq	r0, #3
  4034e0:	3807      	subne	r0, #7
  4034e2:	f015 0f01 	tst.w	r5, #1
  4034e6:	d107      	bne.n	4034f8 <memchr+0x98>
  4034e8:	3001      	adds	r0, #1
  4034ea:	f415 7f80 	tst.w	r5, #256	; 0x100
  4034ee:	bf02      	ittt	eq
  4034f0:	3001      	addeq	r0, #1
  4034f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4034f6:	3001      	addeq	r0, #1
  4034f8:	bcf0      	pop	{r4, r5, r6, r7}
  4034fa:	3801      	subs	r0, #1
  4034fc:	4770      	bx	lr
  4034fe:	bf00      	nop

00403500 <memcpy>:
  403500:	4684      	mov	ip, r0
  403502:	ea41 0300 	orr.w	r3, r1, r0
  403506:	f013 0303 	ands.w	r3, r3, #3
  40350a:	d16d      	bne.n	4035e8 <memcpy+0xe8>
  40350c:	3a40      	subs	r2, #64	; 0x40
  40350e:	d341      	bcc.n	403594 <memcpy+0x94>
  403510:	f851 3b04 	ldr.w	r3, [r1], #4
  403514:	f840 3b04 	str.w	r3, [r0], #4
  403518:	f851 3b04 	ldr.w	r3, [r1], #4
  40351c:	f840 3b04 	str.w	r3, [r0], #4
  403520:	f851 3b04 	ldr.w	r3, [r1], #4
  403524:	f840 3b04 	str.w	r3, [r0], #4
  403528:	f851 3b04 	ldr.w	r3, [r1], #4
  40352c:	f840 3b04 	str.w	r3, [r0], #4
  403530:	f851 3b04 	ldr.w	r3, [r1], #4
  403534:	f840 3b04 	str.w	r3, [r0], #4
  403538:	f851 3b04 	ldr.w	r3, [r1], #4
  40353c:	f840 3b04 	str.w	r3, [r0], #4
  403540:	f851 3b04 	ldr.w	r3, [r1], #4
  403544:	f840 3b04 	str.w	r3, [r0], #4
  403548:	f851 3b04 	ldr.w	r3, [r1], #4
  40354c:	f840 3b04 	str.w	r3, [r0], #4
  403550:	f851 3b04 	ldr.w	r3, [r1], #4
  403554:	f840 3b04 	str.w	r3, [r0], #4
  403558:	f851 3b04 	ldr.w	r3, [r1], #4
  40355c:	f840 3b04 	str.w	r3, [r0], #4
  403560:	f851 3b04 	ldr.w	r3, [r1], #4
  403564:	f840 3b04 	str.w	r3, [r0], #4
  403568:	f851 3b04 	ldr.w	r3, [r1], #4
  40356c:	f840 3b04 	str.w	r3, [r0], #4
  403570:	f851 3b04 	ldr.w	r3, [r1], #4
  403574:	f840 3b04 	str.w	r3, [r0], #4
  403578:	f851 3b04 	ldr.w	r3, [r1], #4
  40357c:	f840 3b04 	str.w	r3, [r0], #4
  403580:	f851 3b04 	ldr.w	r3, [r1], #4
  403584:	f840 3b04 	str.w	r3, [r0], #4
  403588:	f851 3b04 	ldr.w	r3, [r1], #4
  40358c:	f840 3b04 	str.w	r3, [r0], #4
  403590:	3a40      	subs	r2, #64	; 0x40
  403592:	d2bd      	bcs.n	403510 <memcpy+0x10>
  403594:	3230      	adds	r2, #48	; 0x30
  403596:	d311      	bcc.n	4035bc <memcpy+0xbc>
  403598:	f851 3b04 	ldr.w	r3, [r1], #4
  40359c:	f840 3b04 	str.w	r3, [r0], #4
  4035a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035a4:	f840 3b04 	str.w	r3, [r0], #4
  4035a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4035ac:	f840 3b04 	str.w	r3, [r0], #4
  4035b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035b4:	f840 3b04 	str.w	r3, [r0], #4
  4035b8:	3a10      	subs	r2, #16
  4035ba:	d2ed      	bcs.n	403598 <memcpy+0x98>
  4035bc:	320c      	adds	r2, #12
  4035be:	d305      	bcc.n	4035cc <memcpy+0xcc>
  4035c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035c4:	f840 3b04 	str.w	r3, [r0], #4
  4035c8:	3a04      	subs	r2, #4
  4035ca:	d2f9      	bcs.n	4035c0 <memcpy+0xc0>
  4035cc:	3204      	adds	r2, #4
  4035ce:	d008      	beq.n	4035e2 <memcpy+0xe2>
  4035d0:	07d2      	lsls	r2, r2, #31
  4035d2:	bf1c      	itt	ne
  4035d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4035d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4035dc:	d301      	bcc.n	4035e2 <memcpy+0xe2>
  4035de:	880b      	ldrh	r3, [r1, #0]
  4035e0:	8003      	strh	r3, [r0, #0]
  4035e2:	4660      	mov	r0, ip
  4035e4:	4770      	bx	lr
  4035e6:	bf00      	nop
  4035e8:	2a08      	cmp	r2, #8
  4035ea:	d313      	bcc.n	403614 <memcpy+0x114>
  4035ec:	078b      	lsls	r3, r1, #30
  4035ee:	d08d      	beq.n	40350c <memcpy+0xc>
  4035f0:	f010 0303 	ands.w	r3, r0, #3
  4035f4:	d08a      	beq.n	40350c <memcpy+0xc>
  4035f6:	f1c3 0304 	rsb	r3, r3, #4
  4035fa:	1ad2      	subs	r2, r2, r3
  4035fc:	07db      	lsls	r3, r3, #31
  4035fe:	bf1c      	itt	ne
  403600:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403604:	f800 3b01 	strbne.w	r3, [r0], #1
  403608:	d380      	bcc.n	40350c <memcpy+0xc>
  40360a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40360e:	f820 3b02 	strh.w	r3, [r0], #2
  403612:	e77b      	b.n	40350c <memcpy+0xc>
  403614:	3a04      	subs	r2, #4
  403616:	d3d9      	bcc.n	4035cc <memcpy+0xcc>
  403618:	3a01      	subs	r2, #1
  40361a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40361e:	f800 3b01 	strb.w	r3, [r0], #1
  403622:	d2f9      	bcs.n	403618 <memcpy+0x118>
  403624:	780b      	ldrb	r3, [r1, #0]
  403626:	7003      	strb	r3, [r0, #0]
  403628:	784b      	ldrb	r3, [r1, #1]
  40362a:	7043      	strb	r3, [r0, #1]
  40362c:	788b      	ldrb	r3, [r1, #2]
  40362e:	7083      	strb	r3, [r0, #2]
  403630:	4660      	mov	r0, ip
  403632:	4770      	bx	lr

00403634 <memmove>:
  403634:	4288      	cmp	r0, r1
  403636:	b5f0      	push	{r4, r5, r6, r7, lr}
  403638:	d90d      	bls.n	403656 <memmove+0x22>
  40363a:	188b      	adds	r3, r1, r2
  40363c:	4298      	cmp	r0, r3
  40363e:	d20a      	bcs.n	403656 <memmove+0x22>
  403640:	1884      	adds	r4, r0, r2
  403642:	2a00      	cmp	r2, #0
  403644:	d051      	beq.n	4036ea <memmove+0xb6>
  403646:	4622      	mov	r2, r4
  403648:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40364c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403650:	4299      	cmp	r1, r3
  403652:	d1f9      	bne.n	403648 <memmove+0x14>
  403654:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403656:	2a0f      	cmp	r2, #15
  403658:	d948      	bls.n	4036ec <memmove+0xb8>
  40365a:	ea41 0300 	orr.w	r3, r1, r0
  40365e:	079b      	lsls	r3, r3, #30
  403660:	d146      	bne.n	4036f0 <memmove+0xbc>
  403662:	f100 0410 	add.w	r4, r0, #16
  403666:	f101 0310 	add.w	r3, r1, #16
  40366a:	4615      	mov	r5, r2
  40366c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403670:	f844 6c10 	str.w	r6, [r4, #-16]
  403674:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403678:	f844 6c0c 	str.w	r6, [r4, #-12]
  40367c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403680:	f844 6c08 	str.w	r6, [r4, #-8]
  403684:	3d10      	subs	r5, #16
  403686:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40368a:	f844 6c04 	str.w	r6, [r4, #-4]
  40368e:	2d0f      	cmp	r5, #15
  403690:	f103 0310 	add.w	r3, r3, #16
  403694:	f104 0410 	add.w	r4, r4, #16
  403698:	d8e8      	bhi.n	40366c <memmove+0x38>
  40369a:	f1a2 0310 	sub.w	r3, r2, #16
  40369e:	f023 030f 	bic.w	r3, r3, #15
  4036a2:	f002 0e0f 	and.w	lr, r2, #15
  4036a6:	3310      	adds	r3, #16
  4036a8:	f1be 0f03 	cmp.w	lr, #3
  4036ac:	4419      	add	r1, r3
  4036ae:	4403      	add	r3, r0
  4036b0:	d921      	bls.n	4036f6 <memmove+0xc2>
  4036b2:	1f1e      	subs	r6, r3, #4
  4036b4:	460d      	mov	r5, r1
  4036b6:	4674      	mov	r4, lr
  4036b8:	3c04      	subs	r4, #4
  4036ba:	f855 7b04 	ldr.w	r7, [r5], #4
  4036be:	f846 7f04 	str.w	r7, [r6, #4]!
  4036c2:	2c03      	cmp	r4, #3
  4036c4:	d8f8      	bhi.n	4036b8 <memmove+0x84>
  4036c6:	f1ae 0404 	sub.w	r4, lr, #4
  4036ca:	f024 0403 	bic.w	r4, r4, #3
  4036ce:	3404      	adds	r4, #4
  4036d0:	4421      	add	r1, r4
  4036d2:	4423      	add	r3, r4
  4036d4:	f002 0203 	and.w	r2, r2, #3
  4036d8:	b162      	cbz	r2, 4036f4 <memmove+0xc0>
  4036da:	3b01      	subs	r3, #1
  4036dc:	440a      	add	r2, r1
  4036de:	f811 4b01 	ldrb.w	r4, [r1], #1
  4036e2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4036e6:	428a      	cmp	r2, r1
  4036e8:	d1f9      	bne.n	4036de <memmove+0xaa>
  4036ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036ec:	4603      	mov	r3, r0
  4036ee:	e7f3      	b.n	4036d8 <memmove+0xa4>
  4036f0:	4603      	mov	r3, r0
  4036f2:	e7f2      	b.n	4036da <memmove+0xa6>
  4036f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036f6:	4672      	mov	r2, lr
  4036f8:	e7ee      	b.n	4036d8 <memmove+0xa4>
  4036fa:	bf00      	nop

004036fc <__malloc_lock>:
  4036fc:	4801      	ldr	r0, [pc, #4]	; (403704 <__malloc_lock+0x8>)
  4036fe:	f7ff bb63 	b.w	402dc8 <__retarget_lock_acquire_recursive>
  403702:	bf00      	nop
  403704:	20008dcc 	.word	0x20008dcc

00403708 <__malloc_unlock>:
  403708:	4801      	ldr	r0, [pc, #4]	; (403710 <__malloc_unlock+0x8>)
  40370a:	f7ff bb5f 	b.w	402dcc <__retarget_lock_release_recursive>
  40370e:	bf00      	nop
  403710:	20008dcc 	.word	0x20008dcc

00403714 <_realloc_r>:
  403714:	2900      	cmp	r1, #0
  403716:	f000 8095 	beq.w	403844 <_realloc_r+0x130>
  40371a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40371e:	460d      	mov	r5, r1
  403720:	4616      	mov	r6, r2
  403722:	b083      	sub	sp, #12
  403724:	4680      	mov	r8, r0
  403726:	f106 070b 	add.w	r7, r6, #11
  40372a:	f7ff ffe7 	bl	4036fc <__malloc_lock>
  40372e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403732:	2f16      	cmp	r7, #22
  403734:	f02e 0403 	bic.w	r4, lr, #3
  403738:	f1a5 0908 	sub.w	r9, r5, #8
  40373c:	d83c      	bhi.n	4037b8 <_realloc_r+0xa4>
  40373e:	2210      	movs	r2, #16
  403740:	4617      	mov	r7, r2
  403742:	42be      	cmp	r6, r7
  403744:	d83d      	bhi.n	4037c2 <_realloc_r+0xae>
  403746:	4294      	cmp	r4, r2
  403748:	da43      	bge.n	4037d2 <_realloc_r+0xbe>
  40374a:	4bc4      	ldr	r3, [pc, #784]	; (403a5c <_realloc_r+0x348>)
  40374c:	6899      	ldr	r1, [r3, #8]
  40374e:	eb09 0004 	add.w	r0, r9, r4
  403752:	4288      	cmp	r0, r1
  403754:	f000 80b4 	beq.w	4038c0 <_realloc_r+0x1ac>
  403758:	6843      	ldr	r3, [r0, #4]
  40375a:	f023 0101 	bic.w	r1, r3, #1
  40375e:	4401      	add	r1, r0
  403760:	6849      	ldr	r1, [r1, #4]
  403762:	07c9      	lsls	r1, r1, #31
  403764:	d54c      	bpl.n	403800 <_realloc_r+0xec>
  403766:	f01e 0f01 	tst.w	lr, #1
  40376a:	f000 809b 	beq.w	4038a4 <_realloc_r+0x190>
  40376e:	4631      	mov	r1, r6
  403770:	4640      	mov	r0, r8
  403772:	f7ff fbad 	bl	402ed0 <_malloc_r>
  403776:	4606      	mov	r6, r0
  403778:	2800      	cmp	r0, #0
  40377a:	d03a      	beq.n	4037f2 <_realloc_r+0xde>
  40377c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403780:	f023 0301 	bic.w	r3, r3, #1
  403784:	444b      	add	r3, r9
  403786:	f1a0 0208 	sub.w	r2, r0, #8
  40378a:	429a      	cmp	r2, r3
  40378c:	f000 8121 	beq.w	4039d2 <_realloc_r+0x2be>
  403790:	1f22      	subs	r2, r4, #4
  403792:	2a24      	cmp	r2, #36	; 0x24
  403794:	f200 8107 	bhi.w	4039a6 <_realloc_r+0x292>
  403798:	2a13      	cmp	r2, #19
  40379a:	f200 80db 	bhi.w	403954 <_realloc_r+0x240>
  40379e:	4603      	mov	r3, r0
  4037a0:	462a      	mov	r2, r5
  4037a2:	6811      	ldr	r1, [r2, #0]
  4037a4:	6019      	str	r1, [r3, #0]
  4037a6:	6851      	ldr	r1, [r2, #4]
  4037a8:	6059      	str	r1, [r3, #4]
  4037aa:	6892      	ldr	r2, [r2, #8]
  4037ac:	609a      	str	r2, [r3, #8]
  4037ae:	4629      	mov	r1, r5
  4037b0:	4640      	mov	r0, r8
  4037b2:	f7ff f86f 	bl	402894 <_free_r>
  4037b6:	e01c      	b.n	4037f2 <_realloc_r+0xde>
  4037b8:	f027 0707 	bic.w	r7, r7, #7
  4037bc:	2f00      	cmp	r7, #0
  4037be:	463a      	mov	r2, r7
  4037c0:	dabf      	bge.n	403742 <_realloc_r+0x2e>
  4037c2:	2600      	movs	r6, #0
  4037c4:	230c      	movs	r3, #12
  4037c6:	4630      	mov	r0, r6
  4037c8:	f8c8 3000 	str.w	r3, [r8]
  4037cc:	b003      	add	sp, #12
  4037ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037d2:	462e      	mov	r6, r5
  4037d4:	1be3      	subs	r3, r4, r7
  4037d6:	2b0f      	cmp	r3, #15
  4037d8:	d81e      	bhi.n	403818 <_realloc_r+0x104>
  4037da:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4037de:	f003 0301 	and.w	r3, r3, #1
  4037e2:	4323      	orrs	r3, r4
  4037e4:	444c      	add	r4, r9
  4037e6:	f8c9 3004 	str.w	r3, [r9, #4]
  4037ea:	6863      	ldr	r3, [r4, #4]
  4037ec:	f043 0301 	orr.w	r3, r3, #1
  4037f0:	6063      	str	r3, [r4, #4]
  4037f2:	4640      	mov	r0, r8
  4037f4:	f7ff ff88 	bl	403708 <__malloc_unlock>
  4037f8:	4630      	mov	r0, r6
  4037fa:	b003      	add	sp, #12
  4037fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403800:	f023 0303 	bic.w	r3, r3, #3
  403804:	18e1      	adds	r1, r4, r3
  403806:	4291      	cmp	r1, r2
  403808:	db1f      	blt.n	40384a <_realloc_r+0x136>
  40380a:	68c3      	ldr	r3, [r0, #12]
  40380c:	6882      	ldr	r2, [r0, #8]
  40380e:	462e      	mov	r6, r5
  403810:	60d3      	str	r3, [r2, #12]
  403812:	460c      	mov	r4, r1
  403814:	609a      	str	r2, [r3, #8]
  403816:	e7dd      	b.n	4037d4 <_realloc_r+0xc0>
  403818:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40381c:	eb09 0107 	add.w	r1, r9, r7
  403820:	f002 0201 	and.w	r2, r2, #1
  403824:	444c      	add	r4, r9
  403826:	f043 0301 	orr.w	r3, r3, #1
  40382a:	4317      	orrs	r7, r2
  40382c:	f8c9 7004 	str.w	r7, [r9, #4]
  403830:	604b      	str	r3, [r1, #4]
  403832:	6863      	ldr	r3, [r4, #4]
  403834:	f043 0301 	orr.w	r3, r3, #1
  403838:	3108      	adds	r1, #8
  40383a:	6063      	str	r3, [r4, #4]
  40383c:	4640      	mov	r0, r8
  40383e:	f7ff f829 	bl	402894 <_free_r>
  403842:	e7d6      	b.n	4037f2 <_realloc_r+0xde>
  403844:	4611      	mov	r1, r2
  403846:	f7ff bb43 	b.w	402ed0 <_malloc_r>
  40384a:	f01e 0f01 	tst.w	lr, #1
  40384e:	d18e      	bne.n	40376e <_realloc_r+0x5a>
  403850:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403854:	eba9 0a01 	sub.w	sl, r9, r1
  403858:	f8da 1004 	ldr.w	r1, [sl, #4]
  40385c:	f021 0103 	bic.w	r1, r1, #3
  403860:	440b      	add	r3, r1
  403862:	4423      	add	r3, r4
  403864:	4293      	cmp	r3, r2
  403866:	db25      	blt.n	4038b4 <_realloc_r+0x1a0>
  403868:	68c2      	ldr	r2, [r0, #12]
  40386a:	6881      	ldr	r1, [r0, #8]
  40386c:	4656      	mov	r6, sl
  40386e:	60ca      	str	r2, [r1, #12]
  403870:	6091      	str	r1, [r2, #8]
  403872:	f8da 100c 	ldr.w	r1, [sl, #12]
  403876:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40387a:	1f22      	subs	r2, r4, #4
  40387c:	2a24      	cmp	r2, #36	; 0x24
  40387e:	60c1      	str	r1, [r0, #12]
  403880:	6088      	str	r0, [r1, #8]
  403882:	f200 8094 	bhi.w	4039ae <_realloc_r+0x29a>
  403886:	2a13      	cmp	r2, #19
  403888:	d96f      	bls.n	40396a <_realloc_r+0x256>
  40388a:	6829      	ldr	r1, [r5, #0]
  40388c:	f8ca 1008 	str.w	r1, [sl, #8]
  403890:	6869      	ldr	r1, [r5, #4]
  403892:	f8ca 100c 	str.w	r1, [sl, #12]
  403896:	2a1b      	cmp	r2, #27
  403898:	f200 80a2 	bhi.w	4039e0 <_realloc_r+0x2cc>
  40389c:	3508      	adds	r5, #8
  40389e:	f10a 0210 	add.w	r2, sl, #16
  4038a2:	e063      	b.n	40396c <_realloc_r+0x258>
  4038a4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4038a8:	eba9 0a03 	sub.w	sl, r9, r3
  4038ac:	f8da 1004 	ldr.w	r1, [sl, #4]
  4038b0:	f021 0103 	bic.w	r1, r1, #3
  4038b4:	1863      	adds	r3, r4, r1
  4038b6:	4293      	cmp	r3, r2
  4038b8:	f6ff af59 	blt.w	40376e <_realloc_r+0x5a>
  4038bc:	4656      	mov	r6, sl
  4038be:	e7d8      	b.n	403872 <_realloc_r+0x15e>
  4038c0:	6841      	ldr	r1, [r0, #4]
  4038c2:	f021 0b03 	bic.w	fp, r1, #3
  4038c6:	44a3      	add	fp, r4
  4038c8:	f107 0010 	add.w	r0, r7, #16
  4038cc:	4583      	cmp	fp, r0
  4038ce:	da56      	bge.n	40397e <_realloc_r+0x26a>
  4038d0:	f01e 0f01 	tst.w	lr, #1
  4038d4:	f47f af4b 	bne.w	40376e <_realloc_r+0x5a>
  4038d8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4038dc:	eba9 0a01 	sub.w	sl, r9, r1
  4038e0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4038e4:	f021 0103 	bic.w	r1, r1, #3
  4038e8:	448b      	add	fp, r1
  4038ea:	4558      	cmp	r0, fp
  4038ec:	dce2      	bgt.n	4038b4 <_realloc_r+0x1a0>
  4038ee:	4656      	mov	r6, sl
  4038f0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4038f4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4038f8:	1f22      	subs	r2, r4, #4
  4038fa:	2a24      	cmp	r2, #36	; 0x24
  4038fc:	60c1      	str	r1, [r0, #12]
  4038fe:	6088      	str	r0, [r1, #8]
  403900:	f200 808f 	bhi.w	403a22 <_realloc_r+0x30e>
  403904:	2a13      	cmp	r2, #19
  403906:	f240 808a 	bls.w	403a1e <_realloc_r+0x30a>
  40390a:	6829      	ldr	r1, [r5, #0]
  40390c:	f8ca 1008 	str.w	r1, [sl, #8]
  403910:	6869      	ldr	r1, [r5, #4]
  403912:	f8ca 100c 	str.w	r1, [sl, #12]
  403916:	2a1b      	cmp	r2, #27
  403918:	f200 808a 	bhi.w	403a30 <_realloc_r+0x31c>
  40391c:	3508      	adds	r5, #8
  40391e:	f10a 0210 	add.w	r2, sl, #16
  403922:	6829      	ldr	r1, [r5, #0]
  403924:	6011      	str	r1, [r2, #0]
  403926:	6869      	ldr	r1, [r5, #4]
  403928:	6051      	str	r1, [r2, #4]
  40392a:	68a9      	ldr	r1, [r5, #8]
  40392c:	6091      	str	r1, [r2, #8]
  40392e:	eb0a 0107 	add.w	r1, sl, r7
  403932:	ebab 0207 	sub.w	r2, fp, r7
  403936:	f042 0201 	orr.w	r2, r2, #1
  40393a:	6099      	str	r1, [r3, #8]
  40393c:	604a      	str	r2, [r1, #4]
  40393e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403942:	f003 0301 	and.w	r3, r3, #1
  403946:	431f      	orrs	r7, r3
  403948:	4640      	mov	r0, r8
  40394a:	f8ca 7004 	str.w	r7, [sl, #4]
  40394e:	f7ff fedb 	bl	403708 <__malloc_unlock>
  403952:	e751      	b.n	4037f8 <_realloc_r+0xe4>
  403954:	682b      	ldr	r3, [r5, #0]
  403956:	6003      	str	r3, [r0, #0]
  403958:	686b      	ldr	r3, [r5, #4]
  40395a:	6043      	str	r3, [r0, #4]
  40395c:	2a1b      	cmp	r2, #27
  40395e:	d82d      	bhi.n	4039bc <_realloc_r+0x2a8>
  403960:	f100 0308 	add.w	r3, r0, #8
  403964:	f105 0208 	add.w	r2, r5, #8
  403968:	e71b      	b.n	4037a2 <_realloc_r+0x8e>
  40396a:	4632      	mov	r2, r6
  40396c:	6829      	ldr	r1, [r5, #0]
  40396e:	6011      	str	r1, [r2, #0]
  403970:	6869      	ldr	r1, [r5, #4]
  403972:	6051      	str	r1, [r2, #4]
  403974:	68a9      	ldr	r1, [r5, #8]
  403976:	6091      	str	r1, [r2, #8]
  403978:	461c      	mov	r4, r3
  40397a:	46d1      	mov	r9, sl
  40397c:	e72a      	b.n	4037d4 <_realloc_r+0xc0>
  40397e:	eb09 0107 	add.w	r1, r9, r7
  403982:	ebab 0b07 	sub.w	fp, fp, r7
  403986:	f04b 0201 	orr.w	r2, fp, #1
  40398a:	6099      	str	r1, [r3, #8]
  40398c:	604a      	str	r2, [r1, #4]
  40398e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403992:	f003 0301 	and.w	r3, r3, #1
  403996:	431f      	orrs	r7, r3
  403998:	4640      	mov	r0, r8
  40399a:	f845 7c04 	str.w	r7, [r5, #-4]
  40399e:	f7ff feb3 	bl	403708 <__malloc_unlock>
  4039a2:	462e      	mov	r6, r5
  4039a4:	e728      	b.n	4037f8 <_realloc_r+0xe4>
  4039a6:	4629      	mov	r1, r5
  4039a8:	f7ff fe44 	bl	403634 <memmove>
  4039ac:	e6ff      	b.n	4037ae <_realloc_r+0x9a>
  4039ae:	4629      	mov	r1, r5
  4039b0:	4630      	mov	r0, r6
  4039b2:	461c      	mov	r4, r3
  4039b4:	46d1      	mov	r9, sl
  4039b6:	f7ff fe3d 	bl	403634 <memmove>
  4039ba:	e70b      	b.n	4037d4 <_realloc_r+0xc0>
  4039bc:	68ab      	ldr	r3, [r5, #8]
  4039be:	6083      	str	r3, [r0, #8]
  4039c0:	68eb      	ldr	r3, [r5, #12]
  4039c2:	60c3      	str	r3, [r0, #12]
  4039c4:	2a24      	cmp	r2, #36	; 0x24
  4039c6:	d017      	beq.n	4039f8 <_realloc_r+0x2e4>
  4039c8:	f100 0310 	add.w	r3, r0, #16
  4039cc:	f105 0210 	add.w	r2, r5, #16
  4039d0:	e6e7      	b.n	4037a2 <_realloc_r+0x8e>
  4039d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4039d6:	f023 0303 	bic.w	r3, r3, #3
  4039da:	441c      	add	r4, r3
  4039dc:	462e      	mov	r6, r5
  4039de:	e6f9      	b.n	4037d4 <_realloc_r+0xc0>
  4039e0:	68a9      	ldr	r1, [r5, #8]
  4039e2:	f8ca 1010 	str.w	r1, [sl, #16]
  4039e6:	68e9      	ldr	r1, [r5, #12]
  4039e8:	f8ca 1014 	str.w	r1, [sl, #20]
  4039ec:	2a24      	cmp	r2, #36	; 0x24
  4039ee:	d00c      	beq.n	403a0a <_realloc_r+0x2f6>
  4039f0:	3510      	adds	r5, #16
  4039f2:	f10a 0218 	add.w	r2, sl, #24
  4039f6:	e7b9      	b.n	40396c <_realloc_r+0x258>
  4039f8:	692b      	ldr	r3, [r5, #16]
  4039fa:	6103      	str	r3, [r0, #16]
  4039fc:	696b      	ldr	r3, [r5, #20]
  4039fe:	6143      	str	r3, [r0, #20]
  403a00:	f105 0218 	add.w	r2, r5, #24
  403a04:	f100 0318 	add.w	r3, r0, #24
  403a08:	e6cb      	b.n	4037a2 <_realloc_r+0x8e>
  403a0a:	692a      	ldr	r2, [r5, #16]
  403a0c:	f8ca 2018 	str.w	r2, [sl, #24]
  403a10:	696a      	ldr	r2, [r5, #20]
  403a12:	f8ca 201c 	str.w	r2, [sl, #28]
  403a16:	3518      	adds	r5, #24
  403a18:	f10a 0220 	add.w	r2, sl, #32
  403a1c:	e7a6      	b.n	40396c <_realloc_r+0x258>
  403a1e:	4632      	mov	r2, r6
  403a20:	e77f      	b.n	403922 <_realloc_r+0x20e>
  403a22:	4629      	mov	r1, r5
  403a24:	4630      	mov	r0, r6
  403a26:	9301      	str	r3, [sp, #4]
  403a28:	f7ff fe04 	bl	403634 <memmove>
  403a2c:	9b01      	ldr	r3, [sp, #4]
  403a2e:	e77e      	b.n	40392e <_realloc_r+0x21a>
  403a30:	68a9      	ldr	r1, [r5, #8]
  403a32:	f8ca 1010 	str.w	r1, [sl, #16]
  403a36:	68e9      	ldr	r1, [r5, #12]
  403a38:	f8ca 1014 	str.w	r1, [sl, #20]
  403a3c:	2a24      	cmp	r2, #36	; 0x24
  403a3e:	d003      	beq.n	403a48 <_realloc_r+0x334>
  403a40:	3510      	adds	r5, #16
  403a42:	f10a 0218 	add.w	r2, sl, #24
  403a46:	e76c      	b.n	403922 <_realloc_r+0x20e>
  403a48:	692a      	ldr	r2, [r5, #16]
  403a4a:	f8ca 2018 	str.w	r2, [sl, #24]
  403a4e:	696a      	ldr	r2, [r5, #20]
  403a50:	f8ca 201c 	str.w	r2, [sl, #28]
  403a54:	3518      	adds	r5, #24
  403a56:	f10a 0220 	add.w	r2, sl, #32
  403a5a:	e762      	b.n	403922 <_realloc_r+0x20e>
  403a5c:	200005a8 	.word	0x200005a8

00403a60 <_sbrk_r>:
  403a60:	b538      	push	{r3, r4, r5, lr}
  403a62:	4c07      	ldr	r4, [pc, #28]	; (403a80 <_sbrk_r+0x20>)
  403a64:	2300      	movs	r3, #0
  403a66:	4605      	mov	r5, r0
  403a68:	4608      	mov	r0, r1
  403a6a:	6023      	str	r3, [r4, #0]
  403a6c:	f7fd f8f4 	bl	400c58 <_sbrk>
  403a70:	1c43      	adds	r3, r0, #1
  403a72:	d000      	beq.n	403a76 <_sbrk_r+0x16>
  403a74:	bd38      	pop	{r3, r4, r5, pc}
  403a76:	6823      	ldr	r3, [r4, #0]
  403a78:	2b00      	cmp	r3, #0
  403a7a:	d0fb      	beq.n	403a74 <_sbrk_r+0x14>
  403a7c:	602b      	str	r3, [r5, #0]
  403a7e:	bd38      	pop	{r3, r4, r5, pc}
  403a80:	20008de0 	.word	0x20008de0

00403a84 <__sread>:
  403a84:	b510      	push	{r4, lr}
  403a86:	460c      	mov	r4, r1
  403a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a8c:	f000 f9f6 	bl	403e7c <_read_r>
  403a90:	2800      	cmp	r0, #0
  403a92:	db03      	blt.n	403a9c <__sread+0x18>
  403a94:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403a96:	4403      	add	r3, r0
  403a98:	6523      	str	r3, [r4, #80]	; 0x50
  403a9a:	bd10      	pop	{r4, pc}
  403a9c:	89a3      	ldrh	r3, [r4, #12]
  403a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403aa2:	81a3      	strh	r3, [r4, #12]
  403aa4:	bd10      	pop	{r4, pc}
  403aa6:	bf00      	nop

00403aa8 <__swrite>:
  403aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403aac:	4616      	mov	r6, r2
  403aae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403ab2:	461f      	mov	r7, r3
  403ab4:	05d3      	lsls	r3, r2, #23
  403ab6:	460c      	mov	r4, r1
  403ab8:	4605      	mov	r5, r0
  403aba:	d507      	bpl.n	403acc <__swrite+0x24>
  403abc:	2200      	movs	r2, #0
  403abe:	2302      	movs	r3, #2
  403ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403ac4:	f000 f9c4 	bl	403e50 <_lseek_r>
  403ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403ad0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403ad4:	81a2      	strh	r2, [r4, #12]
  403ad6:	463b      	mov	r3, r7
  403ad8:	4632      	mov	r2, r6
  403ada:	4628      	mov	r0, r5
  403adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403ae0:	f000 b8a4 	b.w	403c2c <_write_r>

00403ae4 <__sseek>:
  403ae4:	b510      	push	{r4, lr}
  403ae6:	460c      	mov	r4, r1
  403ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403aec:	f000 f9b0 	bl	403e50 <_lseek_r>
  403af0:	89a3      	ldrh	r3, [r4, #12]
  403af2:	1c42      	adds	r2, r0, #1
  403af4:	bf0e      	itee	eq
  403af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403afe:	6520      	strne	r0, [r4, #80]	; 0x50
  403b00:	81a3      	strh	r3, [r4, #12]
  403b02:	bd10      	pop	{r4, pc}

00403b04 <__sclose>:
  403b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403b08:	f000 b908 	b.w	403d1c <_close_r>

00403b0c <__swbuf_r>:
  403b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403b0e:	460d      	mov	r5, r1
  403b10:	4614      	mov	r4, r2
  403b12:	4606      	mov	r6, r0
  403b14:	b110      	cbz	r0, 403b1c <__swbuf_r+0x10>
  403b16:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403b18:	2b00      	cmp	r3, #0
  403b1a:	d04b      	beq.n	403bb4 <__swbuf_r+0xa8>
  403b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403b20:	69a3      	ldr	r3, [r4, #24]
  403b22:	60a3      	str	r3, [r4, #8]
  403b24:	b291      	uxth	r1, r2
  403b26:	0708      	lsls	r0, r1, #28
  403b28:	d539      	bpl.n	403b9e <__swbuf_r+0x92>
  403b2a:	6923      	ldr	r3, [r4, #16]
  403b2c:	2b00      	cmp	r3, #0
  403b2e:	d036      	beq.n	403b9e <__swbuf_r+0x92>
  403b30:	b2ed      	uxtb	r5, r5
  403b32:	0489      	lsls	r1, r1, #18
  403b34:	462f      	mov	r7, r5
  403b36:	d515      	bpl.n	403b64 <__swbuf_r+0x58>
  403b38:	6822      	ldr	r2, [r4, #0]
  403b3a:	6961      	ldr	r1, [r4, #20]
  403b3c:	1ad3      	subs	r3, r2, r3
  403b3e:	428b      	cmp	r3, r1
  403b40:	da1c      	bge.n	403b7c <__swbuf_r+0x70>
  403b42:	3301      	adds	r3, #1
  403b44:	68a1      	ldr	r1, [r4, #8]
  403b46:	1c50      	adds	r0, r2, #1
  403b48:	3901      	subs	r1, #1
  403b4a:	60a1      	str	r1, [r4, #8]
  403b4c:	6020      	str	r0, [r4, #0]
  403b4e:	7015      	strb	r5, [r2, #0]
  403b50:	6962      	ldr	r2, [r4, #20]
  403b52:	429a      	cmp	r2, r3
  403b54:	d01a      	beq.n	403b8c <__swbuf_r+0x80>
  403b56:	89a3      	ldrh	r3, [r4, #12]
  403b58:	07db      	lsls	r3, r3, #31
  403b5a:	d501      	bpl.n	403b60 <__swbuf_r+0x54>
  403b5c:	2d0a      	cmp	r5, #10
  403b5e:	d015      	beq.n	403b8c <__swbuf_r+0x80>
  403b60:	4638      	mov	r0, r7
  403b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403b64:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403b66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403b6a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403b6e:	81a2      	strh	r2, [r4, #12]
  403b70:	6822      	ldr	r2, [r4, #0]
  403b72:	6661      	str	r1, [r4, #100]	; 0x64
  403b74:	6961      	ldr	r1, [r4, #20]
  403b76:	1ad3      	subs	r3, r2, r3
  403b78:	428b      	cmp	r3, r1
  403b7a:	dbe2      	blt.n	403b42 <__swbuf_r+0x36>
  403b7c:	4621      	mov	r1, r4
  403b7e:	4630      	mov	r0, r6
  403b80:	f7fe fd0a 	bl	402598 <_fflush_r>
  403b84:	b940      	cbnz	r0, 403b98 <__swbuf_r+0x8c>
  403b86:	6822      	ldr	r2, [r4, #0]
  403b88:	2301      	movs	r3, #1
  403b8a:	e7db      	b.n	403b44 <__swbuf_r+0x38>
  403b8c:	4621      	mov	r1, r4
  403b8e:	4630      	mov	r0, r6
  403b90:	f7fe fd02 	bl	402598 <_fflush_r>
  403b94:	2800      	cmp	r0, #0
  403b96:	d0e3      	beq.n	403b60 <__swbuf_r+0x54>
  403b98:	f04f 37ff 	mov.w	r7, #4294967295
  403b9c:	e7e0      	b.n	403b60 <__swbuf_r+0x54>
  403b9e:	4621      	mov	r1, r4
  403ba0:	4630      	mov	r0, r6
  403ba2:	f7fe fbe5 	bl	402370 <__swsetup_r>
  403ba6:	2800      	cmp	r0, #0
  403ba8:	d1f6      	bne.n	403b98 <__swbuf_r+0x8c>
  403baa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403bae:	6923      	ldr	r3, [r4, #16]
  403bb0:	b291      	uxth	r1, r2
  403bb2:	e7bd      	b.n	403b30 <__swbuf_r+0x24>
  403bb4:	f7fe fd48 	bl	402648 <__sinit>
  403bb8:	e7b0      	b.n	403b1c <__swbuf_r+0x10>
  403bba:	bf00      	nop

00403bbc <_wcrtomb_r>:
  403bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  403bbe:	4606      	mov	r6, r0
  403bc0:	b085      	sub	sp, #20
  403bc2:	461f      	mov	r7, r3
  403bc4:	b189      	cbz	r1, 403bea <_wcrtomb_r+0x2e>
  403bc6:	4c10      	ldr	r4, [pc, #64]	; (403c08 <_wcrtomb_r+0x4c>)
  403bc8:	4d10      	ldr	r5, [pc, #64]	; (403c0c <_wcrtomb_r+0x50>)
  403bca:	6824      	ldr	r4, [r4, #0]
  403bcc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403bce:	2c00      	cmp	r4, #0
  403bd0:	bf08      	it	eq
  403bd2:	462c      	moveq	r4, r5
  403bd4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403bd8:	47a0      	blx	r4
  403bda:	1c43      	adds	r3, r0, #1
  403bdc:	d103      	bne.n	403be6 <_wcrtomb_r+0x2a>
  403bde:	2200      	movs	r2, #0
  403be0:	238a      	movs	r3, #138	; 0x8a
  403be2:	603a      	str	r2, [r7, #0]
  403be4:	6033      	str	r3, [r6, #0]
  403be6:	b005      	add	sp, #20
  403be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403bea:	460c      	mov	r4, r1
  403bec:	4906      	ldr	r1, [pc, #24]	; (403c08 <_wcrtomb_r+0x4c>)
  403bee:	4a07      	ldr	r2, [pc, #28]	; (403c0c <_wcrtomb_r+0x50>)
  403bf0:	6809      	ldr	r1, [r1, #0]
  403bf2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403bf4:	2900      	cmp	r1, #0
  403bf6:	bf08      	it	eq
  403bf8:	4611      	moveq	r1, r2
  403bfa:	4622      	mov	r2, r4
  403bfc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403c00:	a901      	add	r1, sp, #4
  403c02:	47a0      	blx	r4
  403c04:	e7e9      	b.n	403bda <_wcrtomb_r+0x1e>
  403c06:	bf00      	nop
  403c08:	20000008 	.word	0x20000008
  403c0c:	2000043c 	.word	0x2000043c

00403c10 <__ascii_wctomb>:
  403c10:	b121      	cbz	r1, 403c1c <__ascii_wctomb+0xc>
  403c12:	2aff      	cmp	r2, #255	; 0xff
  403c14:	d804      	bhi.n	403c20 <__ascii_wctomb+0x10>
  403c16:	700a      	strb	r2, [r1, #0]
  403c18:	2001      	movs	r0, #1
  403c1a:	4770      	bx	lr
  403c1c:	4608      	mov	r0, r1
  403c1e:	4770      	bx	lr
  403c20:	238a      	movs	r3, #138	; 0x8a
  403c22:	6003      	str	r3, [r0, #0]
  403c24:	f04f 30ff 	mov.w	r0, #4294967295
  403c28:	4770      	bx	lr
  403c2a:	bf00      	nop

00403c2c <_write_r>:
  403c2c:	b570      	push	{r4, r5, r6, lr}
  403c2e:	460d      	mov	r5, r1
  403c30:	4c08      	ldr	r4, [pc, #32]	; (403c54 <_write_r+0x28>)
  403c32:	4611      	mov	r1, r2
  403c34:	4606      	mov	r6, r0
  403c36:	461a      	mov	r2, r3
  403c38:	4628      	mov	r0, r5
  403c3a:	2300      	movs	r3, #0
  403c3c:	6023      	str	r3, [r4, #0]
  403c3e:	f7fc fb33 	bl	4002a8 <_write>
  403c42:	1c43      	adds	r3, r0, #1
  403c44:	d000      	beq.n	403c48 <_write_r+0x1c>
  403c46:	bd70      	pop	{r4, r5, r6, pc}
  403c48:	6823      	ldr	r3, [r4, #0]
  403c4a:	2b00      	cmp	r3, #0
  403c4c:	d0fb      	beq.n	403c46 <_write_r+0x1a>
  403c4e:	6033      	str	r3, [r6, #0]
  403c50:	bd70      	pop	{r4, r5, r6, pc}
  403c52:	bf00      	nop
  403c54:	20008de0 	.word	0x20008de0

00403c58 <__register_exitproc>:
  403c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403c5c:	4d2c      	ldr	r5, [pc, #176]	; (403d10 <__register_exitproc+0xb8>)
  403c5e:	4606      	mov	r6, r0
  403c60:	6828      	ldr	r0, [r5, #0]
  403c62:	4698      	mov	r8, r3
  403c64:	460f      	mov	r7, r1
  403c66:	4691      	mov	r9, r2
  403c68:	f7ff f8ae 	bl	402dc8 <__retarget_lock_acquire_recursive>
  403c6c:	4b29      	ldr	r3, [pc, #164]	; (403d14 <__register_exitproc+0xbc>)
  403c6e:	681c      	ldr	r4, [r3, #0]
  403c70:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403c74:	2b00      	cmp	r3, #0
  403c76:	d03e      	beq.n	403cf6 <__register_exitproc+0x9e>
  403c78:	685a      	ldr	r2, [r3, #4]
  403c7a:	2a1f      	cmp	r2, #31
  403c7c:	dc1c      	bgt.n	403cb8 <__register_exitproc+0x60>
  403c7e:	f102 0e01 	add.w	lr, r2, #1
  403c82:	b176      	cbz	r6, 403ca2 <__register_exitproc+0x4a>
  403c84:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403c88:	2401      	movs	r4, #1
  403c8a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403c8e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403c92:	4094      	lsls	r4, r2
  403c94:	4320      	orrs	r0, r4
  403c96:	2e02      	cmp	r6, #2
  403c98:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403c9c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403ca0:	d023      	beq.n	403cea <__register_exitproc+0x92>
  403ca2:	3202      	adds	r2, #2
  403ca4:	f8c3 e004 	str.w	lr, [r3, #4]
  403ca8:	6828      	ldr	r0, [r5, #0]
  403caa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403cae:	f7ff f88d 	bl	402dcc <__retarget_lock_release_recursive>
  403cb2:	2000      	movs	r0, #0
  403cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403cb8:	4b17      	ldr	r3, [pc, #92]	; (403d18 <__register_exitproc+0xc0>)
  403cba:	b30b      	cbz	r3, 403d00 <__register_exitproc+0xa8>
  403cbc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403cc0:	f7ff f8fe 	bl	402ec0 <malloc>
  403cc4:	4603      	mov	r3, r0
  403cc6:	b1d8      	cbz	r0, 403d00 <__register_exitproc+0xa8>
  403cc8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403ccc:	6002      	str	r2, [r0, #0]
  403cce:	2100      	movs	r1, #0
  403cd0:	6041      	str	r1, [r0, #4]
  403cd2:	460a      	mov	r2, r1
  403cd4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403cd8:	f04f 0e01 	mov.w	lr, #1
  403cdc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403ce0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403ce4:	2e00      	cmp	r6, #0
  403ce6:	d0dc      	beq.n	403ca2 <__register_exitproc+0x4a>
  403ce8:	e7cc      	b.n	403c84 <__register_exitproc+0x2c>
  403cea:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403cee:	430c      	orrs	r4, r1
  403cf0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403cf4:	e7d5      	b.n	403ca2 <__register_exitproc+0x4a>
  403cf6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403cfa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403cfe:	e7bb      	b.n	403c78 <__register_exitproc+0x20>
  403d00:	6828      	ldr	r0, [r5, #0]
  403d02:	f7ff f863 	bl	402dcc <__retarget_lock_release_recursive>
  403d06:	f04f 30ff 	mov.w	r0, #4294967295
  403d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403d0e:	bf00      	nop
  403d10:	20000438 	.word	0x20000438
  403d14:	00404224 	.word	0x00404224
  403d18:	00402ec1 	.word	0x00402ec1

00403d1c <_close_r>:
  403d1c:	b538      	push	{r3, r4, r5, lr}
  403d1e:	4c07      	ldr	r4, [pc, #28]	; (403d3c <_close_r+0x20>)
  403d20:	2300      	movs	r3, #0
  403d22:	4605      	mov	r5, r0
  403d24:	4608      	mov	r0, r1
  403d26:	6023      	str	r3, [r4, #0]
  403d28:	f7fc ffb2 	bl	400c90 <_close>
  403d2c:	1c43      	adds	r3, r0, #1
  403d2e:	d000      	beq.n	403d32 <_close_r+0x16>
  403d30:	bd38      	pop	{r3, r4, r5, pc}
  403d32:	6823      	ldr	r3, [r4, #0]
  403d34:	2b00      	cmp	r3, #0
  403d36:	d0fb      	beq.n	403d30 <_close_r+0x14>
  403d38:	602b      	str	r3, [r5, #0]
  403d3a:	bd38      	pop	{r3, r4, r5, pc}
  403d3c:	20008de0 	.word	0x20008de0

00403d40 <_fclose_r>:
  403d40:	b570      	push	{r4, r5, r6, lr}
  403d42:	b159      	cbz	r1, 403d5c <_fclose_r+0x1c>
  403d44:	4605      	mov	r5, r0
  403d46:	460c      	mov	r4, r1
  403d48:	b110      	cbz	r0, 403d50 <_fclose_r+0x10>
  403d4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403d4c:	2b00      	cmp	r3, #0
  403d4e:	d03c      	beq.n	403dca <_fclose_r+0x8a>
  403d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403d52:	07d8      	lsls	r0, r3, #31
  403d54:	d505      	bpl.n	403d62 <_fclose_r+0x22>
  403d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d5a:	b92b      	cbnz	r3, 403d68 <_fclose_r+0x28>
  403d5c:	2600      	movs	r6, #0
  403d5e:	4630      	mov	r0, r6
  403d60:	bd70      	pop	{r4, r5, r6, pc}
  403d62:	89a3      	ldrh	r3, [r4, #12]
  403d64:	0599      	lsls	r1, r3, #22
  403d66:	d53c      	bpl.n	403de2 <_fclose_r+0xa2>
  403d68:	4621      	mov	r1, r4
  403d6a:	4628      	mov	r0, r5
  403d6c:	f7fe fb74 	bl	402458 <__sflush_r>
  403d70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403d72:	4606      	mov	r6, r0
  403d74:	b133      	cbz	r3, 403d84 <_fclose_r+0x44>
  403d76:	69e1      	ldr	r1, [r4, #28]
  403d78:	4628      	mov	r0, r5
  403d7a:	4798      	blx	r3
  403d7c:	2800      	cmp	r0, #0
  403d7e:	bfb8      	it	lt
  403d80:	f04f 36ff 	movlt.w	r6, #4294967295
  403d84:	89a3      	ldrh	r3, [r4, #12]
  403d86:	061a      	lsls	r2, r3, #24
  403d88:	d422      	bmi.n	403dd0 <_fclose_r+0x90>
  403d8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403d8c:	b141      	cbz	r1, 403da0 <_fclose_r+0x60>
  403d8e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403d92:	4299      	cmp	r1, r3
  403d94:	d002      	beq.n	403d9c <_fclose_r+0x5c>
  403d96:	4628      	mov	r0, r5
  403d98:	f7fe fd7c 	bl	402894 <_free_r>
  403d9c:	2300      	movs	r3, #0
  403d9e:	6323      	str	r3, [r4, #48]	; 0x30
  403da0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403da2:	b121      	cbz	r1, 403dae <_fclose_r+0x6e>
  403da4:	4628      	mov	r0, r5
  403da6:	f7fe fd75 	bl	402894 <_free_r>
  403daa:	2300      	movs	r3, #0
  403dac:	6463      	str	r3, [r4, #68]	; 0x44
  403dae:	f7fe fc77 	bl	4026a0 <__sfp_lock_acquire>
  403db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403db4:	2200      	movs	r2, #0
  403db6:	07db      	lsls	r3, r3, #31
  403db8:	81a2      	strh	r2, [r4, #12]
  403dba:	d50e      	bpl.n	403dda <_fclose_r+0x9a>
  403dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403dbe:	f7ff f801 	bl	402dc4 <__retarget_lock_close_recursive>
  403dc2:	f7fe fc73 	bl	4026ac <__sfp_lock_release>
  403dc6:	4630      	mov	r0, r6
  403dc8:	bd70      	pop	{r4, r5, r6, pc}
  403dca:	f7fe fc3d 	bl	402648 <__sinit>
  403dce:	e7bf      	b.n	403d50 <_fclose_r+0x10>
  403dd0:	6921      	ldr	r1, [r4, #16]
  403dd2:	4628      	mov	r0, r5
  403dd4:	f7fe fd5e 	bl	402894 <_free_r>
  403dd8:	e7d7      	b.n	403d8a <_fclose_r+0x4a>
  403dda:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ddc:	f7fe fff6 	bl	402dcc <__retarget_lock_release_recursive>
  403de0:	e7ec      	b.n	403dbc <_fclose_r+0x7c>
  403de2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403de4:	f7fe fff0 	bl	402dc8 <__retarget_lock_acquire_recursive>
  403de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403dec:	2b00      	cmp	r3, #0
  403dee:	d1bb      	bne.n	403d68 <_fclose_r+0x28>
  403df0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403df2:	f016 0601 	ands.w	r6, r6, #1
  403df6:	d1b1      	bne.n	403d5c <_fclose_r+0x1c>
  403df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403dfa:	f7fe ffe7 	bl	402dcc <__retarget_lock_release_recursive>
  403dfe:	4630      	mov	r0, r6
  403e00:	bd70      	pop	{r4, r5, r6, pc}
  403e02:	bf00      	nop

00403e04 <_fstat_r>:
  403e04:	b538      	push	{r3, r4, r5, lr}
  403e06:	460b      	mov	r3, r1
  403e08:	4c07      	ldr	r4, [pc, #28]	; (403e28 <_fstat_r+0x24>)
  403e0a:	4605      	mov	r5, r0
  403e0c:	4611      	mov	r1, r2
  403e0e:	4618      	mov	r0, r3
  403e10:	2300      	movs	r3, #0
  403e12:	6023      	str	r3, [r4, #0]
  403e14:	f7fc ff3f 	bl	400c96 <_fstat>
  403e18:	1c43      	adds	r3, r0, #1
  403e1a:	d000      	beq.n	403e1e <_fstat_r+0x1a>
  403e1c:	bd38      	pop	{r3, r4, r5, pc}
  403e1e:	6823      	ldr	r3, [r4, #0]
  403e20:	2b00      	cmp	r3, #0
  403e22:	d0fb      	beq.n	403e1c <_fstat_r+0x18>
  403e24:	602b      	str	r3, [r5, #0]
  403e26:	bd38      	pop	{r3, r4, r5, pc}
  403e28:	20008de0 	.word	0x20008de0

00403e2c <_isatty_r>:
  403e2c:	b538      	push	{r3, r4, r5, lr}
  403e2e:	4c07      	ldr	r4, [pc, #28]	; (403e4c <_isatty_r+0x20>)
  403e30:	2300      	movs	r3, #0
  403e32:	4605      	mov	r5, r0
  403e34:	4608      	mov	r0, r1
  403e36:	6023      	str	r3, [r4, #0]
  403e38:	f7fc ff32 	bl	400ca0 <_isatty>
  403e3c:	1c43      	adds	r3, r0, #1
  403e3e:	d000      	beq.n	403e42 <_isatty_r+0x16>
  403e40:	bd38      	pop	{r3, r4, r5, pc}
  403e42:	6823      	ldr	r3, [r4, #0]
  403e44:	2b00      	cmp	r3, #0
  403e46:	d0fb      	beq.n	403e40 <_isatty_r+0x14>
  403e48:	602b      	str	r3, [r5, #0]
  403e4a:	bd38      	pop	{r3, r4, r5, pc}
  403e4c:	20008de0 	.word	0x20008de0

00403e50 <_lseek_r>:
  403e50:	b570      	push	{r4, r5, r6, lr}
  403e52:	460d      	mov	r5, r1
  403e54:	4c08      	ldr	r4, [pc, #32]	; (403e78 <_lseek_r+0x28>)
  403e56:	4611      	mov	r1, r2
  403e58:	4606      	mov	r6, r0
  403e5a:	461a      	mov	r2, r3
  403e5c:	4628      	mov	r0, r5
  403e5e:	2300      	movs	r3, #0
  403e60:	6023      	str	r3, [r4, #0]
  403e62:	f7fc ff1f 	bl	400ca4 <_lseek>
  403e66:	1c43      	adds	r3, r0, #1
  403e68:	d000      	beq.n	403e6c <_lseek_r+0x1c>
  403e6a:	bd70      	pop	{r4, r5, r6, pc}
  403e6c:	6823      	ldr	r3, [r4, #0]
  403e6e:	2b00      	cmp	r3, #0
  403e70:	d0fb      	beq.n	403e6a <_lseek_r+0x1a>
  403e72:	6033      	str	r3, [r6, #0]
  403e74:	bd70      	pop	{r4, r5, r6, pc}
  403e76:	bf00      	nop
  403e78:	20008de0 	.word	0x20008de0

00403e7c <_read_r>:
  403e7c:	b570      	push	{r4, r5, r6, lr}
  403e7e:	460d      	mov	r5, r1
  403e80:	4c08      	ldr	r4, [pc, #32]	; (403ea4 <_read_r+0x28>)
  403e82:	4611      	mov	r1, r2
  403e84:	4606      	mov	r6, r0
  403e86:	461a      	mov	r2, r3
  403e88:	4628      	mov	r0, r5
  403e8a:	2300      	movs	r3, #0
  403e8c:	6023      	str	r3, [r4, #0]
  403e8e:	f7fc f9ed 	bl	40026c <_read>
  403e92:	1c43      	adds	r3, r0, #1
  403e94:	d000      	beq.n	403e98 <_read_r+0x1c>
  403e96:	bd70      	pop	{r4, r5, r6, pc}
  403e98:	6823      	ldr	r3, [r4, #0]
  403e9a:	2b00      	cmp	r3, #0
  403e9c:	d0fb      	beq.n	403e96 <_read_r+0x1a>
  403e9e:	6033      	str	r3, [r6, #0]
  403ea0:	bd70      	pop	{r4, r5, r6, pc}
  403ea2:	bf00      	nop
  403ea4:	20008de0 	.word	0x20008de0

00403ea8 <__aeabi_uldivmod>:
  403ea8:	b953      	cbnz	r3, 403ec0 <__aeabi_uldivmod+0x18>
  403eaa:	b94a      	cbnz	r2, 403ec0 <__aeabi_uldivmod+0x18>
  403eac:	2900      	cmp	r1, #0
  403eae:	bf08      	it	eq
  403eb0:	2800      	cmpeq	r0, #0
  403eb2:	bf1c      	itt	ne
  403eb4:	f04f 31ff 	movne.w	r1, #4294967295
  403eb8:	f04f 30ff 	movne.w	r0, #4294967295
  403ebc:	f000 b97a 	b.w	4041b4 <__aeabi_idiv0>
  403ec0:	f1ad 0c08 	sub.w	ip, sp, #8
  403ec4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403ec8:	f000 f806 	bl	403ed8 <__udivmoddi4>
  403ecc:	f8dd e004 	ldr.w	lr, [sp, #4]
  403ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403ed4:	b004      	add	sp, #16
  403ed6:	4770      	bx	lr

00403ed8 <__udivmoddi4>:
  403ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403edc:	468c      	mov	ip, r1
  403ede:	460d      	mov	r5, r1
  403ee0:	4604      	mov	r4, r0
  403ee2:	9e08      	ldr	r6, [sp, #32]
  403ee4:	2b00      	cmp	r3, #0
  403ee6:	d151      	bne.n	403f8c <__udivmoddi4+0xb4>
  403ee8:	428a      	cmp	r2, r1
  403eea:	4617      	mov	r7, r2
  403eec:	d96d      	bls.n	403fca <__udivmoddi4+0xf2>
  403eee:	fab2 fe82 	clz	lr, r2
  403ef2:	f1be 0f00 	cmp.w	lr, #0
  403ef6:	d00b      	beq.n	403f10 <__udivmoddi4+0x38>
  403ef8:	f1ce 0c20 	rsb	ip, lr, #32
  403efc:	fa01 f50e 	lsl.w	r5, r1, lr
  403f00:	fa20 fc0c 	lsr.w	ip, r0, ip
  403f04:	fa02 f70e 	lsl.w	r7, r2, lr
  403f08:	ea4c 0c05 	orr.w	ip, ip, r5
  403f0c:	fa00 f40e 	lsl.w	r4, r0, lr
  403f10:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403f14:	0c25      	lsrs	r5, r4, #16
  403f16:	fbbc f8fa 	udiv	r8, ip, sl
  403f1a:	fa1f f987 	uxth.w	r9, r7
  403f1e:	fb0a cc18 	mls	ip, sl, r8, ip
  403f22:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403f26:	fb08 f309 	mul.w	r3, r8, r9
  403f2a:	42ab      	cmp	r3, r5
  403f2c:	d90a      	bls.n	403f44 <__udivmoddi4+0x6c>
  403f2e:	19ed      	adds	r5, r5, r7
  403f30:	f108 32ff 	add.w	r2, r8, #4294967295
  403f34:	f080 8123 	bcs.w	40417e <__udivmoddi4+0x2a6>
  403f38:	42ab      	cmp	r3, r5
  403f3a:	f240 8120 	bls.w	40417e <__udivmoddi4+0x2a6>
  403f3e:	f1a8 0802 	sub.w	r8, r8, #2
  403f42:	443d      	add	r5, r7
  403f44:	1aed      	subs	r5, r5, r3
  403f46:	b2a4      	uxth	r4, r4
  403f48:	fbb5 f0fa 	udiv	r0, r5, sl
  403f4c:	fb0a 5510 	mls	r5, sl, r0, r5
  403f50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403f54:	fb00 f909 	mul.w	r9, r0, r9
  403f58:	45a1      	cmp	r9, r4
  403f5a:	d909      	bls.n	403f70 <__udivmoddi4+0x98>
  403f5c:	19e4      	adds	r4, r4, r7
  403f5e:	f100 33ff 	add.w	r3, r0, #4294967295
  403f62:	f080 810a 	bcs.w	40417a <__udivmoddi4+0x2a2>
  403f66:	45a1      	cmp	r9, r4
  403f68:	f240 8107 	bls.w	40417a <__udivmoddi4+0x2a2>
  403f6c:	3802      	subs	r0, #2
  403f6e:	443c      	add	r4, r7
  403f70:	eba4 0409 	sub.w	r4, r4, r9
  403f74:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403f78:	2100      	movs	r1, #0
  403f7a:	2e00      	cmp	r6, #0
  403f7c:	d061      	beq.n	404042 <__udivmoddi4+0x16a>
  403f7e:	fa24 f40e 	lsr.w	r4, r4, lr
  403f82:	2300      	movs	r3, #0
  403f84:	6034      	str	r4, [r6, #0]
  403f86:	6073      	str	r3, [r6, #4]
  403f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f8c:	428b      	cmp	r3, r1
  403f8e:	d907      	bls.n	403fa0 <__udivmoddi4+0xc8>
  403f90:	2e00      	cmp	r6, #0
  403f92:	d054      	beq.n	40403e <__udivmoddi4+0x166>
  403f94:	2100      	movs	r1, #0
  403f96:	e886 0021 	stmia.w	r6, {r0, r5}
  403f9a:	4608      	mov	r0, r1
  403f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403fa0:	fab3 f183 	clz	r1, r3
  403fa4:	2900      	cmp	r1, #0
  403fa6:	f040 808e 	bne.w	4040c6 <__udivmoddi4+0x1ee>
  403faa:	42ab      	cmp	r3, r5
  403fac:	d302      	bcc.n	403fb4 <__udivmoddi4+0xdc>
  403fae:	4282      	cmp	r2, r0
  403fb0:	f200 80fa 	bhi.w	4041a8 <__udivmoddi4+0x2d0>
  403fb4:	1a84      	subs	r4, r0, r2
  403fb6:	eb65 0503 	sbc.w	r5, r5, r3
  403fba:	2001      	movs	r0, #1
  403fbc:	46ac      	mov	ip, r5
  403fbe:	2e00      	cmp	r6, #0
  403fc0:	d03f      	beq.n	404042 <__udivmoddi4+0x16a>
  403fc2:	e886 1010 	stmia.w	r6, {r4, ip}
  403fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403fca:	b912      	cbnz	r2, 403fd2 <__udivmoddi4+0xfa>
  403fcc:	2701      	movs	r7, #1
  403fce:	fbb7 f7f2 	udiv	r7, r7, r2
  403fd2:	fab7 fe87 	clz	lr, r7
  403fd6:	f1be 0f00 	cmp.w	lr, #0
  403fda:	d134      	bne.n	404046 <__udivmoddi4+0x16e>
  403fdc:	1beb      	subs	r3, r5, r7
  403fde:	0c3a      	lsrs	r2, r7, #16
  403fe0:	fa1f fc87 	uxth.w	ip, r7
  403fe4:	2101      	movs	r1, #1
  403fe6:	fbb3 f8f2 	udiv	r8, r3, r2
  403fea:	0c25      	lsrs	r5, r4, #16
  403fec:	fb02 3318 	mls	r3, r2, r8, r3
  403ff0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403ff4:	fb0c f308 	mul.w	r3, ip, r8
  403ff8:	42ab      	cmp	r3, r5
  403ffa:	d907      	bls.n	40400c <__udivmoddi4+0x134>
  403ffc:	19ed      	adds	r5, r5, r7
  403ffe:	f108 30ff 	add.w	r0, r8, #4294967295
  404002:	d202      	bcs.n	40400a <__udivmoddi4+0x132>
  404004:	42ab      	cmp	r3, r5
  404006:	f200 80d1 	bhi.w	4041ac <__udivmoddi4+0x2d4>
  40400a:	4680      	mov	r8, r0
  40400c:	1aed      	subs	r5, r5, r3
  40400e:	b2a3      	uxth	r3, r4
  404010:	fbb5 f0f2 	udiv	r0, r5, r2
  404014:	fb02 5510 	mls	r5, r2, r0, r5
  404018:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40401c:	fb0c fc00 	mul.w	ip, ip, r0
  404020:	45a4      	cmp	ip, r4
  404022:	d907      	bls.n	404034 <__udivmoddi4+0x15c>
  404024:	19e4      	adds	r4, r4, r7
  404026:	f100 33ff 	add.w	r3, r0, #4294967295
  40402a:	d202      	bcs.n	404032 <__udivmoddi4+0x15a>
  40402c:	45a4      	cmp	ip, r4
  40402e:	f200 80b8 	bhi.w	4041a2 <__udivmoddi4+0x2ca>
  404032:	4618      	mov	r0, r3
  404034:	eba4 040c 	sub.w	r4, r4, ip
  404038:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40403c:	e79d      	b.n	403f7a <__udivmoddi4+0xa2>
  40403e:	4631      	mov	r1, r6
  404040:	4630      	mov	r0, r6
  404042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404046:	f1ce 0420 	rsb	r4, lr, #32
  40404a:	fa05 f30e 	lsl.w	r3, r5, lr
  40404e:	fa07 f70e 	lsl.w	r7, r7, lr
  404052:	fa20 f804 	lsr.w	r8, r0, r4
  404056:	0c3a      	lsrs	r2, r7, #16
  404058:	fa25 f404 	lsr.w	r4, r5, r4
  40405c:	ea48 0803 	orr.w	r8, r8, r3
  404060:	fbb4 f1f2 	udiv	r1, r4, r2
  404064:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404068:	fb02 4411 	mls	r4, r2, r1, r4
  40406c:	fa1f fc87 	uxth.w	ip, r7
  404070:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404074:	fb01 f30c 	mul.w	r3, r1, ip
  404078:	42ab      	cmp	r3, r5
  40407a:	fa00 f40e 	lsl.w	r4, r0, lr
  40407e:	d909      	bls.n	404094 <__udivmoddi4+0x1bc>
  404080:	19ed      	adds	r5, r5, r7
  404082:	f101 30ff 	add.w	r0, r1, #4294967295
  404086:	f080 808a 	bcs.w	40419e <__udivmoddi4+0x2c6>
  40408a:	42ab      	cmp	r3, r5
  40408c:	f240 8087 	bls.w	40419e <__udivmoddi4+0x2c6>
  404090:	3902      	subs	r1, #2
  404092:	443d      	add	r5, r7
  404094:	1aeb      	subs	r3, r5, r3
  404096:	fa1f f588 	uxth.w	r5, r8
  40409a:	fbb3 f0f2 	udiv	r0, r3, r2
  40409e:	fb02 3310 	mls	r3, r2, r0, r3
  4040a2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4040a6:	fb00 f30c 	mul.w	r3, r0, ip
  4040aa:	42ab      	cmp	r3, r5
  4040ac:	d907      	bls.n	4040be <__udivmoddi4+0x1e6>
  4040ae:	19ed      	adds	r5, r5, r7
  4040b0:	f100 38ff 	add.w	r8, r0, #4294967295
  4040b4:	d26f      	bcs.n	404196 <__udivmoddi4+0x2be>
  4040b6:	42ab      	cmp	r3, r5
  4040b8:	d96d      	bls.n	404196 <__udivmoddi4+0x2be>
  4040ba:	3802      	subs	r0, #2
  4040bc:	443d      	add	r5, r7
  4040be:	1aeb      	subs	r3, r5, r3
  4040c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4040c4:	e78f      	b.n	403fe6 <__udivmoddi4+0x10e>
  4040c6:	f1c1 0720 	rsb	r7, r1, #32
  4040ca:	fa22 f807 	lsr.w	r8, r2, r7
  4040ce:	408b      	lsls	r3, r1
  4040d0:	fa05 f401 	lsl.w	r4, r5, r1
  4040d4:	ea48 0303 	orr.w	r3, r8, r3
  4040d8:	fa20 fe07 	lsr.w	lr, r0, r7
  4040dc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4040e0:	40fd      	lsrs	r5, r7
  4040e2:	ea4e 0e04 	orr.w	lr, lr, r4
  4040e6:	fbb5 f9fc 	udiv	r9, r5, ip
  4040ea:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4040ee:	fb0c 5519 	mls	r5, ip, r9, r5
  4040f2:	fa1f f883 	uxth.w	r8, r3
  4040f6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4040fa:	fb09 f408 	mul.w	r4, r9, r8
  4040fe:	42ac      	cmp	r4, r5
  404100:	fa02 f201 	lsl.w	r2, r2, r1
  404104:	fa00 fa01 	lsl.w	sl, r0, r1
  404108:	d908      	bls.n	40411c <__udivmoddi4+0x244>
  40410a:	18ed      	adds	r5, r5, r3
  40410c:	f109 30ff 	add.w	r0, r9, #4294967295
  404110:	d243      	bcs.n	40419a <__udivmoddi4+0x2c2>
  404112:	42ac      	cmp	r4, r5
  404114:	d941      	bls.n	40419a <__udivmoddi4+0x2c2>
  404116:	f1a9 0902 	sub.w	r9, r9, #2
  40411a:	441d      	add	r5, r3
  40411c:	1b2d      	subs	r5, r5, r4
  40411e:	fa1f fe8e 	uxth.w	lr, lr
  404122:	fbb5 f0fc 	udiv	r0, r5, ip
  404126:	fb0c 5510 	mls	r5, ip, r0, r5
  40412a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40412e:	fb00 f808 	mul.w	r8, r0, r8
  404132:	45a0      	cmp	r8, r4
  404134:	d907      	bls.n	404146 <__udivmoddi4+0x26e>
  404136:	18e4      	adds	r4, r4, r3
  404138:	f100 35ff 	add.w	r5, r0, #4294967295
  40413c:	d229      	bcs.n	404192 <__udivmoddi4+0x2ba>
  40413e:	45a0      	cmp	r8, r4
  404140:	d927      	bls.n	404192 <__udivmoddi4+0x2ba>
  404142:	3802      	subs	r0, #2
  404144:	441c      	add	r4, r3
  404146:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40414a:	eba4 0408 	sub.w	r4, r4, r8
  40414e:	fba0 8902 	umull	r8, r9, r0, r2
  404152:	454c      	cmp	r4, r9
  404154:	46c6      	mov	lr, r8
  404156:	464d      	mov	r5, r9
  404158:	d315      	bcc.n	404186 <__udivmoddi4+0x2ae>
  40415a:	d012      	beq.n	404182 <__udivmoddi4+0x2aa>
  40415c:	b156      	cbz	r6, 404174 <__udivmoddi4+0x29c>
  40415e:	ebba 030e 	subs.w	r3, sl, lr
  404162:	eb64 0405 	sbc.w	r4, r4, r5
  404166:	fa04 f707 	lsl.w	r7, r4, r7
  40416a:	40cb      	lsrs	r3, r1
  40416c:	431f      	orrs	r7, r3
  40416e:	40cc      	lsrs	r4, r1
  404170:	6037      	str	r7, [r6, #0]
  404172:	6074      	str	r4, [r6, #4]
  404174:	2100      	movs	r1, #0
  404176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40417a:	4618      	mov	r0, r3
  40417c:	e6f8      	b.n	403f70 <__udivmoddi4+0x98>
  40417e:	4690      	mov	r8, r2
  404180:	e6e0      	b.n	403f44 <__udivmoddi4+0x6c>
  404182:	45c2      	cmp	sl, r8
  404184:	d2ea      	bcs.n	40415c <__udivmoddi4+0x284>
  404186:	ebb8 0e02 	subs.w	lr, r8, r2
  40418a:	eb69 0503 	sbc.w	r5, r9, r3
  40418e:	3801      	subs	r0, #1
  404190:	e7e4      	b.n	40415c <__udivmoddi4+0x284>
  404192:	4628      	mov	r0, r5
  404194:	e7d7      	b.n	404146 <__udivmoddi4+0x26e>
  404196:	4640      	mov	r0, r8
  404198:	e791      	b.n	4040be <__udivmoddi4+0x1e6>
  40419a:	4681      	mov	r9, r0
  40419c:	e7be      	b.n	40411c <__udivmoddi4+0x244>
  40419e:	4601      	mov	r1, r0
  4041a0:	e778      	b.n	404094 <__udivmoddi4+0x1bc>
  4041a2:	3802      	subs	r0, #2
  4041a4:	443c      	add	r4, r7
  4041a6:	e745      	b.n	404034 <__udivmoddi4+0x15c>
  4041a8:	4608      	mov	r0, r1
  4041aa:	e708      	b.n	403fbe <__udivmoddi4+0xe6>
  4041ac:	f1a8 0802 	sub.w	r8, r8, #2
  4041b0:	443d      	add	r5, r7
  4041b2:	e72b      	b.n	40400c <__udivmoddi4+0x134>

004041b4 <__aeabi_idiv0>:
  4041b4:	4770      	bx	lr
  4041b6:	bf00      	nop
  4041b8:	5253492d 	.word	0x5253492d
  4041bc:	6f56202d 	.word	0x6f56202d
  4041c0:	6761746c 	.word	0x6761746c
  4041c4:	6f432065 	.word	0x6f432065
  4041c8:	7261706d 	.word	0x7261706d
  4041cc:	6e6f7369 	.word	0x6e6f7369
  4041d0:	73655220 	.word	0x73655220
  4041d4:	3a746c75 	.word	0x3a746c75
  4041d8:	35444120 	.word	0x35444120
  4041dc:	44203e20 	.word	0x44203e20
  4041e0:	0d304341 	.word	0x0d304341
  4041e4:	00000000 	.word	0x00000000
  4041e8:	5253492d 	.word	0x5253492d
  4041ec:	6f56202d 	.word	0x6f56202d
  4041f0:	6761746c 	.word	0x6761746c
  4041f4:	6f432065 	.word	0x6f432065
  4041f8:	7261706d 	.word	0x7261706d
  4041fc:	6e6f7369 	.word	0x6e6f7369
  404200:	73655220 	.word	0x73655220
  404204:	3a746c75 	.word	0x3a746c75
  404208:	35444120 	.word	0x35444120
  40420c:	44203c20 	.word	0x44203c20
  404210:	0d304341 	.word	0x0d304341
  404214:	00000000 	.word	0x00000000
  404218:	0000002e 	.word	0x0000002e
  40421c:	0d0a7525 	.word	0x0d0a7525
  404220:	00000000 	.word	0x00000000

00404224 <_global_impure_ptr>:
  404224:	20000010 0000000a 33323130 37363534     ... ....01234567
  404234:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  404244:	37363534 62613938 66656463 00000000     456789abcdef....
  404254:	6c756e28 0000296c                       (null)..

0040425c <blanks.7217>:
  40425c:	20202020 20202020 20202020 20202020                     

0040426c <zeroes.7218>:
  40426c:	30303030 30303030 30303030 30303030     0000000000000000
  40427c:	00000043 49534f50 00000058              C...POSIX...

00404288 <_ctype_>:
  404288:	20202000 20202020 28282020 20282828     .         ((((( 
  404298:	20202020 20202020 20202020 20202020                     
  4042a8:	10108820 10101010 10101010 10101010      ...............
  4042b8:	04040410 04040404 10040404 10101010     ................
  4042c8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4042d8:	01010101 01010101 01010101 10101010     ................
  4042e8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4042f8:	02020202 02020202 02020202 10101010     ................
  404308:	00000020 00000000 00000000 00000000      ...............
	...

0040438c <_init>:
  40438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40438e:	bf00      	nop
  404390:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404392:	bc08      	pop	{r3}
  404394:	469e      	mov	lr, r3
  404396:	4770      	bx	lr

00404398 <__init_array_start>:
  404398:	00402439 	.word	0x00402439

0040439c <__frame_dummy_init_array_entry>:
  40439c:	0040011d                                ..@.

004043a0 <_fini>:
  4043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4043a2:	bf00      	nop
  4043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4043a6:	bc08      	pop	{r3}
  4043a8:	469e      	mov	lr, r3
  4043aa:	4770      	bx	lr

004043ac <__fini_array_start>:
  4043ac:	004000f9 	.word	0x004000f9

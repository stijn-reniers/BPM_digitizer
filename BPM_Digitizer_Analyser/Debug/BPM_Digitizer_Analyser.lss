
BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d38  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404d38  00404d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20000000  00404d40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000c600  20000870  004055b0  0002086c  2**3
                  ALLOC
  4 .stack        00003000  2000ce70  00411bb0  0002086c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002089a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001ba88  00000000  00000000  000208f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000412a  00000000  00000000  0003c37b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000051cb  00000000  00000000  000404a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b60  00000000  00000000  00045670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ac0  00000000  00000000  000461d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b873  00000000  00000000  00046c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001008f  00000000  00000000  00062503  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00065e25  00000000  00000000  00072592  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002504  00000000  00000000  000d83b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 fe 00 20 0d 15 40 00 09 15 40 00 09 15 40 00     p.. ..@...@...@.
  400010:	09 15 40 00 09 15 40 00 09 15 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	09 15 40 00 09 15 40 00 00 00 00 00 09 15 40 00     ..@...@.......@.
  40003c:	09 15 40 00 09 15 40 00 09 15 40 00 09 15 40 00     ..@...@...@...@.
  40004c:	09 15 40 00 09 15 40 00 09 15 40 00 09 15 40 00     ..@...@...@...@.
  40005c:	59 0b 40 00 09 15 40 00 09 15 40 00 09 15 40 00     Y.@...@...@...@.
  40006c:	09 15 40 00 09 15 40 00 09 15 40 00 a1 17 40 00     ..@...@...@...@.
  40007c:	09 15 40 00 09 15 40 00 09 15 40 00 09 15 40 00     ..@...@...@...@.
  40008c:	09 15 40 00 09 15 40 00 09 15 40 00 ed 19 40 00     ..@...@...@...@.
  40009c:	09 15 40 00 09 15 40 00 09 15 40 00 09 15 40 00     ..@...@...@...@.
  4000ac:	09 15 40 00 09 15 40 00 09 15 40 00 4d 11 40 00     ..@...@...@.M.@.
  4000bc:	61 11 40 00 09 15 40 00 cd 18 40 00 09 15 40 00     a.@...@...@...@.
  4000cc:	09 15 40 00 09 15 40 00 09 15 40 00 09 15 40 00     ..@...@...@...@.
  4000dc:	09 15 40 00 09 15 40 00 09 15 40 00 09 15 40 00     ..@...@...@...@.
  4000ec:	09 15 40 00 09 15 40 00 09 15 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000870 	.word	0x20000870
  400114:	00000000 	.word	0x00000000
  400118:	00404d40 	.word	0x00404d40

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00404d40 	.word	0x00404d40
  400158:	20000874 	.word	0x20000874
  40015c:	00404d40 	.word	0x00404d40
  400160:	00000000 	.word	0x00000000

00400164 <sample_average>:


/*	Compute population average/mean of the distribution (collector peak), which is a sample index*/

double sample_average(uint16_t start, uint16_t end) 
{
  400164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		
	uint32_t sample_avg = 0;
	uint32_t total_frequency = 0;
	
	for (uint16_t i = start; i < end; i++)
  400166:	4288      	cmp	r0, r1
  400168:	d21c      	bcs.n	4001a4 <sample_average+0x40>
  40016a:	4603      	mov	r3, r0
  40016c:	4a0f      	ldr	r2, [pc, #60]	; (4001ac <sample_average+0x48>)
  40016e:	6815      	ldr	r5, [r2, #0]
  400170:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	{
		sample_avg += (uint32_t)algorithm_buffer[i]*i;
  400174:	2400      	movs	r4, #0
  400176:	4620      	mov	r0, r4
  400178:	f835 2b02 	ldrh.w	r2, [r5], #2
  40017c:	fb03 0002 	mla	r0, r3, r2, r0
		total_frequency += (uint32_t)algorithm_buffer[i];
  400180:	4414      	add	r4, r2
  400182:	3301      	adds	r3, #1
	for (uint16_t i = start; i < end; i++)
  400184:	b29a      	uxth	r2, r3
  400186:	4291      	cmp	r1, r2
  400188:	d8f6      	bhi.n	400178 <sample_average+0x14>
	}
			
	return (double)sample_avg/total_frequency;
  40018a:	4d09      	ldr	r5, [pc, #36]	; (4001b0 <sample_average+0x4c>)
  40018c:	47a8      	blx	r5
  40018e:	4606      	mov	r6, r0
  400190:	460f      	mov	r7, r1
  400192:	4620      	mov	r0, r4
  400194:	47a8      	blx	r5
  400196:	4602      	mov	r2, r0
  400198:	460b      	mov	r3, r1
  40019a:	4630      	mov	r0, r6
  40019c:	4639      	mov	r1, r7
  40019e:	4c05      	ldr	r4, [pc, #20]	; (4001b4 <sample_average+0x50>)
  4001a0:	47a0      	blx	r4
}
  4001a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t total_frequency = 0;
  4001a4:	2400      	movs	r4, #0
	uint32_t sample_avg = 0;
  4001a6:	4620      	mov	r0, r4
  4001a8:	e7ef      	b.n	40018a <sample_average+0x26>
  4001aa:	bf00      	nop
  4001ac:	2000001c 	.word	0x2000001c
  4001b0:	004030c9 	.word	0x004030c9
  4001b4:	00403409 	.word	0x00403409

004001b8 <find_max>:


/* Find the maximum of the BPM-80 data half cycle and return its index */

uint16_t find_max(uint16_t* halfcycle, uint16_t length)
{
  4001b8:	b470      	push	{r4, r5, r6}
	uint16_t maximum = 0;
	uint16_t max_index = 0;
									
	for (uint16_t i = 0; i < length; i++)
  4001ba:	460e      	mov	r6, r1
  4001bc:	b181      	cbz	r1, 4001e0 <find_max+0x28>
  4001be:	1e81      	subs	r1, r0, #2
  4001c0:	2300      	movs	r3, #0
  4001c2:	4618      	mov	r0, r3
  4001c4:	461c      	mov	r4, r3
  4001c6:	b29d      	uxth	r5, r3
	{
		if (halfcycle[i] > maximum) 
  4001c8:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  4001cc:	42a2      	cmp	r2, r4
  4001ce:	bf84      	itt	hi
  4001d0:	4628      	movhi	r0, r5
		{
			max_index = i;
			maximum = halfcycle[i];
  4001d2:	4614      	movhi	r4, r2
  4001d4:	3301      	adds	r3, #1
	for (uint16_t i = 0; i < length; i++)
  4001d6:	b29a      	uxth	r2, r3
  4001d8:	4296      	cmp	r6, r2
  4001da:	d8f4      	bhi.n	4001c6 <find_max+0xe>
		}
	}
	
	return max_index;
}
  4001dc:	bc70      	pop	{r4, r5, r6}
  4001de:	4770      	bx	lr
	uint16_t max_index = 0;
  4001e0:	4608      	mov	r0, r1
  4001e2:	e7fb      	b.n	4001dc <find_max+0x24>

004001e4 <sum>:
/* Find the sum of a window of samples*/

uint16_t sum(uint16_t start, uint16_t end)
{
	uint16_t result=0;
	for (uint16_t i=start; i< end; i++ )
  4001e4:	4288      	cmp	r0, r1
  4001e6:	d212      	bcs.n	40020e <sum+0x2a>
	{
		result+= algorithm_buffer[i];
  4001e8:	4b0a      	ldr	r3, [pc, #40]	; (400214 <sum+0x30>)
  4001ea:	681a      	ldr	r2, [r3, #0]
  4001ec:	eb02 0340 	add.w	r3, r2, r0, lsl #1
  4001f0:	3901      	subs	r1, #1
  4001f2:	1a09      	subs	r1, r1, r0
  4001f4:	3001      	adds	r0, #1
  4001f6:	fa10 f181 	uxtah	r1, r0, r1
  4001fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  4001fe:	2000      	movs	r0, #0
  400200:	f833 2b02 	ldrh.w	r2, [r3], #2
  400204:	4410      	add	r0, r2
  400206:	b280      	uxth	r0, r0
	for (uint16_t i=start; i< end; i++ )
  400208:	428b      	cmp	r3, r1
  40020a:	d1f9      	bne.n	400200 <sum+0x1c>
  40020c:	4770      	bx	lr
	uint16_t result=0;
  40020e:	2000      	movs	r0, #0
	}
	return result;
}
  400210:	4770      	bx	lr
  400212:	bf00      	nop
  400214:	2000001c 	.word	0x2000001c

00400218 <detect_peaks>:
/* Find beam peak locations and peak widths for X and Y using either the threshold or dispersion-based algorithm */
/* Returns an array of 6 elements : 1. peak position X  2. peak edge left X  3. peak edge right X 
									4. peak position Y  5. peak edge left Y  6. peak edge right Y */

void detect_peaks(uint16_t threshold)
{
  400218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40021c:	4605      	mov	r5, r0
	uint16_t peak1 = find_max(algorithm_buffer, half_cycle_length);
  40021e:	4b45      	ldr	r3, [pc, #276]	; (400334 <detect_peaks+0x11c>)
  400220:	681c      	ldr	r4, [r3, #0]
  400222:	4b45      	ldr	r3, [pc, #276]	; (400338 <detect_peaks+0x120>)
  400224:	f8b3 9000 	ldrh.w	r9, [r3]
  400228:	4649      	mov	r1, r9
  40022a:	4620      	mov	r0, r4
  40022c:	4e43      	ldr	r6, [pc, #268]	; (40033c <detect_peaks+0x124>)
  40022e:	47b0      	blx	r6
  400230:	4680      	mov	r8, r0
	uint16_t peak2 = half_cycle_length + find_max(algorithm_buffer + half_cycle_length, half_cycle_length);
  400232:	4649      	mov	r1, r9
  400234:	eb04 0049 	add.w	r0, r4, r9, lsl #1
  400238:	47b0      	blx	r6
  40023a:	4448      	add	r0, r9
  40023c:	b286      	uxth	r6, r0
	
	// Use peak1 and peak2 to find the 4 corner points of the beams, possibly combine with dispersion-based algorithm
	
	beam_parameters[1] = peak1;
  40023e:	4f40      	ldr	r7, [pc, #256]	; (400340 <detect_peaks+0x128>)
  400240:	f8df a104 	ldr.w	sl, [pc, #260]	; 400348 <detect_peaks+0x130>
  400244:	4640      	mov	r0, r8
  400246:	47d0      	blx	sl
  400248:	e9c7 0102 	strd	r0, r1, [r7, #8]
	beam_parameters[4] = peak2;
  40024c:	4630      	mov	r0, r6
  40024e:	47d0      	blx	sl
  400250:	e9c7 0108 	strd	r0, r1, [r7, #32]
			
	// find left corner of X peak
		
	for (uint16_t i = 0; i <= peak1; i++)
	{
		if(algorithm_buffer[peak1 - i] < threshold) 
  400254:	4647      	mov	r7, r8
  400256:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
  40025a:	42ab      	cmp	r3, r5
  40025c:	d352      	bcc.n	400304 <detect_peaks+0xec>
  40025e:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak1; i++)
  400260:	3301      	adds	r3, #1
  400262:	b29b      	uxth	r3, r3
  400264:	4598      	cmp	r8, r3
  400266:	d359      	bcc.n	40031c <detect_peaks+0x104>
		if(algorithm_buffer[peak1 - i] < threshold) 
  400268:	1af8      	subs	r0, r7, r3
  40026a:	f834 2010 	ldrh.w	r2, [r4, r0, lsl #1]
  40026e:	42aa      	cmp	r2, r5
  400270:	d2f6      	bcs.n	400260 <detect_peaks+0x48>
		{
			beam_parameters[2] = peak1-i;
  400272:	4b34      	ldr	r3, [pc, #208]	; (400344 <detect_peaks+0x12c>)
  400274:	4798      	blx	r3
  400276:	4b32      	ldr	r3, [pc, #200]	; (400340 <detect_peaks+0x128>)
  400278:	e9c3 0104 	strd	r0, r1, [r3, #16]
		}
	}
	
	// find right corner of X peak
	
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40027c:	ebb9 0908 	subs.w	r9, r9, r8
  400280:	d412      	bmi.n	4002a8 <detect_peaks+0x90>
	{
		if(algorithm_buffer [peak1 + i] < threshold) 
  400282:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
  400286:	42ab      	cmp	r3, r5
  400288:	d33e      	bcc.n	400308 <detect_peaks+0xf0>
  40028a:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40028c:	3301      	adds	r3, #1
  40028e:	b29b      	uxth	r3, r3
  400290:	454b      	cmp	r3, r9
  400292:	dc09      	bgt.n	4002a8 <detect_peaks+0x90>
		if(algorithm_buffer [peak1 + i] < threshold) 
  400294:	19d8      	adds	r0, r3, r7
  400296:	f834 2010 	ldrh.w	r2, [r4, r0, lsl #1]
  40029a:	42aa      	cmp	r2, r5
  40029c:	d2f6      	bcs.n	40028c <detect_peaks+0x74>
		{
			beam_parameters[3] = peak1+i;
  40029e:	4b29      	ldr	r3, [pc, #164]	; (400344 <detect_peaks+0x12c>)
  4002a0:	4798      	blx	r3
  4002a2:	4b27      	ldr	r3, [pc, #156]	; (400340 <detect_peaks+0x128>)
  4002a4:	e9c3 0106 	strd	r0, r1, [r3, #24]
	
	// find left corner of Y peak
	
	for (uint16_t i = 0; i <= peak2; i++)
	{
		if(algorithm_buffer[peak2 - i] < threshold)
  4002a8:	4637      	mov	r7, r6
  4002aa:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  4002ae:	42ab      	cmp	r3, r5
  4002b0:	d32c      	bcc.n	40030c <detect_peaks+0xf4>
  4002b2:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak2; i++)
  4002b4:	3301      	adds	r3, #1
  4002b6:	b29b      	uxth	r3, r3
  4002b8:	429e      	cmp	r6, r3
  4002ba:	d333      	bcc.n	400324 <detect_peaks+0x10c>
		if(algorithm_buffer[peak2 - i] < threshold)
  4002bc:	1af8      	subs	r0, r7, r3
  4002be:	f834 2010 	ldrh.w	r2, [r4, r0, lsl #1]
  4002c2:	42aa      	cmp	r2, r5
  4002c4:	d2f6      	bcs.n	4002b4 <detect_peaks+0x9c>
		{
			beam_parameters[5] = peak2-i;
  4002c6:	4b1f      	ldr	r3, [pc, #124]	; (400344 <detect_peaks+0x12c>)
  4002c8:	4798      	blx	r3
  4002ca:	4b1d      	ldr	r3, [pc, #116]	; (400340 <detect_peaks+0x128>)
  4002cc:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
		}
	}
	
	// find right corner of Y peak
	
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  4002d0:	f5c6 5102 	rsb	r1, r6, #8320	; 0x2080
  4002d4:	310e      	adds	r1, #14
  4002d6:	2900      	cmp	r1, #0
  4002d8:	db1a      	blt.n	400310 <detect_peaks+0xf8>
	{
		if(algorithm_buffer[peak2 + i] < threshold)
  4002da:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  4002de:	42ab      	cmp	r3, r5
  4002e0:	d318      	bcc.n	400314 <detect_peaks+0xfc>
  4002e2:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  4002e4:	3301      	adds	r3, #1
  4002e6:	b29b      	uxth	r3, r3
  4002e8:	428b      	cmp	r3, r1
  4002ea:	dc15      	bgt.n	400318 <detect_peaks+0x100>
		if(algorithm_buffer[peak2 + i] < threshold)
  4002ec:	19d8      	adds	r0, r3, r7
  4002ee:	f834 2010 	ldrh.w	r2, [r4, r0, lsl #1]
  4002f2:	42aa      	cmp	r2, r5
  4002f4:	d2f6      	bcs.n	4002e4 <detect_peaks+0xcc>
		{
			beam_parameters[6] = peak2+i;
  4002f6:	4b13      	ldr	r3, [pc, #76]	; (400344 <detect_peaks+0x12c>)
  4002f8:	4798      	blx	r3
  4002fa:	4b11      	ldr	r3, [pc, #68]	; (400340 <detect_peaks+0x128>)
  4002fc:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
			break;
  400300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(algorithm_buffer[peak1 - i] < threshold) 
  400304:	4640      	mov	r0, r8
  400306:	e7b4      	b.n	400272 <detect_peaks+0x5a>
		if(algorithm_buffer [peak1 + i] < threshold) 
  400308:	4640      	mov	r0, r8
  40030a:	e7c8      	b.n	40029e <detect_peaks+0x86>
		if(algorithm_buffer[peak2 - i] < threshold)
  40030c:	4630      	mov	r0, r6
  40030e:	e7da      	b.n	4002c6 <detect_peaks+0xae>
  400310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(algorithm_buffer[peak2 + i] < threshold)
  400314:	4630      	mov	r0, r6
  400316:	e7ee      	b.n	4002f6 <detect_peaks+0xde>
  400318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40031c:	ebb9 0908 	subs.w	r9, r9, r8
  400320:	d5b3      	bpl.n	40028a <detect_peaks+0x72>
  400322:	e7c1      	b.n	4002a8 <detect_peaks+0x90>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  400324:	f5c6 5102 	rsb	r1, r6, #8320	; 0x2080
  400328:	310e      	adds	r1, #14
  40032a:	2900      	cmp	r1, #0
  40032c:	dad9      	bge.n	4002e2 <detect_peaks+0xca>
  40032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400332:	bf00      	nop
  400334:	2000001c 	.word	0x2000001c
  400338:	20000004 	.word	0x20000004
  40033c:	004001b9 	.word	0x004001b9
  400340:	20000890 	.word	0x20000890
  400344:	004030e9 	.word	0x004030e9
  400348:	004030c9 	.word	0x004030c9

0040034c <compute_beam_intensity>:
/* Compute beam intensity of a cycle in X and Y cross section */
/* Takes as input the borders of both peaks*/
/* Outputs beam intensity of X and Y cross-section, so that higher level data representation can choose how to combine the values*/

void compute_beam_intensity(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right)
{
  40034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400350:	4691      	mov	r9, r2
  400352:	4698      	mov	r8, r3
	beam_parameters[7] = 0;
  400354:	4b22      	ldr	r3, [pc, #136]	; (4003e0 <compute_beam_intensity+0x94>)
  400356:	2400      	movs	r4, #0
  400358:	2500      	movs	r5, #0
  40035a:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
	beam_parameters[8] = 0;
  40035e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
	
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  400362:	4288      	cmp	r0, r1
  400364:	d21a      	bcs.n	40039c <compute_beam_intensity+0x50>
	{
		beam_parameters[7] += (uint32_t)algorithm_buffer[i];
  400366:	4b1f      	ldr	r3, [pc, #124]	; (4003e4 <compute_beam_intensity+0x98>)
  400368:	681f      	ldr	r7, [r3, #0]
  40036a:	eb07 0440 	add.w	r4, r7, r0, lsl #1
  40036e:	3901      	subs	r1, #1
  400370:	1a09      	subs	r1, r1, r0
  400372:	3001      	adds	r0, #1
  400374:	fa10 f181 	uxtah	r1, r0, r1
  400378:	eb07 0741 	add.w	r7, r7, r1, lsl #1
  40037c:	4d18      	ldr	r5, [pc, #96]	; (4003e0 <compute_beam_intensity+0x94>)
  40037e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 4003ec <compute_beam_intensity+0xa0>
  400382:	4e19      	ldr	r6, [pc, #100]	; (4003e8 <compute_beam_intensity+0x9c>)
  400384:	f834 0b02 	ldrh.w	r0, [r4], #2
  400388:	47d0      	blx	sl
  40038a:	4602      	mov	r2, r0
  40038c:	460b      	mov	r3, r1
  40038e:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	; 0x38
  400392:	47b0      	blx	r6
  400394:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  400398:	42bc      	cmp	r4, r7
  40039a:	d1f3      	bne.n	400384 <compute_beam_intensity+0x38>
	}
	
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  40039c:	45c1      	cmp	r9, r8
  40039e:	d21d      	bcs.n	4003dc <compute_beam_intensity+0x90>
	{
		beam_parameters[8] += (uint32_t)algorithm_buffer[i];
  4003a0:	4b10      	ldr	r3, [pc, #64]	; (4003e4 <compute_beam_intensity+0x98>)
  4003a2:	681e      	ldr	r6, [r3, #0]
  4003a4:	eb06 0449 	add.w	r4, r6, r9, lsl #1
  4003a8:	f108 38ff 	add.w	r8, r8, #4294967295
  4003ac:	eba8 0809 	sub.w	r8, r8, r9
  4003b0:	f109 0901 	add.w	r9, r9, #1
  4003b4:	fa19 f988 	uxtah	r9, r9, r8
  4003b8:	eb06 0649 	add.w	r6, r6, r9, lsl #1
  4003bc:	4d08      	ldr	r5, [pc, #32]	; (4003e0 <compute_beam_intensity+0x94>)
  4003be:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4003ec <compute_beam_intensity+0xa0>
  4003c2:	4f09      	ldr	r7, [pc, #36]	; (4003e8 <compute_beam_intensity+0x9c>)
  4003c4:	f834 0b02 	ldrh.w	r0, [r4], #2
  4003c8:	47c0      	blx	r8
  4003ca:	4602      	mov	r2, r0
  4003cc:	460b      	mov	r3, r1
  4003ce:	e9d5 0110 	ldrd	r0, r1, [r5, #64]	; 0x40
  4003d2:	47b8      	blx	r7
  4003d4:	e9c5 0110 	strd	r0, r1, [r5, #64]	; 0x40
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  4003d8:	42b4      	cmp	r4, r6
  4003da:	d1f3      	bne.n	4003c4 <compute_beam_intensity+0x78>
  4003dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003e0:	20000890 	.word	0x20000890
  4003e4:	2000001c 	.word	0x2000001c
  4003e8:	00402e51 	.word	0x00402e51
  4003ec:	004030c9 	.word	0x004030c9

004003f0 <compute_fwhm>:

 
 /* Compute FWHM X and Y (based on variance in this case, assumes more or less gaussian profile */

 void compute_fwhm(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right)
 {
  4003f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003f4:	b08b      	sub	sp, #44	; 0x2c
  4003f6:	4681      	mov	r9, r0
  4003f8:	9007      	str	r0, [sp, #28]
  4003fa:	4688      	mov	r8, r1
  4003fc:	9108      	str	r1, [sp, #32]
  4003fe:	4617      	mov	r7, r2
  400400:	9205      	str	r2, [sp, #20]
  400402:	461e      	mov	r6, r3
  400404:	9306      	str	r3, [sp, #24]
	 
	 uint16_t mean[2] = {0,0};
	 long long summed=0;
	 int variance=0;
	 
	 mean[0] = sample_average(peak1_left, peak1_right);
  400406:	4d68      	ldr	r5, [pc, #416]	; (4005a8 <compute_fwhm+0x1b8>)
  400408:	47a8      	blx	r5
  40040a:	4c68      	ldr	r4, [pc, #416]	; (4005ac <compute_fwhm+0x1bc>)
  40040c:	47a0      	blx	r4
  40040e:	fa1f fa80 	uxth.w	sl, r0
	 mean[1] = sample_average(peak2_left, peak2_right);
  400412:	4631      	mov	r1, r6
  400414:	4638      	mov	r0, r7
  400416:	47a8      	blx	r5
  400418:	47a0      	blx	r4
  40041a:	b284      	uxth	r4, r0
  40041c:	9409      	str	r4, [sp, #36]	; 0x24
	 
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  40041e:	45c1      	cmp	r9, r8
  400420:	f080 80b4 	bcs.w	40058c <compute_fwhm+0x19c>
  400424:	4649      	mov	r1, r9
  400426:	eba9 040a 	sub.w	r4, r9, sl
  40042a:	4b61      	ldr	r3, [pc, #388]	; (4005b0 <compute_fwhm+0x1c0>)
  40042c:	681d      	ldr	r5, [r3, #0]
  40042e:	eb05 0549 	add.w	r5, r5, r9, lsl #1
  400432:	f108 33ff 	add.w	r3, r8, #4294967295
  400436:	1a5b      	subs	r3, r3, r1
  400438:	1c4a      	adds	r2, r1, #1
  40043a:	fa12 f383 	uxtah	r3, r2, r3
  40043e:	eba3 0a0a 	sub.w	sl, r3, sl
	 {
		 summed+= (pow((i-mean[0]),2)*algorithm_buffer[i]);
  400442:	2200      	movs	r2, #0
  400444:	2300      	movs	r3, #0
  400446:	e9cd 2300 	strd	r2, r3, [sp]
  40044a:	4f5a      	ldr	r7, [pc, #360]	; (4005b4 <compute_fwhm+0x1c4>)
  40044c:	4e5a      	ldr	r6, [pc, #360]	; (4005b8 <compute_fwhm+0x1c8>)
  40044e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 4005d4 <compute_fwhm+0x1e4>
  400452:	f8df 9184 	ldr.w	r9, [pc, #388]	; 4005d8 <compute_fwhm+0x1e8>
  400456:	46d3      	mov	fp, sl
  400458:	46aa      	mov	sl, r5
  40045a:	4620      	mov	r0, r4
  40045c:	47b8      	blx	r7
  40045e:	f83a 5b02 	ldrh.w	r5, [sl], #2
  400462:	4602      	mov	r2, r0
  400464:	460b      	mov	r3, r1
  400466:	47b0      	blx	r6
  400468:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40046c:	4628      	mov	r0, r5
  40046e:	47b8      	blx	r7
  400470:	4602      	mov	r2, r0
  400472:	460b      	mov	r3, r1
  400474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400478:	47b0      	blx	r6
  40047a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40047e:	e9dd 0100 	ldrd	r0, r1, [sp]
  400482:	4b4e      	ldr	r3, [pc, #312]	; (4005bc <compute_fwhm+0x1cc>)
  400484:	4798      	blx	r3
  400486:	4602      	mov	r2, r0
  400488:	460b      	mov	r3, r1
  40048a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40048e:	47c0      	blx	r8
  400490:	47c8      	blx	r9
  400492:	e9cd 0100 	strd	r0, r1, [sp]
  400496:	3401      	adds	r4, #1
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  400498:	455c      	cmp	r4, fp
  40049a:	d1de      	bne.n	40045a <compute_fwhm+0x6a>
	 }
	 variance=summed/sum(peak1_left,peak1_right);
  40049c:	9908      	ldr	r1, [sp, #32]
  40049e:	9807      	ldr	r0, [sp, #28]
  4004a0:	4b47      	ldr	r3, [pc, #284]	; (4005c0 <compute_fwhm+0x1d0>)
  4004a2:	4798      	blx	r3
  4004a4:	b282      	uxth	r2, r0
  4004a6:	2300      	movs	r3, #0
  4004a8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4004ac:	4c45      	ldr	r4, [pc, #276]	; (4005c4 <compute_fwhm+0x1d4>)
  4004ae:	47a0      	blx	r4
	
	 beam_parameters[9]= (uint16_t)(sqrt(variance)*2.355);
  4004b0:	4b40      	ldr	r3, [pc, #256]	; (4005b4 <compute_fwhm+0x1c4>)
  4004b2:	4798      	blx	r3
  4004b4:	4b44      	ldr	r3, [pc, #272]	; (4005c8 <compute_fwhm+0x1d8>)
  4004b6:	4798      	blx	r3
  4004b8:	a339      	add	r3, pc, #228	; (adr r3, 4005a0 <compute_fwhm+0x1b0>)
  4004ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4004be:	4c3e      	ldr	r4, [pc, #248]	; (4005b8 <compute_fwhm+0x1c8>)
  4004c0:	47a0      	blx	r4
  4004c2:	4b3a      	ldr	r3, [pc, #232]	; (4005ac <compute_fwhm+0x1bc>)
  4004c4:	4798      	blx	r3
  4004c6:	b280      	uxth	r0, r0
  4004c8:	4b40      	ldr	r3, [pc, #256]	; (4005cc <compute_fwhm+0x1dc>)
  4004ca:	4798      	blx	r3
  4004cc:	4b40      	ldr	r3, [pc, #256]	; (4005d0 <compute_fwhm+0x1e0>)
  4004ce:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
	 summed=0;
	 variance=0;
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  4004d2:	9a05      	ldr	r2, [sp, #20]
  4004d4:	9806      	ldr	r0, [sp, #24]
  4004d6:	4282      	cmp	r2, r0
  4004d8:	d25d      	bcs.n	400596 <compute_fwhm+0x1a6>
  4004da:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4004dc:	1b94      	subs	r4, r2, r6
  4004de:	4b34      	ldr	r3, [pc, #208]	; (4005b0 <compute_fwhm+0x1c0>)
  4004e0:	681d      	ldr	r5, [r3, #0]
  4004e2:	eb05 0542 	add.w	r5, r5, r2, lsl #1
  4004e6:	f100 3aff 	add.w	sl, r0, #4294967295
  4004ea:	ebaa 0a02 	sub.w	sl, sl, r2
  4004ee:	1c53      	adds	r3, r2, #1
  4004f0:	fa13 fa8a 	uxtah	sl, r3, sl
  4004f4:	ebaa 0a06 	sub.w	sl, sl, r6
	 {
		 summed+= (pow((i-mean[1]),2)*algorithm_buffer[i]);
  4004f8:	2200      	movs	r2, #0
  4004fa:	2300      	movs	r3, #0
  4004fc:	e9cd 2300 	strd	r2, r3, [sp]
  400500:	4f2c      	ldr	r7, [pc, #176]	; (4005b4 <compute_fwhm+0x1c4>)
  400502:	4e2d      	ldr	r6, [pc, #180]	; (4005b8 <compute_fwhm+0x1c8>)
  400504:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4005d4 <compute_fwhm+0x1e4>
  400508:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 4005d8 <compute_fwhm+0x1e8>
  40050c:	46d3      	mov	fp, sl
  40050e:	4620      	mov	r0, r4
  400510:	47b8      	blx	r7
  400512:	f835 ab02 	ldrh.w	sl, [r5], #2
  400516:	4602      	mov	r2, r0
  400518:	460b      	mov	r3, r1
  40051a:	47b0      	blx	r6
  40051c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400520:	4650      	mov	r0, sl
  400522:	47b8      	blx	r7
  400524:	4602      	mov	r2, r0
  400526:	460b      	mov	r3, r1
  400528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40052c:	47b0      	blx	r6
  40052e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400532:	e9dd 0100 	ldrd	r0, r1, [sp]
  400536:	4b21      	ldr	r3, [pc, #132]	; (4005bc <compute_fwhm+0x1cc>)
  400538:	4798      	blx	r3
  40053a:	4602      	mov	r2, r0
  40053c:	460b      	mov	r3, r1
  40053e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400542:	47c8      	blx	r9
  400544:	47c0      	blx	r8
  400546:	e9cd 0100 	strd	r0, r1, [sp]
  40054a:	3401      	adds	r4, #1
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  40054c:	455c      	cmp	r4, fp
  40054e:	d1de      	bne.n	40050e <compute_fwhm+0x11e>
	 }
	 variance=summed/sum(peak2_left,peak2_right);
  400550:	9906      	ldr	r1, [sp, #24]
  400552:	9805      	ldr	r0, [sp, #20]
  400554:	4b1a      	ldr	r3, [pc, #104]	; (4005c0 <compute_fwhm+0x1d0>)
  400556:	4798      	blx	r3
  400558:	b282      	uxth	r2, r0
  40055a:	2300      	movs	r3, #0
  40055c:	e9dd 0100 	ldrd	r0, r1, [sp]
  400560:	4c18      	ldr	r4, [pc, #96]	; (4005c4 <compute_fwhm+0x1d4>)
  400562:	47a0      	blx	r4
	 beam_parameters[10]=(uint16_t) (sqrt(variance)*2.355);
  400564:	4b13      	ldr	r3, [pc, #76]	; (4005b4 <compute_fwhm+0x1c4>)
  400566:	4798      	blx	r3
  400568:	4b17      	ldr	r3, [pc, #92]	; (4005c8 <compute_fwhm+0x1d8>)
  40056a:	4798      	blx	r3
  40056c:	a30c      	add	r3, pc, #48	; (adr r3, 4005a0 <compute_fwhm+0x1b0>)
  40056e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400572:	4c11      	ldr	r4, [pc, #68]	; (4005b8 <compute_fwhm+0x1c8>)
  400574:	47a0      	blx	r4
  400576:	4b0d      	ldr	r3, [pc, #52]	; (4005ac <compute_fwhm+0x1bc>)
  400578:	4798      	blx	r3
  40057a:	b280      	uxth	r0, r0
  40057c:	4b13      	ldr	r3, [pc, #76]	; (4005cc <compute_fwhm+0x1dc>)
  40057e:	4798      	blx	r3
  400580:	4b13      	ldr	r3, [pc, #76]	; (4005d0 <compute_fwhm+0x1e0>)
  400582:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
 }
  400586:	b00b      	add	sp, #44	; 0x2c
  400588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 long long summed=0;
  40058c:	2300      	movs	r3, #0
  40058e:	2400      	movs	r4, #0
  400590:	e9cd 3400 	strd	r3, r4, [sp]
  400594:	e782      	b.n	40049c <compute_fwhm+0xac>
	 summed=0;
  400596:	2300      	movs	r3, #0
  400598:	2400      	movs	r4, #0
  40059a:	e9cd 3400 	strd	r3, r4, [sp]
  40059e:	e7d7      	b.n	400550 <compute_fwhm+0x160>
  4005a0:	3d70a3d7 	.word	0x3d70a3d7
  4005a4:	4002d70a 	.word	0x4002d70a
  4005a8:	00400165 	.word	0x00400165
  4005ac:	00403715 	.word	0x00403715
  4005b0:	2000001c 	.word	0x2000001c
  4005b4:	004030e9 	.word	0x004030e9
  4005b8:	004031b5 	.word	0x004031b5
  4005bc:	00403159 	.word	0x00403159
  4005c0:	004001e5 	.word	0x004001e5
  4005c4:	004037f5 	.word	0x004037f5
  4005c8:	00401f39 	.word	0x00401f39
  4005cc:	004030c9 	.word	0x004030c9
  4005d0:	20000890 	.word	0x20000890
  4005d4:	00402e51 	.word	0x00402e51
  4005d8:	00403895 	.word	0x00403895
  4005dc:	00000000 	.word	0x00000000

004005e0 <compute_skewness>:


/* Compute skewness of the beam  X and Y */

void compute_skewness(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right)
{
  4005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005e4:	b093      	sub	sp, #76	; 0x4c
  4005e6:	4683      	mov	fp, r0
  4005e8:	460d      	mov	r5, r1
  4005ea:	4614      	mov	r4, r2
  4005ec:	920e      	str	r2, [sp, #56]	; 0x38
  4005ee:	461f      	mov	r7, r3
  4005f0:	930f      	str	r3, [sp, #60]	; 0x3c
	double first_peak_mean  =  sample_average(peak1_left, peak1_right);
  4005f2:	4e79      	ldr	r6, [pc, #484]	; (4007d8 <compute_skewness+0x1f8>)
  4005f4:	47b0      	blx	r6
  4005f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	double second_peak_mean =  sample_average(peak2_left, peak2_right);
  4005fa:	4639      	mov	r1, r7
  4005fc:	4620      	mov	r0, r4
  4005fe:	47b0      	blx	r6
  400600:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	
	double third_central = 0;
	double second_central = 0;
	int sum1 = sum(peak1_left,peak1_right);
  400604:	4629      	mov	r1, r5
  400606:	4658      	mov	r0, fp
  400608:	4e74      	ldr	r6, [pc, #464]	; (4007dc <compute_skewness+0x1fc>)
  40060a:	47b0      	blx	r6
  40060c:	9010      	str	r0, [sp, #64]	; 0x40
	int sum2 = sum(peak2_left,peak2_right);
  40060e:	4639      	mov	r1, r7
  400610:	4620      	mov	r0, r4
  400612:	47b0      	blx	r6
  400614:	9011      	str	r0, [sp, #68]	; 0x44
	
	 for (int i=peak1_left;i<peak1_right;i++ )
  400616:	45ab      	cmp	fp, r5
  400618:	f280 80cb 	bge.w	4007b2 <compute_skewness+0x1d2>
  40061c:	46d8      	mov	r8, fp
  40061e:	46a9      	mov	r9, r5
  400620:	4b6f      	ldr	r3, [pc, #444]	; (4007e0 <compute_skewness+0x200>)
  400622:	681b      	ldr	r3, [r3, #0]
  400624:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
	 {
		 
		 double sample = (double) algorithm_buffer[i];
  400628:	ed9f 7b69 	vldr	d7, [pc, #420]	; 4007d0 <compute_skewness+0x1f0>
  40062c:	ed8d 7b02 	vstr	d7, [sp, #8]
  400630:	ed8d 7b04 	vstr	d7, [sp, #16]
  400634:	4f6b      	ldr	r7, [pc, #428]	; (4007e4 <compute_skewness+0x204>)
		 double spread = (double)i-first_peak_mean;
  400636:	4e6c      	ldr	r6, [pc, #432]	; (4007e8 <compute_skewness+0x208>)
  400638:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 400808 <compute_skewness+0x228>
		 third_central += spread*spread*spread*sample;
  40063c:	4d6b      	ldr	r5, [pc, #428]	; (4007ec <compute_skewness+0x20c>)
  40063e:	4c6c      	ldr	r4, [pc, #432]	; (4007f0 <compute_skewness+0x210>)
		 double sample = (double) algorithm_buffer[i];
  400640:	f83b 0b02 	ldrh.w	r0, [fp], #2
  400644:	47b8      	blx	r7
  400646:	e9cd 0100 	strd	r0, r1, [sp]
		 double spread = (double)i-first_peak_mean;
  40064a:	4640      	mov	r0, r8
  40064c:	47b0      	blx	r6
  40064e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  400652:	47d0      	blx	sl
  400654:	4602      	mov	r2, r0
  400656:	460b      	mov	r3, r1
		 third_central += spread*spread*spread*sample;
  400658:	e9cd 2306 	strd	r2, r3, [sp, #24]
  40065c:	47a8      	blx	r5
  40065e:	4602      	mov	r2, r0
  400660:	460b      	mov	r3, r1
  400662:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40066a:	47a8      	blx	r5
  40066c:	e9dd 2300 	ldrd	r2, r3, [sp]
  400670:	47a8      	blx	r5
  400672:	4602      	mov	r2, r0
  400674:	460b      	mov	r3, r1
  400676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40067a:	47a0      	blx	r4
  40067c:	e9cd 0104 	strd	r0, r1, [sp, #16]
		 second_central += spread*spread*sample;
  400680:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  400684:	e9dd 0100 	ldrd	r0, r1, [sp]
  400688:	47a8      	blx	r5
  40068a:	4602      	mov	r2, r0
  40068c:	460b      	mov	r3, r1
  40068e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400692:	47a0      	blx	r4
  400694:	e9cd 0102 	strd	r0, r1, [sp, #8]
	 for (int i=peak1_left;i<peak1_right;i++ )
  400698:	f108 0801 	add.w	r8, r8, #1
  40069c:	45c8      	cmp	r8, r9
  40069e:	d1cf      	bne.n	400640 <compute_skewness+0x60>
		 
	}
	 
	 third_central = third_central/sum1;
  4006a0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4006a2:	4b51      	ldr	r3, [pc, #324]	; (4007e8 <compute_skewness+0x208>)
  4006a4:	4798      	blx	r3
  4006a6:	4604      	mov	r4, r0
  4006a8:	460d      	mov	r5, r1
  4006aa:	4e52      	ldr	r6, [pc, #328]	; (4007f4 <compute_skewness+0x214>)
  4006ac:	4602      	mov	r2, r0
  4006ae:	460b      	mov	r3, r1
  4006b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4006b4:	47b0      	blx	r6
  4006b6:	4680      	mov	r8, r0
  4006b8:	4689      	mov	r9, r1
	 second_central = second_central/sum1;
  4006ba:	4622      	mov	r2, r4
  4006bc:	462b      	mov	r3, r5
  4006be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4006c2:	47b0      	blx	r6
	 
	 double denominator = pow(second_central,1.5);
  4006c4:	2200      	movs	r2, #0
  4006c6:	4b4c      	ldr	r3, [pc, #304]	; (4007f8 <compute_skewness+0x218>)
  4006c8:	4c4c      	ldr	r4, [pc, #304]	; (4007fc <compute_skewness+0x21c>)
  4006ca:	47a0      	blx	r4
	 third_central = third_central/denominator;
  4006cc:	4602      	mov	r2, r0
  4006ce:	460b      	mov	r3, r1
  4006d0:	4640      	mov	r0, r8
  4006d2:	4649      	mov	r1, r9
  4006d4:	47b0      	blx	r6
	
	beam_parameters[11] = third_central;
  4006d6:	4b4a      	ldr	r3, [pc, #296]	; (400800 <compute_skewness+0x220>)
  4006d8:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
	
	third_central = 0;
	second_central = 0;
	
    for (int i=peak2_left;i<peak2_right;i++ )
  4006dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4006de:	4690      	mov	r8, r2
  4006e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4006e2:	4689      	mov	r9, r1
  4006e4:	428a      	cmp	r2, r1
  4006e6:	da6b      	bge.n	4007c0 <compute_skewness+0x1e0>
  4006e8:	4b3d      	ldr	r3, [pc, #244]	; (4007e0 <compute_skewness+0x200>)
  4006ea:	681b      	ldr	r3, [r3, #0]
  4006ec:	eb03 0b42 	add.w	fp, r3, r2, lsl #1
	 {
		 double sample = (double) algorithm_buffer[i];
  4006f0:	ed9f 7b37 	vldr	d7, [pc, #220]	; 4007d0 <compute_skewness+0x1f0>
  4006f4:	ed8d 7b02 	vstr	d7, [sp, #8]
  4006f8:	ed8d 7b04 	vstr	d7, [sp, #16]
  4006fc:	4f39      	ldr	r7, [pc, #228]	; (4007e4 <compute_skewness+0x204>)
		 double spread = (double)i-second_peak_mean;
  4006fe:	4e3a      	ldr	r6, [pc, #232]	; (4007e8 <compute_skewness+0x208>)
  400700:	f8df a104 	ldr.w	sl, [pc, #260]	; 400808 <compute_skewness+0x228>
		 third_central += spread*spread*spread*sample;
  400704:	4d39      	ldr	r5, [pc, #228]	; (4007ec <compute_skewness+0x20c>)
  400706:	4c3a      	ldr	r4, [pc, #232]	; (4007f0 <compute_skewness+0x210>)
		 double sample = (double) algorithm_buffer[i];
  400708:	f83b 0b02 	ldrh.w	r0, [fp], #2
  40070c:	47b8      	blx	r7
  40070e:	e9cd 0100 	strd	r0, r1, [sp]
		 double spread = (double)i-second_peak_mean;
  400712:	4640      	mov	r0, r8
  400714:	47b0      	blx	r6
  400716:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40071a:	47d0      	blx	sl
  40071c:	4602      	mov	r2, r0
  40071e:	460b      	mov	r3, r1
		 third_central += spread*spread*spread*sample;
  400720:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400724:	47a8      	blx	r5
  400726:	4602      	mov	r2, r0
  400728:	460b      	mov	r3, r1
  40072a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40072e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400732:	47a8      	blx	r5
  400734:	e9dd 2300 	ldrd	r2, r3, [sp]
  400738:	47a8      	blx	r5
  40073a:	4602      	mov	r2, r0
  40073c:	460b      	mov	r3, r1
  40073e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400742:	47a0      	blx	r4
  400744:	e9cd 0104 	strd	r0, r1, [sp, #16]
		 second_central += spread*spread*sample;
  400748:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40074c:	e9dd 0100 	ldrd	r0, r1, [sp]
  400750:	47a8      	blx	r5
  400752:	4602      	mov	r2, r0
  400754:	460b      	mov	r3, r1
  400756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40075a:	47a0      	blx	r4
  40075c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    for (int i=peak2_left;i<peak2_right;i++ )
  400760:	f108 0801 	add.w	r8, r8, #1
  400764:	45c8      	cmp	r8, r9
  400766:	d1cf      	bne.n	400708 <compute_skewness+0x128>
	 }
	 
	  third_central = third_central/sum2;
  400768:	9811      	ldr	r0, [sp, #68]	; 0x44
  40076a:	4b1f      	ldr	r3, [pc, #124]	; (4007e8 <compute_skewness+0x208>)
  40076c:	4798      	blx	r3
  40076e:	4604      	mov	r4, r0
  400770:	460d      	mov	r5, r1
  400772:	4e20      	ldr	r6, [pc, #128]	; (4007f4 <compute_skewness+0x214>)
  400774:	4602      	mov	r2, r0
  400776:	460b      	mov	r3, r1
  400778:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40077c:	47b0      	blx	r6
  40077e:	4680      	mov	r8, r0
  400780:	4689      	mov	r9, r1
	  second_central = second_central/sum2;
  400782:	4622      	mov	r2, r4
  400784:	462b      	mov	r3, r5
  400786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40078a:	47b0      	blx	r6
	  
	  denominator = pow(second_central,1.5);
  40078c:	2200      	movs	r2, #0
  40078e:	4b1a      	ldr	r3, [pc, #104]	; (4007f8 <compute_skewness+0x218>)
  400790:	4c1a      	ldr	r4, [pc, #104]	; (4007fc <compute_skewness+0x21c>)
  400792:	47a0      	blx	r4
	  third_central = third_central/denominator;
  400794:	4602      	mov	r2, r0
  400796:	460b      	mov	r3, r1
  400798:	4640      	mov	r0, r8
  40079a:	4649      	mov	r1, r9
  40079c:	47b0      	blx	r6
	
	beam_parameters[12] = third_central;
  40079e:	4b18      	ldr	r3, [pc, #96]	; (400800 <compute_skewness+0x220>)
  4007a0:	e9c3 0118 	strd	r0, r1, [r3, #96]	; 0x60
	toSendBuffer[32]= 3;
  4007a4:	2203      	movs	r2, #3
  4007a6:	4b17      	ldr	r3, [pc, #92]	; (400804 <compute_skewness+0x224>)
  4007a8:	f883 2020 	strb.w	r2, [r3, #32]
}
  4007ac:	b013      	add	sp, #76	; 0x4c
  4007ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double second_central = 0;
  4007b2:	ed9f 7b07 	vldr	d7, [pc, #28]	; 4007d0 <compute_skewness+0x1f0>
  4007b6:	ed8d 7b02 	vstr	d7, [sp, #8]
	double third_central = 0;
  4007ba:	ed8d 7b04 	vstr	d7, [sp, #16]
  4007be:	e76f      	b.n	4006a0 <compute_skewness+0xc0>
	second_central = 0;
  4007c0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 4007d0 <compute_skewness+0x1f0>
  4007c4:	ed8d 7b02 	vstr	d7, [sp, #8]
	third_central = 0;
  4007c8:	ed8d 7b04 	vstr	d7, [sp, #16]
  4007cc:	e7cc      	b.n	400768 <compute_skewness+0x188>
  4007ce:	bf00      	nop
	...
  4007d8:	00400165 	.word	0x00400165
  4007dc:	004001e5 	.word	0x004001e5
  4007e0:	2000001c 	.word	0x2000001c
  4007e4:	004030c9 	.word	0x004030c9
  4007e8:	004030e9 	.word	0x004030e9
  4007ec:	004031b5 	.word	0x004031b5
  4007f0:	00402e51 	.word	0x00402e51
  4007f4:	00403409 	.word	0x00403409
  4007f8:	3ff80000 	.word	0x3ff80000
  4007fc:	00401c3d 	.word	0x00401c3d
  400800:	20000890 	.word	0x20000890
  400804:	200008f8 	.word	0x200008f8
  400808:	00402e4d 	.word	0x00402e4d
  40080c:	00000000 	.word	0x00000000

00400810 <compute_beam_parameters>:


/* Compute the parameters (to be called at the end of each cycle) and put a delimiter in front that is certain to be different than parameter values*/

void compute_beam_parameters()
{
  400810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		
	detect_peaks(20);	// threshold of 20 (16 mv), might be made user-configurable later
  400814:	2014      	movs	r0, #20
  400816:	4b42      	ldr	r3, [pc, #264]	; (400920 <compute_beam_parameters+0x110>)
  400818:	4798      	blx	r3
 	compute_beam_intensity(beam_parameters[2], beam_parameters[3], beam_parameters[5], beam_parameters[6]);
  40081a:	4c42      	ldr	r4, [pc, #264]	; (400924 <compute_beam_parameters+0x114>)
  40081c:	4d42      	ldr	r5, [pc, #264]	; (400928 <compute_beam_parameters+0x118>)
  40081e:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
  400822:	47a8      	blx	r5
  400824:	fa1f f880 	uxth.w	r8, r0
  400828:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
  40082c:	47a8      	blx	r5
  40082e:	b287      	uxth	r7, r0
  400830:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
  400834:	47a8      	blx	r5
  400836:	b286      	uxth	r6, r0
  400838:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  40083c:	47a8      	blx	r5
  40083e:	4643      	mov	r3, r8
  400840:	463a      	mov	r2, r7
  400842:	4631      	mov	r1, r6
  400844:	b280      	uxth	r0, r0
  400846:	4e39      	ldr	r6, [pc, #228]	; (40092c <compute_beam_parameters+0x11c>)
  400848:	47b0      	blx	r6
 	compute_fwhm(beam_parameters[2], beam_parameters[3], beam_parameters[5], beam_parameters[6]);
  40084a:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
  40084e:	47a8      	blx	r5
  400850:	fa1f f880 	uxth.w	r8, r0
  400854:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
  400858:	47a8      	blx	r5
  40085a:	b287      	uxth	r7, r0
  40085c:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
  400860:	47a8      	blx	r5
  400862:	b286      	uxth	r6, r0
  400864:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  400868:	47a8      	blx	r5
  40086a:	4643      	mov	r3, r8
  40086c:	463a      	mov	r2, r7
  40086e:	4631      	mov	r1, r6
  400870:	b280      	uxth	r0, r0
  400872:	4e2f      	ldr	r6, [pc, #188]	; (400930 <compute_beam_parameters+0x120>)
  400874:	47b0      	blx	r6
 	compute_skewness(beam_parameters[2], beam_parameters[3], beam_parameters[5], beam_parameters[6]);
  400876:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
  40087a:	47a8      	blx	r5
  40087c:	fa1f f880 	uxth.w	r8, r0
  400880:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
  400884:	47a8      	blx	r5
  400886:	b287      	uxth	r7, r0
  400888:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
  40088c:	47a8      	blx	r5
  40088e:	b286      	uxth	r6, r0
  400890:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  400894:	47a8      	blx	r5
  400896:	4643      	mov	r3, r8
  400898:	463a      	mov	r2, r7
  40089a:	4631      	mov	r1, r6
  40089c:	b280      	uxth	r0, r0
  40089e:	4d25      	ldr	r5, [pc, #148]	; (400934 <compute_beam_parameters+0x124>)
  4008a0:	47a8      	blx	r5
	 
	beam_parameters[0] = 6666;
  4008a2:	a31d      	add	r3, pc, #116	; (adr r3, 400918 <compute_beam_parameters+0x108>)
  4008a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4008a8:	e9c4 2300 	strd	r2, r3, [r4]
  4008ac:	3408      	adds	r4, #8
  4008ae:	2500      	movs	r5, #0
	
	for (int i=1; i<7;i++)
	{
		int16ConversionPtr[i-1]=(uint16_t)beam_parameters[i];
  4008b0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 40093c <compute_beam_parameters+0x12c>
  4008b4:	4f1c      	ldr	r7, [pc, #112]	; (400928 <compute_beam_parameters+0x118>)
  4008b6:	f8d8 6000 	ldr.w	r6, [r8]
  4008ba:	e8f4 0102 	ldrd	r0, r1, [r4], #8
  4008be:	47b8      	blx	r7
  4008c0:	5370      	strh	r0, [r6, r5]
  4008c2:	3502      	adds	r5, #2
	for (int i=1; i<7;i++)
  4008c4:	2d0c      	cmp	r5, #12
  4008c6:	d1f6      	bne.n	4008b6 <compute_beam_parameters+0xa6>
	}
	int32ConversionPtr[0]= (uint32_t) beam_parameters[7];
  4008c8:	4e1b      	ldr	r6, [pc, #108]	; (400938 <compute_beam_parameters+0x128>)
  4008ca:	6837      	ldr	r7, [r6, #0]
  4008cc:	4c15      	ldr	r4, [pc, #84]	; (400924 <compute_beam_parameters+0x114>)
  4008ce:	4d16      	ldr	r5, [pc, #88]	; (400928 <compute_beam_parameters+0x118>)
  4008d0:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
  4008d4:	47a8      	blx	r5
  4008d6:	6038      	str	r0, [r7, #0]
	int32ConversionPtr[1]= (uint32_t) beam_parameters[8];
  4008d8:	6836      	ldr	r6, [r6, #0]
  4008da:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
  4008de:	47a8      	blx	r5
  4008e0:	6070      	str	r0, [r6, #4]
	int16ConversionPtr[10]=(uint16_t) beam_parameters[9];
  4008e2:	4b16      	ldr	r3, [pc, #88]	; (40093c <compute_beam_parameters+0x12c>)
  4008e4:	681e      	ldr	r6, [r3, #0]
  4008e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4008ea:	47a8      	blx	r5
  4008ec:	82b0      	strh	r0, [r6, #20]
	int16ConversionPtr[11]=(uint16_t) beam_parameters[10];
  4008ee:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
  4008f2:	47a8      	blx	r5
  4008f4:	82f0      	strh	r0, [r6, #22]
	floatConversionPtr[0]=(float) beam_parameters[11];
  4008f6:	4e12      	ldr	r6, [pc, #72]	; (400940 <compute_beam_parameters+0x130>)
  4008f8:	6837      	ldr	r7, [r6, #0]
  4008fa:	4d12      	ldr	r5, [pc, #72]	; (400944 <compute_beam_parameters+0x134>)
  4008fc:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
  400900:	47a8      	blx	r5
  400902:	6038      	str	r0, [r7, #0]
	floatConversionPtr[1]=(float) beam_parameters[12];
  400904:	6836      	ldr	r6, [r6, #0]
  400906:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
  40090a:	47a8      	blx	r5
  40090c:	6070      	str	r0, [r6, #4]
  40090e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400912:	bf00      	nop
  400914:	f3af 8000 	nop.w
  400918:	00000000 	.word	0x00000000
  40091c:	40ba0a00 	.word	0x40ba0a00
  400920:	00400219 	.word	0x00400219
  400924:	20000890 	.word	0x20000890
  400928:	00403715 	.word	0x00403715
  40092c:	0040034d 	.word	0x0040034d
  400930:	004003f1 	.word	0x004003f1
  400934:	004005e1 	.word	0x004005e1
  400938:	2000000c 	.word	0x2000000c
  40093c:	20000008 	.word	0x20000008
  400940:	20000000 	.word	0x20000000
  400944:	00403755 	.word	0x00403755

00400948 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400948:	460b      	mov	r3, r1
  40094a:	b119      	cbz	r1, 400954 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;				
  40094c:	6809      	ldr	r1, [r1, #0]
  40094e:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  400950:	685b      	ldr	r3, [r3, #4]
  400952:	60c3      	str	r3, [r0, #12]
	}
	
	if (p_next_packet) {
  400954:	b11a      	cbz	r2, 40095e <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  400956:	6813      	ldr	r3, [r2, #0]
  400958:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  40095a:	6853      	ldr	r3, [r2, #4]
  40095c:	61c3      	str	r3, [r0, #28]
  40095e:	4770      	bx	lr

00400960 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400960:	460b      	mov	r3, r1
  400962:	b119      	cbz	r1, 40096c <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;		// set receive pointer register to the address of the self-defined receive buffer
  400964:	6809      	ldr	r1, [r1, #0]
  400966:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;		// set receiver counter register to the size of self-defined receive buffer
  400968:	685b      	ldr	r3, [r3, #4]
  40096a:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  40096c:	b11a      	cbz	r2, 400976 <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  40096e:	6813      	ldr	r3, [r2, #0]
  400970:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  400972:	6853      	ldr	r3, [r2, #4]
  400974:	6143      	str	r3, [r0, #20]
  400976:	4770      	bx	lr

00400978 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400978:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  40097c:	05c9      	lsls	r1, r1, #23
  40097e:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
  400980:	6201      	str	r1, [r0, #32]
  400982:	4770      	bx	lr

00400984 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400984:	b5f0      	push	{r4, r5, r6, r7, lr}
  400986:	b083      	sub	sp, #12
  400988:	4605      	mov	r5, r0
  40098a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40098c:	2300      	movs	r3, #0
  40098e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400990:	4b18      	ldr	r3, [pc, #96]	; (4009f4 <usart_serial_getchar+0x70>)
  400992:	4298      	cmp	r0, r3
  400994:	d00a      	beq.n	4009ac <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400996:	4b18      	ldr	r3, [pc, #96]	; (4009f8 <usart_serial_getchar+0x74>)
  400998:	4298      	cmp	r0, r3
  40099a:	d00f      	beq.n	4009bc <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40099c:	4b17      	ldr	r3, [pc, #92]	; (4009fc <usart_serial_getchar+0x78>)
  40099e:	4298      	cmp	r0, r3
  4009a0:	d014      	beq.n	4009cc <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4009a2:	4b17      	ldr	r3, [pc, #92]	; (400a00 <usart_serial_getchar+0x7c>)
  4009a4:	429d      	cmp	r5, r3
  4009a6:	d01b      	beq.n	4009e0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4009a8:	b003      	add	sp, #12
  4009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4009ac:	461f      	mov	r7, r3
  4009ae:	4e15      	ldr	r6, [pc, #84]	; (400a04 <usart_serial_getchar+0x80>)
  4009b0:	4621      	mov	r1, r4
  4009b2:	4638      	mov	r0, r7
  4009b4:	47b0      	blx	r6
  4009b6:	2800      	cmp	r0, #0
  4009b8:	d1fa      	bne.n	4009b0 <usart_serial_getchar+0x2c>
  4009ba:	e7f2      	b.n	4009a2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4009bc:	461e      	mov	r6, r3
  4009be:	4d11      	ldr	r5, [pc, #68]	; (400a04 <usart_serial_getchar+0x80>)
  4009c0:	4621      	mov	r1, r4
  4009c2:	4630      	mov	r0, r6
  4009c4:	47a8      	blx	r5
  4009c6:	2800      	cmp	r0, #0
  4009c8:	d1fa      	bne.n	4009c0 <usart_serial_getchar+0x3c>
  4009ca:	e7ed      	b.n	4009a8 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4009cc:	461e      	mov	r6, r3
  4009ce:	4d0e      	ldr	r5, [pc, #56]	; (400a08 <usart_serial_getchar+0x84>)
  4009d0:	a901      	add	r1, sp, #4
  4009d2:	4630      	mov	r0, r6
  4009d4:	47a8      	blx	r5
  4009d6:	2800      	cmp	r0, #0
  4009d8:	d1fa      	bne.n	4009d0 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  4009da:	9b01      	ldr	r3, [sp, #4]
  4009dc:	7023      	strb	r3, [r4, #0]
  4009de:	e7e3      	b.n	4009a8 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4009e0:	461e      	mov	r6, r3
  4009e2:	4d09      	ldr	r5, [pc, #36]	; (400a08 <usart_serial_getchar+0x84>)
  4009e4:	a901      	add	r1, sp, #4
  4009e6:	4630      	mov	r0, r6
  4009e8:	47a8      	blx	r5
  4009ea:	2800      	cmp	r0, #0
  4009ec:	d1fa      	bne.n	4009e4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  4009ee:	9b01      	ldr	r3, [sp, #4]
  4009f0:	7023      	strb	r3, [r4, #0]
}
  4009f2:	e7d9      	b.n	4009a8 <usart_serial_getchar+0x24>
  4009f4:	400e0600 	.word	0x400e0600
  4009f8:	40060600 	.word	0x40060600
  4009fc:	400a0000 	.word	0x400a0000
  400a00:	400a4000 	.word	0x400a4000
  400a04:	004014af 	.word	0x004014af
  400a08:	004014f1 	.word	0x004014f1

00400a0c <usart_serial_putchar>:
{
  400a0c:	b570      	push	{r4, r5, r6, lr}
  400a0e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400a10:	4b18      	ldr	r3, [pc, #96]	; (400a74 <usart_serial_putchar+0x68>)
  400a12:	4298      	cmp	r0, r3
  400a14:	d00a      	beq.n	400a2c <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400a16:	4b18      	ldr	r3, [pc, #96]	; (400a78 <usart_serial_putchar+0x6c>)
  400a18:	4298      	cmp	r0, r3
  400a1a:	d010      	beq.n	400a3e <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400a1c:	4b17      	ldr	r3, [pc, #92]	; (400a7c <usart_serial_putchar+0x70>)
  400a1e:	4298      	cmp	r0, r3
  400a20:	d016      	beq.n	400a50 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400a22:	4b17      	ldr	r3, [pc, #92]	; (400a80 <usart_serial_putchar+0x74>)
  400a24:	4298      	cmp	r0, r3
  400a26:	d01c      	beq.n	400a62 <usart_serial_putchar+0x56>
	return 0;
  400a28:	2000      	movs	r0, #0
}
  400a2a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400a2c:	461e      	mov	r6, r3
  400a2e:	4d15      	ldr	r5, [pc, #84]	; (400a84 <usart_serial_putchar+0x78>)
  400a30:	4621      	mov	r1, r4
  400a32:	4630      	mov	r0, r6
  400a34:	47a8      	blx	r5
  400a36:	2800      	cmp	r0, #0
  400a38:	d1fa      	bne.n	400a30 <usart_serial_putchar+0x24>
		return 1;
  400a3a:	2001      	movs	r0, #1
  400a3c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400a3e:	461e      	mov	r6, r3
  400a40:	4d10      	ldr	r5, [pc, #64]	; (400a84 <usart_serial_putchar+0x78>)
  400a42:	4621      	mov	r1, r4
  400a44:	4630      	mov	r0, r6
  400a46:	47a8      	blx	r5
  400a48:	2800      	cmp	r0, #0
  400a4a:	d1fa      	bne.n	400a42 <usart_serial_putchar+0x36>
		return 1;
  400a4c:	2001      	movs	r0, #1
  400a4e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400a50:	461e      	mov	r6, r3
  400a52:	4d0d      	ldr	r5, [pc, #52]	; (400a88 <usart_serial_putchar+0x7c>)
  400a54:	4621      	mov	r1, r4
  400a56:	4630      	mov	r0, r6
  400a58:	47a8      	blx	r5
  400a5a:	2800      	cmp	r0, #0
  400a5c:	d1fa      	bne.n	400a54 <usart_serial_putchar+0x48>
		return 1;
  400a5e:	2001      	movs	r0, #1
  400a60:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400a62:	461e      	mov	r6, r3
  400a64:	4d08      	ldr	r5, [pc, #32]	; (400a88 <usart_serial_putchar+0x7c>)
  400a66:	4621      	mov	r1, r4
  400a68:	4630      	mov	r0, r6
  400a6a:	47a8      	blx	r5
  400a6c:	2800      	cmp	r0, #0
  400a6e:	d1fa      	bne.n	400a66 <usart_serial_putchar+0x5a>
		return 1;
  400a70:	2001      	movs	r0, #1
  400a72:	bd70      	pop	{r4, r5, r6, pc}
  400a74:	400e0600 	.word	0x400e0600
  400a78:	40060600 	.word	0x40060600
  400a7c:	400a0000 	.word	0x400a0000
  400a80:	400a4000 	.word	0x400a4000
  400a84:	0040149f 	.word	0x0040149f
  400a88:	004014dd 	.word	0x004014dd

00400a8c <configure_UART>:


/* Configure UART module with desired settings*/

void configure_UART(void)
{
  400a8c:	b530      	push	{r4, r5, lr}
  400a8e:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400a90:	2007      	movs	r0, #7
  400a92:	4d12      	ldr	r5, [pc, #72]	; (400adc <configure_UART+0x50>)
  400a94:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400a96:	4c12      	ldr	r4, [pc, #72]	; (400ae0 <configure_UART+0x54>)
  400a98:	4b12      	ldr	r3, [pc, #72]	; (400ae4 <configure_UART+0x58>)
  400a9a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400a9c:	4a12      	ldr	r2, [pc, #72]	; (400ae8 <configure_UART+0x5c>)
  400a9e:	4b13      	ldr	r3, [pc, #76]	; (400aec <configure_UART+0x60>)
  400aa0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400aa2:	4a13      	ldr	r2, [pc, #76]	; (400af0 <configure_UART+0x64>)
  400aa4:	4b13      	ldr	r3, [pc, #76]	; (400af4 <configure_UART+0x68>)
  400aa6:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400aa8:	4b13      	ldr	r3, [pc, #76]	; (400af8 <configure_UART+0x6c>)
  400aaa:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400aac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400ab0:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400ab6:	9303      	str	r3, [sp, #12]
  400ab8:	2007      	movs	r0, #7
  400aba:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  400abc:	a901      	add	r1, sp, #4
  400abe:	4620      	mov	r0, r4
  400ac0:	4b0e      	ldr	r3, [pc, #56]	; (400afc <configure_UART+0x70>)
  400ac2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400ac4:	4d0e      	ldr	r5, [pc, #56]	; (400b00 <configure_UART+0x74>)
  400ac6:	682b      	ldr	r3, [r5, #0]
  400ac8:	2100      	movs	r1, #0
  400aca:	6898      	ldr	r0, [r3, #8]
  400acc:	4c0d      	ldr	r4, [pc, #52]	; (400b04 <configure_UART+0x78>)
  400ace:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400ad0:	682b      	ldr	r3, [r5, #0]
  400ad2:	2100      	movs	r1, #0
  400ad4:	6858      	ldr	r0, [r3, #4]
  400ad6:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY											
	};
		
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);							
	stdio_serial_init(CONF_UART, &uart_serial_options);							
}
  400ad8:	b005      	add	sp, #20
  400ada:	bd30      	pop	{r4, r5, pc}
  400adc:	00401359 	.word	0x00401359
  400ae0:	400e0600 	.word	0x400e0600
  400ae4:	2000cd8c 	.word	0x2000cd8c
  400ae8:	00400a0d 	.word	0x00400a0d
  400aec:	2000cd88 	.word	0x2000cd88
  400af0:	00400985 	.word	0x00400985
  400af4:	2000cd84 	.word	0x2000cd84
  400af8:	05b8d800 	.word	0x05b8d800
  400afc:	0040145f 	.word	0x0040145f
  400b00:	20000028 	.word	0x20000028
  400b04:	00403ce9 	.word	0x00403ce9

00400b08 <send_cycle_plot>:


/* Send the plotting data (8334 12-bit sample values) of one BPM80-cycle */

void send_cycle_plot()
{	
  400b08:	b508      	push	{r3, lr}
	pdc_tx_init(g_p_uart_pdc, &cycle_plot_packet, NULL);
  400b0a:	2200      	movs	r2, #0
  400b0c:	4904      	ldr	r1, [pc, #16]	; (400b20 <send_cycle_plot+0x18>)
  400b0e:	4b05      	ldr	r3, [pc, #20]	; (400b24 <send_cycle_plot+0x1c>)
  400b10:	6818      	ldr	r0, [r3, #0]
  400b12:	4b05      	ldr	r3, [pc, #20]	; (400b28 <send_cycle_plot+0x20>)
  400b14:	4798      	blx	r3
	config[3] = 0;																		// reset the plotting data flag in configuration array
  400b16:	2200      	movs	r2, #0
  400b18:	4b04      	ldr	r3, [pc, #16]	; (400b2c <send_cycle_plot+0x24>)
  400b1a:	70da      	strb	r2, [r3, #3]
  400b1c:	bd08      	pop	{r3, pc}
  400b1e:	bf00      	nop
  400b20:	2000cd68 	.word	0x2000cd68
  400b24:	2000cd70 	.word	0x2000cd70
  400b28:	00400949 	.word	0x00400949
  400b2c:	2000091c 	.word	0x2000091c

00400b30 <send_beam_parameters>:


/* Send beam parameter values (12 double-precision values) */

void send_beam_parameters()
{
  400b30:	b508      	push	{r3, lr}
	pdc_tx_init(g_p_uart_pdc, &beam_parameters_packet, NULL);
  400b32:	2200      	movs	r2, #0
  400b34:	4904      	ldr	r1, [pc, #16]	; (400b48 <send_beam_parameters+0x18>)
  400b36:	4b05      	ldr	r3, [pc, #20]	; (400b4c <send_beam_parameters+0x1c>)
  400b38:	6818      	ldr	r0, [r3, #0]
  400b3a:	4b05      	ldr	r3, [pc, #20]	; (400b50 <send_beam_parameters+0x20>)
  400b3c:	4798      	blx	r3
	config[2] = 0;																		// reset parameter data flag in configuration array
  400b3e:	2200      	movs	r2, #0
  400b40:	4b04      	ldr	r3, [pc, #16]	; (400b54 <send_beam_parameters+0x24>)
  400b42:	709a      	strb	r2, [r3, #2]
  400b44:	bd08      	pop	{r3, pc}
  400b46:	bf00      	nop
  400b48:	2000cd60 	.word	0x2000cd60
  400b4c:	2000cd70 	.word	0x2000cd70
  400b50:	00400949 	.word	0x00400949
  400b54:	2000091c 	.word	0x2000091c

00400b58 <UART0_Handler>:


/* Interrupt handler for UART interrupt. */
 
void console_uart_irq_handler(void)
{
  400b58:	b508      	push	{r3, lr}
	//Get UART status and check if PDC receive buffer is full 
	if ((uart_get_status(CONSOLE_UART) & UART_SR_RXBUFF) == UART_SR_RXBUFF) {
  400b5a:	4812      	ldr	r0, [pc, #72]	; (400ba4 <UART0_Handler+0x4c>)
  400b5c:	4b12      	ldr	r3, [pc, #72]	; (400ba8 <UART0_Handler+0x50>)
  400b5e:	4798      	blx	r3
  400b60:	f410 5f80 	tst.w	r0, #4096	; 0x1000
  400b64:	d100      	bne.n	400b68 <UART0_Handler+0x10>
  400b66:	bd08      	pop	{r3, pc}
		
		// Configure PDC for data transfer (RX and TX) 
		
		pdc_rx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);				// pass the PDC register base and the address of the transfer buffer, will start the transfer and wait until expected amount of data is received (which will trigger interrupt)
  400b68:	2200      	movs	r2, #0
  400b6a:	4910      	ldr	r1, [pc, #64]	; (400bac <UART0_Handler+0x54>)
  400b6c:	4b10      	ldr	r3, [pc, #64]	; (400bb0 <UART0_Handler+0x58>)
  400b6e:	6818      	ldr	r0, [r3, #0]
  400b70:	4b10      	ldr	r3, [pc, #64]	; (400bb4 <UART0_Handler+0x5c>)
  400b72:	4798      	blx	r3
		
		uint8_t command_index = 0;
		if(host_command[0] == 255)											// check front delimiter of the host packet
  400b74:	4b10      	ldr	r3, [pc, #64]	; (400bb8 <UART0_Handler+0x60>)
  400b76:	781b      	ldrb	r3, [r3, #0]
  400b78:	2bff      	cmp	r3, #255	; 0xff
  400b7a:	d006      	beq.n	400b8a <UART0_Handler+0x32>
			command_index= host_command[1];								// second element of host command contains index in configuration array (indicates which setting to change)
			config[command_index] = host_command[2];								// third element is the new value of the specified setting
		}
		
		if (command_index == 1) dacc_write_conversion_data(DACC, config[1]*16);		// change trigger level immediately
		pdc_tx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);				// This transfer echoes the received packet that caused this interrupt, so computer application can check if command is correctly received (only for debugging)
  400b7c:	2200      	movs	r2, #0
  400b7e:	490b      	ldr	r1, [pc, #44]	; (400bac <UART0_Handler+0x54>)
  400b80:	4b0b      	ldr	r3, [pc, #44]	; (400bb0 <UART0_Handler+0x58>)
  400b82:	6818      	ldr	r0, [r3, #0]
  400b84:	4b0d      	ldr	r3, [pc, #52]	; (400bbc <UART0_Handler+0x64>)
  400b86:	4798      	blx	r3
	}
	
	
}
  400b88:	e7ed      	b.n	400b66 <UART0_Handler+0xe>
			command_index= host_command[1];								// second element of host command contains index in configuration array (indicates which setting to change)
  400b8a:	4a0b      	ldr	r2, [pc, #44]	; (400bb8 <UART0_Handler+0x60>)
  400b8c:	7853      	ldrb	r3, [r2, #1]
			config[command_index] = host_command[2];								// third element is the new value of the specified setting
  400b8e:	7891      	ldrb	r1, [r2, #2]
  400b90:	4a0b      	ldr	r2, [pc, #44]	; (400bc0 <UART0_Handler+0x68>)
  400b92:	54d1      	strb	r1, [r2, r3]
		if (command_index == 1) dacc_write_conversion_data(DACC, config[1]*16);		// change trigger level immediately
  400b94:	2b01      	cmp	r3, #1
  400b96:	d1f1      	bne.n	400b7c <UART0_Handler+0x24>
  400b98:	7851      	ldrb	r1, [r2, #1]
  400b9a:	0109      	lsls	r1, r1, #4
  400b9c:	4809      	ldr	r0, [pc, #36]	; (400bc4 <UART0_Handler+0x6c>)
  400b9e:	4b0a      	ldr	r3, [pc, #40]	; (400bc8 <UART0_Handler+0x70>)
  400ba0:	4798      	blx	r3
  400ba2:	e7eb      	b.n	400b7c <UART0_Handler+0x24>
  400ba4:	400e0600 	.word	0x400e0600
  400ba8:	0040149b 	.word	0x0040149b
  400bac:	2000cd74 	.word	0x2000cd74
  400bb0:	2000cd70 	.word	0x2000cd70
  400bb4:	00400961 	.word	0x00400961
  400bb8:	20000924 	.word	0x20000924
  400bbc:	00400949 	.word	0x00400949
  400bc0:	2000091c 	.word	0x2000091c
  400bc4:	400b8000 	.word	0x400b8000
  400bc8:	00401211 	.word	0x00401211

00400bcc <pdc_uart_initialization>:


void pdc_uart_initialization(void)
{
  400bcc:	b570      	push	{r4, r5, r6, lr}
	/* Initialize the UART console */
	configure_UART();
  400bce:	4b15      	ldr	r3, [pc, #84]	; (400c24 <pdc_uart_initialization+0x58>)
  400bd0:	4798      	blx	r3

	/* Get pointer to UART PDC register base */
	g_p_uart_pdc = uart_get_pdc_base(CONSOLE_UART);
  400bd2:	4d15      	ldr	r5, [pc, #84]	; (400c28 <pdc_uart_initialization+0x5c>)
  400bd4:	4628      	mov	r0, r5
  400bd6:	4b15      	ldr	r3, [pc, #84]	; (400c2c <pdc_uart_initialization+0x60>)
  400bd8:	4798      	blx	r3
  400bda:	4e15      	ldr	r6, [pc, #84]	; (400c30 <pdc_uart_initialization+0x64>)
  400bdc:	6030      	str	r0, [r6, #0]

	/* Initialize PDC data packet for transfer (receive/transmit) by specifying base pointer and size of the packet */
	g_pdc_uart_packet.ul_addr = (uint32_t) host_command;					// receive buffer which we also echo back to the computer
  400bde:	4c15      	ldr	r4, [pc, #84]	; (400c34 <pdc_uart_initialization+0x68>)
  400be0:	4b15      	ldr	r3, [pc, #84]	; (400c38 <pdc_uart_initialization+0x6c>)
  400be2:	6023      	str	r3, [r4, #0]
	g_pdc_uart_packet.ul_size = BUFFER_SIZE_HOST_COMMAND;								
  400be4:	2303      	movs	r3, #3
  400be6:	6063      	str	r3, [r4, #4]
	
	beam_parameters_packet.ul_addr = (uint32_t) beam_parameters;			// transmit packet/buffer for beam parameters
  400be8:	4b14      	ldr	r3, [pc, #80]	; (400c3c <pdc_uart_initialization+0x70>)
  400bea:	4a15      	ldr	r2, [pc, #84]	; (400c40 <pdc_uart_initialization+0x74>)
  400bec:	601a      	str	r2, [r3, #0]
	beam_parameters_packet.ul_size = BUFFER_SIZE_PARAMETERS;
  400bee:	2268      	movs	r2, #104	; 0x68
  400bf0:	605a      	str	r2, [r3, #4]
	
	cycle_plot_packet.ul_addr = (uint32_t) transmit_buffer;					// start address of transfer packet data is the buffer we defined ourselves
  400bf2:	4b14      	ldr	r3, [pc, #80]	; (400c44 <pdc_uart_initialization+0x78>)
  400bf4:	4a14      	ldr	r2, [pc, #80]	; (400c48 <pdc_uart_initialization+0x7c>)
  400bf6:	6812      	ldr	r2, [r2, #0]
  400bf8:	601a      	str	r2, [r3, #0]
	cycle_plot_packet.ul_size = BUFFER_SIZE_PLOTDATA;
  400bfa:	f244 121c 	movw	r2, #16668	; 0x411c
  400bfe:	605a      	str	r2, [r3, #4]
	
	/* Enable PDC transfers, here we set both transmitter and receiver high (full duplex). Receiver and transmitter hardware operate independently. 
	   We start the receive transfer, transmits are always started in response to a received command*/
	pdc_enable_transfer(g_p_uart_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400c00:	f240 1101 	movw	r1, #257	; 0x101
  400c04:	4b11      	ldr	r3, [pc, #68]	; (400c4c <pdc_uart_initialization+0x80>)
  400c06:	4798      	blx	r3
	pdc_rx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);
  400c08:	2200      	movs	r2, #0
  400c0a:	4621      	mov	r1, r4
  400c0c:	6830      	ldr	r0, [r6, #0]
  400c0e:	4b10      	ldr	r3, [pc, #64]	; (400c50 <pdc_uart_initialization+0x84>)
  400c10:	4798      	blx	r3
	
	/* Enable UART IRQ for receive buffer full (host command received)*/
	uart_enable_interrupt(CONSOLE_UART, UART_IER_RXBUFF);
  400c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400c16:	4628      	mov	r0, r5
  400c18:	4b0e      	ldr	r3, [pc, #56]	; (400c54 <pdc_uart_initialization+0x88>)
  400c1a:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c1c:	2280      	movs	r2, #128	; 0x80
  400c1e:	4b0e      	ldr	r3, [pc, #56]	; (400c58 <pdc_uart_initialization+0x8c>)
  400c20:	601a      	str	r2, [r3, #0]
  400c22:	bd70      	pop	{r4, r5, r6, pc}
  400c24:	00400a8d 	.word	0x00400a8d
  400c28:	400e0600 	.word	0x400e0600
  400c2c:	004014c1 	.word	0x004014c1
  400c30:	2000cd70 	.word	0x2000cd70
  400c34:	2000cd74 	.word	0x2000cd74
  400c38:	20000924 	.word	0x20000924
  400c3c:	2000cd60 	.word	0x2000cd60
  400c40:	20000890 	.word	0x20000890
  400c44:	2000cd68 	.word	0x2000cd68
  400c48:	20000020 	.word	0x20000020
  400c4c:	00400979 	.word	0x00400979
  400c50:	00400961 	.word	0x00400961
  400c54:	00401497 	.word	0x00401497
  400c58:	e000e100 	.word	0xe000e100

00400c5c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400c5c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400c5e:	480e      	ldr	r0, [pc, #56]	; (400c98 <sysclk_init+0x3c>)
  400c60:	4b0e      	ldr	r3, [pc, #56]	; (400c9c <sysclk_init+0x40>)
  400c62:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400c64:	213e      	movs	r1, #62	; 0x3e
  400c66:	2000      	movs	r0, #0
  400c68:	4b0d      	ldr	r3, [pc, #52]	; (400ca0 <sysclk_init+0x44>)
  400c6a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c6c:	4c0d      	ldr	r4, [pc, #52]	; (400ca4 <sysclk_init+0x48>)
  400c6e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400c70:	2800      	cmp	r0, #0
  400c72:	d0fc      	beq.n	400c6e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400c74:	4b0c      	ldr	r3, [pc, #48]	; (400ca8 <sysclk_init+0x4c>)
  400c76:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400c78:	4a0c      	ldr	r2, [pc, #48]	; (400cac <sysclk_init+0x50>)
  400c7a:	4b0d      	ldr	r3, [pc, #52]	; (400cb0 <sysclk_init+0x54>)
  400c7c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400c7e:	4c0d      	ldr	r4, [pc, #52]	; (400cb4 <sysclk_init+0x58>)
  400c80:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400c82:	2800      	cmp	r0, #0
  400c84:	d0fc      	beq.n	400c80 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400c86:	2010      	movs	r0, #16
  400c88:	4b0b      	ldr	r3, [pc, #44]	; (400cb8 <sysclk_init+0x5c>)
  400c8a:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400c8c:	4b0b      	ldr	r3, [pc, #44]	; (400cbc <sysclk_init+0x60>)
  400c8e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400c90:	480b      	ldr	r0, [pc, #44]	; (400cc0 <sysclk_init+0x64>)
  400c92:	4b02      	ldr	r3, [pc, #8]	; (400c9c <sysclk_init+0x40>)
  400c94:	4798      	blx	r3
  400c96:	bd10      	pop	{r4, pc}
  400c98:	07270e00 	.word	0x07270e00
  400c9c:	004016e1 	.word	0x004016e1
  400ca0:	004012d5 	.word	0x004012d5
  400ca4:	00401329 	.word	0x00401329
  400ca8:	00401339 	.word	0x00401339
  400cac:	200f3f01 	.word	0x200f3f01
  400cb0:	400e0400 	.word	0x400e0400
  400cb4:	00401349 	.word	0x00401349
  400cb8:	00401271 	.word	0x00401271
  400cbc:	004015d5 	.word	0x004015d5
  400cc0:	05b8d800 	.word	0x05b8d800

00400cc4 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  400cc4:	2a00      	cmp	r2, #0
  400cc6:	d03f      	beq.n	400d48 <usart_serial_read_packet+0x84>
{
  400cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ccc:	b083      	sub	sp, #12
  400cce:	4606      	mov	r6, r0
  400cd0:	460c      	mov	r4, r1
  400cd2:	4693      	mov	fp, r2
  400cd4:	448b      	add	fp, r1
	if (UART0 == (Uart*)p_usart) {
  400cd6:	4f1d      	ldr	r7, [pc, #116]	; (400d4c <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  400cd8:	4d1d      	ldr	r5, [pc, #116]	; (400d50 <usart_serial_read_packet+0x8c>)
	if (UART1 == (Uart*)p_usart) {
  400cda:	f8df a080 	ldr.w	sl, [pc, #128]	; 400d5c <usart_serial_read_packet+0x98>
  400cde:	e00d      	b.n	400cfc <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  400ce0:	4621      	mov	r1, r4
  400ce2:	4638      	mov	r0, r7
  400ce4:	47a8      	blx	r5
  400ce6:	2800      	cmp	r0, #0
  400ce8:	d1fa      	bne.n	400ce0 <usart_serial_read_packet+0x1c>
  400cea:	e010      	b.n	400d0e <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  400cec:	4621      	mov	r1, r4
  400cee:	4650      	mov	r0, sl
  400cf0:	47a8      	blx	r5
  400cf2:	2800      	cmp	r0, #0
  400cf4:	d1fa      	bne.n	400cec <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  400cf6:	3401      	adds	r4, #1
	while (len) {
  400cf8:	455c      	cmp	r4, fp
  400cfa:	d021      	beq.n	400d40 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400cfc:	2300      	movs	r3, #0
  400cfe:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400d00:	42be      	cmp	r6, r7
  400d02:	d0ed      	beq.n	400ce0 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  400d04:	4556      	cmp	r6, sl
  400d06:	d0f1      	beq.n	400cec <usart_serial_read_packet+0x28>
	if (USART0 == p_usart) {
  400d08:	4b12      	ldr	r3, [pc, #72]	; (400d54 <usart_serial_read_packet+0x90>)
  400d0a:	429e      	cmp	r6, r3
  400d0c:	d00d      	beq.n	400d2a <usart_serial_read_packet+0x66>
	if (USART1 == p_usart) {
  400d0e:	4b12      	ldr	r3, [pc, #72]	; (400d58 <usart_serial_read_packet+0x94>)
  400d10:	429e      	cmp	r6, r3
  400d12:	d1f0      	bne.n	400cf6 <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400d14:	4699      	mov	r9, r3
  400d16:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400d60 <usart_serial_read_packet+0x9c>
  400d1a:	a901      	add	r1, sp, #4
  400d1c:	4648      	mov	r0, r9
  400d1e:	47c0      	blx	r8
  400d20:	2800      	cmp	r0, #0
  400d22:	d1fa      	bne.n	400d1a <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  400d24:	9b01      	ldr	r3, [sp, #4]
  400d26:	7023      	strb	r3, [r4, #0]
  400d28:	e7e5      	b.n	400cf6 <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400d2a:	4699      	mov	r9, r3
  400d2c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 400d60 <usart_serial_read_packet+0x9c>
  400d30:	a901      	add	r1, sp, #4
  400d32:	4648      	mov	r0, r9
  400d34:	47c0      	blx	r8
  400d36:	2800      	cmp	r0, #0
  400d38:	d1fa      	bne.n	400d30 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  400d3a:	9b01      	ldr	r3, [sp, #4]
  400d3c:	7023      	strb	r3, [r4, #0]
  400d3e:	e7da      	b.n	400cf6 <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  400d40:	2000      	movs	r0, #0
  400d42:	b003      	add	sp, #12
  400d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d48:	2000      	movs	r0, #0
  400d4a:	4770      	bx	lr
  400d4c:	400e0600 	.word	0x400e0600
  400d50:	004014af 	.word	0x004014af
  400d54:	400a0000 	.word	0x400a0000
  400d58:	400a4000 	.word	0x400a4000
  400d5c:	40060600 	.word	0x40060600
  400d60:	004014f1 	.word	0x004014f1

00400d64 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400d68:	b980      	cbnz	r0, 400d8c <_read+0x28>
  400d6a:	460c      	mov	r4, r1
  400d6c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400d6e:	2a00      	cmp	r2, #0
  400d70:	dd0f      	ble.n	400d92 <_read+0x2e>
  400d72:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400d74:	4e08      	ldr	r6, [pc, #32]	; (400d98 <_read+0x34>)
  400d76:	4d09      	ldr	r5, [pc, #36]	; (400d9c <_read+0x38>)
  400d78:	6830      	ldr	r0, [r6, #0]
  400d7a:	4621      	mov	r1, r4
  400d7c:	682b      	ldr	r3, [r5, #0]
  400d7e:	4798      	blx	r3
		ptr++;
  400d80:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400d82:	42bc      	cmp	r4, r7
  400d84:	d1f8      	bne.n	400d78 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400d86:	4640      	mov	r0, r8
  400d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d8c:	f04f 38ff 	mov.w	r8, #4294967295
  400d90:	e7f9      	b.n	400d86 <_read+0x22>
	for (; len > 0; --len) {
  400d92:	4680      	mov	r8, r0
  400d94:	e7f7      	b.n	400d86 <_read+0x22>
  400d96:	bf00      	nop
  400d98:	2000cd8c 	.word	0x2000cd8c
  400d9c:	2000cd84 	.word	0x2000cd84

00400da0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400da0:	3801      	subs	r0, #1
  400da2:	2802      	cmp	r0, #2
  400da4:	d815      	bhi.n	400dd2 <_write+0x32>
{
  400da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400daa:	460e      	mov	r6, r1
  400dac:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400dae:	b19a      	cbz	r2, 400dd8 <_write+0x38>
  400db0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400db2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400dec <_write+0x4c>
  400db6:	4f0c      	ldr	r7, [pc, #48]	; (400de8 <_write+0x48>)
  400db8:	f8d8 0000 	ldr.w	r0, [r8]
  400dbc:	f815 1b01 	ldrb.w	r1, [r5], #1
  400dc0:	683b      	ldr	r3, [r7, #0]
  400dc2:	4798      	blx	r3
  400dc4:	2800      	cmp	r0, #0
  400dc6:	db0a      	blt.n	400dde <_write+0x3e>
  400dc8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400dca:	3c01      	subs	r4, #1
  400dcc:	d1f4      	bne.n	400db8 <_write+0x18>
  400dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400dd2:	f04f 30ff 	mov.w	r0, #4294967295
  400dd6:	4770      	bx	lr
	for (; len != 0; --len) {
  400dd8:	4610      	mov	r0, r2
  400dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400dde:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400de6:	bf00      	nop
  400de8:	2000cd88 	.word	0x2000cd88
  400dec:	2000cd8c 	.word	0x2000cd8c

00400df0 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400df0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400df2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400df6:	4b21      	ldr	r3, [pc, #132]	; (400e7c <board_init+0x8c>)
  400df8:	605a      	str	r2, [r3, #4]
  400dfa:	2009      	movs	r0, #9
  400dfc:	4c20      	ldr	r4, [pc, #128]	; (400e80 <board_init+0x90>)
  400dfe:	47a0      	blx	r4
  400e00:	200a      	movs	r0, #10
  400e02:	47a0      	blx	r4
  400e04:	200b      	movs	r0, #11
  400e06:	47a0      	blx	r4
  400e08:	200c      	movs	r0, #12
  400e0a:	47a0      	blx	r4
  400e0c:	200d      	movs	r0, #13
  400e0e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e10:	4b1c      	ldr	r3, [pc, #112]	; (400e84 <board_init+0x94>)
  400e12:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400e16:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400e1c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400e1e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400e22:	2204      	movs	r2, #4
  400e24:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400e2a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e30:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400e32:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400e38:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e3a:	f021 0104 	bic.w	r1, r1, #4
  400e3e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e40:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e42:	f021 0104 	bic.w	r1, r1, #4
  400e46:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400e48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400e4c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400e50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400e54:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  400e58:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e5e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e60:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e66:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e68:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400e6c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e6e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e70:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400e74:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e76:	605a      	str	r2, [r3, #4]
  400e78:	bd10      	pop	{r4, pc}
  400e7a:	bf00      	nop
  400e7c:	400e1850 	.word	0x400e1850
  400e80:	00401359 	.word	0x00401359
  400e84:	400e1400 	.word	0x400e1400

00400e88 <acc_init>:
		Acc *p_acc,
		uint32_t ul_select_plus,
		uint32_t ul_select_minus,
		uint32_t ul_edge_type,
		uint32_t ul_invert)
{
  400e88:	b410      	push	{r4}
	/* Validate the parameters. */
	Assert(p_acc);
	
	/* Reset the controller. */
	p_acc->ACC_CR |= ACC_CR_SWRST;
  400e8a:	6804      	ldr	r4, [r0, #0]
  400e8c:	f044 0401 	orr.w	r4, r4, #1
  400e90:	6004      	str	r4, [r0, #0]

	/* Write to the MR register. */
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400e92:	9c01      	ldr	r4, [sp, #4]
  400e94:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
  400e98:	f444 7480 	orr.w	r4, r4, #256	; 0x100
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
  400e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400ea0:	431c      	orrs	r4, r3
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
  400ea2:	f002 0207 	and.w	r2, r2, #7
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400ea6:	4314      	orrs	r4, r2
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400ea8:	f001 0170 	and.w	r1, r1, #112	; 0x70
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400eac:	430c      	orrs	r4, r1
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400eae:	6044      	str	r4, [r0, #4]

	/* Set hysteresis and current option. */
	p_acc->ACC_ACR = (ACC_ACR_ISEL_HISP |
  400eb0:	2303      	movs	r3, #3
  400eb2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
			ACC_ACR_HYST(ACC_ACR_HYST_50mv_max));

	/* Automatic Output Masking Period. */
	while (p_acc->ACC_ISR & (uint32_t) ACC_ISR_MASK);
  400eb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400eb8:	2b00      	cmp	r3, #0
  400eba:	dbfc      	blt.n	400eb6 <acc_init+0x2e>
}
  400ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ec0:	4770      	bx	lr

00400ec2 <acc_get_comparison_result>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	uint32_t ul_temp = p_acc->ACC_MR;
  400ec2:	6843      	ldr	r3, [r0, #4]
	uint32_t ul_status = p_acc->ACC_ISR;
  400ec4:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if ((ul_temp & ACC_MR_INV_EN) == ACC_MR_INV_EN) {
  400ec6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		if (ul_status & ACC_ISR_SCO) {
  400eca:	bf18      	it	ne
  400ecc:	f080 0002 	eorne.w	r0, r0, #2
			return 0;	/* inn>inp */
		} else {
			return 1;	/* inp>inn */
		}
	} else {
		if (ul_status & ACC_ISR_SCO) {
  400ed0:	f3c0 0040 	ubfx	r0, r0, #1, #1
			return 1;	/* inp>inn */
		} else {
			return 0;	/* inn>inp */
		}
	}
}
  400ed4:	4770      	bx	lr

00400ed6 <acc_enable_interrupt>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	p_acc->ACC_IER = ACC_IER_CE;
  400ed6:	2301      	movs	r3, #1
  400ed8:	6243      	str	r3, [r0, #36]	; 0x24
  400eda:	4770      	bx	lr

00400edc <acc_get_interrupt_status>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	return p_acc->ACC_ISR;
  400edc:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400ede:	4770      	bx	lr

00400ee0 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400ee0:	b570      	push	{r4, r5, r6, lr}
  400ee2:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400ee4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400ee6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400ee8:	4013      	ands	r3, r2
  400eea:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400eec:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400eee:	4d21      	ldr	r5, [pc, #132]	; (400f74 <afec_process_callback+0x94>)
  400ef0:	42a8      	cmp	r0, r5
  400ef2:	bf14      	ite	ne
  400ef4:	2500      	movne	r5, #0
  400ef6:	2501      	moveq	r5, #1
  400ef8:	006e      	lsls	r6, r5, #1
  400efa:	442e      	add	r6, r5
  400efc:	e00b      	b.n	400f16 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400efe:	2c14      	cmp	r4, #20
  400f00:	d824      	bhi.n	400f4c <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400f02:	9a01      	ldr	r2, [sp, #4]
  400f04:	f104 0108 	add.w	r1, r4, #8
  400f08:	2301      	movs	r3, #1
  400f0a:	408b      	lsls	r3, r1
  400f0c:	4213      	tst	r3, r2
  400f0e:	d113      	bne.n	400f38 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400f10:	3401      	adds	r4, #1
  400f12:	2c17      	cmp	r4, #23
  400f14:	d02b      	beq.n	400f6e <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400f16:	2c0f      	cmp	r4, #15
  400f18:	d8f1      	bhi.n	400efe <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400f1a:	9a01      	ldr	r2, [sp, #4]
  400f1c:	2301      	movs	r3, #1
  400f1e:	40a3      	lsls	r3, r4
  400f20:	4213      	tst	r3, r2
  400f22:	d0f5      	beq.n	400f10 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400f24:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400f28:	4423      	add	r3, r4
  400f2a:	4a13      	ldr	r2, [pc, #76]	; (400f78 <afec_process_callback+0x98>)
  400f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400f30:	2b00      	cmp	r3, #0
  400f32:	d0ed      	beq.n	400f10 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400f34:	4798      	blx	r3
  400f36:	e7eb      	b.n	400f10 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400f38:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400f3c:	4423      	add	r3, r4
  400f3e:	4a0e      	ldr	r2, [pc, #56]	; (400f78 <afec_process_callback+0x98>)
  400f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400f44:	2b00      	cmp	r3, #0
  400f46:	d0e3      	beq.n	400f10 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400f48:	4798      	blx	r3
  400f4a:	e7e1      	b.n	400f10 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400f4c:	9a01      	ldr	r2, [sp, #4]
  400f4e:	f104 0109 	add.w	r1, r4, #9
  400f52:	2301      	movs	r3, #1
  400f54:	408b      	lsls	r3, r1
  400f56:	4213      	tst	r3, r2
  400f58:	d0da      	beq.n	400f10 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400f5a:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400f5e:	4423      	add	r3, r4
  400f60:	4a05      	ldr	r2, [pc, #20]	; (400f78 <afec_process_callback+0x98>)
  400f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400f66:	2b00      	cmp	r3, #0
  400f68:	d0d2      	beq.n	400f10 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400f6a:	4798      	blx	r3
  400f6c:	e7d0      	b.n	400f10 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400f6e:	b002      	add	sp, #8
  400f70:	bd70      	pop	{r4, r5, r6, pc}
  400f72:	bf00      	nop
  400f74:	400b4000 	.word	0x400b4000
  400f78:	2000cd90 	.word	0x2000cd90

00400f7c <afec_ch_set_config>:
{
  400f7c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400f7e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400f80:	2301      	movs	r3, #1
  400f82:	408b      	lsls	r3, r1
  400f84:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400f88:	7815      	ldrb	r5, [r2, #0]
  400f8a:	2d00      	cmp	r5, #0
  400f8c:	bf08      	it	eq
  400f8e:	2300      	moveq	r3, #0
  400f90:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400f92:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400f94:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400f96:	004b      	lsls	r3, r1, #1
  400f98:	2103      	movs	r1, #3
  400f9a:	4099      	lsls	r1, r3
  400f9c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400fa0:	7851      	ldrb	r1, [r2, #1]
  400fa2:	4099      	lsls	r1, r3
  400fa4:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400fa6:	6541      	str	r1, [r0, #84]	; 0x54
}
  400fa8:	bc30      	pop	{r4, r5}
  400faa:	4770      	bx	lr

00400fac <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400fac:	2200      	movs	r2, #0
  400fae:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400fb0:	4b08      	ldr	r3, [pc, #32]	; (400fd4 <afec_get_config_defaults+0x28>)
  400fb2:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400fb4:	4b08      	ldr	r3, [pc, #32]	; (400fd8 <afec_get_config_defaults+0x2c>)
  400fb6:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400fb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400fbc:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400fbe:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400fc0:	2302      	movs	r3, #2
  400fc2:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  400fc4:	2301      	movs	r3, #1
  400fc6:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400fc8:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400fca:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400fcc:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400fce:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400fd0:	7683      	strb	r3, [r0, #26]
  400fd2:	4770      	bx	lr
  400fd4:	05b8d800 	.word	0x05b8d800
  400fd8:	005b8d80 	.word	0x005b8d80

00400fdc <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400fdc:	2300      	movs	r3, #0
  400fde:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400fe0:	2301      	movs	r3, #1
  400fe2:	7043      	strb	r3, [r0, #1]
  400fe4:	4770      	bx	lr
	...

00400fe8 <afec_init>:
	return afec->AFEC_ISR;
  400fe8:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400fea:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400fee:	d001      	beq.n	400ff4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400ff0:	2019      	movs	r0, #25
  400ff2:	4770      	bx	lr
{
  400ff4:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400ff6:	2301      	movs	r3, #1
  400ff8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400ffa:	7dcb      	ldrb	r3, [r1, #23]
  400ffc:	2b00      	cmp	r3, #0
  400ffe:	bf14      	ite	ne
  401000:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  401004:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  401006:	7d8b      	ldrb	r3, [r1, #22]
  401008:	2b00      	cmp	r3, #0
  40100a:	bf14      	ite	ne
  40100c:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  401010:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  401012:	7d0b      	ldrb	r3, [r1, #20]
  401014:	061b      	lsls	r3, r3, #24
  401016:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40101a:	690a      	ldr	r2, [r1, #16]
  40101c:	68ce      	ldr	r6, [r1, #12]
  40101e:	4332      	orrs	r2, r6
  401020:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  401022:	7d4a      	ldrb	r2, [r1, #21]
  401024:	0712      	lsls	r2, r2, #28
  401026:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40102a:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  40102c:	688a      	ldr	r2, [r1, #8]
  40102e:	0056      	lsls	r6, r2, #1
  401030:	684a      	ldr	r2, [r1, #4]
  401032:	fbb2 f2f6 	udiv	r2, r2, r6
  401036:	3a01      	subs	r2, #1
  401038:	0212      	lsls	r2, r2, #8
  40103a:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40103c:	4313      	orrs	r3, r2
  40103e:	432b      	orrs	r3, r5
  401040:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  401042:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401044:	7e0b      	ldrb	r3, [r1, #24]
  401046:	2b00      	cmp	r3, #0
  401048:	bf14      	ite	ne
  40104a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40104e:	2300      	moveq	r3, #0
  401050:	680a      	ldr	r2, [r1, #0]
  401052:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  401054:	7e4a      	ldrb	r2, [r1, #25]
  401056:	2a00      	cmp	r2, #0
  401058:	bf14      	ite	ne
  40105a:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40105e:	2200      	moveq	r2, #0
			(config->resolution) |
  401060:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401062:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  401064:	7e8b      	ldrb	r3, [r1, #26]
  401066:	021b      	lsls	r3, r3, #8
  401068:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40106c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  401070:	4b0e      	ldr	r3, [pc, #56]	; (4010ac <afec_init+0xc4>)
  401072:	4298      	cmp	r0, r3
  401074:	d005      	beq.n	401082 <afec_init+0x9a>
	if(afec == AFEC1) {
  401076:	4b0e      	ldr	r3, [pc, #56]	; (4010b0 <afec_init+0xc8>)
  401078:	4298      	cmp	r0, r3
  40107a:	d00c      	beq.n	401096 <afec_init+0xae>
	return STATUS_OK;
  40107c:	2000      	movs	r0, #0
}
  40107e:	bc70      	pop	{r4, r5, r6}
  401080:	4770      	bx	lr
  401082:	4b0c      	ldr	r3, [pc, #48]	; (4010b4 <afec_init+0xcc>)
  401084:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  401088:	2200      	movs	r2, #0
  40108a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40108e:	428b      	cmp	r3, r1
  401090:	d1fb      	bne.n	40108a <afec_init+0xa2>
	return STATUS_OK;
  401092:	2000      	movs	r0, #0
  401094:	e7f3      	b.n	40107e <afec_init+0x96>
  401096:	4b08      	ldr	r3, [pc, #32]	; (4010b8 <afec_init+0xd0>)
  401098:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  40109c:	2200      	movs	r2, #0
  40109e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4010a2:	428b      	cmp	r3, r1
  4010a4:	d1fb      	bne.n	40109e <afec_init+0xb6>
	return STATUS_OK;
  4010a6:	2000      	movs	r0, #0
  4010a8:	e7e9      	b.n	40107e <afec_init+0x96>
  4010aa:	bf00      	nop
  4010ac:	400b0000 	.word	0x400b0000
  4010b0:	400b4000 	.word	0x400b4000
  4010b4:	2000cd8c 	.word	0x2000cd8c
  4010b8:	2000cde8 	.word	0x2000cde8

004010bc <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4010bc:	4b0c      	ldr	r3, [pc, #48]	; (4010f0 <afec_enable_interrupt+0x34>)
  4010be:	4299      	cmp	r1, r3
  4010c0:	d007      	beq.n	4010d2 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4010c2:	290f      	cmp	r1, #15
  4010c4:	d80b      	bhi.n	4010de <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  4010c6:	d006      	beq.n	4010d6 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  4010c8:	2301      	movs	r3, #1
  4010ca:	fa03 f101 	lsl.w	r1, r3, r1
  4010ce:	6241      	str	r1, [r0, #36]	; 0x24
  4010d0:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4010d2:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4010d4:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  4010d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4010da:	6243      	str	r3, [r0, #36]	; 0x24
  4010dc:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4010de:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4010e0:	bf94      	ite	ls
  4010e2:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  4010e4:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4010e6:	2301      	movs	r3, #1
  4010e8:	fa03 f101 	lsl.w	r1, r3, r1
  4010ec:	6241      	str	r1, [r0, #36]	; 0x24
  4010ee:	4770      	bx	lr
  4010f0:	df00ffff 	.word	0xdf00ffff

004010f4 <afec_set_callback>:
{
  4010f4:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4010f6:	4c11      	ldr	r4, [pc, #68]	; (40113c <afec_set_callback+0x48>)
  4010f8:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4010fa:	bf0c      	ite	eq
  4010fc:	2417      	moveq	r4, #23
  4010fe:	2400      	movne	r4, #0
  401100:	440c      	add	r4, r1
  401102:	4d0f      	ldr	r5, [pc, #60]	; (401140 <afec_set_callback+0x4c>)
  401104:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  401108:	d10a      	bne.n	401120 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40110a:	4a0e      	ldr	r2, [pc, #56]	; (401144 <afec_set_callback+0x50>)
  40110c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  401110:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401114:	011b      	lsls	r3, r3, #4
  401116:	b2db      	uxtb	r3, r3
  401118:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40111c:	6014      	str	r4, [r2, #0]
  40111e:	e009      	b.n	401134 <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401120:	4a08      	ldr	r2, [pc, #32]	; (401144 <afec_set_callback+0x50>)
  401122:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401126:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40112a:	011b      	lsls	r3, r3, #4
  40112c:	b2db      	uxtb	r3, r3
  40112e:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401132:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  401134:	4b04      	ldr	r3, [pc, #16]	; (401148 <afec_set_callback+0x54>)
  401136:	4798      	blx	r3
  401138:	bd38      	pop	{r3, r4, r5, pc}
  40113a:	bf00      	nop
  40113c:	400b4000 	.word	0x400b4000
  401140:	2000cd90 	.word	0x2000cd90
  401144:	e000e100 	.word	0xe000e100
  401148:	004010bd 	.word	0x004010bd

0040114c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40114c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40114e:	4802      	ldr	r0, [pc, #8]	; (401158 <AFEC0_Handler+0xc>)
  401150:	4b02      	ldr	r3, [pc, #8]	; (40115c <AFEC0_Handler+0x10>)
  401152:	4798      	blx	r3
  401154:	bd08      	pop	{r3, pc}
  401156:	bf00      	nop
  401158:	400b0000 	.word	0x400b0000
  40115c:	00400ee1 	.word	0x00400ee1

00401160 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  401160:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  401162:	4802      	ldr	r0, [pc, #8]	; (40116c <AFEC1_Handler+0xc>)
  401164:	4b02      	ldr	r3, [pc, #8]	; (401170 <AFEC1_Handler+0x10>)
  401166:	4798      	blx	r3
  401168:	bd08      	pop	{r3, pc}
  40116a:	bf00      	nop
  40116c:	400b4000 	.word	0x400b4000
  401170:	00400ee1 	.word	0x00400ee1

00401174 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401174:	b500      	push	{lr}
  401176:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  401178:	4b13      	ldr	r3, [pc, #76]	; (4011c8 <afec_enable+0x54>)
  40117a:	4298      	cmp	r0, r3
  40117c:	bf0c      	ite	eq
  40117e:	201f      	moveq	r0, #31
  401180:	201e      	movne	r0, #30
  401182:	4b12      	ldr	r3, [pc, #72]	; (4011cc <afec_enable+0x58>)
  401184:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  401186:	4b12      	ldr	r3, [pc, #72]	; (4011d0 <afec_enable+0x5c>)
  401188:	789b      	ldrb	r3, [r3, #2]
  40118a:	2bff      	cmp	r3, #255	; 0xff
  40118c:	d01a      	beq.n	4011c4 <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40118e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401192:	fab3 f383 	clz	r3, r3
  401196:	095b      	lsrs	r3, r3, #5
  401198:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40119a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40119c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4011a0:	2200      	movs	r2, #0
  4011a2:	4b0c      	ldr	r3, [pc, #48]	; (4011d4 <afec_enable+0x60>)
  4011a4:	701a      	strb	r2, [r3, #0]
	return flags;
  4011a6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4011a8:	4a09      	ldr	r2, [pc, #36]	; (4011d0 <afec_enable+0x5c>)
  4011aa:	7893      	ldrb	r3, [r2, #2]
  4011ac:	3301      	adds	r3, #1
  4011ae:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4011b0:	b129      	cbz	r1, 4011be <afec_enable+0x4a>
		cpu_irq_enable();
  4011b2:	2201      	movs	r2, #1
  4011b4:	4b07      	ldr	r3, [pc, #28]	; (4011d4 <afec_enable+0x60>)
  4011b6:	701a      	strb	r2, [r3, #0]
  4011b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4011bc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4011be:	b003      	add	sp, #12
  4011c0:	f85d fb04 	ldr.w	pc, [sp], #4
  4011c4:	e7fe      	b.n	4011c4 <afec_enable+0x50>
  4011c6:	bf00      	nop
  4011c8:	400b4000 	.word	0x400b4000
  4011cc:	00401359 	.word	0x00401359
  4011d0:	2000cd7c 	.word	0x2000cd7c
  4011d4:	20000010 	.word	0x20000010

004011d8 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4011d8:	2301      	movs	r3, #1
  4011da:	6003      	str	r3, [r0, #0]
  4011dc:	4770      	bx	lr

004011de <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  4011de:	6843      	ldr	r3, [r0, #4]
  4011e0:	f023 0301 	bic.w	r3, r3, #1
  4011e4:	6043      	str	r3, [r0, #4]
  4011e6:	4770      	bx	lr

004011e8 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  4011e8:	b949      	cbnz	r1, 4011fe <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  4011ea:	6843      	ldr	r3, [r0, #4]
  4011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4011f0:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  4011f2:	6843      	ldr	r3, [r0, #4]
  4011f4:	f023 0310 	bic.w	r3, r3, #16
  4011f8:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4011fa:	2000      	movs	r0, #0
  4011fc:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  4011fe:	6843      	ldr	r3, [r0, #4]
  401200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401204:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  401206:	6843      	ldr	r3, [r0, #4]
  401208:	f043 0310 	orr.w	r3, r3, #16
  40120c:	6043      	str	r3, [r0, #4]
  40120e:	e7f4      	b.n	4011fa <dacc_set_transfer_mode+0x12>

00401210 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  401210:	6201      	str	r1, [r0, #32]
  401212:	4770      	bx	lr

00401214 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  401214:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  401216:	2901      	cmp	r1, #1
  401218:	d901      	bls.n	40121e <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  40121a:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  40121c:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  40121e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  401222:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  401226:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  401228:	2000      	movs	r0, #0
  40122a:	4770      	bx	lr

0040122c <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  40122c:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  40122e:	b941      	cbnz	r1, 401242 <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  401230:	4907      	ldr	r1, [pc, #28]	; (401250 <dacc_set_timing+0x24>)
  401232:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  401234:	0612      	lsls	r2, r2, #24
  401236:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  40123a:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  40123c:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  40123e:	2000      	movs	r0, #0
  401240:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  401242:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  401246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  40124a:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  40124e:	e7f1      	b.n	401234 <dacc_set_timing+0x8>
  401250:	c0df00ff 	.word	0xc0df00ff

00401254 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  401254:	2901      	cmp	r1, #1
  401256:	d901      	bls.n	40125c <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  401258:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  40125a:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  40125c:	2301      	movs	r3, #1
  40125e:	fa03 f101 	lsl.w	r1, r3, r1
  401262:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  401264:	2000      	movs	r0, #0
  401266:	4770      	bx	lr

00401268 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  401268:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  40126c:	2000      	movs	r0, #0
  40126e:	4770      	bx	lr

00401270 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401270:	4a17      	ldr	r2, [pc, #92]	; (4012d0 <pmc_switch_mck_to_pllack+0x60>)
  401272:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401278:	4318      	orrs	r0, r3
  40127a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40127c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40127e:	f013 0f08 	tst.w	r3, #8
  401282:	d10a      	bne.n	40129a <pmc_switch_mck_to_pllack+0x2a>
  401284:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401288:	4911      	ldr	r1, [pc, #68]	; (4012d0 <pmc_switch_mck_to_pllack+0x60>)
  40128a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40128c:	f012 0f08 	tst.w	r2, #8
  401290:	d103      	bne.n	40129a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401292:	3b01      	subs	r3, #1
  401294:	d1f9      	bne.n	40128a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401296:	2001      	movs	r0, #1
  401298:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40129a:	4a0d      	ldr	r2, [pc, #52]	; (4012d0 <pmc_switch_mck_to_pllack+0x60>)
  40129c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40129e:	f023 0303 	bic.w	r3, r3, #3
  4012a2:	f043 0302 	orr.w	r3, r3, #2
  4012a6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4012a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012aa:	f013 0f08 	tst.w	r3, #8
  4012ae:	d10a      	bne.n	4012c6 <pmc_switch_mck_to_pllack+0x56>
  4012b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4012b4:	4906      	ldr	r1, [pc, #24]	; (4012d0 <pmc_switch_mck_to_pllack+0x60>)
  4012b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4012b8:	f012 0f08 	tst.w	r2, #8
  4012bc:	d105      	bne.n	4012ca <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4012be:	3b01      	subs	r3, #1
  4012c0:	d1f9      	bne.n	4012b6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4012c2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4012c4:	4770      	bx	lr
	return 0;
  4012c6:	2000      	movs	r0, #0
  4012c8:	4770      	bx	lr
  4012ca:	2000      	movs	r0, #0
  4012cc:	4770      	bx	lr
  4012ce:	bf00      	nop
  4012d0:	400e0400 	.word	0x400e0400

004012d4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4012d4:	b9c8      	cbnz	r0, 40130a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012d6:	4a11      	ldr	r2, [pc, #68]	; (40131c <pmc_switch_mainck_to_xtal+0x48>)
  4012d8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4012da:	0209      	lsls	r1, r1, #8
  4012dc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4012de:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4012e2:	f023 0303 	bic.w	r3, r3, #3
  4012e6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4012ea:	f043 0301 	orr.w	r3, r3, #1
  4012ee:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012f0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4012f2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012f4:	f013 0f01 	tst.w	r3, #1
  4012f8:	d0fb      	beq.n	4012f2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4012fa:	4a08      	ldr	r2, [pc, #32]	; (40131c <pmc_switch_mainck_to_xtal+0x48>)
  4012fc:	6a13      	ldr	r3, [r2, #32]
  4012fe:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401306:	6213      	str	r3, [r2, #32]
  401308:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40130a:	4904      	ldr	r1, [pc, #16]	; (40131c <pmc_switch_mainck_to_xtal+0x48>)
  40130c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40130e:	4a04      	ldr	r2, [pc, #16]	; (401320 <pmc_switch_mainck_to_xtal+0x4c>)
  401310:	401a      	ands	r2, r3
  401312:	4b04      	ldr	r3, [pc, #16]	; (401324 <pmc_switch_mainck_to_xtal+0x50>)
  401314:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401316:	620b      	str	r3, [r1, #32]
  401318:	4770      	bx	lr
  40131a:	bf00      	nop
  40131c:	400e0400 	.word	0x400e0400
  401320:	fec8fffc 	.word	0xfec8fffc
  401324:	01370002 	.word	0x01370002

00401328 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401328:	4b02      	ldr	r3, [pc, #8]	; (401334 <pmc_osc_is_ready_mainck+0xc>)
  40132a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40132c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401330:	4770      	bx	lr
  401332:	bf00      	nop
  401334:	400e0400 	.word	0x400e0400

00401338 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401338:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40133c:	4b01      	ldr	r3, [pc, #4]	; (401344 <pmc_disable_pllack+0xc>)
  40133e:	629a      	str	r2, [r3, #40]	; 0x28
  401340:	4770      	bx	lr
  401342:	bf00      	nop
  401344:	400e0400 	.word	0x400e0400

00401348 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401348:	4b02      	ldr	r3, [pc, #8]	; (401354 <pmc_is_locked_pllack+0xc>)
  40134a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40134c:	f000 0002 	and.w	r0, r0, #2
  401350:	4770      	bx	lr
  401352:	bf00      	nop
  401354:	400e0400 	.word	0x400e0400

00401358 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401358:	282f      	cmp	r0, #47	; 0x2f
  40135a:	d81e      	bhi.n	40139a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40135c:	281f      	cmp	r0, #31
  40135e:	d80c      	bhi.n	40137a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401360:	4b11      	ldr	r3, [pc, #68]	; (4013a8 <pmc_enable_periph_clk+0x50>)
  401362:	699a      	ldr	r2, [r3, #24]
  401364:	2301      	movs	r3, #1
  401366:	4083      	lsls	r3, r0
  401368:	4393      	bics	r3, r2
  40136a:	d018      	beq.n	40139e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40136c:	2301      	movs	r3, #1
  40136e:	fa03 f000 	lsl.w	r0, r3, r0
  401372:	4b0d      	ldr	r3, [pc, #52]	; (4013a8 <pmc_enable_periph_clk+0x50>)
  401374:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401376:	2000      	movs	r0, #0
  401378:	4770      	bx	lr
		ul_id -= 32;
  40137a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40137c:	4b0a      	ldr	r3, [pc, #40]	; (4013a8 <pmc_enable_periph_clk+0x50>)
  40137e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401382:	2301      	movs	r3, #1
  401384:	4083      	lsls	r3, r0
  401386:	4393      	bics	r3, r2
  401388:	d00b      	beq.n	4013a2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40138a:	2301      	movs	r3, #1
  40138c:	fa03 f000 	lsl.w	r0, r3, r0
  401390:	4b05      	ldr	r3, [pc, #20]	; (4013a8 <pmc_enable_periph_clk+0x50>)
  401392:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401396:	2000      	movs	r0, #0
  401398:	4770      	bx	lr
		return 1;
  40139a:	2001      	movs	r0, #1
  40139c:	4770      	bx	lr
	return 0;
  40139e:	2000      	movs	r0, #0
  4013a0:	4770      	bx	lr
  4013a2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4013a4:	4770      	bx	lr
  4013a6:	bf00      	nop
  4013a8:	400e0400 	.word	0x400e0400

004013ac <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4013ac:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4013ae:	0189      	lsls	r1, r1, #6
  4013b0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4013b2:	2402      	movs	r4, #2
  4013b4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4013b6:	f04f 31ff 	mov.w	r1, #4294967295
  4013ba:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4013bc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4013be:	605a      	str	r2, [r3, #4]
}
  4013c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013c4:	4770      	bx	lr

004013c6 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4013c6:	0189      	lsls	r1, r1, #6
  4013c8:	2305      	movs	r3, #5
  4013ca:	5043      	str	r3, [r0, r1]
  4013cc:	4770      	bx	lr

004013ce <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  4013ce:	0189      	lsls	r1, r1, #6
  4013d0:	2302      	movs	r3, #2
  4013d2:	5043      	str	r3, [r0, r1]
  4013d4:	4770      	bx	lr

004013d6 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4013d6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4013da:	61ca      	str	r2, [r1, #28]
  4013dc:	4770      	bx	lr

004013de <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4013de:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4013e2:	624a      	str	r2, [r1, #36]	; 0x24
  4013e4:	4770      	bx	lr

004013e6 <tc_disable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4013e6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IDR = ul_sources;
  4013ea:	628a      	str	r2, [r1, #40]	; 0x28
  4013ec:	4770      	bx	lr

004013ee <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4013ee:	b4f0      	push	{r4, r5, r6, r7}
  4013f0:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4013f2:	2402      	movs	r4, #2
  4013f4:	9401      	str	r4, [sp, #4]
  4013f6:	2408      	movs	r4, #8
  4013f8:	9402      	str	r4, [sp, #8]
  4013fa:	2420      	movs	r4, #32
  4013fc:	9403      	str	r4, [sp, #12]
  4013fe:	2480      	movs	r4, #128	; 0x80
  401400:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  401402:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  401404:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401406:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  401408:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40140c:	d814      	bhi.n	401438 <tc_find_mck_divisor+0x4a>
  40140e:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  401410:	42a0      	cmp	r0, r4
  401412:	d217      	bcs.n	401444 <tc_find_mck_divisor+0x56>
  401414:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  401416:	af01      	add	r7, sp, #4
  401418:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40141c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  401420:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  401422:	4284      	cmp	r4, r0
  401424:	d30a      	bcc.n	40143c <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  401426:	4286      	cmp	r6, r0
  401428:	d90d      	bls.n	401446 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40142a:	3501      	adds	r5, #1
	for (ul_index = 0;
  40142c:	2d05      	cmp	r5, #5
  40142e:	d1f3      	bne.n	401418 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  401430:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  401432:	b006      	add	sp, #24
  401434:	bcf0      	pop	{r4, r5, r6, r7}
  401436:	4770      	bx	lr
			return 0;
  401438:	2000      	movs	r0, #0
  40143a:	e7fa      	b.n	401432 <tc_find_mck_divisor+0x44>
  40143c:	2000      	movs	r0, #0
  40143e:	e7f8      	b.n	401432 <tc_find_mck_divisor+0x44>
	return 1;
  401440:	2001      	movs	r0, #1
  401442:	e7f6      	b.n	401432 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  401444:	2500      	movs	r5, #0
	if (p_uldiv) {
  401446:	b12a      	cbz	r2, 401454 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  401448:	a906      	add	r1, sp, #24
  40144a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40144e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  401452:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  401454:	2b00      	cmp	r3, #0
  401456:	d0f3      	beq.n	401440 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  401458:	601d      	str	r5, [r3, #0]
	return 1;
  40145a:	2001      	movs	r0, #1
  40145c:	e7e9      	b.n	401432 <tc_find_mck_divisor+0x44>

0040145e <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40145e:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401460:	23ac      	movs	r3, #172	; 0xac
  401462:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401464:	680b      	ldr	r3, [r1, #0]
  401466:	684a      	ldr	r2, [r1, #4]
  401468:	fbb3 f3f2 	udiv	r3, r3, r2
  40146c:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40146e:	1e5c      	subs	r4, r3, #1
  401470:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401474:	4294      	cmp	r4, r2
  401476:	d80c      	bhi.n	401492 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  401478:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40147a:	688b      	ldr	r3, [r1, #8]
  40147c:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40147e:	f240 2302 	movw	r3, #514	; 0x202
  401482:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401486:	2350      	movs	r3, #80	; 0x50
  401488:	6003      	str	r3, [r0, #0]

	return 0;
  40148a:	2000      	movs	r0, #0
}
  40148c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401490:	4770      	bx	lr
		return 1;
  401492:	2001      	movs	r0, #1
  401494:	e7fa      	b.n	40148c <uart_init+0x2e>

00401496 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  401496:	6081      	str	r1, [r0, #8]
  401498:	4770      	bx	lr

0040149a <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  40149a:	6940      	ldr	r0, [r0, #20]
}
  40149c:	4770      	bx	lr

0040149e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40149e:	6943      	ldr	r3, [r0, #20]
  4014a0:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4014a4:	bf1a      	itte	ne
  4014a6:	61c1      	strne	r1, [r0, #28]
	return 0;
  4014a8:	2000      	movne	r0, #0
		return 1;
  4014aa:	2001      	moveq	r0, #1
}
  4014ac:	4770      	bx	lr

004014ae <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4014ae:	6943      	ldr	r3, [r0, #20]
  4014b0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4014b4:	bf1d      	ittte	ne
  4014b6:	6983      	ldrne	r3, [r0, #24]
  4014b8:	700b      	strbne	r3, [r1, #0]
	return 0;
  4014ba:	2000      	movne	r0, #0
		return 1;
  4014bc:	2001      	moveq	r0, #1
}
  4014be:	4770      	bx	lr

004014c0 <uart_get_pdc_base>:
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
}
  4014c0:	4b03      	ldr	r3, [pc, #12]	; (4014d0 <uart_get_pdc_base+0x10>)
  4014c2:	4a04      	ldr	r2, [pc, #16]	; (4014d4 <uart_get_pdc_base+0x14>)
  4014c4:	4904      	ldr	r1, [pc, #16]	; (4014d8 <uart_get_pdc_base+0x18>)
  4014c6:	4288      	cmp	r0, r1
  4014c8:	bf14      	ite	ne
  4014ca:	4610      	movne	r0, r2
  4014cc:	4618      	moveq	r0, r3
  4014ce:	4770      	bx	lr
  4014d0:	40060700 	.word	0x40060700
  4014d4:	400e0700 	.word	0x400e0700
  4014d8:	40060600 	.word	0x40060600

004014dc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4014dc:	6943      	ldr	r3, [r0, #20]
  4014de:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4014e2:	bf1d      	ittte	ne
  4014e4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4014e8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4014ea:	2000      	movne	r0, #0
		return 1;
  4014ec:	2001      	moveq	r0, #1
}
  4014ee:	4770      	bx	lr

004014f0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4014f0:	6943      	ldr	r3, [r0, #20]
  4014f2:	f013 0f01 	tst.w	r3, #1
  4014f6:	d005      	beq.n	401504 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4014f8:	6983      	ldr	r3, [r0, #24]
  4014fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4014fe:	600b      	str	r3, [r1, #0]

	return 0;
  401500:	2000      	movs	r0, #0
  401502:	4770      	bx	lr
		return 1;
  401504:	2001      	movs	r0, #1
}
  401506:	4770      	bx	lr

00401508 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401508:	e7fe      	b.n	401508 <Dummy_Handler>
	...

0040150c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40150c:	b500      	push	{lr}
  40150e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  401510:	4b25      	ldr	r3, [pc, #148]	; (4015a8 <Reset_Handler+0x9c>)
  401512:	4a26      	ldr	r2, [pc, #152]	; (4015ac <Reset_Handler+0xa0>)
  401514:	429a      	cmp	r2, r3
  401516:	d010      	beq.n	40153a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  401518:	4b25      	ldr	r3, [pc, #148]	; (4015b0 <Reset_Handler+0xa4>)
  40151a:	4a23      	ldr	r2, [pc, #140]	; (4015a8 <Reset_Handler+0x9c>)
  40151c:	429a      	cmp	r2, r3
  40151e:	d20c      	bcs.n	40153a <Reset_Handler+0x2e>
  401520:	3b01      	subs	r3, #1
  401522:	1a9b      	subs	r3, r3, r2
  401524:	f023 0303 	bic.w	r3, r3, #3
  401528:	3304      	adds	r3, #4
  40152a:	4413      	add	r3, r2
  40152c:	491f      	ldr	r1, [pc, #124]	; (4015ac <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40152e:	f851 0b04 	ldr.w	r0, [r1], #4
  401532:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  401536:	429a      	cmp	r2, r3
  401538:	d1f9      	bne.n	40152e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40153a:	4b1e      	ldr	r3, [pc, #120]	; (4015b4 <Reset_Handler+0xa8>)
  40153c:	4a1e      	ldr	r2, [pc, #120]	; (4015b8 <Reset_Handler+0xac>)
  40153e:	429a      	cmp	r2, r3
  401540:	d20a      	bcs.n	401558 <Reset_Handler+0x4c>
  401542:	3b01      	subs	r3, #1
  401544:	1a9b      	subs	r3, r3, r2
  401546:	f023 0303 	bic.w	r3, r3, #3
  40154a:	3304      	adds	r3, #4
  40154c:	4413      	add	r3, r2
		*pDest++ = 0;
  40154e:	2100      	movs	r1, #0
  401550:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  401554:	4293      	cmp	r3, r2
  401556:	d1fb      	bne.n	401550 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401558:	4a18      	ldr	r2, [pc, #96]	; (4015bc <Reset_Handler+0xb0>)
  40155a:	4b19      	ldr	r3, [pc, #100]	; (4015c0 <Reset_Handler+0xb4>)
  40155c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401560:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401562:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401566:	fab3 f383 	clz	r3, r3
  40156a:	095b      	lsrs	r3, r3, #5
  40156c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40156e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401570:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401574:	2200      	movs	r2, #0
  401576:	4b13      	ldr	r3, [pc, #76]	; (4015c4 <Reset_Handler+0xb8>)
  401578:	701a      	strb	r2, [r3, #0]
	return flags;
  40157a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40157c:	4a12      	ldr	r2, [pc, #72]	; (4015c8 <Reset_Handler+0xbc>)
  40157e:	6813      	ldr	r3, [r2, #0]
  401580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401584:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401586:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40158a:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40158e:	b129      	cbz	r1, 40159c <Reset_Handler+0x90>
		cpu_irq_enable();
  401590:	2201      	movs	r2, #1
  401592:	4b0c      	ldr	r3, [pc, #48]	; (4015c4 <Reset_Handler+0xb8>)
  401594:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401596:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40159a:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  40159c:	4b0b      	ldr	r3, [pc, #44]	; (4015cc <Reset_Handler+0xc0>)
  40159e:	4798      	blx	r3

	/* Branch to main function */
	main();
  4015a0:	4b0b      	ldr	r3, [pc, #44]	; (4015d0 <Reset_Handler+0xc4>)
  4015a2:	4798      	blx	r3
  4015a4:	e7fe      	b.n	4015a4 <Reset_Handler+0x98>
  4015a6:	bf00      	nop
  4015a8:	20000000 	.word	0x20000000
  4015ac:	00404d40 	.word	0x00404d40
  4015b0:	2000086c 	.word	0x2000086c
  4015b4:	2000ce70 	.word	0x2000ce70
  4015b8:	20000870 	.word	0x20000870
  4015bc:	e000ed00 	.word	0xe000ed00
  4015c0:	00400000 	.word	0x00400000
  4015c4:	20000010 	.word	0x20000010
  4015c8:	e000ed88 	.word	0xe000ed88
  4015cc:	00403bfd 	.word	0x00403bfd
  4015d0:	00401a49 	.word	0x00401a49

004015d4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4015d4:	4b3b      	ldr	r3, [pc, #236]	; (4016c4 <SystemCoreClockUpdate+0xf0>)
  4015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015d8:	f003 0303 	and.w	r3, r3, #3
  4015dc:	2b01      	cmp	r3, #1
  4015de:	d01d      	beq.n	40161c <SystemCoreClockUpdate+0x48>
  4015e0:	b183      	cbz	r3, 401604 <SystemCoreClockUpdate+0x30>
  4015e2:	2b02      	cmp	r3, #2
  4015e4:	d036      	beq.n	401654 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4015e6:	4b37      	ldr	r3, [pc, #220]	; (4016c4 <SystemCoreClockUpdate+0xf0>)
  4015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015ee:	2b70      	cmp	r3, #112	; 0x70
  4015f0:	d05f      	beq.n	4016b2 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4015f2:	4b34      	ldr	r3, [pc, #208]	; (4016c4 <SystemCoreClockUpdate+0xf0>)
  4015f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4015f6:	4934      	ldr	r1, [pc, #208]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  4015f8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4015fc:	680b      	ldr	r3, [r1, #0]
  4015fe:	40d3      	lsrs	r3, r2
  401600:	600b      	str	r3, [r1, #0]
  401602:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401604:	4b31      	ldr	r3, [pc, #196]	; (4016cc <SystemCoreClockUpdate+0xf8>)
  401606:	695b      	ldr	r3, [r3, #20]
  401608:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40160c:	bf14      	ite	ne
  40160e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401612:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401616:	4b2c      	ldr	r3, [pc, #176]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  401618:	601a      	str	r2, [r3, #0]
  40161a:	e7e4      	b.n	4015e6 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40161c:	4b29      	ldr	r3, [pc, #164]	; (4016c4 <SystemCoreClockUpdate+0xf0>)
  40161e:	6a1b      	ldr	r3, [r3, #32]
  401620:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401624:	d003      	beq.n	40162e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401626:	4a2a      	ldr	r2, [pc, #168]	; (4016d0 <SystemCoreClockUpdate+0xfc>)
  401628:	4b27      	ldr	r3, [pc, #156]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  40162a:	601a      	str	r2, [r3, #0]
  40162c:	e7db      	b.n	4015e6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40162e:	4a29      	ldr	r2, [pc, #164]	; (4016d4 <SystemCoreClockUpdate+0x100>)
  401630:	4b25      	ldr	r3, [pc, #148]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  401632:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401634:	4b23      	ldr	r3, [pc, #140]	; (4016c4 <SystemCoreClockUpdate+0xf0>)
  401636:	6a1b      	ldr	r3, [r3, #32]
  401638:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40163c:	2b10      	cmp	r3, #16
  40163e:	d005      	beq.n	40164c <SystemCoreClockUpdate+0x78>
  401640:	2b20      	cmp	r3, #32
  401642:	d1d0      	bne.n	4015e6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  401644:	4a22      	ldr	r2, [pc, #136]	; (4016d0 <SystemCoreClockUpdate+0xfc>)
  401646:	4b20      	ldr	r3, [pc, #128]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  401648:	601a      	str	r2, [r3, #0]
				break;
  40164a:	e7cc      	b.n	4015e6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  40164c:	4a22      	ldr	r2, [pc, #136]	; (4016d8 <SystemCoreClockUpdate+0x104>)
  40164e:	4b1e      	ldr	r3, [pc, #120]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  401650:	601a      	str	r2, [r3, #0]
				break;
  401652:	e7c8      	b.n	4015e6 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401654:	4b1b      	ldr	r3, [pc, #108]	; (4016c4 <SystemCoreClockUpdate+0xf0>)
  401656:	6a1b      	ldr	r3, [r3, #32]
  401658:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40165c:	d016      	beq.n	40168c <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40165e:	4a1c      	ldr	r2, [pc, #112]	; (4016d0 <SystemCoreClockUpdate+0xfc>)
  401660:	4b19      	ldr	r3, [pc, #100]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  401662:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  401664:	4b17      	ldr	r3, [pc, #92]	; (4016c4 <SystemCoreClockUpdate+0xf0>)
  401666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401668:	f003 0303 	and.w	r3, r3, #3
  40166c:	2b02      	cmp	r3, #2
  40166e:	d1ba      	bne.n	4015e6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401670:	4a14      	ldr	r2, [pc, #80]	; (4016c4 <SystemCoreClockUpdate+0xf0>)
  401672:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401674:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401676:	4814      	ldr	r0, [pc, #80]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401678:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40167c:	6803      	ldr	r3, [r0, #0]
  40167e:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401682:	b2d2      	uxtb	r2, r2
  401684:	fbb3 f3f2 	udiv	r3, r3, r2
  401688:	6003      	str	r3, [r0, #0]
  40168a:	e7ac      	b.n	4015e6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40168c:	4a11      	ldr	r2, [pc, #68]	; (4016d4 <SystemCoreClockUpdate+0x100>)
  40168e:	4b0e      	ldr	r3, [pc, #56]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  401690:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401692:	4b0c      	ldr	r3, [pc, #48]	; (4016c4 <SystemCoreClockUpdate+0xf0>)
  401694:	6a1b      	ldr	r3, [r3, #32]
  401696:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40169a:	2b10      	cmp	r3, #16
  40169c:	d005      	beq.n	4016aa <SystemCoreClockUpdate+0xd6>
  40169e:	2b20      	cmp	r3, #32
  4016a0:	d1e0      	bne.n	401664 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4016a2:	4a0b      	ldr	r2, [pc, #44]	; (4016d0 <SystemCoreClockUpdate+0xfc>)
  4016a4:	4b08      	ldr	r3, [pc, #32]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  4016a6:	601a      	str	r2, [r3, #0]
				break;
  4016a8:	e7dc      	b.n	401664 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4016aa:	4a0b      	ldr	r2, [pc, #44]	; (4016d8 <SystemCoreClockUpdate+0x104>)
  4016ac:	4b06      	ldr	r3, [pc, #24]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  4016ae:	601a      	str	r2, [r3, #0]
				break;
  4016b0:	e7d8      	b.n	401664 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4016b2:	4a05      	ldr	r2, [pc, #20]	; (4016c8 <SystemCoreClockUpdate+0xf4>)
  4016b4:	6813      	ldr	r3, [r2, #0]
  4016b6:	4909      	ldr	r1, [pc, #36]	; (4016dc <SystemCoreClockUpdate+0x108>)
  4016b8:	fba1 1303 	umull	r1, r3, r1, r3
  4016bc:	085b      	lsrs	r3, r3, #1
  4016be:	6013      	str	r3, [r2, #0]
  4016c0:	4770      	bx	lr
  4016c2:	bf00      	nop
  4016c4:	400e0400 	.word	0x400e0400
  4016c8:	20000014 	.word	0x20000014
  4016cc:	400e1810 	.word	0x400e1810
  4016d0:	00b71b00 	.word	0x00b71b00
  4016d4:	003d0900 	.word	0x003d0900
  4016d8:	007a1200 	.word	0x007a1200
  4016dc:	aaaaaaab 	.word	0xaaaaaaab

004016e0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4016e0:	4b12      	ldr	r3, [pc, #72]	; (40172c <system_init_flash+0x4c>)
  4016e2:	4298      	cmp	r0, r3
  4016e4:	d911      	bls.n	40170a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4016e6:	4b12      	ldr	r3, [pc, #72]	; (401730 <system_init_flash+0x50>)
  4016e8:	4298      	cmp	r0, r3
  4016ea:	d913      	bls.n	401714 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4016ec:	4b11      	ldr	r3, [pc, #68]	; (401734 <system_init_flash+0x54>)
  4016ee:	4298      	cmp	r0, r3
  4016f0:	d914      	bls.n	40171c <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4016f2:	4b11      	ldr	r3, [pc, #68]	; (401738 <system_init_flash+0x58>)
  4016f4:	4298      	cmp	r0, r3
  4016f6:	d915      	bls.n	401724 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4016f8:	4b10      	ldr	r3, [pc, #64]	; (40173c <system_init_flash+0x5c>)
  4016fa:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4016fc:	bf94      	ite	ls
  4016fe:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401702:	4a0f      	ldrhi	r2, [pc, #60]	; (401740 <system_init_flash+0x60>)
  401704:	4b0f      	ldr	r3, [pc, #60]	; (401744 <system_init_flash+0x64>)
  401706:	601a      	str	r2, [r3, #0]
  401708:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40170a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40170e:	4b0d      	ldr	r3, [pc, #52]	; (401744 <system_init_flash+0x64>)
  401710:	601a      	str	r2, [r3, #0]
  401712:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401714:	4a0c      	ldr	r2, [pc, #48]	; (401748 <system_init_flash+0x68>)
  401716:	4b0b      	ldr	r3, [pc, #44]	; (401744 <system_init_flash+0x64>)
  401718:	601a      	str	r2, [r3, #0]
  40171a:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40171c:	4a0b      	ldr	r2, [pc, #44]	; (40174c <system_init_flash+0x6c>)
  40171e:	4b09      	ldr	r3, [pc, #36]	; (401744 <system_init_flash+0x64>)
  401720:	601a      	str	r2, [r3, #0]
  401722:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401724:	4a0a      	ldr	r2, [pc, #40]	; (401750 <system_init_flash+0x70>)
  401726:	4b07      	ldr	r3, [pc, #28]	; (401744 <system_init_flash+0x64>)
  401728:	601a      	str	r2, [r3, #0]
  40172a:	4770      	bx	lr
  40172c:	01312cff 	.word	0x01312cff
  401730:	026259ff 	.word	0x026259ff
  401734:	039386ff 	.word	0x039386ff
  401738:	04c4b3ff 	.word	0x04c4b3ff
  40173c:	05f5e0ff 	.word	0x05f5e0ff
  401740:	04000500 	.word	0x04000500
  401744:	400e0a00 	.word	0x400e0a00
  401748:	04000100 	.word	0x04000100
  40174c:	04000200 	.word	0x04000200
  401750:	04000300 	.word	0x04000300

00401754 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401754:	4b0a      	ldr	r3, [pc, #40]	; (401780 <_sbrk+0x2c>)
  401756:	681b      	ldr	r3, [r3, #0]
  401758:	b153      	cbz	r3, 401770 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40175a:	4b09      	ldr	r3, [pc, #36]	; (401780 <_sbrk+0x2c>)
  40175c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40175e:	181a      	adds	r2, r3, r0
  401760:	4908      	ldr	r1, [pc, #32]	; (401784 <_sbrk+0x30>)
  401762:	4291      	cmp	r1, r2
  401764:	db08      	blt.n	401778 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401766:	4610      	mov	r0, r2
  401768:	4a05      	ldr	r2, [pc, #20]	; (401780 <_sbrk+0x2c>)
  40176a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40176c:	4618      	mov	r0, r3
  40176e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401770:	4a05      	ldr	r2, [pc, #20]	; (401788 <_sbrk+0x34>)
  401772:	4b03      	ldr	r3, [pc, #12]	; (401780 <_sbrk+0x2c>)
  401774:	601a      	str	r2, [r3, #0]
  401776:	e7f0      	b.n	40175a <_sbrk+0x6>
		return (caddr_t) -1;	
  401778:	f04f 30ff 	mov.w	r0, #4294967295
}
  40177c:	4770      	bx	lr
  40177e:	bf00      	nop
  401780:	20000928 	.word	0x20000928
  401784:	2001fffc 	.word	0x2001fffc
  401788:	2000fe70 	.word	0x2000fe70

0040178c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40178c:	f04f 30ff 	mov.w	r0, #4294967295
  401790:	4770      	bx	lr

00401792 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401796:	604b      	str	r3, [r1, #4]

	return 0;
}
  401798:	2000      	movs	r0, #0
  40179a:	4770      	bx	lr

0040179c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40179c:	2000      	movs	r0, #0
  40179e:	4770      	bx	lr

004017a0 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  4017a0:	b500      	push	{lr}
  4017a2:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  4017a4:	2201      	movs	r2, #1
  4017a6:	f10d 0107 	add.w	r1, sp, #7
  4017aa:	4810      	ldr	r0, [pc, #64]	; (4017ec <USART0_Handler+0x4c>)
  4017ac:	4b10      	ldr	r3, [pc, #64]	; (4017f0 <USART0_Handler+0x50>)
  4017ae:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4017b0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4017b2:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  4017b6:	2200      	movs	r2, #0
  4017b8:	4b0e      	ldr	r3, [pc, #56]	; (4017f4 <USART0_Handler+0x54>)
  4017ba:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  4017bc:	4b0e      	ldr	r3, [pc, #56]	; (4017f8 <USART0_Handler+0x58>)
  4017be:	781b      	ldrb	r3, [r3, #0]
  4017c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
  4017c4:	4a0d      	ldr	r2, [pc, #52]	; (4017fc <USART0_Handler+0x5c>)
  4017c6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  4017c8:	2b9b      	cmp	r3, #155	; 0x9b
  4017ca:	d00b      	beq.n	4017e4 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  4017cc:	3301      	adds	r3, #1
  4017ce:	4a0a      	ldr	r2, [pc, #40]	; (4017f8 <USART0_Handler+0x58>)
  4017d0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  4017d2:	2201      	movs	r2, #1
  4017d4:	4b07      	ldr	r3, [pc, #28]	; (4017f4 <USART0_Handler+0x54>)
  4017d6:	701a      	strb	r2, [r3, #0]
  4017d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4017dc:	b662      	cpsie	i
}
  4017de:	b003      	add	sp, #12
  4017e0:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  4017e4:	2200      	movs	r2, #0
  4017e6:	4b04      	ldr	r3, [pc, #16]	; (4017f8 <USART0_Handler+0x58>)
  4017e8:	701a      	strb	r2, [r3, #0]
  4017ea:	e7f2      	b.n	4017d2 <USART0_Handler+0x32>
  4017ec:	400a0000 	.word	0x400a0000
  4017f0:	00400cc5 	.word	0x00400cc5
  4017f4:	20000010 	.word	0x20000010
  4017f8:	200009c8 	.word	0x200009c8
  4017fc:	2000092c 	.word	0x2000092c

00401800 <addSampleCollector>:

/* Add sample to the signal buffer */

void addSampleCollector(uint16_t sample){
	
	if (bufferIndexCollector<buffersize)
  401800:	4b07      	ldr	r3, [pc, #28]	; (401820 <addSampleCollector+0x20>)
  401802:	881b      	ldrh	r3, [r3, #0]
  401804:	f242 028d 	movw	r2, #8333	; 0x208d
  401808:	4293      	cmp	r3, r2
  40180a:	d807      	bhi.n	40181c <addSampleCollector+0x1c>
	{
		afec_buffer_collector[bufferIndexCollector]= sample;
  40180c:	4a05      	ldr	r2, [pc, #20]	; (401824 <addSampleCollector+0x24>)
  40180e:	6812      	ldr	r2, [r2, #0]
  401810:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
		bufferIndexCollector++;
  401814:	4a02      	ldr	r2, [pc, #8]	; (401820 <addSampleCollector+0x20>)
  401816:	8813      	ldrh	r3, [r2, #0]
  401818:	3301      	adds	r3, #1
  40181a:	8013      	strh	r3, [r2, #0]
  40181c:	4770      	bx	lr
  40181e:	bf00      	nop
  401820:	2000cd20 	.word	0x2000cd20
  401824:	20000018 	.word	0x20000018

00401828 <switchBuffer>:
/* Buffer switch operation, signal buffer and algorithm are switched. 
   If 16 buffers have been filled, the contents of the algorithm buffer are switched to the transmit buffer. */

volatile void switchBuffer(void){
	
	buffersFilled++;
  401828:	4b0d      	ldr	r3, [pc, #52]	; (401860 <switchBuffer+0x38>)
  40182a:	881b      	ldrh	r3, [r3, #0]
  40182c:	3301      	adds	r3, #1
  40182e:	b29b      	uxth	r3, r3
	if (buffersFilled>16)
  401830:	2b10      	cmp	r3, #16
  401832:	d80b      	bhi.n	40184c <switchBuffer+0x24>
	buffersFilled++;
  401834:	4a0a      	ldr	r2, [pc, #40]	; (401860 <switchBuffer+0x38>)
  401836:	8013      	strh	r3, [r2, #0]
	{
		buffersFilled=0; 
		swap(&algorithm_buffer, &transmit_buffer);
	} 
	
	bufferIndexCollector=0;
  401838:	2200      	movs	r2, #0
  40183a:	4b0a      	ldr	r3, [pc, #40]	; (401864 <switchBuffer+0x3c>)
  40183c:	801a      	strh	r2, [r3, #0]
	uint16_t* temp = *x;
  40183e:	4a0a      	ldr	r2, [pc, #40]	; (401868 <switchBuffer+0x40>)
  401840:	6811      	ldr	r1, [r2, #0]
	*x=*y;
  401842:	4b0a      	ldr	r3, [pc, #40]	; (40186c <switchBuffer+0x44>)
  401844:	6818      	ldr	r0, [r3, #0]
  401846:	6010      	str	r0, [r2, #0]
	*y=temp;
  401848:	6019      	str	r1, [r3, #0]
  40184a:	4770      	bx	lr
		buffersFilled=0; 
  40184c:	2200      	movs	r2, #0
  40184e:	4b04      	ldr	r3, [pc, #16]	; (401860 <switchBuffer+0x38>)
  401850:	801a      	strh	r2, [r3, #0]
	uint16_t* temp = *x;
  401852:	4a06      	ldr	r2, [pc, #24]	; (40186c <switchBuffer+0x44>)
  401854:	6811      	ldr	r1, [r2, #0]
	*x=*y;
  401856:	4b06      	ldr	r3, [pc, #24]	; (401870 <switchBuffer+0x48>)
  401858:	6818      	ldr	r0, [r3, #0]
  40185a:	6010      	str	r0, [r2, #0]
	*y=temp;
  40185c:	6019      	str	r1, [r3, #0]
  40185e:	e7eb      	b.n	401838 <switchBuffer+0x10>
  401860:	2000cd22 	.word	0x2000cd22
  401864:	2000cd20 	.word	0x2000cd20
  401868:	20000018 	.word	0x20000018
  40186c:	2000001c 	.word	0x2000001c
  401870:	20000020 	.word	0x20000020

00401874 <cycleEnded>:
	
}

/* Fills possible gap at the end of the signal buffer with zeros, and performs the buffer pointer switch */

void cycleEnded(void){
  401874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	if (bufferIndexCollector < buffersize)
  401876:	4b0a      	ldr	r3, [pc, #40]	; (4018a0 <cycleEnded+0x2c>)
  401878:	881b      	ldrh	r3, [r3, #0]
  40187a:	f242 028d 	movw	r2, #8333	; 0x208d
  40187e:	4293      	cmp	r3, r2
  401880:	d80a      	bhi.n	401898 <cycleEnded+0x24>
	{
		for (int i=bufferIndexCollector;i<buffersize;i++)
  401882:	461c      	mov	r4, r3
  401884:	dc08      	bgt.n	401898 <cycleEnded+0x24>
		{
			addSampleCollector(0);
  401886:	2700      	movs	r7, #0
  401888:	4e06      	ldr	r6, [pc, #24]	; (4018a4 <cycleEnded+0x30>)
		for (int i=bufferIndexCollector;i<buffersize;i++)
  40188a:	f242 058e 	movw	r5, #8334	; 0x208e
			addSampleCollector(0);
  40188e:	4638      	mov	r0, r7
  401890:	47b0      	blx	r6
		for (int i=bufferIndexCollector;i<buffersize;i++)
  401892:	3401      	adds	r4, #1
  401894:	42ac      	cmp	r4, r5
  401896:	d1fa      	bne.n	40188e <cycleEnded+0x1a>
		}
	} 
	
	switchBuffer();
  401898:	4b03      	ldr	r3, [pc, #12]	; (4018a8 <cycleEnded+0x34>)
  40189a:	4798      	blx	r3
  40189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40189e:	bf00      	nop
  4018a0:	2000cd20 	.word	0x2000cd20
  4018a4:	00401801 	.word	0x00401801
  4018a8:	00401829 	.word	0x00401829

004018ac <collector_data_ready>:


/* AFEC0 interrupt callback function. */

static void collector_data_ready(void)
{
  4018ac:	b508      	push	{r3, lr}
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  4018ae:	4b04      	ldr	r3, [pc, #16]	; (4018c0 <collector_data_ready+0x14>)
  4018b0:	6a18      	ldr	r0, [r3, #32]
	collector_sample_data = afec_get_latest_value(AFEC0);										// Obtain latest sample from COLLECTOR signal (EXT3 - pin4 (ch6))
  4018b2:	b280      	uxth	r0, r0
  4018b4:	4b03      	ldr	r3, [pc, #12]	; (4018c4 <collector_data_ready+0x18>)
  4018b6:	8018      	strh	r0, [r3, #0]
	addSampleCollector(collector_sample_data);													// Add the sample to the collector signal buffer
  4018b8:	4b03      	ldr	r3, [pc, #12]	; (4018c8 <collector_data_ready+0x1c>)
  4018ba:	4798      	blx	r3
  4018bc:	bd08      	pop	{r3, pc}
  4018be:	bf00      	nop
  4018c0:	400b0000 	.word	0x400b0000
  4018c4:	2000cd24 	.word	0x2000cd24
  4018c8:	00401801 	.word	0x00401801

004018cc <ACC_Handler>:
{
  4018cc:	b570      	push	{r4, r5, r6, lr}
  4018ce:	b084      	sub	sp, #16
	triggerOffset = config[0];												// Obtain the trigger offset from configuration array
  4018d0:	4b35      	ldr	r3, [pc, #212]	; (4019a8 <ACC_Handler+0xdc>)
  4018d2:	781b      	ldrb	r3, [r3, #0]
	if (triggerOffset > 67) triggerOffset = 67;								// Set trigger offset to 67 if larger (upper limit of one cycle)
  4018d4:	2b43      	cmp	r3, #67	; 0x43
  4018d6:	d809      	bhi.n	4018ec <ACC_Handler+0x20>
	triggerOffset = config[0];												// Obtain the trigger offset from configuration array
  4018d8:	4a34      	ldr	r2, [pc, #208]	; (4019ac <ACC_Handler+0xe0>)
  4018da:	7013      	strb	r3, [r2, #0]
	ul_status = acc_get_interrupt_status(ACC);								
  4018dc:	4834      	ldr	r0, [pc, #208]	; (4019b0 <ACC_Handler+0xe4>)
  4018de:	4b35      	ldr	r3, [pc, #212]	; (4019b4 <ACC_Handler+0xe8>)
  4018e0:	4798      	blx	r3
	if ((ul_status & ACC_ISR_CE) == ACC_ISR_CE) 
  4018e2:	f010 0f01 	tst.w	r0, #1
  4018e6:	d105      	bne.n	4018f4 <ACC_Handler+0x28>
}
  4018e8:	b004      	add	sp, #16
  4018ea:	bd70      	pop	{r4, r5, r6, pc}
	if (triggerOffset > 67) triggerOffset = 67;								// Set trigger offset to 67 if larger (upper limit of one cycle)
  4018ec:	2243      	movs	r2, #67	; 0x43
  4018ee:	4b2f      	ldr	r3, [pc, #188]	; (4019ac <ACC_Handler+0xe0>)
  4018f0:	701a      	strb	r2, [r3, #0]
  4018f2:	e7f3      	b.n	4018dc <ACC_Handler+0x10>
		if (acc_get_comparison_result(ACC))									// check if Vin+ > Vin-
  4018f4:	482e      	ldr	r0, [pc, #184]	; (4019b0 <ACC_Handler+0xe4>)
  4018f6:	4b30      	ldr	r3, [pc, #192]	; (4019b8 <ACC_Handler+0xec>)
  4018f8:	4798      	blx	r3
  4018fa:	2800      	cmp	r0, #0
  4018fc:	d04b      	beq.n	401996 <ACC_Handler+0xca>
			if(!triggered)
  4018fe:	4b2f      	ldr	r3, [pc, #188]	; (4019bc <ACC_Handler+0xf0>)
  401900:	781b      	ldrb	r3, [r3, #0]
  401902:	2b00      	cmp	r3, #0
  401904:	d1f0      	bne.n	4018e8 <ACC_Handler+0x1c>
				triggered= true;											
  401906:	2301      	movs	r3, #1
  401908:	4a2c      	ldr	r2, [pc, #176]	; (4019bc <ACC_Handler+0xf0>)
  40190a:	7013      	strb	r3, [r2, #0]
				fullBuffer=true;											
  40190c:	4a2c      	ldr	r2, [pc, #176]	; (4019c0 <ACC_Handler+0xf4>)
  40190e:	7013      	strb	r3, [r2, #0]
				if(triggerOffset == 0)
  401910:	4b26      	ldr	r3, [pc, #152]	; (4019ac <ACC_Handler+0xe0>)
  401912:	781a      	ldrb	r2, [r3, #0]
  401914:	b932      	cbnz	r2, 401924 <ACC_Handler+0x58>
					tc_start(TC0,0);
  401916:	2100      	movs	r1, #0
  401918:	482a      	ldr	r0, [pc, #168]	; (4019c4 <ACC_Handler+0xf8>)
  40191a:	4b2b      	ldr	r3, [pc, #172]	; (4019c8 <ACC_Handler+0xfc>)
  40191c:	4798      	blx	r3
					cycleEnded();											// performs the buffer pointer switch 
  40191e:	4b2b      	ldr	r3, [pc, #172]	; (4019cc <ACC_Handler+0x100>)
  401920:	4798      	blx	r3
  401922:	e7e1      	b.n	4018e8 <ACC_Handler+0x1c>
/* Configure a delay timer to create the desired phase offset configured by the operator */

static void setDelayTimer(int delayFreq){
	
	uint32_t ul_sysclk = sysclk_get_cpu_hz();											
	uint32_t ul_div=0;
  401924:	2100      	movs	r1, #0
  401926:	9102      	str	r1, [sp, #8]
	uint32_t ul_tc_clks=0;
  401928:	ab04      	add	r3, sp, #16
  40192a:	f843 1d04 	str.w	r1, [r3, #-4]!
					setDelayTimer(1000/triggerOffset);						// set the delay timer frequency based on trigger delay time
  40192e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  401932:	fb96 f6f2 	sdiv	r6, r6, r2
	uint32_t counts=0;
	tc_find_mck_divisor(delayFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  401936:	4c26      	ldr	r4, [pc, #152]	; (4019d0 <ACC_Handler+0x104>)
  401938:	9400      	str	r4, [sp, #0]
  40193a:	aa02      	add	r2, sp, #8
  40193c:	4621      	mov	r1, r4
  40193e:	4630      	mov	r0, r6
  401940:	4d24      	ldr	r5, [pc, #144]	; (4019d4 <ACC_Handler+0x108>)
  401942:	47a8      	blx	r5
	tc_init(TC0,1,ul_tc_clks | TC_CMR_CPCTRG);
  401944:	4d1f      	ldr	r5, [pc, #124]	; (4019c4 <ACC_Handler+0xf8>)
  401946:	9a03      	ldr	r2, [sp, #12]
  401948:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40194c:	2101      	movs	r1, #1
  40194e:	4628      	mov	r0, r5
  401950:	4b21      	ldr	r3, [pc, #132]	; (4019d8 <ACC_Handler+0x10c>)
  401952:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/delayFreq;
  401954:	9a02      	ldr	r2, [sp, #8]
  401956:	fbb4 f2f2 	udiv	r2, r4, r2
	tc_write_rc(TC0,1,counts);
  40195a:	fbb2 f2f6 	udiv	r2, r2, r6
  40195e:	2101      	movs	r1, #1
  401960:	4628      	mov	r0, r5
  401962:	4b1e      	ldr	r3, [pc, #120]	; (4019dc <ACC_Handler+0x110>)
  401964:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401966:	4b1e      	ldr	r3, [pc, #120]	; (4019e0 <ACC_Handler+0x114>)
  401968:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
  40196c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  401970:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401974:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401978:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40197c:	601c      	str	r4, [r3, #0]
	
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	NVIC_EnableIRQ((IRQn_Type) ID_TC1);
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
  40197e:	2210      	movs	r2, #16
  401980:	2101      	movs	r1, #1
  401982:	4628      	mov	r0, r5
  401984:	4b17      	ldr	r3, [pc, #92]	; (4019e4 <ACC_Handler+0x118>)
  401986:	4798      	blx	r3
					tc_start(TC0,1);
  401988:	2101      	movs	r1, #1
  40198a:	4628      	mov	r0, r5
  40198c:	4b0e      	ldr	r3, [pc, #56]	; (4019c8 <ACC_Handler+0xfc>)
  40198e:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401990:	4b15      	ldr	r3, [pc, #84]	; (4019e8 <ACC_Handler+0x11c>)
  401992:	635c      	str	r4, [r3, #52]	; 0x34
  401994:	e7a8      	b.n	4018e8 <ACC_Handler+0x1c>
			if(triggered)
  401996:	4b09      	ldr	r3, [pc, #36]	; (4019bc <ACC_Handler+0xf0>)
  401998:	781b      	ldrb	r3, [r3, #0]
  40199a:	2b00      	cmp	r3, #0
  40199c:	d0a4      	beq.n	4018e8 <ACC_Handler+0x1c>
			triggered=false;
  40199e:	2200      	movs	r2, #0
  4019a0:	4b06      	ldr	r3, [pc, #24]	; (4019bc <ACC_Handler+0xf0>)
  4019a2:	701a      	strb	r2, [r3, #0]
}
  4019a4:	e7a0      	b.n	4018e8 <ACC_Handler+0x1c>
  4019a6:	bf00      	nop
  4019a8:	2000091c 	.word	0x2000091c
  4019ac:	2000cd27 	.word	0x2000cd27
  4019b0:	400bc000 	.word	0x400bc000
  4019b4:	00400edd 	.word	0x00400edd
  4019b8:	00400ec3 	.word	0x00400ec3
  4019bc:	2000cd28 	.word	0x2000cd28
  4019c0:	2000cd26 	.word	0x2000cd26
  4019c4:	40090000 	.word	0x40090000
  4019c8:	004013c7 	.word	0x004013c7
  4019cc:	00401875 	.word	0x00401875
  4019d0:	05b8d800 	.word	0x05b8d800
  4019d4:	004013ef 	.word	0x004013ef
  4019d8:	004013ad 	.word	0x004013ad
  4019dc:	004013d7 	.word	0x004013d7
  4019e0:	e000e100 	.word	0xe000e100
  4019e4:	004013df 	.word	0x004013df
  4019e8:	400e1400 	.word	0x400e1400

004019ec <TC1_Handler>:
void TC1_Handler(void){
  4019ec:	b510      	push	{r4, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  4019f2:	4a0e      	ldr	r2, [pc, #56]	; (401a2c <TC1_Handler+0x40>)
  4019f4:	6313      	str	r3, [r2, #48]	; 0x30
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4019f6:	4a0e      	ldr	r2, [pc, #56]	; (401a30 <TC1_Handler+0x44>)
  4019f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4019fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401a00:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a04:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	tc_disable_interrupt(TC0, 1, TC_IER_CPCS);
  401a08:	4c0a      	ldr	r4, [pc, #40]	; (401a34 <TC1_Handler+0x48>)
  401a0a:	2210      	movs	r2, #16
  401a0c:	2101      	movs	r1, #1
  401a0e:	4620      	mov	r0, r4
  401a10:	4b09      	ldr	r3, [pc, #36]	; (401a38 <TC1_Handler+0x4c>)
  401a12:	4798      	blx	r3
	tc_stop(TC0,1);
  401a14:	2101      	movs	r1, #1
  401a16:	4620      	mov	r0, r4
  401a18:	4b08      	ldr	r3, [pc, #32]	; (401a3c <TC1_Handler+0x50>)
  401a1a:	4798      	blx	r3
	cycleEnded();
  401a1c:	4b08      	ldr	r3, [pc, #32]	; (401a40 <TC1_Handler+0x54>)
  401a1e:	4798      	blx	r3
	tc_start(TC0,0);
  401a20:	2100      	movs	r1, #0
  401a22:	4620      	mov	r0, r4
  401a24:	4b07      	ldr	r3, [pc, #28]	; (401a44 <TC1_Handler+0x58>)
  401a26:	4798      	blx	r3
  401a28:	bd10      	pop	{r4, pc}
  401a2a:	bf00      	nop
  401a2c:	400e1400 	.word	0x400e1400
  401a30:	e000e100 	.word	0xe000e100
  401a34:	40090000 	.word	0x40090000
  401a38:	004013e7 	.word	0x004013e7
  401a3c:	004013cf 	.word	0x004013cf
  401a40:	00401875 	.word	0x00401875
  401a44:	004013c7 	.word	0x004013c7

00401a48 <main>:
}

/* Main entry point of the application */

int main (void)
{
  401a48:	b580      	push	{r7, lr}
  401a4a:	b08c      	sub	sp, #48	; 0x30
	/* Initializations of peripherals */
	
	sysclk_init();
  401a4c:	4b57      	ldr	r3, [pc, #348]	; (401bac <main+0x164>)
  401a4e:	4798      	blx	r3
	board_init();
  401a50:	4b57      	ldr	r3, [pc, #348]	; (401bb0 <main+0x168>)
  401a52:	4798      	blx	r3
	pdc_uart_initialization();
  401a54:	4b57      	ldr	r3, [pc, #348]	; (401bb4 <main+0x16c>)
  401a56:	4798      	blx	r3
	afec_enable(AFEC0);
  401a58:	4c57      	ldr	r4, [pc, #348]	; (401bb8 <main+0x170>)
  401a5a:	4620      	mov	r0, r4
  401a5c:	4b57      	ldr	r3, [pc, #348]	; (401bbc <main+0x174>)
  401a5e:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  401a60:	a805      	add	r0, sp, #20
  401a62:	4b57      	ldr	r3, [pc, #348]	; (401bc0 <main+0x178>)
  401a64:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  401a66:	a802      	add	r0, sp, #8
  401a68:	4b56      	ldr	r3, [pc, #344]	; (401bc4 <main+0x17c>)
  401a6a:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  401a6c:	a905      	add	r1, sp, #20
  401a6e:	4620      	mov	r0, r4
  401a70:	4b55      	ldr	r3, [pc, #340]	; (401bc8 <main+0x180>)
  401a72:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  401a74:	aa02      	add	r2, sp, #8
  401a76:	2106      	movs	r1, #6
  401a78:	4620      	mov	r0, r4
  401a7a:	4b54      	ldr	r3, [pc, #336]	; (401bcc <main+0x184>)
  401a7c:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  401a7e:	2306      	movs	r3, #6
  401a80:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  401a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401a86:	66e3      	str	r3, [r4, #108]	; 0x6c
    uint32_t ul_div = 0;
  401a88:	2700      	movs	r7, #0
  401a8a:	9703      	str	r7, [sp, #12]
	uint32_t ul_tc_clks = 0;
  401a8c:	ae0c      	add	r6, sp, #48	; 0x30
  401a8e:	f846 7d20 	str.w	r7, [r6, #-32]!
	pmc_enable_periph_clk(ID_TC0);														// Enable peripheral clock of timer counter 0
  401a92:	2015      	movs	r0, #21
  401a94:	4d4e      	ldr	r5, [pc, #312]	; (401bd0 <main+0x188>)
  401a96:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_TC1);
  401a98:	2016      	movs	r0, #22
  401a9a:	47a8      	blx	r5
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  401a9c:	4d4d      	ldr	r5, [pc, #308]	; (401bd4 <main+0x18c>)
  401a9e:	9500      	str	r5, [sp, #0]
  401aa0:	4633      	mov	r3, r6
  401aa2:	aa03      	add	r2, sp, #12
  401aa4:	4629      	mov	r1, r5
  401aa6:	484c      	ldr	r0, [pc, #304]	; (401bd8 <main+0x190>)
  401aa8:	4e4c      	ldr	r6, [pc, #304]	; (401bdc <main+0x194>)
  401aaa:	47b0      	blx	r6
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  401aac:	4e4c      	ldr	r6, [pc, #304]	; (401be0 <main+0x198>)
  401aae:	9a04      	ldr	r2, [sp, #16]
  401ab0:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  401ab4:	4639      	mov	r1, r7
  401ab6:	4630      	mov	r0, r6
  401ab8:	4b4a      	ldr	r3, [pc, #296]	; (401be4 <main+0x19c>)
  401aba:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  401abc:	9b03      	ldr	r3, [sp, #12]
  401abe:	fbb5 f3f3 	udiv	r3, r5, r3
  401ac2:	4a49      	ldr	r2, [pc, #292]	; (401be8 <main+0x1a0>)
  401ac4:	fba2 2303 	umull	r2, r3, r2, r3
  401ac8:	0c1a      	lsrs	r2, r3, #16
  401aca:	6172      	str	r2, [r6, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  401acc:	0bdb      	lsrs	r3, r3, #15
  401ace:	61f3      	str	r3, [r6, #28]
	reg = afec->AFEC_MR;
  401ad0:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  401ad2:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  401ad6:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  401ada:	6063      	str	r3, [r4, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401adc:	2340      	movs	r3, #64	; 0x40
  401ade:	6163      	str	r3, [r4, #20]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, collector_data_ready, 1);
  401ae0:	2301      	movs	r3, #1
  401ae2:	4a42      	ldr	r2, [pc, #264]	; (401bec <main+0x1a4>)
  401ae4:	2110      	movs	r1, #16
  401ae6:	4620      	mov	r0, r4
  401ae8:	4d41      	ldr	r5, [pc, #260]	; (401bf0 <main+0x1a8>)
  401aea:	47a8      	blx	r5
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  401aec:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  401aee:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  401af0:	6863      	ldr	r3, [r4, #4]
  401af2:	f013 0f80 	tst.w	r3, #128	; 0x80
  401af6:	d101      	bne.n	401afc <main+0xb4>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  401af8:	2208      	movs	r2, #8
  401afa:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  401afc:	4b2e      	ldr	r3, [pc, #184]	; (401bb8 <main+0x170>)
  401afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  401b00:	2a00      	cmp	r2, #0
  401b02:	dafc      	bge.n	401afe <main+0xb6>
	pmc_enable_periph_clk(ID_DACC);
  401b04:	2020      	movs	r0, #32
  401b06:	4d32      	ldr	r5, [pc, #200]	; (401bd0 <main+0x188>)
  401b08:	47a8      	blx	r5
	dacc_reset(DACC);
  401b0a:	4c3a      	ldr	r4, [pc, #232]	; (401bf4 <main+0x1ac>)
  401b0c:	4620      	mov	r0, r4
  401b0e:	4b3a      	ldr	r3, [pc, #232]	; (401bf8 <main+0x1b0>)
  401b10:	4798      	blx	r3
	dacc_disable_trigger(DACC);
  401b12:	4620      	mov	r0, r4
  401b14:	4b39      	ldr	r3, [pc, #228]	; (401bfc <main+0x1b4>)
  401b16:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
  401b18:	2100      	movs	r1, #0
  401b1a:	4620      	mov	r0, r4
  401b1c:	4b38      	ldr	r3, [pc, #224]	; (401c00 <main+0x1b8>)
  401b1e:	4798      	blx	r3
	dacc_set_timing(DACC, 0, 0xf);
  401b20:	220f      	movs	r2, #15
  401b22:	2100      	movs	r1, #0
  401b24:	4620      	mov	r0, r4
  401b26:	4b37      	ldr	r3, [pc, #220]	; (401c04 <main+0x1bc>)
  401b28:	4798      	blx	r3
	dacc_set_channel_selection(DACC, DACC_CHANNEL_0);
  401b2a:	2100      	movs	r1, #0
  401b2c:	4620      	mov	r0, r4
  401b2e:	4b36      	ldr	r3, [pc, #216]	; (401c08 <main+0x1c0>)
  401b30:	4798      	blx	r3
	dacc_enable_channel(DACC, DACC_CHANNEL_0);
  401b32:	2100      	movs	r1, #0
  401b34:	4620      	mov	r0, r4
  401b36:	4b35      	ldr	r3, [pc, #212]	; (401c0c <main+0x1c4>)
  401b38:	4798      	blx	r3
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  401b3a:	f44f 7185 	mov.w	r1, #266	; 0x10a
  401b3e:	4620      	mov	r0, r4
  401b40:	4b33      	ldr	r3, [pc, #204]	; (401c10 <main+0x1c8>)
  401b42:	4798      	blx	r3
	dacc_write_conversion_data(DACC, 3100);
  401b44:	f640 411c 	movw	r1, #3100	; 0xc1c
  401b48:	4620      	mov	r0, r4
  401b4a:	4b32      	ldr	r3, [pc, #200]	; (401c14 <main+0x1cc>)
  401b4c:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401b4e:	4b32      	ldr	r3, [pc, #200]	; (401c18 <main+0x1d0>)
  401b50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401b54:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	configure_afec();
	configureDACC();
	ioport_set_pin_dir(delayPin,IOPORT_DIR_OUTPUT);
	pmc_enable_periph_clk(ID_ACC);
  401b5a:	2021      	movs	r0, #33	; 0x21
  401b5c:	47a8      	blx	r5
	acc_init(ACC, ACC_MR_SELPLUS_AD7, ACC_MR_SELMINUS_DAC0,			// set pin AFEC1 AD1 (EXT1 pin 4) as + comparator and DAC channel 0 as -
  401b5e:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
  401b62:	2300      	movs	r3, #0
  401b64:	9300      	str	r3, [sp, #0]
  401b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401b6a:	2202      	movs	r2, #2
  401b6c:	2170      	movs	r1, #112	; 0x70
  401b6e:	4620      	mov	r0, r4
  401b70:	4d2a      	ldr	r5, [pc, #168]	; (401c1c <main+0x1d4>)
  401b72:	47a8      	blx	r5
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b74:	2202      	movs	r2, #2
  401b76:	4b2a      	ldr	r3, [pc, #168]	; (401c20 <main+0x1d8>)
  401b78:	605a      	str	r2, [r3, #4]
	ACC_MR_EDGETYP_ANY, ACC_MR_INV_DIS);
	NVIC_EnableIRQ(ACC_IRQn);
	acc_enable_interrupt(ACC);	
  401b7a:	4620      	mov	r0, r4
  401b7c:	4b29      	ldr	r3, [pc, #164]	; (401c24 <main+0x1dc>)
  401b7e:	4798      	blx	r3
	/* Main event loop, polling for asynchronous data requests from Matlab application*/
	
	while (1) 
	{
		
		if(fullBuffer)												// flag that indicates a cycle has ended
  401b80:	4c29      	ldr	r4, [pc, #164]	; (401c28 <main+0x1e0>)
		{
			fullBuffer=false;
			
			/* Compute the parameters corresponding to this cycle*/
			compute_beam_parameters();
  401b82:	4e2a      	ldr	r6, [pc, #168]	; (401c2c <main+0x1e4>)
			
			/* Check if data has to be send */
			if (config[2]!= 0) send_beam_parameters();
  401b84:	4d2a      	ldr	r5, [pc, #168]	; (401c30 <main+0x1e8>)
  401b86:	e001      	b.n	401b8c <main+0x144>
  401b88:	4b2a      	ldr	r3, [pc, #168]	; (401c34 <main+0x1ec>)
  401b8a:	4798      	blx	r3
		if(fullBuffer)												// flag that indicates a cycle has ended
  401b8c:	7823      	ldrb	r3, [r4, #0]
  401b8e:	2b00      	cmp	r3, #0
  401b90:	d0fc      	beq.n	401b8c <main+0x144>
			fullBuffer=false;
  401b92:	2300      	movs	r3, #0
  401b94:	7023      	strb	r3, [r4, #0]
			compute_beam_parameters();
  401b96:	47b0      	blx	r6
			if (config[2]!= 0) send_beam_parameters();
  401b98:	78ab      	ldrb	r3, [r5, #2]
  401b9a:	2b00      	cmp	r3, #0
  401b9c:	d1f4      	bne.n	401b88 <main+0x140>
			else if (config[3]!= 0) send_cycle_plot();
  401b9e:	78eb      	ldrb	r3, [r5, #3]
  401ba0:	2b00      	cmp	r3, #0
  401ba2:	d0f3      	beq.n	401b8c <main+0x144>
  401ba4:	4b24      	ldr	r3, [pc, #144]	; (401c38 <main+0x1f0>)
  401ba6:	4798      	blx	r3
  401ba8:	e7f0      	b.n	401b8c <main+0x144>
  401baa:	bf00      	nop
  401bac:	00400c5d 	.word	0x00400c5d
  401bb0:	00400df1 	.word	0x00400df1
  401bb4:	00400bcd 	.word	0x00400bcd
  401bb8:	400b0000 	.word	0x400b0000
  401bbc:	00401175 	.word	0x00401175
  401bc0:	00400fad 	.word	0x00400fad
  401bc4:	00400fdd 	.word	0x00400fdd
  401bc8:	00400fe9 	.word	0x00400fe9
  401bcc:	00400f7d 	.word	0x00400f7d
  401bd0:	00401359 	.word	0x00401359
  401bd4:	05b8d800 	.word	0x05b8d800
  401bd8:	0001e848 	.word	0x0001e848
  401bdc:	004013ef 	.word	0x004013ef
  401be0:	40090000 	.word	0x40090000
  401be4:	004013ad 	.word	0x004013ad
  401be8:	431bde83 	.word	0x431bde83
  401bec:	004018ad 	.word	0x004018ad
  401bf0:	004010f5 	.word	0x004010f5
  401bf4:	400b8000 	.word	0x400b8000
  401bf8:	004011d9 	.word	0x004011d9
  401bfc:	004011df 	.word	0x004011df
  401c00:	004011e9 	.word	0x004011e9
  401c04:	0040122d 	.word	0x0040122d
  401c08:	00401215 	.word	0x00401215
  401c0c:	00401255 	.word	0x00401255
  401c10:	00401269 	.word	0x00401269
  401c14:	00401211 	.word	0x00401211
  401c18:	400e1400 	.word	0x400e1400
  401c1c:	00400e89 	.word	0x00400e89
  401c20:	e000e100 	.word	0xe000e100
  401c24:	00400ed7 	.word	0x00400ed7
  401c28:	2000cd26 	.word	0x2000cd26
  401c2c:	00400811 	.word	0x00400811
  401c30:	2000091c 	.word	0x2000091c
  401c34:	00400b31 	.word	0x00400b31
  401c38:	00400b09 	.word	0x00400b09

00401c3c <pow>:
  401c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c40:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 401f34 <pow+0x2f8>
  401c44:	b08d      	sub	sp, #52	; 0x34
  401c46:	4606      	mov	r6, r0
  401c48:	460f      	mov	r7, r1
  401c4a:	4614      	mov	r4, r2
  401c4c:	461d      	mov	r5, r3
  401c4e:	f000 f9d3 	bl	401ff8 <__ieee754_pow>
  401c52:	f999 8000 	ldrsb.w	r8, [r9]
  401c56:	f1b8 3fff 	cmp.w	r8, #4294967295
  401c5a:	e9cd 0100 	strd	r0, r1, [sp]
  401c5e:	d036      	beq.n	401cce <pow+0x92>
  401c60:	4622      	mov	r2, r4
  401c62:	462b      	mov	r3, r5
  401c64:	4620      	mov	r0, r4
  401c66:	4629      	mov	r1, r5
  401c68:	f001 fd3e 	bl	4036e8 <__aeabi_dcmpun>
  401c6c:	4683      	mov	fp, r0
  401c6e:	bb70      	cbnz	r0, 401cce <pow+0x92>
  401c70:	4632      	mov	r2, r6
  401c72:	463b      	mov	r3, r7
  401c74:	4630      	mov	r0, r6
  401c76:	4639      	mov	r1, r7
  401c78:	f001 fd36 	bl	4036e8 <__aeabi_dcmpun>
  401c7c:	2200      	movs	r2, #0
  401c7e:	4682      	mov	sl, r0
  401c80:	2300      	movs	r3, #0
  401c82:	2800      	cmp	r0, #0
  401c84:	f040 80a0 	bne.w	401dc8 <pow+0x18c>
  401c88:	4630      	mov	r0, r6
  401c8a:	4639      	mov	r1, r7
  401c8c:	f001 fcfa 	bl	403684 <__aeabi_dcmpeq>
  401c90:	b310      	cbz	r0, 401cd8 <pow+0x9c>
  401c92:	2200      	movs	r2, #0
  401c94:	2300      	movs	r3, #0
  401c96:	4620      	mov	r0, r4
  401c98:	4629      	mov	r1, r5
  401c9a:	f001 fcf3 	bl	403684 <__aeabi_dcmpeq>
  401c9e:	4683      	mov	fp, r0
  401ca0:	2800      	cmp	r0, #0
  401ca2:	d06a      	beq.n	401d7a <pow+0x13e>
  401ca4:	2201      	movs	r2, #1
  401ca6:	4b9c      	ldr	r3, [pc, #624]	; (401f18 <pow+0x2dc>)
  401ca8:	9202      	str	r2, [sp, #8]
  401caa:	2100      	movs	r1, #0
  401cac:	2200      	movs	r2, #0
  401cae:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  401cb2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401cb6:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401cba:	e9cd 1208 	strd	r1, r2, [sp, #32]
  401cbe:	9303      	str	r3, [sp, #12]
  401cc0:	f1b8 0f00 	cmp.w	r8, #0
  401cc4:	d045      	beq.n	401d52 <pow+0x116>
  401cc6:	4c95      	ldr	r4, [pc, #596]	; (401f1c <pow+0x2e0>)
  401cc8:	2300      	movs	r3, #0
  401cca:	e9cd 3400 	strd	r3, r4, [sp]
  401cce:	e9dd 0100 	ldrd	r0, r1, [sp]
  401cd2:	b00d      	add	sp, #52	; 0x34
  401cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cd8:	e9dd 0100 	ldrd	r0, r1, [sp]
  401cdc:	f000 ff92 	bl	402c04 <finite>
  401ce0:	4680      	mov	r8, r0
  401ce2:	2800      	cmp	r0, #0
  401ce4:	f000 808b 	beq.w	401dfe <pow+0x1c2>
  401ce8:	f04f 0a00 	mov.w	sl, #0
  401cec:	f04f 0b00 	mov.w	fp, #0
  401cf0:	4652      	mov	r2, sl
  401cf2:	465b      	mov	r3, fp
  401cf4:	e9dd 0100 	ldrd	r0, r1, [sp]
  401cf8:	f001 fcc4 	bl	403684 <__aeabi_dcmpeq>
  401cfc:	2800      	cmp	r0, #0
  401cfe:	d0e6      	beq.n	401cce <pow+0x92>
  401d00:	4630      	mov	r0, r6
  401d02:	4639      	mov	r1, r7
  401d04:	f000 ff7e 	bl	402c04 <finite>
  401d08:	2800      	cmp	r0, #0
  401d0a:	d0e0      	beq.n	401cce <pow+0x92>
  401d0c:	4620      	mov	r0, r4
  401d0e:	4629      	mov	r1, r5
  401d10:	f000 ff78 	bl	402c04 <finite>
  401d14:	2800      	cmp	r0, #0
  401d16:	d0da      	beq.n	401cce <pow+0x92>
  401d18:	f999 3000 	ldrsb.w	r3, [r9]
  401d1c:	4a7e      	ldr	r2, [pc, #504]	; (401f18 <pow+0x2dc>)
  401d1e:	9203      	str	r2, [sp, #12]
  401d20:	2104      	movs	r1, #4
  401d22:	2200      	movs	r2, #0
  401d24:	2b02      	cmp	r3, #2
  401d26:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401d2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401d2e:	e9cd ab08 	strd	sl, fp, [sp, #32]
  401d32:	9102      	str	r1, [sp, #8]
  401d34:	920a      	str	r2, [sp, #40]	; 0x28
  401d36:	d003      	beq.n	401d40 <pow+0x104>
  401d38:	a802      	add	r0, sp, #8
  401d3a:	f000 ff69 	bl	402c10 <matherr>
  401d3e:	b968      	cbnz	r0, 401d5c <pow+0x120>
  401d40:	f001 ff56 	bl	403bf0 <__errno>
  401d44:	2322      	movs	r3, #34	; 0x22
  401d46:	6003      	str	r3, [r0, #0]
  401d48:	e008      	b.n	401d5c <pow+0x120>
  401d4a:	2300      	movs	r3, #0
  401d4c:	2400      	movs	r4, #0
  401d4e:	e9cd 3408 	strd	r3, r4, [sp, #32]
  401d52:	a802      	add	r0, sp, #8
  401d54:	f000 ff5c 	bl	402c10 <matherr>
  401d58:	2800      	cmp	r0, #0
  401d5a:	d030      	beq.n	401dbe <pow+0x182>
  401d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d5e:	b11b      	cbz	r3, 401d68 <pow+0x12c>
  401d60:	f001 ff46 	bl	403bf0 <__errno>
  401d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d66:	6003      	str	r3, [r0, #0]
  401d68:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
  401d6c:	e9cd 3400 	strd	r3, r4, [sp]
  401d70:	e9dd 0100 	ldrd	r0, r1, [sp]
  401d74:	b00d      	add	sp, #52	; 0x34
  401d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d7a:	4620      	mov	r0, r4
  401d7c:	4629      	mov	r1, r5
  401d7e:	f000 ff41 	bl	402c04 <finite>
  401d82:	2800      	cmp	r0, #0
  401d84:	d0a3      	beq.n	401cce <pow+0x92>
  401d86:	2200      	movs	r2, #0
  401d88:	2300      	movs	r3, #0
  401d8a:	4620      	mov	r0, r4
  401d8c:	4629      	mov	r1, r5
  401d8e:	f001 fc83 	bl	403698 <__aeabi_dcmplt>
  401d92:	2800      	cmp	r0, #0
  401d94:	d09b      	beq.n	401cce <pow+0x92>
  401d96:	f999 3000 	ldrsb.w	r3, [r9]
  401d9a:	4a5f      	ldr	r2, [pc, #380]	; (401f18 <pow+0x2dc>)
  401d9c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401da0:	2101      	movs	r1, #1
  401da2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401da6:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401daa:	9102      	str	r1, [sp, #8]
  401dac:	9203      	str	r2, [sp, #12]
  401dae:	2b00      	cmp	r3, #0
  401db0:	d0cb      	beq.n	401d4a <pow+0x10e>
  401db2:	495b      	ldr	r1, [pc, #364]	; (401f20 <pow+0x2e4>)
  401db4:	2000      	movs	r0, #0
  401db6:	2b02      	cmp	r3, #2
  401db8:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401dbc:	d1c9      	bne.n	401d52 <pow+0x116>
  401dbe:	f001 ff17 	bl	403bf0 <__errno>
  401dc2:	2321      	movs	r3, #33	; 0x21
  401dc4:	6003      	str	r3, [r0, #0]
  401dc6:	e7c9      	b.n	401d5c <pow+0x120>
  401dc8:	4620      	mov	r0, r4
  401dca:	4629      	mov	r1, r5
  401dcc:	f001 fc5a 	bl	403684 <__aeabi_dcmpeq>
  401dd0:	2800      	cmp	r0, #0
  401dd2:	f43f af7c 	beq.w	401cce <pow+0x92>
  401dd6:	4b51      	ldr	r3, [pc, #324]	; (401f1c <pow+0x2e0>)
  401dd8:	494f      	ldr	r1, [pc, #316]	; (401f18 <pow+0x2dc>)
  401dda:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401dde:	2001      	movs	r0, #1
  401de0:	2200      	movs	r2, #0
  401de2:	f1b8 0f02 	cmp.w	r8, #2
  401de6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401dea:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401dee:	9002      	str	r0, [sp, #8]
  401df0:	9103      	str	r1, [sp, #12]
  401df2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401df6:	d1ac      	bne.n	401d52 <pow+0x116>
  401df8:	e9cd 2300 	strd	r2, r3, [sp]
  401dfc:	e767      	b.n	401cce <pow+0x92>
  401dfe:	4630      	mov	r0, r6
  401e00:	4639      	mov	r1, r7
  401e02:	f000 feff 	bl	402c04 <finite>
  401e06:	2800      	cmp	r0, #0
  401e08:	f43f af6e 	beq.w	401ce8 <pow+0xac>
  401e0c:	4620      	mov	r0, r4
  401e0e:	4629      	mov	r1, r5
  401e10:	f000 fef8 	bl	402c04 <finite>
  401e14:	2800      	cmp	r0, #0
  401e16:	f43f af67 	beq.w	401ce8 <pow+0xac>
  401e1a:	e9dd 2300 	ldrd	r2, r3, [sp]
  401e1e:	4610      	mov	r0, r2
  401e20:	4619      	mov	r1, r3
  401e22:	f001 fc61 	bl	4036e8 <__aeabi_dcmpun>
  401e26:	2800      	cmp	r0, #0
  401e28:	d158      	bne.n	401edc <pow+0x2a0>
  401e2a:	2303      	movs	r3, #3
  401e2c:	f999 8000 	ldrsb.w	r8, [r9]
  401e30:	9302      	str	r3, [sp, #8]
  401e32:	4b39      	ldr	r3, [pc, #228]	; (401f18 <pow+0x2dc>)
  401e34:	900a      	str	r0, [sp, #40]	; 0x28
  401e36:	9303      	str	r3, [sp, #12]
  401e38:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401e3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401e40:	2200      	movs	r2, #0
  401e42:	2300      	movs	r3, #0
  401e44:	4630      	mov	r0, r6
  401e46:	4639      	mov	r1, r7
  401e48:	f1b8 0f00 	cmp.w	r8, #0
  401e4c:	d126      	bne.n	401e9c <pow+0x260>
  401e4e:	4f35      	ldr	r7, [pc, #212]	; (401f24 <pow+0x2e8>)
  401e50:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
  401e54:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401e58:	f001 fc1e 	bl	403698 <__aeabi_dcmplt>
  401e5c:	2800      	cmp	r0, #0
  401e5e:	f43f af6b 	beq.w	401d38 <pow+0xfc>
  401e62:	2200      	movs	r2, #0
  401e64:	4b30      	ldr	r3, [pc, #192]	; (401f28 <pow+0x2ec>)
  401e66:	4620      	mov	r0, r4
  401e68:	4629      	mov	r1, r5
  401e6a:	f001 f9a3 	bl	4031b4 <__aeabi_dmul>
  401e6e:	4604      	mov	r4, r0
  401e70:	460d      	mov	r5, r1
  401e72:	f000 fed5 	bl	402c20 <rint>
  401e76:	4602      	mov	r2, r0
  401e78:	460b      	mov	r3, r1
  401e7a:	4620      	mov	r0, r4
  401e7c:	4629      	mov	r1, r5
  401e7e:	f001 fc01 	bl	403684 <__aeabi_dcmpeq>
  401e82:	bb40      	cbnz	r0, 401ed6 <pow+0x29a>
  401e84:	4b29      	ldr	r3, [pc, #164]	; (401f2c <pow+0x2f0>)
  401e86:	f999 8000 	ldrsb.w	r8, [r9]
  401e8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  401e8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401e92:	f1b8 0f02 	cmp.w	r8, #2
  401e96:	f47f af4f 	bne.w	401d38 <pow+0xfc>
  401e9a:	e751      	b.n	401d40 <pow+0x104>
  401e9c:	4f24      	ldr	r7, [pc, #144]	; (401f30 <pow+0x2f4>)
  401e9e:	2600      	movs	r6, #0
  401ea0:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401ea4:	f001 fbf8 	bl	403698 <__aeabi_dcmplt>
  401ea8:	2800      	cmp	r0, #0
  401eaa:	d0f2      	beq.n	401e92 <pow+0x256>
  401eac:	2200      	movs	r2, #0
  401eae:	4b1e      	ldr	r3, [pc, #120]	; (401f28 <pow+0x2ec>)
  401eb0:	4620      	mov	r0, r4
  401eb2:	4629      	mov	r1, r5
  401eb4:	f001 f97e 	bl	4031b4 <__aeabi_dmul>
  401eb8:	4604      	mov	r4, r0
  401eba:	460d      	mov	r5, r1
  401ebc:	f000 feb0 	bl	402c20 <rint>
  401ec0:	4602      	mov	r2, r0
  401ec2:	460b      	mov	r3, r1
  401ec4:	4620      	mov	r0, r4
  401ec6:	4629      	mov	r1, r5
  401ec8:	f001 fbdc 	bl	403684 <__aeabi_dcmpeq>
  401ecc:	b918      	cbnz	r0, 401ed6 <pow+0x29a>
  401ece:	4b14      	ldr	r3, [pc, #80]	; (401f20 <pow+0x2e4>)
  401ed0:	2200      	movs	r2, #0
  401ed2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401ed6:	f999 8000 	ldrsb.w	r8, [r9]
  401eda:	e7da      	b.n	401e92 <pow+0x256>
  401edc:	f999 9000 	ldrsb.w	r9, [r9]
  401ee0:	4b0d      	ldr	r3, [pc, #52]	; (401f18 <pow+0x2dc>)
  401ee2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  401ee6:	2201      	movs	r2, #1
  401ee8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401eec:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401ef0:	9202      	str	r2, [sp, #8]
  401ef2:	9303      	str	r3, [sp, #12]
  401ef4:	f1b9 0f00 	cmp.w	r9, #0
  401ef8:	f43f af27 	beq.w	401d4a <pow+0x10e>
  401efc:	2200      	movs	r2, #0
  401efe:	2300      	movs	r3, #0
  401f00:	4610      	mov	r0, r2
  401f02:	4619      	mov	r1, r3
  401f04:	f001 fa80 	bl	403408 <__aeabi_ddiv>
  401f08:	f1b9 0f02 	cmp.w	r9, #2
  401f0c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401f10:	f43f af55 	beq.w	401dbe <pow+0x182>
  401f14:	e71d      	b.n	401d52 <pow+0x116>
  401f16:	bf00      	nop
  401f18:	00404cf4 	.word	0x00404cf4
  401f1c:	3ff00000 	.word	0x3ff00000
  401f20:	fff00000 	.word	0xfff00000
  401f24:	47efffff 	.word	0x47efffff
  401f28:	3fe00000 	.word	0x3fe00000
  401f2c:	c7efffff 	.word	0xc7efffff
  401f30:	7ff00000 	.word	0x7ff00000
  401f34:	20000024 	.word	0x20000024

00401f38 <sqrt>:
  401f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f3c:	b08b      	sub	sp, #44	; 0x2c
  401f3e:	4604      	mov	r4, r0
  401f40:	460d      	mov	r5, r1
  401f42:	f000 fd9f 	bl	402a84 <__ieee754_sqrt>
  401f46:	4b29      	ldr	r3, [pc, #164]	; (401fec <sqrt+0xb4>)
  401f48:	f993 a000 	ldrsb.w	sl, [r3]
  401f4c:	f1ba 3fff 	cmp.w	sl, #4294967295
  401f50:	4606      	mov	r6, r0
  401f52:	460f      	mov	r7, r1
  401f54:	d012      	beq.n	401f7c <sqrt+0x44>
  401f56:	4622      	mov	r2, r4
  401f58:	462b      	mov	r3, r5
  401f5a:	4620      	mov	r0, r4
  401f5c:	4629      	mov	r1, r5
  401f5e:	f001 fbc3 	bl	4036e8 <__aeabi_dcmpun>
  401f62:	4683      	mov	fp, r0
  401f64:	b950      	cbnz	r0, 401f7c <sqrt+0x44>
  401f66:	f04f 0800 	mov.w	r8, #0
  401f6a:	f04f 0900 	mov.w	r9, #0
  401f6e:	4642      	mov	r2, r8
  401f70:	464b      	mov	r3, r9
  401f72:	4620      	mov	r0, r4
  401f74:	4629      	mov	r1, r5
  401f76:	f001 fb8f 	bl	403698 <__aeabi_dcmplt>
  401f7a:	b920      	cbnz	r0, 401f86 <sqrt+0x4e>
  401f7c:	4630      	mov	r0, r6
  401f7e:	4639      	mov	r1, r7
  401f80:	b00b      	add	sp, #44	; 0x2c
  401f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f86:	4b1a      	ldr	r3, [pc, #104]	; (401ff0 <sqrt+0xb8>)
  401f88:	f8cd b020 	str.w	fp, [sp, #32]
  401f8c:	2201      	movs	r2, #1
  401f8e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401f92:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401f96:	e88d 000c 	stmia.w	sp, {r2, r3}
  401f9a:	f1ba 0f00 	cmp.w	sl, #0
  401f9e:	d017      	beq.n	401fd0 <sqrt+0x98>
  401fa0:	4642      	mov	r2, r8
  401fa2:	464b      	mov	r3, r9
  401fa4:	4640      	mov	r0, r8
  401fa6:	4649      	mov	r1, r9
  401fa8:	f001 fa2e 	bl	403408 <__aeabi_ddiv>
  401fac:	f1ba 0f02 	cmp.w	sl, #2
  401fb0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401fb4:	d10e      	bne.n	401fd4 <sqrt+0x9c>
  401fb6:	f001 fe1b 	bl	403bf0 <__errno>
  401fba:	2321      	movs	r3, #33	; 0x21
  401fbc:	6003      	str	r3, [r0, #0]
  401fbe:	9b08      	ldr	r3, [sp, #32]
  401fc0:	b973      	cbnz	r3, 401fe0 <sqrt+0xa8>
  401fc2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  401fc6:	4630      	mov	r0, r6
  401fc8:	4639      	mov	r1, r7
  401fca:	b00b      	add	sp, #44	; 0x2c
  401fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fd0:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401fd4:	4668      	mov	r0, sp
  401fd6:	f000 fe1b 	bl	402c10 <matherr>
  401fda:	2800      	cmp	r0, #0
  401fdc:	d1ef      	bne.n	401fbe <sqrt+0x86>
  401fde:	e7ea      	b.n	401fb6 <sqrt+0x7e>
  401fe0:	f001 fe06 	bl	403bf0 <__errno>
  401fe4:	9b08      	ldr	r3, [sp, #32]
  401fe6:	6003      	str	r3, [r0, #0]
  401fe8:	e7eb      	b.n	401fc2 <sqrt+0x8a>
  401fea:	bf00      	nop
  401fec:	20000024 	.word	0x20000024
  401ff0:	00404cf8 	.word	0x00404cf8
  401ff4:	00000000 	.word	0x00000000

00401ff8 <__ieee754_pow>:
  401ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ffc:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  402000:	ea57 0402 	orrs.w	r4, r7, r2
  402004:	b093      	sub	sp, #76	; 0x4c
  402006:	d037      	beq.n	402078 <__ieee754_pow+0x80>
  402008:	4c67      	ldr	r4, [pc, #412]	; (4021a8 <__ieee754_pow+0x1b0>)
  40200a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40200e:	42a6      	cmp	r6, r4
  402010:	4683      	mov	fp, r0
  402012:	460d      	mov	r5, r1
  402014:	dc29      	bgt.n	40206a <__ieee754_pow+0x72>
  402016:	469a      	mov	sl, r3
  402018:	4696      	mov	lr, r2
  40201a:	d025      	beq.n	402068 <__ieee754_pow+0x70>
  40201c:	42a7      	cmp	r7, r4
  40201e:	dc24      	bgt.n	40206a <__ieee754_pow+0x72>
  402020:	4c61      	ldr	r4, [pc, #388]	; (4021a8 <__ieee754_pow+0x1b0>)
  402022:	42a7      	cmp	r7, r4
  402024:	d079      	beq.n	40211a <__ieee754_pow+0x122>
  402026:	2d00      	cmp	r5, #0
  402028:	4689      	mov	r9, r1
  40202a:	4680      	mov	r8, r0
  40202c:	e9cd 2300 	strd	r2, r3, [sp]
  402030:	db77      	blt.n	402122 <__ieee754_pow+0x12a>
  402032:	2400      	movs	r4, #0
  402034:	f1be 0f00 	cmp.w	lr, #0
  402038:	d12c      	bne.n	402094 <__ieee754_pow+0x9c>
  40203a:	4b5b      	ldr	r3, [pc, #364]	; (4021a8 <__ieee754_pow+0x1b0>)
  40203c:	429f      	cmp	r7, r3
  40203e:	f000 808b 	beq.w	402158 <__ieee754_pow+0x160>
  402042:	4b5a      	ldr	r3, [pc, #360]	; (4021ac <__ieee754_pow+0x1b4>)
  402044:	429f      	cmp	r7, r3
  402046:	d061      	beq.n	40210c <__ieee754_pow+0x114>
  402048:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
  40204c:	f000 83ba 	beq.w	4027c4 <__ieee754_pow+0x7cc>
  402050:	4b57      	ldr	r3, [pc, #348]	; (4021b0 <__ieee754_pow+0x1b8>)
  402052:	459a      	cmp	sl, r3
  402054:	d11e      	bne.n	402094 <__ieee754_pow+0x9c>
  402056:	2d00      	cmp	r5, #0
  402058:	db1c      	blt.n	402094 <__ieee754_pow+0x9c>
  40205a:	4640      	mov	r0, r8
  40205c:	4649      	mov	r1, r9
  40205e:	b013      	add	sp, #76	; 0x4c
  402060:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402064:	f000 bd0e 	b.w	402a84 <__ieee754_sqrt>
  402068:	b158      	cbz	r0, 402082 <__ieee754_pow+0x8a>
  40206a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  40206e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  402072:	ea56 030b 	orrs.w	r3, r6, fp
  402076:	d106      	bne.n	402086 <__ieee754_pow+0x8e>
  402078:	494c      	ldr	r1, [pc, #304]	; (4021ac <__ieee754_pow+0x1b4>)
  40207a:	2000      	movs	r0, #0
  40207c:	b013      	add	sp, #76	; 0x4c
  40207e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402082:	42b7      	cmp	r7, r6
  402084:	ddcc      	ble.n	402020 <__ieee754_pow+0x28>
  402086:	484b      	ldr	r0, [pc, #300]	; (4021b4 <__ieee754_pow+0x1bc>)
  402088:	b013      	add	sp, #76	; 0x4c
  40208a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40208e:	f000 bdc1 	b.w	402c14 <nan>
  402092:	2400      	movs	r4, #0
  402094:	4640      	mov	r0, r8
  402096:	4649      	mov	r1, r9
  402098:	f000 fdb0 	bl	402bfc <fabs>
  40209c:	f1bb 0f00 	cmp.w	fp, #0
  4020a0:	d119      	bne.n	4020d6 <__ieee754_pow+0xde>
  4020a2:	b126      	cbz	r6, 4020ae <__ieee754_pow+0xb6>
  4020a4:	4b41      	ldr	r3, [pc, #260]	; (4021ac <__ieee754_pow+0x1b4>)
  4020a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
  4020aa:	429a      	cmp	r2, r3
  4020ac:	d113      	bne.n	4020d6 <__ieee754_pow+0xde>
  4020ae:	f1ba 0f00 	cmp.w	sl, #0
  4020b2:	f2c0 83bc 	blt.w	40282e <__ieee754_pow+0x836>
  4020b6:	2d00      	cmp	r5, #0
  4020b8:	dae0      	bge.n	40207c <__ieee754_pow+0x84>
  4020ba:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  4020be:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  4020c2:	ea56 0304 	orrs.w	r3, r6, r4
  4020c6:	f000 848f 	beq.w	4029e8 <__ieee754_pow+0x9f0>
  4020ca:	2c01      	cmp	r4, #1
  4020cc:	d1d6      	bne.n	40207c <__ieee754_pow+0x84>
  4020ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4020d2:	4619      	mov	r1, r3
  4020d4:	e7d2      	b.n	40207c <__ieee754_pow+0x84>
  4020d6:	0fed      	lsrs	r5, r5, #31
  4020d8:	3d01      	subs	r5, #1
  4020da:	ea54 0305 	orrs.w	r3, r4, r5
  4020de:	d04e      	beq.n	40217e <__ieee754_pow+0x186>
  4020e0:	4b35      	ldr	r3, [pc, #212]	; (4021b8 <__ieee754_pow+0x1c0>)
  4020e2:	429f      	cmp	r7, r3
  4020e4:	dd6e      	ble.n	4021c4 <__ieee754_pow+0x1cc>
  4020e6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
  4020ea:	429f      	cmp	r7, r3
  4020ec:	f340 83e8 	ble.w	4028c0 <__ieee754_pow+0x8c8>
  4020f0:	4b32      	ldr	r3, [pc, #200]	; (4021bc <__ieee754_pow+0x1c4>)
  4020f2:	429e      	cmp	r6, r3
  4020f4:	dd4e      	ble.n	402194 <__ieee754_pow+0x19c>
  4020f6:	f1ba 0f00 	cmp.w	sl, #0
  4020fa:	dd4e      	ble.n	40219a <__ieee754_pow+0x1a2>
  4020fc:	a328      	add	r3, pc, #160	; (adr r3, 4021a0 <__ieee754_pow+0x1a8>)
  4020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  402102:	4610      	mov	r0, r2
  402104:	4619      	mov	r1, r3
  402106:	f001 f855 	bl	4031b4 <__aeabi_dmul>
  40210a:	e7b7      	b.n	40207c <__ieee754_pow+0x84>
  40210c:	f1ba 0f00 	cmp.w	sl, #0
  402110:	f2c0 843c 	blt.w	40298c <__ieee754_pow+0x994>
  402114:	4640      	mov	r0, r8
  402116:	4649      	mov	r1, r9
  402118:	e7b0      	b.n	40207c <__ieee754_pow+0x84>
  40211a:	f1be 0f00 	cmp.w	lr, #0
  40211e:	d082      	beq.n	402026 <__ieee754_pow+0x2e>
  402120:	e7a3      	b.n	40206a <__ieee754_pow+0x72>
  402122:	4b27      	ldr	r3, [pc, #156]	; (4021c0 <__ieee754_pow+0x1c8>)
  402124:	429f      	cmp	r7, r3
  402126:	dc28      	bgt.n	40217a <__ieee754_pow+0x182>
  402128:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  40212c:	429f      	cmp	r7, r3
  40212e:	dd80      	ble.n	402032 <__ieee754_pow+0x3a>
  402130:	153b      	asrs	r3, r7, #20
  402132:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  402136:	2b14      	cmp	r3, #20
  402138:	f340 843e 	ble.w	4029b8 <__ieee754_pow+0x9c0>
  40213c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
  402140:	fa2e f203 	lsr.w	r2, lr, r3
  402144:	fa02 f303 	lsl.w	r3, r2, r3
  402148:	459e      	cmp	lr, r3
  40214a:	f47f af72 	bne.w	402032 <__ieee754_pow+0x3a>
  40214e:	f002 0201 	and.w	r2, r2, #1
  402152:	f1c2 0402 	rsb	r4, r2, #2
  402156:	e76d      	b.n	402034 <__ieee754_pow+0x3c>
  402158:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
  40215c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  402160:	ea53 030b 	orrs.w	r3, r3, fp
  402164:	d088      	beq.n	402078 <__ieee754_pow+0x80>
  402166:	4b15      	ldr	r3, [pc, #84]	; (4021bc <__ieee754_pow+0x1c4>)
  402168:	429e      	cmp	r6, r3
  40216a:	f340 8332 	ble.w	4027d2 <__ieee754_pow+0x7da>
  40216e:	f1ba 0f00 	cmp.w	sl, #0
  402172:	db12      	blt.n	40219a <__ieee754_pow+0x1a2>
  402174:	e9dd 0100 	ldrd	r0, r1, [sp]
  402178:	e780      	b.n	40207c <__ieee754_pow+0x84>
  40217a:	2402      	movs	r4, #2
  40217c:	e75a      	b.n	402034 <__ieee754_pow+0x3c>
  40217e:	4642      	mov	r2, r8
  402180:	464b      	mov	r3, r9
  402182:	4640      	mov	r0, r8
  402184:	4649      	mov	r1, r9
  402186:	f000 fe61 	bl	402e4c <__aeabi_dsub>
  40218a:	4602      	mov	r2, r0
  40218c:	460b      	mov	r3, r1
  40218e:	f001 f93b 	bl	403408 <__aeabi_ddiv>
  402192:	e773      	b.n	40207c <__ieee754_pow+0x84>
  402194:	f1ba 0f00 	cmp.w	sl, #0
  402198:	dbb0      	blt.n	4020fc <__ieee754_pow+0x104>
  40219a:	2000      	movs	r0, #0
  40219c:	2100      	movs	r1, #0
  40219e:	e76d      	b.n	40207c <__ieee754_pow+0x84>
  4021a0:	8800759c 	.word	0x8800759c
  4021a4:	7e37e43c 	.word	0x7e37e43c
  4021a8:	7ff00000 	.word	0x7ff00000
  4021ac:	3ff00000 	.word	0x3ff00000
  4021b0:	3fe00000 	.word	0x3fe00000
  4021b4:	00404cfc 	.word	0x00404cfc
  4021b8:	41e00000 	.word	0x41e00000
  4021bc:	3fefffff 	.word	0x3fefffff
  4021c0:	433fffff 	.word	0x433fffff
  4021c4:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
  4021c8:	f04f 0200 	mov.w	r2, #0
  4021cc:	da05      	bge.n	4021da <__ieee754_pow+0x1e2>
  4021ce:	4bd4      	ldr	r3, [pc, #848]	; (402520 <__ieee754_pow+0x528>)
  4021d0:	f000 fff0 	bl	4031b4 <__aeabi_dmul>
  4021d4:	f06f 0234 	mvn.w	r2, #52	; 0x34
  4021d8:	460e      	mov	r6, r1
  4021da:	1533      	asrs	r3, r6, #20
  4021dc:	4fd1      	ldr	r7, [pc, #836]	; (402524 <__ieee754_pow+0x52c>)
  4021de:	f3c6 0613 	ubfx	r6, r6, #0, #20
  4021e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  4021e6:	4413      	add	r3, r2
  4021e8:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
  4021ec:	42be      	cmp	r6, r7
  4021ee:	461a      	mov	r2, r3
  4021f0:	930d      	str	r3, [sp, #52]	; 0x34
  4021f2:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
  4021f6:	f340 8321 	ble.w	40283c <__ieee754_pow+0x844>
  4021fa:	4bcb      	ldr	r3, [pc, #812]	; (402528 <__ieee754_pow+0x530>)
  4021fc:	429e      	cmp	r6, r3
  4021fe:	f340 83fd 	ble.w	4029fc <__ieee754_pow+0xa04>
  402202:	4613      	mov	r3, r2
  402204:	3301      	adds	r3, #1
  402206:	930d      	str	r3, [sp, #52]	; 0x34
  402208:	4bc8      	ldr	r3, [pc, #800]	; (40252c <__ieee754_pow+0x534>)
  40220a:	2200      	movs	r2, #0
  40220c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402210:	2700      	movs	r7, #0
  402212:	2600      	movs	r6, #0
  402214:	e9cd 6708 	strd	r6, r7, [sp, #32]
  402218:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  40221c:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
  402220:	2700      	movs	r7, #0
  402222:	4602      	mov	r2, r0
  402224:	4653      	mov	r3, sl
  402226:	4651      	mov	r1, sl
  402228:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40222c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402230:	f000 fe0c 	bl	402e4c <__aeabi_dsub>
  402234:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402238:	4680      	mov	r8, r0
  40223a:	4689      	mov	r9, r1
  40223c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  402240:	f000 fe06 	bl	402e50 <__adddf3>
  402244:	4602      	mov	r2, r0
  402246:	460b      	mov	r3, r1
  402248:	2000      	movs	r0, #0
  40224a:	49b8      	ldr	r1, [pc, #736]	; (40252c <__ieee754_pow+0x534>)
  40224c:	f001 f8dc 	bl	403408 <__aeabi_ddiv>
  402250:	460a      	mov	r2, r1
  402252:	4601      	mov	r1, r0
  402254:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  402258:	4613      	mov	r3, r2
  40225a:	4649      	mov	r1, r9
  40225c:	4602      	mov	r2, r0
  40225e:	4640      	mov	r0, r8
  402260:	f000 ffa8 	bl	4031b4 <__aeabi_dmul>
  402264:	ea4f 036a 	mov.w	r3, sl, asr #1
  402268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40226c:	468c      	mov	ip, r1
  40226e:	4683      	mov	fp, r0
  402270:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
  402274:	e9cd bc04 	strd	fp, ip, [sp, #16]
  402278:	46da      	mov	sl, fp
  40227a:	468b      	mov	fp, r1
  40227c:	19d9      	adds	r1, r3, r7
  40227e:	2300      	movs	r3, #0
  402280:	e9cd ab02 	strd	sl, fp, [sp, #8]
  402284:	9302      	str	r3, [sp, #8]
  402286:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40228a:	2000      	movs	r0, #0
  40228c:	4606      	mov	r6, r0
  40228e:	460f      	mov	r7, r1
  402290:	4602      	mov	r2, r0
  402292:	460b      	mov	r3, r1
  402294:	4650      	mov	r0, sl
  402296:	4659      	mov	r1, fp
  402298:	f000 ff8c 	bl	4031b4 <__aeabi_dmul>
  40229c:	4602      	mov	r2, r0
  40229e:	460b      	mov	r3, r1
  4022a0:	4640      	mov	r0, r8
  4022a2:	4649      	mov	r1, r9
  4022a4:	f000 fdd2 	bl	402e4c <__aeabi_dsub>
  4022a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4022ac:	4680      	mov	r8, r0
  4022ae:	4689      	mov	r9, r1
  4022b0:	4630      	mov	r0, r6
  4022b2:	4639      	mov	r1, r7
  4022b4:	f000 fdca 	bl	402e4c <__aeabi_dsub>
  4022b8:	4602      	mov	r2, r0
  4022ba:	460b      	mov	r3, r1
  4022bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4022c0:	f000 fdc4 	bl	402e4c <__aeabi_dsub>
  4022c4:	4652      	mov	r2, sl
  4022c6:	465b      	mov	r3, fp
  4022c8:	f000 ff74 	bl	4031b4 <__aeabi_dmul>
  4022cc:	4602      	mov	r2, r0
  4022ce:	460b      	mov	r3, r1
  4022d0:	4640      	mov	r0, r8
  4022d2:	4649      	mov	r1, r9
  4022d4:	f000 fdba 	bl	402e4c <__aeabi_dsub>
  4022d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4022dc:	f000 ff6a 	bl	4031b4 <__aeabi_dmul>
  4022e0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  4022e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4022e8:	4632      	mov	r2, r6
  4022ea:	463b      	mov	r3, r7
  4022ec:	4630      	mov	r0, r6
  4022ee:	4639      	mov	r1, r7
  4022f0:	f000 ff60 	bl	4031b4 <__aeabi_dmul>
  4022f4:	a378      	add	r3, pc, #480	; (adr r3, 4024d8 <__ieee754_pow+0x4e0>)
  4022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022fa:	4606      	mov	r6, r0
  4022fc:	460f      	mov	r7, r1
  4022fe:	f000 ff59 	bl	4031b4 <__aeabi_dmul>
  402302:	a377      	add	r3, pc, #476	; (adr r3, 4024e0 <__ieee754_pow+0x4e8>)
  402304:	e9d3 2300 	ldrd	r2, r3, [r3]
  402308:	f000 fda2 	bl	402e50 <__adddf3>
  40230c:	4632      	mov	r2, r6
  40230e:	463b      	mov	r3, r7
  402310:	f000 ff50 	bl	4031b4 <__aeabi_dmul>
  402314:	a374      	add	r3, pc, #464	; (adr r3, 4024e8 <__ieee754_pow+0x4f0>)
  402316:	e9d3 2300 	ldrd	r2, r3, [r3]
  40231a:	f000 fd99 	bl	402e50 <__adddf3>
  40231e:	4632      	mov	r2, r6
  402320:	463b      	mov	r3, r7
  402322:	f000 ff47 	bl	4031b4 <__aeabi_dmul>
  402326:	a372      	add	r3, pc, #456	; (adr r3, 4024f0 <__ieee754_pow+0x4f8>)
  402328:	e9d3 2300 	ldrd	r2, r3, [r3]
  40232c:	f000 fd90 	bl	402e50 <__adddf3>
  402330:	4632      	mov	r2, r6
  402332:	463b      	mov	r3, r7
  402334:	f000 ff3e 	bl	4031b4 <__aeabi_dmul>
  402338:	a36f      	add	r3, pc, #444	; (adr r3, 4024f8 <__ieee754_pow+0x500>)
  40233a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40233e:	f000 fd87 	bl	402e50 <__adddf3>
  402342:	4632      	mov	r2, r6
  402344:	463b      	mov	r3, r7
  402346:	f000 ff35 	bl	4031b4 <__aeabi_dmul>
  40234a:	a36d      	add	r3, pc, #436	; (adr r3, 402500 <__ieee754_pow+0x508>)
  40234c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402350:	f000 fd7e 	bl	402e50 <__adddf3>
  402354:	4632      	mov	r2, r6
  402356:	4680      	mov	r8, r0
  402358:	4689      	mov	r9, r1
  40235a:	463b      	mov	r3, r7
  40235c:	4630      	mov	r0, r6
  40235e:	4639      	mov	r1, r7
  402360:	f000 ff28 	bl	4031b4 <__aeabi_dmul>
  402364:	4602      	mov	r2, r0
  402366:	460b      	mov	r3, r1
  402368:	4640      	mov	r0, r8
  40236a:	4649      	mov	r1, r9
  40236c:	f000 ff22 	bl	4031b4 <__aeabi_dmul>
  402370:	4652      	mov	r2, sl
  402372:	4606      	mov	r6, r0
  402374:	460f      	mov	r7, r1
  402376:	465b      	mov	r3, fp
  402378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40237c:	f000 fd68 	bl	402e50 <__adddf3>
  402380:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402384:	f000 ff16 	bl	4031b4 <__aeabi_dmul>
  402388:	4632      	mov	r2, r6
  40238a:	463b      	mov	r3, r7
  40238c:	f000 fd60 	bl	402e50 <__adddf3>
  402390:	4652      	mov	r2, sl
  402392:	4680      	mov	r8, r0
  402394:	4689      	mov	r9, r1
  402396:	465b      	mov	r3, fp
  402398:	4650      	mov	r0, sl
  40239a:	4659      	mov	r1, fp
  40239c:	f000 ff0a 	bl	4031b4 <__aeabi_dmul>
  4023a0:	2200      	movs	r2, #0
  4023a2:	4b63      	ldr	r3, [pc, #396]	; (402530 <__ieee754_pow+0x538>)
  4023a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4023a8:	f000 fd52 	bl	402e50 <__adddf3>
  4023ac:	4642      	mov	r2, r8
  4023ae:	464b      	mov	r3, r9
  4023b0:	f000 fd4e 	bl	402e50 <__adddf3>
  4023b4:	9802      	ldr	r0, [sp, #8]
  4023b6:	460f      	mov	r7, r1
  4023b8:	4606      	mov	r6, r0
  4023ba:	4632      	mov	r2, r6
  4023bc:	463b      	mov	r3, r7
  4023be:	4650      	mov	r0, sl
  4023c0:	4659      	mov	r1, fp
  4023c2:	f000 fef7 	bl	4031b4 <__aeabi_dmul>
  4023c6:	2200      	movs	r2, #0
  4023c8:	4682      	mov	sl, r0
  4023ca:	468b      	mov	fp, r1
  4023cc:	4b58      	ldr	r3, [pc, #352]	; (402530 <__ieee754_pow+0x538>)
  4023ce:	4630      	mov	r0, r6
  4023d0:	4639      	mov	r1, r7
  4023d2:	f000 fd3b 	bl	402e4c <__aeabi_dsub>
  4023d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4023da:	f000 fd37 	bl	402e4c <__aeabi_dsub>
  4023de:	4602      	mov	r2, r0
  4023e0:	460b      	mov	r3, r1
  4023e2:	4640      	mov	r0, r8
  4023e4:	4649      	mov	r1, r9
  4023e6:	f000 fd31 	bl	402e4c <__aeabi_dsub>
  4023ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4023ee:	f000 fee1 	bl	4031b4 <__aeabi_dmul>
  4023f2:	4632      	mov	r2, r6
  4023f4:	4680      	mov	r8, r0
  4023f6:	4689      	mov	r9, r1
  4023f8:	463b      	mov	r3, r7
  4023fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4023fe:	f000 fed9 	bl	4031b4 <__aeabi_dmul>
  402402:	4602      	mov	r2, r0
  402404:	460b      	mov	r3, r1
  402406:	4640      	mov	r0, r8
  402408:	4649      	mov	r1, r9
  40240a:	f000 fd21 	bl	402e50 <__adddf3>
  40240e:	4680      	mov	r8, r0
  402410:	4689      	mov	r9, r1
  402412:	4602      	mov	r2, r0
  402414:	460b      	mov	r3, r1
  402416:	4650      	mov	r0, sl
  402418:	4659      	mov	r1, fp
  40241a:	e9cd ab04 	strd	sl, fp, [sp, #16]
  40241e:	f000 fd17 	bl	402e50 <__adddf3>
  402422:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  402426:	a338      	add	r3, pc, #224	; (adr r3, 402508 <__ieee754_pow+0x510>)
  402428:	e9d3 2300 	ldrd	r2, r3, [r3]
  40242c:	4650      	mov	r0, sl
  40242e:	460f      	mov	r7, r1
  402430:	f000 fec0 	bl	4031b4 <__aeabi_dmul>
  402434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402438:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40243c:	4639      	mov	r1, r7
  40243e:	4650      	mov	r0, sl
  402440:	f000 fd04 	bl	402e4c <__aeabi_dsub>
  402444:	4602      	mov	r2, r0
  402446:	460b      	mov	r3, r1
  402448:	4640      	mov	r0, r8
  40244a:	4649      	mov	r1, r9
  40244c:	f000 fcfe 	bl	402e4c <__aeabi_dsub>
  402450:	a32f      	add	r3, pc, #188	; (adr r3, 402510 <__ieee754_pow+0x518>)
  402452:	e9d3 2300 	ldrd	r2, r3, [r3]
  402456:	f000 fead 	bl	4031b4 <__aeabi_dmul>
  40245a:	a32f      	add	r3, pc, #188	; (adr r3, 402518 <__ieee754_pow+0x520>)
  40245c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402460:	4680      	mov	r8, r0
  402462:	4689      	mov	r9, r1
  402464:	4650      	mov	r0, sl
  402466:	4639      	mov	r1, r7
  402468:	f000 fea4 	bl	4031b4 <__aeabi_dmul>
  40246c:	4602      	mov	r2, r0
  40246e:	460b      	mov	r3, r1
  402470:	4640      	mov	r0, r8
  402472:	4649      	mov	r1, r9
  402474:	f000 fcec 	bl	402e50 <__adddf3>
  402478:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40247c:	f000 fce8 	bl	402e50 <__adddf3>
  402480:	4680      	mov	r8, r0
  402482:	980d      	ldr	r0, [sp, #52]	; 0x34
  402484:	4689      	mov	r9, r1
  402486:	f000 fe2f 	bl	4030e8 <__aeabi_i2d>
  40248a:	4642      	mov	r2, r8
  40248c:	4606      	mov	r6, r0
  40248e:	460f      	mov	r7, r1
  402490:	464b      	mov	r3, r9
  402492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402496:	f000 fcdb 	bl	402e50 <__adddf3>
  40249a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40249e:	f000 fcd7 	bl	402e50 <__adddf3>
  4024a2:	4632      	mov	r2, r6
  4024a4:	463b      	mov	r3, r7
  4024a6:	f000 fcd3 	bl	402e50 <__adddf3>
  4024aa:	4632      	mov	r2, r6
  4024ac:	463b      	mov	r3, r7
  4024ae:	4650      	mov	r0, sl
  4024b0:	468b      	mov	fp, r1
  4024b2:	f000 fccb 	bl	402e4c <__aeabi_dsub>
  4024b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4024ba:	f000 fcc7 	bl	402e4c <__aeabi_dsub>
  4024be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4024c2:	f000 fcc3 	bl	402e4c <__aeabi_dsub>
  4024c6:	4602      	mov	r2, r0
  4024c8:	460b      	mov	r3, r1
  4024ca:	4640      	mov	r0, r8
  4024cc:	4649      	mov	r1, r9
  4024ce:	f000 fcbd 	bl	402e4c <__aeabi_dsub>
  4024d2:	4680      	mov	r8, r0
  4024d4:	e02e      	b.n	402534 <__ieee754_pow+0x53c>
  4024d6:	bf00      	nop
  4024d8:	4a454eef 	.word	0x4a454eef
  4024dc:	3fca7e28 	.word	0x3fca7e28
  4024e0:	93c9db65 	.word	0x93c9db65
  4024e4:	3fcd864a 	.word	0x3fcd864a
  4024e8:	a91d4101 	.word	0xa91d4101
  4024ec:	3fd17460 	.word	0x3fd17460
  4024f0:	518f264d 	.word	0x518f264d
  4024f4:	3fd55555 	.word	0x3fd55555
  4024f8:	db6fabff 	.word	0xdb6fabff
  4024fc:	3fdb6db6 	.word	0x3fdb6db6
  402500:	33333303 	.word	0x33333303
  402504:	3fe33333 	.word	0x3fe33333
  402508:	e0000000 	.word	0xe0000000
  40250c:	3feec709 	.word	0x3feec709
  402510:	dc3a03fd 	.word	0xdc3a03fd
  402514:	3feec709 	.word	0x3feec709
  402518:	145b01f5 	.word	0x145b01f5
  40251c:	be3e2fe0 	.word	0xbe3e2fe0
  402520:	43400000 	.word	0x43400000
  402524:	0003988e 	.word	0x0003988e
  402528:	000bb679 	.word	0x000bb679
  40252c:	3ff00000 	.word	0x3ff00000
  402530:	40080000 	.word	0x40080000
  402534:	4689      	mov	r9, r1
  402536:	3c01      	subs	r4, #1
  402538:	ea54 0305 	orrs.w	r3, r4, r5
  40253c:	e9dd 0100 	ldrd	r0, r1, [sp]
  402540:	bf14      	ite	ne
  402542:	4cd9      	ldrne	r4, [pc, #868]	; (4028a8 <__ieee754_pow+0x8b0>)
  402544:	4cd9      	ldreq	r4, [pc, #868]	; (4028ac <__ieee754_pow+0x8b4>)
  402546:	2300      	movs	r3, #0
  402548:	e9cd 3404 	strd	r3, r4, [sp, #16]
  40254c:	4603      	mov	r3, r0
  40254e:	460c      	mov	r4, r1
  402550:	e9cd 3402 	strd	r3, r4, [sp, #8]
  402554:	2300      	movs	r3, #0
  402556:	9302      	str	r3, [sp, #8]
  402558:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  40255c:	4622      	mov	r2, r4
  40255e:	462b      	mov	r3, r5
  402560:	f000 fc74 	bl	402e4c <__aeabi_dsub>
  402564:	4652      	mov	r2, sl
  402566:	465b      	mov	r3, fp
  402568:	f000 fe24 	bl	4031b4 <__aeabi_dmul>
  40256c:	e9dd 2300 	ldrd	r2, r3, [sp]
  402570:	4606      	mov	r6, r0
  402572:	460f      	mov	r7, r1
  402574:	4640      	mov	r0, r8
  402576:	4649      	mov	r1, r9
  402578:	f000 fe1c 	bl	4031b4 <__aeabi_dmul>
  40257c:	4602      	mov	r2, r0
  40257e:	460b      	mov	r3, r1
  402580:	4630      	mov	r0, r6
  402582:	4639      	mov	r1, r7
  402584:	f000 fc64 	bl	402e50 <__adddf3>
  402588:	4622      	mov	r2, r4
  40258a:	4680      	mov	r8, r0
  40258c:	4689      	mov	r9, r1
  40258e:	462b      	mov	r3, r5
  402590:	4650      	mov	r0, sl
  402592:	4659      	mov	r1, fp
  402594:	e9cd 8900 	strd	r8, r9, [sp]
  402598:	f000 fe0c 	bl	4031b4 <__aeabi_dmul>
  40259c:	460b      	mov	r3, r1
  40259e:	4602      	mov	r2, r0
  4025a0:	4606      	mov	r6, r0
  4025a2:	460f      	mov	r7, r1
  4025a4:	4640      	mov	r0, r8
  4025a6:	4649      	mov	r1, r9
  4025a8:	f000 fc52 	bl	402e50 <__adddf3>
  4025ac:	4bc0      	ldr	r3, [pc, #768]	; (4028b0 <__ieee754_pow+0x8b8>)
  4025ae:	4299      	cmp	r1, r3
  4025b0:	4604      	mov	r4, r0
  4025b2:	460d      	mov	r5, r1
  4025b4:	468a      	mov	sl, r1
  4025b6:	f340 8116 	ble.w	4027e6 <__ieee754_pow+0x7ee>
  4025ba:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
  4025be:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
  4025c2:	4303      	orrs	r3, r0
  4025c4:	f040 81ea 	bne.w	40299c <__ieee754_pow+0x9a4>
  4025c8:	a3a3      	add	r3, pc, #652	; (adr r3, 402858 <__ieee754_pow+0x860>)
  4025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025ce:	e9dd 0100 	ldrd	r0, r1, [sp]
  4025d2:	f000 fc3d 	bl	402e50 <__adddf3>
  4025d6:	4632      	mov	r2, r6
  4025d8:	4680      	mov	r8, r0
  4025da:	4689      	mov	r9, r1
  4025dc:	463b      	mov	r3, r7
  4025de:	4620      	mov	r0, r4
  4025e0:	4629      	mov	r1, r5
  4025e2:	f000 fc33 	bl	402e4c <__aeabi_dsub>
  4025e6:	4602      	mov	r2, r0
  4025e8:	460b      	mov	r3, r1
  4025ea:	4640      	mov	r0, r8
  4025ec:	4649      	mov	r1, r9
  4025ee:	f001 f871 	bl	4036d4 <__aeabi_dcmpgt>
  4025f2:	2800      	cmp	r0, #0
  4025f4:	f040 81d2 	bne.w	40299c <__ieee754_pow+0x9a4>
  4025f8:	46a8      	mov	r8, r5
  4025fa:	ea4f 5328 	mov.w	r3, r8, asr #20
  4025fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402602:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
  402606:	fa42 f303 	asr.w	r3, r2, r3
  40260a:	4453      	add	r3, sl
  40260c:	f3c3 520a 	ubfx	r2, r3, #20, #11
  402610:	4da8      	ldr	r5, [pc, #672]	; (4028b4 <__ieee754_pow+0x8bc>)
  402612:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
  402616:	4115      	asrs	r5, r2
  402618:	f3c3 0413 	ubfx	r4, r3, #0, #20
  40261c:	ea23 0105 	bic.w	r1, r3, r5
  402620:	2000      	movs	r0, #0
  402622:	f1c2 0b14 	rsb	fp, r2, #20
  402626:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40262a:	f1ba 0f00 	cmp.w	sl, #0
  40262e:	4602      	mov	r2, r0
  402630:	460b      	mov	r3, r1
  402632:	fa44 fb0b 	asr.w	fp, r4, fp
  402636:	4630      	mov	r0, r6
  402638:	4639      	mov	r1, r7
  40263a:	bfb8      	it	lt
  40263c:	f1cb 0b00 	rsblt	fp, fp, #0
  402640:	f000 fc04 	bl	402e4c <__aeabi_dsub>
  402644:	4602      	mov	r2, r0
  402646:	460b      	mov	r3, r1
  402648:	4606      	mov	r6, r0
  40264a:	460f      	mov	r7, r1
  40264c:	e9dd 0100 	ldrd	r0, r1, [sp]
  402650:	f000 fbfe 	bl	402e50 <__adddf3>
  402654:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
  402658:	460d      	mov	r5, r1
  40265a:	2400      	movs	r4, #0
  40265c:	a380      	add	r3, pc, #512	; (adr r3, 402860 <__ieee754_pow+0x868>)
  40265e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402662:	4620      	mov	r0, r4
  402664:	4629      	mov	r1, r5
  402666:	f000 fda5 	bl	4031b4 <__aeabi_dmul>
  40266a:	4632      	mov	r2, r6
  40266c:	4680      	mov	r8, r0
  40266e:	4689      	mov	r9, r1
  402670:	463b      	mov	r3, r7
  402672:	4620      	mov	r0, r4
  402674:	4629      	mov	r1, r5
  402676:	f000 fbe9 	bl	402e4c <__aeabi_dsub>
  40267a:	4602      	mov	r2, r0
  40267c:	460b      	mov	r3, r1
  40267e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402682:	f000 fbe3 	bl	402e4c <__aeabi_dsub>
  402686:	a378      	add	r3, pc, #480	; (adr r3, 402868 <__ieee754_pow+0x870>)
  402688:	e9d3 2300 	ldrd	r2, r3, [r3]
  40268c:	f000 fd92 	bl	4031b4 <__aeabi_dmul>
  402690:	a377      	add	r3, pc, #476	; (adr r3, 402870 <__ieee754_pow+0x878>)
  402692:	e9d3 2300 	ldrd	r2, r3, [r3]
  402696:	4606      	mov	r6, r0
  402698:	460f      	mov	r7, r1
  40269a:	4620      	mov	r0, r4
  40269c:	4629      	mov	r1, r5
  40269e:	f000 fd89 	bl	4031b4 <__aeabi_dmul>
  4026a2:	4602      	mov	r2, r0
  4026a4:	460b      	mov	r3, r1
  4026a6:	4630      	mov	r0, r6
  4026a8:	4639      	mov	r1, r7
  4026aa:	f000 fbd1 	bl	402e50 <__adddf3>
  4026ae:	4606      	mov	r6, r0
  4026b0:	460f      	mov	r7, r1
  4026b2:	4602      	mov	r2, r0
  4026b4:	460b      	mov	r3, r1
  4026b6:	4640      	mov	r0, r8
  4026b8:	4649      	mov	r1, r9
  4026ba:	f000 fbc9 	bl	402e50 <__adddf3>
  4026be:	4642      	mov	r2, r8
  4026c0:	464b      	mov	r3, r9
  4026c2:	4604      	mov	r4, r0
  4026c4:	460d      	mov	r5, r1
  4026c6:	f000 fbc1 	bl	402e4c <__aeabi_dsub>
  4026ca:	4602      	mov	r2, r0
  4026cc:	460b      	mov	r3, r1
  4026ce:	4630      	mov	r0, r6
  4026d0:	4639      	mov	r1, r7
  4026d2:	f000 fbbb 	bl	402e4c <__aeabi_dsub>
  4026d6:	4622      	mov	r2, r4
  4026d8:	4680      	mov	r8, r0
  4026da:	4689      	mov	r9, r1
  4026dc:	462b      	mov	r3, r5
  4026de:	4620      	mov	r0, r4
  4026e0:	4629      	mov	r1, r5
  4026e2:	f000 fd67 	bl	4031b4 <__aeabi_dmul>
  4026e6:	a364      	add	r3, pc, #400	; (adr r3, 402878 <__ieee754_pow+0x880>)
  4026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026ec:	4606      	mov	r6, r0
  4026ee:	460f      	mov	r7, r1
  4026f0:	f000 fd60 	bl	4031b4 <__aeabi_dmul>
  4026f4:	a362      	add	r3, pc, #392	; (adr r3, 402880 <__ieee754_pow+0x888>)
  4026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026fa:	f000 fba7 	bl	402e4c <__aeabi_dsub>
  4026fe:	4632      	mov	r2, r6
  402700:	463b      	mov	r3, r7
  402702:	f000 fd57 	bl	4031b4 <__aeabi_dmul>
  402706:	a360      	add	r3, pc, #384	; (adr r3, 402888 <__ieee754_pow+0x890>)
  402708:	e9d3 2300 	ldrd	r2, r3, [r3]
  40270c:	f000 fba0 	bl	402e50 <__adddf3>
  402710:	4632      	mov	r2, r6
  402712:	463b      	mov	r3, r7
  402714:	f000 fd4e 	bl	4031b4 <__aeabi_dmul>
  402718:	a35d      	add	r3, pc, #372	; (adr r3, 402890 <__ieee754_pow+0x898>)
  40271a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40271e:	f000 fb95 	bl	402e4c <__aeabi_dsub>
  402722:	4632      	mov	r2, r6
  402724:	463b      	mov	r3, r7
  402726:	f000 fd45 	bl	4031b4 <__aeabi_dmul>
  40272a:	a35b      	add	r3, pc, #364	; (adr r3, 402898 <__ieee754_pow+0x8a0>)
  40272c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402730:	f000 fb8e 	bl	402e50 <__adddf3>
  402734:	4632      	mov	r2, r6
  402736:	463b      	mov	r3, r7
  402738:	f000 fd3c 	bl	4031b4 <__aeabi_dmul>
  40273c:	4602      	mov	r2, r0
  40273e:	460b      	mov	r3, r1
  402740:	4620      	mov	r0, r4
  402742:	4629      	mov	r1, r5
  402744:	f000 fb82 	bl	402e4c <__aeabi_dsub>
  402748:	4606      	mov	r6, r0
  40274a:	460f      	mov	r7, r1
  40274c:	4602      	mov	r2, r0
  40274e:	460b      	mov	r3, r1
  402750:	4620      	mov	r0, r4
  402752:	4629      	mov	r1, r5
  402754:	f000 fd2e 	bl	4031b4 <__aeabi_dmul>
  402758:	2200      	movs	r2, #0
  40275a:	e9cd 0100 	strd	r0, r1, [sp]
  40275e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402762:	4630      	mov	r0, r6
  402764:	4639      	mov	r1, r7
  402766:	f000 fb71 	bl	402e4c <__aeabi_dsub>
  40276a:	4602      	mov	r2, r0
  40276c:	460b      	mov	r3, r1
  40276e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402772:	f000 fe49 	bl	403408 <__aeabi_ddiv>
  402776:	4642      	mov	r2, r8
  402778:	4606      	mov	r6, r0
  40277a:	460f      	mov	r7, r1
  40277c:	464b      	mov	r3, r9
  40277e:	4620      	mov	r0, r4
  402780:	4629      	mov	r1, r5
  402782:	f000 fd17 	bl	4031b4 <__aeabi_dmul>
  402786:	4642      	mov	r2, r8
  402788:	464b      	mov	r3, r9
  40278a:	f000 fb61 	bl	402e50 <__adddf3>
  40278e:	4602      	mov	r2, r0
  402790:	460b      	mov	r3, r1
  402792:	4630      	mov	r0, r6
  402794:	4639      	mov	r1, r7
  402796:	f000 fb59 	bl	402e4c <__aeabi_dsub>
  40279a:	4622      	mov	r2, r4
  40279c:	462b      	mov	r3, r5
  40279e:	f000 fb55 	bl	402e4c <__aeabi_dsub>
  4027a2:	4602      	mov	r2, r0
  4027a4:	460b      	mov	r3, r1
  4027a6:	2000      	movs	r0, #0
  4027a8:	493f      	ldr	r1, [pc, #252]	; (4028a8 <__ieee754_pow+0x8b0>)
  4027aa:	f000 fb4f 	bl	402e4c <__aeabi_dsub>
  4027ae:	448a      	add	sl, r1
  4027b0:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
  4027b4:	f2c0 8133 	blt.w	402a1e <__ieee754_pow+0xa26>
  4027b8:	4651      	mov	r1, sl
  4027ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4027be:	f000 fcf9 	bl	4031b4 <__aeabi_dmul>
  4027c2:	e45b      	b.n	40207c <__ieee754_pow+0x84>
  4027c4:	4642      	mov	r2, r8
  4027c6:	4640      	mov	r0, r8
  4027c8:	464b      	mov	r3, r9
  4027ca:	4649      	mov	r1, r9
  4027cc:	f000 fcf2 	bl	4031b4 <__aeabi_dmul>
  4027d0:	e454      	b.n	40207c <__ieee754_pow+0x84>
  4027d2:	f1ba 0f00 	cmp.w	sl, #0
  4027d6:	f6bf ace0 	bge.w	40219a <__ieee754_pow+0x1a2>
  4027da:	e9dd 3400 	ldrd	r3, r4, [sp]
  4027de:	4618      	mov	r0, r3
  4027e0:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  4027e4:	e44a      	b.n	40207c <__ieee754_pow+0x84>
  4027e6:	4b34      	ldr	r3, [pc, #208]	; (4028b8 <__ieee754_pow+0x8c0>)
  4027e8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  4027ec:	4598      	cmp	r8, r3
  4027ee:	f340 80f2 	ble.w	4029d6 <__ieee754_pow+0x9de>
  4027f2:	4b32      	ldr	r3, [pc, #200]	; (4028bc <__ieee754_pow+0x8c4>)
  4027f4:	440b      	add	r3, r1
  4027f6:	4303      	orrs	r3, r0
  4027f8:	d10c      	bne.n	402814 <__ieee754_pow+0x81c>
  4027fa:	4632      	mov	r2, r6
  4027fc:	463b      	mov	r3, r7
  4027fe:	f000 fb25 	bl	402e4c <__aeabi_dsub>
  402802:	4602      	mov	r2, r0
  402804:	460b      	mov	r3, r1
  402806:	e9dd 0100 	ldrd	r0, r1, [sp]
  40280a:	f000 ff4f 	bl	4036ac <__aeabi_dcmple>
  40280e:	2800      	cmp	r0, #0
  402810:	f43f aef3 	beq.w	4025fa <__ieee754_pow+0x602>
  402814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402818:	a321      	add	r3, pc, #132	; (adr r3, 4028a0 <__ieee754_pow+0x8a8>)
  40281a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40281e:	f000 fcc9 	bl	4031b4 <__aeabi_dmul>
  402822:	a31f      	add	r3, pc, #124	; (adr r3, 4028a0 <__ieee754_pow+0x8a8>)
  402824:	e9d3 2300 	ldrd	r2, r3, [r3]
  402828:	f000 fcc4 	bl	4031b4 <__aeabi_dmul>
  40282c:	e426      	b.n	40207c <__ieee754_pow+0x84>
  40282e:	4602      	mov	r2, r0
  402830:	460b      	mov	r3, r1
  402832:	2000      	movs	r0, #0
  402834:	491c      	ldr	r1, [pc, #112]	; (4028a8 <__ieee754_pow+0x8b0>)
  402836:	f000 fde7 	bl	403408 <__aeabi_ddiv>
  40283a:	e43c      	b.n	4020b6 <__ieee754_pow+0xbe>
  40283c:	2200      	movs	r2, #0
  40283e:	2300      	movs	r3, #0
  402840:	e9cd 2308 	strd	r2, r3, [sp, #32]
  402844:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402848:	4b17      	ldr	r3, [pc, #92]	; (4028a8 <__ieee754_pow+0x8b0>)
  40284a:	2200      	movs	r2, #0
  40284c:	2700      	movs	r7, #0
  40284e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402852:	e4e6      	b.n	402222 <__ieee754_pow+0x22a>
  402854:	f3af 8000 	nop.w
  402858:	652b82fe 	.word	0x652b82fe
  40285c:	3c971547 	.word	0x3c971547
  402860:	00000000 	.word	0x00000000
  402864:	3fe62e43 	.word	0x3fe62e43
  402868:	fefa39ef 	.word	0xfefa39ef
  40286c:	3fe62e42 	.word	0x3fe62e42
  402870:	0ca86c39 	.word	0x0ca86c39
  402874:	be205c61 	.word	0xbe205c61
  402878:	72bea4d0 	.word	0x72bea4d0
  40287c:	3e663769 	.word	0x3e663769
  402880:	c5d26bf1 	.word	0xc5d26bf1
  402884:	3ebbbd41 	.word	0x3ebbbd41
  402888:	af25de2c 	.word	0xaf25de2c
  40288c:	3f11566a 	.word	0x3f11566a
  402890:	16bebd93 	.word	0x16bebd93
  402894:	3f66c16c 	.word	0x3f66c16c
  402898:	5555553e 	.word	0x5555553e
  40289c:	3fc55555 	.word	0x3fc55555
  4028a0:	c2f8f359 	.word	0xc2f8f359
  4028a4:	01a56e1f 	.word	0x01a56e1f
  4028a8:	3ff00000 	.word	0x3ff00000
  4028ac:	bff00000 	.word	0xbff00000
  4028b0:	408fffff 	.word	0x408fffff
  4028b4:	000fffff 	.word	0x000fffff
  4028b8:	4090cbff 	.word	0x4090cbff
  4028bc:	3f6f3400 	.word	0x3f6f3400
  4028c0:	4b6b      	ldr	r3, [pc, #428]	; (402a70 <__ieee754_pow+0xa78>)
  4028c2:	429e      	cmp	r6, r3
  4028c4:	f77f ac66 	ble.w	402194 <__ieee754_pow+0x19c>
  4028c8:	4b6a      	ldr	r3, [pc, #424]	; (402a74 <__ieee754_pow+0xa7c>)
  4028ca:	429e      	cmp	r6, r3
  4028cc:	f73f ac13 	bgt.w	4020f6 <__ieee754_pow+0xfe>
  4028d0:	2200      	movs	r2, #0
  4028d2:	4b68      	ldr	r3, [pc, #416]	; (402a74 <__ieee754_pow+0xa7c>)
  4028d4:	f000 faba 	bl	402e4c <__aeabi_dsub>
  4028d8:	a357      	add	r3, pc, #348	; (adr r3, 402a38 <__ieee754_pow+0xa40>)
  4028da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4028de:	4606      	mov	r6, r0
  4028e0:	460f      	mov	r7, r1
  4028e2:	f000 fc67 	bl	4031b4 <__aeabi_dmul>
  4028e6:	a356      	add	r3, pc, #344	; (adr r3, 402a40 <__ieee754_pow+0xa48>)
  4028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4028ec:	4680      	mov	r8, r0
  4028ee:	4689      	mov	r9, r1
  4028f0:	4630      	mov	r0, r6
  4028f2:	4639      	mov	r1, r7
  4028f4:	f000 fc5e 	bl	4031b4 <__aeabi_dmul>
  4028f8:	2200      	movs	r2, #0
  4028fa:	4682      	mov	sl, r0
  4028fc:	468b      	mov	fp, r1
  4028fe:	4b5e      	ldr	r3, [pc, #376]	; (402a78 <__ieee754_pow+0xa80>)
  402900:	4630      	mov	r0, r6
  402902:	4639      	mov	r1, r7
  402904:	f000 fc56 	bl	4031b4 <__aeabi_dmul>
  402908:	4602      	mov	r2, r0
  40290a:	460b      	mov	r3, r1
  40290c:	a14e      	add	r1, pc, #312	; (adr r1, 402a48 <__ieee754_pow+0xa50>)
  40290e:	e9d1 0100 	ldrd	r0, r1, [r1]
  402912:	f000 fa9b 	bl	402e4c <__aeabi_dsub>
  402916:	4632      	mov	r2, r6
  402918:	463b      	mov	r3, r7
  40291a:	f000 fc4b 	bl	4031b4 <__aeabi_dmul>
  40291e:	4602      	mov	r2, r0
  402920:	460b      	mov	r3, r1
  402922:	2000      	movs	r0, #0
  402924:	4955      	ldr	r1, [pc, #340]	; (402a7c <__ieee754_pow+0xa84>)
  402926:	f000 fa91 	bl	402e4c <__aeabi_dsub>
  40292a:	4632      	mov	r2, r6
  40292c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402930:	463b      	mov	r3, r7
  402932:	4630      	mov	r0, r6
  402934:	4639      	mov	r1, r7
  402936:	f000 fc3d 	bl	4031b4 <__aeabi_dmul>
  40293a:	4602      	mov	r2, r0
  40293c:	460b      	mov	r3, r1
  40293e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402942:	f000 fc37 	bl	4031b4 <__aeabi_dmul>
  402946:	a342      	add	r3, pc, #264	; (adr r3, 402a50 <__ieee754_pow+0xa58>)
  402948:	e9d3 2300 	ldrd	r2, r3, [r3]
  40294c:	f000 fc32 	bl	4031b4 <__aeabi_dmul>
  402950:	4602      	mov	r2, r0
  402952:	460b      	mov	r3, r1
  402954:	4650      	mov	r0, sl
  402956:	4659      	mov	r1, fp
  402958:	f000 fa78 	bl	402e4c <__aeabi_dsub>
  40295c:	4602      	mov	r2, r0
  40295e:	460b      	mov	r3, r1
  402960:	4606      	mov	r6, r0
  402962:	460f      	mov	r7, r1
  402964:	4640      	mov	r0, r8
  402966:	4649      	mov	r1, r9
  402968:	f000 fa72 	bl	402e50 <__adddf3>
  40296c:	4642      	mov	r2, r8
  40296e:	464b      	mov	r3, r9
  402970:	2000      	movs	r0, #0
  402972:	4682      	mov	sl, r0
  402974:	468b      	mov	fp, r1
  402976:	f000 fa69 	bl	402e4c <__aeabi_dsub>
  40297a:	4602      	mov	r2, r0
  40297c:	460b      	mov	r3, r1
  40297e:	4630      	mov	r0, r6
  402980:	4639      	mov	r1, r7
  402982:	f000 fa63 	bl	402e4c <__aeabi_dsub>
  402986:	4680      	mov	r8, r0
  402988:	4689      	mov	r9, r1
  40298a:	e5d4      	b.n	402536 <__ieee754_pow+0x53e>
  40298c:	4642      	mov	r2, r8
  40298e:	464b      	mov	r3, r9
  402990:	2000      	movs	r0, #0
  402992:	4938      	ldr	r1, [pc, #224]	; (402a74 <__ieee754_pow+0xa7c>)
  402994:	f000 fd38 	bl	403408 <__aeabi_ddiv>
  402998:	f7ff bb70 	b.w	40207c <__ieee754_pow+0x84>
  40299c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4029a0:	a32d      	add	r3, pc, #180	; (adr r3, 402a58 <__ieee754_pow+0xa60>)
  4029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029a6:	f000 fc05 	bl	4031b4 <__aeabi_dmul>
  4029aa:	a32b      	add	r3, pc, #172	; (adr r3, 402a58 <__ieee754_pow+0xa60>)
  4029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029b0:	f000 fc00 	bl	4031b4 <__aeabi_dmul>
  4029b4:	f7ff bb62 	b.w	40207c <__ieee754_pow+0x84>
  4029b8:	f1be 0f00 	cmp.w	lr, #0
  4029bc:	f47f ab69 	bne.w	402092 <__ieee754_pow+0x9a>
  4029c0:	f1c3 0314 	rsb	r3, r3, #20
  4029c4:	fa47 f203 	asr.w	r2, r7, r3
  4029c8:	fa02 f303 	lsl.w	r3, r2, r3
  4029cc:	429f      	cmp	r7, r3
  4029ce:	d02a      	beq.n	402a26 <__ieee754_pow+0xa2e>
  4029d0:	4674      	mov	r4, lr
  4029d2:	f7ff bb36 	b.w	402042 <__ieee754_pow+0x4a>
  4029d6:	4b29      	ldr	r3, [pc, #164]	; (402a7c <__ieee754_pow+0xa84>)
  4029d8:	4598      	cmp	r8, r3
  4029da:	f73f ae0e 	bgt.w	4025fa <__ieee754_pow+0x602>
  4029de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4029e2:	4692      	mov	sl, r2
  4029e4:	4693      	mov	fp, r2
  4029e6:	e638      	b.n	40265a <__ieee754_pow+0x662>
  4029e8:	4602      	mov	r2, r0
  4029ea:	460b      	mov	r3, r1
  4029ec:	f000 fa2e 	bl	402e4c <__aeabi_dsub>
  4029f0:	4602      	mov	r2, r0
  4029f2:	460b      	mov	r3, r1
  4029f4:	f000 fd08 	bl	403408 <__aeabi_ddiv>
  4029f8:	f7ff bb40 	b.w	40207c <__ieee754_pow+0x84>
  4029fc:	a318      	add	r3, pc, #96	; (adr r3, 402a60 <__ieee754_pow+0xa68>)
  4029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a02:	e9cd 2308 	strd	r2, r3, [sp, #32]
  402a06:	a318      	add	r3, pc, #96	; (adr r3, 402a68 <__ieee754_pow+0xa70>)
  402a08:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a0c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402a10:	4b1b      	ldr	r3, [pc, #108]	; (402a80 <__ieee754_pow+0xa88>)
  402a12:	2200      	movs	r2, #0
  402a14:	f44f 2780 	mov.w	r7, #262144	; 0x40000
  402a18:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402a1c:	e401      	b.n	402222 <__ieee754_pow+0x22a>
  402a1e:	465a      	mov	r2, fp
  402a20:	f000 f98a 	bl	402d38 <scalbn>
  402a24:	e6c9      	b.n	4027ba <__ieee754_pow+0x7c2>
  402a26:	f002 0201 	and.w	r2, r2, #1
  402a2a:	f1c2 0402 	rsb	r4, r2, #2
  402a2e:	f7ff bb08 	b.w	402042 <__ieee754_pow+0x4a>
  402a32:	bf00      	nop
  402a34:	f3af 8000 	nop.w
  402a38:	60000000 	.word	0x60000000
  402a3c:	3ff71547 	.word	0x3ff71547
  402a40:	f85ddf44 	.word	0xf85ddf44
  402a44:	3e54ae0b 	.word	0x3e54ae0b
  402a48:	55555555 	.word	0x55555555
  402a4c:	3fd55555 	.word	0x3fd55555
  402a50:	652b82fe 	.word	0x652b82fe
  402a54:	3ff71547 	.word	0x3ff71547
  402a58:	8800759c 	.word	0x8800759c
  402a5c:	7e37e43c 	.word	0x7e37e43c
  402a60:	40000000 	.word	0x40000000
  402a64:	3fe2b803 	.word	0x3fe2b803
  402a68:	43cfd006 	.word	0x43cfd006
  402a6c:	3e4cfdeb 	.word	0x3e4cfdeb
  402a70:	3feffffe 	.word	0x3feffffe
  402a74:	3ff00000 	.word	0x3ff00000
  402a78:	3fd00000 	.word	0x3fd00000
  402a7c:	3fe00000 	.word	0x3fe00000
  402a80:	3ff80000 	.word	0x3ff80000

00402a84 <__ieee754_sqrt>:
  402a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402a88:	4f5b      	ldr	r7, [pc, #364]	; (402bf8 <__ieee754_sqrt+0x174>)
  402a8a:	438f      	bics	r7, r1
  402a8c:	4605      	mov	r5, r0
  402a8e:	460c      	mov	r4, r1
  402a90:	f000 8092 	beq.w	402bb8 <__ieee754_sqrt+0x134>
  402a94:	2900      	cmp	r1, #0
  402a96:	460b      	mov	r3, r1
  402a98:	4602      	mov	r2, r0
  402a9a:	dd6f      	ble.n	402b7c <__ieee754_sqrt+0xf8>
  402a9c:	150f      	asrs	r7, r1, #20
  402a9e:	d07b      	beq.n	402b98 <__ieee754_sqrt+0x114>
  402aa0:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  402aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
  402aa8:	07f8      	lsls	r0, r7, #31
  402aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402aae:	d45c      	bmi.n	402b6a <__ieee754_sqrt+0xe6>
  402ab0:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  402ab4:	2600      	movs	r6, #0
  402ab6:	440b      	add	r3, r1
  402ab8:	107f      	asrs	r7, r7, #1
  402aba:	0052      	lsls	r2, r2, #1
  402abc:	46b6      	mov	lr, r6
  402abe:	2016      	movs	r0, #22
  402ac0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402ac4:	eb0e 0401 	add.w	r4, lr, r1
  402ac8:	429c      	cmp	r4, r3
  402aca:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  402ace:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402ad2:	dc03      	bgt.n	402adc <__ieee754_sqrt+0x58>
  402ad4:	1b1b      	subs	r3, r3, r4
  402ad6:	eb04 0e01 	add.w	lr, r4, r1
  402ada:	440e      	add	r6, r1
  402adc:	3801      	subs	r0, #1
  402ade:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  402ae2:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402ae6:	d1ed      	bne.n	402ac4 <__ieee754_sqrt+0x40>
  402ae8:	4684      	mov	ip, r0
  402aea:	2420      	movs	r4, #32
  402aec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402af0:	e009      	b.n	402b06 <__ieee754_sqrt+0x82>
  402af2:	d020      	beq.n	402b36 <__ieee754_sqrt+0xb2>
  402af4:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  402af8:	3c01      	subs	r4, #1
  402afa:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402afe:	442b      	add	r3, r5
  402b00:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402b04:	d020      	beq.n	402b48 <__ieee754_sqrt+0xc4>
  402b06:	4573      	cmp	r3, lr
  402b08:	eb01 050c 	add.w	r5, r1, ip
  402b0c:	ddf1      	ble.n	402af2 <__ieee754_sqrt+0x6e>
  402b0e:	2d00      	cmp	r5, #0
  402b10:	eb05 0c01 	add.w	ip, r5, r1
  402b14:	db09      	blt.n	402b2a <__ieee754_sqrt+0xa6>
  402b16:	46f0      	mov	r8, lr
  402b18:	4295      	cmp	r5, r2
  402b1a:	eba3 030e 	sub.w	r3, r3, lr
  402b1e:	d900      	bls.n	402b22 <__ieee754_sqrt+0x9e>
  402b20:	3b01      	subs	r3, #1
  402b22:	1b52      	subs	r2, r2, r5
  402b24:	4408      	add	r0, r1
  402b26:	46c6      	mov	lr, r8
  402b28:	e7e4      	b.n	402af4 <__ieee754_sqrt+0x70>
  402b2a:	f1bc 0f00 	cmp.w	ip, #0
  402b2e:	dbf2      	blt.n	402b16 <__ieee754_sqrt+0x92>
  402b30:	f10e 0801 	add.w	r8, lr, #1
  402b34:	e7f0      	b.n	402b18 <__ieee754_sqrt+0x94>
  402b36:	4295      	cmp	r5, r2
  402b38:	d8dc      	bhi.n	402af4 <__ieee754_sqrt+0x70>
  402b3a:	2d00      	cmp	r5, #0
  402b3c:	eb05 0c01 	add.w	ip, r5, r1
  402b40:	db44      	blt.n	402bcc <__ieee754_sqrt+0x148>
  402b42:	4698      	mov	r8, r3
  402b44:	2300      	movs	r3, #0
  402b46:	e7ec      	b.n	402b22 <__ieee754_sqrt+0x9e>
  402b48:	4313      	orrs	r3, r2
  402b4a:	d113      	bne.n	402b74 <__ieee754_sqrt+0xf0>
  402b4c:	0840      	lsrs	r0, r0, #1
  402b4e:	1073      	asrs	r3, r6, #1
  402b50:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402b54:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402b58:	07f2      	lsls	r2, r6, #31
  402b5a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  402b5e:	bf48      	it	mi
  402b60:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402b64:	4649      	mov	r1, r9
  402b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402b6a:	005b      	lsls	r3, r3, #1
  402b6c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  402b70:	0052      	lsls	r2, r2, #1
  402b72:	e79d      	b.n	402ab0 <__ieee754_sqrt+0x2c>
  402b74:	1c41      	adds	r1, r0, #1
  402b76:	d02d      	beq.n	402bd4 <__ieee754_sqrt+0x150>
  402b78:	3001      	adds	r0, #1
  402b7a:	e7e7      	b.n	402b4c <__ieee754_sqrt+0xc8>
  402b7c:	4606      	mov	r6, r0
  402b7e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  402b82:	433e      	orrs	r6, r7
  402b84:	d0ef      	beq.n	402b66 <__ieee754_sqrt+0xe2>
  402b86:	bb69      	cbnz	r1, 402be4 <__ieee754_sqrt+0x160>
  402b88:	460f      	mov	r7, r1
  402b8a:	0ad3      	lsrs	r3, r2, #11
  402b8c:	3f15      	subs	r7, #21
  402b8e:	0552      	lsls	r2, r2, #21
  402b90:	2b00      	cmp	r3, #0
  402b92:	d0fa      	beq.n	402b8a <__ieee754_sqrt+0x106>
  402b94:	02de      	lsls	r6, r3, #11
  402b96:	d420      	bmi.n	402bda <__ieee754_sqrt+0x156>
  402b98:	2400      	movs	r4, #0
  402b9a:	e000      	b.n	402b9e <__ieee754_sqrt+0x11a>
  402b9c:	4604      	mov	r4, r0
  402b9e:	005b      	lsls	r3, r3, #1
  402ba0:	02dd      	lsls	r5, r3, #11
  402ba2:	f104 0001 	add.w	r0, r4, #1
  402ba6:	d5f9      	bpl.n	402b9c <__ieee754_sqrt+0x118>
  402ba8:	f1c0 0120 	rsb	r1, r0, #32
  402bac:	fa22 f101 	lsr.w	r1, r2, r1
  402bb0:	430b      	orrs	r3, r1
  402bb2:	1b3f      	subs	r7, r7, r4
  402bb4:	4082      	lsls	r2, r0
  402bb6:	e773      	b.n	402aa0 <__ieee754_sqrt+0x1c>
  402bb8:	4602      	mov	r2, r0
  402bba:	460b      	mov	r3, r1
  402bbc:	f000 fafa 	bl	4031b4 <__aeabi_dmul>
  402bc0:	462a      	mov	r2, r5
  402bc2:	4623      	mov	r3, r4
  402bc4:	f000 f944 	bl	402e50 <__adddf3>
  402bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402bcc:	f1bc 0f00 	cmp.w	ip, #0
  402bd0:	daae      	bge.n	402b30 <__ieee754_sqrt+0xac>
  402bd2:	e7b6      	b.n	402b42 <__ieee754_sqrt+0xbe>
  402bd4:	3601      	adds	r6, #1
  402bd6:	4620      	mov	r0, r4
  402bd8:	e7b9      	b.n	402b4e <__ieee754_sqrt+0xca>
  402bda:	2000      	movs	r0, #0
  402bdc:	2120      	movs	r1, #32
  402bde:	f04f 34ff 	mov.w	r4, #4294967295
  402be2:	e7e3      	b.n	402bac <__ieee754_sqrt+0x128>
  402be4:	4602      	mov	r2, r0
  402be6:	460b      	mov	r3, r1
  402be8:	f000 f930 	bl	402e4c <__aeabi_dsub>
  402bec:	4602      	mov	r2, r0
  402bee:	460b      	mov	r3, r1
  402bf0:	f000 fc0a 	bl	403408 <__aeabi_ddiv>
  402bf4:	e7b7      	b.n	402b66 <__ieee754_sqrt+0xe2>
  402bf6:	bf00      	nop
  402bf8:	7ff00000 	.word	0x7ff00000

00402bfc <fabs>:
  402bfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402c00:	4770      	bx	lr
  402c02:	bf00      	nop

00402c04 <finite>:
  402c04:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  402c08:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
  402c0c:	0fc0      	lsrs	r0, r0, #31
  402c0e:	4770      	bx	lr

00402c10 <matherr>:
  402c10:	2000      	movs	r0, #0
  402c12:	4770      	bx	lr

00402c14 <nan>:
  402c14:	2000      	movs	r0, #0
  402c16:	4901      	ldr	r1, [pc, #4]	; (402c1c <nan+0x8>)
  402c18:	4770      	bx	lr
  402c1a:	bf00      	nop
  402c1c:	7ff80000 	.word	0x7ff80000

00402c20 <rint>:
  402c20:	b5f0      	push	{r4, r5, r6, r7, lr}
  402c22:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
  402c26:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
  402c2a:	2e13      	cmp	r6, #19
  402c2c:	b083      	sub	sp, #12
  402c2e:	4602      	mov	r2, r0
  402c30:	460b      	mov	r3, r1
  402c32:	460c      	mov	r4, r1
  402c34:	ea4f 75d1 	mov.w	r5, r1, lsr #31
  402c38:	4607      	mov	r7, r0
  402c3a:	dc2e      	bgt.n	402c9a <rint+0x7a>
  402c3c:	2e00      	cmp	r6, #0
  402c3e:	db49      	blt.n	402cd4 <rint+0xb4>
  402c40:	493a      	ldr	r1, [pc, #232]	; (402d2c <rint+0x10c>)
  402c42:	4131      	asrs	r1, r6
  402c44:	ea03 0001 	and.w	r0, r3, r1
  402c48:	4310      	orrs	r0, r2
  402c4a:	d02b      	beq.n	402ca4 <rint+0x84>
  402c4c:	0849      	lsrs	r1, r1, #1
  402c4e:	400b      	ands	r3, r1
  402c50:	ea53 0702 	orrs.w	r7, r3, r2
  402c54:	d00c      	beq.n	402c70 <rint+0x50>
  402c56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  402c5a:	2e13      	cmp	r6, #19
  402c5c:	ea24 0101 	bic.w	r1, r4, r1
  402c60:	fa43 f406 	asr.w	r4, r3, r6
  402c64:	ea44 0401 	orr.w	r4, r4, r1
  402c68:	bf0c      	ite	eq
  402c6a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
  402c6e:	2700      	movne	r7, #0
  402c70:	4b2f      	ldr	r3, [pc, #188]	; (402d30 <rint+0x110>)
  402c72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  402c76:	4621      	mov	r1, r4
  402c78:	e9d5 4500 	ldrd	r4, r5, [r5]
  402c7c:	4638      	mov	r0, r7
  402c7e:	4622      	mov	r2, r4
  402c80:	462b      	mov	r3, r5
  402c82:	f000 f8e5 	bl	402e50 <__adddf3>
  402c86:	e9cd 0100 	strd	r0, r1, [sp]
  402c8a:	4622      	mov	r2, r4
  402c8c:	462b      	mov	r3, r5
  402c8e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402c92:	f000 f8db 	bl	402e4c <__aeabi_dsub>
  402c96:	b003      	add	sp, #12
  402c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c9a:	2e33      	cmp	r6, #51	; 0x33
  402c9c:	dd06      	ble.n	402cac <rint+0x8c>
  402c9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  402ca2:	d040      	beq.n	402d26 <rint+0x106>
  402ca4:	4610      	mov	r0, r2
  402ca6:	4619      	mov	r1, r3
  402ca8:	b003      	add	sp, #12
  402caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402cac:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
  402cb0:	f04f 31ff 	mov.w	r1, #4294967295
  402cb4:	fa21 f10e 	lsr.w	r1, r1, lr
  402cb8:	4208      	tst	r0, r1
  402cba:	d0f3      	beq.n	402ca4 <rint+0x84>
  402cbc:	0849      	lsrs	r1, r1, #1
  402cbe:	4208      	tst	r0, r1
  402cc0:	d0d6      	beq.n	402c70 <rint+0x50>
  402cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402cc6:	ea20 0101 	bic.w	r1, r0, r1
  402cca:	fa43 fe0e 	asr.w	lr, r3, lr
  402cce:	ea4e 0701 	orr.w	r7, lr, r1
  402cd2:	e7cd      	b.n	402c70 <rint+0x50>
  402cd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402cd8:	4301      	orrs	r1, r0
  402cda:	d0e3      	beq.n	402ca4 <rint+0x84>
  402cdc:	f3c3 0113 	ubfx	r1, r3, #0, #20
  402ce0:	4e13      	ldr	r6, [pc, #76]	; (402d30 <rint+0x110>)
  402ce2:	4301      	orrs	r1, r0
  402ce4:	f1c1 0c00 	rsb	ip, r1, #0
  402ce8:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
  402cec:	e9d6 6700 	ldrd	r6, r7, [r6]
  402cf0:	ea4c 0c01 	orr.w	ip, ip, r1
  402cf4:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
  402cf8:	0c5c      	lsrs	r4, r3, #17
  402cfa:	0464      	lsls	r4, r4, #17
  402cfc:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
  402d00:	ea43 0104 	orr.w	r1, r3, r4
  402d04:	4632      	mov	r2, r6
  402d06:	463b      	mov	r3, r7
  402d08:	f000 f8a2 	bl	402e50 <__adddf3>
  402d0c:	e9cd 0100 	strd	r0, r1, [sp]
  402d10:	4632      	mov	r2, r6
  402d12:	463b      	mov	r3, r7
  402d14:	e9dd 0100 	ldrd	r0, r1, [sp]
  402d18:	f000 f898 	bl	402e4c <__aeabi_dsub>
  402d1c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  402d20:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
  402d24:	e7c0      	b.n	402ca8 <rint+0x88>
  402d26:	f000 f893 	bl	402e50 <__adddf3>
  402d2a:	e7bd      	b.n	402ca8 <rint+0x88>
  402d2c:	000fffff 	.word	0x000fffff
  402d30:	00404d00 	.word	0x00404d00
  402d34:	00000000 	.word	0x00000000

00402d38 <scalbn>:
  402d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d3a:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402d3e:	4604      	mov	r4, r0
  402d40:	460d      	mov	r5, r1
  402d42:	460b      	mov	r3, r1
  402d44:	4617      	mov	r7, r2
  402d46:	bb0e      	cbnz	r6, 402d8c <scalbn+0x54>
  402d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402d4c:	4303      	orrs	r3, r0
  402d4e:	4686      	mov	lr, r0
  402d50:	d025      	beq.n	402d9e <scalbn+0x66>
  402d52:	2200      	movs	r2, #0
  402d54:	4b34      	ldr	r3, [pc, #208]	; (402e28 <scalbn+0xf0>)
  402d56:	f000 fa2d 	bl	4031b4 <__aeabi_dmul>
  402d5a:	4a34      	ldr	r2, [pc, #208]	; (402e2c <scalbn+0xf4>)
  402d5c:	4297      	cmp	r7, r2
  402d5e:	4604      	mov	r4, r0
  402d60:	460d      	mov	r5, r1
  402d62:	460b      	mov	r3, r1
  402d64:	db2a      	blt.n	402dbc <scalbn+0x84>
  402d66:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402d6a:	3e36      	subs	r6, #54	; 0x36
  402d6c:	443e      	add	r6, r7
  402d6e:	f240 72fe 	movw	r2, #2046	; 0x7fe
  402d72:	4296      	cmp	r6, r2
  402d74:	dc28      	bgt.n	402dc8 <scalbn+0x90>
  402d76:	2e00      	cmp	r6, #0
  402d78:	dd12      	ble.n	402da0 <scalbn+0x68>
  402d7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402d7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402d82:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402d86:	4620      	mov	r0, r4
  402d88:	4629      	mov	r1, r5
  402d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d8c:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402d90:	4296      	cmp	r6, r2
  402d92:	d1eb      	bne.n	402d6c <scalbn+0x34>
  402d94:	4602      	mov	r2, r0
  402d96:	460b      	mov	r3, r1
  402d98:	f000 f85a 	bl	402e50 <__adddf3>
  402d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402da0:	f116 0f35 	cmn.w	r6, #53	; 0x35
  402da4:	da1d      	bge.n	402de2 <scalbn+0xaa>
  402da6:	f24c 3350 	movw	r3, #50000	; 0xc350
  402daa:	429f      	cmp	r7, r3
  402dac:	4622      	mov	r2, r4
  402dae:	462b      	mov	r3, r5
  402db0:	dc25      	bgt.n	402dfe <scalbn+0xc6>
  402db2:	a119      	add	r1, pc, #100	; (adr r1, 402e18 <scalbn+0xe0>)
  402db4:	e9d1 0100 	ldrd	r0, r1, [r1]
  402db8:	f000 f83c 	bl	402e34 <copysign>
  402dbc:	a316      	add	r3, pc, #88	; (adr r3, 402e18 <scalbn+0xe0>)
  402dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  402dc2:	f000 f9f7 	bl	4031b4 <__aeabi_dmul>
  402dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402dc8:	4622      	mov	r2, r4
  402dca:	462b      	mov	r3, r5
  402dcc:	a114      	add	r1, pc, #80	; (adr r1, 402e20 <scalbn+0xe8>)
  402dce:	e9d1 0100 	ldrd	r0, r1, [r1]
  402dd2:	f000 f82f 	bl	402e34 <copysign>
  402dd6:	a312      	add	r3, pc, #72	; (adr r3, 402e20 <scalbn+0xe8>)
  402dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ddc:	f000 f9ea 	bl	4031b4 <__aeabi_dmul>
  402de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402de2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402de6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402dea:	3636      	adds	r6, #54	; 0x36
  402dec:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402df0:	4620      	mov	r0, r4
  402df2:	4629      	mov	r1, r5
  402df4:	2200      	movs	r2, #0
  402df6:	4b0e      	ldr	r3, [pc, #56]	; (402e30 <scalbn+0xf8>)
  402df8:	f000 f9dc 	bl	4031b4 <__aeabi_dmul>
  402dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402dfe:	a108      	add	r1, pc, #32	; (adr r1, 402e20 <scalbn+0xe8>)
  402e00:	e9d1 0100 	ldrd	r0, r1, [r1]
  402e04:	f000 f816 	bl	402e34 <copysign>
  402e08:	a305      	add	r3, pc, #20	; (adr r3, 402e20 <scalbn+0xe8>)
  402e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e0e:	f000 f9d1 	bl	4031b4 <__aeabi_dmul>
  402e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e14:	f3af 8000 	nop.w
  402e18:	c2f8f359 	.word	0xc2f8f359
  402e1c:	01a56e1f 	.word	0x01a56e1f
  402e20:	8800759c 	.word	0x8800759c
  402e24:	7e37e43c 	.word	0x7e37e43c
  402e28:	43500000 	.word	0x43500000
  402e2c:	ffff3cb0 	.word	0xffff3cb0
  402e30:	3c900000 	.word	0x3c900000

00402e34 <copysign>:
  402e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  402e38:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  402e3c:	ea42 0103 	orr.w	r1, r2, r3
  402e40:	4770      	bx	lr
  402e42:	bf00      	nop

00402e44 <__aeabi_drsub>:
  402e44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402e48:	e002      	b.n	402e50 <__adddf3>
  402e4a:	bf00      	nop

00402e4c <__aeabi_dsub>:
  402e4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402e50 <__adddf3>:
  402e50:	b530      	push	{r4, r5, lr}
  402e52:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402e56:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402e5a:	ea94 0f05 	teq	r4, r5
  402e5e:	bf08      	it	eq
  402e60:	ea90 0f02 	teqeq	r0, r2
  402e64:	bf1f      	itttt	ne
  402e66:	ea54 0c00 	orrsne.w	ip, r4, r0
  402e6a:	ea55 0c02 	orrsne.w	ip, r5, r2
  402e6e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402e72:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402e76:	f000 80e2 	beq.w	40303e <__adddf3+0x1ee>
  402e7a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402e7e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402e82:	bfb8      	it	lt
  402e84:	426d      	neglt	r5, r5
  402e86:	dd0c      	ble.n	402ea2 <__adddf3+0x52>
  402e88:	442c      	add	r4, r5
  402e8a:	ea80 0202 	eor.w	r2, r0, r2
  402e8e:	ea81 0303 	eor.w	r3, r1, r3
  402e92:	ea82 0000 	eor.w	r0, r2, r0
  402e96:	ea83 0101 	eor.w	r1, r3, r1
  402e9a:	ea80 0202 	eor.w	r2, r0, r2
  402e9e:	ea81 0303 	eor.w	r3, r1, r3
  402ea2:	2d36      	cmp	r5, #54	; 0x36
  402ea4:	bf88      	it	hi
  402ea6:	bd30      	pophi	{r4, r5, pc}
  402ea8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402eac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402eb0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402eb4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402eb8:	d002      	beq.n	402ec0 <__adddf3+0x70>
  402eba:	4240      	negs	r0, r0
  402ebc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402ec0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402ec4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402ec8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402ecc:	d002      	beq.n	402ed4 <__adddf3+0x84>
  402ece:	4252      	negs	r2, r2
  402ed0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402ed4:	ea94 0f05 	teq	r4, r5
  402ed8:	f000 80a7 	beq.w	40302a <__adddf3+0x1da>
  402edc:	f1a4 0401 	sub.w	r4, r4, #1
  402ee0:	f1d5 0e20 	rsbs	lr, r5, #32
  402ee4:	db0d      	blt.n	402f02 <__adddf3+0xb2>
  402ee6:	fa02 fc0e 	lsl.w	ip, r2, lr
  402eea:	fa22 f205 	lsr.w	r2, r2, r5
  402eee:	1880      	adds	r0, r0, r2
  402ef0:	f141 0100 	adc.w	r1, r1, #0
  402ef4:	fa03 f20e 	lsl.w	r2, r3, lr
  402ef8:	1880      	adds	r0, r0, r2
  402efa:	fa43 f305 	asr.w	r3, r3, r5
  402efe:	4159      	adcs	r1, r3
  402f00:	e00e      	b.n	402f20 <__adddf3+0xd0>
  402f02:	f1a5 0520 	sub.w	r5, r5, #32
  402f06:	f10e 0e20 	add.w	lr, lr, #32
  402f0a:	2a01      	cmp	r2, #1
  402f0c:	fa03 fc0e 	lsl.w	ip, r3, lr
  402f10:	bf28      	it	cs
  402f12:	f04c 0c02 	orrcs.w	ip, ip, #2
  402f16:	fa43 f305 	asr.w	r3, r3, r5
  402f1a:	18c0      	adds	r0, r0, r3
  402f1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402f20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402f24:	d507      	bpl.n	402f36 <__adddf3+0xe6>
  402f26:	f04f 0e00 	mov.w	lr, #0
  402f2a:	f1dc 0c00 	rsbs	ip, ip, #0
  402f2e:	eb7e 0000 	sbcs.w	r0, lr, r0
  402f32:	eb6e 0101 	sbc.w	r1, lr, r1
  402f36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402f3a:	d31b      	bcc.n	402f74 <__adddf3+0x124>
  402f3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402f40:	d30c      	bcc.n	402f5c <__adddf3+0x10c>
  402f42:	0849      	lsrs	r1, r1, #1
  402f44:	ea5f 0030 	movs.w	r0, r0, rrx
  402f48:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402f4c:	f104 0401 	add.w	r4, r4, #1
  402f50:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402f54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402f58:	f080 809a 	bcs.w	403090 <__adddf3+0x240>
  402f5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402f60:	bf08      	it	eq
  402f62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402f66:	f150 0000 	adcs.w	r0, r0, #0
  402f6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402f6e:	ea41 0105 	orr.w	r1, r1, r5
  402f72:	bd30      	pop	{r4, r5, pc}
  402f74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402f78:	4140      	adcs	r0, r0
  402f7a:	eb41 0101 	adc.w	r1, r1, r1
  402f7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402f82:	f1a4 0401 	sub.w	r4, r4, #1
  402f86:	d1e9      	bne.n	402f5c <__adddf3+0x10c>
  402f88:	f091 0f00 	teq	r1, #0
  402f8c:	bf04      	itt	eq
  402f8e:	4601      	moveq	r1, r0
  402f90:	2000      	moveq	r0, #0
  402f92:	fab1 f381 	clz	r3, r1
  402f96:	bf08      	it	eq
  402f98:	3320      	addeq	r3, #32
  402f9a:	f1a3 030b 	sub.w	r3, r3, #11
  402f9e:	f1b3 0220 	subs.w	r2, r3, #32
  402fa2:	da0c      	bge.n	402fbe <__adddf3+0x16e>
  402fa4:	320c      	adds	r2, #12
  402fa6:	dd08      	ble.n	402fba <__adddf3+0x16a>
  402fa8:	f102 0c14 	add.w	ip, r2, #20
  402fac:	f1c2 020c 	rsb	r2, r2, #12
  402fb0:	fa01 f00c 	lsl.w	r0, r1, ip
  402fb4:	fa21 f102 	lsr.w	r1, r1, r2
  402fb8:	e00c      	b.n	402fd4 <__adddf3+0x184>
  402fba:	f102 0214 	add.w	r2, r2, #20
  402fbe:	bfd8      	it	le
  402fc0:	f1c2 0c20 	rsble	ip, r2, #32
  402fc4:	fa01 f102 	lsl.w	r1, r1, r2
  402fc8:	fa20 fc0c 	lsr.w	ip, r0, ip
  402fcc:	bfdc      	itt	le
  402fce:	ea41 010c 	orrle.w	r1, r1, ip
  402fd2:	4090      	lslle	r0, r2
  402fd4:	1ae4      	subs	r4, r4, r3
  402fd6:	bfa2      	ittt	ge
  402fd8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402fdc:	4329      	orrge	r1, r5
  402fde:	bd30      	popge	{r4, r5, pc}
  402fe0:	ea6f 0404 	mvn.w	r4, r4
  402fe4:	3c1f      	subs	r4, #31
  402fe6:	da1c      	bge.n	403022 <__adddf3+0x1d2>
  402fe8:	340c      	adds	r4, #12
  402fea:	dc0e      	bgt.n	40300a <__adddf3+0x1ba>
  402fec:	f104 0414 	add.w	r4, r4, #20
  402ff0:	f1c4 0220 	rsb	r2, r4, #32
  402ff4:	fa20 f004 	lsr.w	r0, r0, r4
  402ff8:	fa01 f302 	lsl.w	r3, r1, r2
  402ffc:	ea40 0003 	orr.w	r0, r0, r3
  403000:	fa21 f304 	lsr.w	r3, r1, r4
  403004:	ea45 0103 	orr.w	r1, r5, r3
  403008:	bd30      	pop	{r4, r5, pc}
  40300a:	f1c4 040c 	rsb	r4, r4, #12
  40300e:	f1c4 0220 	rsb	r2, r4, #32
  403012:	fa20 f002 	lsr.w	r0, r0, r2
  403016:	fa01 f304 	lsl.w	r3, r1, r4
  40301a:	ea40 0003 	orr.w	r0, r0, r3
  40301e:	4629      	mov	r1, r5
  403020:	bd30      	pop	{r4, r5, pc}
  403022:	fa21 f004 	lsr.w	r0, r1, r4
  403026:	4629      	mov	r1, r5
  403028:	bd30      	pop	{r4, r5, pc}
  40302a:	f094 0f00 	teq	r4, #0
  40302e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403032:	bf06      	itte	eq
  403034:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403038:	3401      	addeq	r4, #1
  40303a:	3d01      	subne	r5, #1
  40303c:	e74e      	b.n	402edc <__adddf3+0x8c>
  40303e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403042:	bf18      	it	ne
  403044:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403048:	d029      	beq.n	40309e <__adddf3+0x24e>
  40304a:	ea94 0f05 	teq	r4, r5
  40304e:	bf08      	it	eq
  403050:	ea90 0f02 	teqeq	r0, r2
  403054:	d005      	beq.n	403062 <__adddf3+0x212>
  403056:	ea54 0c00 	orrs.w	ip, r4, r0
  40305a:	bf04      	itt	eq
  40305c:	4619      	moveq	r1, r3
  40305e:	4610      	moveq	r0, r2
  403060:	bd30      	pop	{r4, r5, pc}
  403062:	ea91 0f03 	teq	r1, r3
  403066:	bf1e      	ittt	ne
  403068:	2100      	movne	r1, #0
  40306a:	2000      	movne	r0, #0
  40306c:	bd30      	popne	{r4, r5, pc}
  40306e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403072:	d105      	bne.n	403080 <__adddf3+0x230>
  403074:	0040      	lsls	r0, r0, #1
  403076:	4149      	adcs	r1, r1
  403078:	bf28      	it	cs
  40307a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40307e:	bd30      	pop	{r4, r5, pc}
  403080:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403084:	bf3c      	itt	cc
  403086:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40308a:	bd30      	popcc	{r4, r5, pc}
  40308c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403090:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403094:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403098:	f04f 0000 	mov.w	r0, #0
  40309c:	bd30      	pop	{r4, r5, pc}
  40309e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4030a2:	bf1a      	itte	ne
  4030a4:	4619      	movne	r1, r3
  4030a6:	4610      	movne	r0, r2
  4030a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4030ac:	bf1c      	itt	ne
  4030ae:	460b      	movne	r3, r1
  4030b0:	4602      	movne	r2, r0
  4030b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4030b6:	bf06      	itte	eq
  4030b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4030bc:	ea91 0f03 	teqeq	r1, r3
  4030c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4030c4:	bd30      	pop	{r4, r5, pc}
  4030c6:	bf00      	nop

004030c8 <__aeabi_ui2d>:
  4030c8:	f090 0f00 	teq	r0, #0
  4030cc:	bf04      	itt	eq
  4030ce:	2100      	moveq	r1, #0
  4030d0:	4770      	bxeq	lr
  4030d2:	b530      	push	{r4, r5, lr}
  4030d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4030d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4030dc:	f04f 0500 	mov.w	r5, #0
  4030e0:	f04f 0100 	mov.w	r1, #0
  4030e4:	e750      	b.n	402f88 <__adddf3+0x138>
  4030e6:	bf00      	nop

004030e8 <__aeabi_i2d>:
  4030e8:	f090 0f00 	teq	r0, #0
  4030ec:	bf04      	itt	eq
  4030ee:	2100      	moveq	r1, #0
  4030f0:	4770      	bxeq	lr
  4030f2:	b530      	push	{r4, r5, lr}
  4030f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4030f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4030fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403100:	bf48      	it	mi
  403102:	4240      	negmi	r0, r0
  403104:	f04f 0100 	mov.w	r1, #0
  403108:	e73e      	b.n	402f88 <__adddf3+0x138>
  40310a:	bf00      	nop

0040310c <__aeabi_f2d>:
  40310c:	0042      	lsls	r2, r0, #1
  40310e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403112:	ea4f 0131 	mov.w	r1, r1, rrx
  403116:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40311a:	bf1f      	itttt	ne
  40311c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403120:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403124:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403128:	4770      	bxne	lr
  40312a:	f092 0f00 	teq	r2, #0
  40312e:	bf14      	ite	ne
  403130:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403134:	4770      	bxeq	lr
  403136:	b530      	push	{r4, r5, lr}
  403138:	f44f 7460 	mov.w	r4, #896	; 0x380
  40313c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403140:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403144:	e720      	b.n	402f88 <__adddf3+0x138>
  403146:	bf00      	nop

00403148 <__aeabi_ul2d>:
  403148:	ea50 0201 	orrs.w	r2, r0, r1
  40314c:	bf08      	it	eq
  40314e:	4770      	bxeq	lr
  403150:	b530      	push	{r4, r5, lr}
  403152:	f04f 0500 	mov.w	r5, #0
  403156:	e00a      	b.n	40316e <__aeabi_l2d+0x16>

00403158 <__aeabi_l2d>:
  403158:	ea50 0201 	orrs.w	r2, r0, r1
  40315c:	bf08      	it	eq
  40315e:	4770      	bxeq	lr
  403160:	b530      	push	{r4, r5, lr}
  403162:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403166:	d502      	bpl.n	40316e <__aeabi_l2d+0x16>
  403168:	4240      	negs	r0, r0
  40316a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40316e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403172:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403176:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40317a:	f43f aedc 	beq.w	402f36 <__adddf3+0xe6>
  40317e:	f04f 0203 	mov.w	r2, #3
  403182:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403186:	bf18      	it	ne
  403188:	3203      	addne	r2, #3
  40318a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40318e:	bf18      	it	ne
  403190:	3203      	addne	r2, #3
  403192:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403196:	f1c2 0320 	rsb	r3, r2, #32
  40319a:	fa00 fc03 	lsl.w	ip, r0, r3
  40319e:	fa20 f002 	lsr.w	r0, r0, r2
  4031a2:	fa01 fe03 	lsl.w	lr, r1, r3
  4031a6:	ea40 000e 	orr.w	r0, r0, lr
  4031aa:	fa21 f102 	lsr.w	r1, r1, r2
  4031ae:	4414      	add	r4, r2
  4031b0:	e6c1      	b.n	402f36 <__adddf3+0xe6>
  4031b2:	bf00      	nop

004031b4 <__aeabi_dmul>:
  4031b4:	b570      	push	{r4, r5, r6, lr}
  4031b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4031ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4031be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4031c2:	bf1d      	ittte	ne
  4031c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4031c8:	ea94 0f0c 	teqne	r4, ip
  4031cc:	ea95 0f0c 	teqne	r5, ip
  4031d0:	f000 f8de 	bleq	403390 <__aeabi_dmul+0x1dc>
  4031d4:	442c      	add	r4, r5
  4031d6:	ea81 0603 	eor.w	r6, r1, r3
  4031da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4031de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4031e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4031e6:	bf18      	it	ne
  4031e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4031ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4031f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4031f4:	d038      	beq.n	403268 <__aeabi_dmul+0xb4>
  4031f6:	fba0 ce02 	umull	ip, lr, r0, r2
  4031fa:	f04f 0500 	mov.w	r5, #0
  4031fe:	fbe1 e502 	umlal	lr, r5, r1, r2
  403202:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403206:	fbe0 e503 	umlal	lr, r5, r0, r3
  40320a:	f04f 0600 	mov.w	r6, #0
  40320e:	fbe1 5603 	umlal	r5, r6, r1, r3
  403212:	f09c 0f00 	teq	ip, #0
  403216:	bf18      	it	ne
  403218:	f04e 0e01 	orrne.w	lr, lr, #1
  40321c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403220:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403224:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403228:	d204      	bcs.n	403234 <__aeabi_dmul+0x80>
  40322a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40322e:	416d      	adcs	r5, r5
  403230:	eb46 0606 	adc.w	r6, r6, r6
  403234:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403238:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40323c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403240:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403244:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403248:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40324c:	bf88      	it	hi
  40324e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403252:	d81e      	bhi.n	403292 <__aeabi_dmul+0xde>
  403254:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403258:	bf08      	it	eq
  40325a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40325e:	f150 0000 	adcs.w	r0, r0, #0
  403262:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403266:	bd70      	pop	{r4, r5, r6, pc}
  403268:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40326c:	ea46 0101 	orr.w	r1, r6, r1
  403270:	ea40 0002 	orr.w	r0, r0, r2
  403274:	ea81 0103 	eor.w	r1, r1, r3
  403278:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40327c:	bfc2      	ittt	gt
  40327e:	ebd4 050c 	rsbsgt	r5, r4, ip
  403282:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403286:	bd70      	popgt	{r4, r5, r6, pc}
  403288:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40328c:	f04f 0e00 	mov.w	lr, #0
  403290:	3c01      	subs	r4, #1
  403292:	f300 80ab 	bgt.w	4033ec <__aeabi_dmul+0x238>
  403296:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40329a:	bfde      	ittt	le
  40329c:	2000      	movle	r0, #0
  40329e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4032a2:	bd70      	pople	{r4, r5, r6, pc}
  4032a4:	f1c4 0400 	rsb	r4, r4, #0
  4032a8:	3c20      	subs	r4, #32
  4032aa:	da35      	bge.n	403318 <__aeabi_dmul+0x164>
  4032ac:	340c      	adds	r4, #12
  4032ae:	dc1b      	bgt.n	4032e8 <__aeabi_dmul+0x134>
  4032b0:	f104 0414 	add.w	r4, r4, #20
  4032b4:	f1c4 0520 	rsb	r5, r4, #32
  4032b8:	fa00 f305 	lsl.w	r3, r0, r5
  4032bc:	fa20 f004 	lsr.w	r0, r0, r4
  4032c0:	fa01 f205 	lsl.w	r2, r1, r5
  4032c4:	ea40 0002 	orr.w	r0, r0, r2
  4032c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4032cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4032d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4032d4:	fa21 f604 	lsr.w	r6, r1, r4
  4032d8:	eb42 0106 	adc.w	r1, r2, r6
  4032dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4032e0:	bf08      	it	eq
  4032e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4032e6:	bd70      	pop	{r4, r5, r6, pc}
  4032e8:	f1c4 040c 	rsb	r4, r4, #12
  4032ec:	f1c4 0520 	rsb	r5, r4, #32
  4032f0:	fa00 f304 	lsl.w	r3, r0, r4
  4032f4:	fa20 f005 	lsr.w	r0, r0, r5
  4032f8:	fa01 f204 	lsl.w	r2, r1, r4
  4032fc:	ea40 0002 	orr.w	r0, r0, r2
  403300:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403308:	f141 0100 	adc.w	r1, r1, #0
  40330c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403310:	bf08      	it	eq
  403312:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403316:	bd70      	pop	{r4, r5, r6, pc}
  403318:	f1c4 0520 	rsb	r5, r4, #32
  40331c:	fa00 f205 	lsl.w	r2, r0, r5
  403320:	ea4e 0e02 	orr.w	lr, lr, r2
  403324:	fa20 f304 	lsr.w	r3, r0, r4
  403328:	fa01 f205 	lsl.w	r2, r1, r5
  40332c:	ea43 0302 	orr.w	r3, r3, r2
  403330:	fa21 f004 	lsr.w	r0, r1, r4
  403334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403338:	fa21 f204 	lsr.w	r2, r1, r4
  40333c:	ea20 0002 	bic.w	r0, r0, r2
  403340:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403348:	bf08      	it	eq
  40334a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40334e:	bd70      	pop	{r4, r5, r6, pc}
  403350:	f094 0f00 	teq	r4, #0
  403354:	d10f      	bne.n	403376 <__aeabi_dmul+0x1c2>
  403356:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40335a:	0040      	lsls	r0, r0, #1
  40335c:	eb41 0101 	adc.w	r1, r1, r1
  403360:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403364:	bf08      	it	eq
  403366:	3c01      	subeq	r4, #1
  403368:	d0f7      	beq.n	40335a <__aeabi_dmul+0x1a6>
  40336a:	ea41 0106 	orr.w	r1, r1, r6
  40336e:	f095 0f00 	teq	r5, #0
  403372:	bf18      	it	ne
  403374:	4770      	bxne	lr
  403376:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40337a:	0052      	lsls	r2, r2, #1
  40337c:	eb43 0303 	adc.w	r3, r3, r3
  403380:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403384:	bf08      	it	eq
  403386:	3d01      	subeq	r5, #1
  403388:	d0f7      	beq.n	40337a <__aeabi_dmul+0x1c6>
  40338a:	ea43 0306 	orr.w	r3, r3, r6
  40338e:	4770      	bx	lr
  403390:	ea94 0f0c 	teq	r4, ip
  403394:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403398:	bf18      	it	ne
  40339a:	ea95 0f0c 	teqne	r5, ip
  40339e:	d00c      	beq.n	4033ba <__aeabi_dmul+0x206>
  4033a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4033a4:	bf18      	it	ne
  4033a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4033aa:	d1d1      	bne.n	403350 <__aeabi_dmul+0x19c>
  4033ac:	ea81 0103 	eor.w	r1, r1, r3
  4033b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4033b4:	f04f 0000 	mov.w	r0, #0
  4033b8:	bd70      	pop	{r4, r5, r6, pc}
  4033ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4033be:	bf06      	itte	eq
  4033c0:	4610      	moveq	r0, r2
  4033c2:	4619      	moveq	r1, r3
  4033c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4033c8:	d019      	beq.n	4033fe <__aeabi_dmul+0x24a>
  4033ca:	ea94 0f0c 	teq	r4, ip
  4033ce:	d102      	bne.n	4033d6 <__aeabi_dmul+0x222>
  4033d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4033d4:	d113      	bne.n	4033fe <__aeabi_dmul+0x24a>
  4033d6:	ea95 0f0c 	teq	r5, ip
  4033da:	d105      	bne.n	4033e8 <__aeabi_dmul+0x234>
  4033dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4033e0:	bf1c      	itt	ne
  4033e2:	4610      	movne	r0, r2
  4033e4:	4619      	movne	r1, r3
  4033e6:	d10a      	bne.n	4033fe <__aeabi_dmul+0x24a>
  4033e8:	ea81 0103 	eor.w	r1, r1, r3
  4033ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4033f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4033f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4033f8:	f04f 0000 	mov.w	r0, #0
  4033fc:	bd70      	pop	{r4, r5, r6, pc}
  4033fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403402:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403406:	bd70      	pop	{r4, r5, r6, pc}

00403408 <__aeabi_ddiv>:
  403408:	b570      	push	{r4, r5, r6, lr}
  40340a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40340e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403412:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403416:	bf1d      	ittte	ne
  403418:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40341c:	ea94 0f0c 	teqne	r4, ip
  403420:	ea95 0f0c 	teqne	r5, ip
  403424:	f000 f8a7 	bleq	403576 <__aeabi_ddiv+0x16e>
  403428:	eba4 0405 	sub.w	r4, r4, r5
  40342c:	ea81 0e03 	eor.w	lr, r1, r3
  403430:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403434:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403438:	f000 8088 	beq.w	40354c <__aeabi_ddiv+0x144>
  40343c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403440:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403444:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403448:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40344c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403450:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403454:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403458:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40345c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403460:	429d      	cmp	r5, r3
  403462:	bf08      	it	eq
  403464:	4296      	cmpeq	r6, r2
  403466:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40346a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40346e:	d202      	bcs.n	403476 <__aeabi_ddiv+0x6e>
  403470:	085b      	lsrs	r3, r3, #1
  403472:	ea4f 0232 	mov.w	r2, r2, rrx
  403476:	1ab6      	subs	r6, r6, r2
  403478:	eb65 0503 	sbc.w	r5, r5, r3
  40347c:	085b      	lsrs	r3, r3, #1
  40347e:	ea4f 0232 	mov.w	r2, r2, rrx
  403482:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403486:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40348a:	ebb6 0e02 	subs.w	lr, r6, r2
  40348e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403492:	bf22      	ittt	cs
  403494:	1ab6      	subcs	r6, r6, r2
  403496:	4675      	movcs	r5, lr
  403498:	ea40 000c 	orrcs.w	r0, r0, ip
  40349c:	085b      	lsrs	r3, r3, #1
  40349e:	ea4f 0232 	mov.w	r2, r2, rrx
  4034a2:	ebb6 0e02 	subs.w	lr, r6, r2
  4034a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4034aa:	bf22      	ittt	cs
  4034ac:	1ab6      	subcs	r6, r6, r2
  4034ae:	4675      	movcs	r5, lr
  4034b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4034b4:	085b      	lsrs	r3, r3, #1
  4034b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4034ba:	ebb6 0e02 	subs.w	lr, r6, r2
  4034be:	eb75 0e03 	sbcs.w	lr, r5, r3
  4034c2:	bf22      	ittt	cs
  4034c4:	1ab6      	subcs	r6, r6, r2
  4034c6:	4675      	movcs	r5, lr
  4034c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4034cc:	085b      	lsrs	r3, r3, #1
  4034ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4034d2:	ebb6 0e02 	subs.w	lr, r6, r2
  4034d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4034da:	bf22      	ittt	cs
  4034dc:	1ab6      	subcs	r6, r6, r2
  4034de:	4675      	movcs	r5, lr
  4034e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4034e4:	ea55 0e06 	orrs.w	lr, r5, r6
  4034e8:	d018      	beq.n	40351c <__aeabi_ddiv+0x114>
  4034ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4034ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4034f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4034f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4034fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4034fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403502:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403506:	d1c0      	bne.n	40348a <__aeabi_ddiv+0x82>
  403508:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40350c:	d10b      	bne.n	403526 <__aeabi_ddiv+0x11e>
  40350e:	ea41 0100 	orr.w	r1, r1, r0
  403512:	f04f 0000 	mov.w	r0, #0
  403516:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40351a:	e7b6      	b.n	40348a <__aeabi_ddiv+0x82>
  40351c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403520:	bf04      	itt	eq
  403522:	4301      	orreq	r1, r0
  403524:	2000      	moveq	r0, #0
  403526:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40352a:	bf88      	it	hi
  40352c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403530:	f63f aeaf 	bhi.w	403292 <__aeabi_dmul+0xde>
  403534:	ebb5 0c03 	subs.w	ip, r5, r3
  403538:	bf04      	itt	eq
  40353a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40353e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403542:	f150 0000 	adcs.w	r0, r0, #0
  403546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40354a:	bd70      	pop	{r4, r5, r6, pc}
  40354c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403550:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403554:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403558:	bfc2      	ittt	gt
  40355a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40355e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403562:	bd70      	popgt	{r4, r5, r6, pc}
  403564:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403568:	f04f 0e00 	mov.w	lr, #0
  40356c:	3c01      	subs	r4, #1
  40356e:	e690      	b.n	403292 <__aeabi_dmul+0xde>
  403570:	ea45 0e06 	orr.w	lr, r5, r6
  403574:	e68d      	b.n	403292 <__aeabi_dmul+0xde>
  403576:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40357a:	ea94 0f0c 	teq	r4, ip
  40357e:	bf08      	it	eq
  403580:	ea95 0f0c 	teqeq	r5, ip
  403584:	f43f af3b 	beq.w	4033fe <__aeabi_dmul+0x24a>
  403588:	ea94 0f0c 	teq	r4, ip
  40358c:	d10a      	bne.n	4035a4 <__aeabi_ddiv+0x19c>
  40358e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403592:	f47f af34 	bne.w	4033fe <__aeabi_dmul+0x24a>
  403596:	ea95 0f0c 	teq	r5, ip
  40359a:	f47f af25 	bne.w	4033e8 <__aeabi_dmul+0x234>
  40359e:	4610      	mov	r0, r2
  4035a0:	4619      	mov	r1, r3
  4035a2:	e72c      	b.n	4033fe <__aeabi_dmul+0x24a>
  4035a4:	ea95 0f0c 	teq	r5, ip
  4035a8:	d106      	bne.n	4035b8 <__aeabi_ddiv+0x1b0>
  4035aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4035ae:	f43f aefd 	beq.w	4033ac <__aeabi_dmul+0x1f8>
  4035b2:	4610      	mov	r0, r2
  4035b4:	4619      	mov	r1, r3
  4035b6:	e722      	b.n	4033fe <__aeabi_dmul+0x24a>
  4035b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4035bc:	bf18      	it	ne
  4035be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4035c2:	f47f aec5 	bne.w	403350 <__aeabi_dmul+0x19c>
  4035c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4035ca:	f47f af0d 	bne.w	4033e8 <__aeabi_dmul+0x234>
  4035ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4035d2:	f47f aeeb 	bne.w	4033ac <__aeabi_dmul+0x1f8>
  4035d6:	e712      	b.n	4033fe <__aeabi_dmul+0x24a>

004035d8 <__gedf2>:
  4035d8:	f04f 3cff 	mov.w	ip, #4294967295
  4035dc:	e006      	b.n	4035ec <__cmpdf2+0x4>
  4035de:	bf00      	nop

004035e0 <__ledf2>:
  4035e0:	f04f 0c01 	mov.w	ip, #1
  4035e4:	e002      	b.n	4035ec <__cmpdf2+0x4>
  4035e6:	bf00      	nop

004035e8 <__cmpdf2>:
  4035e8:	f04f 0c01 	mov.w	ip, #1
  4035ec:	f84d cd04 	str.w	ip, [sp, #-4]!
  4035f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4035f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4035f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4035fc:	bf18      	it	ne
  4035fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  403602:	d01b      	beq.n	40363c <__cmpdf2+0x54>
  403604:	b001      	add	sp, #4
  403606:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40360a:	bf0c      	ite	eq
  40360c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403610:	ea91 0f03 	teqne	r1, r3
  403614:	bf02      	ittt	eq
  403616:	ea90 0f02 	teqeq	r0, r2
  40361a:	2000      	moveq	r0, #0
  40361c:	4770      	bxeq	lr
  40361e:	f110 0f00 	cmn.w	r0, #0
  403622:	ea91 0f03 	teq	r1, r3
  403626:	bf58      	it	pl
  403628:	4299      	cmppl	r1, r3
  40362a:	bf08      	it	eq
  40362c:	4290      	cmpeq	r0, r2
  40362e:	bf2c      	ite	cs
  403630:	17d8      	asrcs	r0, r3, #31
  403632:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403636:	f040 0001 	orr.w	r0, r0, #1
  40363a:	4770      	bx	lr
  40363c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403640:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403644:	d102      	bne.n	40364c <__cmpdf2+0x64>
  403646:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40364a:	d107      	bne.n	40365c <__cmpdf2+0x74>
  40364c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403654:	d1d6      	bne.n	403604 <__cmpdf2+0x1c>
  403656:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40365a:	d0d3      	beq.n	403604 <__cmpdf2+0x1c>
  40365c:	f85d 0b04 	ldr.w	r0, [sp], #4
  403660:	4770      	bx	lr
  403662:	bf00      	nop

00403664 <__aeabi_cdrcmple>:
  403664:	4684      	mov	ip, r0
  403666:	4610      	mov	r0, r2
  403668:	4662      	mov	r2, ip
  40366a:	468c      	mov	ip, r1
  40366c:	4619      	mov	r1, r3
  40366e:	4663      	mov	r3, ip
  403670:	e000      	b.n	403674 <__aeabi_cdcmpeq>
  403672:	bf00      	nop

00403674 <__aeabi_cdcmpeq>:
  403674:	b501      	push	{r0, lr}
  403676:	f7ff ffb7 	bl	4035e8 <__cmpdf2>
  40367a:	2800      	cmp	r0, #0
  40367c:	bf48      	it	mi
  40367e:	f110 0f00 	cmnmi.w	r0, #0
  403682:	bd01      	pop	{r0, pc}

00403684 <__aeabi_dcmpeq>:
  403684:	f84d ed08 	str.w	lr, [sp, #-8]!
  403688:	f7ff fff4 	bl	403674 <__aeabi_cdcmpeq>
  40368c:	bf0c      	ite	eq
  40368e:	2001      	moveq	r0, #1
  403690:	2000      	movne	r0, #0
  403692:	f85d fb08 	ldr.w	pc, [sp], #8
  403696:	bf00      	nop

00403698 <__aeabi_dcmplt>:
  403698:	f84d ed08 	str.w	lr, [sp, #-8]!
  40369c:	f7ff ffea 	bl	403674 <__aeabi_cdcmpeq>
  4036a0:	bf34      	ite	cc
  4036a2:	2001      	movcc	r0, #1
  4036a4:	2000      	movcs	r0, #0
  4036a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4036aa:	bf00      	nop

004036ac <__aeabi_dcmple>:
  4036ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4036b0:	f7ff ffe0 	bl	403674 <__aeabi_cdcmpeq>
  4036b4:	bf94      	ite	ls
  4036b6:	2001      	movls	r0, #1
  4036b8:	2000      	movhi	r0, #0
  4036ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4036be:	bf00      	nop

004036c0 <__aeabi_dcmpge>:
  4036c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4036c4:	f7ff ffce 	bl	403664 <__aeabi_cdrcmple>
  4036c8:	bf94      	ite	ls
  4036ca:	2001      	movls	r0, #1
  4036cc:	2000      	movhi	r0, #0
  4036ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4036d2:	bf00      	nop

004036d4 <__aeabi_dcmpgt>:
  4036d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4036d8:	f7ff ffc4 	bl	403664 <__aeabi_cdrcmple>
  4036dc:	bf34      	ite	cc
  4036de:	2001      	movcc	r0, #1
  4036e0:	2000      	movcs	r0, #0
  4036e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4036e6:	bf00      	nop

004036e8 <__aeabi_dcmpun>:
  4036e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4036ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4036f0:	d102      	bne.n	4036f8 <__aeabi_dcmpun+0x10>
  4036f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4036f6:	d10a      	bne.n	40370e <__aeabi_dcmpun+0x26>
  4036f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4036fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403700:	d102      	bne.n	403708 <__aeabi_dcmpun+0x20>
  403702:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403706:	d102      	bne.n	40370e <__aeabi_dcmpun+0x26>
  403708:	f04f 0000 	mov.w	r0, #0
  40370c:	4770      	bx	lr
  40370e:	f04f 0001 	mov.w	r0, #1
  403712:	4770      	bx	lr

00403714 <__aeabi_d2uiz>:
  403714:	004a      	lsls	r2, r1, #1
  403716:	d211      	bcs.n	40373c <__aeabi_d2uiz+0x28>
  403718:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40371c:	d211      	bcs.n	403742 <__aeabi_d2uiz+0x2e>
  40371e:	d50d      	bpl.n	40373c <__aeabi_d2uiz+0x28>
  403720:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403724:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403728:	d40e      	bmi.n	403748 <__aeabi_d2uiz+0x34>
  40372a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40372e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403732:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403736:	fa23 f002 	lsr.w	r0, r3, r2
  40373a:	4770      	bx	lr
  40373c:	f04f 0000 	mov.w	r0, #0
  403740:	4770      	bx	lr
  403742:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403746:	d102      	bne.n	40374e <__aeabi_d2uiz+0x3a>
  403748:	f04f 30ff 	mov.w	r0, #4294967295
  40374c:	4770      	bx	lr
  40374e:	f04f 0000 	mov.w	r0, #0
  403752:	4770      	bx	lr

00403754 <__aeabi_d2f>:
  403754:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403758:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40375c:	bf24      	itt	cs
  40375e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403762:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  403766:	d90d      	bls.n	403784 <__aeabi_d2f+0x30>
  403768:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40376c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403770:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403774:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403778:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40377c:	bf08      	it	eq
  40377e:	f020 0001 	biceq.w	r0, r0, #1
  403782:	4770      	bx	lr
  403784:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403788:	d121      	bne.n	4037ce <__aeabi_d2f+0x7a>
  40378a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40378e:	bfbc      	itt	lt
  403790:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403794:	4770      	bxlt	lr
  403796:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40379a:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40379e:	f1c2 0218 	rsb	r2, r2, #24
  4037a2:	f1c2 0c20 	rsb	ip, r2, #32
  4037a6:	fa10 f30c 	lsls.w	r3, r0, ip
  4037aa:	fa20 f002 	lsr.w	r0, r0, r2
  4037ae:	bf18      	it	ne
  4037b0:	f040 0001 	orrne.w	r0, r0, #1
  4037b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4037b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4037bc:	fa03 fc0c 	lsl.w	ip, r3, ip
  4037c0:	ea40 000c 	orr.w	r0, r0, ip
  4037c4:	fa23 f302 	lsr.w	r3, r3, r2
  4037c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4037cc:	e7cc      	b.n	403768 <__aeabi_d2f+0x14>
  4037ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4037d2:	d107      	bne.n	4037e4 <__aeabi_d2f+0x90>
  4037d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4037d8:	bf1e      	ittt	ne
  4037da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4037de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4037e2:	4770      	bxne	lr
  4037e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4037e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4037ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4037f0:	4770      	bx	lr
  4037f2:	bf00      	nop

004037f4 <__aeabi_ldivmod>:
  4037f4:	b97b      	cbnz	r3, 403816 <__aeabi_ldivmod+0x22>
  4037f6:	b972      	cbnz	r2, 403816 <__aeabi_ldivmod+0x22>
  4037f8:	2900      	cmp	r1, #0
  4037fa:	bfbe      	ittt	lt
  4037fc:	2000      	movlt	r0, #0
  4037fe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
  403802:	e006      	blt.n	403812 <__aeabi_ldivmod+0x1e>
  403804:	bf08      	it	eq
  403806:	2800      	cmpeq	r0, #0
  403808:	bf1c      	itt	ne
  40380a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
  40380e:	f04f 30ff 	movne.w	r0, #4294967295
  403812:	f000 b9eb 	b.w	403bec <__aeabi_idiv0>
  403816:	f1ad 0c08 	sub.w	ip, sp, #8
  40381a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40381e:	2900      	cmp	r1, #0
  403820:	db09      	blt.n	403836 <__aeabi_ldivmod+0x42>
  403822:	2b00      	cmp	r3, #0
  403824:	db1a      	blt.n	40385c <__aeabi_ldivmod+0x68>
  403826:	f000 f873 	bl	403910 <__udivmoddi4>
  40382a:	f8dd e004 	ldr.w	lr, [sp, #4]
  40382e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403832:	b004      	add	sp, #16
  403834:	4770      	bx	lr
  403836:	4240      	negs	r0, r0
  403838:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40383c:	2b00      	cmp	r3, #0
  40383e:	db1b      	blt.n	403878 <__aeabi_ldivmod+0x84>
  403840:	f000 f866 	bl	403910 <__udivmoddi4>
  403844:	f8dd e004 	ldr.w	lr, [sp, #4]
  403848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40384c:	b004      	add	sp, #16
  40384e:	4240      	negs	r0, r0
  403850:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403854:	4252      	negs	r2, r2
  403856:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40385a:	4770      	bx	lr
  40385c:	4252      	negs	r2, r2
  40385e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403862:	f000 f855 	bl	403910 <__udivmoddi4>
  403866:	f8dd e004 	ldr.w	lr, [sp, #4]
  40386a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40386e:	b004      	add	sp, #16
  403870:	4240      	negs	r0, r0
  403872:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403876:	4770      	bx	lr
  403878:	4252      	negs	r2, r2
  40387a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40387e:	f000 f847 	bl	403910 <__udivmoddi4>
  403882:	f8dd e004 	ldr.w	lr, [sp, #4]
  403886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40388a:	b004      	add	sp, #16
  40388c:	4252      	negs	r2, r2
  40388e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403892:	4770      	bx	lr

00403894 <__aeabi_d2lz>:
  403894:	b538      	push	{r3, r4, r5, lr}
  403896:	4605      	mov	r5, r0
  403898:	460c      	mov	r4, r1
  40389a:	4628      	mov	r0, r5
  40389c:	4621      	mov	r1, r4
  40389e:	2200      	movs	r2, #0
  4038a0:	2300      	movs	r3, #0
  4038a2:	f7ff fef9 	bl	403698 <__aeabi_dcmplt>
  4038a6:	b928      	cbnz	r0, 4038b4 <__aeabi_d2lz+0x20>
  4038a8:	4628      	mov	r0, r5
  4038aa:	4621      	mov	r1, r4
  4038ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4038b0:	f000 b80a 	b.w	4038c8 <__aeabi_d2ulz>
  4038b4:	4628      	mov	r0, r5
  4038b6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  4038ba:	f000 f805 	bl	4038c8 <__aeabi_d2ulz>
  4038be:	4240      	negs	r0, r0
  4038c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4038c4:	bd38      	pop	{r3, r4, r5, pc}
  4038c6:	bf00      	nop

004038c8 <__aeabi_d2ulz>:
  4038c8:	b5d0      	push	{r4, r6, r7, lr}
  4038ca:	2200      	movs	r2, #0
  4038cc:	4b0e      	ldr	r3, [pc, #56]	; (403908 <__aeabi_d2ulz+0x40>)
  4038ce:	4606      	mov	r6, r0
  4038d0:	460f      	mov	r7, r1
  4038d2:	f7ff fc6f 	bl	4031b4 <__aeabi_dmul>
  4038d6:	f7ff ff1d 	bl	403714 <__aeabi_d2uiz>
  4038da:	4604      	mov	r4, r0
  4038dc:	f7ff fbf4 	bl	4030c8 <__aeabi_ui2d>
  4038e0:	2200      	movs	r2, #0
  4038e2:	4b0a      	ldr	r3, [pc, #40]	; (40390c <__aeabi_d2ulz+0x44>)
  4038e4:	f7ff fc66 	bl	4031b4 <__aeabi_dmul>
  4038e8:	4602      	mov	r2, r0
  4038ea:	460b      	mov	r3, r1
  4038ec:	4630      	mov	r0, r6
  4038ee:	4639      	mov	r1, r7
  4038f0:	f7ff faac 	bl	402e4c <__aeabi_dsub>
  4038f4:	f7ff ff0e 	bl	403714 <__aeabi_d2uiz>
  4038f8:	4623      	mov	r3, r4
  4038fa:	2200      	movs	r2, #0
  4038fc:	ea42 0200 	orr.w	r2, r2, r0
  403900:	4610      	mov	r0, r2
  403902:	4619      	mov	r1, r3
  403904:	bdd0      	pop	{r4, r6, r7, pc}
  403906:	bf00      	nop
  403908:	3df00000 	.word	0x3df00000
  40390c:	41f00000 	.word	0x41f00000

00403910 <__udivmoddi4>:
  403910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403914:	468c      	mov	ip, r1
  403916:	460d      	mov	r5, r1
  403918:	4604      	mov	r4, r0
  40391a:	9e08      	ldr	r6, [sp, #32]
  40391c:	2b00      	cmp	r3, #0
  40391e:	d151      	bne.n	4039c4 <__udivmoddi4+0xb4>
  403920:	428a      	cmp	r2, r1
  403922:	4617      	mov	r7, r2
  403924:	d96d      	bls.n	403a02 <__udivmoddi4+0xf2>
  403926:	fab2 fe82 	clz	lr, r2
  40392a:	f1be 0f00 	cmp.w	lr, #0
  40392e:	d00b      	beq.n	403948 <__udivmoddi4+0x38>
  403930:	f1ce 0c20 	rsb	ip, lr, #32
  403934:	fa01 f50e 	lsl.w	r5, r1, lr
  403938:	fa20 fc0c 	lsr.w	ip, r0, ip
  40393c:	fa02 f70e 	lsl.w	r7, r2, lr
  403940:	ea4c 0c05 	orr.w	ip, ip, r5
  403944:	fa00 f40e 	lsl.w	r4, r0, lr
  403948:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40394c:	0c25      	lsrs	r5, r4, #16
  40394e:	fbbc f8fa 	udiv	r8, ip, sl
  403952:	fa1f f987 	uxth.w	r9, r7
  403956:	fb0a cc18 	mls	ip, sl, r8, ip
  40395a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40395e:	fb08 f309 	mul.w	r3, r8, r9
  403962:	42ab      	cmp	r3, r5
  403964:	d90a      	bls.n	40397c <__udivmoddi4+0x6c>
  403966:	19ed      	adds	r5, r5, r7
  403968:	f108 32ff 	add.w	r2, r8, #4294967295
  40396c:	f080 8123 	bcs.w	403bb6 <__udivmoddi4+0x2a6>
  403970:	42ab      	cmp	r3, r5
  403972:	f240 8120 	bls.w	403bb6 <__udivmoddi4+0x2a6>
  403976:	f1a8 0802 	sub.w	r8, r8, #2
  40397a:	443d      	add	r5, r7
  40397c:	1aed      	subs	r5, r5, r3
  40397e:	b2a4      	uxth	r4, r4
  403980:	fbb5 f0fa 	udiv	r0, r5, sl
  403984:	fb0a 5510 	mls	r5, sl, r0, r5
  403988:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40398c:	fb00 f909 	mul.w	r9, r0, r9
  403990:	45a1      	cmp	r9, r4
  403992:	d909      	bls.n	4039a8 <__udivmoddi4+0x98>
  403994:	19e4      	adds	r4, r4, r7
  403996:	f100 33ff 	add.w	r3, r0, #4294967295
  40399a:	f080 810a 	bcs.w	403bb2 <__udivmoddi4+0x2a2>
  40399e:	45a1      	cmp	r9, r4
  4039a0:	f240 8107 	bls.w	403bb2 <__udivmoddi4+0x2a2>
  4039a4:	3802      	subs	r0, #2
  4039a6:	443c      	add	r4, r7
  4039a8:	eba4 0409 	sub.w	r4, r4, r9
  4039ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4039b0:	2100      	movs	r1, #0
  4039b2:	2e00      	cmp	r6, #0
  4039b4:	d061      	beq.n	403a7a <__udivmoddi4+0x16a>
  4039b6:	fa24 f40e 	lsr.w	r4, r4, lr
  4039ba:	2300      	movs	r3, #0
  4039bc:	6034      	str	r4, [r6, #0]
  4039be:	6073      	str	r3, [r6, #4]
  4039c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4039c4:	428b      	cmp	r3, r1
  4039c6:	d907      	bls.n	4039d8 <__udivmoddi4+0xc8>
  4039c8:	2e00      	cmp	r6, #0
  4039ca:	d054      	beq.n	403a76 <__udivmoddi4+0x166>
  4039cc:	2100      	movs	r1, #0
  4039ce:	e886 0021 	stmia.w	r6, {r0, r5}
  4039d2:	4608      	mov	r0, r1
  4039d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4039d8:	fab3 f183 	clz	r1, r3
  4039dc:	2900      	cmp	r1, #0
  4039de:	f040 808e 	bne.w	403afe <__udivmoddi4+0x1ee>
  4039e2:	42ab      	cmp	r3, r5
  4039e4:	d302      	bcc.n	4039ec <__udivmoddi4+0xdc>
  4039e6:	4282      	cmp	r2, r0
  4039e8:	f200 80fa 	bhi.w	403be0 <__udivmoddi4+0x2d0>
  4039ec:	1a84      	subs	r4, r0, r2
  4039ee:	eb65 0503 	sbc.w	r5, r5, r3
  4039f2:	2001      	movs	r0, #1
  4039f4:	46ac      	mov	ip, r5
  4039f6:	2e00      	cmp	r6, #0
  4039f8:	d03f      	beq.n	403a7a <__udivmoddi4+0x16a>
  4039fa:	e886 1010 	stmia.w	r6, {r4, ip}
  4039fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a02:	b912      	cbnz	r2, 403a0a <__udivmoddi4+0xfa>
  403a04:	2701      	movs	r7, #1
  403a06:	fbb7 f7f2 	udiv	r7, r7, r2
  403a0a:	fab7 fe87 	clz	lr, r7
  403a0e:	f1be 0f00 	cmp.w	lr, #0
  403a12:	d134      	bne.n	403a7e <__udivmoddi4+0x16e>
  403a14:	1beb      	subs	r3, r5, r7
  403a16:	0c3a      	lsrs	r2, r7, #16
  403a18:	fa1f fc87 	uxth.w	ip, r7
  403a1c:	2101      	movs	r1, #1
  403a1e:	fbb3 f8f2 	udiv	r8, r3, r2
  403a22:	0c25      	lsrs	r5, r4, #16
  403a24:	fb02 3318 	mls	r3, r2, r8, r3
  403a28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403a2c:	fb0c f308 	mul.w	r3, ip, r8
  403a30:	42ab      	cmp	r3, r5
  403a32:	d907      	bls.n	403a44 <__udivmoddi4+0x134>
  403a34:	19ed      	adds	r5, r5, r7
  403a36:	f108 30ff 	add.w	r0, r8, #4294967295
  403a3a:	d202      	bcs.n	403a42 <__udivmoddi4+0x132>
  403a3c:	42ab      	cmp	r3, r5
  403a3e:	f200 80d1 	bhi.w	403be4 <__udivmoddi4+0x2d4>
  403a42:	4680      	mov	r8, r0
  403a44:	1aed      	subs	r5, r5, r3
  403a46:	b2a3      	uxth	r3, r4
  403a48:	fbb5 f0f2 	udiv	r0, r5, r2
  403a4c:	fb02 5510 	mls	r5, r2, r0, r5
  403a50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403a54:	fb0c fc00 	mul.w	ip, ip, r0
  403a58:	45a4      	cmp	ip, r4
  403a5a:	d907      	bls.n	403a6c <__udivmoddi4+0x15c>
  403a5c:	19e4      	adds	r4, r4, r7
  403a5e:	f100 33ff 	add.w	r3, r0, #4294967295
  403a62:	d202      	bcs.n	403a6a <__udivmoddi4+0x15a>
  403a64:	45a4      	cmp	ip, r4
  403a66:	f200 80b8 	bhi.w	403bda <__udivmoddi4+0x2ca>
  403a6a:	4618      	mov	r0, r3
  403a6c:	eba4 040c 	sub.w	r4, r4, ip
  403a70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403a74:	e79d      	b.n	4039b2 <__udivmoddi4+0xa2>
  403a76:	4631      	mov	r1, r6
  403a78:	4630      	mov	r0, r6
  403a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a7e:	f1ce 0420 	rsb	r4, lr, #32
  403a82:	fa05 f30e 	lsl.w	r3, r5, lr
  403a86:	fa07 f70e 	lsl.w	r7, r7, lr
  403a8a:	fa20 f804 	lsr.w	r8, r0, r4
  403a8e:	0c3a      	lsrs	r2, r7, #16
  403a90:	fa25 f404 	lsr.w	r4, r5, r4
  403a94:	ea48 0803 	orr.w	r8, r8, r3
  403a98:	fbb4 f1f2 	udiv	r1, r4, r2
  403a9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403aa0:	fb02 4411 	mls	r4, r2, r1, r4
  403aa4:	fa1f fc87 	uxth.w	ip, r7
  403aa8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403aac:	fb01 f30c 	mul.w	r3, r1, ip
  403ab0:	42ab      	cmp	r3, r5
  403ab2:	fa00 f40e 	lsl.w	r4, r0, lr
  403ab6:	d909      	bls.n	403acc <__udivmoddi4+0x1bc>
  403ab8:	19ed      	adds	r5, r5, r7
  403aba:	f101 30ff 	add.w	r0, r1, #4294967295
  403abe:	f080 808a 	bcs.w	403bd6 <__udivmoddi4+0x2c6>
  403ac2:	42ab      	cmp	r3, r5
  403ac4:	f240 8087 	bls.w	403bd6 <__udivmoddi4+0x2c6>
  403ac8:	3902      	subs	r1, #2
  403aca:	443d      	add	r5, r7
  403acc:	1aeb      	subs	r3, r5, r3
  403ace:	fa1f f588 	uxth.w	r5, r8
  403ad2:	fbb3 f0f2 	udiv	r0, r3, r2
  403ad6:	fb02 3310 	mls	r3, r2, r0, r3
  403ada:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403ade:	fb00 f30c 	mul.w	r3, r0, ip
  403ae2:	42ab      	cmp	r3, r5
  403ae4:	d907      	bls.n	403af6 <__udivmoddi4+0x1e6>
  403ae6:	19ed      	adds	r5, r5, r7
  403ae8:	f100 38ff 	add.w	r8, r0, #4294967295
  403aec:	d26f      	bcs.n	403bce <__udivmoddi4+0x2be>
  403aee:	42ab      	cmp	r3, r5
  403af0:	d96d      	bls.n	403bce <__udivmoddi4+0x2be>
  403af2:	3802      	subs	r0, #2
  403af4:	443d      	add	r5, r7
  403af6:	1aeb      	subs	r3, r5, r3
  403af8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403afc:	e78f      	b.n	403a1e <__udivmoddi4+0x10e>
  403afe:	f1c1 0720 	rsb	r7, r1, #32
  403b02:	fa22 f807 	lsr.w	r8, r2, r7
  403b06:	408b      	lsls	r3, r1
  403b08:	fa05 f401 	lsl.w	r4, r5, r1
  403b0c:	ea48 0303 	orr.w	r3, r8, r3
  403b10:	fa20 fe07 	lsr.w	lr, r0, r7
  403b14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403b18:	40fd      	lsrs	r5, r7
  403b1a:	ea4e 0e04 	orr.w	lr, lr, r4
  403b1e:	fbb5 f9fc 	udiv	r9, r5, ip
  403b22:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403b26:	fb0c 5519 	mls	r5, ip, r9, r5
  403b2a:	fa1f f883 	uxth.w	r8, r3
  403b2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403b32:	fb09 f408 	mul.w	r4, r9, r8
  403b36:	42ac      	cmp	r4, r5
  403b38:	fa02 f201 	lsl.w	r2, r2, r1
  403b3c:	fa00 fa01 	lsl.w	sl, r0, r1
  403b40:	d908      	bls.n	403b54 <__udivmoddi4+0x244>
  403b42:	18ed      	adds	r5, r5, r3
  403b44:	f109 30ff 	add.w	r0, r9, #4294967295
  403b48:	d243      	bcs.n	403bd2 <__udivmoddi4+0x2c2>
  403b4a:	42ac      	cmp	r4, r5
  403b4c:	d941      	bls.n	403bd2 <__udivmoddi4+0x2c2>
  403b4e:	f1a9 0902 	sub.w	r9, r9, #2
  403b52:	441d      	add	r5, r3
  403b54:	1b2d      	subs	r5, r5, r4
  403b56:	fa1f fe8e 	uxth.w	lr, lr
  403b5a:	fbb5 f0fc 	udiv	r0, r5, ip
  403b5e:	fb0c 5510 	mls	r5, ip, r0, r5
  403b62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403b66:	fb00 f808 	mul.w	r8, r0, r8
  403b6a:	45a0      	cmp	r8, r4
  403b6c:	d907      	bls.n	403b7e <__udivmoddi4+0x26e>
  403b6e:	18e4      	adds	r4, r4, r3
  403b70:	f100 35ff 	add.w	r5, r0, #4294967295
  403b74:	d229      	bcs.n	403bca <__udivmoddi4+0x2ba>
  403b76:	45a0      	cmp	r8, r4
  403b78:	d927      	bls.n	403bca <__udivmoddi4+0x2ba>
  403b7a:	3802      	subs	r0, #2
  403b7c:	441c      	add	r4, r3
  403b7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403b82:	eba4 0408 	sub.w	r4, r4, r8
  403b86:	fba0 8902 	umull	r8, r9, r0, r2
  403b8a:	454c      	cmp	r4, r9
  403b8c:	46c6      	mov	lr, r8
  403b8e:	464d      	mov	r5, r9
  403b90:	d315      	bcc.n	403bbe <__udivmoddi4+0x2ae>
  403b92:	d012      	beq.n	403bba <__udivmoddi4+0x2aa>
  403b94:	b156      	cbz	r6, 403bac <__udivmoddi4+0x29c>
  403b96:	ebba 030e 	subs.w	r3, sl, lr
  403b9a:	eb64 0405 	sbc.w	r4, r4, r5
  403b9e:	fa04 f707 	lsl.w	r7, r4, r7
  403ba2:	40cb      	lsrs	r3, r1
  403ba4:	431f      	orrs	r7, r3
  403ba6:	40cc      	lsrs	r4, r1
  403ba8:	6037      	str	r7, [r6, #0]
  403baa:	6074      	str	r4, [r6, #4]
  403bac:	2100      	movs	r1, #0
  403bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403bb2:	4618      	mov	r0, r3
  403bb4:	e6f8      	b.n	4039a8 <__udivmoddi4+0x98>
  403bb6:	4690      	mov	r8, r2
  403bb8:	e6e0      	b.n	40397c <__udivmoddi4+0x6c>
  403bba:	45c2      	cmp	sl, r8
  403bbc:	d2ea      	bcs.n	403b94 <__udivmoddi4+0x284>
  403bbe:	ebb8 0e02 	subs.w	lr, r8, r2
  403bc2:	eb69 0503 	sbc.w	r5, r9, r3
  403bc6:	3801      	subs	r0, #1
  403bc8:	e7e4      	b.n	403b94 <__udivmoddi4+0x284>
  403bca:	4628      	mov	r0, r5
  403bcc:	e7d7      	b.n	403b7e <__udivmoddi4+0x26e>
  403bce:	4640      	mov	r0, r8
  403bd0:	e791      	b.n	403af6 <__udivmoddi4+0x1e6>
  403bd2:	4681      	mov	r9, r0
  403bd4:	e7be      	b.n	403b54 <__udivmoddi4+0x244>
  403bd6:	4601      	mov	r1, r0
  403bd8:	e778      	b.n	403acc <__udivmoddi4+0x1bc>
  403bda:	3802      	subs	r0, #2
  403bdc:	443c      	add	r4, r7
  403bde:	e745      	b.n	403a6c <__udivmoddi4+0x15c>
  403be0:	4608      	mov	r0, r1
  403be2:	e708      	b.n	4039f6 <__udivmoddi4+0xe6>
  403be4:	f1a8 0802 	sub.w	r8, r8, #2
  403be8:	443d      	add	r5, r7
  403bea:	e72b      	b.n	403a44 <__udivmoddi4+0x134>

00403bec <__aeabi_idiv0>:
  403bec:	4770      	bx	lr
  403bee:	bf00      	nop

00403bf0 <__errno>:
  403bf0:	4b01      	ldr	r3, [pc, #4]	; (403bf8 <__errno+0x8>)
  403bf2:	6818      	ldr	r0, [r3, #0]
  403bf4:	4770      	bx	lr
  403bf6:	bf00      	nop
  403bf8:	20000028 	.word	0x20000028

00403bfc <__libc_init_array>:
  403bfc:	b570      	push	{r4, r5, r6, lr}
  403bfe:	4e0f      	ldr	r6, [pc, #60]	; (403c3c <__libc_init_array+0x40>)
  403c00:	4d0f      	ldr	r5, [pc, #60]	; (403c40 <__libc_init_array+0x44>)
  403c02:	1b76      	subs	r6, r6, r5
  403c04:	10b6      	asrs	r6, r6, #2
  403c06:	bf18      	it	ne
  403c08:	2400      	movne	r4, #0
  403c0a:	d005      	beq.n	403c18 <__libc_init_array+0x1c>
  403c0c:	3401      	adds	r4, #1
  403c0e:	f855 3b04 	ldr.w	r3, [r5], #4
  403c12:	4798      	blx	r3
  403c14:	42a6      	cmp	r6, r4
  403c16:	d1f9      	bne.n	403c0c <__libc_init_array+0x10>
  403c18:	4e0a      	ldr	r6, [pc, #40]	; (403c44 <__libc_init_array+0x48>)
  403c1a:	4d0b      	ldr	r5, [pc, #44]	; (403c48 <__libc_init_array+0x4c>)
  403c1c:	1b76      	subs	r6, r6, r5
  403c1e:	f001 f879 	bl	404d14 <_init>
  403c22:	10b6      	asrs	r6, r6, #2
  403c24:	bf18      	it	ne
  403c26:	2400      	movne	r4, #0
  403c28:	d006      	beq.n	403c38 <__libc_init_array+0x3c>
  403c2a:	3401      	adds	r4, #1
  403c2c:	f855 3b04 	ldr.w	r3, [r5], #4
  403c30:	4798      	blx	r3
  403c32:	42a6      	cmp	r6, r4
  403c34:	d1f9      	bne.n	403c2a <__libc_init_array+0x2e>
  403c36:	bd70      	pop	{r4, r5, r6, pc}
  403c38:	bd70      	pop	{r4, r5, r6, pc}
  403c3a:	bf00      	nop
  403c3c:	00404d20 	.word	0x00404d20
  403c40:	00404d20 	.word	0x00404d20
  403c44:	00404d28 	.word	0x00404d28
  403c48:	00404d20 	.word	0x00404d20

00403c4c <memset>:
  403c4c:	b470      	push	{r4, r5, r6}
  403c4e:	0786      	lsls	r6, r0, #30
  403c50:	d046      	beq.n	403ce0 <memset+0x94>
  403c52:	1e54      	subs	r4, r2, #1
  403c54:	2a00      	cmp	r2, #0
  403c56:	d041      	beq.n	403cdc <memset+0x90>
  403c58:	b2ca      	uxtb	r2, r1
  403c5a:	4603      	mov	r3, r0
  403c5c:	e002      	b.n	403c64 <memset+0x18>
  403c5e:	f114 34ff 	adds.w	r4, r4, #4294967295
  403c62:	d33b      	bcc.n	403cdc <memset+0x90>
  403c64:	f803 2b01 	strb.w	r2, [r3], #1
  403c68:	079d      	lsls	r5, r3, #30
  403c6a:	d1f8      	bne.n	403c5e <memset+0x12>
  403c6c:	2c03      	cmp	r4, #3
  403c6e:	d92e      	bls.n	403cce <memset+0x82>
  403c70:	b2cd      	uxtb	r5, r1
  403c72:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403c76:	2c0f      	cmp	r4, #15
  403c78:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403c7c:	d919      	bls.n	403cb2 <memset+0x66>
  403c7e:	f103 0210 	add.w	r2, r3, #16
  403c82:	4626      	mov	r6, r4
  403c84:	3e10      	subs	r6, #16
  403c86:	2e0f      	cmp	r6, #15
  403c88:	f842 5c10 	str.w	r5, [r2, #-16]
  403c8c:	f842 5c0c 	str.w	r5, [r2, #-12]
  403c90:	f842 5c08 	str.w	r5, [r2, #-8]
  403c94:	f842 5c04 	str.w	r5, [r2, #-4]
  403c98:	f102 0210 	add.w	r2, r2, #16
  403c9c:	d8f2      	bhi.n	403c84 <memset+0x38>
  403c9e:	f1a4 0210 	sub.w	r2, r4, #16
  403ca2:	f022 020f 	bic.w	r2, r2, #15
  403ca6:	f004 040f 	and.w	r4, r4, #15
  403caa:	3210      	adds	r2, #16
  403cac:	2c03      	cmp	r4, #3
  403cae:	4413      	add	r3, r2
  403cb0:	d90d      	bls.n	403cce <memset+0x82>
  403cb2:	461e      	mov	r6, r3
  403cb4:	4622      	mov	r2, r4
  403cb6:	3a04      	subs	r2, #4
  403cb8:	2a03      	cmp	r2, #3
  403cba:	f846 5b04 	str.w	r5, [r6], #4
  403cbe:	d8fa      	bhi.n	403cb6 <memset+0x6a>
  403cc0:	1f22      	subs	r2, r4, #4
  403cc2:	f022 0203 	bic.w	r2, r2, #3
  403cc6:	3204      	adds	r2, #4
  403cc8:	4413      	add	r3, r2
  403cca:	f004 0403 	and.w	r4, r4, #3
  403cce:	b12c      	cbz	r4, 403cdc <memset+0x90>
  403cd0:	b2c9      	uxtb	r1, r1
  403cd2:	441c      	add	r4, r3
  403cd4:	f803 1b01 	strb.w	r1, [r3], #1
  403cd8:	429c      	cmp	r4, r3
  403cda:	d1fb      	bne.n	403cd4 <memset+0x88>
  403cdc:	bc70      	pop	{r4, r5, r6}
  403cde:	4770      	bx	lr
  403ce0:	4614      	mov	r4, r2
  403ce2:	4603      	mov	r3, r0
  403ce4:	e7c2      	b.n	403c6c <memset+0x20>
  403ce6:	bf00      	nop

00403ce8 <setbuf>:
  403ce8:	2900      	cmp	r1, #0
  403cea:	bf0c      	ite	eq
  403cec:	2202      	moveq	r2, #2
  403cee:	2200      	movne	r2, #0
  403cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403cf4:	f000 b800 	b.w	403cf8 <setvbuf>

00403cf8 <setvbuf>:
  403cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403cfc:	4c61      	ldr	r4, [pc, #388]	; (403e84 <setvbuf+0x18c>)
  403cfe:	6825      	ldr	r5, [r4, #0]
  403d00:	b083      	sub	sp, #12
  403d02:	4604      	mov	r4, r0
  403d04:	460f      	mov	r7, r1
  403d06:	4690      	mov	r8, r2
  403d08:	461e      	mov	r6, r3
  403d0a:	b115      	cbz	r5, 403d12 <setvbuf+0x1a>
  403d0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403d0e:	2b00      	cmp	r3, #0
  403d10:	d064      	beq.n	403ddc <setvbuf+0xe4>
  403d12:	f1b8 0f02 	cmp.w	r8, #2
  403d16:	d006      	beq.n	403d26 <setvbuf+0x2e>
  403d18:	f1b8 0f01 	cmp.w	r8, #1
  403d1c:	f200 809f 	bhi.w	403e5e <setvbuf+0x166>
  403d20:	2e00      	cmp	r6, #0
  403d22:	f2c0 809c 	blt.w	403e5e <setvbuf+0x166>
  403d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403d28:	07d8      	lsls	r0, r3, #31
  403d2a:	d534      	bpl.n	403d96 <setvbuf+0x9e>
  403d2c:	4621      	mov	r1, r4
  403d2e:	4628      	mov	r0, r5
  403d30:	f000 f95a 	bl	403fe8 <_fflush_r>
  403d34:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403d36:	b141      	cbz	r1, 403d4a <setvbuf+0x52>
  403d38:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403d3c:	4299      	cmp	r1, r3
  403d3e:	d002      	beq.n	403d46 <setvbuf+0x4e>
  403d40:	4628      	mov	r0, r5
  403d42:	f000 fa4b 	bl	4041dc <_free_r>
  403d46:	2300      	movs	r3, #0
  403d48:	6323      	str	r3, [r4, #48]	; 0x30
  403d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d4e:	2200      	movs	r2, #0
  403d50:	61a2      	str	r2, [r4, #24]
  403d52:	6062      	str	r2, [r4, #4]
  403d54:	061a      	lsls	r2, r3, #24
  403d56:	d43a      	bmi.n	403dce <setvbuf+0xd6>
  403d58:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403d5c:	f023 0303 	bic.w	r3, r3, #3
  403d60:	f1b8 0f02 	cmp.w	r8, #2
  403d64:	81a3      	strh	r3, [r4, #12]
  403d66:	d01d      	beq.n	403da4 <setvbuf+0xac>
  403d68:	ab01      	add	r3, sp, #4
  403d6a:	466a      	mov	r2, sp
  403d6c:	4621      	mov	r1, r4
  403d6e:	4628      	mov	r0, r5
  403d70:	f000 fb4c 	bl	40440c <__swhatbuf_r>
  403d74:	89a3      	ldrh	r3, [r4, #12]
  403d76:	4318      	orrs	r0, r3
  403d78:	81a0      	strh	r0, [r4, #12]
  403d7a:	2e00      	cmp	r6, #0
  403d7c:	d132      	bne.n	403de4 <setvbuf+0xec>
  403d7e:	9e00      	ldr	r6, [sp, #0]
  403d80:	4630      	mov	r0, r6
  403d82:	f000 fb71 	bl	404468 <malloc>
  403d86:	4607      	mov	r7, r0
  403d88:	2800      	cmp	r0, #0
  403d8a:	d06b      	beq.n	403e64 <setvbuf+0x16c>
  403d8c:	89a3      	ldrh	r3, [r4, #12]
  403d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403d92:	81a3      	strh	r3, [r4, #12]
  403d94:	e028      	b.n	403de8 <setvbuf+0xf0>
  403d96:	89a3      	ldrh	r3, [r4, #12]
  403d98:	0599      	lsls	r1, r3, #22
  403d9a:	d4c7      	bmi.n	403d2c <setvbuf+0x34>
  403d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403d9e:	f000 fb31 	bl	404404 <__retarget_lock_acquire_recursive>
  403da2:	e7c3      	b.n	403d2c <setvbuf+0x34>
  403da4:	2500      	movs	r5, #0
  403da6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403da8:	2600      	movs	r6, #0
  403daa:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403dae:	f043 0302 	orr.w	r3, r3, #2
  403db2:	2001      	movs	r0, #1
  403db4:	60a6      	str	r6, [r4, #8]
  403db6:	07ce      	lsls	r6, r1, #31
  403db8:	81a3      	strh	r3, [r4, #12]
  403dba:	6022      	str	r2, [r4, #0]
  403dbc:	6122      	str	r2, [r4, #16]
  403dbe:	6160      	str	r0, [r4, #20]
  403dc0:	d401      	bmi.n	403dc6 <setvbuf+0xce>
  403dc2:	0598      	lsls	r0, r3, #22
  403dc4:	d53e      	bpl.n	403e44 <setvbuf+0x14c>
  403dc6:	4628      	mov	r0, r5
  403dc8:	b003      	add	sp, #12
  403dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403dce:	6921      	ldr	r1, [r4, #16]
  403dd0:	4628      	mov	r0, r5
  403dd2:	f000 fa03 	bl	4041dc <_free_r>
  403dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403dda:	e7bd      	b.n	403d58 <setvbuf+0x60>
  403ddc:	4628      	mov	r0, r5
  403dde:	f000 f95b 	bl	404098 <__sinit>
  403de2:	e796      	b.n	403d12 <setvbuf+0x1a>
  403de4:	2f00      	cmp	r7, #0
  403de6:	d0cb      	beq.n	403d80 <setvbuf+0x88>
  403de8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403dea:	2b00      	cmp	r3, #0
  403dec:	d033      	beq.n	403e56 <setvbuf+0x15e>
  403dee:	9b00      	ldr	r3, [sp, #0]
  403df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403df4:	6027      	str	r7, [r4, #0]
  403df6:	429e      	cmp	r6, r3
  403df8:	bf1c      	itt	ne
  403dfa:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403dfe:	81a2      	strhne	r2, [r4, #12]
  403e00:	f1b8 0f01 	cmp.w	r8, #1
  403e04:	bf04      	itt	eq
  403e06:	f042 0201 	orreq.w	r2, r2, #1
  403e0a:	81a2      	strheq	r2, [r4, #12]
  403e0c:	b292      	uxth	r2, r2
  403e0e:	f012 0308 	ands.w	r3, r2, #8
  403e12:	6127      	str	r7, [r4, #16]
  403e14:	6166      	str	r6, [r4, #20]
  403e16:	d00e      	beq.n	403e36 <setvbuf+0x13e>
  403e18:	07d1      	lsls	r1, r2, #31
  403e1a:	d51a      	bpl.n	403e52 <setvbuf+0x15a>
  403e1c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403e1e:	4276      	negs	r6, r6
  403e20:	2300      	movs	r3, #0
  403e22:	f015 0501 	ands.w	r5, r5, #1
  403e26:	61a6      	str	r6, [r4, #24]
  403e28:	60a3      	str	r3, [r4, #8]
  403e2a:	d009      	beq.n	403e40 <setvbuf+0x148>
  403e2c:	2500      	movs	r5, #0
  403e2e:	4628      	mov	r0, r5
  403e30:	b003      	add	sp, #12
  403e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403e36:	60a3      	str	r3, [r4, #8]
  403e38:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403e3a:	f015 0501 	ands.w	r5, r5, #1
  403e3e:	d1f5      	bne.n	403e2c <setvbuf+0x134>
  403e40:	0593      	lsls	r3, r2, #22
  403e42:	d4c0      	bmi.n	403dc6 <setvbuf+0xce>
  403e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403e46:	f000 fadf 	bl	404408 <__retarget_lock_release_recursive>
  403e4a:	4628      	mov	r0, r5
  403e4c:	b003      	add	sp, #12
  403e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403e52:	60a6      	str	r6, [r4, #8]
  403e54:	e7f0      	b.n	403e38 <setvbuf+0x140>
  403e56:	4628      	mov	r0, r5
  403e58:	f000 f91e 	bl	404098 <__sinit>
  403e5c:	e7c7      	b.n	403dee <setvbuf+0xf6>
  403e5e:	f04f 35ff 	mov.w	r5, #4294967295
  403e62:	e7b0      	b.n	403dc6 <setvbuf+0xce>
  403e64:	f8dd 9000 	ldr.w	r9, [sp]
  403e68:	45b1      	cmp	r9, r6
  403e6a:	d004      	beq.n	403e76 <setvbuf+0x17e>
  403e6c:	4648      	mov	r0, r9
  403e6e:	f000 fafb 	bl	404468 <malloc>
  403e72:	4607      	mov	r7, r0
  403e74:	b920      	cbnz	r0, 403e80 <setvbuf+0x188>
  403e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403e7a:	f04f 35ff 	mov.w	r5, #4294967295
  403e7e:	e792      	b.n	403da6 <setvbuf+0xae>
  403e80:	464e      	mov	r6, r9
  403e82:	e783      	b.n	403d8c <setvbuf+0x94>
  403e84:	20000028 	.word	0x20000028

00403e88 <register_fini>:
  403e88:	4b02      	ldr	r3, [pc, #8]	; (403e94 <register_fini+0xc>)
  403e8a:	b113      	cbz	r3, 403e92 <register_fini+0xa>
  403e8c:	4802      	ldr	r0, [pc, #8]	; (403e98 <register_fini+0x10>)
  403e8e:	f000 b805 	b.w	403e9c <atexit>
  403e92:	4770      	bx	lr
  403e94:	00000000 	.word	0x00000000
  403e98:	00404109 	.word	0x00404109

00403e9c <atexit>:
  403e9c:	2300      	movs	r3, #0
  403e9e:	4601      	mov	r1, r0
  403ea0:	461a      	mov	r2, r3
  403ea2:	4618      	mov	r0, r3
  403ea4:	f000 be10 	b.w	404ac8 <__register_exitproc>

00403ea8 <__sflush_r>:
  403ea8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403eac:	b29a      	uxth	r2, r3
  403eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403eb2:	460d      	mov	r5, r1
  403eb4:	0711      	lsls	r1, r2, #28
  403eb6:	4680      	mov	r8, r0
  403eb8:	d43a      	bmi.n	403f30 <__sflush_r+0x88>
  403eba:	686a      	ldr	r2, [r5, #4]
  403ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403ec0:	2a00      	cmp	r2, #0
  403ec2:	81ab      	strh	r3, [r5, #12]
  403ec4:	dd6f      	ble.n	403fa6 <__sflush_r+0xfe>
  403ec6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403ec8:	2c00      	cmp	r4, #0
  403eca:	d049      	beq.n	403f60 <__sflush_r+0xb8>
  403ecc:	2200      	movs	r2, #0
  403ece:	b29b      	uxth	r3, r3
  403ed0:	f8d8 6000 	ldr.w	r6, [r8]
  403ed4:	f8c8 2000 	str.w	r2, [r8]
  403ed8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403edc:	d067      	beq.n	403fae <__sflush_r+0x106>
  403ede:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403ee0:	075f      	lsls	r7, r3, #29
  403ee2:	d505      	bpl.n	403ef0 <__sflush_r+0x48>
  403ee4:	6869      	ldr	r1, [r5, #4]
  403ee6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403ee8:	1a52      	subs	r2, r2, r1
  403eea:	b10b      	cbz	r3, 403ef0 <__sflush_r+0x48>
  403eec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403eee:	1ad2      	subs	r2, r2, r3
  403ef0:	2300      	movs	r3, #0
  403ef2:	69e9      	ldr	r1, [r5, #28]
  403ef4:	4640      	mov	r0, r8
  403ef6:	47a0      	blx	r4
  403ef8:	1c44      	adds	r4, r0, #1
  403efa:	d03c      	beq.n	403f76 <__sflush_r+0xce>
  403efc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403f00:	692a      	ldr	r2, [r5, #16]
  403f02:	602a      	str	r2, [r5, #0]
  403f04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403f08:	2200      	movs	r2, #0
  403f0a:	81ab      	strh	r3, [r5, #12]
  403f0c:	04db      	lsls	r3, r3, #19
  403f0e:	606a      	str	r2, [r5, #4]
  403f10:	d447      	bmi.n	403fa2 <__sflush_r+0xfa>
  403f12:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403f14:	f8c8 6000 	str.w	r6, [r8]
  403f18:	b311      	cbz	r1, 403f60 <__sflush_r+0xb8>
  403f1a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403f1e:	4299      	cmp	r1, r3
  403f20:	d002      	beq.n	403f28 <__sflush_r+0x80>
  403f22:	4640      	mov	r0, r8
  403f24:	f000 f95a 	bl	4041dc <_free_r>
  403f28:	2000      	movs	r0, #0
  403f2a:	6328      	str	r0, [r5, #48]	; 0x30
  403f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f30:	692e      	ldr	r6, [r5, #16]
  403f32:	b1ae      	cbz	r6, 403f60 <__sflush_r+0xb8>
  403f34:	682c      	ldr	r4, [r5, #0]
  403f36:	602e      	str	r6, [r5, #0]
  403f38:	0791      	lsls	r1, r2, #30
  403f3a:	bf0c      	ite	eq
  403f3c:	696b      	ldreq	r3, [r5, #20]
  403f3e:	2300      	movne	r3, #0
  403f40:	1ba4      	subs	r4, r4, r6
  403f42:	60ab      	str	r3, [r5, #8]
  403f44:	e00a      	b.n	403f5c <__sflush_r+0xb4>
  403f46:	4623      	mov	r3, r4
  403f48:	4632      	mov	r2, r6
  403f4a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403f4c:	69e9      	ldr	r1, [r5, #28]
  403f4e:	4640      	mov	r0, r8
  403f50:	47b8      	blx	r7
  403f52:	2800      	cmp	r0, #0
  403f54:	eba4 0400 	sub.w	r4, r4, r0
  403f58:	4406      	add	r6, r0
  403f5a:	dd04      	ble.n	403f66 <__sflush_r+0xbe>
  403f5c:	2c00      	cmp	r4, #0
  403f5e:	dcf2      	bgt.n	403f46 <__sflush_r+0x9e>
  403f60:	2000      	movs	r0, #0
  403f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f66:	89ab      	ldrh	r3, [r5, #12]
  403f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403f6c:	81ab      	strh	r3, [r5, #12]
  403f6e:	f04f 30ff 	mov.w	r0, #4294967295
  403f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f76:	f8d8 4000 	ldr.w	r4, [r8]
  403f7a:	2c1d      	cmp	r4, #29
  403f7c:	d8f3      	bhi.n	403f66 <__sflush_r+0xbe>
  403f7e:	4b19      	ldr	r3, [pc, #100]	; (403fe4 <__sflush_r+0x13c>)
  403f80:	40e3      	lsrs	r3, r4
  403f82:	43db      	mvns	r3, r3
  403f84:	f013 0301 	ands.w	r3, r3, #1
  403f88:	d1ed      	bne.n	403f66 <__sflush_r+0xbe>
  403f8a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403f8e:	606b      	str	r3, [r5, #4]
  403f90:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403f94:	6929      	ldr	r1, [r5, #16]
  403f96:	81ab      	strh	r3, [r5, #12]
  403f98:	04da      	lsls	r2, r3, #19
  403f9a:	6029      	str	r1, [r5, #0]
  403f9c:	d5b9      	bpl.n	403f12 <__sflush_r+0x6a>
  403f9e:	2c00      	cmp	r4, #0
  403fa0:	d1b7      	bne.n	403f12 <__sflush_r+0x6a>
  403fa2:	6528      	str	r0, [r5, #80]	; 0x50
  403fa4:	e7b5      	b.n	403f12 <__sflush_r+0x6a>
  403fa6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403fa8:	2a00      	cmp	r2, #0
  403faa:	dc8c      	bgt.n	403ec6 <__sflush_r+0x1e>
  403fac:	e7d8      	b.n	403f60 <__sflush_r+0xb8>
  403fae:	2301      	movs	r3, #1
  403fb0:	69e9      	ldr	r1, [r5, #28]
  403fb2:	4640      	mov	r0, r8
  403fb4:	47a0      	blx	r4
  403fb6:	1c43      	adds	r3, r0, #1
  403fb8:	4602      	mov	r2, r0
  403fba:	d002      	beq.n	403fc2 <__sflush_r+0x11a>
  403fbc:	89ab      	ldrh	r3, [r5, #12]
  403fbe:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403fc0:	e78e      	b.n	403ee0 <__sflush_r+0x38>
  403fc2:	f8d8 3000 	ldr.w	r3, [r8]
  403fc6:	2b00      	cmp	r3, #0
  403fc8:	d0f8      	beq.n	403fbc <__sflush_r+0x114>
  403fca:	2b1d      	cmp	r3, #29
  403fcc:	d001      	beq.n	403fd2 <__sflush_r+0x12a>
  403fce:	2b16      	cmp	r3, #22
  403fd0:	d102      	bne.n	403fd8 <__sflush_r+0x130>
  403fd2:	f8c8 6000 	str.w	r6, [r8]
  403fd6:	e7c3      	b.n	403f60 <__sflush_r+0xb8>
  403fd8:	89ab      	ldrh	r3, [r5, #12]
  403fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403fde:	81ab      	strh	r3, [r5, #12]
  403fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403fe4:	20400001 	.word	0x20400001

00403fe8 <_fflush_r>:
  403fe8:	b538      	push	{r3, r4, r5, lr}
  403fea:	460d      	mov	r5, r1
  403fec:	4604      	mov	r4, r0
  403fee:	b108      	cbz	r0, 403ff4 <_fflush_r+0xc>
  403ff0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403ff2:	b1bb      	cbz	r3, 404024 <_fflush_r+0x3c>
  403ff4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403ff8:	b188      	cbz	r0, 40401e <_fflush_r+0x36>
  403ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403ffc:	07db      	lsls	r3, r3, #31
  403ffe:	d401      	bmi.n	404004 <_fflush_r+0x1c>
  404000:	0581      	lsls	r1, r0, #22
  404002:	d517      	bpl.n	404034 <_fflush_r+0x4c>
  404004:	4620      	mov	r0, r4
  404006:	4629      	mov	r1, r5
  404008:	f7ff ff4e 	bl	403ea8 <__sflush_r>
  40400c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40400e:	07da      	lsls	r2, r3, #31
  404010:	4604      	mov	r4, r0
  404012:	d402      	bmi.n	40401a <_fflush_r+0x32>
  404014:	89ab      	ldrh	r3, [r5, #12]
  404016:	059b      	lsls	r3, r3, #22
  404018:	d507      	bpl.n	40402a <_fflush_r+0x42>
  40401a:	4620      	mov	r0, r4
  40401c:	bd38      	pop	{r3, r4, r5, pc}
  40401e:	4604      	mov	r4, r0
  404020:	4620      	mov	r0, r4
  404022:	bd38      	pop	{r3, r4, r5, pc}
  404024:	f000 f838 	bl	404098 <__sinit>
  404028:	e7e4      	b.n	403ff4 <_fflush_r+0xc>
  40402a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40402c:	f000 f9ec 	bl	404408 <__retarget_lock_release_recursive>
  404030:	4620      	mov	r0, r4
  404032:	bd38      	pop	{r3, r4, r5, pc}
  404034:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404036:	f000 f9e5 	bl	404404 <__retarget_lock_acquire_recursive>
  40403a:	e7e3      	b.n	404004 <_fflush_r+0x1c>

0040403c <_cleanup_r>:
  40403c:	4901      	ldr	r1, [pc, #4]	; (404044 <_cleanup_r+0x8>)
  40403e:	f000 b9b3 	b.w	4043a8 <_fwalk_reent>
  404042:	bf00      	nop
  404044:	00404bb1 	.word	0x00404bb1

00404048 <std.isra.0>:
  404048:	b510      	push	{r4, lr}
  40404a:	2300      	movs	r3, #0
  40404c:	4604      	mov	r4, r0
  40404e:	8181      	strh	r1, [r0, #12]
  404050:	81c2      	strh	r2, [r0, #14]
  404052:	6003      	str	r3, [r0, #0]
  404054:	6043      	str	r3, [r0, #4]
  404056:	6083      	str	r3, [r0, #8]
  404058:	6643      	str	r3, [r0, #100]	; 0x64
  40405a:	6103      	str	r3, [r0, #16]
  40405c:	6143      	str	r3, [r0, #20]
  40405e:	6183      	str	r3, [r0, #24]
  404060:	4619      	mov	r1, r3
  404062:	2208      	movs	r2, #8
  404064:	305c      	adds	r0, #92	; 0x5c
  404066:	f7ff fdf1 	bl	403c4c <memset>
  40406a:	4807      	ldr	r0, [pc, #28]	; (404088 <std.isra.0+0x40>)
  40406c:	4907      	ldr	r1, [pc, #28]	; (40408c <std.isra.0+0x44>)
  40406e:	4a08      	ldr	r2, [pc, #32]	; (404090 <std.isra.0+0x48>)
  404070:	4b08      	ldr	r3, [pc, #32]	; (404094 <std.isra.0+0x4c>)
  404072:	6220      	str	r0, [r4, #32]
  404074:	61e4      	str	r4, [r4, #28]
  404076:	6261      	str	r1, [r4, #36]	; 0x24
  404078:	62a2      	str	r2, [r4, #40]	; 0x28
  40407a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40407c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404084:	f000 b9ba 	b.w	4043fc <__retarget_lock_init_recursive>
  404088:	00404a15 	.word	0x00404a15
  40408c:	00404a39 	.word	0x00404a39
  404090:	00404a75 	.word	0x00404a75
  404094:	00404a95 	.word	0x00404a95

00404098 <__sinit>:
  404098:	b510      	push	{r4, lr}
  40409a:	4604      	mov	r4, r0
  40409c:	4812      	ldr	r0, [pc, #72]	; (4040e8 <__sinit+0x50>)
  40409e:	f000 f9b1 	bl	404404 <__retarget_lock_acquire_recursive>
  4040a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4040a4:	b9d2      	cbnz	r2, 4040dc <__sinit+0x44>
  4040a6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4040aa:	4810      	ldr	r0, [pc, #64]	; (4040ec <__sinit+0x54>)
  4040ac:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4040b0:	2103      	movs	r1, #3
  4040b2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4040b6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4040b8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4040bc:	6860      	ldr	r0, [r4, #4]
  4040be:	2104      	movs	r1, #4
  4040c0:	f7ff ffc2 	bl	404048 <std.isra.0>
  4040c4:	2201      	movs	r2, #1
  4040c6:	2109      	movs	r1, #9
  4040c8:	68a0      	ldr	r0, [r4, #8]
  4040ca:	f7ff ffbd 	bl	404048 <std.isra.0>
  4040ce:	2202      	movs	r2, #2
  4040d0:	2112      	movs	r1, #18
  4040d2:	68e0      	ldr	r0, [r4, #12]
  4040d4:	f7ff ffb8 	bl	404048 <std.isra.0>
  4040d8:	2301      	movs	r3, #1
  4040da:	63a3      	str	r3, [r4, #56]	; 0x38
  4040dc:	4802      	ldr	r0, [pc, #8]	; (4040e8 <__sinit+0x50>)
  4040de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4040e2:	f000 b991 	b.w	404408 <__retarget_lock_release_recursive>
  4040e6:	bf00      	nop
  4040e8:	2000ce54 	.word	0x2000ce54
  4040ec:	0040403d 	.word	0x0040403d

004040f0 <__sfp_lock_acquire>:
  4040f0:	4801      	ldr	r0, [pc, #4]	; (4040f8 <__sfp_lock_acquire+0x8>)
  4040f2:	f000 b987 	b.w	404404 <__retarget_lock_acquire_recursive>
  4040f6:	bf00      	nop
  4040f8:	2000ce68 	.word	0x2000ce68

004040fc <__sfp_lock_release>:
  4040fc:	4801      	ldr	r0, [pc, #4]	; (404104 <__sfp_lock_release+0x8>)
  4040fe:	f000 b983 	b.w	404408 <__retarget_lock_release_recursive>
  404102:	bf00      	nop
  404104:	2000ce68 	.word	0x2000ce68

00404108 <__libc_fini_array>:
  404108:	b538      	push	{r3, r4, r5, lr}
  40410a:	4c0a      	ldr	r4, [pc, #40]	; (404134 <__libc_fini_array+0x2c>)
  40410c:	4d0a      	ldr	r5, [pc, #40]	; (404138 <__libc_fini_array+0x30>)
  40410e:	1b64      	subs	r4, r4, r5
  404110:	10a4      	asrs	r4, r4, #2
  404112:	d00a      	beq.n	40412a <__libc_fini_array+0x22>
  404114:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404118:	3b01      	subs	r3, #1
  40411a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40411e:	3c01      	subs	r4, #1
  404120:	f855 3904 	ldr.w	r3, [r5], #-4
  404124:	4798      	blx	r3
  404126:	2c00      	cmp	r4, #0
  404128:	d1f9      	bne.n	40411e <__libc_fini_array+0x16>
  40412a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40412e:	f000 bdfb 	b.w	404d28 <_fini>
  404132:	bf00      	nop
  404134:	00404d38 	.word	0x00404d38
  404138:	00404d34 	.word	0x00404d34

0040413c <_malloc_trim_r>:
  40413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40413e:	4f24      	ldr	r7, [pc, #144]	; (4041d0 <_malloc_trim_r+0x94>)
  404140:	460c      	mov	r4, r1
  404142:	4606      	mov	r6, r0
  404144:	f000 fc48 	bl	4049d8 <__malloc_lock>
  404148:	68bb      	ldr	r3, [r7, #8]
  40414a:	685d      	ldr	r5, [r3, #4]
  40414c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404150:	310f      	adds	r1, #15
  404152:	f025 0503 	bic.w	r5, r5, #3
  404156:	4429      	add	r1, r5
  404158:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40415c:	f021 010f 	bic.w	r1, r1, #15
  404160:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404164:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404168:	db07      	blt.n	40417a <_malloc_trim_r+0x3e>
  40416a:	2100      	movs	r1, #0
  40416c:	4630      	mov	r0, r6
  40416e:	f000 fc3f 	bl	4049f0 <_sbrk_r>
  404172:	68bb      	ldr	r3, [r7, #8]
  404174:	442b      	add	r3, r5
  404176:	4298      	cmp	r0, r3
  404178:	d004      	beq.n	404184 <_malloc_trim_r+0x48>
  40417a:	4630      	mov	r0, r6
  40417c:	f000 fc32 	bl	4049e4 <__malloc_unlock>
  404180:	2000      	movs	r0, #0
  404182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404184:	4261      	negs	r1, r4
  404186:	4630      	mov	r0, r6
  404188:	f000 fc32 	bl	4049f0 <_sbrk_r>
  40418c:	3001      	adds	r0, #1
  40418e:	d00d      	beq.n	4041ac <_malloc_trim_r+0x70>
  404190:	4b10      	ldr	r3, [pc, #64]	; (4041d4 <_malloc_trim_r+0x98>)
  404192:	68ba      	ldr	r2, [r7, #8]
  404194:	6819      	ldr	r1, [r3, #0]
  404196:	1b2d      	subs	r5, r5, r4
  404198:	f045 0501 	orr.w	r5, r5, #1
  40419c:	4630      	mov	r0, r6
  40419e:	1b09      	subs	r1, r1, r4
  4041a0:	6055      	str	r5, [r2, #4]
  4041a2:	6019      	str	r1, [r3, #0]
  4041a4:	f000 fc1e 	bl	4049e4 <__malloc_unlock>
  4041a8:	2001      	movs	r0, #1
  4041aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4041ac:	2100      	movs	r1, #0
  4041ae:	4630      	mov	r0, r6
  4041b0:	f000 fc1e 	bl	4049f0 <_sbrk_r>
  4041b4:	68ba      	ldr	r2, [r7, #8]
  4041b6:	1a83      	subs	r3, r0, r2
  4041b8:	2b0f      	cmp	r3, #15
  4041ba:	ddde      	ble.n	40417a <_malloc_trim_r+0x3e>
  4041bc:	4c06      	ldr	r4, [pc, #24]	; (4041d8 <_malloc_trim_r+0x9c>)
  4041be:	4905      	ldr	r1, [pc, #20]	; (4041d4 <_malloc_trim_r+0x98>)
  4041c0:	6824      	ldr	r4, [r4, #0]
  4041c2:	f043 0301 	orr.w	r3, r3, #1
  4041c6:	1b00      	subs	r0, r0, r4
  4041c8:	6053      	str	r3, [r2, #4]
  4041ca:	6008      	str	r0, [r1, #0]
  4041cc:	e7d5      	b.n	40417a <_malloc_trim_r+0x3e>
  4041ce:	bf00      	nop
  4041d0:	2000045c 	.word	0x2000045c
  4041d4:	2000cd2c 	.word	0x2000cd2c
  4041d8:	20000864 	.word	0x20000864

004041dc <_free_r>:
  4041dc:	2900      	cmp	r1, #0
  4041de:	d044      	beq.n	40426a <_free_r+0x8e>
  4041e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4041e4:	460d      	mov	r5, r1
  4041e6:	4680      	mov	r8, r0
  4041e8:	f000 fbf6 	bl	4049d8 <__malloc_lock>
  4041ec:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4041f0:	4969      	ldr	r1, [pc, #420]	; (404398 <_free_r+0x1bc>)
  4041f2:	f027 0301 	bic.w	r3, r7, #1
  4041f6:	f1a5 0408 	sub.w	r4, r5, #8
  4041fa:	18e2      	adds	r2, r4, r3
  4041fc:	688e      	ldr	r6, [r1, #8]
  4041fe:	6850      	ldr	r0, [r2, #4]
  404200:	42b2      	cmp	r2, r6
  404202:	f020 0003 	bic.w	r0, r0, #3
  404206:	d05e      	beq.n	4042c6 <_free_r+0xea>
  404208:	07fe      	lsls	r6, r7, #31
  40420a:	6050      	str	r0, [r2, #4]
  40420c:	d40b      	bmi.n	404226 <_free_r+0x4a>
  40420e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404212:	1be4      	subs	r4, r4, r7
  404214:	f101 0e08 	add.w	lr, r1, #8
  404218:	68a5      	ldr	r5, [r4, #8]
  40421a:	4575      	cmp	r5, lr
  40421c:	443b      	add	r3, r7
  40421e:	d06d      	beq.n	4042fc <_free_r+0x120>
  404220:	68e7      	ldr	r7, [r4, #12]
  404222:	60ef      	str	r7, [r5, #12]
  404224:	60bd      	str	r5, [r7, #8]
  404226:	1815      	adds	r5, r2, r0
  404228:	686d      	ldr	r5, [r5, #4]
  40422a:	07ed      	lsls	r5, r5, #31
  40422c:	d53e      	bpl.n	4042ac <_free_r+0xd0>
  40422e:	f043 0201 	orr.w	r2, r3, #1
  404232:	6062      	str	r2, [r4, #4]
  404234:	50e3      	str	r3, [r4, r3]
  404236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40423a:	d217      	bcs.n	40426c <_free_r+0x90>
  40423c:	08db      	lsrs	r3, r3, #3
  40423e:	1c58      	adds	r0, r3, #1
  404240:	109a      	asrs	r2, r3, #2
  404242:	684d      	ldr	r5, [r1, #4]
  404244:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404248:	60a7      	str	r7, [r4, #8]
  40424a:	2301      	movs	r3, #1
  40424c:	4093      	lsls	r3, r2
  40424e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  404252:	432b      	orrs	r3, r5
  404254:	3a08      	subs	r2, #8
  404256:	60e2      	str	r2, [r4, #12]
  404258:	604b      	str	r3, [r1, #4]
  40425a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40425e:	60fc      	str	r4, [r7, #12]
  404260:	4640      	mov	r0, r8
  404262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404266:	f000 bbbd 	b.w	4049e4 <__malloc_unlock>
  40426a:	4770      	bx	lr
  40426c:	0a5a      	lsrs	r2, r3, #9
  40426e:	2a04      	cmp	r2, #4
  404270:	d852      	bhi.n	404318 <_free_r+0x13c>
  404272:	099a      	lsrs	r2, r3, #6
  404274:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404278:	00ff      	lsls	r7, r7, #3
  40427a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40427e:	19c8      	adds	r0, r1, r7
  404280:	59ca      	ldr	r2, [r1, r7]
  404282:	3808      	subs	r0, #8
  404284:	4290      	cmp	r0, r2
  404286:	d04f      	beq.n	404328 <_free_r+0x14c>
  404288:	6851      	ldr	r1, [r2, #4]
  40428a:	f021 0103 	bic.w	r1, r1, #3
  40428e:	428b      	cmp	r3, r1
  404290:	d232      	bcs.n	4042f8 <_free_r+0x11c>
  404292:	6892      	ldr	r2, [r2, #8]
  404294:	4290      	cmp	r0, r2
  404296:	d1f7      	bne.n	404288 <_free_r+0xac>
  404298:	68c3      	ldr	r3, [r0, #12]
  40429a:	60a0      	str	r0, [r4, #8]
  40429c:	60e3      	str	r3, [r4, #12]
  40429e:	609c      	str	r4, [r3, #8]
  4042a0:	60c4      	str	r4, [r0, #12]
  4042a2:	4640      	mov	r0, r8
  4042a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4042a8:	f000 bb9c 	b.w	4049e4 <__malloc_unlock>
  4042ac:	6895      	ldr	r5, [r2, #8]
  4042ae:	4f3b      	ldr	r7, [pc, #236]	; (40439c <_free_r+0x1c0>)
  4042b0:	42bd      	cmp	r5, r7
  4042b2:	4403      	add	r3, r0
  4042b4:	d040      	beq.n	404338 <_free_r+0x15c>
  4042b6:	68d0      	ldr	r0, [r2, #12]
  4042b8:	60e8      	str	r0, [r5, #12]
  4042ba:	f043 0201 	orr.w	r2, r3, #1
  4042be:	6085      	str	r5, [r0, #8]
  4042c0:	6062      	str	r2, [r4, #4]
  4042c2:	50e3      	str	r3, [r4, r3]
  4042c4:	e7b7      	b.n	404236 <_free_r+0x5a>
  4042c6:	07ff      	lsls	r7, r7, #31
  4042c8:	4403      	add	r3, r0
  4042ca:	d407      	bmi.n	4042dc <_free_r+0x100>
  4042cc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4042d0:	1aa4      	subs	r4, r4, r2
  4042d2:	4413      	add	r3, r2
  4042d4:	68a0      	ldr	r0, [r4, #8]
  4042d6:	68e2      	ldr	r2, [r4, #12]
  4042d8:	60c2      	str	r2, [r0, #12]
  4042da:	6090      	str	r0, [r2, #8]
  4042dc:	4a30      	ldr	r2, [pc, #192]	; (4043a0 <_free_r+0x1c4>)
  4042de:	6812      	ldr	r2, [r2, #0]
  4042e0:	f043 0001 	orr.w	r0, r3, #1
  4042e4:	4293      	cmp	r3, r2
  4042e6:	6060      	str	r0, [r4, #4]
  4042e8:	608c      	str	r4, [r1, #8]
  4042ea:	d3b9      	bcc.n	404260 <_free_r+0x84>
  4042ec:	4b2d      	ldr	r3, [pc, #180]	; (4043a4 <_free_r+0x1c8>)
  4042ee:	4640      	mov	r0, r8
  4042f0:	6819      	ldr	r1, [r3, #0]
  4042f2:	f7ff ff23 	bl	40413c <_malloc_trim_r>
  4042f6:	e7b3      	b.n	404260 <_free_r+0x84>
  4042f8:	4610      	mov	r0, r2
  4042fa:	e7cd      	b.n	404298 <_free_r+0xbc>
  4042fc:	1811      	adds	r1, r2, r0
  4042fe:	6849      	ldr	r1, [r1, #4]
  404300:	07c9      	lsls	r1, r1, #31
  404302:	d444      	bmi.n	40438e <_free_r+0x1b2>
  404304:	6891      	ldr	r1, [r2, #8]
  404306:	68d2      	ldr	r2, [r2, #12]
  404308:	60ca      	str	r2, [r1, #12]
  40430a:	4403      	add	r3, r0
  40430c:	f043 0001 	orr.w	r0, r3, #1
  404310:	6091      	str	r1, [r2, #8]
  404312:	6060      	str	r0, [r4, #4]
  404314:	50e3      	str	r3, [r4, r3]
  404316:	e7a3      	b.n	404260 <_free_r+0x84>
  404318:	2a14      	cmp	r2, #20
  40431a:	d816      	bhi.n	40434a <_free_r+0x16e>
  40431c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404320:	00ff      	lsls	r7, r7, #3
  404322:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404326:	e7aa      	b.n	40427e <_free_r+0xa2>
  404328:	10aa      	asrs	r2, r5, #2
  40432a:	2301      	movs	r3, #1
  40432c:	684d      	ldr	r5, [r1, #4]
  40432e:	4093      	lsls	r3, r2
  404330:	432b      	orrs	r3, r5
  404332:	604b      	str	r3, [r1, #4]
  404334:	4603      	mov	r3, r0
  404336:	e7b0      	b.n	40429a <_free_r+0xbe>
  404338:	f043 0201 	orr.w	r2, r3, #1
  40433c:	614c      	str	r4, [r1, #20]
  40433e:	610c      	str	r4, [r1, #16]
  404340:	60e5      	str	r5, [r4, #12]
  404342:	60a5      	str	r5, [r4, #8]
  404344:	6062      	str	r2, [r4, #4]
  404346:	50e3      	str	r3, [r4, r3]
  404348:	e78a      	b.n	404260 <_free_r+0x84>
  40434a:	2a54      	cmp	r2, #84	; 0x54
  40434c:	d806      	bhi.n	40435c <_free_r+0x180>
  40434e:	0b1a      	lsrs	r2, r3, #12
  404350:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404354:	00ff      	lsls	r7, r7, #3
  404356:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40435a:	e790      	b.n	40427e <_free_r+0xa2>
  40435c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404360:	d806      	bhi.n	404370 <_free_r+0x194>
  404362:	0bda      	lsrs	r2, r3, #15
  404364:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404368:	00ff      	lsls	r7, r7, #3
  40436a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40436e:	e786      	b.n	40427e <_free_r+0xa2>
  404370:	f240 5054 	movw	r0, #1364	; 0x554
  404374:	4282      	cmp	r2, r0
  404376:	d806      	bhi.n	404386 <_free_r+0x1aa>
  404378:	0c9a      	lsrs	r2, r3, #18
  40437a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40437e:	00ff      	lsls	r7, r7, #3
  404380:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404384:	e77b      	b.n	40427e <_free_r+0xa2>
  404386:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40438a:	257e      	movs	r5, #126	; 0x7e
  40438c:	e777      	b.n	40427e <_free_r+0xa2>
  40438e:	f043 0101 	orr.w	r1, r3, #1
  404392:	6061      	str	r1, [r4, #4]
  404394:	6013      	str	r3, [r2, #0]
  404396:	e763      	b.n	404260 <_free_r+0x84>
  404398:	2000045c 	.word	0x2000045c
  40439c:	20000464 	.word	0x20000464
  4043a0:	20000868 	.word	0x20000868
  4043a4:	2000cd5c 	.word	0x2000cd5c

004043a8 <_fwalk_reent>:
  4043a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4043ac:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4043b0:	d01f      	beq.n	4043f2 <_fwalk_reent+0x4a>
  4043b2:	4688      	mov	r8, r1
  4043b4:	4606      	mov	r6, r0
  4043b6:	f04f 0900 	mov.w	r9, #0
  4043ba:	687d      	ldr	r5, [r7, #4]
  4043bc:	68bc      	ldr	r4, [r7, #8]
  4043be:	3d01      	subs	r5, #1
  4043c0:	d411      	bmi.n	4043e6 <_fwalk_reent+0x3e>
  4043c2:	89a3      	ldrh	r3, [r4, #12]
  4043c4:	2b01      	cmp	r3, #1
  4043c6:	f105 35ff 	add.w	r5, r5, #4294967295
  4043ca:	d908      	bls.n	4043de <_fwalk_reent+0x36>
  4043cc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4043d0:	3301      	adds	r3, #1
  4043d2:	4621      	mov	r1, r4
  4043d4:	4630      	mov	r0, r6
  4043d6:	d002      	beq.n	4043de <_fwalk_reent+0x36>
  4043d8:	47c0      	blx	r8
  4043da:	ea49 0900 	orr.w	r9, r9, r0
  4043de:	1c6b      	adds	r3, r5, #1
  4043e0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4043e4:	d1ed      	bne.n	4043c2 <_fwalk_reent+0x1a>
  4043e6:	683f      	ldr	r7, [r7, #0]
  4043e8:	2f00      	cmp	r7, #0
  4043ea:	d1e6      	bne.n	4043ba <_fwalk_reent+0x12>
  4043ec:	4648      	mov	r0, r9
  4043ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043f2:	46b9      	mov	r9, r7
  4043f4:	4648      	mov	r0, r9
  4043f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043fa:	bf00      	nop

004043fc <__retarget_lock_init_recursive>:
  4043fc:	4770      	bx	lr
  4043fe:	bf00      	nop

00404400 <__retarget_lock_close_recursive>:
  404400:	4770      	bx	lr
  404402:	bf00      	nop

00404404 <__retarget_lock_acquire_recursive>:
  404404:	4770      	bx	lr
  404406:	bf00      	nop

00404408 <__retarget_lock_release_recursive>:
  404408:	4770      	bx	lr
  40440a:	bf00      	nop

0040440c <__swhatbuf_r>:
  40440c:	b570      	push	{r4, r5, r6, lr}
  40440e:	460c      	mov	r4, r1
  404410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404414:	2900      	cmp	r1, #0
  404416:	b090      	sub	sp, #64	; 0x40
  404418:	4615      	mov	r5, r2
  40441a:	461e      	mov	r6, r3
  40441c:	db14      	blt.n	404448 <__swhatbuf_r+0x3c>
  40441e:	aa01      	add	r2, sp, #4
  404420:	f000 fc28 	bl	404c74 <_fstat_r>
  404424:	2800      	cmp	r0, #0
  404426:	db0f      	blt.n	404448 <__swhatbuf_r+0x3c>
  404428:	9a02      	ldr	r2, [sp, #8]
  40442a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40442e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404432:	fab2 f282 	clz	r2, r2
  404436:	0952      	lsrs	r2, r2, #5
  404438:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40443c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404440:	6032      	str	r2, [r6, #0]
  404442:	602b      	str	r3, [r5, #0]
  404444:	b010      	add	sp, #64	; 0x40
  404446:	bd70      	pop	{r4, r5, r6, pc}
  404448:	89a2      	ldrh	r2, [r4, #12]
  40444a:	2300      	movs	r3, #0
  40444c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404450:	6033      	str	r3, [r6, #0]
  404452:	d004      	beq.n	40445e <__swhatbuf_r+0x52>
  404454:	2240      	movs	r2, #64	; 0x40
  404456:	4618      	mov	r0, r3
  404458:	602a      	str	r2, [r5, #0]
  40445a:	b010      	add	sp, #64	; 0x40
  40445c:	bd70      	pop	{r4, r5, r6, pc}
  40445e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404462:	602b      	str	r3, [r5, #0]
  404464:	b010      	add	sp, #64	; 0x40
  404466:	bd70      	pop	{r4, r5, r6, pc}

00404468 <malloc>:
  404468:	4b02      	ldr	r3, [pc, #8]	; (404474 <malloc+0xc>)
  40446a:	4601      	mov	r1, r0
  40446c:	6818      	ldr	r0, [r3, #0]
  40446e:	f000 b803 	b.w	404478 <_malloc_r>
  404472:	bf00      	nop
  404474:	20000028 	.word	0x20000028

00404478 <_malloc_r>:
  404478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40447c:	f101 060b 	add.w	r6, r1, #11
  404480:	2e16      	cmp	r6, #22
  404482:	b083      	sub	sp, #12
  404484:	4605      	mov	r5, r0
  404486:	f240 809e 	bls.w	4045c6 <_malloc_r+0x14e>
  40448a:	f036 0607 	bics.w	r6, r6, #7
  40448e:	f100 80bd 	bmi.w	40460c <_malloc_r+0x194>
  404492:	42b1      	cmp	r1, r6
  404494:	f200 80ba 	bhi.w	40460c <_malloc_r+0x194>
  404498:	f000 fa9e 	bl	4049d8 <__malloc_lock>
  40449c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4044a0:	f0c0 8293 	bcc.w	4049ca <_malloc_r+0x552>
  4044a4:	0a73      	lsrs	r3, r6, #9
  4044a6:	f000 80b8 	beq.w	40461a <_malloc_r+0x1a2>
  4044aa:	2b04      	cmp	r3, #4
  4044ac:	f200 8179 	bhi.w	4047a2 <_malloc_r+0x32a>
  4044b0:	09b3      	lsrs	r3, r6, #6
  4044b2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4044b6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4044ba:	00c3      	lsls	r3, r0, #3
  4044bc:	4fbf      	ldr	r7, [pc, #764]	; (4047bc <_malloc_r+0x344>)
  4044be:	443b      	add	r3, r7
  4044c0:	f1a3 0108 	sub.w	r1, r3, #8
  4044c4:	685c      	ldr	r4, [r3, #4]
  4044c6:	42a1      	cmp	r1, r4
  4044c8:	d106      	bne.n	4044d8 <_malloc_r+0x60>
  4044ca:	e00c      	b.n	4044e6 <_malloc_r+0x6e>
  4044cc:	2a00      	cmp	r2, #0
  4044ce:	f280 80aa 	bge.w	404626 <_malloc_r+0x1ae>
  4044d2:	68e4      	ldr	r4, [r4, #12]
  4044d4:	42a1      	cmp	r1, r4
  4044d6:	d006      	beq.n	4044e6 <_malloc_r+0x6e>
  4044d8:	6863      	ldr	r3, [r4, #4]
  4044da:	f023 0303 	bic.w	r3, r3, #3
  4044de:	1b9a      	subs	r2, r3, r6
  4044e0:	2a0f      	cmp	r2, #15
  4044e2:	ddf3      	ble.n	4044cc <_malloc_r+0x54>
  4044e4:	4670      	mov	r0, lr
  4044e6:	693c      	ldr	r4, [r7, #16]
  4044e8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4047d0 <_malloc_r+0x358>
  4044ec:	4574      	cmp	r4, lr
  4044ee:	f000 81ab 	beq.w	404848 <_malloc_r+0x3d0>
  4044f2:	6863      	ldr	r3, [r4, #4]
  4044f4:	f023 0303 	bic.w	r3, r3, #3
  4044f8:	1b9a      	subs	r2, r3, r6
  4044fa:	2a0f      	cmp	r2, #15
  4044fc:	f300 8190 	bgt.w	404820 <_malloc_r+0x3a8>
  404500:	2a00      	cmp	r2, #0
  404502:	f8c7 e014 	str.w	lr, [r7, #20]
  404506:	f8c7 e010 	str.w	lr, [r7, #16]
  40450a:	f280 809d 	bge.w	404648 <_malloc_r+0x1d0>
  40450e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404512:	f080 8161 	bcs.w	4047d8 <_malloc_r+0x360>
  404516:	08db      	lsrs	r3, r3, #3
  404518:	f103 0c01 	add.w	ip, r3, #1
  40451c:	1099      	asrs	r1, r3, #2
  40451e:	687a      	ldr	r2, [r7, #4]
  404520:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404524:	f8c4 8008 	str.w	r8, [r4, #8]
  404528:	2301      	movs	r3, #1
  40452a:	408b      	lsls	r3, r1
  40452c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404530:	4313      	orrs	r3, r2
  404532:	3908      	subs	r1, #8
  404534:	60e1      	str	r1, [r4, #12]
  404536:	607b      	str	r3, [r7, #4]
  404538:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40453c:	f8c8 400c 	str.w	r4, [r8, #12]
  404540:	1082      	asrs	r2, r0, #2
  404542:	2401      	movs	r4, #1
  404544:	4094      	lsls	r4, r2
  404546:	429c      	cmp	r4, r3
  404548:	f200 808b 	bhi.w	404662 <_malloc_r+0x1ea>
  40454c:	421c      	tst	r4, r3
  40454e:	d106      	bne.n	40455e <_malloc_r+0xe6>
  404550:	f020 0003 	bic.w	r0, r0, #3
  404554:	0064      	lsls	r4, r4, #1
  404556:	421c      	tst	r4, r3
  404558:	f100 0004 	add.w	r0, r0, #4
  40455c:	d0fa      	beq.n	404554 <_malloc_r+0xdc>
  40455e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404562:	46cc      	mov	ip, r9
  404564:	4680      	mov	r8, r0
  404566:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40456a:	459c      	cmp	ip, r3
  40456c:	d107      	bne.n	40457e <_malloc_r+0x106>
  40456e:	e16d      	b.n	40484c <_malloc_r+0x3d4>
  404570:	2a00      	cmp	r2, #0
  404572:	f280 817b 	bge.w	40486c <_malloc_r+0x3f4>
  404576:	68db      	ldr	r3, [r3, #12]
  404578:	459c      	cmp	ip, r3
  40457a:	f000 8167 	beq.w	40484c <_malloc_r+0x3d4>
  40457e:	6859      	ldr	r1, [r3, #4]
  404580:	f021 0103 	bic.w	r1, r1, #3
  404584:	1b8a      	subs	r2, r1, r6
  404586:	2a0f      	cmp	r2, #15
  404588:	ddf2      	ble.n	404570 <_malloc_r+0xf8>
  40458a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40458e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404592:	9300      	str	r3, [sp, #0]
  404594:	199c      	adds	r4, r3, r6
  404596:	4628      	mov	r0, r5
  404598:	f046 0601 	orr.w	r6, r6, #1
  40459c:	f042 0501 	orr.w	r5, r2, #1
  4045a0:	605e      	str	r6, [r3, #4]
  4045a2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4045a6:	f8cc 8008 	str.w	r8, [ip, #8]
  4045aa:	617c      	str	r4, [r7, #20]
  4045ac:	613c      	str	r4, [r7, #16]
  4045ae:	f8c4 e00c 	str.w	lr, [r4, #12]
  4045b2:	f8c4 e008 	str.w	lr, [r4, #8]
  4045b6:	6065      	str	r5, [r4, #4]
  4045b8:	505a      	str	r2, [r3, r1]
  4045ba:	f000 fa13 	bl	4049e4 <__malloc_unlock>
  4045be:	9b00      	ldr	r3, [sp, #0]
  4045c0:	f103 0408 	add.w	r4, r3, #8
  4045c4:	e01e      	b.n	404604 <_malloc_r+0x18c>
  4045c6:	2910      	cmp	r1, #16
  4045c8:	d820      	bhi.n	40460c <_malloc_r+0x194>
  4045ca:	f000 fa05 	bl	4049d8 <__malloc_lock>
  4045ce:	2610      	movs	r6, #16
  4045d0:	2318      	movs	r3, #24
  4045d2:	2002      	movs	r0, #2
  4045d4:	4f79      	ldr	r7, [pc, #484]	; (4047bc <_malloc_r+0x344>)
  4045d6:	443b      	add	r3, r7
  4045d8:	f1a3 0208 	sub.w	r2, r3, #8
  4045dc:	685c      	ldr	r4, [r3, #4]
  4045de:	4294      	cmp	r4, r2
  4045e0:	f000 813d 	beq.w	40485e <_malloc_r+0x3e6>
  4045e4:	6863      	ldr	r3, [r4, #4]
  4045e6:	68e1      	ldr	r1, [r4, #12]
  4045e8:	68a6      	ldr	r6, [r4, #8]
  4045ea:	f023 0303 	bic.w	r3, r3, #3
  4045ee:	4423      	add	r3, r4
  4045f0:	4628      	mov	r0, r5
  4045f2:	685a      	ldr	r2, [r3, #4]
  4045f4:	60f1      	str	r1, [r6, #12]
  4045f6:	f042 0201 	orr.w	r2, r2, #1
  4045fa:	608e      	str	r6, [r1, #8]
  4045fc:	605a      	str	r2, [r3, #4]
  4045fe:	f000 f9f1 	bl	4049e4 <__malloc_unlock>
  404602:	3408      	adds	r4, #8
  404604:	4620      	mov	r0, r4
  404606:	b003      	add	sp, #12
  404608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40460c:	2400      	movs	r4, #0
  40460e:	230c      	movs	r3, #12
  404610:	4620      	mov	r0, r4
  404612:	602b      	str	r3, [r5, #0]
  404614:	b003      	add	sp, #12
  404616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40461a:	2040      	movs	r0, #64	; 0x40
  40461c:	f44f 7300 	mov.w	r3, #512	; 0x200
  404620:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404624:	e74a      	b.n	4044bc <_malloc_r+0x44>
  404626:	4423      	add	r3, r4
  404628:	68e1      	ldr	r1, [r4, #12]
  40462a:	685a      	ldr	r2, [r3, #4]
  40462c:	68a6      	ldr	r6, [r4, #8]
  40462e:	f042 0201 	orr.w	r2, r2, #1
  404632:	60f1      	str	r1, [r6, #12]
  404634:	4628      	mov	r0, r5
  404636:	608e      	str	r6, [r1, #8]
  404638:	605a      	str	r2, [r3, #4]
  40463a:	f000 f9d3 	bl	4049e4 <__malloc_unlock>
  40463e:	3408      	adds	r4, #8
  404640:	4620      	mov	r0, r4
  404642:	b003      	add	sp, #12
  404644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404648:	4423      	add	r3, r4
  40464a:	4628      	mov	r0, r5
  40464c:	685a      	ldr	r2, [r3, #4]
  40464e:	f042 0201 	orr.w	r2, r2, #1
  404652:	605a      	str	r2, [r3, #4]
  404654:	f000 f9c6 	bl	4049e4 <__malloc_unlock>
  404658:	3408      	adds	r4, #8
  40465a:	4620      	mov	r0, r4
  40465c:	b003      	add	sp, #12
  40465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404662:	68bc      	ldr	r4, [r7, #8]
  404664:	6863      	ldr	r3, [r4, #4]
  404666:	f023 0803 	bic.w	r8, r3, #3
  40466a:	45b0      	cmp	r8, r6
  40466c:	d304      	bcc.n	404678 <_malloc_r+0x200>
  40466e:	eba8 0306 	sub.w	r3, r8, r6
  404672:	2b0f      	cmp	r3, #15
  404674:	f300 8085 	bgt.w	404782 <_malloc_r+0x30a>
  404678:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4047d4 <_malloc_r+0x35c>
  40467c:	4b50      	ldr	r3, [pc, #320]	; (4047c0 <_malloc_r+0x348>)
  40467e:	f8d9 2000 	ldr.w	r2, [r9]
  404682:	681b      	ldr	r3, [r3, #0]
  404684:	3201      	adds	r2, #1
  404686:	4433      	add	r3, r6
  404688:	eb04 0a08 	add.w	sl, r4, r8
  40468c:	f000 8155 	beq.w	40493a <_malloc_r+0x4c2>
  404690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404694:	330f      	adds	r3, #15
  404696:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40469a:	f02b 0b0f 	bic.w	fp, fp, #15
  40469e:	4659      	mov	r1, fp
  4046a0:	4628      	mov	r0, r5
  4046a2:	f000 f9a5 	bl	4049f0 <_sbrk_r>
  4046a6:	1c41      	adds	r1, r0, #1
  4046a8:	4602      	mov	r2, r0
  4046aa:	f000 80fc 	beq.w	4048a6 <_malloc_r+0x42e>
  4046ae:	4582      	cmp	sl, r0
  4046b0:	f200 80f7 	bhi.w	4048a2 <_malloc_r+0x42a>
  4046b4:	4b43      	ldr	r3, [pc, #268]	; (4047c4 <_malloc_r+0x34c>)
  4046b6:	6819      	ldr	r1, [r3, #0]
  4046b8:	4459      	add	r1, fp
  4046ba:	6019      	str	r1, [r3, #0]
  4046bc:	f000 814d 	beq.w	40495a <_malloc_r+0x4e2>
  4046c0:	f8d9 0000 	ldr.w	r0, [r9]
  4046c4:	3001      	adds	r0, #1
  4046c6:	bf1b      	ittet	ne
  4046c8:	eba2 0a0a 	subne.w	sl, r2, sl
  4046cc:	4451      	addne	r1, sl
  4046ce:	f8c9 2000 	streq.w	r2, [r9]
  4046d2:	6019      	strne	r1, [r3, #0]
  4046d4:	f012 0107 	ands.w	r1, r2, #7
  4046d8:	f000 8115 	beq.w	404906 <_malloc_r+0x48e>
  4046dc:	f1c1 0008 	rsb	r0, r1, #8
  4046e0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4046e4:	4402      	add	r2, r0
  4046e6:	3108      	adds	r1, #8
  4046e8:	eb02 090b 	add.w	r9, r2, fp
  4046ec:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4046f0:	eba1 0909 	sub.w	r9, r1, r9
  4046f4:	4649      	mov	r1, r9
  4046f6:	4628      	mov	r0, r5
  4046f8:	9301      	str	r3, [sp, #4]
  4046fa:	9200      	str	r2, [sp, #0]
  4046fc:	f000 f978 	bl	4049f0 <_sbrk_r>
  404700:	1c43      	adds	r3, r0, #1
  404702:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404706:	f000 8143 	beq.w	404990 <_malloc_r+0x518>
  40470a:	1a80      	subs	r0, r0, r2
  40470c:	4448      	add	r0, r9
  40470e:	f040 0001 	orr.w	r0, r0, #1
  404712:	6819      	ldr	r1, [r3, #0]
  404714:	60ba      	str	r2, [r7, #8]
  404716:	4449      	add	r1, r9
  404718:	42bc      	cmp	r4, r7
  40471a:	6050      	str	r0, [r2, #4]
  40471c:	6019      	str	r1, [r3, #0]
  40471e:	d017      	beq.n	404750 <_malloc_r+0x2d8>
  404720:	f1b8 0f0f 	cmp.w	r8, #15
  404724:	f240 80fb 	bls.w	40491e <_malloc_r+0x4a6>
  404728:	6860      	ldr	r0, [r4, #4]
  40472a:	f1a8 020c 	sub.w	r2, r8, #12
  40472e:	f022 0207 	bic.w	r2, r2, #7
  404732:	eb04 0e02 	add.w	lr, r4, r2
  404736:	f000 0001 	and.w	r0, r0, #1
  40473a:	f04f 0c05 	mov.w	ip, #5
  40473e:	4310      	orrs	r0, r2
  404740:	2a0f      	cmp	r2, #15
  404742:	6060      	str	r0, [r4, #4]
  404744:	f8ce c004 	str.w	ip, [lr, #4]
  404748:	f8ce c008 	str.w	ip, [lr, #8]
  40474c:	f200 8117 	bhi.w	40497e <_malloc_r+0x506>
  404750:	4b1d      	ldr	r3, [pc, #116]	; (4047c8 <_malloc_r+0x350>)
  404752:	68bc      	ldr	r4, [r7, #8]
  404754:	681a      	ldr	r2, [r3, #0]
  404756:	4291      	cmp	r1, r2
  404758:	bf88      	it	hi
  40475a:	6019      	strhi	r1, [r3, #0]
  40475c:	4b1b      	ldr	r3, [pc, #108]	; (4047cc <_malloc_r+0x354>)
  40475e:	681a      	ldr	r2, [r3, #0]
  404760:	4291      	cmp	r1, r2
  404762:	6862      	ldr	r2, [r4, #4]
  404764:	bf88      	it	hi
  404766:	6019      	strhi	r1, [r3, #0]
  404768:	f022 0203 	bic.w	r2, r2, #3
  40476c:	4296      	cmp	r6, r2
  40476e:	eba2 0306 	sub.w	r3, r2, r6
  404772:	d801      	bhi.n	404778 <_malloc_r+0x300>
  404774:	2b0f      	cmp	r3, #15
  404776:	dc04      	bgt.n	404782 <_malloc_r+0x30a>
  404778:	4628      	mov	r0, r5
  40477a:	f000 f933 	bl	4049e4 <__malloc_unlock>
  40477e:	2400      	movs	r4, #0
  404780:	e740      	b.n	404604 <_malloc_r+0x18c>
  404782:	19a2      	adds	r2, r4, r6
  404784:	f043 0301 	orr.w	r3, r3, #1
  404788:	f046 0601 	orr.w	r6, r6, #1
  40478c:	6066      	str	r6, [r4, #4]
  40478e:	4628      	mov	r0, r5
  404790:	60ba      	str	r2, [r7, #8]
  404792:	6053      	str	r3, [r2, #4]
  404794:	f000 f926 	bl	4049e4 <__malloc_unlock>
  404798:	3408      	adds	r4, #8
  40479a:	4620      	mov	r0, r4
  40479c:	b003      	add	sp, #12
  40479e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047a2:	2b14      	cmp	r3, #20
  4047a4:	d971      	bls.n	40488a <_malloc_r+0x412>
  4047a6:	2b54      	cmp	r3, #84	; 0x54
  4047a8:	f200 80a3 	bhi.w	4048f2 <_malloc_r+0x47a>
  4047ac:	0b33      	lsrs	r3, r6, #12
  4047ae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4047b2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4047b6:	00c3      	lsls	r3, r0, #3
  4047b8:	e680      	b.n	4044bc <_malloc_r+0x44>
  4047ba:	bf00      	nop
  4047bc:	2000045c 	.word	0x2000045c
  4047c0:	2000cd5c 	.word	0x2000cd5c
  4047c4:	2000cd2c 	.word	0x2000cd2c
  4047c8:	2000cd54 	.word	0x2000cd54
  4047cc:	2000cd58 	.word	0x2000cd58
  4047d0:	20000464 	.word	0x20000464
  4047d4:	20000864 	.word	0x20000864
  4047d8:	0a5a      	lsrs	r2, r3, #9
  4047da:	2a04      	cmp	r2, #4
  4047dc:	d95b      	bls.n	404896 <_malloc_r+0x41e>
  4047de:	2a14      	cmp	r2, #20
  4047e0:	f200 80ae 	bhi.w	404940 <_malloc_r+0x4c8>
  4047e4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4047e8:	00c9      	lsls	r1, r1, #3
  4047ea:	325b      	adds	r2, #91	; 0x5b
  4047ec:	eb07 0c01 	add.w	ip, r7, r1
  4047f0:	5879      	ldr	r1, [r7, r1]
  4047f2:	f1ac 0c08 	sub.w	ip, ip, #8
  4047f6:	458c      	cmp	ip, r1
  4047f8:	f000 8088 	beq.w	40490c <_malloc_r+0x494>
  4047fc:	684a      	ldr	r2, [r1, #4]
  4047fe:	f022 0203 	bic.w	r2, r2, #3
  404802:	4293      	cmp	r3, r2
  404804:	d273      	bcs.n	4048ee <_malloc_r+0x476>
  404806:	6889      	ldr	r1, [r1, #8]
  404808:	458c      	cmp	ip, r1
  40480a:	d1f7      	bne.n	4047fc <_malloc_r+0x384>
  40480c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404810:	687b      	ldr	r3, [r7, #4]
  404812:	60e2      	str	r2, [r4, #12]
  404814:	f8c4 c008 	str.w	ip, [r4, #8]
  404818:	6094      	str	r4, [r2, #8]
  40481a:	f8cc 400c 	str.w	r4, [ip, #12]
  40481e:	e68f      	b.n	404540 <_malloc_r+0xc8>
  404820:	19a1      	adds	r1, r4, r6
  404822:	f046 0c01 	orr.w	ip, r6, #1
  404826:	f042 0601 	orr.w	r6, r2, #1
  40482a:	f8c4 c004 	str.w	ip, [r4, #4]
  40482e:	4628      	mov	r0, r5
  404830:	6179      	str	r1, [r7, #20]
  404832:	6139      	str	r1, [r7, #16]
  404834:	f8c1 e00c 	str.w	lr, [r1, #12]
  404838:	f8c1 e008 	str.w	lr, [r1, #8]
  40483c:	604e      	str	r6, [r1, #4]
  40483e:	50e2      	str	r2, [r4, r3]
  404840:	f000 f8d0 	bl	4049e4 <__malloc_unlock>
  404844:	3408      	adds	r4, #8
  404846:	e6dd      	b.n	404604 <_malloc_r+0x18c>
  404848:	687b      	ldr	r3, [r7, #4]
  40484a:	e679      	b.n	404540 <_malloc_r+0xc8>
  40484c:	f108 0801 	add.w	r8, r8, #1
  404850:	f018 0f03 	tst.w	r8, #3
  404854:	f10c 0c08 	add.w	ip, ip, #8
  404858:	f47f ae85 	bne.w	404566 <_malloc_r+0xee>
  40485c:	e02d      	b.n	4048ba <_malloc_r+0x442>
  40485e:	68dc      	ldr	r4, [r3, #12]
  404860:	42a3      	cmp	r3, r4
  404862:	bf08      	it	eq
  404864:	3002      	addeq	r0, #2
  404866:	f43f ae3e 	beq.w	4044e6 <_malloc_r+0x6e>
  40486a:	e6bb      	b.n	4045e4 <_malloc_r+0x16c>
  40486c:	4419      	add	r1, r3
  40486e:	461c      	mov	r4, r3
  404870:	684a      	ldr	r2, [r1, #4]
  404872:	68db      	ldr	r3, [r3, #12]
  404874:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404878:	f042 0201 	orr.w	r2, r2, #1
  40487c:	604a      	str	r2, [r1, #4]
  40487e:	4628      	mov	r0, r5
  404880:	60f3      	str	r3, [r6, #12]
  404882:	609e      	str	r6, [r3, #8]
  404884:	f000 f8ae 	bl	4049e4 <__malloc_unlock>
  404888:	e6bc      	b.n	404604 <_malloc_r+0x18c>
  40488a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40488e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404892:	00c3      	lsls	r3, r0, #3
  404894:	e612      	b.n	4044bc <_malloc_r+0x44>
  404896:	099a      	lsrs	r2, r3, #6
  404898:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40489c:	00c9      	lsls	r1, r1, #3
  40489e:	3238      	adds	r2, #56	; 0x38
  4048a0:	e7a4      	b.n	4047ec <_malloc_r+0x374>
  4048a2:	42bc      	cmp	r4, r7
  4048a4:	d054      	beq.n	404950 <_malloc_r+0x4d8>
  4048a6:	68bc      	ldr	r4, [r7, #8]
  4048a8:	6862      	ldr	r2, [r4, #4]
  4048aa:	f022 0203 	bic.w	r2, r2, #3
  4048ae:	e75d      	b.n	40476c <_malloc_r+0x2f4>
  4048b0:	f859 3908 	ldr.w	r3, [r9], #-8
  4048b4:	4599      	cmp	r9, r3
  4048b6:	f040 8086 	bne.w	4049c6 <_malloc_r+0x54e>
  4048ba:	f010 0f03 	tst.w	r0, #3
  4048be:	f100 30ff 	add.w	r0, r0, #4294967295
  4048c2:	d1f5      	bne.n	4048b0 <_malloc_r+0x438>
  4048c4:	687b      	ldr	r3, [r7, #4]
  4048c6:	ea23 0304 	bic.w	r3, r3, r4
  4048ca:	607b      	str	r3, [r7, #4]
  4048cc:	0064      	lsls	r4, r4, #1
  4048ce:	429c      	cmp	r4, r3
  4048d0:	f63f aec7 	bhi.w	404662 <_malloc_r+0x1ea>
  4048d4:	2c00      	cmp	r4, #0
  4048d6:	f43f aec4 	beq.w	404662 <_malloc_r+0x1ea>
  4048da:	421c      	tst	r4, r3
  4048dc:	4640      	mov	r0, r8
  4048de:	f47f ae3e 	bne.w	40455e <_malloc_r+0xe6>
  4048e2:	0064      	lsls	r4, r4, #1
  4048e4:	421c      	tst	r4, r3
  4048e6:	f100 0004 	add.w	r0, r0, #4
  4048ea:	d0fa      	beq.n	4048e2 <_malloc_r+0x46a>
  4048ec:	e637      	b.n	40455e <_malloc_r+0xe6>
  4048ee:	468c      	mov	ip, r1
  4048f0:	e78c      	b.n	40480c <_malloc_r+0x394>
  4048f2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4048f6:	d815      	bhi.n	404924 <_malloc_r+0x4ac>
  4048f8:	0bf3      	lsrs	r3, r6, #15
  4048fa:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4048fe:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404902:	00c3      	lsls	r3, r0, #3
  404904:	e5da      	b.n	4044bc <_malloc_r+0x44>
  404906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40490a:	e6ed      	b.n	4046e8 <_malloc_r+0x270>
  40490c:	687b      	ldr	r3, [r7, #4]
  40490e:	1092      	asrs	r2, r2, #2
  404910:	2101      	movs	r1, #1
  404912:	fa01 f202 	lsl.w	r2, r1, r2
  404916:	4313      	orrs	r3, r2
  404918:	607b      	str	r3, [r7, #4]
  40491a:	4662      	mov	r2, ip
  40491c:	e779      	b.n	404812 <_malloc_r+0x39a>
  40491e:	2301      	movs	r3, #1
  404920:	6053      	str	r3, [r2, #4]
  404922:	e729      	b.n	404778 <_malloc_r+0x300>
  404924:	f240 5254 	movw	r2, #1364	; 0x554
  404928:	4293      	cmp	r3, r2
  40492a:	d822      	bhi.n	404972 <_malloc_r+0x4fa>
  40492c:	0cb3      	lsrs	r3, r6, #18
  40492e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404932:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404936:	00c3      	lsls	r3, r0, #3
  404938:	e5c0      	b.n	4044bc <_malloc_r+0x44>
  40493a:	f103 0b10 	add.w	fp, r3, #16
  40493e:	e6ae      	b.n	40469e <_malloc_r+0x226>
  404940:	2a54      	cmp	r2, #84	; 0x54
  404942:	d829      	bhi.n	404998 <_malloc_r+0x520>
  404944:	0b1a      	lsrs	r2, r3, #12
  404946:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40494a:	00c9      	lsls	r1, r1, #3
  40494c:	326e      	adds	r2, #110	; 0x6e
  40494e:	e74d      	b.n	4047ec <_malloc_r+0x374>
  404950:	4b20      	ldr	r3, [pc, #128]	; (4049d4 <_malloc_r+0x55c>)
  404952:	6819      	ldr	r1, [r3, #0]
  404954:	4459      	add	r1, fp
  404956:	6019      	str	r1, [r3, #0]
  404958:	e6b2      	b.n	4046c0 <_malloc_r+0x248>
  40495a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40495e:	2800      	cmp	r0, #0
  404960:	f47f aeae 	bne.w	4046c0 <_malloc_r+0x248>
  404964:	eb08 030b 	add.w	r3, r8, fp
  404968:	68ba      	ldr	r2, [r7, #8]
  40496a:	f043 0301 	orr.w	r3, r3, #1
  40496e:	6053      	str	r3, [r2, #4]
  404970:	e6ee      	b.n	404750 <_malloc_r+0x2d8>
  404972:	207f      	movs	r0, #127	; 0x7f
  404974:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404978:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40497c:	e59e      	b.n	4044bc <_malloc_r+0x44>
  40497e:	f104 0108 	add.w	r1, r4, #8
  404982:	4628      	mov	r0, r5
  404984:	9300      	str	r3, [sp, #0]
  404986:	f7ff fc29 	bl	4041dc <_free_r>
  40498a:	9b00      	ldr	r3, [sp, #0]
  40498c:	6819      	ldr	r1, [r3, #0]
  40498e:	e6df      	b.n	404750 <_malloc_r+0x2d8>
  404990:	2001      	movs	r0, #1
  404992:	f04f 0900 	mov.w	r9, #0
  404996:	e6bc      	b.n	404712 <_malloc_r+0x29a>
  404998:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40499c:	d805      	bhi.n	4049aa <_malloc_r+0x532>
  40499e:	0bda      	lsrs	r2, r3, #15
  4049a0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4049a4:	00c9      	lsls	r1, r1, #3
  4049a6:	3277      	adds	r2, #119	; 0x77
  4049a8:	e720      	b.n	4047ec <_malloc_r+0x374>
  4049aa:	f240 5154 	movw	r1, #1364	; 0x554
  4049ae:	428a      	cmp	r2, r1
  4049b0:	d805      	bhi.n	4049be <_malloc_r+0x546>
  4049b2:	0c9a      	lsrs	r2, r3, #18
  4049b4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4049b8:	00c9      	lsls	r1, r1, #3
  4049ba:	327c      	adds	r2, #124	; 0x7c
  4049bc:	e716      	b.n	4047ec <_malloc_r+0x374>
  4049be:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4049c2:	227e      	movs	r2, #126	; 0x7e
  4049c4:	e712      	b.n	4047ec <_malloc_r+0x374>
  4049c6:	687b      	ldr	r3, [r7, #4]
  4049c8:	e780      	b.n	4048cc <_malloc_r+0x454>
  4049ca:	08f0      	lsrs	r0, r6, #3
  4049cc:	f106 0308 	add.w	r3, r6, #8
  4049d0:	e600      	b.n	4045d4 <_malloc_r+0x15c>
  4049d2:	bf00      	nop
  4049d4:	2000cd2c 	.word	0x2000cd2c

004049d8 <__malloc_lock>:
  4049d8:	4801      	ldr	r0, [pc, #4]	; (4049e0 <__malloc_lock+0x8>)
  4049da:	f7ff bd13 	b.w	404404 <__retarget_lock_acquire_recursive>
  4049de:	bf00      	nop
  4049e0:	2000ce58 	.word	0x2000ce58

004049e4 <__malloc_unlock>:
  4049e4:	4801      	ldr	r0, [pc, #4]	; (4049ec <__malloc_unlock+0x8>)
  4049e6:	f7ff bd0f 	b.w	404408 <__retarget_lock_release_recursive>
  4049ea:	bf00      	nop
  4049ec:	2000ce58 	.word	0x2000ce58

004049f0 <_sbrk_r>:
  4049f0:	b538      	push	{r3, r4, r5, lr}
  4049f2:	4c07      	ldr	r4, [pc, #28]	; (404a10 <_sbrk_r+0x20>)
  4049f4:	2300      	movs	r3, #0
  4049f6:	4605      	mov	r5, r0
  4049f8:	4608      	mov	r0, r1
  4049fa:	6023      	str	r3, [r4, #0]
  4049fc:	f7fc feaa 	bl	401754 <_sbrk>
  404a00:	1c43      	adds	r3, r0, #1
  404a02:	d000      	beq.n	404a06 <_sbrk_r+0x16>
  404a04:	bd38      	pop	{r3, r4, r5, pc}
  404a06:	6823      	ldr	r3, [r4, #0]
  404a08:	2b00      	cmp	r3, #0
  404a0a:	d0fb      	beq.n	404a04 <_sbrk_r+0x14>
  404a0c:	602b      	str	r3, [r5, #0]
  404a0e:	bd38      	pop	{r3, r4, r5, pc}
  404a10:	2000ce6c 	.word	0x2000ce6c

00404a14 <__sread>:
  404a14:	b510      	push	{r4, lr}
  404a16:	460c      	mov	r4, r1
  404a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a1c:	f000 f954 	bl	404cc8 <_read_r>
  404a20:	2800      	cmp	r0, #0
  404a22:	db03      	blt.n	404a2c <__sread+0x18>
  404a24:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404a26:	4403      	add	r3, r0
  404a28:	6523      	str	r3, [r4, #80]	; 0x50
  404a2a:	bd10      	pop	{r4, pc}
  404a2c:	89a3      	ldrh	r3, [r4, #12]
  404a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404a32:	81a3      	strh	r3, [r4, #12]
  404a34:	bd10      	pop	{r4, pc}
  404a36:	bf00      	nop

00404a38 <__swrite>:
  404a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a3c:	4616      	mov	r6, r2
  404a3e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404a42:	461f      	mov	r7, r3
  404a44:	05d3      	lsls	r3, r2, #23
  404a46:	460c      	mov	r4, r1
  404a48:	4605      	mov	r5, r0
  404a4a:	d507      	bpl.n	404a5c <__swrite+0x24>
  404a4c:	2200      	movs	r2, #0
  404a4e:	2302      	movs	r3, #2
  404a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a54:	f000 f922 	bl	404c9c <_lseek_r>
  404a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404a60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404a64:	81a2      	strh	r2, [r4, #12]
  404a66:	463b      	mov	r3, r7
  404a68:	4632      	mov	r2, r6
  404a6a:	4628      	mov	r0, r5
  404a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404a70:	f000 b814 	b.w	404a9c <_write_r>

00404a74 <__sseek>:
  404a74:	b510      	push	{r4, lr}
  404a76:	460c      	mov	r4, r1
  404a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a7c:	f000 f90e 	bl	404c9c <_lseek_r>
  404a80:	89a3      	ldrh	r3, [r4, #12]
  404a82:	1c42      	adds	r2, r0, #1
  404a84:	bf0e      	itee	eq
  404a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404a8e:	6520      	strne	r0, [r4, #80]	; 0x50
  404a90:	81a3      	strh	r3, [r4, #12]
  404a92:	bd10      	pop	{r4, pc}

00404a94 <__sclose>:
  404a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a98:	f000 b878 	b.w	404b8c <_close_r>

00404a9c <_write_r>:
  404a9c:	b570      	push	{r4, r5, r6, lr}
  404a9e:	460d      	mov	r5, r1
  404aa0:	4c08      	ldr	r4, [pc, #32]	; (404ac4 <_write_r+0x28>)
  404aa2:	4611      	mov	r1, r2
  404aa4:	4606      	mov	r6, r0
  404aa6:	461a      	mov	r2, r3
  404aa8:	4628      	mov	r0, r5
  404aaa:	2300      	movs	r3, #0
  404aac:	6023      	str	r3, [r4, #0]
  404aae:	f7fc f977 	bl	400da0 <_write>
  404ab2:	1c43      	adds	r3, r0, #1
  404ab4:	d000      	beq.n	404ab8 <_write_r+0x1c>
  404ab6:	bd70      	pop	{r4, r5, r6, pc}
  404ab8:	6823      	ldr	r3, [r4, #0]
  404aba:	2b00      	cmp	r3, #0
  404abc:	d0fb      	beq.n	404ab6 <_write_r+0x1a>
  404abe:	6033      	str	r3, [r6, #0]
  404ac0:	bd70      	pop	{r4, r5, r6, pc}
  404ac2:	bf00      	nop
  404ac4:	2000ce6c 	.word	0x2000ce6c

00404ac8 <__register_exitproc>:
  404ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404acc:	4d2c      	ldr	r5, [pc, #176]	; (404b80 <__register_exitproc+0xb8>)
  404ace:	4606      	mov	r6, r0
  404ad0:	6828      	ldr	r0, [r5, #0]
  404ad2:	4698      	mov	r8, r3
  404ad4:	460f      	mov	r7, r1
  404ad6:	4691      	mov	r9, r2
  404ad8:	f7ff fc94 	bl	404404 <__retarget_lock_acquire_recursive>
  404adc:	4b29      	ldr	r3, [pc, #164]	; (404b84 <__register_exitproc+0xbc>)
  404ade:	681c      	ldr	r4, [r3, #0]
  404ae0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404ae4:	2b00      	cmp	r3, #0
  404ae6:	d03e      	beq.n	404b66 <__register_exitproc+0x9e>
  404ae8:	685a      	ldr	r2, [r3, #4]
  404aea:	2a1f      	cmp	r2, #31
  404aec:	dc1c      	bgt.n	404b28 <__register_exitproc+0x60>
  404aee:	f102 0e01 	add.w	lr, r2, #1
  404af2:	b176      	cbz	r6, 404b12 <__register_exitproc+0x4a>
  404af4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404af8:	2401      	movs	r4, #1
  404afa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  404afe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404b02:	4094      	lsls	r4, r2
  404b04:	4320      	orrs	r0, r4
  404b06:	2e02      	cmp	r6, #2
  404b08:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  404b0c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404b10:	d023      	beq.n	404b5a <__register_exitproc+0x92>
  404b12:	3202      	adds	r2, #2
  404b14:	f8c3 e004 	str.w	lr, [r3, #4]
  404b18:	6828      	ldr	r0, [r5, #0]
  404b1a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  404b1e:	f7ff fc73 	bl	404408 <__retarget_lock_release_recursive>
  404b22:	2000      	movs	r0, #0
  404b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b28:	4b17      	ldr	r3, [pc, #92]	; (404b88 <__register_exitproc+0xc0>)
  404b2a:	b30b      	cbz	r3, 404b70 <__register_exitproc+0xa8>
  404b2c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404b30:	f7ff fc9a 	bl	404468 <malloc>
  404b34:	4603      	mov	r3, r0
  404b36:	b1d8      	cbz	r0, 404b70 <__register_exitproc+0xa8>
  404b38:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  404b3c:	6002      	str	r2, [r0, #0]
  404b3e:	2100      	movs	r1, #0
  404b40:	6041      	str	r1, [r0, #4]
  404b42:	460a      	mov	r2, r1
  404b44:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404b48:	f04f 0e01 	mov.w	lr, #1
  404b4c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404b50:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404b54:	2e00      	cmp	r6, #0
  404b56:	d0dc      	beq.n	404b12 <__register_exitproc+0x4a>
  404b58:	e7cc      	b.n	404af4 <__register_exitproc+0x2c>
  404b5a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  404b5e:	430c      	orrs	r4, r1
  404b60:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404b64:	e7d5      	b.n	404b12 <__register_exitproc+0x4a>
  404b66:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404b6a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  404b6e:	e7bb      	b.n	404ae8 <__register_exitproc+0x20>
  404b70:	6828      	ldr	r0, [r5, #0]
  404b72:	f7ff fc49 	bl	404408 <__retarget_lock_release_recursive>
  404b76:	f04f 30ff 	mov.w	r0, #4294967295
  404b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b7e:	bf00      	nop
  404b80:	20000458 	.word	0x20000458
  404b84:	00404d10 	.word	0x00404d10
  404b88:	00404469 	.word	0x00404469

00404b8c <_close_r>:
  404b8c:	b538      	push	{r3, r4, r5, lr}
  404b8e:	4c07      	ldr	r4, [pc, #28]	; (404bac <_close_r+0x20>)
  404b90:	2300      	movs	r3, #0
  404b92:	4605      	mov	r5, r0
  404b94:	4608      	mov	r0, r1
  404b96:	6023      	str	r3, [r4, #0]
  404b98:	f7fc fdf8 	bl	40178c <_close>
  404b9c:	1c43      	adds	r3, r0, #1
  404b9e:	d000      	beq.n	404ba2 <_close_r+0x16>
  404ba0:	bd38      	pop	{r3, r4, r5, pc}
  404ba2:	6823      	ldr	r3, [r4, #0]
  404ba4:	2b00      	cmp	r3, #0
  404ba6:	d0fb      	beq.n	404ba0 <_close_r+0x14>
  404ba8:	602b      	str	r3, [r5, #0]
  404baa:	bd38      	pop	{r3, r4, r5, pc}
  404bac:	2000ce6c 	.word	0x2000ce6c

00404bb0 <_fclose_r>:
  404bb0:	b570      	push	{r4, r5, r6, lr}
  404bb2:	b159      	cbz	r1, 404bcc <_fclose_r+0x1c>
  404bb4:	4605      	mov	r5, r0
  404bb6:	460c      	mov	r4, r1
  404bb8:	b110      	cbz	r0, 404bc0 <_fclose_r+0x10>
  404bba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404bbc:	2b00      	cmp	r3, #0
  404bbe:	d03c      	beq.n	404c3a <_fclose_r+0x8a>
  404bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404bc2:	07d8      	lsls	r0, r3, #31
  404bc4:	d505      	bpl.n	404bd2 <_fclose_r+0x22>
  404bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bca:	b92b      	cbnz	r3, 404bd8 <_fclose_r+0x28>
  404bcc:	2600      	movs	r6, #0
  404bce:	4630      	mov	r0, r6
  404bd0:	bd70      	pop	{r4, r5, r6, pc}
  404bd2:	89a3      	ldrh	r3, [r4, #12]
  404bd4:	0599      	lsls	r1, r3, #22
  404bd6:	d53c      	bpl.n	404c52 <_fclose_r+0xa2>
  404bd8:	4621      	mov	r1, r4
  404bda:	4628      	mov	r0, r5
  404bdc:	f7ff f964 	bl	403ea8 <__sflush_r>
  404be0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404be2:	4606      	mov	r6, r0
  404be4:	b133      	cbz	r3, 404bf4 <_fclose_r+0x44>
  404be6:	69e1      	ldr	r1, [r4, #28]
  404be8:	4628      	mov	r0, r5
  404bea:	4798      	blx	r3
  404bec:	2800      	cmp	r0, #0
  404bee:	bfb8      	it	lt
  404bf0:	f04f 36ff 	movlt.w	r6, #4294967295
  404bf4:	89a3      	ldrh	r3, [r4, #12]
  404bf6:	061a      	lsls	r2, r3, #24
  404bf8:	d422      	bmi.n	404c40 <_fclose_r+0x90>
  404bfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404bfc:	b141      	cbz	r1, 404c10 <_fclose_r+0x60>
  404bfe:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404c02:	4299      	cmp	r1, r3
  404c04:	d002      	beq.n	404c0c <_fclose_r+0x5c>
  404c06:	4628      	mov	r0, r5
  404c08:	f7ff fae8 	bl	4041dc <_free_r>
  404c0c:	2300      	movs	r3, #0
  404c0e:	6323      	str	r3, [r4, #48]	; 0x30
  404c10:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404c12:	b121      	cbz	r1, 404c1e <_fclose_r+0x6e>
  404c14:	4628      	mov	r0, r5
  404c16:	f7ff fae1 	bl	4041dc <_free_r>
  404c1a:	2300      	movs	r3, #0
  404c1c:	6463      	str	r3, [r4, #68]	; 0x44
  404c1e:	f7ff fa67 	bl	4040f0 <__sfp_lock_acquire>
  404c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404c24:	2200      	movs	r2, #0
  404c26:	07db      	lsls	r3, r3, #31
  404c28:	81a2      	strh	r2, [r4, #12]
  404c2a:	d50e      	bpl.n	404c4a <_fclose_r+0x9a>
  404c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c2e:	f7ff fbe7 	bl	404400 <__retarget_lock_close_recursive>
  404c32:	f7ff fa63 	bl	4040fc <__sfp_lock_release>
  404c36:	4630      	mov	r0, r6
  404c38:	bd70      	pop	{r4, r5, r6, pc}
  404c3a:	f7ff fa2d 	bl	404098 <__sinit>
  404c3e:	e7bf      	b.n	404bc0 <_fclose_r+0x10>
  404c40:	6921      	ldr	r1, [r4, #16]
  404c42:	4628      	mov	r0, r5
  404c44:	f7ff faca 	bl	4041dc <_free_r>
  404c48:	e7d7      	b.n	404bfa <_fclose_r+0x4a>
  404c4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c4c:	f7ff fbdc 	bl	404408 <__retarget_lock_release_recursive>
  404c50:	e7ec      	b.n	404c2c <_fclose_r+0x7c>
  404c52:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c54:	f7ff fbd6 	bl	404404 <__retarget_lock_acquire_recursive>
  404c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c5c:	2b00      	cmp	r3, #0
  404c5e:	d1bb      	bne.n	404bd8 <_fclose_r+0x28>
  404c60:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404c62:	f016 0601 	ands.w	r6, r6, #1
  404c66:	d1b1      	bne.n	404bcc <_fclose_r+0x1c>
  404c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c6a:	f7ff fbcd 	bl	404408 <__retarget_lock_release_recursive>
  404c6e:	4630      	mov	r0, r6
  404c70:	bd70      	pop	{r4, r5, r6, pc}
  404c72:	bf00      	nop

00404c74 <_fstat_r>:
  404c74:	b538      	push	{r3, r4, r5, lr}
  404c76:	460b      	mov	r3, r1
  404c78:	4c07      	ldr	r4, [pc, #28]	; (404c98 <_fstat_r+0x24>)
  404c7a:	4605      	mov	r5, r0
  404c7c:	4611      	mov	r1, r2
  404c7e:	4618      	mov	r0, r3
  404c80:	2300      	movs	r3, #0
  404c82:	6023      	str	r3, [r4, #0]
  404c84:	f7fc fd85 	bl	401792 <_fstat>
  404c88:	1c43      	adds	r3, r0, #1
  404c8a:	d000      	beq.n	404c8e <_fstat_r+0x1a>
  404c8c:	bd38      	pop	{r3, r4, r5, pc}
  404c8e:	6823      	ldr	r3, [r4, #0]
  404c90:	2b00      	cmp	r3, #0
  404c92:	d0fb      	beq.n	404c8c <_fstat_r+0x18>
  404c94:	602b      	str	r3, [r5, #0]
  404c96:	bd38      	pop	{r3, r4, r5, pc}
  404c98:	2000ce6c 	.word	0x2000ce6c

00404c9c <_lseek_r>:
  404c9c:	b570      	push	{r4, r5, r6, lr}
  404c9e:	460d      	mov	r5, r1
  404ca0:	4c08      	ldr	r4, [pc, #32]	; (404cc4 <_lseek_r+0x28>)
  404ca2:	4611      	mov	r1, r2
  404ca4:	4606      	mov	r6, r0
  404ca6:	461a      	mov	r2, r3
  404ca8:	4628      	mov	r0, r5
  404caa:	2300      	movs	r3, #0
  404cac:	6023      	str	r3, [r4, #0]
  404cae:	f7fc fd75 	bl	40179c <_lseek>
  404cb2:	1c43      	adds	r3, r0, #1
  404cb4:	d000      	beq.n	404cb8 <_lseek_r+0x1c>
  404cb6:	bd70      	pop	{r4, r5, r6, pc}
  404cb8:	6823      	ldr	r3, [r4, #0]
  404cba:	2b00      	cmp	r3, #0
  404cbc:	d0fb      	beq.n	404cb6 <_lseek_r+0x1a>
  404cbe:	6033      	str	r3, [r6, #0]
  404cc0:	bd70      	pop	{r4, r5, r6, pc}
  404cc2:	bf00      	nop
  404cc4:	2000ce6c 	.word	0x2000ce6c

00404cc8 <_read_r>:
  404cc8:	b570      	push	{r4, r5, r6, lr}
  404cca:	460d      	mov	r5, r1
  404ccc:	4c08      	ldr	r4, [pc, #32]	; (404cf0 <_read_r+0x28>)
  404cce:	4611      	mov	r1, r2
  404cd0:	4606      	mov	r6, r0
  404cd2:	461a      	mov	r2, r3
  404cd4:	4628      	mov	r0, r5
  404cd6:	2300      	movs	r3, #0
  404cd8:	6023      	str	r3, [r4, #0]
  404cda:	f7fc f843 	bl	400d64 <_read>
  404cde:	1c43      	adds	r3, r0, #1
  404ce0:	d000      	beq.n	404ce4 <_read_r+0x1c>
  404ce2:	bd70      	pop	{r4, r5, r6, pc}
  404ce4:	6823      	ldr	r3, [r4, #0]
  404ce6:	2b00      	cmp	r3, #0
  404ce8:	d0fb      	beq.n	404ce2 <_read_r+0x1a>
  404cea:	6033      	str	r3, [r6, #0]
  404cec:	bd70      	pop	{r4, r5, r6, pc}
  404cee:	bf00      	nop
  404cf0:	2000ce6c 	.word	0x2000ce6c
  404cf4:	00776f70 	.word	0x00776f70
  404cf8:	74727173 	.word	0x74727173
  404cfc:	00000000 	.word	0x00000000

00404d00 <TWO52>:
  404d00:	00000000 43300000 00000000 c3300000     ......0C......0.

00404d10 <_global_impure_ptr>:
  404d10:	20000030                                0.. 

00404d14 <_init>:
  404d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d16:	bf00      	nop
  404d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404d1a:	bc08      	pop	{r3}
  404d1c:	469e      	mov	lr, r3
  404d1e:	4770      	bx	lr

00404d20 <__init_array_start>:
  404d20:	00403e89 	.word	0x00403e89

00404d24 <__frame_dummy_init_array_entry>:
  404d24:	0040011d                                ..@.

00404d28 <_fini>:
  404d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d2a:	bf00      	nop
  404d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404d2e:	bc08      	pop	{r3}
  404d30:	469e      	mov	lr, r3
  404d32:	4770      	bx	lr

00404d34 <__fini_array_start>:
  404d34:	004000f9 	.word	0x004000f9

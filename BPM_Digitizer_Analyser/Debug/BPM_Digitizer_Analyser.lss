
BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c00  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404c00  00404c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000085c  20000000  00404c08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000c5e0  20000860  00405468  0002085c  2**3
                  ALLOC
  4 .stack        00003000  2000ce40  00411a48  0002085c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002085c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002088a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001be35  00000000  00000000  000208e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000041c2  00000000  00000000  0003c718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005254  00000000  00000000  000408da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b80  00000000  00000000  00045b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ae0  00000000  00000000  000466ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b86a  00000000  00000000  0004718e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010b24  00000000  00000000  000629f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00065e79  00000000  00000000  0007351c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002540  00000000  00000000  000d9398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 fe 00 20 75 14 40 00 71 14 40 00 71 14 40 00     @.. u.@.q.@.q.@.
  400010:	71 14 40 00 71 14 40 00 71 14 40 00 00 00 00 00     q.@.q.@.q.@.....
	...
  40002c:	71 14 40 00 71 14 40 00 00 00 00 00 71 14 40 00     q.@.q.@.....q.@.
  40003c:	71 14 40 00 71 14 40 00 71 14 40 00 71 14 40 00     q.@.q.@.q.@.q.@.
  40004c:	71 14 40 00 71 14 40 00 71 14 40 00 71 14 40 00     q.@.q.@.q.@.q.@.
  40005c:	5d 0a 40 00 71 14 40 00 71 14 40 00 71 14 40 00     ].@.q.@.q.@.q.@.
  40006c:	71 14 40 00 71 14 40 00 71 14 40 00 09 17 40 00     q.@.q.@.q.@...@.
  40007c:	71 14 40 00 71 14 40 00 71 14 40 00 71 14 40 00     q.@.q.@.q.@.q.@.
  40008c:	71 14 40 00 71 14 40 00 71 14 40 00 5d 19 40 00     q.@.q.@.q.@.].@.
  40009c:	71 14 40 00 71 14 40 00 71 14 40 00 71 14 40 00     q.@.q.@.q.@.q.@.
  4000ac:	71 14 40 00 71 14 40 00 71 14 40 00 b5 10 40 00     q.@.q.@.q.@...@.
  4000bc:	c9 10 40 00 71 14 40 00 3d 18 40 00 71 14 40 00     ..@.q.@.=.@.q.@.
  4000cc:	71 14 40 00 71 14 40 00 71 14 40 00 71 14 40 00     q.@.q.@.q.@.q.@.
  4000dc:	71 14 40 00 71 14 40 00 71 14 40 00 71 14 40 00     q.@.q.@.q.@.q.@.
  4000ec:	71 14 40 00 71 14 40 00 71 14 40 00                 q.@.q.@.q.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000860 	.word	0x20000860
  400114:	00000000 	.word	0x00000000
  400118:	00404c08 	.word	0x00404c08

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00404c08 	.word	0x00404c08
  400158:	20000864 	.word	0x20000864
  40015c:	00404c08 	.word	0x00404c08
  400160:	00000000 	.word	0x00000000

00400164 <sample_average>:


/*	Compute population average/mean of the distribution */

double sample_average(uint16_t start, uint16_t end) 
{
  400164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		
	uint32_t sample_avg = 0;
	uint32_t total_frequency = 0;
	
	for (uint16_t i = start; i < end; i++)
  400166:	4288      	cmp	r0, r1
  400168:	d21c      	bcs.n	4001a4 <sample_average+0x40>
  40016a:	4603      	mov	r3, r0
  40016c:	4a0f      	ldr	r2, [pc, #60]	; (4001ac <sample_average+0x48>)
  40016e:	6815      	ldr	r5, [r2, #0]
  400170:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	{
		sample_avg += (uint32_t)algorithm_buffer[i]*i;
  400174:	2400      	movs	r4, #0
  400176:	4620      	mov	r0, r4
  400178:	f835 2b02 	ldrh.w	r2, [r5], #2
  40017c:	fb03 0002 	mla	r0, r3, r2, r0
		total_frequency += (uint32_t)algorithm_buffer[i];
  400180:	4414      	add	r4, r2
  400182:	3301      	adds	r3, #1
	for (uint16_t i = start; i < end; i++)
  400184:	b29a      	uxth	r2, r3
  400186:	4291      	cmp	r1, r2
  400188:	d8f6      	bhi.n	400178 <sample_average+0x14>
	}
			
	return (double)sample_avg/total_frequency;
  40018a:	4d09      	ldr	r5, [pc, #36]	; (4001b0 <sample_average+0x4c>)
  40018c:	47a8      	blx	r5
  40018e:	4606      	mov	r6, r0
  400190:	460f      	mov	r7, r1
  400192:	4620      	mov	r0, r4
  400194:	47a8      	blx	r5
  400196:	4602      	mov	r2, r0
  400198:	460b      	mov	r3, r1
  40019a:	4630      	mov	r0, r6
  40019c:	4639      	mov	r1, r7
  40019e:	4c05      	ldr	r4, [pc, #20]	; (4001b4 <sample_average+0x50>)
  4001a0:	47a0      	blx	r4
}
  4001a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t total_frequency = 0;
  4001a4:	2400      	movs	r4, #0
	uint32_t sample_avg = 0;
  4001a6:	4620      	mov	r0, r4
  4001a8:	e7ef      	b.n	40018a <sample_average+0x26>
  4001aa:	bf00      	nop
  4001ac:	2000000c 	.word	0x2000000c
  4001b0:	00403031 	.word	0x00403031
  4001b4:	00403371 	.word	0x00403371

004001b8 <find_max>:


/* Find the maximum of the BPM-80 data half cycle and return its index*/

uint16_t find_max(uint16_t* halfcycle, uint16_t length)
{
  4001b8:	b470      	push	{r4, r5, r6}
	uint16_t maximum = 0;
	uint16_t max_index = 0;
									
	for (uint16_t i = 0; i < length; i++)
  4001ba:	460e      	mov	r6, r1
  4001bc:	b181      	cbz	r1, 4001e0 <find_max+0x28>
  4001be:	1e81      	subs	r1, r0, #2
  4001c0:	2300      	movs	r3, #0
  4001c2:	4618      	mov	r0, r3
  4001c4:	461c      	mov	r4, r3
  4001c6:	b29d      	uxth	r5, r3
	{
		if (halfcycle[i] > maximum) 
  4001c8:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  4001cc:	42a2      	cmp	r2, r4
  4001ce:	bf84      	itt	hi
  4001d0:	4628      	movhi	r0, r5
		{
			max_index = i;
			maximum = halfcycle[i];
  4001d2:	4614      	movhi	r4, r2
  4001d4:	3301      	adds	r3, #1
	for (uint16_t i = 0; i < length; i++)
  4001d6:	b29a      	uxth	r2, r3
  4001d8:	4296      	cmp	r6, r2
  4001da:	d8f4      	bhi.n	4001c6 <find_max+0xe>
		}
	}
	
	return max_index;
}
  4001dc:	bc70      	pop	{r4, r5, r6}
  4001de:	4770      	bx	lr
	uint16_t max_index = 0;
  4001e0:	4608      	mov	r0, r1
  4001e2:	e7fb      	b.n	4001dc <find_max+0x24>

004001e4 <sum>:
/* Find the sum of a window of samples*/

uint16_t sum(uint16_t start, uint16_t end)
{
	uint16_t result=0;
	for (uint16_t i=start; i< end; i++ )
  4001e4:	4288      	cmp	r0, r1
  4001e6:	d212      	bcs.n	40020e <sum+0x2a>
	{
		result+= algorithm_buffer[i];
  4001e8:	4b0a      	ldr	r3, [pc, #40]	; (400214 <sum+0x30>)
  4001ea:	681a      	ldr	r2, [r3, #0]
  4001ec:	eb02 0340 	add.w	r3, r2, r0, lsl #1
  4001f0:	3901      	subs	r1, #1
  4001f2:	1a09      	subs	r1, r1, r0
  4001f4:	3001      	adds	r0, #1
  4001f6:	fa10 f181 	uxtah	r1, r0, r1
  4001fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  4001fe:	2000      	movs	r0, #0
  400200:	f833 2b02 	ldrh.w	r2, [r3], #2
  400204:	4410      	add	r0, r2
  400206:	b280      	uxth	r0, r0
	for (uint16_t i=start; i< end; i++ )
  400208:	428b      	cmp	r3, r1
  40020a:	d1f9      	bne.n	400200 <sum+0x1c>
  40020c:	4770      	bx	lr
	uint16_t result=0;
  40020e:	2000      	movs	r0, #0
	}
	return result;
}
  400210:	4770      	bx	lr
  400212:	bf00      	nop
  400214:	2000000c 	.word	0x2000000c

00400218 <detect_peaks>:
/* Find beam peak locations and peak widths X and Y using either the threshold or dispersion-based algorithm */
/* Returns an array of 6 elements : 1. peak position X  2. peak edge left X  3. peak edge right X 
									4. peak position Y  5. peak edge left Y  6. peak edge right Y */

void detect_peaks(uint16_t threshold)
{
  400218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40021c:	4605      	mov	r5, r0
	uint16_t peak1 = find_max(algorithm_buffer, half_cycle_length);
  40021e:	4b45      	ldr	r3, [pc, #276]	; (400334 <detect_peaks+0x11c>)
  400220:	681c      	ldr	r4, [r3, #0]
  400222:	4b45      	ldr	r3, [pc, #276]	; (400338 <detect_peaks+0x120>)
  400224:	f8b3 9000 	ldrh.w	r9, [r3]
  400228:	4649      	mov	r1, r9
  40022a:	4620      	mov	r0, r4
  40022c:	4e43      	ldr	r6, [pc, #268]	; (40033c <detect_peaks+0x124>)
  40022e:	47b0      	blx	r6
  400230:	4680      	mov	r8, r0
	uint16_t peak2 = half_cycle_length + find_max(algorithm_buffer + half_cycle_length, half_cycle_length);
  400232:	4649      	mov	r1, r9
  400234:	eb04 0049 	add.w	r0, r4, r9, lsl #1
  400238:	47b0      	blx	r6
  40023a:	4448      	add	r0, r9
  40023c:	b286      	uxth	r6, r0
	
	// Use peak1 and peak2 to find the 4 corner points of the beams, possibly combine with dispersion-based algorithm
	
	beam_parameters[1] = peak1;
  40023e:	4f40      	ldr	r7, [pc, #256]	; (400340 <detect_peaks+0x128>)
  400240:	f8df a104 	ldr.w	sl, [pc, #260]	; 400348 <detect_peaks+0x130>
  400244:	4640      	mov	r0, r8
  400246:	47d0      	blx	sl
  400248:	e9c7 0102 	strd	r0, r1, [r7, #8]
	beam_parameters[4] = peak2;
  40024c:	4630      	mov	r0, r6
  40024e:	47d0      	blx	sl
  400250:	e9c7 0108 	strd	r0, r1, [r7, #32]
			
	// find left corner of X peak
		
	for (uint16_t i = 0; i <= peak1; i++)
	{
		if(algorithm_buffer[peak1 - i] < threshold) 
  400254:	4647      	mov	r7, r8
  400256:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
  40025a:	42ab      	cmp	r3, r5
  40025c:	d352      	bcc.n	400304 <detect_peaks+0xec>
  40025e:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak1; i++)
  400260:	3301      	adds	r3, #1
  400262:	b29b      	uxth	r3, r3
  400264:	4598      	cmp	r8, r3
  400266:	d359      	bcc.n	40031c <detect_peaks+0x104>
		if(algorithm_buffer[peak1 - i] < threshold) 
  400268:	1af8      	subs	r0, r7, r3
  40026a:	f834 2010 	ldrh.w	r2, [r4, r0, lsl #1]
  40026e:	42aa      	cmp	r2, r5
  400270:	d2f6      	bcs.n	400260 <detect_peaks+0x48>
		{
			beam_parameters[2] = peak1-i;
  400272:	4b34      	ldr	r3, [pc, #208]	; (400344 <detect_peaks+0x12c>)
  400274:	4798      	blx	r3
  400276:	4b32      	ldr	r3, [pc, #200]	; (400340 <detect_peaks+0x128>)
  400278:	e9c3 0104 	strd	r0, r1, [r3, #16]
		}
	}
	
	// find right corner of X peak
	
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40027c:	ebb9 0908 	subs.w	r9, r9, r8
  400280:	d412      	bmi.n	4002a8 <detect_peaks+0x90>
	{
		if(algorithm_buffer [peak1 + i] < threshold) 
  400282:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
  400286:	42ab      	cmp	r3, r5
  400288:	d33e      	bcc.n	400308 <detect_peaks+0xf0>
  40028a:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40028c:	3301      	adds	r3, #1
  40028e:	b29b      	uxth	r3, r3
  400290:	454b      	cmp	r3, r9
  400292:	dc09      	bgt.n	4002a8 <detect_peaks+0x90>
		if(algorithm_buffer [peak1 + i] < threshold) 
  400294:	19d8      	adds	r0, r3, r7
  400296:	f834 2010 	ldrh.w	r2, [r4, r0, lsl #1]
  40029a:	42aa      	cmp	r2, r5
  40029c:	d2f6      	bcs.n	40028c <detect_peaks+0x74>
		{
			beam_parameters[3] = peak1+i;
  40029e:	4b29      	ldr	r3, [pc, #164]	; (400344 <detect_peaks+0x12c>)
  4002a0:	4798      	blx	r3
  4002a2:	4b27      	ldr	r3, [pc, #156]	; (400340 <detect_peaks+0x128>)
  4002a4:	e9c3 0106 	strd	r0, r1, [r3, #24]
	
	// find left corner of Y peak
	
	for (uint16_t i = 0; i <= peak2; i++)
	{
		if(algorithm_buffer[peak2 - i] < threshold)
  4002a8:	4637      	mov	r7, r6
  4002aa:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  4002ae:	42ab      	cmp	r3, r5
  4002b0:	d32c      	bcc.n	40030c <detect_peaks+0xf4>
  4002b2:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak2; i++)
  4002b4:	3301      	adds	r3, #1
  4002b6:	b29b      	uxth	r3, r3
  4002b8:	429e      	cmp	r6, r3
  4002ba:	d333      	bcc.n	400324 <detect_peaks+0x10c>
		if(algorithm_buffer[peak2 - i] < threshold)
  4002bc:	1af8      	subs	r0, r7, r3
  4002be:	f834 2010 	ldrh.w	r2, [r4, r0, lsl #1]
  4002c2:	42aa      	cmp	r2, r5
  4002c4:	d2f6      	bcs.n	4002b4 <detect_peaks+0x9c>
		{
			beam_parameters[5] = peak2-i;
  4002c6:	4b1f      	ldr	r3, [pc, #124]	; (400344 <detect_peaks+0x12c>)
  4002c8:	4798      	blx	r3
  4002ca:	4b1d      	ldr	r3, [pc, #116]	; (400340 <detect_peaks+0x128>)
  4002cc:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
		}
	}
	
	// find right corner of Y peak
	
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  4002d0:	f5c6 5102 	rsb	r1, r6, #8320	; 0x2080
  4002d4:	310e      	adds	r1, #14
  4002d6:	2900      	cmp	r1, #0
  4002d8:	db1a      	blt.n	400310 <detect_peaks+0xf8>
	{
		if(algorithm_buffer[peak2 + i] < threshold)
  4002da:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  4002de:	42ab      	cmp	r3, r5
  4002e0:	d318      	bcc.n	400314 <detect_peaks+0xfc>
  4002e2:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  4002e4:	3301      	adds	r3, #1
  4002e6:	b29b      	uxth	r3, r3
  4002e8:	428b      	cmp	r3, r1
  4002ea:	dc15      	bgt.n	400318 <detect_peaks+0x100>
		if(algorithm_buffer[peak2 + i] < threshold)
  4002ec:	19d8      	adds	r0, r3, r7
  4002ee:	f834 2010 	ldrh.w	r2, [r4, r0, lsl #1]
  4002f2:	42aa      	cmp	r2, r5
  4002f4:	d2f6      	bcs.n	4002e4 <detect_peaks+0xcc>
		{
			beam_parameters[6] = peak2+i;
  4002f6:	4b13      	ldr	r3, [pc, #76]	; (400344 <detect_peaks+0x12c>)
  4002f8:	4798      	blx	r3
  4002fa:	4b11      	ldr	r3, [pc, #68]	; (400340 <detect_peaks+0x128>)
  4002fc:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
			break;
  400300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(algorithm_buffer[peak1 - i] < threshold) 
  400304:	4640      	mov	r0, r8
  400306:	e7b4      	b.n	400272 <detect_peaks+0x5a>
		if(algorithm_buffer [peak1 + i] < threshold) 
  400308:	4640      	mov	r0, r8
  40030a:	e7c8      	b.n	40029e <detect_peaks+0x86>
		if(algorithm_buffer[peak2 - i] < threshold)
  40030c:	4630      	mov	r0, r6
  40030e:	e7da      	b.n	4002c6 <detect_peaks+0xae>
  400310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(algorithm_buffer[peak2 + i] < threshold)
  400314:	4630      	mov	r0, r6
  400316:	e7ee      	b.n	4002f6 <detect_peaks+0xde>
  400318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40031c:	ebb9 0908 	subs.w	r9, r9, r8
  400320:	d5b3      	bpl.n	40028a <detect_peaks+0x72>
  400322:	e7c1      	b.n	4002a8 <detect_peaks+0x90>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  400324:	f5c6 5102 	rsb	r1, r6, #8320	; 0x2080
  400328:	310e      	adds	r1, #14
  40032a:	2900      	cmp	r1, #0
  40032c:	dad9      	bge.n	4002e2 <detect_peaks+0xca>
  40032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400332:	bf00      	nop
  400334:	2000000c 	.word	0x2000000c
  400338:	20000000 	.word	0x20000000
  40033c:	004001b9 	.word	0x004001b9
  400340:	20000880 	.word	0x20000880
  400344:	00403051 	.word	0x00403051
  400348:	00403031 	.word	0x00403031

0040034c <compute_beam_intensity>:
/* Compute beam intensity of a cycle in X and Y cross section */
/* Takes as input the borders of both peaks*/
/* Outputs beam intensity of X and Y cross-section, so that higher level data representation can choose whether to multiply or sum them*/

void compute_beam_intensity(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right)
{
  40034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400350:	4691      	mov	r9, r2
  400352:	4698      	mov	r8, r3
	beam_parameters[7] = 0;
  400354:	4b22      	ldr	r3, [pc, #136]	; (4003e0 <compute_beam_intensity+0x94>)
  400356:	2400      	movs	r4, #0
  400358:	2500      	movs	r5, #0
  40035a:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
	beam_parameters[8] = 0;
  40035e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
	
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  400362:	4288      	cmp	r0, r1
  400364:	d21a      	bcs.n	40039c <compute_beam_intensity+0x50>
	{
		beam_parameters[7] += (uint32_t)algorithm_buffer[i];
  400366:	4b1f      	ldr	r3, [pc, #124]	; (4003e4 <compute_beam_intensity+0x98>)
  400368:	681f      	ldr	r7, [r3, #0]
  40036a:	eb07 0440 	add.w	r4, r7, r0, lsl #1
  40036e:	3901      	subs	r1, #1
  400370:	1a09      	subs	r1, r1, r0
  400372:	3001      	adds	r0, #1
  400374:	fa10 f181 	uxtah	r1, r0, r1
  400378:	eb07 0741 	add.w	r7, r7, r1, lsl #1
  40037c:	4d18      	ldr	r5, [pc, #96]	; (4003e0 <compute_beam_intensity+0x94>)
  40037e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 4003ec <compute_beam_intensity+0xa0>
  400382:	4e19      	ldr	r6, [pc, #100]	; (4003e8 <compute_beam_intensity+0x9c>)
  400384:	f834 0b02 	ldrh.w	r0, [r4], #2
  400388:	47d0      	blx	sl
  40038a:	4602      	mov	r2, r0
  40038c:	460b      	mov	r3, r1
  40038e:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	; 0x38
  400392:	47b0      	blx	r6
  400394:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  400398:	42bc      	cmp	r4, r7
  40039a:	d1f3      	bne.n	400384 <compute_beam_intensity+0x38>
	}
	
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  40039c:	45c1      	cmp	r9, r8
  40039e:	d21d      	bcs.n	4003dc <compute_beam_intensity+0x90>
	{
		beam_parameters[8] += (uint32_t)algorithm_buffer[i];
  4003a0:	4b10      	ldr	r3, [pc, #64]	; (4003e4 <compute_beam_intensity+0x98>)
  4003a2:	681e      	ldr	r6, [r3, #0]
  4003a4:	eb06 0449 	add.w	r4, r6, r9, lsl #1
  4003a8:	f108 38ff 	add.w	r8, r8, #4294967295
  4003ac:	eba8 0809 	sub.w	r8, r8, r9
  4003b0:	f109 0901 	add.w	r9, r9, #1
  4003b4:	fa19 f988 	uxtah	r9, r9, r8
  4003b8:	eb06 0649 	add.w	r6, r6, r9, lsl #1
  4003bc:	4d08      	ldr	r5, [pc, #32]	; (4003e0 <compute_beam_intensity+0x94>)
  4003be:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4003ec <compute_beam_intensity+0xa0>
  4003c2:	4f09      	ldr	r7, [pc, #36]	; (4003e8 <compute_beam_intensity+0x9c>)
  4003c4:	f834 0b02 	ldrh.w	r0, [r4], #2
  4003c8:	47c0      	blx	r8
  4003ca:	4602      	mov	r2, r0
  4003cc:	460b      	mov	r3, r1
  4003ce:	e9d5 0110 	ldrd	r0, r1, [r5, #64]	; 0x40
  4003d2:	47b8      	blx	r7
  4003d4:	e9c5 0110 	strd	r0, r1, [r5, #64]	; 0x40
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  4003d8:	42b4      	cmp	r4, r6
  4003da:	d1f3      	bne.n	4003c4 <compute_beam_intensity+0x78>
  4003dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003e0:	20000880 	.word	0x20000880
  4003e4:	2000000c 	.word	0x2000000c
  4003e8:	00402db9 	.word	0x00402db9
  4003ec:	00403031 	.word	0x00403031

004003f0 <compute_fwhm>:

 
 /* Compute FWHM X and Y */

 void compute_fwhm(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right)
 {
  4003f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003f4:	b08b      	sub	sp, #44	; 0x2c
  4003f6:	4681      	mov	r9, r0
  4003f8:	9007      	str	r0, [sp, #28]
  4003fa:	4688      	mov	r8, r1
  4003fc:	9108      	str	r1, [sp, #32]
  4003fe:	4617      	mov	r7, r2
  400400:	9205      	str	r2, [sp, #20]
  400402:	461e      	mov	r6, r3
  400404:	9306      	str	r3, [sp, #24]
	 
	 uint16_t mean[2] = {0,0};
	 long long summed=0;
	 int variance=0;
	 
	 mean[0] = sample_average(peak1_left, peak1_right);
  400406:	4d68      	ldr	r5, [pc, #416]	; (4005a8 <compute_fwhm+0x1b8>)
  400408:	47a8      	blx	r5
  40040a:	4c68      	ldr	r4, [pc, #416]	; (4005ac <compute_fwhm+0x1bc>)
  40040c:	47a0      	blx	r4
  40040e:	fa1f fa80 	uxth.w	sl, r0
	 mean[1] = sample_average(peak2_left, peak2_right);
  400412:	4631      	mov	r1, r6
  400414:	4638      	mov	r0, r7
  400416:	47a8      	blx	r5
  400418:	47a0      	blx	r4
  40041a:	b284      	uxth	r4, r0
  40041c:	9409      	str	r4, [sp, #36]	; 0x24
	 
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  40041e:	45c1      	cmp	r9, r8
  400420:	f080 80b4 	bcs.w	40058c <compute_fwhm+0x19c>
  400424:	4649      	mov	r1, r9
  400426:	eba9 040a 	sub.w	r4, r9, sl
  40042a:	4b61      	ldr	r3, [pc, #388]	; (4005b0 <compute_fwhm+0x1c0>)
  40042c:	681d      	ldr	r5, [r3, #0]
  40042e:	eb05 0549 	add.w	r5, r5, r9, lsl #1
  400432:	f108 33ff 	add.w	r3, r8, #4294967295
  400436:	1a5b      	subs	r3, r3, r1
  400438:	1c4a      	adds	r2, r1, #1
  40043a:	fa12 f383 	uxtah	r3, r2, r3
  40043e:	eba3 0a0a 	sub.w	sl, r3, sl
	 {
		 summed+= (pow((i-mean[0]),2)*algorithm_buffer[i]);
  400442:	2200      	movs	r2, #0
  400444:	2300      	movs	r3, #0
  400446:	e9cd 2300 	strd	r2, r3, [sp]
  40044a:	4f5a      	ldr	r7, [pc, #360]	; (4005b4 <compute_fwhm+0x1c4>)
  40044c:	4e5a      	ldr	r6, [pc, #360]	; (4005b8 <compute_fwhm+0x1c8>)
  40044e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 4005d4 <compute_fwhm+0x1e4>
  400452:	f8df 9184 	ldr.w	r9, [pc, #388]	; 4005d8 <compute_fwhm+0x1e8>
  400456:	46d3      	mov	fp, sl
  400458:	46aa      	mov	sl, r5
  40045a:	4620      	mov	r0, r4
  40045c:	47b8      	blx	r7
  40045e:	f83a 5b02 	ldrh.w	r5, [sl], #2
  400462:	4602      	mov	r2, r0
  400464:	460b      	mov	r3, r1
  400466:	47b0      	blx	r6
  400468:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40046c:	4628      	mov	r0, r5
  40046e:	47b8      	blx	r7
  400470:	4602      	mov	r2, r0
  400472:	460b      	mov	r3, r1
  400474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400478:	47b0      	blx	r6
  40047a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40047e:	e9dd 0100 	ldrd	r0, r1, [sp]
  400482:	4b4e      	ldr	r3, [pc, #312]	; (4005bc <compute_fwhm+0x1cc>)
  400484:	4798      	blx	r3
  400486:	4602      	mov	r2, r0
  400488:	460b      	mov	r3, r1
  40048a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40048e:	47c0      	blx	r8
  400490:	47c8      	blx	r9
  400492:	e9cd 0100 	strd	r0, r1, [sp]
  400496:	3401      	adds	r4, #1
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  400498:	455c      	cmp	r4, fp
  40049a:	d1de      	bne.n	40045a <compute_fwhm+0x6a>
	 }
	 variance=summed/sum(peak1_left,peak1_right);
  40049c:	9908      	ldr	r1, [sp, #32]
  40049e:	9807      	ldr	r0, [sp, #28]
  4004a0:	4b47      	ldr	r3, [pc, #284]	; (4005c0 <compute_fwhm+0x1d0>)
  4004a2:	4798      	blx	r3
  4004a4:	b282      	uxth	r2, r0
  4004a6:	2300      	movs	r3, #0
  4004a8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4004ac:	4c45      	ldr	r4, [pc, #276]	; (4005c4 <compute_fwhm+0x1d4>)
  4004ae:	47a0      	blx	r4
	
	 beam_parameters[9]= (uint16_t)(sqrt(variance)*2.355);
  4004b0:	4b40      	ldr	r3, [pc, #256]	; (4005b4 <compute_fwhm+0x1c4>)
  4004b2:	4798      	blx	r3
  4004b4:	4b44      	ldr	r3, [pc, #272]	; (4005c8 <compute_fwhm+0x1d8>)
  4004b6:	4798      	blx	r3
  4004b8:	a339      	add	r3, pc, #228	; (adr r3, 4005a0 <compute_fwhm+0x1b0>)
  4004ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4004be:	4c3e      	ldr	r4, [pc, #248]	; (4005b8 <compute_fwhm+0x1c8>)
  4004c0:	47a0      	blx	r4
  4004c2:	4b3a      	ldr	r3, [pc, #232]	; (4005ac <compute_fwhm+0x1bc>)
  4004c4:	4798      	blx	r3
  4004c6:	b280      	uxth	r0, r0
  4004c8:	4b40      	ldr	r3, [pc, #256]	; (4005cc <compute_fwhm+0x1dc>)
  4004ca:	4798      	blx	r3
  4004cc:	4b40      	ldr	r3, [pc, #256]	; (4005d0 <compute_fwhm+0x1e0>)
  4004ce:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
	 summed=0;
	 variance=0;
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  4004d2:	9a05      	ldr	r2, [sp, #20]
  4004d4:	9806      	ldr	r0, [sp, #24]
  4004d6:	4282      	cmp	r2, r0
  4004d8:	d25d      	bcs.n	400596 <compute_fwhm+0x1a6>
  4004da:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4004dc:	1b94      	subs	r4, r2, r6
  4004de:	4b34      	ldr	r3, [pc, #208]	; (4005b0 <compute_fwhm+0x1c0>)
  4004e0:	681d      	ldr	r5, [r3, #0]
  4004e2:	eb05 0542 	add.w	r5, r5, r2, lsl #1
  4004e6:	f100 3aff 	add.w	sl, r0, #4294967295
  4004ea:	ebaa 0a02 	sub.w	sl, sl, r2
  4004ee:	1c53      	adds	r3, r2, #1
  4004f0:	fa13 fa8a 	uxtah	sl, r3, sl
  4004f4:	ebaa 0a06 	sub.w	sl, sl, r6
	 {
		 summed+= (pow((i-mean[1]),2)*algorithm_buffer[i]);
  4004f8:	2200      	movs	r2, #0
  4004fa:	2300      	movs	r3, #0
  4004fc:	e9cd 2300 	strd	r2, r3, [sp]
  400500:	4f2c      	ldr	r7, [pc, #176]	; (4005b4 <compute_fwhm+0x1c4>)
  400502:	4e2d      	ldr	r6, [pc, #180]	; (4005b8 <compute_fwhm+0x1c8>)
  400504:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4005d4 <compute_fwhm+0x1e4>
  400508:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 4005d8 <compute_fwhm+0x1e8>
  40050c:	46d3      	mov	fp, sl
  40050e:	4620      	mov	r0, r4
  400510:	47b8      	blx	r7
  400512:	f835 ab02 	ldrh.w	sl, [r5], #2
  400516:	4602      	mov	r2, r0
  400518:	460b      	mov	r3, r1
  40051a:	47b0      	blx	r6
  40051c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400520:	4650      	mov	r0, sl
  400522:	47b8      	blx	r7
  400524:	4602      	mov	r2, r0
  400526:	460b      	mov	r3, r1
  400528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40052c:	47b0      	blx	r6
  40052e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400532:	e9dd 0100 	ldrd	r0, r1, [sp]
  400536:	4b21      	ldr	r3, [pc, #132]	; (4005bc <compute_fwhm+0x1cc>)
  400538:	4798      	blx	r3
  40053a:	4602      	mov	r2, r0
  40053c:	460b      	mov	r3, r1
  40053e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400542:	47c8      	blx	r9
  400544:	47c0      	blx	r8
  400546:	e9cd 0100 	strd	r0, r1, [sp]
  40054a:	3401      	adds	r4, #1
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  40054c:	455c      	cmp	r4, fp
  40054e:	d1de      	bne.n	40050e <compute_fwhm+0x11e>
	 }
	 variance=summed/sum(peak2_left,peak2_right);
  400550:	9906      	ldr	r1, [sp, #24]
  400552:	9805      	ldr	r0, [sp, #20]
  400554:	4b1a      	ldr	r3, [pc, #104]	; (4005c0 <compute_fwhm+0x1d0>)
  400556:	4798      	blx	r3
  400558:	b282      	uxth	r2, r0
  40055a:	2300      	movs	r3, #0
  40055c:	e9dd 0100 	ldrd	r0, r1, [sp]
  400560:	4c18      	ldr	r4, [pc, #96]	; (4005c4 <compute_fwhm+0x1d4>)
  400562:	47a0      	blx	r4
	 beam_parameters[10]=(uint16_t) (sqrt(variance)*2.355);
  400564:	4b13      	ldr	r3, [pc, #76]	; (4005b4 <compute_fwhm+0x1c4>)
  400566:	4798      	blx	r3
  400568:	4b17      	ldr	r3, [pc, #92]	; (4005c8 <compute_fwhm+0x1d8>)
  40056a:	4798      	blx	r3
  40056c:	a30c      	add	r3, pc, #48	; (adr r3, 4005a0 <compute_fwhm+0x1b0>)
  40056e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400572:	4c11      	ldr	r4, [pc, #68]	; (4005b8 <compute_fwhm+0x1c8>)
  400574:	47a0      	blx	r4
  400576:	4b0d      	ldr	r3, [pc, #52]	; (4005ac <compute_fwhm+0x1bc>)
  400578:	4798      	blx	r3
  40057a:	b280      	uxth	r0, r0
  40057c:	4b13      	ldr	r3, [pc, #76]	; (4005cc <compute_fwhm+0x1dc>)
  40057e:	4798      	blx	r3
  400580:	4b13      	ldr	r3, [pc, #76]	; (4005d0 <compute_fwhm+0x1e0>)
  400582:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
 }
  400586:	b00b      	add	sp, #44	; 0x2c
  400588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 long long summed=0;
  40058c:	2300      	movs	r3, #0
  40058e:	2400      	movs	r4, #0
  400590:	e9cd 3400 	strd	r3, r4, [sp]
  400594:	e782      	b.n	40049c <compute_fwhm+0xac>
	 summed=0;
  400596:	2300      	movs	r3, #0
  400598:	2400      	movs	r4, #0
  40059a:	e9cd 3400 	strd	r3, r4, [sp]
  40059e:	e7d7      	b.n	400550 <compute_fwhm+0x160>
  4005a0:	3d70a3d7 	.word	0x3d70a3d7
  4005a4:	4002d70a 	.word	0x4002d70a
  4005a8:	00400165 	.word	0x00400165
  4005ac:	0040367d 	.word	0x0040367d
  4005b0:	2000000c 	.word	0x2000000c
  4005b4:	00403051 	.word	0x00403051
  4005b8:	0040311d 	.word	0x0040311d
  4005bc:	004030c1 	.word	0x004030c1
  4005c0:	004001e5 	.word	0x004001e5
  4005c4:	004036bd 	.word	0x004036bd
  4005c8:	00401ea1 	.word	0x00401ea1
  4005cc:	00403031 	.word	0x00403031
  4005d0:	20000880 	.word	0x20000880
  4005d4:	00402db9 	.word	0x00402db9
  4005d8:	0040375d 	.word	0x0040375d
  4005dc:	00000000 	.word	0x00000000

004005e0 <compute_skewness>:


/* Compute skewness of the beam  X and Y */

void compute_skewness(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right)
{
  4005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005e4:	b093      	sub	sp, #76	; 0x4c
  4005e6:	4683      	mov	fp, r0
  4005e8:	460d      	mov	r5, r1
  4005ea:	4614      	mov	r4, r2
  4005ec:	920e      	str	r2, [sp, #56]	; 0x38
  4005ee:	461f      	mov	r7, r3
  4005f0:	930f      	str	r3, [sp, #60]	; 0x3c
	double first_peak_mean  =  sample_average(peak1_left, peak1_right);
  4005f2:	4e77      	ldr	r6, [pc, #476]	; (4007d0 <compute_skewness+0x1f0>)
  4005f4:	47b0      	blx	r6
  4005f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	double second_peak_mean =  sample_average(peak2_left, peak2_right);
  4005fa:	4639      	mov	r1, r7
  4005fc:	4620      	mov	r0, r4
  4005fe:	47b0      	blx	r6
  400600:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	
	double third_central = 0;
	double second_central = 0;
	int sum1 = sum(peak1_left,peak1_right);
  400604:	4629      	mov	r1, r5
  400606:	4658      	mov	r0, fp
  400608:	4e72      	ldr	r6, [pc, #456]	; (4007d4 <compute_skewness+0x1f4>)
  40060a:	47b0      	blx	r6
  40060c:	9010      	str	r0, [sp, #64]	; 0x40
	int sum2 = sum(peak2_left,peak2_right);
  40060e:	4639      	mov	r1, r7
  400610:	4620      	mov	r0, r4
  400612:	47b0      	blx	r6
  400614:	9011      	str	r0, [sp, #68]	; 0x44
	
	 for (int i=peak1_left;i<peak1_right;i++ )
  400616:	45ab      	cmp	fp, r5
  400618:	f280 80c7 	bge.w	4007aa <compute_skewness+0x1ca>
  40061c:	46d8      	mov	r8, fp
  40061e:	46a9      	mov	r9, r5
  400620:	4b6d      	ldr	r3, [pc, #436]	; (4007d8 <compute_skewness+0x1f8>)
  400622:	681b      	ldr	r3, [r3, #0]
  400624:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
	 {
		 
		 double sample = (double) algorithm_buffer[i];
  400628:	ed9f 7b67 	vldr	d7, [pc, #412]	; 4007c8 <compute_skewness+0x1e8>
  40062c:	ed8d 7b02 	vstr	d7, [sp, #8]
  400630:	ed8d 7b04 	vstr	d7, [sp, #16]
  400634:	4f69      	ldr	r7, [pc, #420]	; (4007dc <compute_skewness+0x1fc>)
		 double spread = (double)i-first_peak_mean;
  400636:	4e6a      	ldr	r6, [pc, #424]	; (4007e0 <compute_skewness+0x200>)
  400638:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 4007fc <compute_skewness+0x21c>
		 third_central += spread*spread*spread*sample;
  40063c:	4d69      	ldr	r5, [pc, #420]	; (4007e4 <compute_skewness+0x204>)
  40063e:	4c6a      	ldr	r4, [pc, #424]	; (4007e8 <compute_skewness+0x208>)
		 double sample = (double) algorithm_buffer[i];
  400640:	f83b 0b02 	ldrh.w	r0, [fp], #2
  400644:	47b8      	blx	r7
  400646:	e9cd 0100 	strd	r0, r1, [sp]
		 double spread = (double)i-first_peak_mean;
  40064a:	4640      	mov	r0, r8
  40064c:	47b0      	blx	r6
  40064e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  400652:	47d0      	blx	sl
  400654:	4602      	mov	r2, r0
  400656:	460b      	mov	r3, r1
		 third_central += spread*spread*spread*sample;
  400658:	e9cd 2306 	strd	r2, r3, [sp, #24]
  40065c:	47a8      	blx	r5
  40065e:	4602      	mov	r2, r0
  400660:	460b      	mov	r3, r1
  400662:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40066a:	47a8      	blx	r5
  40066c:	e9dd 2300 	ldrd	r2, r3, [sp]
  400670:	47a8      	blx	r5
  400672:	4602      	mov	r2, r0
  400674:	460b      	mov	r3, r1
  400676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40067a:	47a0      	blx	r4
  40067c:	e9cd 0104 	strd	r0, r1, [sp, #16]
		 second_central += spread*spread*sample;
  400680:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  400684:	e9dd 0100 	ldrd	r0, r1, [sp]
  400688:	47a8      	blx	r5
  40068a:	4602      	mov	r2, r0
  40068c:	460b      	mov	r3, r1
  40068e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400692:	47a0      	blx	r4
  400694:	e9cd 0102 	strd	r0, r1, [sp, #8]
	 for (int i=peak1_left;i<peak1_right;i++ )
  400698:	f108 0801 	add.w	r8, r8, #1
  40069c:	45c8      	cmp	r8, r9
  40069e:	d1cf      	bne.n	400640 <compute_skewness+0x60>
		 
	}
	 
	 third_central = third_central/sum1;
  4006a0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4006a2:	4b4f      	ldr	r3, [pc, #316]	; (4007e0 <compute_skewness+0x200>)
  4006a4:	4798      	blx	r3
  4006a6:	4604      	mov	r4, r0
  4006a8:	460d      	mov	r5, r1
  4006aa:	4e50      	ldr	r6, [pc, #320]	; (4007ec <compute_skewness+0x20c>)
  4006ac:	4602      	mov	r2, r0
  4006ae:	460b      	mov	r3, r1
  4006b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4006b4:	47b0      	blx	r6
  4006b6:	4680      	mov	r8, r0
  4006b8:	4689      	mov	r9, r1
	 second_central = second_central/sum1;
  4006ba:	4622      	mov	r2, r4
  4006bc:	462b      	mov	r3, r5
  4006be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4006c2:	47b0      	blx	r6
	 
	 double denominator = pow(second_central,1.5);
  4006c4:	2200      	movs	r2, #0
  4006c6:	4b4a      	ldr	r3, [pc, #296]	; (4007f0 <compute_skewness+0x210>)
  4006c8:	4c4a      	ldr	r4, [pc, #296]	; (4007f4 <compute_skewness+0x214>)
  4006ca:	47a0      	blx	r4
	 third_central = third_central/denominator;
  4006cc:	4602      	mov	r2, r0
  4006ce:	460b      	mov	r3, r1
  4006d0:	4640      	mov	r0, r8
  4006d2:	4649      	mov	r1, r9
  4006d4:	47b0      	blx	r6
	
	beam_parameters[11] = third_central;
  4006d6:	4b48      	ldr	r3, [pc, #288]	; (4007f8 <compute_skewness+0x218>)
  4006d8:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
	
	third_central = 0;
	second_central = 0;
	
    for (int i=peak2_left;i<peak2_right;i++ )
  4006dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4006de:	4690      	mov	r8, r2
  4006e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4006e2:	4689      	mov	r9, r1
  4006e4:	428a      	cmp	r2, r1
  4006e6:	da67      	bge.n	4007b8 <compute_skewness+0x1d8>
  4006e8:	4b3b      	ldr	r3, [pc, #236]	; (4007d8 <compute_skewness+0x1f8>)
  4006ea:	681b      	ldr	r3, [r3, #0]
  4006ec:	eb03 0b42 	add.w	fp, r3, r2, lsl #1
	 {
		 double sample = (double) algorithm_buffer[i];
  4006f0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 4007c8 <compute_skewness+0x1e8>
  4006f4:	ed8d 7b02 	vstr	d7, [sp, #8]
  4006f8:	ed8d 7b04 	vstr	d7, [sp, #16]
  4006fc:	4f37      	ldr	r7, [pc, #220]	; (4007dc <compute_skewness+0x1fc>)
		 double spread = (double)i-second_peak_mean;
  4006fe:	4e38      	ldr	r6, [pc, #224]	; (4007e0 <compute_skewness+0x200>)
  400700:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 4007fc <compute_skewness+0x21c>
		 third_central += spread*spread*spread*sample;
  400704:	4d37      	ldr	r5, [pc, #220]	; (4007e4 <compute_skewness+0x204>)
  400706:	4c38      	ldr	r4, [pc, #224]	; (4007e8 <compute_skewness+0x208>)
		 double sample = (double) algorithm_buffer[i];
  400708:	f83b 0b02 	ldrh.w	r0, [fp], #2
  40070c:	47b8      	blx	r7
  40070e:	e9cd 0100 	strd	r0, r1, [sp]
		 double spread = (double)i-second_peak_mean;
  400712:	4640      	mov	r0, r8
  400714:	47b0      	blx	r6
  400716:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40071a:	47d0      	blx	sl
  40071c:	4602      	mov	r2, r0
  40071e:	460b      	mov	r3, r1
		 third_central += spread*spread*spread*sample;
  400720:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400724:	47a8      	blx	r5
  400726:	4602      	mov	r2, r0
  400728:	460b      	mov	r3, r1
  40072a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40072e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400732:	47a8      	blx	r5
  400734:	e9dd 2300 	ldrd	r2, r3, [sp]
  400738:	47a8      	blx	r5
  40073a:	4602      	mov	r2, r0
  40073c:	460b      	mov	r3, r1
  40073e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400742:	47a0      	blx	r4
  400744:	e9cd 0104 	strd	r0, r1, [sp, #16]
		 second_central += spread*spread*sample;
  400748:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40074c:	e9dd 0100 	ldrd	r0, r1, [sp]
  400750:	47a8      	blx	r5
  400752:	4602      	mov	r2, r0
  400754:	460b      	mov	r3, r1
  400756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40075a:	47a0      	blx	r4
  40075c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    for (int i=peak2_left;i<peak2_right;i++ )
  400760:	f108 0801 	add.w	r8, r8, #1
  400764:	45c8      	cmp	r8, r9
  400766:	d1cf      	bne.n	400708 <compute_skewness+0x128>
	 }
	 
	  third_central = third_central/sum2;
  400768:	9811      	ldr	r0, [sp, #68]	; 0x44
  40076a:	4b1d      	ldr	r3, [pc, #116]	; (4007e0 <compute_skewness+0x200>)
  40076c:	4798      	blx	r3
  40076e:	4604      	mov	r4, r0
  400770:	460d      	mov	r5, r1
  400772:	4e1e      	ldr	r6, [pc, #120]	; (4007ec <compute_skewness+0x20c>)
  400774:	4602      	mov	r2, r0
  400776:	460b      	mov	r3, r1
  400778:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40077c:	47b0      	blx	r6
  40077e:	4680      	mov	r8, r0
  400780:	4689      	mov	r9, r1
	  second_central = second_central/sum2;
  400782:	4622      	mov	r2, r4
  400784:	462b      	mov	r3, r5
  400786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40078a:	47b0      	blx	r6
	  
	  denominator = pow(second_central,1.5);
  40078c:	2200      	movs	r2, #0
  40078e:	4b18      	ldr	r3, [pc, #96]	; (4007f0 <compute_skewness+0x210>)
  400790:	4c18      	ldr	r4, [pc, #96]	; (4007f4 <compute_skewness+0x214>)
  400792:	47a0      	blx	r4
	  third_central = third_central/denominator;
  400794:	4602      	mov	r2, r0
  400796:	460b      	mov	r3, r1
  400798:	4640      	mov	r0, r8
  40079a:	4649      	mov	r1, r9
  40079c:	47b0      	blx	r6
	
	beam_parameters[12] = third_central;
  40079e:	4b16      	ldr	r3, [pc, #88]	; (4007f8 <compute_skewness+0x218>)
  4007a0:	e9c3 0118 	strd	r0, r1, [r3, #96]	; 0x60
	
}
  4007a4:	b013      	add	sp, #76	; 0x4c
  4007a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double second_central = 0;
  4007aa:	ed9f 7b07 	vldr	d7, [pc, #28]	; 4007c8 <compute_skewness+0x1e8>
  4007ae:	ed8d 7b02 	vstr	d7, [sp, #8]
	double third_central = 0;
  4007b2:	ed8d 7b04 	vstr	d7, [sp, #16]
  4007b6:	e773      	b.n	4006a0 <compute_skewness+0xc0>
	second_central = 0;
  4007b8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 4007c8 <compute_skewness+0x1e8>
  4007bc:	ed8d 7b02 	vstr	d7, [sp, #8]
	third_central = 0;
  4007c0:	ed8d 7b04 	vstr	d7, [sp, #16]
  4007c4:	e7d0      	b.n	400768 <compute_skewness+0x188>
  4007c6:	bf00      	nop
	...
  4007d0:	00400165 	.word	0x00400165
  4007d4:	004001e5 	.word	0x004001e5
  4007d8:	2000000c 	.word	0x2000000c
  4007dc:	00403031 	.word	0x00403031
  4007e0:	00403051 	.word	0x00403051
  4007e4:	0040311d 	.word	0x0040311d
  4007e8:	00402db9 	.word	0x00402db9
  4007ec:	00403371 	.word	0x00403371
  4007f0:	3ff80000 	.word	0x3ff80000
  4007f4:	00401ba5 	.word	0x00401ba5
  4007f8:	20000880 	.word	0x20000880
  4007fc:	00402db5 	.word	0x00402db5

00400800 <compute_beam_parameters>:


/* Present beam parameters on terminal*/

void compute_beam_parameters()
{
  400800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		
	detect_peaks(20);
  400804:	2014      	movs	r0, #20
  400806:	4b28      	ldr	r3, [pc, #160]	; (4008a8 <compute_beam_parameters+0xa8>)
  400808:	4798      	blx	r3
 	compute_beam_intensity(beam_parameters[2], beam_parameters[3], beam_parameters[5], beam_parameters[6]);
  40080a:	4c28      	ldr	r4, [pc, #160]	; (4008ac <compute_beam_parameters+0xac>)
  40080c:	4d28      	ldr	r5, [pc, #160]	; (4008b0 <compute_beam_parameters+0xb0>)
  40080e:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
  400812:	47a8      	blx	r5
  400814:	fa1f f880 	uxth.w	r8, r0
  400818:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
  40081c:	47a8      	blx	r5
  40081e:	b287      	uxth	r7, r0
  400820:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
  400824:	47a8      	blx	r5
  400826:	b286      	uxth	r6, r0
  400828:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  40082c:	47a8      	blx	r5
  40082e:	4643      	mov	r3, r8
  400830:	463a      	mov	r2, r7
  400832:	4631      	mov	r1, r6
  400834:	b280      	uxth	r0, r0
  400836:	4e1f      	ldr	r6, [pc, #124]	; (4008b4 <compute_beam_parameters+0xb4>)
  400838:	47b0      	blx	r6
 	compute_fwhm(beam_parameters[2], beam_parameters[3], beam_parameters[5], beam_parameters[6]);
  40083a:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
  40083e:	47a8      	blx	r5
  400840:	fa1f f880 	uxth.w	r8, r0
  400844:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
  400848:	47a8      	blx	r5
  40084a:	b287      	uxth	r7, r0
  40084c:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
  400850:	47a8      	blx	r5
  400852:	b286      	uxth	r6, r0
  400854:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  400858:	47a8      	blx	r5
  40085a:	4643      	mov	r3, r8
  40085c:	463a      	mov	r2, r7
  40085e:	4631      	mov	r1, r6
  400860:	b280      	uxth	r0, r0
  400862:	4e15      	ldr	r6, [pc, #84]	; (4008b8 <compute_beam_parameters+0xb8>)
  400864:	47b0      	blx	r6
 	compute_skewness(beam_parameters[2], beam_parameters[3], beam_parameters[5], beam_parameters[6]);
  400866:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
  40086a:	47a8      	blx	r5
  40086c:	fa1f f880 	uxth.w	r8, r0
  400870:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
  400874:	47a8      	blx	r5
  400876:	b287      	uxth	r7, r0
  400878:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
  40087c:	47a8      	blx	r5
  40087e:	b286      	uxth	r6, r0
  400880:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  400884:	47a8      	blx	r5
  400886:	4643      	mov	r3, r8
  400888:	463a      	mov	r2, r7
  40088a:	4631      	mov	r1, r6
  40088c:	b280      	uxth	r0, r0
  40088e:	4d0b      	ldr	r5, [pc, #44]	; (4008bc <compute_beam_parameters+0xbc>)
  400890:	47a8      	blx	r5
	 
	beam_parameters[0] = 6666;
  400892:	a303      	add	r3, pc, #12	; (adr r3, 4008a0 <compute_beam_parameters+0xa0>)
  400894:	e9d3 2300 	ldrd	r2, r3, [r3]
  400898:	e9c4 2300 	strd	r2, r3, [r4]
  40089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008a0:	00000000 	.word	0x00000000
  4008a4:	40ba0a00 	.word	0x40ba0a00
  4008a8:	00400219 	.word	0x00400219
  4008ac:	20000880 	.word	0x20000880
  4008b0:	0040367d 	.word	0x0040367d
  4008b4:	0040034d 	.word	0x0040034d
  4008b8:	004003f1 	.word	0x004003f1
  4008bc:	004005e1 	.word	0x004005e1

004008c0 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4008c0:	460b      	mov	r3, r1
  4008c2:	b119      	cbz	r1, 4008cc <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;				
  4008c4:	6809      	ldr	r1, [r1, #0]
  4008c6:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4008c8:	685b      	ldr	r3, [r3, #4]
  4008ca:	60c3      	str	r3, [r0, #12]
	}
	
	if (p_next_packet) {
  4008cc:	b11a      	cbz	r2, 4008d6 <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  4008ce:	6813      	ldr	r3, [r2, #0]
  4008d0:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4008d2:	6853      	ldr	r3, [r2, #4]
  4008d4:	61c3      	str	r3, [r0, #28]
  4008d6:	4770      	bx	lr

004008d8 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4008d8:	460b      	mov	r3, r1
  4008da:	b119      	cbz	r1, 4008e4 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;		// set receive pointer register to the address of the self-defined receive buffer
  4008dc:	6809      	ldr	r1, [r1, #0]
  4008de:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;		// set receiver counter register to the size of self-defined receive buffer
  4008e0:	685b      	ldr	r3, [r3, #4]
  4008e2:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  4008e4:	b11a      	cbz	r2, 4008ee <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  4008e6:	6813      	ldr	r3, [r2, #0]
  4008e8:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  4008ea:	6853      	ldr	r3, [r2, #4]
  4008ec:	6143      	str	r3, [r0, #20]
  4008ee:	4770      	bx	lr

004008f0 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4008f0:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  4008f4:	05c9      	lsls	r1, r1, #23
  4008f6:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
  4008f8:	6201      	str	r1, [r0, #32]
  4008fa:	4770      	bx	lr

004008fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4008fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4008fe:	b083      	sub	sp, #12
  400900:	4605      	mov	r5, r0
  400902:	460c      	mov	r4, r1
	uint32_t val = 0;
  400904:	2300      	movs	r3, #0
  400906:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400908:	4b18      	ldr	r3, [pc, #96]	; (40096c <usart_serial_getchar+0x70>)
  40090a:	4298      	cmp	r0, r3
  40090c:	d00a      	beq.n	400924 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40090e:	4b18      	ldr	r3, [pc, #96]	; (400970 <usart_serial_getchar+0x74>)
  400910:	4298      	cmp	r0, r3
  400912:	d00f      	beq.n	400934 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400914:	4b17      	ldr	r3, [pc, #92]	; (400974 <usart_serial_getchar+0x78>)
  400916:	4298      	cmp	r0, r3
  400918:	d014      	beq.n	400944 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40091a:	4b17      	ldr	r3, [pc, #92]	; (400978 <usart_serial_getchar+0x7c>)
  40091c:	429d      	cmp	r5, r3
  40091e:	d01b      	beq.n	400958 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400920:	b003      	add	sp, #12
  400922:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400924:	461f      	mov	r7, r3
  400926:	4e15      	ldr	r6, [pc, #84]	; (40097c <usart_serial_getchar+0x80>)
  400928:	4621      	mov	r1, r4
  40092a:	4638      	mov	r0, r7
  40092c:	47b0      	blx	r6
  40092e:	2800      	cmp	r0, #0
  400930:	d1fa      	bne.n	400928 <usart_serial_getchar+0x2c>
  400932:	e7f2      	b.n	40091a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400934:	461e      	mov	r6, r3
  400936:	4d11      	ldr	r5, [pc, #68]	; (40097c <usart_serial_getchar+0x80>)
  400938:	4621      	mov	r1, r4
  40093a:	4630      	mov	r0, r6
  40093c:	47a8      	blx	r5
  40093e:	2800      	cmp	r0, #0
  400940:	d1fa      	bne.n	400938 <usart_serial_getchar+0x3c>
  400942:	e7ed      	b.n	400920 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400944:	461e      	mov	r6, r3
  400946:	4d0e      	ldr	r5, [pc, #56]	; (400980 <usart_serial_getchar+0x84>)
  400948:	a901      	add	r1, sp, #4
  40094a:	4630      	mov	r0, r6
  40094c:	47a8      	blx	r5
  40094e:	2800      	cmp	r0, #0
  400950:	d1fa      	bne.n	400948 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400952:	9b01      	ldr	r3, [sp, #4]
  400954:	7023      	strb	r3, [r4, #0]
  400956:	e7e3      	b.n	400920 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400958:	461e      	mov	r6, r3
  40095a:	4d09      	ldr	r5, [pc, #36]	; (400980 <usart_serial_getchar+0x84>)
  40095c:	a901      	add	r1, sp, #4
  40095e:	4630      	mov	r0, r6
  400960:	47a8      	blx	r5
  400962:	2800      	cmp	r0, #0
  400964:	d1fa      	bne.n	40095c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400966:	9b01      	ldr	r3, [sp, #4]
  400968:	7023      	strb	r3, [r4, #0]
}
  40096a:	e7d9      	b.n	400920 <usart_serial_getchar+0x24>
  40096c:	400e0600 	.word	0x400e0600
  400970:	40060600 	.word	0x40060600
  400974:	400a0000 	.word	0x400a0000
  400978:	400a4000 	.word	0x400a4000
  40097c:	00401417 	.word	0x00401417
  400980:	00401459 	.word	0x00401459

00400984 <usart_serial_putchar>:
{
  400984:	b570      	push	{r4, r5, r6, lr}
  400986:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400988:	4b18      	ldr	r3, [pc, #96]	; (4009ec <usart_serial_putchar+0x68>)
  40098a:	4298      	cmp	r0, r3
  40098c:	d00a      	beq.n	4009a4 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  40098e:	4b18      	ldr	r3, [pc, #96]	; (4009f0 <usart_serial_putchar+0x6c>)
  400990:	4298      	cmp	r0, r3
  400992:	d010      	beq.n	4009b6 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400994:	4b17      	ldr	r3, [pc, #92]	; (4009f4 <usart_serial_putchar+0x70>)
  400996:	4298      	cmp	r0, r3
  400998:	d016      	beq.n	4009c8 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  40099a:	4b17      	ldr	r3, [pc, #92]	; (4009f8 <usart_serial_putchar+0x74>)
  40099c:	4298      	cmp	r0, r3
  40099e:	d01c      	beq.n	4009da <usart_serial_putchar+0x56>
	return 0;
  4009a0:	2000      	movs	r0, #0
}
  4009a2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4009a4:	461e      	mov	r6, r3
  4009a6:	4d15      	ldr	r5, [pc, #84]	; (4009fc <usart_serial_putchar+0x78>)
  4009a8:	4621      	mov	r1, r4
  4009aa:	4630      	mov	r0, r6
  4009ac:	47a8      	blx	r5
  4009ae:	2800      	cmp	r0, #0
  4009b0:	d1fa      	bne.n	4009a8 <usart_serial_putchar+0x24>
		return 1;
  4009b2:	2001      	movs	r0, #1
  4009b4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4009b6:	461e      	mov	r6, r3
  4009b8:	4d10      	ldr	r5, [pc, #64]	; (4009fc <usart_serial_putchar+0x78>)
  4009ba:	4621      	mov	r1, r4
  4009bc:	4630      	mov	r0, r6
  4009be:	47a8      	blx	r5
  4009c0:	2800      	cmp	r0, #0
  4009c2:	d1fa      	bne.n	4009ba <usart_serial_putchar+0x36>
		return 1;
  4009c4:	2001      	movs	r0, #1
  4009c6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4009c8:	461e      	mov	r6, r3
  4009ca:	4d0d      	ldr	r5, [pc, #52]	; (400a00 <usart_serial_putchar+0x7c>)
  4009cc:	4621      	mov	r1, r4
  4009ce:	4630      	mov	r0, r6
  4009d0:	47a8      	blx	r5
  4009d2:	2800      	cmp	r0, #0
  4009d4:	d1fa      	bne.n	4009cc <usart_serial_putchar+0x48>
		return 1;
  4009d6:	2001      	movs	r0, #1
  4009d8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4009da:	461e      	mov	r6, r3
  4009dc:	4d08      	ldr	r5, [pc, #32]	; (400a00 <usart_serial_putchar+0x7c>)
  4009de:	4621      	mov	r1, r4
  4009e0:	4630      	mov	r0, r6
  4009e2:	47a8      	blx	r5
  4009e4:	2800      	cmp	r0, #0
  4009e6:	d1fa      	bne.n	4009de <usart_serial_putchar+0x5a>
		return 1;
  4009e8:	2001      	movs	r0, #1
  4009ea:	bd70      	pop	{r4, r5, r6, pc}
  4009ec:	400e0600 	.word	0x400e0600
  4009f0:	40060600 	.word	0x40060600
  4009f4:	400a0000 	.word	0x400a0000
  4009f8:	400a4000 	.word	0x400a4000
  4009fc:	00401407 	.word	0x00401407
  400a00:	00401445 	.word	0x00401445

00400a04 <send_cycle_plot>:
	stdio_serial_init(CONF_UART, &uart_serial_options);					// Setting UART as the stdio device, passing the options by reference
}


void send_cycle_plot()
{	
  400a04:	b508      	push	{r3, lr}
	pdc_tx_init(g_p_uart_pdc, &cycle_plot_packet, NULL);
  400a06:	2200      	movs	r2, #0
  400a08:	4904      	ldr	r1, [pc, #16]	; (400a1c <send_cycle_plot+0x18>)
  400a0a:	4b05      	ldr	r3, [pc, #20]	; (400a20 <send_cycle_plot+0x1c>)
  400a0c:	6818      	ldr	r0, [r3, #0]
  400a0e:	4b05      	ldr	r3, [pc, #20]	; (400a24 <send_cycle_plot+0x20>)
  400a10:	4798      	blx	r3
	config[3] = 0;
  400a12:	2200      	movs	r2, #0
  400a14:	4b04      	ldr	r3, [pc, #16]	; (400a28 <send_cycle_plot+0x24>)
  400a16:	70da      	strb	r2, [r3, #3]
  400a18:	bd08      	pop	{r3, pc}
  400a1a:	bf00      	nop
  400a1c:	2000cd34 	.word	0x2000cd34
  400a20:	2000cd3c 	.word	0x2000cd3c
  400a24:	004008c1 	.word	0x004008c1
  400a28:	200008e8 	.word	0x200008e8

00400a2c <send_beam_parameters>:
	
}


void send_beam_parameters()
{
  400a2c:	b508      	push	{r3, lr}
	compute_beam_parameters();
  400a2e:	4b06      	ldr	r3, [pc, #24]	; (400a48 <send_beam_parameters+0x1c>)
  400a30:	4798      	blx	r3
	pdc_tx_init(g_p_uart_pdc, &beam_parameters_packet, NULL);
  400a32:	2200      	movs	r2, #0
  400a34:	4905      	ldr	r1, [pc, #20]	; (400a4c <send_beam_parameters+0x20>)
  400a36:	4b06      	ldr	r3, [pc, #24]	; (400a50 <send_beam_parameters+0x24>)
  400a38:	6818      	ldr	r0, [r3, #0]
  400a3a:	4b06      	ldr	r3, [pc, #24]	; (400a54 <send_beam_parameters+0x28>)
  400a3c:	4798      	blx	r3
	config[2] = 0;
  400a3e:	2200      	movs	r2, #0
  400a40:	4b05      	ldr	r3, [pc, #20]	; (400a58 <send_beam_parameters+0x2c>)
  400a42:	709a      	strb	r2, [r3, #2]
  400a44:	bd08      	pop	{r3, pc}
  400a46:	bf00      	nop
  400a48:	00400801 	.word	0x00400801
  400a4c:	2000cd2c 	.word	0x2000cd2c
  400a50:	2000cd3c 	.word	0x2000cd3c
  400a54:	004008c1 	.word	0x004008c1
  400a58:	200008e8 	.word	0x200008e8

00400a5c <UART0_Handler>:

/**
 * \brief Interrupt handler for UART interrupt. */
 
void console_uart_irq_handler(void)
{
  400a5c:	b508      	push	{r3, lr}
	 //Get UART status and check if PDC receive buffer is full 
	if ((uart_get_status(CONSOLE_UART) & UART_SR_RXBUFF) == UART_SR_RXBUFF) {
  400a5e:	4810      	ldr	r0, [pc, #64]	; (400aa0 <UART0_Handler+0x44>)
  400a60:	4b10      	ldr	r3, [pc, #64]	; (400aa4 <UART0_Handler+0x48>)
  400a62:	4798      	blx	r3
  400a64:	f410 5f80 	tst.w	r0, #4096	; 0x1000
  400a68:	d100      	bne.n	400a6c <UART0_Handler+0x10>
  400a6a:	bd08      	pop	{r3, pc}
		
		// Configure PDC for data transfer (RX and TX) 
		pdc_rx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);		// pass thee PDC register base and the address of the transfer buffer, will do the transfer until expected amount of data is received (which will trigger interrupt)
  400a6c:	2200      	movs	r2, #0
  400a6e:	490e      	ldr	r1, [pc, #56]	; (400aa8 <UART0_Handler+0x4c>)
  400a70:	4b0e      	ldr	r3, [pc, #56]	; (400aac <UART0_Handler+0x50>)
  400a72:	6818      	ldr	r0, [r3, #0]
  400a74:	4b0e      	ldr	r3, [pc, #56]	; (400ab0 <UART0_Handler+0x54>)
  400a76:	4798      	blx	r3
		uint8_t index = host_command[1];
  400a78:	4a0e      	ldr	r2, [pc, #56]	; (400ab4 <UART0_Handler+0x58>)
  400a7a:	7853      	ldrb	r3, [r2, #1]
		config[index] = host_command[2];
  400a7c:	7891      	ldrb	r1, [r2, #2]
  400a7e:	4a0e      	ldr	r2, [pc, #56]	; (400ab8 <UART0_Handler+0x5c>)
  400a80:	54d1      	strb	r1, [r2, r3]
		if (index == 1) dacc_write_conversion_data(DACC, config[1]*16);		
  400a82:	2b01      	cmp	r3, #1
  400a84:	d006      	beq.n	400a94 <UART0_Handler+0x38>
		pdc_tx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);		// For now, this transfer echoes the received packet that caused this interrupt, but the packet pointer can be set to the databuffer containing plot- or parameter data
  400a86:	2200      	movs	r2, #0
  400a88:	4907      	ldr	r1, [pc, #28]	; (400aa8 <UART0_Handler+0x4c>)
  400a8a:	4b08      	ldr	r3, [pc, #32]	; (400aac <UART0_Handler+0x50>)
  400a8c:	6818      	ldr	r0, [r3, #0]
  400a8e:	4b0b      	ldr	r3, [pc, #44]	; (400abc <UART0_Handler+0x60>)
  400a90:	4798      	blx	r3
	}
	
	
}
  400a92:	e7ea      	b.n	400a6a <UART0_Handler+0xe>
		if (index == 1) dacc_write_conversion_data(DACC, config[1]*16);		
  400a94:	7851      	ldrb	r1, [r2, #1]
  400a96:	0109      	lsls	r1, r1, #4
  400a98:	4809      	ldr	r0, [pc, #36]	; (400ac0 <UART0_Handler+0x64>)
  400a9a:	4b0a      	ldr	r3, [pc, #40]	; (400ac4 <UART0_Handler+0x68>)
  400a9c:	4798      	blx	r3
  400a9e:	e7f2      	b.n	400a86 <UART0_Handler+0x2a>
  400aa0:	400e0600 	.word	0x400e0600
  400aa4:	00401403 	.word	0x00401403
  400aa8:	2000cd40 	.word	0x2000cd40
  400aac:	2000cd3c 	.word	0x2000cd3c
  400ab0:	004008d9 	.word	0x004008d9
  400ab4:	200008f0 	.word	0x200008f0
  400ab8:	200008e8 	.word	0x200008e8
  400abc:	004008c1 	.word	0x004008c1
  400ac0:	400b8000 	.word	0x400b8000
  400ac4:	00401179 	.word	0x00401179

00400ac8 <pdc_uart_initialization>:



void pdc_uart_initialization(void)
{
  400ac8:	b570      	push	{r4, r5, r6, lr}
  400aca:	b084      	sub	sp, #16
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400acc:	2007      	movs	r0, #7
  400ace:	4d25      	ldr	r5, [pc, #148]	; (400b64 <pdc_uart_initialization+0x9c>)
  400ad0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400ad2:	4c25      	ldr	r4, [pc, #148]	; (400b68 <pdc_uart_initialization+0xa0>)
  400ad4:	4b25      	ldr	r3, [pc, #148]	; (400b6c <pdc_uart_initialization+0xa4>)
  400ad6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400ad8:	4a25      	ldr	r2, [pc, #148]	; (400b70 <pdc_uart_initialization+0xa8>)
  400ada:	4b26      	ldr	r3, [pc, #152]	; (400b74 <pdc_uart_initialization+0xac>)
  400adc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400ade:	4a26      	ldr	r2, [pc, #152]	; (400b78 <pdc_uart_initialization+0xb0>)
  400ae0:	4b26      	ldr	r3, [pc, #152]	; (400b7c <pdc_uart_initialization+0xb4>)
  400ae2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400ae4:	4b26      	ldr	r3, [pc, #152]	; (400b80 <pdc_uart_initialization+0xb8>)
  400ae6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400ae8:	4b26      	ldr	r3, [pc, #152]	; (400b84 <pdc_uart_initialization+0xbc>)
  400aea:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400aec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400af0:	9303      	str	r3, [sp, #12]
  400af2:	2007      	movs	r0, #7
  400af4:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  400af6:	a901      	add	r1, sp, #4
  400af8:	4620      	mov	r0, r4
  400afa:	4b23      	ldr	r3, [pc, #140]	; (400b88 <pdc_uart_initialization+0xc0>)
  400afc:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400afe:	4e23      	ldr	r6, [pc, #140]	; (400b8c <pdc_uart_initialization+0xc4>)
  400b00:	6833      	ldr	r3, [r6, #0]
  400b02:	2100      	movs	r1, #0
  400b04:	6898      	ldr	r0, [r3, #8]
  400b06:	4d22      	ldr	r5, [pc, #136]	; (400b90 <pdc_uart_initialization+0xc8>)
  400b08:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400b0a:	6833      	ldr	r3, [r6, #0]
  400b0c:	2100      	movs	r1, #0
  400b0e:	6858      	ldr	r0, [r3, #4]
  400b10:	47a8      	blx	r5
	/* Initialize the UART console */
	configure_UART();

	/* Get pointer to UART PDC register base */
	g_p_uart_pdc = uart_get_pdc_base(CONSOLE_UART);
  400b12:	4620      	mov	r0, r4
  400b14:	4b1f      	ldr	r3, [pc, #124]	; (400b94 <pdc_uart_initialization+0xcc>)
  400b16:	4798      	blx	r3
  400b18:	4e1f      	ldr	r6, [pc, #124]	; (400b98 <pdc_uart_initialization+0xd0>)
  400b1a:	6030      	str	r0, [r6, #0]

	/* Initialize PDC data packet for transfer (receive/transmit) */
	g_pdc_uart_packet.ul_addr = (uint32_t) host_command;		// start address of transfer packet data is the buffer we defined ourselves
  400b1c:	4d1f      	ldr	r5, [pc, #124]	; (400b9c <pdc_uart_initialization+0xd4>)
  400b1e:	4b20      	ldr	r3, [pc, #128]	; (400ba0 <pdc_uart_initialization+0xd8>)
  400b20:	602b      	str	r3, [r5, #0]
	g_pdc_uart_packet.ul_size = BUFFER_SIZE;					// size of the buffer/packet
  400b22:	2303      	movs	r3, #3
  400b24:	606b      	str	r3, [r5, #4]
	
	beam_parameters_packet.ul_addr = (uint32_t) beam_parameters;		// start address of transfer packet data is the buffer we defined ourselves
  400b26:	4b1f      	ldr	r3, [pc, #124]	; (400ba4 <pdc_uart_initialization+0xdc>)
  400b28:	4a1f      	ldr	r2, [pc, #124]	; (400ba8 <pdc_uart_initialization+0xe0>)
  400b2a:	601a      	str	r2, [r3, #0]
	beam_parameters_packet.ul_size = 104;
  400b2c:	2268      	movs	r2, #104	; 0x68
  400b2e:	605a      	str	r2, [r3, #4]
	
	cycle_plot_packet.ul_addr = (uint32_t) transmit_buffer;		// start address of transfer packet data is the buffer we defined ourselves
  400b30:	4b1e      	ldr	r3, [pc, #120]	; (400bac <pdc_uart_initialization+0xe4>)
  400b32:	4a1f      	ldr	r2, [pc, #124]	; (400bb0 <pdc_uart_initialization+0xe8>)
  400b34:	6812      	ldr	r2, [r2, #0]
  400b36:	601a      	str	r2, [r3, #0]
	cycle_plot_packet.ul_size = 16668;
  400b38:	f244 121c 	movw	r2, #16668	; 0x411c
  400b3c:	605a      	str	r2, [r3, #4]
	
	/* Enable PDC transfers, here we set both transmitter and receiver high (full duplex) */
	pdc_enable_transfer(g_p_uart_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400b3e:	f240 1101 	movw	r1, #257	; 0x101
  400b42:	4b1c      	ldr	r3, [pc, #112]	; (400bb4 <pdc_uart_initialization+0xec>)
  400b44:	4798      	blx	r3
	pdc_rx_init(g_p_uart_pdc, &g_pdc_uart_packet, NULL);
  400b46:	2200      	movs	r2, #0
  400b48:	4629      	mov	r1, r5
  400b4a:	6830      	ldr	r0, [r6, #0]
  400b4c:	4b1a      	ldr	r3, [pc, #104]	; (400bb8 <pdc_uart_initialization+0xf0>)
  400b4e:	4798      	blx	r3
	
	/* Enable UART IRQ for receive buffer full*/
	uart_enable_interrupt(CONSOLE_UART, UART_IER_RXBUFF);
  400b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400b54:	4620      	mov	r0, r4
  400b56:	4b19      	ldr	r3, [pc, #100]	; (400bbc <pdc_uart_initialization+0xf4>)
  400b58:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b5a:	2280      	movs	r2, #128	; 0x80
  400b5c:	4b18      	ldr	r3, [pc, #96]	; (400bc0 <pdc_uart_initialization+0xf8>)
  400b5e:	601a      	str	r2, [r3, #0]
	
	/* Enable UART interrupt */
	NVIC_EnableIRQ(CONSOLE_UART_IRQn);
	
}
  400b60:	b004      	add	sp, #16
  400b62:	bd70      	pop	{r4, r5, r6, pc}
  400b64:	004012c1 	.word	0x004012c1
  400b68:	400e0600 	.word	0x400e0600
  400b6c:	2000cd58 	.word	0x2000cd58
  400b70:	00400985 	.word	0x00400985
  400b74:	2000cd54 	.word	0x2000cd54
  400b78:	004008fd 	.word	0x004008fd
  400b7c:	2000cd50 	.word	0x2000cd50
  400b80:	05b8d800 	.word	0x05b8d800
  400b84:	000f4240 	.word	0x000f4240
  400b88:	004013c7 	.word	0x004013c7
  400b8c:	20000018 	.word	0x20000018
  400b90:	00403bb1 	.word	0x00403bb1
  400b94:	00401429 	.word	0x00401429
  400b98:	2000cd3c 	.word	0x2000cd3c
  400b9c:	2000cd40 	.word	0x2000cd40
  400ba0:	200008f0 	.word	0x200008f0
  400ba4:	2000cd2c 	.word	0x2000cd2c
  400ba8:	20000880 	.word	0x20000880
  400bac:	2000cd34 	.word	0x2000cd34
  400bb0:	20000010 	.word	0x20000010
  400bb4:	004008f1 	.word	0x004008f1
  400bb8:	004008d9 	.word	0x004008d9
  400bbc:	004013ff 	.word	0x004013ff
  400bc0:	e000e100 	.word	0xe000e100

00400bc4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400bc4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400bc6:	480e      	ldr	r0, [pc, #56]	; (400c00 <sysclk_init+0x3c>)
  400bc8:	4b0e      	ldr	r3, [pc, #56]	; (400c04 <sysclk_init+0x40>)
  400bca:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400bcc:	213e      	movs	r1, #62	; 0x3e
  400bce:	2000      	movs	r0, #0
  400bd0:	4b0d      	ldr	r3, [pc, #52]	; (400c08 <sysclk_init+0x44>)
  400bd2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400bd4:	4c0d      	ldr	r4, [pc, #52]	; (400c0c <sysclk_init+0x48>)
  400bd6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400bd8:	2800      	cmp	r0, #0
  400bda:	d0fc      	beq.n	400bd6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400bdc:	4b0c      	ldr	r3, [pc, #48]	; (400c10 <sysclk_init+0x4c>)
  400bde:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400be0:	4a0c      	ldr	r2, [pc, #48]	; (400c14 <sysclk_init+0x50>)
  400be2:	4b0d      	ldr	r3, [pc, #52]	; (400c18 <sysclk_init+0x54>)
  400be4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400be6:	4c0d      	ldr	r4, [pc, #52]	; (400c1c <sysclk_init+0x58>)
  400be8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400bea:	2800      	cmp	r0, #0
  400bec:	d0fc      	beq.n	400be8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400bee:	2010      	movs	r0, #16
  400bf0:	4b0b      	ldr	r3, [pc, #44]	; (400c20 <sysclk_init+0x5c>)
  400bf2:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400bf4:	4b0b      	ldr	r3, [pc, #44]	; (400c24 <sysclk_init+0x60>)
  400bf6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400bf8:	480b      	ldr	r0, [pc, #44]	; (400c28 <sysclk_init+0x64>)
  400bfa:	4b02      	ldr	r3, [pc, #8]	; (400c04 <sysclk_init+0x40>)
  400bfc:	4798      	blx	r3
  400bfe:	bd10      	pop	{r4, pc}
  400c00:	07270e00 	.word	0x07270e00
  400c04:	00401649 	.word	0x00401649
  400c08:	0040123d 	.word	0x0040123d
  400c0c:	00401291 	.word	0x00401291
  400c10:	004012a1 	.word	0x004012a1
  400c14:	200f3f01 	.word	0x200f3f01
  400c18:	400e0400 	.word	0x400e0400
  400c1c:	004012b1 	.word	0x004012b1
  400c20:	004011d9 	.word	0x004011d9
  400c24:	0040153d 	.word	0x0040153d
  400c28:	05b8d800 	.word	0x05b8d800

00400c2c <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  400c2c:	2a00      	cmp	r2, #0
  400c2e:	d03f      	beq.n	400cb0 <usart_serial_read_packet+0x84>
{
  400c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c34:	b083      	sub	sp, #12
  400c36:	4606      	mov	r6, r0
  400c38:	460c      	mov	r4, r1
  400c3a:	4693      	mov	fp, r2
  400c3c:	448b      	add	fp, r1
	if (UART0 == (Uart*)p_usart) {
  400c3e:	4f1d      	ldr	r7, [pc, #116]	; (400cb4 <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  400c40:	4d1d      	ldr	r5, [pc, #116]	; (400cb8 <usart_serial_read_packet+0x8c>)
	if (UART1 == (Uart*)p_usart) {
  400c42:	f8df a080 	ldr.w	sl, [pc, #128]	; 400cc4 <usart_serial_read_packet+0x98>
  400c46:	e00d      	b.n	400c64 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  400c48:	4621      	mov	r1, r4
  400c4a:	4638      	mov	r0, r7
  400c4c:	47a8      	blx	r5
  400c4e:	2800      	cmp	r0, #0
  400c50:	d1fa      	bne.n	400c48 <usart_serial_read_packet+0x1c>
  400c52:	e010      	b.n	400c76 <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  400c54:	4621      	mov	r1, r4
  400c56:	4650      	mov	r0, sl
  400c58:	47a8      	blx	r5
  400c5a:	2800      	cmp	r0, #0
  400c5c:	d1fa      	bne.n	400c54 <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  400c5e:	3401      	adds	r4, #1
	while (len) {
  400c60:	455c      	cmp	r4, fp
  400c62:	d021      	beq.n	400ca8 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400c64:	2300      	movs	r3, #0
  400c66:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400c68:	42be      	cmp	r6, r7
  400c6a:	d0ed      	beq.n	400c48 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  400c6c:	4556      	cmp	r6, sl
  400c6e:	d0f1      	beq.n	400c54 <usart_serial_read_packet+0x28>
	if (USART0 == p_usart) {
  400c70:	4b12      	ldr	r3, [pc, #72]	; (400cbc <usart_serial_read_packet+0x90>)
  400c72:	429e      	cmp	r6, r3
  400c74:	d00d      	beq.n	400c92 <usart_serial_read_packet+0x66>
	if (USART1 == p_usart) {
  400c76:	4b12      	ldr	r3, [pc, #72]	; (400cc0 <usart_serial_read_packet+0x94>)
  400c78:	429e      	cmp	r6, r3
  400c7a:	d1f0      	bne.n	400c5e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400c7c:	4699      	mov	r9, r3
  400c7e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400cc8 <usart_serial_read_packet+0x9c>
  400c82:	a901      	add	r1, sp, #4
  400c84:	4648      	mov	r0, r9
  400c86:	47c0      	blx	r8
  400c88:	2800      	cmp	r0, #0
  400c8a:	d1fa      	bne.n	400c82 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  400c8c:	9b01      	ldr	r3, [sp, #4]
  400c8e:	7023      	strb	r3, [r4, #0]
  400c90:	e7e5      	b.n	400c5e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  400c92:	4699      	mov	r9, r3
  400c94:	f8df 8030 	ldr.w	r8, [pc, #48]	; 400cc8 <usart_serial_read_packet+0x9c>
  400c98:	a901      	add	r1, sp, #4
  400c9a:	4648      	mov	r0, r9
  400c9c:	47c0      	blx	r8
  400c9e:	2800      	cmp	r0, #0
  400ca0:	d1fa      	bne.n	400c98 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  400ca2:	9b01      	ldr	r3, [sp, #4]
  400ca4:	7023      	strb	r3, [r4, #0]
  400ca6:	e7da      	b.n	400c5e <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  400ca8:	2000      	movs	r0, #0
  400caa:	b003      	add	sp, #12
  400cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400cb0:	2000      	movs	r0, #0
  400cb2:	4770      	bx	lr
  400cb4:	400e0600 	.word	0x400e0600
  400cb8:	00401417 	.word	0x00401417
  400cbc:	400a0000 	.word	0x400a0000
  400cc0:	400a4000 	.word	0x400a4000
  400cc4:	40060600 	.word	0x40060600
  400cc8:	00401459 	.word	0x00401459

00400ccc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400cd0:	b980      	cbnz	r0, 400cf4 <_read+0x28>
  400cd2:	460c      	mov	r4, r1
  400cd4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400cd6:	2a00      	cmp	r2, #0
  400cd8:	dd0f      	ble.n	400cfa <_read+0x2e>
  400cda:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400cdc:	4e08      	ldr	r6, [pc, #32]	; (400d00 <_read+0x34>)
  400cde:	4d09      	ldr	r5, [pc, #36]	; (400d04 <_read+0x38>)
  400ce0:	6830      	ldr	r0, [r6, #0]
  400ce2:	4621      	mov	r1, r4
  400ce4:	682b      	ldr	r3, [r5, #0]
  400ce6:	4798      	blx	r3
		ptr++;
  400ce8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400cea:	42bc      	cmp	r4, r7
  400cec:	d1f8      	bne.n	400ce0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400cee:	4640      	mov	r0, r8
  400cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400cf4:	f04f 38ff 	mov.w	r8, #4294967295
  400cf8:	e7f9      	b.n	400cee <_read+0x22>
	for (; len > 0; --len) {
  400cfa:	4680      	mov	r8, r0
  400cfc:	e7f7      	b.n	400cee <_read+0x22>
  400cfe:	bf00      	nop
  400d00:	2000cd58 	.word	0x2000cd58
  400d04:	2000cd50 	.word	0x2000cd50

00400d08 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400d08:	3801      	subs	r0, #1
  400d0a:	2802      	cmp	r0, #2
  400d0c:	d815      	bhi.n	400d3a <_write+0x32>
{
  400d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d12:	460e      	mov	r6, r1
  400d14:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400d16:	b19a      	cbz	r2, 400d40 <_write+0x38>
  400d18:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400d1a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400d54 <_write+0x4c>
  400d1e:	4f0c      	ldr	r7, [pc, #48]	; (400d50 <_write+0x48>)
  400d20:	f8d8 0000 	ldr.w	r0, [r8]
  400d24:	f815 1b01 	ldrb.w	r1, [r5], #1
  400d28:	683b      	ldr	r3, [r7, #0]
  400d2a:	4798      	blx	r3
  400d2c:	2800      	cmp	r0, #0
  400d2e:	db0a      	blt.n	400d46 <_write+0x3e>
  400d30:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400d32:	3c01      	subs	r4, #1
  400d34:	d1f4      	bne.n	400d20 <_write+0x18>
  400d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d3a:	f04f 30ff 	mov.w	r0, #4294967295
  400d3e:	4770      	bx	lr
	for (; len != 0; --len) {
  400d40:	4610      	mov	r0, r2
  400d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400d46:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d4e:	bf00      	nop
  400d50:	2000cd54 	.word	0x2000cd54
  400d54:	2000cd58 	.word	0x2000cd58

00400d58 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400d58:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d5e:	4b21      	ldr	r3, [pc, #132]	; (400de4 <board_init+0x8c>)
  400d60:	605a      	str	r2, [r3, #4]
  400d62:	2009      	movs	r0, #9
  400d64:	4c20      	ldr	r4, [pc, #128]	; (400de8 <board_init+0x90>)
  400d66:	47a0      	blx	r4
  400d68:	200a      	movs	r0, #10
  400d6a:	47a0      	blx	r4
  400d6c:	200b      	movs	r0, #11
  400d6e:	47a0      	blx	r4
  400d70:	200c      	movs	r0, #12
  400d72:	47a0      	blx	r4
  400d74:	200d      	movs	r0, #13
  400d76:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d78:	4b1c      	ldr	r3, [pc, #112]	; (400dec <board_init+0x94>)
  400d7a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400d7e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d84:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d86:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400d8a:	2204      	movs	r2, #4
  400d8c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400d92:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d98:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400d9a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400da0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400da2:	f021 0104 	bic.w	r1, r1, #4
  400da6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400da8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400daa:	f021 0104 	bic.w	r1, r1, #4
  400dae:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400db0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400db4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400db8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400dbc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  400dc0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dc6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400dc8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400dce:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400dd0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400dd4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400dd6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400dd8:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400ddc:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400dde:	605a      	str	r2, [r3, #4]
  400de0:	bd10      	pop	{r4, pc}
  400de2:	bf00      	nop
  400de4:	400e1850 	.word	0x400e1850
  400de8:	004012c1 	.word	0x004012c1
  400dec:	400e1400 	.word	0x400e1400

00400df0 <acc_init>:
		Acc *p_acc,
		uint32_t ul_select_plus,
		uint32_t ul_select_minus,
		uint32_t ul_edge_type,
		uint32_t ul_invert)
{
  400df0:	b410      	push	{r4}
	/* Validate the parameters. */
	Assert(p_acc);
	
	/* Reset the controller. */
	p_acc->ACC_CR |= ACC_CR_SWRST;
  400df2:	6804      	ldr	r4, [r0, #0]
  400df4:	f044 0401 	orr.w	r4, r4, #1
  400df8:	6004      	str	r4, [r0, #0]

	/* Write to the MR register. */
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400dfa:	9c01      	ldr	r4, [sp, #4]
  400dfc:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
  400e00:	f444 7480 	orr.w	r4, r4, #256	; 0x100
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
  400e04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400e08:	431c      	orrs	r4, r3
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
  400e0a:	f002 0207 	and.w	r2, r2, #7
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400e0e:	4314      	orrs	r4, r2
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400e10:	f001 0170 	and.w	r1, r1, #112	; 0x70
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400e14:	430c      	orrs	r4, r1
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400e16:	6044      	str	r4, [r0, #4]

	/* Set hysteresis and current option. */
	p_acc->ACC_ACR = (ACC_ACR_ISEL_HISP |
  400e18:	2303      	movs	r3, #3
  400e1a:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
			ACC_ACR_HYST(ACC_ACR_HYST_50mv_max));

	/* Automatic Output Masking Period. */
	while (p_acc->ACC_ISR & (uint32_t) ACC_ISR_MASK);
  400e1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400e20:	2b00      	cmp	r3, #0
  400e22:	dbfc      	blt.n	400e1e <acc_init+0x2e>
}
  400e24:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e28:	4770      	bx	lr

00400e2a <acc_get_comparison_result>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	uint32_t ul_temp = p_acc->ACC_MR;
  400e2a:	6843      	ldr	r3, [r0, #4]
	uint32_t ul_status = p_acc->ACC_ISR;
  400e2c:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if ((ul_temp & ACC_MR_INV_EN) == ACC_MR_INV_EN) {
  400e2e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		if (ul_status & ACC_ISR_SCO) {
  400e32:	bf18      	it	ne
  400e34:	f080 0002 	eorne.w	r0, r0, #2
			return 0;	/* inn>inp */
		} else {
			return 1;	/* inp>inn */
		}
	} else {
		if (ul_status & ACC_ISR_SCO) {
  400e38:	f3c0 0040 	ubfx	r0, r0, #1, #1
			return 1;	/* inp>inn */
		} else {
			return 0;	/* inn>inp */
		}
	}
}
  400e3c:	4770      	bx	lr

00400e3e <acc_enable_interrupt>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	p_acc->ACC_IER = ACC_IER_CE;
  400e3e:	2301      	movs	r3, #1
  400e40:	6243      	str	r3, [r0, #36]	; 0x24
  400e42:	4770      	bx	lr

00400e44 <acc_get_interrupt_status>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	return p_acc->ACC_ISR;
  400e44:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400e46:	4770      	bx	lr

00400e48 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400e48:	b570      	push	{r4, r5, r6, lr}
  400e4a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400e4c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400e4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400e50:	4013      	ands	r3, r2
  400e52:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400e54:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400e56:	4d21      	ldr	r5, [pc, #132]	; (400edc <afec_process_callback+0x94>)
  400e58:	42a8      	cmp	r0, r5
  400e5a:	bf14      	ite	ne
  400e5c:	2500      	movne	r5, #0
  400e5e:	2501      	moveq	r5, #1
  400e60:	006e      	lsls	r6, r5, #1
  400e62:	442e      	add	r6, r5
  400e64:	e00b      	b.n	400e7e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400e66:	2c14      	cmp	r4, #20
  400e68:	d824      	bhi.n	400eb4 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400e6a:	9a01      	ldr	r2, [sp, #4]
  400e6c:	f104 0108 	add.w	r1, r4, #8
  400e70:	2301      	movs	r3, #1
  400e72:	408b      	lsls	r3, r1
  400e74:	4213      	tst	r3, r2
  400e76:	d113      	bne.n	400ea0 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400e78:	3401      	adds	r4, #1
  400e7a:	2c17      	cmp	r4, #23
  400e7c:	d02b      	beq.n	400ed6 <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400e7e:	2c0f      	cmp	r4, #15
  400e80:	d8f1      	bhi.n	400e66 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400e82:	9a01      	ldr	r2, [sp, #4]
  400e84:	2301      	movs	r3, #1
  400e86:	40a3      	lsls	r3, r4
  400e88:	4213      	tst	r3, r2
  400e8a:	d0f5      	beq.n	400e78 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400e8c:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400e90:	4423      	add	r3, r4
  400e92:	4a13      	ldr	r2, [pc, #76]	; (400ee0 <afec_process_callback+0x98>)
  400e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400e98:	2b00      	cmp	r3, #0
  400e9a:	d0ed      	beq.n	400e78 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400e9c:	4798      	blx	r3
  400e9e:	e7eb      	b.n	400e78 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400ea0:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400ea4:	4423      	add	r3, r4
  400ea6:	4a0e      	ldr	r2, [pc, #56]	; (400ee0 <afec_process_callback+0x98>)
  400ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400eac:	2b00      	cmp	r3, #0
  400eae:	d0e3      	beq.n	400e78 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400eb0:	4798      	blx	r3
  400eb2:	e7e1      	b.n	400e78 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400eb4:	9a01      	ldr	r2, [sp, #4]
  400eb6:	f104 0109 	add.w	r1, r4, #9
  400eba:	2301      	movs	r3, #1
  400ebc:	408b      	lsls	r3, r1
  400ebe:	4213      	tst	r3, r2
  400ec0:	d0da      	beq.n	400e78 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400ec2:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400ec6:	4423      	add	r3, r4
  400ec8:	4a05      	ldr	r2, [pc, #20]	; (400ee0 <afec_process_callback+0x98>)
  400eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400ece:	2b00      	cmp	r3, #0
  400ed0:	d0d2      	beq.n	400e78 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400ed2:	4798      	blx	r3
  400ed4:	e7d0      	b.n	400e78 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400ed6:	b002      	add	sp, #8
  400ed8:	bd70      	pop	{r4, r5, r6, pc}
  400eda:	bf00      	nop
  400edc:	400b4000 	.word	0x400b4000
  400ee0:	2000cd5c 	.word	0x2000cd5c

00400ee4 <afec_ch_set_config>:
{
  400ee4:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400ee6:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400ee8:	2301      	movs	r3, #1
  400eea:	408b      	lsls	r3, r1
  400eec:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400ef0:	7815      	ldrb	r5, [r2, #0]
  400ef2:	2d00      	cmp	r5, #0
  400ef4:	bf08      	it	eq
  400ef6:	2300      	moveq	r3, #0
  400ef8:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400efa:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400efc:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400efe:	004b      	lsls	r3, r1, #1
  400f00:	2103      	movs	r1, #3
  400f02:	4099      	lsls	r1, r3
  400f04:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400f08:	7851      	ldrb	r1, [r2, #1]
  400f0a:	4099      	lsls	r1, r3
  400f0c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400f0e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400f10:	bc30      	pop	{r4, r5}
  400f12:	4770      	bx	lr

00400f14 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400f14:	2200      	movs	r2, #0
  400f16:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400f18:	4b08      	ldr	r3, [pc, #32]	; (400f3c <afec_get_config_defaults+0x28>)
  400f1a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400f1c:	4b08      	ldr	r3, [pc, #32]	; (400f40 <afec_get_config_defaults+0x2c>)
  400f1e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400f20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400f24:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400f26:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400f28:	2302      	movs	r3, #2
  400f2a:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  400f2c:	2301      	movs	r3, #1
  400f2e:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400f30:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400f32:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400f34:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400f36:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400f38:	7683      	strb	r3, [r0, #26]
  400f3a:	4770      	bx	lr
  400f3c:	05b8d800 	.word	0x05b8d800
  400f40:	005b8d80 	.word	0x005b8d80

00400f44 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400f44:	2300      	movs	r3, #0
  400f46:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400f48:	2301      	movs	r3, #1
  400f4a:	7043      	strb	r3, [r0, #1]
  400f4c:	4770      	bx	lr
	...

00400f50 <afec_init>:
	return afec->AFEC_ISR;
  400f50:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400f52:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f56:	d001      	beq.n	400f5c <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400f58:	2019      	movs	r0, #25
  400f5a:	4770      	bx	lr
{
  400f5c:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400f5e:	2301      	movs	r3, #1
  400f60:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400f62:	7dcb      	ldrb	r3, [r1, #23]
  400f64:	2b00      	cmp	r3, #0
  400f66:	bf14      	ite	ne
  400f68:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  400f6c:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  400f6e:	7d8b      	ldrb	r3, [r1, #22]
  400f70:	2b00      	cmp	r3, #0
  400f72:	bf14      	ite	ne
  400f74:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  400f78:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  400f7a:	7d0b      	ldrb	r3, [r1, #20]
  400f7c:	061b      	lsls	r3, r3, #24
  400f7e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400f82:	690a      	ldr	r2, [r1, #16]
  400f84:	68ce      	ldr	r6, [r1, #12]
  400f86:	4332      	orrs	r2, r6
  400f88:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  400f8a:	7d4a      	ldrb	r2, [r1, #21]
  400f8c:	0712      	lsls	r2, r2, #28
  400f8e:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400f92:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  400f94:	688a      	ldr	r2, [r1, #8]
  400f96:	0056      	lsls	r6, r2, #1
  400f98:	684a      	ldr	r2, [r1, #4]
  400f9a:	fbb2 f2f6 	udiv	r2, r2, r6
  400f9e:	3a01      	subs	r2, #1
  400fa0:	0212      	lsls	r2, r2, #8
  400fa2:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400fa4:	4313      	orrs	r3, r2
  400fa6:	432b      	orrs	r3, r5
  400fa8:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  400faa:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400fac:	7e0b      	ldrb	r3, [r1, #24]
  400fae:	2b00      	cmp	r3, #0
  400fb0:	bf14      	ite	ne
  400fb2:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400fb6:	2300      	moveq	r3, #0
  400fb8:	680a      	ldr	r2, [r1, #0]
  400fba:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400fbc:	7e4a      	ldrb	r2, [r1, #25]
  400fbe:	2a00      	cmp	r2, #0
  400fc0:	bf14      	ite	ne
  400fc2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400fc6:	2200      	moveq	r2, #0
			(config->resolution) |
  400fc8:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400fca:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  400fcc:	7e8b      	ldrb	r3, [r1, #26]
  400fce:	021b      	lsls	r3, r3, #8
  400fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400fd4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400fd8:	4b0e      	ldr	r3, [pc, #56]	; (401014 <afec_init+0xc4>)
  400fda:	4298      	cmp	r0, r3
  400fdc:	d005      	beq.n	400fea <afec_init+0x9a>
	if(afec == AFEC1) {
  400fde:	4b0e      	ldr	r3, [pc, #56]	; (401018 <afec_init+0xc8>)
  400fe0:	4298      	cmp	r0, r3
  400fe2:	d00c      	beq.n	400ffe <afec_init+0xae>
	return STATUS_OK;
  400fe4:	2000      	movs	r0, #0
}
  400fe6:	bc70      	pop	{r4, r5, r6}
  400fe8:	4770      	bx	lr
  400fea:	4b0c      	ldr	r3, [pc, #48]	; (40101c <afec_init+0xcc>)
  400fec:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400ff0:	2200      	movs	r2, #0
  400ff2:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400ff6:	428b      	cmp	r3, r1
  400ff8:	d1fb      	bne.n	400ff2 <afec_init+0xa2>
	return STATUS_OK;
  400ffa:	2000      	movs	r0, #0
  400ffc:	e7f3      	b.n	400fe6 <afec_init+0x96>
  400ffe:	4b08      	ldr	r3, [pc, #32]	; (401020 <afec_init+0xd0>)
  401000:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  401004:	2200      	movs	r2, #0
  401006:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40100a:	428b      	cmp	r3, r1
  40100c:	d1fb      	bne.n	401006 <afec_init+0xb6>
	return STATUS_OK;
  40100e:	2000      	movs	r0, #0
  401010:	e7e9      	b.n	400fe6 <afec_init+0x96>
  401012:	bf00      	nop
  401014:	400b0000 	.word	0x400b0000
  401018:	400b4000 	.word	0x400b4000
  40101c:	2000cd58 	.word	0x2000cd58
  401020:	2000cdb4 	.word	0x2000cdb4

00401024 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  401024:	4b0c      	ldr	r3, [pc, #48]	; (401058 <afec_enable_interrupt+0x34>)
  401026:	4299      	cmp	r1, r3
  401028:	d007      	beq.n	40103a <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40102a:	290f      	cmp	r1, #15
  40102c:	d80b      	bhi.n	401046 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  40102e:	d006      	beq.n	40103e <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  401030:	2301      	movs	r3, #1
  401032:	fa03 f101 	lsl.w	r1, r3, r1
  401036:	6241      	str	r1, [r0, #36]	; 0x24
  401038:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40103a:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  40103c:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  40103e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401042:	6243      	str	r3, [r0, #36]	; 0x24
  401044:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  401046:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  401048:	bf94      	ite	ls
  40104a:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  40104c:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  40104e:	2301      	movs	r3, #1
  401050:	fa03 f101 	lsl.w	r1, r3, r1
  401054:	6241      	str	r1, [r0, #36]	; 0x24
  401056:	4770      	bx	lr
  401058:	df00ffff 	.word	0xdf00ffff

0040105c <afec_set_callback>:
{
  40105c:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  40105e:	4c11      	ldr	r4, [pc, #68]	; (4010a4 <afec_set_callback+0x48>)
  401060:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  401062:	bf0c      	ite	eq
  401064:	2417      	moveq	r4, #23
  401066:	2400      	movne	r4, #0
  401068:	440c      	add	r4, r1
  40106a:	4d0f      	ldr	r5, [pc, #60]	; (4010a8 <afec_set_callback+0x4c>)
  40106c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  401070:	d10a      	bne.n	401088 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401072:	4a0e      	ldr	r2, [pc, #56]	; (4010ac <afec_set_callback+0x50>)
  401074:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  401078:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40107c:	011b      	lsls	r3, r3, #4
  40107e:	b2db      	uxtb	r3, r3
  401080:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401084:	6014      	str	r4, [r2, #0]
  401086:	e009      	b.n	40109c <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401088:	4a08      	ldr	r2, [pc, #32]	; (4010ac <afec_set_callback+0x50>)
  40108a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  40108e:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401092:	011b      	lsls	r3, r3, #4
  401094:	b2db      	uxtb	r3, r3
  401096:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40109a:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  40109c:	4b04      	ldr	r3, [pc, #16]	; (4010b0 <afec_set_callback+0x54>)
  40109e:	4798      	blx	r3
  4010a0:	bd38      	pop	{r3, r4, r5, pc}
  4010a2:	bf00      	nop
  4010a4:	400b4000 	.word	0x400b4000
  4010a8:	2000cd5c 	.word	0x2000cd5c
  4010ac:	e000e100 	.word	0xe000e100
  4010b0:	00401025 	.word	0x00401025

004010b4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4010b4:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4010b6:	4802      	ldr	r0, [pc, #8]	; (4010c0 <AFEC0_Handler+0xc>)
  4010b8:	4b02      	ldr	r3, [pc, #8]	; (4010c4 <AFEC0_Handler+0x10>)
  4010ba:	4798      	blx	r3
  4010bc:	bd08      	pop	{r3, pc}
  4010be:	bf00      	nop
  4010c0:	400b0000 	.word	0x400b0000
  4010c4:	00400e49 	.word	0x00400e49

004010c8 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4010c8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4010ca:	4802      	ldr	r0, [pc, #8]	; (4010d4 <AFEC1_Handler+0xc>)
  4010cc:	4b02      	ldr	r3, [pc, #8]	; (4010d8 <AFEC1_Handler+0x10>)
  4010ce:	4798      	blx	r3
  4010d0:	bd08      	pop	{r3, pc}
  4010d2:	bf00      	nop
  4010d4:	400b4000 	.word	0x400b4000
  4010d8:	00400e49 	.word	0x00400e49

004010dc <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4010dc:	b500      	push	{lr}
  4010de:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4010e0:	4b13      	ldr	r3, [pc, #76]	; (401130 <afec_enable+0x54>)
  4010e2:	4298      	cmp	r0, r3
  4010e4:	bf0c      	ite	eq
  4010e6:	201f      	moveq	r0, #31
  4010e8:	201e      	movne	r0, #30
  4010ea:	4b12      	ldr	r3, [pc, #72]	; (401134 <afec_enable+0x58>)
  4010ec:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4010ee:	4b12      	ldr	r3, [pc, #72]	; (401138 <afec_enable+0x5c>)
  4010f0:	789b      	ldrb	r3, [r3, #2]
  4010f2:	2bff      	cmp	r3, #255	; 0xff
  4010f4:	d01a      	beq.n	40112c <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4010f6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4010fa:	fab3 f383 	clz	r3, r3
  4010fe:	095b      	lsrs	r3, r3, #5
  401100:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401102:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401104:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401108:	2200      	movs	r2, #0
  40110a:	4b0c      	ldr	r3, [pc, #48]	; (40113c <afec_enable+0x60>)
  40110c:	701a      	strb	r2, [r3, #0]
	return flags;
  40110e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  401110:	4a09      	ldr	r2, [pc, #36]	; (401138 <afec_enable+0x5c>)
  401112:	7893      	ldrb	r3, [r2, #2]
  401114:	3301      	adds	r3, #1
  401116:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401118:	b129      	cbz	r1, 401126 <afec_enable+0x4a>
		cpu_irq_enable();
  40111a:	2201      	movs	r2, #1
  40111c:	4b07      	ldr	r3, [pc, #28]	; (40113c <afec_enable+0x60>)
  40111e:	701a      	strb	r2, [r3, #0]
  401120:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401124:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  401126:	b003      	add	sp, #12
  401128:	f85d fb04 	ldr.w	pc, [sp], #4
  40112c:	e7fe      	b.n	40112c <afec_enable+0x50>
  40112e:	bf00      	nop
  401130:	400b4000 	.word	0x400b4000
  401134:	004012c1 	.word	0x004012c1
  401138:	2000cd48 	.word	0x2000cd48
  40113c:	20000002 	.word	0x20000002

00401140 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  401140:	2301      	movs	r3, #1
  401142:	6003      	str	r3, [r0, #0]
  401144:	4770      	bx	lr

00401146 <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  401146:	6843      	ldr	r3, [r0, #4]
  401148:	f023 0301 	bic.w	r3, r3, #1
  40114c:	6043      	str	r3, [r0, #4]
  40114e:	4770      	bx	lr

00401150 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  401150:	b949      	cbnz	r1, 401166 <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  401152:	6843      	ldr	r3, [r0, #4]
  401154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401158:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  40115a:	6843      	ldr	r3, [r0, #4]
  40115c:	f023 0310 	bic.w	r3, r3, #16
  401160:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  401162:	2000      	movs	r0, #0
  401164:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  401166:	6843      	ldr	r3, [r0, #4]
  401168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40116c:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  40116e:	6843      	ldr	r3, [r0, #4]
  401170:	f043 0310 	orr.w	r3, r3, #16
  401174:	6043      	str	r3, [r0, #4]
  401176:	e7f4      	b.n	401162 <dacc_set_transfer_mode+0x12>

00401178 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  401178:	6201      	str	r1, [r0, #32]
  40117a:	4770      	bx	lr

0040117c <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  40117c:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  40117e:	2901      	cmp	r1, #1
  401180:	d901      	bls.n	401186 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  401182:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  401184:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  401186:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  40118a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  40118e:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  401190:	2000      	movs	r0, #0
  401192:	4770      	bx	lr

00401194 <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  401194:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  401196:	b941      	cbnz	r1, 4011aa <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  401198:	4907      	ldr	r1, [pc, #28]	; (4011b8 <dacc_set_timing+0x24>)
  40119a:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  40119c:	0612      	lsls	r2, r2, #24
  40119e:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  4011a2:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  4011a4:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  4011a6:	2000      	movs	r0, #0
  4011a8:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  4011aa:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  4011ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  4011b2:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  4011b6:	e7f1      	b.n	40119c <dacc_set_timing+0x8>
  4011b8:	c0df00ff 	.word	0xc0df00ff

004011bc <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  4011bc:	2901      	cmp	r1, #1
  4011be:	d901      	bls.n	4011c4 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  4011c0:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  4011c2:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  4011c4:	2301      	movs	r3, #1
  4011c6:	fa03 f101 	lsl.w	r1, r3, r1
  4011ca:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  4011cc:	2000      	movs	r0, #0
  4011ce:	4770      	bx	lr

004011d0 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  4011d0:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  4011d4:	2000      	movs	r0, #0
  4011d6:	4770      	bx	lr

004011d8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4011d8:	4a17      	ldr	r2, [pc, #92]	; (401238 <pmc_switch_mck_to_pllack+0x60>)
  4011da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4011e0:	4318      	orrs	r0, r3
  4011e2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011e6:	f013 0f08 	tst.w	r3, #8
  4011ea:	d10a      	bne.n	401202 <pmc_switch_mck_to_pllack+0x2a>
  4011ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011f0:	4911      	ldr	r1, [pc, #68]	; (401238 <pmc_switch_mck_to_pllack+0x60>)
  4011f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011f4:	f012 0f08 	tst.w	r2, #8
  4011f8:	d103      	bne.n	401202 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011fa:	3b01      	subs	r3, #1
  4011fc:	d1f9      	bne.n	4011f2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4011fe:	2001      	movs	r0, #1
  401200:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401202:	4a0d      	ldr	r2, [pc, #52]	; (401238 <pmc_switch_mck_to_pllack+0x60>)
  401204:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401206:	f023 0303 	bic.w	r3, r3, #3
  40120a:	f043 0302 	orr.w	r3, r3, #2
  40120e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401210:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401212:	f013 0f08 	tst.w	r3, #8
  401216:	d10a      	bne.n	40122e <pmc_switch_mck_to_pllack+0x56>
  401218:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40121c:	4906      	ldr	r1, [pc, #24]	; (401238 <pmc_switch_mck_to_pllack+0x60>)
  40121e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401220:	f012 0f08 	tst.w	r2, #8
  401224:	d105      	bne.n	401232 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401226:	3b01      	subs	r3, #1
  401228:	d1f9      	bne.n	40121e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40122a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40122c:	4770      	bx	lr
	return 0;
  40122e:	2000      	movs	r0, #0
  401230:	4770      	bx	lr
  401232:	2000      	movs	r0, #0
  401234:	4770      	bx	lr
  401236:	bf00      	nop
  401238:	400e0400 	.word	0x400e0400

0040123c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40123c:	b9c8      	cbnz	r0, 401272 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40123e:	4a11      	ldr	r2, [pc, #68]	; (401284 <pmc_switch_mainck_to_xtal+0x48>)
  401240:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401242:	0209      	lsls	r1, r1, #8
  401244:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401246:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40124a:	f023 0303 	bic.w	r3, r3, #3
  40124e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401252:	f043 0301 	orr.w	r3, r3, #1
  401256:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401258:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40125a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40125c:	f013 0f01 	tst.w	r3, #1
  401260:	d0fb      	beq.n	40125a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401262:	4a08      	ldr	r2, [pc, #32]	; (401284 <pmc_switch_mainck_to_xtal+0x48>)
  401264:	6a13      	ldr	r3, [r2, #32]
  401266:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40126a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40126e:	6213      	str	r3, [r2, #32]
  401270:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401272:	4904      	ldr	r1, [pc, #16]	; (401284 <pmc_switch_mainck_to_xtal+0x48>)
  401274:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401276:	4a04      	ldr	r2, [pc, #16]	; (401288 <pmc_switch_mainck_to_xtal+0x4c>)
  401278:	401a      	ands	r2, r3
  40127a:	4b04      	ldr	r3, [pc, #16]	; (40128c <pmc_switch_mainck_to_xtal+0x50>)
  40127c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40127e:	620b      	str	r3, [r1, #32]
  401280:	4770      	bx	lr
  401282:	bf00      	nop
  401284:	400e0400 	.word	0x400e0400
  401288:	fec8fffc 	.word	0xfec8fffc
  40128c:	01370002 	.word	0x01370002

00401290 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401290:	4b02      	ldr	r3, [pc, #8]	; (40129c <pmc_osc_is_ready_mainck+0xc>)
  401292:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401294:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401298:	4770      	bx	lr
  40129a:	bf00      	nop
  40129c:	400e0400 	.word	0x400e0400

004012a0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4012a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4012a4:	4b01      	ldr	r3, [pc, #4]	; (4012ac <pmc_disable_pllack+0xc>)
  4012a6:	629a      	str	r2, [r3, #40]	; 0x28
  4012a8:	4770      	bx	lr
  4012aa:	bf00      	nop
  4012ac:	400e0400 	.word	0x400e0400

004012b0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4012b0:	4b02      	ldr	r3, [pc, #8]	; (4012bc <pmc_is_locked_pllack+0xc>)
  4012b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4012b4:	f000 0002 	and.w	r0, r0, #2
  4012b8:	4770      	bx	lr
  4012ba:	bf00      	nop
  4012bc:	400e0400 	.word	0x400e0400

004012c0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4012c0:	282f      	cmp	r0, #47	; 0x2f
  4012c2:	d81e      	bhi.n	401302 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4012c4:	281f      	cmp	r0, #31
  4012c6:	d80c      	bhi.n	4012e2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4012c8:	4b11      	ldr	r3, [pc, #68]	; (401310 <pmc_enable_periph_clk+0x50>)
  4012ca:	699a      	ldr	r2, [r3, #24]
  4012cc:	2301      	movs	r3, #1
  4012ce:	4083      	lsls	r3, r0
  4012d0:	4393      	bics	r3, r2
  4012d2:	d018      	beq.n	401306 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4012d4:	2301      	movs	r3, #1
  4012d6:	fa03 f000 	lsl.w	r0, r3, r0
  4012da:	4b0d      	ldr	r3, [pc, #52]	; (401310 <pmc_enable_periph_clk+0x50>)
  4012dc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4012de:	2000      	movs	r0, #0
  4012e0:	4770      	bx	lr
		ul_id -= 32;
  4012e2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4012e4:	4b0a      	ldr	r3, [pc, #40]	; (401310 <pmc_enable_periph_clk+0x50>)
  4012e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4012ea:	2301      	movs	r3, #1
  4012ec:	4083      	lsls	r3, r0
  4012ee:	4393      	bics	r3, r2
  4012f0:	d00b      	beq.n	40130a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4012f2:	2301      	movs	r3, #1
  4012f4:	fa03 f000 	lsl.w	r0, r3, r0
  4012f8:	4b05      	ldr	r3, [pc, #20]	; (401310 <pmc_enable_periph_clk+0x50>)
  4012fa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4012fe:	2000      	movs	r0, #0
  401300:	4770      	bx	lr
		return 1;
  401302:	2001      	movs	r0, #1
  401304:	4770      	bx	lr
	return 0;
  401306:	2000      	movs	r0, #0
  401308:	4770      	bx	lr
  40130a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40130c:	4770      	bx	lr
  40130e:	bf00      	nop
  401310:	400e0400 	.word	0x400e0400

00401314 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  401314:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401316:	0189      	lsls	r1, r1, #6
  401318:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40131a:	2402      	movs	r4, #2
  40131c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40131e:	f04f 31ff 	mov.w	r1, #4294967295
  401322:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  401324:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  401326:	605a      	str	r2, [r3, #4]
}
  401328:	f85d 4b04 	ldr.w	r4, [sp], #4
  40132c:	4770      	bx	lr

0040132e <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40132e:	0189      	lsls	r1, r1, #6
  401330:	2305      	movs	r3, #5
  401332:	5043      	str	r3, [r0, r1]
  401334:	4770      	bx	lr

00401336 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  401336:	0189      	lsls	r1, r1, #6
  401338:	2302      	movs	r3, #2
  40133a:	5043      	str	r3, [r0, r1]
  40133c:	4770      	bx	lr

0040133e <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40133e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401342:	61ca      	str	r2, [r1, #28]
  401344:	4770      	bx	lr

00401346 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401346:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  40134a:	624a      	str	r2, [r1, #36]	; 0x24
  40134c:	4770      	bx	lr

0040134e <tc_disable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40134e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IDR = ul_sources;
  401352:	628a      	str	r2, [r1, #40]	; 0x28
  401354:	4770      	bx	lr

00401356 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  401356:	b4f0      	push	{r4, r5, r6, r7}
  401358:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40135a:	2402      	movs	r4, #2
  40135c:	9401      	str	r4, [sp, #4]
  40135e:	2408      	movs	r4, #8
  401360:	9402      	str	r4, [sp, #8]
  401362:	2420      	movs	r4, #32
  401364:	9403      	str	r4, [sp, #12]
  401366:	2480      	movs	r4, #128	; 0x80
  401368:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40136a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40136c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40136e:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  401370:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  401374:	d814      	bhi.n	4013a0 <tc_find_mck_divisor+0x4a>
  401376:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  401378:	42a0      	cmp	r0, r4
  40137a:	d217      	bcs.n	4013ac <tc_find_mck_divisor+0x56>
  40137c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40137e:	af01      	add	r7, sp, #4
  401380:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  401384:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  401388:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  40138a:	4284      	cmp	r4, r0
  40138c:	d30a      	bcc.n	4013a4 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  40138e:	4286      	cmp	r6, r0
  401390:	d90d      	bls.n	4013ae <tc_find_mck_divisor+0x58>
			ul_index++) {
  401392:	3501      	adds	r5, #1
	for (ul_index = 0;
  401394:	2d05      	cmp	r5, #5
  401396:	d1f3      	bne.n	401380 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  401398:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  40139a:	b006      	add	sp, #24
  40139c:	bcf0      	pop	{r4, r5, r6, r7}
  40139e:	4770      	bx	lr
			return 0;
  4013a0:	2000      	movs	r0, #0
  4013a2:	e7fa      	b.n	40139a <tc_find_mck_divisor+0x44>
  4013a4:	2000      	movs	r0, #0
  4013a6:	e7f8      	b.n	40139a <tc_find_mck_divisor+0x44>
	return 1;
  4013a8:	2001      	movs	r0, #1
  4013aa:	e7f6      	b.n	40139a <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4013ac:	2500      	movs	r5, #0
	if (p_uldiv) {
  4013ae:	b12a      	cbz	r2, 4013bc <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4013b0:	a906      	add	r1, sp, #24
  4013b2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4013b6:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4013ba:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4013bc:	2b00      	cmp	r3, #0
  4013be:	d0f3      	beq.n	4013a8 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4013c0:	601d      	str	r5, [r3, #0]
	return 1;
  4013c2:	2001      	movs	r0, #1
  4013c4:	e7e9      	b.n	40139a <tc_find_mck_divisor+0x44>

004013c6 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4013c6:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4013c8:	23ac      	movs	r3, #172	; 0xac
  4013ca:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4013cc:	680b      	ldr	r3, [r1, #0]
  4013ce:	684a      	ldr	r2, [r1, #4]
  4013d0:	fbb3 f3f2 	udiv	r3, r3, r2
  4013d4:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4013d6:	1e5c      	subs	r4, r3, #1
  4013d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4013dc:	4294      	cmp	r4, r2
  4013de:	d80c      	bhi.n	4013fa <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  4013e0:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4013e2:	688b      	ldr	r3, [r1, #8]
  4013e4:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4013e6:	f240 2302 	movw	r3, #514	; 0x202
  4013ea:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4013ee:	2350      	movs	r3, #80	; 0x50
  4013f0:	6003      	str	r3, [r0, #0]

	return 0;
  4013f2:	2000      	movs	r0, #0
}
  4013f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013f8:	4770      	bx	lr
		return 1;
  4013fa:	2001      	movs	r0, #1
  4013fc:	e7fa      	b.n	4013f4 <uart_init+0x2e>

004013fe <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  4013fe:	6081      	str	r1, [r0, #8]
  401400:	4770      	bx	lr

00401402 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  401402:	6940      	ldr	r0, [r0, #20]
}
  401404:	4770      	bx	lr

00401406 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401406:	6943      	ldr	r3, [r0, #20]
  401408:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40140c:	bf1a      	itte	ne
  40140e:	61c1      	strne	r1, [r0, #28]
	return 0;
  401410:	2000      	movne	r0, #0
		return 1;
  401412:	2001      	moveq	r0, #1
}
  401414:	4770      	bx	lr

00401416 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401416:	6943      	ldr	r3, [r0, #20]
  401418:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40141c:	bf1d      	ittte	ne
  40141e:	6983      	ldrne	r3, [r0, #24]
  401420:	700b      	strbne	r3, [r1, #0]
	return 0;
  401422:	2000      	movne	r0, #0
		return 1;
  401424:	2001      	moveq	r0, #1
}
  401426:	4770      	bx	lr

00401428 <uart_get_pdc_base>:
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
}
  401428:	4b03      	ldr	r3, [pc, #12]	; (401438 <uart_get_pdc_base+0x10>)
  40142a:	4a04      	ldr	r2, [pc, #16]	; (40143c <uart_get_pdc_base+0x14>)
  40142c:	4904      	ldr	r1, [pc, #16]	; (401440 <uart_get_pdc_base+0x18>)
  40142e:	4288      	cmp	r0, r1
  401430:	bf14      	ite	ne
  401432:	4610      	movne	r0, r2
  401434:	4618      	moveq	r0, r3
  401436:	4770      	bx	lr
  401438:	40060700 	.word	0x40060700
  40143c:	400e0700 	.word	0x400e0700
  401440:	40060600 	.word	0x40060600

00401444 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401444:	6943      	ldr	r3, [r0, #20]
  401446:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40144a:	bf1d      	ittte	ne
  40144c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  401450:	61c1      	strne	r1, [r0, #28]
	return 0;
  401452:	2000      	movne	r0, #0
		return 1;
  401454:	2001      	moveq	r0, #1
}
  401456:	4770      	bx	lr

00401458 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401458:	6943      	ldr	r3, [r0, #20]
  40145a:	f013 0f01 	tst.w	r3, #1
  40145e:	d005      	beq.n	40146c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401460:	6983      	ldr	r3, [r0, #24]
  401462:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401466:	600b      	str	r3, [r1, #0]

	return 0;
  401468:	2000      	movs	r0, #0
  40146a:	4770      	bx	lr
		return 1;
  40146c:	2001      	movs	r0, #1
}
  40146e:	4770      	bx	lr

00401470 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401470:	e7fe      	b.n	401470 <Dummy_Handler>
	...

00401474 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401474:	b500      	push	{lr}
  401476:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  401478:	4b25      	ldr	r3, [pc, #148]	; (401510 <Reset_Handler+0x9c>)
  40147a:	4a26      	ldr	r2, [pc, #152]	; (401514 <Reset_Handler+0xa0>)
  40147c:	429a      	cmp	r2, r3
  40147e:	d010      	beq.n	4014a2 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  401480:	4b25      	ldr	r3, [pc, #148]	; (401518 <Reset_Handler+0xa4>)
  401482:	4a23      	ldr	r2, [pc, #140]	; (401510 <Reset_Handler+0x9c>)
  401484:	429a      	cmp	r2, r3
  401486:	d20c      	bcs.n	4014a2 <Reset_Handler+0x2e>
  401488:	3b01      	subs	r3, #1
  40148a:	1a9b      	subs	r3, r3, r2
  40148c:	f023 0303 	bic.w	r3, r3, #3
  401490:	3304      	adds	r3, #4
  401492:	4413      	add	r3, r2
  401494:	491f      	ldr	r1, [pc, #124]	; (401514 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  401496:	f851 0b04 	ldr.w	r0, [r1], #4
  40149a:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  40149e:	429a      	cmp	r2, r3
  4014a0:	d1f9      	bne.n	401496 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4014a2:	4b1e      	ldr	r3, [pc, #120]	; (40151c <Reset_Handler+0xa8>)
  4014a4:	4a1e      	ldr	r2, [pc, #120]	; (401520 <Reset_Handler+0xac>)
  4014a6:	429a      	cmp	r2, r3
  4014a8:	d20a      	bcs.n	4014c0 <Reset_Handler+0x4c>
  4014aa:	3b01      	subs	r3, #1
  4014ac:	1a9b      	subs	r3, r3, r2
  4014ae:	f023 0303 	bic.w	r3, r3, #3
  4014b2:	3304      	adds	r3, #4
  4014b4:	4413      	add	r3, r2
		*pDest++ = 0;
  4014b6:	2100      	movs	r1, #0
  4014b8:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4014bc:	4293      	cmp	r3, r2
  4014be:	d1fb      	bne.n	4014b8 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4014c0:	4a18      	ldr	r2, [pc, #96]	; (401524 <Reset_Handler+0xb0>)
  4014c2:	4b19      	ldr	r3, [pc, #100]	; (401528 <Reset_Handler+0xb4>)
  4014c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4014c8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4014ca:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4014ce:	fab3 f383 	clz	r3, r3
  4014d2:	095b      	lsrs	r3, r3, #5
  4014d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4014d6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4014d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4014dc:	2200      	movs	r2, #0
  4014de:	4b13      	ldr	r3, [pc, #76]	; (40152c <Reset_Handler+0xb8>)
  4014e0:	701a      	strb	r2, [r3, #0]
	return flags;
  4014e2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4014e4:	4a12      	ldr	r2, [pc, #72]	; (401530 <Reset_Handler+0xbc>)
  4014e6:	6813      	ldr	r3, [r2, #0]
  4014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4014ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4014ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4014f2:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  4014f6:	b129      	cbz	r1, 401504 <Reset_Handler+0x90>
		cpu_irq_enable();
  4014f8:	2201      	movs	r2, #1
  4014fa:	4b0c      	ldr	r3, [pc, #48]	; (40152c <Reset_Handler+0xb8>)
  4014fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4014fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401502:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  401504:	4b0b      	ldr	r3, [pc, #44]	; (401534 <Reset_Handler+0xc0>)
  401506:	4798      	blx	r3

	/* Branch to main function */
	main();
  401508:	4b0b      	ldr	r3, [pc, #44]	; (401538 <Reset_Handler+0xc4>)
  40150a:	4798      	blx	r3
  40150c:	e7fe      	b.n	40150c <Reset_Handler+0x98>
  40150e:	bf00      	nop
  401510:	20000000 	.word	0x20000000
  401514:	00404c08 	.word	0x00404c08
  401518:	2000085c 	.word	0x2000085c
  40151c:	2000ce40 	.word	0x2000ce40
  401520:	20000860 	.word	0x20000860
  401524:	e000ed00 	.word	0xe000ed00
  401528:	00400000 	.word	0x00400000
  40152c:	20000002 	.word	0x20000002
  401530:	e000ed88 	.word	0xe000ed88
  401534:	00403ac5 	.word	0x00403ac5
  401538:	004019b9 	.word	0x004019b9

0040153c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  40153c:	4b3b      	ldr	r3, [pc, #236]	; (40162c <SystemCoreClockUpdate+0xf0>)
  40153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401540:	f003 0303 	and.w	r3, r3, #3
  401544:	2b01      	cmp	r3, #1
  401546:	d01d      	beq.n	401584 <SystemCoreClockUpdate+0x48>
  401548:	b183      	cbz	r3, 40156c <SystemCoreClockUpdate+0x30>
  40154a:	2b02      	cmp	r3, #2
  40154c:	d036      	beq.n	4015bc <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40154e:	4b37      	ldr	r3, [pc, #220]	; (40162c <SystemCoreClockUpdate+0xf0>)
  401550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401552:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401556:	2b70      	cmp	r3, #112	; 0x70
  401558:	d05f      	beq.n	40161a <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  40155a:	4b34      	ldr	r3, [pc, #208]	; (40162c <SystemCoreClockUpdate+0xf0>)
  40155c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40155e:	4934      	ldr	r1, [pc, #208]	; (401630 <SystemCoreClockUpdate+0xf4>)
  401560:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401564:	680b      	ldr	r3, [r1, #0]
  401566:	40d3      	lsrs	r3, r2
  401568:	600b      	str	r3, [r1, #0]
  40156a:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40156c:	4b31      	ldr	r3, [pc, #196]	; (401634 <SystemCoreClockUpdate+0xf8>)
  40156e:	695b      	ldr	r3, [r3, #20]
  401570:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401574:	bf14      	ite	ne
  401576:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40157a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40157e:	4b2c      	ldr	r3, [pc, #176]	; (401630 <SystemCoreClockUpdate+0xf4>)
  401580:	601a      	str	r2, [r3, #0]
  401582:	e7e4      	b.n	40154e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401584:	4b29      	ldr	r3, [pc, #164]	; (40162c <SystemCoreClockUpdate+0xf0>)
  401586:	6a1b      	ldr	r3, [r3, #32]
  401588:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40158c:	d003      	beq.n	401596 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40158e:	4a2a      	ldr	r2, [pc, #168]	; (401638 <SystemCoreClockUpdate+0xfc>)
  401590:	4b27      	ldr	r3, [pc, #156]	; (401630 <SystemCoreClockUpdate+0xf4>)
  401592:	601a      	str	r2, [r3, #0]
  401594:	e7db      	b.n	40154e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401596:	4a29      	ldr	r2, [pc, #164]	; (40163c <SystemCoreClockUpdate+0x100>)
  401598:	4b25      	ldr	r3, [pc, #148]	; (401630 <SystemCoreClockUpdate+0xf4>)
  40159a:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40159c:	4b23      	ldr	r3, [pc, #140]	; (40162c <SystemCoreClockUpdate+0xf0>)
  40159e:	6a1b      	ldr	r3, [r3, #32]
  4015a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015a4:	2b10      	cmp	r3, #16
  4015a6:	d005      	beq.n	4015b4 <SystemCoreClockUpdate+0x78>
  4015a8:	2b20      	cmp	r3, #32
  4015aa:	d1d0      	bne.n	40154e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  4015ac:	4a22      	ldr	r2, [pc, #136]	; (401638 <SystemCoreClockUpdate+0xfc>)
  4015ae:	4b20      	ldr	r3, [pc, #128]	; (401630 <SystemCoreClockUpdate+0xf4>)
  4015b0:	601a      	str	r2, [r3, #0]
				break;
  4015b2:	e7cc      	b.n	40154e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  4015b4:	4a22      	ldr	r2, [pc, #136]	; (401640 <SystemCoreClockUpdate+0x104>)
  4015b6:	4b1e      	ldr	r3, [pc, #120]	; (401630 <SystemCoreClockUpdate+0xf4>)
  4015b8:	601a      	str	r2, [r3, #0]
				break;
  4015ba:	e7c8      	b.n	40154e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4015bc:	4b1b      	ldr	r3, [pc, #108]	; (40162c <SystemCoreClockUpdate+0xf0>)
  4015be:	6a1b      	ldr	r3, [r3, #32]
  4015c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015c4:	d016      	beq.n	4015f4 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4015c6:	4a1c      	ldr	r2, [pc, #112]	; (401638 <SystemCoreClockUpdate+0xfc>)
  4015c8:	4b19      	ldr	r3, [pc, #100]	; (401630 <SystemCoreClockUpdate+0xf4>)
  4015ca:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4015cc:	4b17      	ldr	r3, [pc, #92]	; (40162c <SystemCoreClockUpdate+0xf0>)
  4015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015d0:	f003 0303 	and.w	r3, r3, #3
  4015d4:	2b02      	cmp	r3, #2
  4015d6:	d1ba      	bne.n	40154e <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4015d8:	4a14      	ldr	r2, [pc, #80]	; (40162c <SystemCoreClockUpdate+0xf0>)
  4015da:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4015dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4015de:	4814      	ldr	r0, [pc, #80]	; (401630 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4015e0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4015e4:	6803      	ldr	r3, [r0, #0]
  4015e6:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4015ea:	b2d2      	uxtb	r2, r2
  4015ec:	fbb3 f3f2 	udiv	r3, r3, r2
  4015f0:	6003      	str	r3, [r0, #0]
  4015f2:	e7ac      	b.n	40154e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015f4:	4a11      	ldr	r2, [pc, #68]	; (40163c <SystemCoreClockUpdate+0x100>)
  4015f6:	4b0e      	ldr	r3, [pc, #56]	; (401630 <SystemCoreClockUpdate+0xf4>)
  4015f8:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4015fa:	4b0c      	ldr	r3, [pc, #48]	; (40162c <SystemCoreClockUpdate+0xf0>)
  4015fc:	6a1b      	ldr	r3, [r3, #32]
  4015fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401602:	2b10      	cmp	r3, #16
  401604:	d005      	beq.n	401612 <SystemCoreClockUpdate+0xd6>
  401606:	2b20      	cmp	r3, #32
  401608:	d1e0      	bne.n	4015cc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  40160a:	4a0b      	ldr	r2, [pc, #44]	; (401638 <SystemCoreClockUpdate+0xfc>)
  40160c:	4b08      	ldr	r3, [pc, #32]	; (401630 <SystemCoreClockUpdate+0xf4>)
  40160e:	601a      	str	r2, [r3, #0]
				break;
  401610:	e7dc      	b.n	4015cc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  401612:	4a0b      	ldr	r2, [pc, #44]	; (401640 <SystemCoreClockUpdate+0x104>)
  401614:	4b06      	ldr	r3, [pc, #24]	; (401630 <SystemCoreClockUpdate+0xf4>)
  401616:	601a      	str	r2, [r3, #0]
				break;
  401618:	e7d8      	b.n	4015cc <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40161a:	4a05      	ldr	r2, [pc, #20]	; (401630 <SystemCoreClockUpdate+0xf4>)
  40161c:	6813      	ldr	r3, [r2, #0]
  40161e:	4909      	ldr	r1, [pc, #36]	; (401644 <SystemCoreClockUpdate+0x108>)
  401620:	fba1 1303 	umull	r1, r3, r1, r3
  401624:	085b      	lsrs	r3, r3, #1
  401626:	6013      	str	r3, [r2, #0]
  401628:	4770      	bx	lr
  40162a:	bf00      	nop
  40162c:	400e0400 	.word	0x400e0400
  401630:	20000004 	.word	0x20000004
  401634:	400e1810 	.word	0x400e1810
  401638:	00b71b00 	.word	0x00b71b00
  40163c:	003d0900 	.word	0x003d0900
  401640:	007a1200 	.word	0x007a1200
  401644:	aaaaaaab 	.word	0xaaaaaaab

00401648 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401648:	4b12      	ldr	r3, [pc, #72]	; (401694 <system_init_flash+0x4c>)
  40164a:	4298      	cmp	r0, r3
  40164c:	d911      	bls.n	401672 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  40164e:	4b12      	ldr	r3, [pc, #72]	; (401698 <system_init_flash+0x50>)
  401650:	4298      	cmp	r0, r3
  401652:	d913      	bls.n	40167c <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  401654:	4b11      	ldr	r3, [pc, #68]	; (40169c <system_init_flash+0x54>)
  401656:	4298      	cmp	r0, r3
  401658:	d914      	bls.n	401684 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40165a:	4b11      	ldr	r3, [pc, #68]	; (4016a0 <system_init_flash+0x58>)
  40165c:	4298      	cmp	r0, r3
  40165e:	d915      	bls.n	40168c <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401660:	4b10      	ldr	r3, [pc, #64]	; (4016a4 <system_init_flash+0x5c>)
  401662:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401664:	bf94      	ite	ls
  401666:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40166a:	4a0f      	ldrhi	r2, [pc, #60]	; (4016a8 <system_init_flash+0x60>)
  40166c:	4b0f      	ldr	r3, [pc, #60]	; (4016ac <system_init_flash+0x64>)
  40166e:	601a      	str	r2, [r3, #0]
  401670:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401672:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401676:	4b0d      	ldr	r3, [pc, #52]	; (4016ac <system_init_flash+0x64>)
  401678:	601a      	str	r2, [r3, #0]
  40167a:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40167c:	4a0c      	ldr	r2, [pc, #48]	; (4016b0 <system_init_flash+0x68>)
  40167e:	4b0b      	ldr	r3, [pc, #44]	; (4016ac <system_init_flash+0x64>)
  401680:	601a      	str	r2, [r3, #0]
  401682:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401684:	4a0b      	ldr	r2, [pc, #44]	; (4016b4 <system_init_flash+0x6c>)
  401686:	4b09      	ldr	r3, [pc, #36]	; (4016ac <system_init_flash+0x64>)
  401688:	601a      	str	r2, [r3, #0]
  40168a:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40168c:	4a0a      	ldr	r2, [pc, #40]	; (4016b8 <system_init_flash+0x70>)
  40168e:	4b07      	ldr	r3, [pc, #28]	; (4016ac <system_init_flash+0x64>)
  401690:	601a      	str	r2, [r3, #0]
  401692:	4770      	bx	lr
  401694:	01312cff 	.word	0x01312cff
  401698:	026259ff 	.word	0x026259ff
  40169c:	039386ff 	.word	0x039386ff
  4016a0:	04c4b3ff 	.word	0x04c4b3ff
  4016a4:	05f5e0ff 	.word	0x05f5e0ff
  4016a8:	04000500 	.word	0x04000500
  4016ac:	400e0a00 	.word	0x400e0a00
  4016b0:	04000100 	.word	0x04000100
  4016b4:	04000200 	.word	0x04000200
  4016b8:	04000300 	.word	0x04000300

004016bc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4016bc:	4b0a      	ldr	r3, [pc, #40]	; (4016e8 <_sbrk+0x2c>)
  4016be:	681b      	ldr	r3, [r3, #0]
  4016c0:	b153      	cbz	r3, 4016d8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4016c2:	4b09      	ldr	r3, [pc, #36]	; (4016e8 <_sbrk+0x2c>)
  4016c4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4016c6:	181a      	adds	r2, r3, r0
  4016c8:	4908      	ldr	r1, [pc, #32]	; (4016ec <_sbrk+0x30>)
  4016ca:	4291      	cmp	r1, r2
  4016cc:	db08      	blt.n	4016e0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4016ce:	4610      	mov	r0, r2
  4016d0:	4a05      	ldr	r2, [pc, #20]	; (4016e8 <_sbrk+0x2c>)
  4016d2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4016d4:	4618      	mov	r0, r3
  4016d6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4016d8:	4a05      	ldr	r2, [pc, #20]	; (4016f0 <_sbrk+0x34>)
  4016da:	4b03      	ldr	r3, [pc, #12]	; (4016e8 <_sbrk+0x2c>)
  4016dc:	601a      	str	r2, [r3, #0]
  4016de:	e7f0      	b.n	4016c2 <_sbrk+0x6>
		return (caddr_t) -1;	
  4016e0:	f04f 30ff 	mov.w	r0, #4294967295
}
  4016e4:	4770      	bx	lr
  4016e6:	bf00      	nop
  4016e8:	200008f4 	.word	0x200008f4
  4016ec:	2001fffc 	.word	0x2001fffc
  4016f0:	2000fe40 	.word	0x2000fe40

004016f4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4016f4:	f04f 30ff 	mov.w	r0, #4294967295
  4016f8:	4770      	bx	lr

004016fa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4016fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4016fe:	604b      	str	r3, [r1, #4]

	return 0;
}
  401700:	2000      	movs	r0, #0
  401702:	4770      	bx	lr

00401704 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401704:	2000      	movs	r0, #0
  401706:	4770      	bx	lr

00401708 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  401708:	b500      	push	{lr}
  40170a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  40170c:	2201      	movs	r2, #1
  40170e:	f10d 0107 	add.w	r1, sp, #7
  401712:	4810      	ldr	r0, [pc, #64]	; (401754 <USART0_Handler+0x4c>)
  401714:	4b10      	ldr	r3, [pc, #64]	; (401758 <USART0_Handler+0x50>)
  401716:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401718:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40171a:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  40171e:	2200      	movs	r2, #0
  401720:	4b0e      	ldr	r3, [pc, #56]	; (40175c <USART0_Handler+0x54>)
  401722:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  401724:	4b0e      	ldr	r3, [pc, #56]	; (401760 <USART0_Handler+0x58>)
  401726:	781b      	ldrb	r3, [r3, #0]
  401728:	f89d 1007 	ldrb.w	r1, [sp, #7]
  40172c:	4a0d      	ldr	r2, [pc, #52]	; (401764 <USART0_Handler+0x5c>)
  40172e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  401730:	2b9b      	cmp	r3, #155	; 0x9b
  401732:	d00b      	beq.n	40174c <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  401734:	3301      	adds	r3, #1
  401736:	4a0a      	ldr	r2, [pc, #40]	; (401760 <USART0_Handler+0x58>)
  401738:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  40173a:	2201      	movs	r2, #1
  40173c:	4b07      	ldr	r3, [pc, #28]	; (40175c <USART0_Handler+0x54>)
  40173e:	701a      	strb	r2, [r3, #0]
  401740:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401744:	b662      	cpsie	i
}
  401746:	b003      	add	sp, #12
  401748:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  40174c:	2200      	movs	r2, #0
  40174e:	4b04      	ldr	r3, [pc, #16]	; (401760 <USART0_Handler+0x58>)
  401750:	701a      	strb	r2, [r3, #0]
  401752:	e7f2      	b.n	40173a <USART0_Handler+0x32>
  401754:	400a0000 	.word	0x400a0000
  401758:	00400c2d 	.word	0x00400c2d
  40175c:	20000002 	.word	0x20000002
  401760:	20000994 	.word	0x20000994
  401764:	200008f8 	.word	0x200008f8

00401768 <addSampleCollector>:



void addSampleCollector(uint16_t sample){
	
	if (bufferIndexCollector<buffersize)
  401768:	4b07      	ldr	r3, [pc, #28]	; (401788 <addSampleCollector+0x20>)
  40176a:	881b      	ldrh	r3, [r3, #0]
  40176c:	f242 028d 	movw	r2, #8333	; 0x208d
  401770:	4293      	cmp	r3, r2
  401772:	d807      	bhi.n	401784 <addSampleCollector+0x1c>
	{
		afec_buffer_collector[bufferIndexCollector]= sample;
  401774:	4a05      	ldr	r2, [pc, #20]	; (40178c <addSampleCollector+0x24>)
  401776:	6812      	ldr	r2, [r2, #0]
  401778:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
		bufferIndexCollector++;
  40177c:	4a02      	ldr	r2, [pc, #8]	; (401788 <addSampleCollector+0x20>)
  40177e:	8813      	ldrh	r3, [r2, #0]
  401780:	3301      	adds	r3, #1
  401782:	8013      	strh	r3, [r2, #0]
  401784:	4770      	bx	lr
  401786:	bf00      	nop
  401788:	2000ccec 	.word	0x2000ccec
  40178c:	20000008 	.word	0x20000008

00401790 <switchBuffer>:
	*y=temp;
}

volatile void switchBuffer(void){
	
	buffersFilled++;
  401790:	4b0e      	ldr	r3, [pc, #56]	; (4017cc <switchBuffer+0x3c>)
  401792:	881b      	ldrh	r3, [r3, #0]
  401794:	3301      	adds	r3, #1
  401796:	b29b      	uxth	r3, r3
	if (buffersFilled>16)
  401798:	2b10      	cmp	r3, #16
  40179a:	d80d      	bhi.n	4017b8 <switchBuffer+0x28>
	buffersFilled++;
  40179c:	4a0b      	ldr	r2, [pc, #44]	; (4017cc <switchBuffer+0x3c>)
  40179e:	8013      	strh	r3, [r2, #0]
	{
		buffersFilled=0; 
		swap(&algorithm_buffer, &transmit_buffer);
	} 
	
	bufferIndexCollector=0;
  4017a0:	2300      	movs	r3, #0
  4017a2:	4a0b      	ldr	r2, [pc, #44]	; (4017d0 <switchBuffer+0x40>)
  4017a4:	8013      	strh	r3, [r2, #0]
	bufferIndexFiducial=0;
  4017a6:	4a0b      	ldr	r2, [pc, #44]	; (4017d4 <switchBuffer+0x44>)
  4017a8:	8013      	strh	r3, [r2, #0]
	uint16_t* temp = *x;
  4017aa:	4a0b      	ldr	r2, [pc, #44]	; (4017d8 <switchBuffer+0x48>)
  4017ac:	6811      	ldr	r1, [r2, #0]
	*x=*y;
  4017ae:	4b0b      	ldr	r3, [pc, #44]	; (4017dc <switchBuffer+0x4c>)
  4017b0:	6818      	ldr	r0, [r3, #0]
  4017b2:	6010      	str	r0, [r2, #0]
	*y=temp;
  4017b4:	6019      	str	r1, [r3, #0]
  4017b6:	4770      	bx	lr
		buffersFilled=0; 
  4017b8:	2200      	movs	r2, #0
  4017ba:	4b04      	ldr	r3, [pc, #16]	; (4017cc <switchBuffer+0x3c>)
  4017bc:	801a      	strh	r2, [r3, #0]
	uint16_t* temp = *x;
  4017be:	4a07      	ldr	r2, [pc, #28]	; (4017dc <switchBuffer+0x4c>)
  4017c0:	6811      	ldr	r1, [r2, #0]
	*x=*y;
  4017c2:	4b07      	ldr	r3, [pc, #28]	; (4017e0 <switchBuffer+0x50>)
  4017c4:	6818      	ldr	r0, [r3, #0]
  4017c6:	6010      	str	r0, [r2, #0]
	*y=temp;
  4017c8:	6019      	str	r1, [r3, #0]
  4017ca:	e7e9      	b.n	4017a0 <switchBuffer+0x10>
  4017cc:	2000ccf0 	.word	0x2000ccf0
  4017d0:	2000ccec 	.word	0x2000ccec
  4017d4:	2000ccee 	.word	0x2000ccee
  4017d8:	20000008 	.word	0x20000008
  4017dc:	2000000c 	.word	0x2000000c
  4017e0:	20000010 	.word	0x20000010

004017e4 <cycleEnded>:
	swap(&afec_buffer_collector, &algorithm_buffer);
	
}


void cycleEnded(void){
  4017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	if (bufferIndexCollector < buffersize)
  4017e6:	4b0a      	ldr	r3, [pc, #40]	; (401810 <cycleEnded+0x2c>)
  4017e8:	881b      	ldrh	r3, [r3, #0]
  4017ea:	f242 028d 	movw	r2, #8333	; 0x208d
  4017ee:	4293      	cmp	r3, r2
  4017f0:	d80a      	bhi.n	401808 <cycleEnded+0x24>
	{
		for (int i=bufferIndexCollector;i<buffersize;i++)
  4017f2:	461c      	mov	r4, r3
  4017f4:	dc08      	bgt.n	401808 <cycleEnded+0x24>
		{
			addSampleCollector(0);
  4017f6:	2700      	movs	r7, #0
  4017f8:	4e06      	ldr	r6, [pc, #24]	; (401814 <cycleEnded+0x30>)
		for (int i=bufferIndexCollector;i<buffersize;i++)
  4017fa:	f242 058e 	movw	r5, #8334	; 0x208e
			addSampleCollector(0);
  4017fe:	4638      	mov	r0, r7
  401800:	47b0      	blx	r6
		for (int i=bufferIndexCollector;i<buffersize;i++)
  401802:	3401      	adds	r4, #1
  401804:	42ac      	cmp	r4, r5
  401806:	d1fa      	bne.n	4017fe <cycleEnded+0x1a>
		}
	} 
	
	switchBuffer();
  401808:	4b03      	ldr	r3, [pc, #12]	; (401818 <cycleEnded+0x34>)
  40180a:	4798      	blx	r3
  40180c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40180e:	bf00      	nop
  401810:	2000ccec 	.word	0x2000ccec
  401814:	00401769 	.word	0x00401769
  401818:	00401791 	.word	0x00401791

0040181c <collector_data_ready>:


/* AFEC0 interrupt callback function. */

static void collector_data_ready(void)
{
  40181c:	b508      	push	{r3, lr}
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  40181e:	4b04      	ldr	r3, [pc, #16]	; (401830 <collector_data_ready+0x14>)
  401820:	6a18      	ldr	r0, [r3, #32]
	collector_sample_data = afec_get_latest_value(AFEC0);										// Obtain latest sample from COLLECTOR signal (EXT3 - pin4 (ch6))
  401822:	b280      	uxth	r0, r0
  401824:	4b03      	ldr	r3, [pc, #12]	; (401834 <collector_data_ready+0x18>)
  401826:	8018      	strh	r0, [r3, #0]
	addSampleCollector(collector_sample_data);													// Add the sample to the collector signal buffer
  401828:	4b03      	ldr	r3, [pc, #12]	; (401838 <collector_data_ready+0x1c>)
  40182a:	4798      	blx	r3
  40182c:	bd08      	pop	{r3, pc}
  40182e:	bf00      	nop
  401830:	400b0000 	.word	0x400b0000
  401834:	2000ccf2 	.word	0x2000ccf2
  401838:	00401769 	.word	0x00401769

0040183c <ACC_Handler>:
{
  40183c:	b570      	push	{r4, r5, r6, lr}
  40183e:	b084      	sub	sp, #16
	triggerOffset = config[0];										// Obtain the trigger offset from configuration array
  401840:	4b35      	ldr	r3, [pc, #212]	; (401918 <ACC_Handler+0xdc>)
  401842:	781b      	ldrb	r3, [r3, #0]
	if (triggerOffset > 67) triggerOffset = 67;
  401844:	2b43      	cmp	r3, #67	; 0x43
  401846:	d809      	bhi.n	40185c <ACC_Handler+0x20>
	triggerOffset = config[0];										// Obtain the trigger offset from configuration array
  401848:	4a34      	ldr	r2, [pc, #208]	; (40191c <ACC_Handler+0xe0>)
  40184a:	7013      	strb	r3, [r2, #0]
	ul_status = acc_get_interrupt_status(ACC);
  40184c:	4834      	ldr	r0, [pc, #208]	; (401920 <ACC_Handler+0xe4>)
  40184e:	4b35      	ldr	r3, [pc, #212]	; (401924 <ACC_Handler+0xe8>)
  401850:	4798      	blx	r3
	if ((ul_status & ACC_ISR_CE) == ACC_ISR_CE) {
  401852:	f010 0f01 	tst.w	r0, #1
  401856:	d105      	bne.n	401864 <ACC_Handler+0x28>
}
  401858:	b004      	add	sp, #16
  40185a:	bd70      	pop	{r4, r5, r6, pc}
	if (triggerOffset > 67) triggerOffset = 67;
  40185c:	2243      	movs	r2, #67	; 0x43
  40185e:	4b2f      	ldr	r3, [pc, #188]	; (40191c <ACC_Handler+0xe0>)
  401860:	701a      	strb	r2, [r3, #0]
  401862:	e7f3      	b.n	40184c <ACC_Handler+0x10>
		if (acc_get_comparison_result(ACC)) {
  401864:	482e      	ldr	r0, [pc, #184]	; (401920 <ACC_Handler+0xe4>)
  401866:	4b30      	ldr	r3, [pc, #192]	; (401928 <ACC_Handler+0xec>)
  401868:	4798      	blx	r3
  40186a:	2800      	cmp	r0, #0
  40186c:	d04b      	beq.n	401906 <ACC_Handler+0xca>
			if(!triggered){
  40186e:	4b2f      	ldr	r3, [pc, #188]	; (40192c <ACC_Handler+0xf0>)
  401870:	781b      	ldrb	r3, [r3, #0]
  401872:	2b00      	cmp	r3, #0
  401874:	d1f0      	bne.n	401858 <ACC_Handler+0x1c>
				triggered= true;
  401876:	2301      	movs	r3, #1
  401878:	4a2c      	ldr	r2, [pc, #176]	; (40192c <ACC_Handler+0xf0>)
  40187a:	7013      	strb	r3, [r2, #0]
				fullBuffer=true;
  40187c:	4a2c      	ldr	r2, [pc, #176]	; (401930 <ACC_Handler+0xf4>)
  40187e:	7013      	strb	r3, [r2, #0]
				if(triggerOffset==0){
  401880:	4b26      	ldr	r3, [pc, #152]	; (40191c <ACC_Handler+0xe0>)
  401882:	781a      	ldrb	r2, [r3, #0]
  401884:	b932      	cbnz	r2, 401894 <ACC_Handler+0x58>
				tc_start(TC0,0);
  401886:	2100      	movs	r1, #0
  401888:	482a      	ldr	r0, [pc, #168]	; (401934 <ACC_Handler+0xf8>)
  40188a:	4b2b      	ldr	r3, [pc, #172]	; (401938 <ACC_Handler+0xfc>)
  40188c:	4798      	blx	r3
				cycleEnded();
  40188e:	4b2b      	ldr	r3, [pc, #172]	; (40193c <ACC_Handler+0x100>)
  401890:	4798      	blx	r3
  401892:	e7e1      	b.n	401858 <ACC_Handler+0x1c>
/* Configure a delay timer to create the desired phase offset configured by the operator */

static void setDelayTimer(int delayFreq){
	
	uint32_t ul_sysclk = sysclk_get_cpu_hz();											// returns (possibly prescaled) clock frequency
	uint32_t ul_div=0;
  401894:	2100      	movs	r1, #0
  401896:	9102      	str	r1, [sp, #8]
	uint32_t ul_tc_clks=0;
  401898:	ab04      	add	r3, sp, #16
  40189a:	f843 1d04 	str.w	r1, [r3, #-4]!
					setDelayTimer(1000/triggerOffset);						// set the timer frequency base on delay time
  40189e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  4018a2:	fb96 f6f2 	sdiv	r6, r6, r2
	uint32_t counts=0;
	tc_find_mck_divisor(delayFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  4018a6:	4c26      	ldr	r4, [pc, #152]	; (401940 <ACC_Handler+0x104>)
  4018a8:	9400      	str	r4, [sp, #0]
  4018aa:	aa02      	add	r2, sp, #8
  4018ac:	4621      	mov	r1, r4
  4018ae:	4630      	mov	r0, r6
  4018b0:	4d24      	ldr	r5, [pc, #144]	; (401944 <ACC_Handler+0x108>)
  4018b2:	47a8      	blx	r5
	tc_init(TC0,1,ul_tc_clks | TC_CMR_CPCTRG);
  4018b4:	4d1f      	ldr	r5, [pc, #124]	; (401934 <ACC_Handler+0xf8>)
  4018b6:	9a03      	ldr	r2, [sp, #12]
  4018b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4018bc:	2101      	movs	r1, #1
  4018be:	4628      	mov	r0, r5
  4018c0:	4b21      	ldr	r3, [pc, #132]	; (401948 <ACC_Handler+0x10c>)
  4018c2:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/delayFreq;
  4018c4:	9a02      	ldr	r2, [sp, #8]
  4018c6:	fbb4 f2f2 	udiv	r2, r4, r2
	tc_write_rc(TC0,1,counts);
  4018ca:	fbb2 f2f6 	udiv	r2, r2, r6
  4018ce:	2101      	movs	r1, #1
  4018d0:	4628      	mov	r0, r5
  4018d2:	4b1e      	ldr	r3, [pc, #120]	; (40194c <ACC_Handler+0x110>)
  4018d4:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018d6:	4b1e      	ldr	r3, [pc, #120]	; (401950 <ACC_Handler+0x114>)
  4018d8:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
  4018dc:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4018e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4018e4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018e8:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018ec:	601c      	str	r4, [r3, #0]
	
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	NVIC_EnableIRQ((IRQn_Type) ID_TC1);
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
  4018ee:	2210      	movs	r2, #16
  4018f0:	2101      	movs	r1, #1
  4018f2:	4628      	mov	r0, r5
  4018f4:	4b17      	ldr	r3, [pc, #92]	; (401954 <ACC_Handler+0x118>)
  4018f6:	4798      	blx	r3
					tc_start(TC0,1);
  4018f8:	2101      	movs	r1, #1
  4018fa:	4628      	mov	r0, r5
  4018fc:	4b0e      	ldr	r3, [pc, #56]	; (401938 <ACC_Handler+0xfc>)
  4018fe:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401900:	4b15      	ldr	r3, [pc, #84]	; (401958 <ACC_Handler+0x11c>)
  401902:	635c      	str	r4, [r3, #52]	; 0x34
  401904:	e7a8      	b.n	401858 <ACC_Handler+0x1c>
				if(triggered)
  401906:	4b09      	ldr	r3, [pc, #36]	; (40192c <ACC_Handler+0xf0>)
  401908:	781b      	ldrb	r3, [r3, #0]
  40190a:	2b00      	cmp	r3, #0
  40190c:	d0a4      	beq.n	401858 <ACC_Handler+0x1c>
				triggered=false;
  40190e:	2200      	movs	r2, #0
  401910:	4b06      	ldr	r3, [pc, #24]	; (40192c <ACC_Handler+0xf0>)
  401912:	701a      	strb	r2, [r3, #0]
}
  401914:	e7a0      	b.n	401858 <ACC_Handler+0x1c>
  401916:	bf00      	nop
  401918:	200008e8 	.word	0x200008e8
  40191c:	2000ce14 	.word	0x2000ce14
  401920:	400bc000 	.word	0x400bc000
  401924:	00400e45 	.word	0x00400e45
  401928:	00400e2b 	.word	0x00400e2b
  40192c:	2000ccf5 	.word	0x2000ccf5
  401930:	2000ccf4 	.word	0x2000ccf4
  401934:	40090000 	.word	0x40090000
  401938:	0040132f 	.word	0x0040132f
  40193c:	004017e5 	.word	0x004017e5
  401940:	05b8d800 	.word	0x05b8d800
  401944:	00401357 	.word	0x00401357
  401948:	00401315 	.word	0x00401315
  40194c:	0040133f 	.word	0x0040133f
  401950:	e000e100 	.word	0xe000e100
  401954:	00401347 	.word	0x00401347
  401958:	400e1400 	.word	0x400e1400

0040195c <TC1_Handler>:
void TC1_Handler(void){
  40195c:	b510      	push	{r4, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40195e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401962:	4a0e      	ldr	r2, [pc, #56]	; (40199c <TC1_Handler+0x40>)
  401964:	6313      	str	r3, [r2, #48]	; 0x30
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401966:	4a0e      	ldr	r2, [pc, #56]	; (4019a0 <TC1_Handler+0x44>)
  401968:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40196c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401970:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401974:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	tc_disable_interrupt(TC0, 1, TC_IER_CPCS);
  401978:	4c0a      	ldr	r4, [pc, #40]	; (4019a4 <TC1_Handler+0x48>)
  40197a:	2210      	movs	r2, #16
  40197c:	2101      	movs	r1, #1
  40197e:	4620      	mov	r0, r4
  401980:	4b09      	ldr	r3, [pc, #36]	; (4019a8 <TC1_Handler+0x4c>)
  401982:	4798      	blx	r3
	tc_stop(TC0,1);
  401984:	2101      	movs	r1, #1
  401986:	4620      	mov	r0, r4
  401988:	4b08      	ldr	r3, [pc, #32]	; (4019ac <TC1_Handler+0x50>)
  40198a:	4798      	blx	r3
	cycleEnded();
  40198c:	4b08      	ldr	r3, [pc, #32]	; (4019b0 <TC1_Handler+0x54>)
  40198e:	4798      	blx	r3
	tc_start(TC0,0);
  401990:	2100      	movs	r1, #0
  401992:	4620      	mov	r0, r4
  401994:	4b07      	ldr	r3, [pc, #28]	; (4019b4 <TC1_Handler+0x58>)
  401996:	4798      	blx	r3
  401998:	bd10      	pop	{r4, pc}
  40199a:	bf00      	nop
  40199c:	400e1400 	.word	0x400e1400
  4019a0:	e000e100 	.word	0xe000e100
  4019a4:	40090000 	.word	0x40090000
  4019a8:	0040134f 	.word	0x0040134f
  4019ac:	00401337 	.word	0x00401337
  4019b0:	004017e5 	.word	0x004017e5
  4019b4:	0040132f 	.word	0x0040132f

004019b8 <main>:
}

/* Main entry point of the application */

int main (void)
{
  4019b8:	b580      	push	{r7, lr}
  4019ba:	b08c      	sub	sp, #48	; 0x30
	/* Initializations of peripherals */
	
	sysclk_init();
  4019bc:	4b56      	ldr	r3, [pc, #344]	; (401b18 <main+0x160>)
  4019be:	4798      	blx	r3
	board_init();
  4019c0:	4b56      	ldr	r3, [pc, #344]	; (401b1c <main+0x164>)
  4019c2:	4798      	blx	r3
	pdc_uart_initialization();
  4019c4:	4b56      	ldr	r3, [pc, #344]	; (401b20 <main+0x168>)
  4019c6:	4798      	blx	r3
	afec_enable(AFEC0);
  4019c8:	4c56      	ldr	r4, [pc, #344]	; (401b24 <main+0x16c>)
  4019ca:	4620      	mov	r0, r4
  4019cc:	4b56      	ldr	r3, [pc, #344]	; (401b28 <main+0x170>)
  4019ce:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  4019d0:	a805      	add	r0, sp, #20
  4019d2:	4b56      	ldr	r3, [pc, #344]	; (401b2c <main+0x174>)
  4019d4:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4019d6:	a802      	add	r0, sp, #8
  4019d8:	4b55      	ldr	r3, [pc, #340]	; (401b30 <main+0x178>)
  4019da:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  4019dc:	a905      	add	r1, sp, #20
  4019de:	4620      	mov	r0, r4
  4019e0:	4b54      	ldr	r3, [pc, #336]	; (401b34 <main+0x17c>)
  4019e2:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  4019e4:	aa02      	add	r2, sp, #8
  4019e6:	2106      	movs	r1, #6
  4019e8:	4620      	mov	r0, r4
  4019ea:	4b53      	ldr	r3, [pc, #332]	; (401b38 <main+0x180>)
  4019ec:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  4019ee:	2306      	movs	r3, #6
  4019f0:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4019f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4019f6:	66e3      	str	r3, [r4, #108]	; 0x6c
    uint32_t ul_div = 0;
  4019f8:	2700      	movs	r7, #0
  4019fa:	9703      	str	r7, [sp, #12]
	uint32_t ul_tc_clks = 0;
  4019fc:	ae0c      	add	r6, sp, #48	; 0x30
  4019fe:	f846 7d20 	str.w	r7, [r6, #-32]!
	pmc_enable_periph_clk(ID_TC0);														// Enable peripheral clock of timer counter 0
  401a02:	2015      	movs	r0, #21
  401a04:	4d4d      	ldr	r5, [pc, #308]	; (401b3c <main+0x184>)
  401a06:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_TC1);
  401a08:	2016      	movs	r0, #22
  401a0a:	47a8      	blx	r5
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  401a0c:	4d4c      	ldr	r5, [pc, #304]	; (401b40 <main+0x188>)
  401a0e:	9500      	str	r5, [sp, #0]
  401a10:	4633      	mov	r3, r6
  401a12:	aa03      	add	r2, sp, #12
  401a14:	4629      	mov	r1, r5
  401a16:	484b      	ldr	r0, [pc, #300]	; (401b44 <main+0x18c>)
  401a18:	4e4b      	ldr	r6, [pc, #300]	; (401b48 <main+0x190>)
  401a1a:	47b0      	blx	r6
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  401a1c:	4e4b      	ldr	r6, [pc, #300]	; (401b4c <main+0x194>)
  401a1e:	9a04      	ldr	r2, [sp, #16]
  401a20:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  401a24:	4639      	mov	r1, r7
  401a26:	4630      	mov	r0, r6
  401a28:	4b49      	ldr	r3, [pc, #292]	; (401b50 <main+0x198>)
  401a2a:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  401a2c:	9b03      	ldr	r3, [sp, #12]
  401a2e:	fbb5 f3f3 	udiv	r3, r5, r3
  401a32:	4a48      	ldr	r2, [pc, #288]	; (401b54 <main+0x19c>)
  401a34:	fba2 2303 	umull	r2, r3, r2, r3
  401a38:	0c5a      	lsrs	r2, r3, #17
  401a3a:	6172      	str	r2, [r6, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  401a3c:	0c1b      	lsrs	r3, r3, #16
  401a3e:	61f3      	str	r3, [r6, #28]
	reg = afec->AFEC_MR;
  401a40:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  401a42:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  401a46:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  401a4a:	6063      	str	r3, [r4, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401a4c:	2340      	movs	r3, #64	; 0x40
  401a4e:	6163      	str	r3, [r4, #20]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, collector_data_ready, 1);
  401a50:	2301      	movs	r3, #1
  401a52:	4a41      	ldr	r2, [pc, #260]	; (401b58 <main+0x1a0>)
  401a54:	2110      	movs	r1, #16
  401a56:	4620      	mov	r0, r4
  401a58:	4d40      	ldr	r5, [pc, #256]	; (401b5c <main+0x1a4>)
  401a5a:	47a8      	blx	r5
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  401a5c:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  401a5e:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  401a60:	6863      	ldr	r3, [r4, #4]
  401a62:	f013 0f80 	tst.w	r3, #128	; 0x80
  401a66:	d101      	bne.n	401a6c <main+0xb4>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  401a68:	2208      	movs	r2, #8
  401a6a:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  401a6c:	4b2d      	ldr	r3, [pc, #180]	; (401b24 <main+0x16c>)
  401a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  401a70:	2a00      	cmp	r2, #0
  401a72:	dafc      	bge.n	401a6e <main+0xb6>
	pmc_enable_periph_clk(ID_DACC);
  401a74:	2020      	movs	r0, #32
  401a76:	4d31      	ldr	r5, [pc, #196]	; (401b3c <main+0x184>)
  401a78:	47a8      	blx	r5
	dacc_reset(DACC);
  401a7a:	4c39      	ldr	r4, [pc, #228]	; (401b60 <main+0x1a8>)
  401a7c:	4620      	mov	r0, r4
  401a7e:	4b39      	ldr	r3, [pc, #228]	; (401b64 <main+0x1ac>)
  401a80:	4798      	blx	r3
	dacc_disable_trigger(DACC);
  401a82:	4620      	mov	r0, r4
  401a84:	4b38      	ldr	r3, [pc, #224]	; (401b68 <main+0x1b0>)
  401a86:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
  401a88:	2100      	movs	r1, #0
  401a8a:	4620      	mov	r0, r4
  401a8c:	4b37      	ldr	r3, [pc, #220]	; (401b6c <main+0x1b4>)
  401a8e:	4798      	blx	r3
	dacc_set_timing(DACC, 0, 0xf);
  401a90:	220f      	movs	r2, #15
  401a92:	2100      	movs	r1, #0
  401a94:	4620      	mov	r0, r4
  401a96:	4b36      	ldr	r3, [pc, #216]	; (401b70 <main+0x1b8>)
  401a98:	4798      	blx	r3
	dacc_set_channel_selection(DACC, DACC_CHANNEL_0);
  401a9a:	2100      	movs	r1, #0
  401a9c:	4620      	mov	r0, r4
  401a9e:	4b35      	ldr	r3, [pc, #212]	; (401b74 <main+0x1bc>)
  401aa0:	4798      	blx	r3
	dacc_enable_channel(DACC, DACC_CHANNEL_0);
  401aa2:	2100      	movs	r1, #0
  401aa4:	4620      	mov	r0, r4
  401aa6:	4b34      	ldr	r3, [pc, #208]	; (401b78 <main+0x1c0>)
  401aa8:	4798      	blx	r3
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  401aaa:	f44f 7185 	mov.w	r1, #266	; 0x10a
  401aae:	4620      	mov	r0, r4
  401ab0:	4b32      	ldr	r3, [pc, #200]	; (401b7c <main+0x1c4>)
  401ab2:	4798      	blx	r3
	dacc_write_conversion_data(DACC, 3100);
  401ab4:	f640 411c 	movw	r1, #3100	; 0xc1c
  401ab8:	4620      	mov	r0, r4
  401aba:	4b31      	ldr	r3, [pc, #196]	; (401b80 <main+0x1c8>)
  401abc:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401abe:	4b31      	ldr	r3, [pc, #196]	; (401b84 <main+0x1cc>)
  401ac0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401ac4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ac6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	configure_afec();
	configureDACC();
	ioport_set_pin_dir(delayPin,IOPORT_DIR_OUTPUT);
	pmc_enable_periph_clk(ID_ACC);
  401aca:	2021      	movs	r0, #33	; 0x21
  401acc:	47a8      	blx	r5
	acc_init(ACC, ACC_MR_SELPLUS_AD7, ACC_MR_SELMINUS_DAC0,			// set pin AFEC1 AD1 (EXT1 pin 4) as + comparator and DAC0 as -
  401ace:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
  401ad2:	2300      	movs	r3, #0
  401ad4:	9300      	str	r3, [sp, #0]
  401ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401ada:	2202      	movs	r2, #2
  401adc:	2170      	movs	r1, #112	; 0x70
  401ade:	4620      	mov	r0, r4
  401ae0:	4d29      	ldr	r5, [pc, #164]	; (401b88 <main+0x1d0>)
  401ae2:	47a8      	blx	r5
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ae4:	2202      	movs	r2, #2
  401ae6:	4b29      	ldr	r3, [pc, #164]	; (401b8c <main+0x1d4>)
  401ae8:	605a      	str	r2, [r3, #4]
	ACC_MR_EDGETYP_ANY, ACC_MR_INV_DIS);
	NVIC_EnableIRQ(ACC_IRQn);
	acc_enable_interrupt(ACC);	
  401aea:	4620      	mov	r0, r4
  401aec:	4b28      	ldr	r3, [pc, #160]	; (401b90 <main+0x1d8>)
  401aee:	4798      	blx	r3
	
	/* Main event loop */
	
	while (1) {
		
		if(fullBuffer){
  401af0:	4c28      	ldr	r4, [pc, #160]	; (401b94 <main+0x1dc>)
			
			fullBuffer=false;
			
			if (config[2]!= 0) send_beam_parameters();
  401af2:	4d29      	ldr	r5, [pc, #164]	; (401b98 <main+0x1e0>)
  401af4:	4e29      	ldr	r6, [pc, #164]	; (401b9c <main+0x1e4>)
			if (config[3]!= 0) send_cycle_plot();
  401af6:	4f2a      	ldr	r7, [pc, #168]	; (401ba0 <main+0x1e8>)
  401af8:	e001      	b.n	401afe <main+0x146>
  401afa:	78eb      	ldrb	r3, [r5, #3]
  401afc:	b94b      	cbnz	r3, 401b12 <main+0x15a>
		if(fullBuffer){
  401afe:	7823      	ldrb	r3, [r4, #0]
  401b00:	2b00      	cmp	r3, #0
  401b02:	d0fc      	beq.n	401afe <main+0x146>
			fullBuffer=false;
  401b04:	2300      	movs	r3, #0
  401b06:	7023      	strb	r3, [r4, #0]
			if (config[2]!= 0) send_beam_parameters();
  401b08:	78ab      	ldrb	r3, [r5, #2]
  401b0a:	2b00      	cmp	r3, #0
  401b0c:	d0f5      	beq.n	401afa <main+0x142>
  401b0e:	47b0      	blx	r6
  401b10:	e7f3      	b.n	401afa <main+0x142>
			if (config[3]!= 0) send_cycle_plot();
  401b12:	47b8      	blx	r7
  401b14:	e7f3      	b.n	401afe <main+0x146>
  401b16:	bf00      	nop
  401b18:	00400bc5 	.word	0x00400bc5
  401b1c:	00400d59 	.word	0x00400d59
  401b20:	00400ac9 	.word	0x00400ac9
  401b24:	400b0000 	.word	0x400b0000
  401b28:	004010dd 	.word	0x004010dd
  401b2c:	00400f15 	.word	0x00400f15
  401b30:	00400f45 	.word	0x00400f45
  401b34:	00400f51 	.word	0x00400f51
  401b38:	00400ee5 	.word	0x00400ee5
  401b3c:	004012c1 	.word	0x004012c1
  401b40:	05b8d800 	.word	0x05b8d800
  401b44:	0003d090 	.word	0x0003d090
  401b48:	00401357 	.word	0x00401357
  401b4c:	40090000 	.word	0x40090000
  401b50:	00401315 	.word	0x00401315
  401b54:	431bde83 	.word	0x431bde83
  401b58:	0040181d 	.word	0x0040181d
  401b5c:	0040105d 	.word	0x0040105d
  401b60:	400b8000 	.word	0x400b8000
  401b64:	00401141 	.word	0x00401141
  401b68:	00401147 	.word	0x00401147
  401b6c:	00401151 	.word	0x00401151
  401b70:	00401195 	.word	0x00401195
  401b74:	0040117d 	.word	0x0040117d
  401b78:	004011bd 	.word	0x004011bd
  401b7c:	004011d1 	.word	0x004011d1
  401b80:	00401179 	.word	0x00401179
  401b84:	400e1400 	.word	0x400e1400
  401b88:	00400df1 	.word	0x00400df1
  401b8c:	e000e100 	.word	0xe000e100
  401b90:	00400e3f 	.word	0x00400e3f
  401b94:	2000ccf4 	.word	0x2000ccf4
  401b98:	200008e8 	.word	0x200008e8
  401b9c:	00400a2d 	.word	0x00400a2d
  401ba0:	00400a05 	.word	0x00400a05

00401ba4 <pow>:
  401ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ba8:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 401e9c <pow+0x2f8>
  401bac:	b08d      	sub	sp, #52	; 0x34
  401bae:	4606      	mov	r6, r0
  401bb0:	460f      	mov	r7, r1
  401bb2:	4614      	mov	r4, r2
  401bb4:	461d      	mov	r5, r3
  401bb6:	f000 f9d3 	bl	401f60 <__ieee754_pow>
  401bba:	f999 8000 	ldrsb.w	r8, [r9]
  401bbe:	f1b8 3fff 	cmp.w	r8, #4294967295
  401bc2:	e9cd 0100 	strd	r0, r1, [sp]
  401bc6:	d036      	beq.n	401c36 <pow+0x92>
  401bc8:	4622      	mov	r2, r4
  401bca:	462b      	mov	r3, r5
  401bcc:	4620      	mov	r0, r4
  401bce:	4629      	mov	r1, r5
  401bd0:	f001 fd3e 	bl	403650 <__aeabi_dcmpun>
  401bd4:	4683      	mov	fp, r0
  401bd6:	bb70      	cbnz	r0, 401c36 <pow+0x92>
  401bd8:	4632      	mov	r2, r6
  401bda:	463b      	mov	r3, r7
  401bdc:	4630      	mov	r0, r6
  401bde:	4639      	mov	r1, r7
  401be0:	f001 fd36 	bl	403650 <__aeabi_dcmpun>
  401be4:	2200      	movs	r2, #0
  401be6:	4682      	mov	sl, r0
  401be8:	2300      	movs	r3, #0
  401bea:	2800      	cmp	r0, #0
  401bec:	f040 80a0 	bne.w	401d30 <pow+0x18c>
  401bf0:	4630      	mov	r0, r6
  401bf2:	4639      	mov	r1, r7
  401bf4:	f001 fcfa 	bl	4035ec <__aeabi_dcmpeq>
  401bf8:	b310      	cbz	r0, 401c40 <pow+0x9c>
  401bfa:	2200      	movs	r2, #0
  401bfc:	2300      	movs	r3, #0
  401bfe:	4620      	mov	r0, r4
  401c00:	4629      	mov	r1, r5
  401c02:	f001 fcf3 	bl	4035ec <__aeabi_dcmpeq>
  401c06:	4683      	mov	fp, r0
  401c08:	2800      	cmp	r0, #0
  401c0a:	d06a      	beq.n	401ce2 <pow+0x13e>
  401c0c:	2201      	movs	r2, #1
  401c0e:	4b9c      	ldr	r3, [pc, #624]	; (401e80 <pow+0x2dc>)
  401c10:	9202      	str	r2, [sp, #8]
  401c12:	2100      	movs	r1, #0
  401c14:	2200      	movs	r2, #0
  401c16:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  401c1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401c1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401c22:	e9cd 1208 	strd	r1, r2, [sp, #32]
  401c26:	9303      	str	r3, [sp, #12]
  401c28:	f1b8 0f00 	cmp.w	r8, #0
  401c2c:	d045      	beq.n	401cba <pow+0x116>
  401c2e:	4c95      	ldr	r4, [pc, #596]	; (401e84 <pow+0x2e0>)
  401c30:	2300      	movs	r3, #0
  401c32:	e9cd 3400 	strd	r3, r4, [sp]
  401c36:	e9dd 0100 	ldrd	r0, r1, [sp]
  401c3a:	b00d      	add	sp, #52	; 0x34
  401c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c40:	e9dd 0100 	ldrd	r0, r1, [sp]
  401c44:	f000 ff92 	bl	402b6c <finite>
  401c48:	4680      	mov	r8, r0
  401c4a:	2800      	cmp	r0, #0
  401c4c:	f000 808b 	beq.w	401d66 <pow+0x1c2>
  401c50:	f04f 0a00 	mov.w	sl, #0
  401c54:	f04f 0b00 	mov.w	fp, #0
  401c58:	4652      	mov	r2, sl
  401c5a:	465b      	mov	r3, fp
  401c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
  401c60:	f001 fcc4 	bl	4035ec <__aeabi_dcmpeq>
  401c64:	2800      	cmp	r0, #0
  401c66:	d0e6      	beq.n	401c36 <pow+0x92>
  401c68:	4630      	mov	r0, r6
  401c6a:	4639      	mov	r1, r7
  401c6c:	f000 ff7e 	bl	402b6c <finite>
  401c70:	2800      	cmp	r0, #0
  401c72:	d0e0      	beq.n	401c36 <pow+0x92>
  401c74:	4620      	mov	r0, r4
  401c76:	4629      	mov	r1, r5
  401c78:	f000 ff78 	bl	402b6c <finite>
  401c7c:	2800      	cmp	r0, #0
  401c7e:	d0da      	beq.n	401c36 <pow+0x92>
  401c80:	f999 3000 	ldrsb.w	r3, [r9]
  401c84:	4a7e      	ldr	r2, [pc, #504]	; (401e80 <pow+0x2dc>)
  401c86:	9203      	str	r2, [sp, #12]
  401c88:	2104      	movs	r1, #4
  401c8a:	2200      	movs	r2, #0
  401c8c:	2b02      	cmp	r3, #2
  401c8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401c92:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401c96:	e9cd ab08 	strd	sl, fp, [sp, #32]
  401c9a:	9102      	str	r1, [sp, #8]
  401c9c:	920a      	str	r2, [sp, #40]	; 0x28
  401c9e:	d003      	beq.n	401ca8 <pow+0x104>
  401ca0:	a802      	add	r0, sp, #8
  401ca2:	f000 ff69 	bl	402b78 <matherr>
  401ca6:	b968      	cbnz	r0, 401cc4 <pow+0x120>
  401ca8:	f001 ff06 	bl	403ab8 <__errno>
  401cac:	2322      	movs	r3, #34	; 0x22
  401cae:	6003      	str	r3, [r0, #0]
  401cb0:	e008      	b.n	401cc4 <pow+0x120>
  401cb2:	2300      	movs	r3, #0
  401cb4:	2400      	movs	r4, #0
  401cb6:	e9cd 3408 	strd	r3, r4, [sp, #32]
  401cba:	a802      	add	r0, sp, #8
  401cbc:	f000 ff5c 	bl	402b78 <matherr>
  401cc0:	2800      	cmp	r0, #0
  401cc2:	d030      	beq.n	401d26 <pow+0x182>
  401cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401cc6:	b11b      	cbz	r3, 401cd0 <pow+0x12c>
  401cc8:	f001 fef6 	bl	403ab8 <__errno>
  401ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401cce:	6003      	str	r3, [r0, #0]
  401cd0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
  401cd4:	e9cd 3400 	strd	r3, r4, [sp]
  401cd8:	e9dd 0100 	ldrd	r0, r1, [sp]
  401cdc:	b00d      	add	sp, #52	; 0x34
  401cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ce2:	4620      	mov	r0, r4
  401ce4:	4629      	mov	r1, r5
  401ce6:	f000 ff41 	bl	402b6c <finite>
  401cea:	2800      	cmp	r0, #0
  401cec:	d0a3      	beq.n	401c36 <pow+0x92>
  401cee:	2200      	movs	r2, #0
  401cf0:	2300      	movs	r3, #0
  401cf2:	4620      	mov	r0, r4
  401cf4:	4629      	mov	r1, r5
  401cf6:	f001 fc83 	bl	403600 <__aeabi_dcmplt>
  401cfa:	2800      	cmp	r0, #0
  401cfc:	d09b      	beq.n	401c36 <pow+0x92>
  401cfe:	f999 3000 	ldrsb.w	r3, [r9]
  401d02:	4a5f      	ldr	r2, [pc, #380]	; (401e80 <pow+0x2dc>)
  401d04:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401d08:	2101      	movs	r1, #1
  401d0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401d0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401d12:	9102      	str	r1, [sp, #8]
  401d14:	9203      	str	r2, [sp, #12]
  401d16:	2b00      	cmp	r3, #0
  401d18:	d0cb      	beq.n	401cb2 <pow+0x10e>
  401d1a:	495b      	ldr	r1, [pc, #364]	; (401e88 <pow+0x2e4>)
  401d1c:	2000      	movs	r0, #0
  401d1e:	2b02      	cmp	r3, #2
  401d20:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401d24:	d1c9      	bne.n	401cba <pow+0x116>
  401d26:	f001 fec7 	bl	403ab8 <__errno>
  401d2a:	2321      	movs	r3, #33	; 0x21
  401d2c:	6003      	str	r3, [r0, #0]
  401d2e:	e7c9      	b.n	401cc4 <pow+0x120>
  401d30:	4620      	mov	r0, r4
  401d32:	4629      	mov	r1, r5
  401d34:	f001 fc5a 	bl	4035ec <__aeabi_dcmpeq>
  401d38:	2800      	cmp	r0, #0
  401d3a:	f43f af7c 	beq.w	401c36 <pow+0x92>
  401d3e:	4b51      	ldr	r3, [pc, #324]	; (401e84 <pow+0x2e0>)
  401d40:	494f      	ldr	r1, [pc, #316]	; (401e80 <pow+0x2dc>)
  401d42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401d46:	2001      	movs	r0, #1
  401d48:	2200      	movs	r2, #0
  401d4a:	f1b8 0f02 	cmp.w	r8, #2
  401d4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401d52:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401d56:	9002      	str	r0, [sp, #8]
  401d58:	9103      	str	r1, [sp, #12]
  401d5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401d5e:	d1ac      	bne.n	401cba <pow+0x116>
  401d60:	e9cd 2300 	strd	r2, r3, [sp]
  401d64:	e767      	b.n	401c36 <pow+0x92>
  401d66:	4630      	mov	r0, r6
  401d68:	4639      	mov	r1, r7
  401d6a:	f000 feff 	bl	402b6c <finite>
  401d6e:	2800      	cmp	r0, #0
  401d70:	f43f af6e 	beq.w	401c50 <pow+0xac>
  401d74:	4620      	mov	r0, r4
  401d76:	4629      	mov	r1, r5
  401d78:	f000 fef8 	bl	402b6c <finite>
  401d7c:	2800      	cmp	r0, #0
  401d7e:	f43f af67 	beq.w	401c50 <pow+0xac>
  401d82:	e9dd 2300 	ldrd	r2, r3, [sp]
  401d86:	4610      	mov	r0, r2
  401d88:	4619      	mov	r1, r3
  401d8a:	f001 fc61 	bl	403650 <__aeabi_dcmpun>
  401d8e:	2800      	cmp	r0, #0
  401d90:	d158      	bne.n	401e44 <pow+0x2a0>
  401d92:	2303      	movs	r3, #3
  401d94:	f999 8000 	ldrsb.w	r8, [r9]
  401d98:	9302      	str	r3, [sp, #8]
  401d9a:	4b39      	ldr	r3, [pc, #228]	; (401e80 <pow+0x2dc>)
  401d9c:	900a      	str	r0, [sp, #40]	; 0x28
  401d9e:	9303      	str	r3, [sp, #12]
  401da0:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401da4:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401da8:	2200      	movs	r2, #0
  401daa:	2300      	movs	r3, #0
  401dac:	4630      	mov	r0, r6
  401dae:	4639      	mov	r1, r7
  401db0:	f1b8 0f00 	cmp.w	r8, #0
  401db4:	d126      	bne.n	401e04 <pow+0x260>
  401db6:	4f35      	ldr	r7, [pc, #212]	; (401e8c <pow+0x2e8>)
  401db8:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
  401dbc:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401dc0:	f001 fc1e 	bl	403600 <__aeabi_dcmplt>
  401dc4:	2800      	cmp	r0, #0
  401dc6:	f43f af6b 	beq.w	401ca0 <pow+0xfc>
  401dca:	2200      	movs	r2, #0
  401dcc:	4b30      	ldr	r3, [pc, #192]	; (401e90 <pow+0x2ec>)
  401dce:	4620      	mov	r0, r4
  401dd0:	4629      	mov	r1, r5
  401dd2:	f001 f9a3 	bl	40311c <__aeabi_dmul>
  401dd6:	4604      	mov	r4, r0
  401dd8:	460d      	mov	r5, r1
  401dda:	f000 fed5 	bl	402b88 <rint>
  401dde:	4602      	mov	r2, r0
  401de0:	460b      	mov	r3, r1
  401de2:	4620      	mov	r0, r4
  401de4:	4629      	mov	r1, r5
  401de6:	f001 fc01 	bl	4035ec <__aeabi_dcmpeq>
  401dea:	bb40      	cbnz	r0, 401e3e <pow+0x29a>
  401dec:	4b29      	ldr	r3, [pc, #164]	; (401e94 <pow+0x2f0>)
  401dee:	f999 8000 	ldrsb.w	r8, [r9]
  401df2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  401df6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401dfa:	f1b8 0f02 	cmp.w	r8, #2
  401dfe:	f47f af4f 	bne.w	401ca0 <pow+0xfc>
  401e02:	e751      	b.n	401ca8 <pow+0x104>
  401e04:	4f24      	ldr	r7, [pc, #144]	; (401e98 <pow+0x2f4>)
  401e06:	2600      	movs	r6, #0
  401e08:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401e0c:	f001 fbf8 	bl	403600 <__aeabi_dcmplt>
  401e10:	2800      	cmp	r0, #0
  401e12:	d0f2      	beq.n	401dfa <pow+0x256>
  401e14:	2200      	movs	r2, #0
  401e16:	4b1e      	ldr	r3, [pc, #120]	; (401e90 <pow+0x2ec>)
  401e18:	4620      	mov	r0, r4
  401e1a:	4629      	mov	r1, r5
  401e1c:	f001 f97e 	bl	40311c <__aeabi_dmul>
  401e20:	4604      	mov	r4, r0
  401e22:	460d      	mov	r5, r1
  401e24:	f000 feb0 	bl	402b88 <rint>
  401e28:	4602      	mov	r2, r0
  401e2a:	460b      	mov	r3, r1
  401e2c:	4620      	mov	r0, r4
  401e2e:	4629      	mov	r1, r5
  401e30:	f001 fbdc 	bl	4035ec <__aeabi_dcmpeq>
  401e34:	b918      	cbnz	r0, 401e3e <pow+0x29a>
  401e36:	4b14      	ldr	r3, [pc, #80]	; (401e88 <pow+0x2e4>)
  401e38:	2200      	movs	r2, #0
  401e3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401e3e:	f999 8000 	ldrsb.w	r8, [r9]
  401e42:	e7da      	b.n	401dfa <pow+0x256>
  401e44:	f999 9000 	ldrsb.w	r9, [r9]
  401e48:	4b0d      	ldr	r3, [pc, #52]	; (401e80 <pow+0x2dc>)
  401e4a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  401e4e:	2201      	movs	r2, #1
  401e50:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401e54:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401e58:	9202      	str	r2, [sp, #8]
  401e5a:	9303      	str	r3, [sp, #12]
  401e5c:	f1b9 0f00 	cmp.w	r9, #0
  401e60:	f43f af27 	beq.w	401cb2 <pow+0x10e>
  401e64:	2200      	movs	r2, #0
  401e66:	2300      	movs	r3, #0
  401e68:	4610      	mov	r0, r2
  401e6a:	4619      	mov	r1, r3
  401e6c:	f001 fa80 	bl	403370 <__aeabi_ddiv>
  401e70:	f1b9 0f02 	cmp.w	r9, #2
  401e74:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401e78:	f43f af55 	beq.w	401d26 <pow+0x182>
  401e7c:	e71d      	b.n	401cba <pow+0x116>
  401e7e:	bf00      	nop
  401e80:	00404bbc 	.word	0x00404bbc
  401e84:	3ff00000 	.word	0x3ff00000
  401e88:	fff00000 	.word	0xfff00000
  401e8c:	47efffff 	.word	0x47efffff
  401e90:	3fe00000 	.word	0x3fe00000
  401e94:	c7efffff 	.word	0xc7efffff
  401e98:	7ff00000 	.word	0x7ff00000
  401e9c:	20000014 	.word	0x20000014

00401ea0 <sqrt>:
  401ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ea4:	b08b      	sub	sp, #44	; 0x2c
  401ea6:	4604      	mov	r4, r0
  401ea8:	460d      	mov	r5, r1
  401eaa:	f000 fd9f 	bl	4029ec <__ieee754_sqrt>
  401eae:	4b29      	ldr	r3, [pc, #164]	; (401f54 <sqrt+0xb4>)
  401eb0:	f993 a000 	ldrsb.w	sl, [r3]
  401eb4:	f1ba 3fff 	cmp.w	sl, #4294967295
  401eb8:	4606      	mov	r6, r0
  401eba:	460f      	mov	r7, r1
  401ebc:	d012      	beq.n	401ee4 <sqrt+0x44>
  401ebe:	4622      	mov	r2, r4
  401ec0:	462b      	mov	r3, r5
  401ec2:	4620      	mov	r0, r4
  401ec4:	4629      	mov	r1, r5
  401ec6:	f001 fbc3 	bl	403650 <__aeabi_dcmpun>
  401eca:	4683      	mov	fp, r0
  401ecc:	b950      	cbnz	r0, 401ee4 <sqrt+0x44>
  401ece:	f04f 0800 	mov.w	r8, #0
  401ed2:	f04f 0900 	mov.w	r9, #0
  401ed6:	4642      	mov	r2, r8
  401ed8:	464b      	mov	r3, r9
  401eda:	4620      	mov	r0, r4
  401edc:	4629      	mov	r1, r5
  401ede:	f001 fb8f 	bl	403600 <__aeabi_dcmplt>
  401ee2:	b920      	cbnz	r0, 401eee <sqrt+0x4e>
  401ee4:	4630      	mov	r0, r6
  401ee6:	4639      	mov	r1, r7
  401ee8:	b00b      	add	sp, #44	; 0x2c
  401eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401eee:	4b1a      	ldr	r3, [pc, #104]	; (401f58 <sqrt+0xb8>)
  401ef0:	f8cd b020 	str.w	fp, [sp, #32]
  401ef4:	2201      	movs	r2, #1
  401ef6:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401efa:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401efe:	e88d 000c 	stmia.w	sp, {r2, r3}
  401f02:	f1ba 0f00 	cmp.w	sl, #0
  401f06:	d017      	beq.n	401f38 <sqrt+0x98>
  401f08:	4642      	mov	r2, r8
  401f0a:	464b      	mov	r3, r9
  401f0c:	4640      	mov	r0, r8
  401f0e:	4649      	mov	r1, r9
  401f10:	f001 fa2e 	bl	403370 <__aeabi_ddiv>
  401f14:	f1ba 0f02 	cmp.w	sl, #2
  401f18:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401f1c:	d10e      	bne.n	401f3c <sqrt+0x9c>
  401f1e:	f001 fdcb 	bl	403ab8 <__errno>
  401f22:	2321      	movs	r3, #33	; 0x21
  401f24:	6003      	str	r3, [r0, #0]
  401f26:	9b08      	ldr	r3, [sp, #32]
  401f28:	b973      	cbnz	r3, 401f48 <sqrt+0xa8>
  401f2a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  401f2e:	4630      	mov	r0, r6
  401f30:	4639      	mov	r1, r7
  401f32:	b00b      	add	sp, #44	; 0x2c
  401f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f38:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401f3c:	4668      	mov	r0, sp
  401f3e:	f000 fe1b 	bl	402b78 <matherr>
  401f42:	2800      	cmp	r0, #0
  401f44:	d1ef      	bne.n	401f26 <sqrt+0x86>
  401f46:	e7ea      	b.n	401f1e <sqrt+0x7e>
  401f48:	f001 fdb6 	bl	403ab8 <__errno>
  401f4c:	9b08      	ldr	r3, [sp, #32]
  401f4e:	6003      	str	r3, [r0, #0]
  401f50:	e7eb      	b.n	401f2a <sqrt+0x8a>
  401f52:	bf00      	nop
  401f54:	20000014 	.word	0x20000014
  401f58:	00404bc0 	.word	0x00404bc0
  401f5c:	00000000 	.word	0x00000000

00401f60 <__ieee754_pow>:
  401f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f64:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  401f68:	ea57 0402 	orrs.w	r4, r7, r2
  401f6c:	b093      	sub	sp, #76	; 0x4c
  401f6e:	d037      	beq.n	401fe0 <__ieee754_pow+0x80>
  401f70:	4c67      	ldr	r4, [pc, #412]	; (402110 <__ieee754_pow+0x1b0>)
  401f72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  401f76:	42a6      	cmp	r6, r4
  401f78:	4683      	mov	fp, r0
  401f7a:	460d      	mov	r5, r1
  401f7c:	dc29      	bgt.n	401fd2 <__ieee754_pow+0x72>
  401f7e:	469a      	mov	sl, r3
  401f80:	4696      	mov	lr, r2
  401f82:	d025      	beq.n	401fd0 <__ieee754_pow+0x70>
  401f84:	42a7      	cmp	r7, r4
  401f86:	dc24      	bgt.n	401fd2 <__ieee754_pow+0x72>
  401f88:	4c61      	ldr	r4, [pc, #388]	; (402110 <__ieee754_pow+0x1b0>)
  401f8a:	42a7      	cmp	r7, r4
  401f8c:	d079      	beq.n	402082 <__ieee754_pow+0x122>
  401f8e:	2d00      	cmp	r5, #0
  401f90:	4689      	mov	r9, r1
  401f92:	4680      	mov	r8, r0
  401f94:	e9cd 2300 	strd	r2, r3, [sp]
  401f98:	db77      	blt.n	40208a <__ieee754_pow+0x12a>
  401f9a:	2400      	movs	r4, #0
  401f9c:	f1be 0f00 	cmp.w	lr, #0
  401fa0:	d12c      	bne.n	401ffc <__ieee754_pow+0x9c>
  401fa2:	4b5b      	ldr	r3, [pc, #364]	; (402110 <__ieee754_pow+0x1b0>)
  401fa4:	429f      	cmp	r7, r3
  401fa6:	f000 808b 	beq.w	4020c0 <__ieee754_pow+0x160>
  401faa:	4b5a      	ldr	r3, [pc, #360]	; (402114 <__ieee754_pow+0x1b4>)
  401fac:	429f      	cmp	r7, r3
  401fae:	d061      	beq.n	402074 <__ieee754_pow+0x114>
  401fb0:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
  401fb4:	f000 83ba 	beq.w	40272c <__ieee754_pow+0x7cc>
  401fb8:	4b57      	ldr	r3, [pc, #348]	; (402118 <__ieee754_pow+0x1b8>)
  401fba:	459a      	cmp	sl, r3
  401fbc:	d11e      	bne.n	401ffc <__ieee754_pow+0x9c>
  401fbe:	2d00      	cmp	r5, #0
  401fc0:	db1c      	blt.n	401ffc <__ieee754_pow+0x9c>
  401fc2:	4640      	mov	r0, r8
  401fc4:	4649      	mov	r1, r9
  401fc6:	b013      	add	sp, #76	; 0x4c
  401fc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fcc:	f000 bd0e 	b.w	4029ec <__ieee754_sqrt>
  401fd0:	b158      	cbz	r0, 401fea <__ieee754_pow+0x8a>
  401fd2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  401fd6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  401fda:	ea56 030b 	orrs.w	r3, r6, fp
  401fde:	d106      	bne.n	401fee <__ieee754_pow+0x8e>
  401fe0:	494c      	ldr	r1, [pc, #304]	; (402114 <__ieee754_pow+0x1b4>)
  401fe2:	2000      	movs	r0, #0
  401fe4:	b013      	add	sp, #76	; 0x4c
  401fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fea:	42b7      	cmp	r7, r6
  401fec:	ddcc      	ble.n	401f88 <__ieee754_pow+0x28>
  401fee:	484b      	ldr	r0, [pc, #300]	; (40211c <__ieee754_pow+0x1bc>)
  401ff0:	b013      	add	sp, #76	; 0x4c
  401ff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ff6:	f000 bdc1 	b.w	402b7c <nan>
  401ffa:	2400      	movs	r4, #0
  401ffc:	4640      	mov	r0, r8
  401ffe:	4649      	mov	r1, r9
  402000:	f000 fdb0 	bl	402b64 <fabs>
  402004:	f1bb 0f00 	cmp.w	fp, #0
  402008:	d119      	bne.n	40203e <__ieee754_pow+0xde>
  40200a:	b126      	cbz	r6, 402016 <__ieee754_pow+0xb6>
  40200c:	4b41      	ldr	r3, [pc, #260]	; (402114 <__ieee754_pow+0x1b4>)
  40200e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
  402012:	429a      	cmp	r2, r3
  402014:	d113      	bne.n	40203e <__ieee754_pow+0xde>
  402016:	f1ba 0f00 	cmp.w	sl, #0
  40201a:	f2c0 83bc 	blt.w	402796 <__ieee754_pow+0x836>
  40201e:	2d00      	cmp	r5, #0
  402020:	dae0      	bge.n	401fe4 <__ieee754_pow+0x84>
  402022:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  402026:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  40202a:	ea56 0304 	orrs.w	r3, r6, r4
  40202e:	f000 848f 	beq.w	402950 <__ieee754_pow+0x9f0>
  402032:	2c01      	cmp	r4, #1
  402034:	d1d6      	bne.n	401fe4 <__ieee754_pow+0x84>
  402036:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40203a:	4619      	mov	r1, r3
  40203c:	e7d2      	b.n	401fe4 <__ieee754_pow+0x84>
  40203e:	0fed      	lsrs	r5, r5, #31
  402040:	3d01      	subs	r5, #1
  402042:	ea54 0305 	orrs.w	r3, r4, r5
  402046:	d04e      	beq.n	4020e6 <__ieee754_pow+0x186>
  402048:	4b35      	ldr	r3, [pc, #212]	; (402120 <__ieee754_pow+0x1c0>)
  40204a:	429f      	cmp	r7, r3
  40204c:	dd6e      	ble.n	40212c <__ieee754_pow+0x1cc>
  40204e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
  402052:	429f      	cmp	r7, r3
  402054:	f340 83e8 	ble.w	402828 <__ieee754_pow+0x8c8>
  402058:	4b32      	ldr	r3, [pc, #200]	; (402124 <__ieee754_pow+0x1c4>)
  40205a:	429e      	cmp	r6, r3
  40205c:	dd4e      	ble.n	4020fc <__ieee754_pow+0x19c>
  40205e:	f1ba 0f00 	cmp.w	sl, #0
  402062:	dd4e      	ble.n	402102 <__ieee754_pow+0x1a2>
  402064:	a328      	add	r3, pc, #160	; (adr r3, 402108 <__ieee754_pow+0x1a8>)
  402066:	e9d3 2300 	ldrd	r2, r3, [r3]
  40206a:	4610      	mov	r0, r2
  40206c:	4619      	mov	r1, r3
  40206e:	f001 f855 	bl	40311c <__aeabi_dmul>
  402072:	e7b7      	b.n	401fe4 <__ieee754_pow+0x84>
  402074:	f1ba 0f00 	cmp.w	sl, #0
  402078:	f2c0 843c 	blt.w	4028f4 <__ieee754_pow+0x994>
  40207c:	4640      	mov	r0, r8
  40207e:	4649      	mov	r1, r9
  402080:	e7b0      	b.n	401fe4 <__ieee754_pow+0x84>
  402082:	f1be 0f00 	cmp.w	lr, #0
  402086:	d082      	beq.n	401f8e <__ieee754_pow+0x2e>
  402088:	e7a3      	b.n	401fd2 <__ieee754_pow+0x72>
  40208a:	4b27      	ldr	r3, [pc, #156]	; (402128 <__ieee754_pow+0x1c8>)
  40208c:	429f      	cmp	r7, r3
  40208e:	dc28      	bgt.n	4020e2 <__ieee754_pow+0x182>
  402090:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  402094:	429f      	cmp	r7, r3
  402096:	dd80      	ble.n	401f9a <__ieee754_pow+0x3a>
  402098:	153b      	asrs	r3, r7, #20
  40209a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  40209e:	2b14      	cmp	r3, #20
  4020a0:	f340 843e 	ble.w	402920 <__ieee754_pow+0x9c0>
  4020a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
  4020a8:	fa2e f203 	lsr.w	r2, lr, r3
  4020ac:	fa02 f303 	lsl.w	r3, r2, r3
  4020b0:	459e      	cmp	lr, r3
  4020b2:	f47f af72 	bne.w	401f9a <__ieee754_pow+0x3a>
  4020b6:	f002 0201 	and.w	r2, r2, #1
  4020ba:	f1c2 0402 	rsb	r4, r2, #2
  4020be:	e76d      	b.n	401f9c <__ieee754_pow+0x3c>
  4020c0:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
  4020c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  4020c8:	ea53 030b 	orrs.w	r3, r3, fp
  4020cc:	d088      	beq.n	401fe0 <__ieee754_pow+0x80>
  4020ce:	4b15      	ldr	r3, [pc, #84]	; (402124 <__ieee754_pow+0x1c4>)
  4020d0:	429e      	cmp	r6, r3
  4020d2:	f340 8332 	ble.w	40273a <__ieee754_pow+0x7da>
  4020d6:	f1ba 0f00 	cmp.w	sl, #0
  4020da:	db12      	blt.n	402102 <__ieee754_pow+0x1a2>
  4020dc:	e9dd 0100 	ldrd	r0, r1, [sp]
  4020e0:	e780      	b.n	401fe4 <__ieee754_pow+0x84>
  4020e2:	2402      	movs	r4, #2
  4020e4:	e75a      	b.n	401f9c <__ieee754_pow+0x3c>
  4020e6:	4642      	mov	r2, r8
  4020e8:	464b      	mov	r3, r9
  4020ea:	4640      	mov	r0, r8
  4020ec:	4649      	mov	r1, r9
  4020ee:	f000 fe61 	bl	402db4 <__aeabi_dsub>
  4020f2:	4602      	mov	r2, r0
  4020f4:	460b      	mov	r3, r1
  4020f6:	f001 f93b 	bl	403370 <__aeabi_ddiv>
  4020fa:	e773      	b.n	401fe4 <__ieee754_pow+0x84>
  4020fc:	f1ba 0f00 	cmp.w	sl, #0
  402100:	dbb0      	blt.n	402064 <__ieee754_pow+0x104>
  402102:	2000      	movs	r0, #0
  402104:	2100      	movs	r1, #0
  402106:	e76d      	b.n	401fe4 <__ieee754_pow+0x84>
  402108:	8800759c 	.word	0x8800759c
  40210c:	7e37e43c 	.word	0x7e37e43c
  402110:	7ff00000 	.word	0x7ff00000
  402114:	3ff00000 	.word	0x3ff00000
  402118:	3fe00000 	.word	0x3fe00000
  40211c:	00404bc4 	.word	0x00404bc4
  402120:	41e00000 	.word	0x41e00000
  402124:	3fefffff 	.word	0x3fefffff
  402128:	433fffff 	.word	0x433fffff
  40212c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
  402130:	f04f 0200 	mov.w	r2, #0
  402134:	da05      	bge.n	402142 <__ieee754_pow+0x1e2>
  402136:	4bd4      	ldr	r3, [pc, #848]	; (402488 <__ieee754_pow+0x528>)
  402138:	f000 fff0 	bl	40311c <__aeabi_dmul>
  40213c:	f06f 0234 	mvn.w	r2, #52	; 0x34
  402140:	460e      	mov	r6, r1
  402142:	1533      	asrs	r3, r6, #20
  402144:	4fd1      	ldr	r7, [pc, #836]	; (40248c <__ieee754_pow+0x52c>)
  402146:	f3c6 0613 	ubfx	r6, r6, #0, #20
  40214a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  40214e:	4413      	add	r3, r2
  402150:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
  402154:	42be      	cmp	r6, r7
  402156:	461a      	mov	r2, r3
  402158:	930d      	str	r3, [sp, #52]	; 0x34
  40215a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
  40215e:	f340 8321 	ble.w	4027a4 <__ieee754_pow+0x844>
  402162:	4bcb      	ldr	r3, [pc, #812]	; (402490 <__ieee754_pow+0x530>)
  402164:	429e      	cmp	r6, r3
  402166:	f340 83fd 	ble.w	402964 <__ieee754_pow+0xa04>
  40216a:	4613      	mov	r3, r2
  40216c:	3301      	adds	r3, #1
  40216e:	930d      	str	r3, [sp, #52]	; 0x34
  402170:	4bc8      	ldr	r3, [pc, #800]	; (402494 <__ieee754_pow+0x534>)
  402172:	2200      	movs	r2, #0
  402174:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402178:	2700      	movs	r7, #0
  40217a:	2600      	movs	r6, #0
  40217c:	e9cd 6708 	strd	r6, r7, [sp, #32]
  402180:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  402184:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
  402188:	2700      	movs	r7, #0
  40218a:	4602      	mov	r2, r0
  40218c:	4653      	mov	r3, sl
  40218e:	4651      	mov	r1, sl
  402190:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402194:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402198:	f000 fe0c 	bl	402db4 <__aeabi_dsub>
  40219c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4021a0:	4680      	mov	r8, r0
  4021a2:	4689      	mov	r9, r1
  4021a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4021a8:	f000 fe06 	bl	402db8 <__adddf3>
  4021ac:	4602      	mov	r2, r0
  4021ae:	460b      	mov	r3, r1
  4021b0:	2000      	movs	r0, #0
  4021b2:	49b8      	ldr	r1, [pc, #736]	; (402494 <__ieee754_pow+0x534>)
  4021b4:	f001 f8dc 	bl	403370 <__aeabi_ddiv>
  4021b8:	460a      	mov	r2, r1
  4021ba:	4601      	mov	r1, r0
  4021bc:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  4021c0:	4613      	mov	r3, r2
  4021c2:	4649      	mov	r1, r9
  4021c4:	4602      	mov	r2, r0
  4021c6:	4640      	mov	r0, r8
  4021c8:	f000 ffa8 	bl	40311c <__aeabi_dmul>
  4021cc:	ea4f 036a 	mov.w	r3, sl, asr #1
  4021d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4021d4:	468c      	mov	ip, r1
  4021d6:	4683      	mov	fp, r0
  4021d8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
  4021dc:	e9cd bc04 	strd	fp, ip, [sp, #16]
  4021e0:	46da      	mov	sl, fp
  4021e2:	468b      	mov	fp, r1
  4021e4:	19d9      	adds	r1, r3, r7
  4021e6:	2300      	movs	r3, #0
  4021e8:	e9cd ab02 	strd	sl, fp, [sp, #8]
  4021ec:	9302      	str	r3, [sp, #8]
  4021ee:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  4021f2:	2000      	movs	r0, #0
  4021f4:	4606      	mov	r6, r0
  4021f6:	460f      	mov	r7, r1
  4021f8:	4602      	mov	r2, r0
  4021fa:	460b      	mov	r3, r1
  4021fc:	4650      	mov	r0, sl
  4021fe:	4659      	mov	r1, fp
  402200:	f000 ff8c 	bl	40311c <__aeabi_dmul>
  402204:	4602      	mov	r2, r0
  402206:	460b      	mov	r3, r1
  402208:	4640      	mov	r0, r8
  40220a:	4649      	mov	r1, r9
  40220c:	f000 fdd2 	bl	402db4 <__aeabi_dsub>
  402210:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402214:	4680      	mov	r8, r0
  402216:	4689      	mov	r9, r1
  402218:	4630      	mov	r0, r6
  40221a:	4639      	mov	r1, r7
  40221c:	f000 fdca 	bl	402db4 <__aeabi_dsub>
  402220:	4602      	mov	r2, r0
  402222:	460b      	mov	r3, r1
  402224:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  402228:	f000 fdc4 	bl	402db4 <__aeabi_dsub>
  40222c:	4652      	mov	r2, sl
  40222e:	465b      	mov	r3, fp
  402230:	f000 ff74 	bl	40311c <__aeabi_dmul>
  402234:	4602      	mov	r2, r0
  402236:	460b      	mov	r3, r1
  402238:	4640      	mov	r0, r8
  40223a:	4649      	mov	r1, r9
  40223c:	f000 fdba 	bl	402db4 <__aeabi_dsub>
  402240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  402244:	f000 ff6a 	bl	40311c <__aeabi_dmul>
  402248:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  40224c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402250:	4632      	mov	r2, r6
  402252:	463b      	mov	r3, r7
  402254:	4630      	mov	r0, r6
  402256:	4639      	mov	r1, r7
  402258:	f000 ff60 	bl	40311c <__aeabi_dmul>
  40225c:	a378      	add	r3, pc, #480	; (adr r3, 402440 <__ieee754_pow+0x4e0>)
  40225e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402262:	4606      	mov	r6, r0
  402264:	460f      	mov	r7, r1
  402266:	f000 ff59 	bl	40311c <__aeabi_dmul>
  40226a:	a377      	add	r3, pc, #476	; (adr r3, 402448 <__ieee754_pow+0x4e8>)
  40226c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402270:	f000 fda2 	bl	402db8 <__adddf3>
  402274:	4632      	mov	r2, r6
  402276:	463b      	mov	r3, r7
  402278:	f000 ff50 	bl	40311c <__aeabi_dmul>
  40227c:	a374      	add	r3, pc, #464	; (adr r3, 402450 <__ieee754_pow+0x4f0>)
  40227e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402282:	f000 fd99 	bl	402db8 <__adddf3>
  402286:	4632      	mov	r2, r6
  402288:	463b      	mov	r3, r7
  40228a:	f000 ff47 	bl	40311c <__aeabi_dmul>
  40228e:	a372      	add	r3, pc, #456	; (adr r3, 402458 <__ieee754_pow+0x4f8>)
  402290:	e9d3 2300 	ldrd	r2, r3, [r3]
  402294:	f000 fd90 	bl	402db8 <__adddf3>
  402298:	4632      	mov	r2, r6
  40229a:	463b      	mov	r3, r7
  40229c:	f000 ff3e 	bl	40311c <__aeabi_dmul>
  4022a0:	a36f      	add	r3, pc, #444	; (adr r3, 402460 <__ieee754_pow+0x500>)
  4022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022a6:	f000 fd87 	bl	402db8 <__adddf3>
  4022aa:	4632      	mov	r2, r6
  4022ac:	463b      	mov	r3, r7
  4022ae:	f000 ff35 	bl	40311c <__aeabi_dmul>
  4022b2:	a36d      	add	r3, pc, #436	; (adr r3, 402468 <__ieee754_pow+0x508>)
  4022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022b8:	f000 fd7e 	bl	402db8 <__adddf3>
  4022bc:	4632      	mov	r2, r6
  4022be:	4680      	mov	r8, r0
  4022c0:	4689      	mov	r9, r1
  4022c2:	463b      	mov	r3, r7
  4022c4:	4630      	mov	r0, r6
  4022c6:	4639      	mov	r1, r7
  4022c8:	f000 ff28 	bl	40311c <__aeabi_dmul>
  4022cc:	4602      	mov	r2, r0
  4022ce:	460b      	mov	r3, r1
  4022d0:	4640      	mov	r0, r8
  4022d2:	4649      	mov	r1, r9
  4022d4:	f000 ff22 	bl	40311c <__aeabi_dmul>
  4022d8:	4652      	mov	r2, sl
  4022da:	4606      	mov	r6, r0
  4022dc:	460f      	mov	r7, r1
  4022de:	465b      	mov	r3, fp
  4022e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4022e4:	f000 fd68 	bl	402db8 <__adddf3>
  4022e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4022ec:	f000 ff16 	bl	40311c <__aeabi_dmul>
  4022f0:	4632      	mov	r2, r6
  4022f2:	463b      	mov	r3, r7
  4022f4:	f000 fd60 	bl	402db8 <__adddf3>
  4022f8:	4652      	mov	r2, sl
  4022fa:	4680      	mov	r8, r0
  4022fc:	4689      	mov	r9, r1
  4022fe:	465b      	mov	r3, fp
  402300:	4650      	mov	r0, sl
  402302:	4659      	mov	r1, fp
  402304:	f000 ff0a 	bl	40311c <__aeabi_dmul>
  402308:	2200      	movs	r2, #0
  40230a:	4b63      	ldr	r3, [pc, #396]	; (402498 <__ieee754_pow+0x538>)
  40230c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  402310:	f000 fd52 	bl	402db8 <__adddf3>
  402314:	4642      	mov	r2, r8
  402316:	464b      	mov	r3, r9
  402318:	f000 fd4e 	bl	402db8 <__adddf3>
  40231c:	9802      	ldr	r0, [sp, #8]
  40231e:	460f      	mov	r7, r1
  402320:	4606      	mov	r6, r0
  402322:	4632      	mov	r2, r6
  402324:	463b      	mov	r3, r7
  402326:	4650      	mov	r0, sl
  402328:	4659      	mov	r1, fp
  40232a:	f000 fef7 	bl	40311c <__aeabi_dmul>
  40232e:	2200      	movs	r2, #0
  402330:	4682      	mov	sl, r0
  402332:	468b      	mov	fp, r1
  402334:	4b58      	ldr	r3, [pc, #352]	; (402498 <__ieee754_pow+0x538>)
  402336:	4630      	mov	r0, r6
  402338:	4639      	mov	r1, r7
  40233a:	f000 fd3b 	bl	402db4 <__aeabi_dsub>
  40233e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  402342:	f000 fd37 	bl	402db4 <__aeabi_dsub>
  402346:	4602      	mov	r2, r0
  402348:	460b      	mov	r3, r1
  40234a:	4640      	mov	r0, r8
  40234c:	4649      	mov	r1, r9
  40234e:	f000 fd31 	bl	402db4 <__aeabi_dsub>
  402352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402356:	f000 fee1 	bl	40311c <__aeabi_dmul>
  40235a:	4632      	mov	r2, r6
  40235c:	4680      	mov	r8, r0
  40235e:	4689      	mov	r9, r1
  402360:	463b      	mov	r3, r7
  402362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402366:	f000 fed9 	bl	40311c <__aeabi_dmul>
  40236a:	4602      	mov	r2, r0
  40236c:	460b      	mov	r3, r1
  40236e:	4640      	mov	r0, r8
  402370:	4649      	mov	r1, r9
  402372:	f000 fd21 	bl	402db8 <__adddf3>
  402376:	4680      	mov	r8, r0
  402378:	4689      	mov	r9, r1
  40237a:	4602      	mov	r2, r0
  40237c:	460b      	mov	r3, r1
  40237e:	4650      	mov	r0, sl
  402380:	4659      	mov	r1, fp
  402382:	e9cd ab04 	strd	sl, fp, [sp, #16]
  402386:	f000 fd17 	bl	402db8 <__adddf3>
  40238a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40238e:	a338      	add	r3, pc, #224	; (adr r3, 402470 <__ieee754_pow+0x510>)
  402390:	e9d3 2300 	ldrd	r2, r3, [r3]
  402394:	4650      	mov	r0, sl
  402396:	460f      	mov	r7, r1
  402398:	f000 fec0 	bl	40311c <__aeabi_dmul>
  40239c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4023a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4023a4:	4639      	mov	r1, r7
  4023a6:	4650      	mov	r0, sl
  4023a8:	f000 fd04 	bl	402db4 <__aeabi_dsub>
  4023ac:	4602      	mov	r2, r0
  4023ae:	460b      	mov	r3, r1
  4023b0:	4640      	mov	r0, r8
  4023b2:	4649      	mov	r1, r9
  4023b4:	f000 fcfe 	bl	402db4 <__aeabi_dsub>
  4023b8:	a32f      	add	r3, pc, #188	; (adr r3, 402478 <__ieee754_pow+0x518>)
  4023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023be:	f000 fead 	bl	40311c <__aeabi_dmul>
  4023c2:	a32f      	add	r3, pc, #188	; (adr r3, 402480 <__ieee754_pow+0x520>)
  4023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023c8:	4680      	mov	r8, r0
  4023ca:	4689      	mov	r9, r1
  4023cc:	4650      	mov	r0, sl
  4023ce:	4639      	mov	r1, r7
  4023d0:	f000 fea4 	bl	40311c <__aeabi_dmul>
  4023d4:	4602      	mov	r2, r0
  4023d6:	460b      	mov	r3, r1
  4023d8:	4640      	mov	r0, r8
  4023da:	4649      	mov	r1, r9
  4023dc:	f000 fcec 	bl	402db8 <__adddf3>
  4023e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4023e4:	f000 fce8 	bl	402db8 <__adddf3>
  4023e8:	4680      	mov	r8, r0
  4023ea:	980d      	ldr	r0, [sp, #52]	; 0x34
  4023ec:	4689      	mov	r9, r1
  4023ee:	f000 fe2f 	bl	403050 <__aeabi_i2d>
  4023f2:	4642      	mov	r2, r8
  4023f4:	4606      	mov	r6, r0
  4023f6:	460f      	mov	r7, r1
  4023f8:	464b      	mov	r3, r9
  4023fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4023fe:	f000 fcdb 	bl	402db8 <__adddf3>
  402402:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  402406:	f000 fcd7 	bl	402db8 <__adddf3>
  40240a:	4632      	mov	r2, r6
  40240c:	463b      	mov	r3, r7
  40240e:	f000 fcd3 	bl	402db8 <__adddf3>
  402412:	4632      	mov	r2, r6
  402414:	463b      	mov	r3, r7
  402416:	4650      	mov	r0, sl
  402418:	468b      	mov	fp, r1
  40241a:	f000 fccb 	bl	402db4 <__aeabi_dsub>
  40241e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  402422:	f000 fcc7 	bl	402db4 <__aeabi_dsub>
  402426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40242a:	f000 fcc3 	bl	402db4 <__aeabi_dsub>
  40242e:	4602      	mov	r2, r0
  402430:	460b      	mov	r3, r1
  402432:	4640      	mov	r0, r8
  402434:	4649      	mov	r1, r9
  402436:	f000 fcbd 	bl	402db4 <__aeabi_dsub>
  40243a:	4680      	mov	r8, r0
  40243c:	e02e      	b.n	40249c <__ieee754_pow+0x53c>
  40243e:	bf00      	nop
  402440:	4a454eef 	.word	0x4a454eef
  402444:	3fca7e28 	.word	0x3fca7e28
  402448:	93c9db65 	.word	0x93c9db65
  40244c:	3fcd864a 	.word	0x3fcd864a
  402450:	a91d4101 	.word	0xa91d4101
  402454:	3fd17460 	.word	0x3fd17460
  402458:	518f264d 	.word	0x518f264d
  40245c:	3fd55555 	.word	0x3fd55555
  402460:	db6fabff 	.word	0xdb6fabff
  402464:	3fdb6db6 	.word	0x3fdb6db6
  402468:	33333303 	.word	0x33333303
  40246c:	3fe33333 	.word	0x3fe33333
  402470:	e0000000 	.word	0xe0000000
  402474:	3feec709 	.word	0x3feec709
  402478:	dc3a03fd 	.word	0xdc3a03fd
  40247c:	3feec709 	.word	0x3feec709
  402480:	145b01f5 	.word	0x145b01f5
  402484:	be3e2fe0 	.word	0xbe3e2fe0
  402488:	43400000 	.word	0x43400000
  40248c:	0003988e 	.word	0x0003988e
  402490:	000bb679 	.word	0x000bb679
  402494:	3ff00000 	.word	0x3ff00000
  402498:	40080000 	.word	0x40080000
  40249c:	4689      	mov	r9, r1
  40249e:	3c01      	subs	r4, #1
  4024a0:	ea54 0305 	orrs.w	r3, r4, r5
  4024a4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4024a8:	bf14      	ite	ne
  4024aa:	4cd9      	ldrne	r4, [pc, #868]	; (402810 <__ieee754_pow+0x8b0>)
  4024ac:	4cd9      	ldreq	r4, [pc, #868]	; (402814 <__ieee754_pow+0x8b4>)
  4024ae:	2300      	movs	r3, #0
  4024b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
  4024b4:	4603      	mov	r3, r0
  4024b6:	460c      	mov	r4, r1
  4024b8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4024bc:	2300      	movs	r3, #0
  4024be:	9302      	str	r3, [sp, #8]
  4024c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  4024c4:	4622      	mov	r2, r4
  4024c6:	462b      	mov	r3, r5
  4024c8:	f000 fc74 	bl	402db4 <__aeabi_dsub>
  4024cc:	4652      	mov	r2, sl
  4024ce:	465b      	mov	r3, fp
  4024d0:	f000 fe24 	bl	40311c <__aeabi_dmul>
  4024d4:	e9dd 2300 	ldrd	r2, r3, [sp]
  4024d8:	4606      	mov	r6, r0
  4024da:	460f      	mov	r7, r1
  4024dc:	4640      	mov	r0, r8
  4024de:	4649      	mov	r1, r9
  4024e0:	f000 fe1c 	bl	40311c <__aeabi_dmul>
  4024e4:	4602      	mov	r2, r0
  4024e6:	460b      	mov	r3, r1
  4024e8:	4630      	mov	r0, r6
  4024ea:	4639      	mov	r1, r7
  4024ec:	f000 fc64 	bl	402db8 <__adddf3>
  4024f0:	4622      	mov	r2, r4
  4024f2:	4680      	mov	r8, r0
  4024f4:	4689      	mov	r9, r1
  4024f6:	462b      	mov	r3, r5
  4024f8:	4650      	mov	r0, sl
  4024fa:	4659      	mov	r1, fp
  4024fc:	e9cd 8900 	strd	r8, r9, [sp]
  402500:	f000 fe0c 	bl	40311c <__aeabi_dmul>
  402504:	460b      	mov	r3, r1
  402506:	4602      	mov	r2, r0
  402508:	4606      	mov	r6, r0
  40250a:	460f      	mov	r7, r1
  40250c:	4640      	mov	r0, r8
  40250e:	4649      	mov	r1, r9
  402510:	f000 fc52 	bl	402db8 <__adddf3>
  402514:	4bc0      	ldr	r3, [pc, #768]	; (402818 <__ieee754_pow+0x8b8>)
  402516:	4299      	cmp	r1, r3
  402518:	4604      	mov	r4, r0
  40251a:	460d      	mov	r5, r1
  40251c:	468a      	mov	sl, r1
  40251e:	f340 8116 	ble.w	40274e <__ieee754_pow+0x7ee>
  402522:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
  402526:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
  40252a:	4303      	orrs	r3, r0
  40252c:	f040 81ea 	bne.w	402904 <__ieee754_pow+0x9a4>
  402530:	a3a3      	add	r3, pc, #652	; (adr r3, 4027c0 <__ieee754_pow+0x860>)
  402532:	e9d3 2300 	ldrd	r2, r3, [r3]
  402536:	e9dd 0100 	ldrd	r0, r1, [sp]
  40253a:	f000 fc3d 	bl	402db8 <__adddf3>
  40253e:	4632      	mov	r2, r6
  402540:	4680      	mov	r8, r0
  402542:	4689      	mov	r9, r1
  402544:	463b      	mov	r3, r7
  402546:	4620      	mov	r0, r4
  402548:	4629      	mov	r1, r5
  40254a:	f000 fc33 	bl	402db4 <__aeabi_dsub>
  40254e:	4602      	mov	r2, r0
  402550:	460b      	mov	r3, r1
  402552:	4640      	mov	r0, r8
  402554:	4649      	mov	r1, r9
  402556:	f001 f871 	bl	40363c <__aeabi_dcmpgt>
  40255a:	2800      	cmp	r0, #0
  40255c:	f040 81d2 	bne.w	402904 <__ieee754_pow+0x9a4>
  402560:	46a8      	mov	r8, r5
  402562:	ea4f 5328 	mov.w	r3, r8, asr #20
  402566:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40256a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
  40256e:	fa42 f303 	asr.w	r3, r2, r3
  402572:	4453      	add	r3, sl
  402574:	f3c3 520a 	ubfx	r2, r3, #20, #11
  402578:	4da8      	ldr	r5, [pc, #672]	; (40281c <__ieee754_pow+0x8bc>)
  40257a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
  40257e:	4115      	asrs	r5, r2
  402580:	f3c3 0413 	ubfx	r4, r3, #0, #20
  402584:	ea23 0105 	bic.w	r1, r3, r5
  402588:	2000      	movs	r0, #0
  40258a:	f1c2 0b14 	rsb	fp, r2, #20
  40258e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  402592:	f1ba 0f00 	cmp.w	sl, #0
  402596:	4602      	mov	r2, r0
  402598:	460b      	mov	r3, r1
  40259a:	fa44 fb0b 	asr.w	fp, r4, fp
  40259e:	4630      	mov	r0, r6
  4025a0:	4639      	mov	r1, r7
  4025a2:	bfb8      	it	lt
  4025a4:	f1cb 0b00 	rsblt	fp, fp, #0
  4025a8:	f000 fc04 	bl	402db4 <__aeabi_dsub>
  4025ac:	4602      	mov	r2, r0
  4025ae:	460b      	mov	r3, r1
  4025b0:	4606      	mov	r6, r0
  4025b2:	460f      	mov	r7, r1
  4025b4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4025b8:	f000 fbfe 	bl	402db8 <__adddf3>
  4025bc:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
  4025c0:	460d      	mov	r5, r1
  4025c2:	2400      	movs	r4, #0
  4025c4:	a380      	add	r3, pc, #512	; (adr r3, 4027c8 <__ieee754_pow+0x868>)
  4025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025ca:	4620      	mov	r0, r4
  4025cc:	4629      	mov	r1, r5
  4025ce:	f000 fda5 	bl	40311c <__aeabi_dmul>
  4025d2:	4632      	mov	r2, r6
  4025d4:	4680      	mov	r8, r0
  4025d6:	4689      	mov	r9, r1
  4025d8:	463b      	mov	r3, r7
  4025da:	4620      	mov	r0, r4
  4025dc:	4629      	mov	r1, r5
  4025de:	f000 fbe9 	bl	402db4 <__aeabi_dsub>
  4025e2:	4602      	mov	r2, r0
  4025e4:	460b      	mov	r3, r1
  4025e6:	e9dd 0100 	ldrd	r0, r1, [sp]
  4025ea:	f000 fbe3 	bl	402db4 <__aeabi_dsub>
  4025ee:	a378      	add	r3, pc, #480	; (adr r3, 4027d0 <__ieee754_pow+0x870>)
  4025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025f4:	f000 fd92 	bl	40311c <__aeabi_dmul>
  4025f8:	a377      	add	r3, pc, #476	; (adr r3, 4027d8 <__ieee754_pow+0x878>)
  4025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025fe:	4606      	mov	r6, r0
  402600:	460f      	mov	r7, r1
  402602:	4620      	mov	r0, r4
  402604:	4629      	mov	r1, r5
  402606:	f000 fd89 	bl	40311c <__aeabi_dmul>
  40260a:	4602      	mov	r2, r0
  40260c:	460b      	mov	r3, r1
  40260e:	4630      	mov	r0, r6
  402610:	4639      	mov	r1, r7
  402612:	f000 fbd1 	bl	402db8 <__adddf3>
  402616:	4606      	mov	r6, r0
  402618:	460f      	mov	r7, r1
  40261a:	4602      	mov	r2, r0
  40261c:	460b      	mov	r3, r1
  40261e:	4640      	mov	r0, r8
  402620:	4649      	mov	r1, r9
  402622:	f000 fbc9 	bl	402db8 <__adddf3>
  402626:	4642      	mov	r2, r8
  402628:	464b      	mov	r3, r9
  40262a:	4604      	mov	r4, r0
  40262c:	460d      	mov	r5, r1
  40262e:	f000 fbc1 	bl	402db4 <__aeabi_dsub>
  402632:	4602      	mov	r2, r0
  402634:	460b      	mov	r3, r1
  402636:	4630      	mov	r0, r6
  402638:	4639      	mov	r1, r7
  40263a:	f000 fbbb 	bl	402db4 <__aeabi_dsub>
  40263e:	4622      	mov	r2, r4
  402640:	4680      	mov	r8, r0
  402642:	4689      	mov	r9, r1
  402644:	462b      	mov	r3, r5
  402646:	4620      	mov	r0, r4
  402648:	4629      	mov	r1, r5
  40264a:	f000 fd67 	bl	40311c <__aeabi_dmul>
  40264e:	a364      	add	r3, pc, #400	; (adr r3, 4027e0 <__ieee754_pow+0x880>)
  402650:	e9d3 2300 	ldrd	r2, r3, [r3]
  402654:	4606      	mov	r6, r0
  402656:	460f      	mov	r7, r1
  402658:	f000 fd60 	bl	40311c <__aeabi_dmul>
  40265c:	a362      	add	r3, pc, #392	; (adr r3, 4027e8 <__ieee754_pow+0x888>)
  40265e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402662:	f000 fba7 	bl	402db4 <__aeabi_dsub>
  402666:	4632      	mov	r2, r6
  402668:	463b      	mov	r3, r7
  40266a:	f000 fd57 	bl	40311c <__aeabi_dmul>
  40266e:	a360      	add	r3, pc, #384	; (adr r3, 4027f0 <__ieee754_pow+0x890>)
  402670:	e9d3 2300 	ldrd	r2, r3, [r3]
  402674:	f000 fba0 	bl	402db8 <__adddf3>
  402678:	4632      	mov	r2, r6
  40267a:	463b      	mov	r3, r7
  40267c:	f000 fd4e 	bl	40311c <__aeabi_dmul>
  402680:	a35d      	add	r3, pc, #372	; (adr r3, 4027f8 <__ieee754_pow+0x898>)
  402682:	e9d3 2300 	ldrd	r2, r3, [r3]
  402686:	f000 fb95 	bl	402db4 <__aeabi_dsub>
  40268a:	4632      	mov	r2, r6
  40268c:	463b      	mov	r3, r7
  40268e:	f000 fd45 	bl	40311c <__aeabi_dmul>
  402692:	a35b      	add	r3, pc, #364	; (adr r3, 402800 <__ieee754_pow+0x8a0>)
  402694:	e9d3 2300 	ldrd	r2, r3, [r3]
  402698:	f000 fb8e 	bl	402db8 <__adddf3>
  40269c:	4632      	mov	r2, r6
  40269e:	463b      	mov	r3, r7
  4026a0:	f000 fd3c 	bl	40311c <__aeabi_dmul>
  4026a4:	4602      	mov	r2, r0
  4026a6:	460b      	mov	r3, r1
  4026a8:	4620      	mov	r0, r4
  4026aa:	4629      	mov	r1, r5
  4026ac:	f000 fb82 	bl	402db4 <__aeabi_dsub>
  4026b0:	4606      	mov	r6, r0
  4026b2:	460f      	mov	r7, r1
  4026b4:	4602      	mov	r2, r0
  4026b6:	460b      	mov	r3, r1
  4026b8:	4620      	mov	r0, r4
  4026ba:	4629      	mov	r1, r5
  4026bc:	f000 fd2e 	bl	40311c <__aeabi_dmul>
  4026c0:	2200      	movs	r2, #0
  4026c2:	e9cd 0100 	strd	r0, r1, [sp]
  4026c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4026ca:	4630      	mov	r0, r6
  4026cc:	4639      	mov	r1, r7
  4026ce:	f000 fb71 	bl	402db4 <__aeabi_dsub>
  4026d2:	4602      	mov	r2, r0
  4026d4:	460b      	mov	r3, r1
  4026d6:	e9dd 0100 	ldrd	r0, r1, [sp]
  4026da:	f000 fe49 	bl	403370 <__aeabi_ddiv>
  4026de:	4642      	mov	r2, r8
  4026e0:	4606      	mov	r6, r0
  4026e2:	460f      	mov	r7, r1
  4026e4:	464b      	mov	r3, r9
  4026e6:	4620      	mov	r0, r4
  4026e8:	4629      	mov	r1, r5
  4026ea:	f000 fd17 	bl	40311c <__aeabi_dmul>
  4026ee:	4642      	mov	r2, r8
  4026f0:	464b      	mov	r3, r9
  4026f2:	f000 fb61 	bl	402db8 <__adddf3>
  4026f6:	4602      	mov	r2, r0
  4026f8:	460b      	mov	r3, r1
  4026fa:	4630      	mov	r0, r6
  4026fc:	4639      	mov	r1, r7
  4026fe:	f000 fb59 	bl	402db4 <__aeabi_dsub>
  402702:	4622      	mov	r2, r4
  402704:	462b      	mov	r3, r5
  402706:	f000 fb55 	bl	402db4 <__aeabi_dsub>
  40270a:	4602      	mov	r2, r0
  40270c:	460b      	mov	r3, r1
  40270e:	2000      	movs	r0, #0
  402710:	493f      	ldr	r1, [pc, #252]	; (402810 <__ieee754_pow+0x8b0>)
  402712:	f000 fb4f 	bl	402db4 <__aeabi_dsub>
  402716:	448a      	add	sl, r1
  402718:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
  40271c:	f2c0 8133 	blt.w	402986 <__ieee754_pow+0xa26>
  402720:	4651      	mov	r1, sl
  402722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402726:	f000 fcf9 	bl	40311c <__aeabi_dmul>
  40272a:	e45b      	b.n	401fe4 <__ieee754_pow+0x84>
  40272c:	4642      	mov	r2, r8
  40272e:	4640      	mov	r0, r8
  402730:	464b      	mov	r3, r9
  402732:	4649      	mov	r1, r9
  402734:	f000 fcf2 	bl	40311c <__aeabi_dmul>
  402738:	e454      	b.n	401fe4 <__ieee754_pow+0x84>
  40273a:	f1ba 0f00 	cmp.w	sl, #0
  40273e:	f6bf ace0 	bge.w	402102 <__ieee754_pow+0x1a2>
  402742:	e9dd 3400 	ldrd	r3, r4, [sp]
  402746:	4618      	mov	r0, r3
  402748:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  40274c:	e44a      	b.n	401fe4 <__ieee754_pow+0x84>
  40274e:	4b34      	ldr	r3, [pc, #208]	; (402820 <__ieee754_pow+0x8c0>)
  402750:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  402754:	4598      	cmp	r8, r3
  402756:	f340 80f2 	ble.w	40293e <__ieee754_pow+0x9de>
  40275a:	4b32      	ldr	r3, [pc, #200]	; (402824 <__ieee754_pow+0x8c4>)
  40275c:	440b      	add	r3, r1
  40275e:	4303      	orrs	r3, r0
  402760:	d10c      	bne.n	40277c <__ieee754_pow+0x81c>
  402762:	4632      	mov	r2, r6
  402764:	463b      	mov	r3, r7
  402766:	f000 fb25 	bl	402db4 <__aeabi_dsub>
  40276a:	4602      	mov	r2, r0
  40276c:	460b      	mov	r3, r1
  40276e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402772:	f000 ff4f 	bl	403614 <__aeabi_dcmple>
  402776:	2800      	cmp	r0, #0
  402778:	f43f aef3 	beq.w	402562 <__ieee754_pow+0x602>
  40277c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402780:	a321      	add	r3, pc, #132	; (adr r3, 402808 <__ieee754_pow+0x8a8>)
  402782:	e9d3 2300 	ldrd	r2, r3, [r3]
  402786:	f000 fcc9 	bl	40311c <__aeabi_dmul>
  40278a:	a31f      	add	r3, pc, #124	; (adr r3, 402808 <__ieee754_pow+0x8a8>)
  40278c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402790:	f000 fcc4 	bl	40311c <__aeabi_dmul>
  402794:	e426      	b.n	401fe4 <__ieee754_pow+0x84>
  402796:	4602      	mov	r2, r0
  402798:	460b      	mov	r3, r1
  40279a:	2000      	movs	r0, #0
  40279c:	491c      	ldr	r1, [pc, #112]	; (402810 <__ieee754_pow+0x8b0>)
  40279e:	f000 fde7 	bl	403370 <__aeabi_ddiv>
  4027a2:	e43c      	b.n	40201e <__ieee754_pow+0xbe>
  4027a4:	2200      	movs	r2, #0
  4027a6:	2300      	movs	r3, #0
  4027a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4027ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4027b0:	4b17      	ldr	r3, [pc, #92]	; (402810 <__ieee754_pow+0x8b0>)
  4027b2:	2200      	movs	r2, #0
  4027b4:	2700      	movs	r7, #0
  4027b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  4027ba:	e4e6      	b.n	40218a <__ieee754_pow+0x22a>
  4027bc:	f3af 8000 	nop.w
  4027c0:	652b82fe 	.word	0x652b82fe
  4027c4:	3c971547 	.word	0x3c971547
  4027c8:	00000000 	.word	0x00000000
  4027cc:	3fe62e43 	.word	0x3fe62e43
  4027d0:	fefa39ef 	.word	0xfefa39ef
  4027d4:	3fe62e42 	.word	0x3fe62e42
  4027d8:	0ca86c39 	.word	0x0ca86c39
  4027dc:	be205c61 	.word	0xbe205c61
  4027e0:	72bea4d0 	.word	0x72bea4d0
  4027e4:	3e663769 	.word	0x3e663769
  4027e8:	c5d26bf1 	.word	0xc5d26bf1
  4027ec:	3ebbbd41 	.word	0x3ebbbd41
  4027f0:	af25de2c 	.word	0xaf25de2c
  4027f4:	3f11566a 	.word	0x3f11566a
  4027f8:	16bebd93 	.word	0x16bebd93
  4027fc:	3f66c16c 	.word	0x3f66c16c
  402800:	5555553e 	.word	0x5555553e
  402804:	3fc55555 	.word	0x3fc55555
  402808:	c2f8f359 	.word	0xc2f8f359
  40280c:	01a56e1f 	.word	0x01a56e1f
  402810:	3ff00000 	.word	0x3ff00000
  402814:	bff00000 	.word	0xbff00000
  402818:	408fffff 	.word	0x408fffff
  40281c:	000fffff 	.word	0x000fffff
  402820:	4090cbff 	.word	0x4090cbff
  402824:	3f6f3400 	.word	0x3f6f3400
  402828:	4b6b      	ldr	r3, [pc, #428]	; (4029d8 <__ieee754_pow+0xa78>)
  40282a:	429e      	cmp	r6, r3
  40282c:	f77f ac66 	ble.w	4020fc <__ieee754_pow+0x19c>
  402830:	4b6a      	ldr	r3, [pc, #424]	; (4029dc <__ieee754_pow+0xa7c>)
  402832:	429e      	cmp	r6, r3
  402834:	f73f ac13 	bgt.w	40205e <__ieee754_pow+0xfe>
  402838:	2200      	movs	r2, #0
  40283a:	4b68      	ldr	r3, [pc, #416]	; (4029dc <__ieee754_pow+0xa7c>)
  40283c:	f000 faba 	bl	402db4 <__aeabi_dsub>
  402840:	a357      	add	r3, pc, #348	; (adr r3, 4029a0 <__ieee754_pow+0xa40>)
  402842:	e9d3 2300 	ldrd	r2, r3, [r3]
  402846:	4606      	mov	r6, r0
  402848:	460f      	mov	r7, r1
  40284a:	f000 fc67 	bl	40311c <__aeabi_dmul>
  40284e:	a356      	add	r3, pc, #344	; (adr r3, 4029a8 <__ieee754_pow+0xa48>)
  402850:	e9d3 2300 	ldrd	r2, r3, [r3]
  402854:	4680      	mov	r8, r0
  402856:	4689      	mov	r9, r1
  402858:	4630      	mov	r0, r6
  40285a:	4639      	mov	r1, r7
  40285c:	f000 fc5e 	bl	40311c <__aeabi_dmul>
  402860:	2200      	movs	r2, #0
  402862:	4682      	mov	sl, r0
  402864:	468b      	mov	fp, r1
  402866:	4b5e      	ldr	r3, [pc, #376]	; (4029e0 <__ieee754_pow+0xa80>)
  402868:	4630      	mov	r0, r6
  40286a:	4639      	mov	r1, r7
  40286c:	f000 fc56 	bl	40311c <__aeabi_dmul>
  402870:	4602      	mov	r2, r0
  402872:	460b      	mov	r3, r1
  402874:	a14e      	add	r1, pc, #312	; (adr r1, 4029b0 <__ieee754_pow+0xa50>)
  402876:	e9d1 0100 	ldrd	r0, r1, [r1]
  40287a:	f000 fa9b 	bl	402db4 <__aeabi_dsub>
  40287e:	4632      	mov	r2, r6
  402880:	463b      	mov	r3, r7
  402882:	f000 fc4b 	bl	40311c <__aeabi_dmul>
  402886:	4602      	mov	r2, r0
  402888:	460b      	mov	r3, r1
  40288a:	2000      	movs	r0, #0
  40288c:	4955      	ldr	r1, [pc, #340]	; (4029e4 <__ieee754_pow+0xa84>)
  40288e:	f000 fa91 	bl	402db4 <__aeabi_dsub>
  402892:	4632      	mov	r2, r6
  402894:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402898:	463b      	mov	r3, r7
  40289a:	4630      	mov	r0, r6
  40289c:	4639      	mov	r1, r7
  40289e:	f000 fc3d 	bl	40311c <__aeabi_dmul>
  4028a2:	4602      	mov	r2, r0
  4028a4:	460b      	mov	r3, r1
  4028a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4028aa:	f000 fc37 	bl	40311c <__aeabi_dmul>
  4028ae:	a342      	add	r3, pc, #264	; (adr r3, 4029b8 <__ieee754_pow+0xa58>)
  4028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4028b4:	f000 fc32 	bl	40311c <__aeabi_dmul>
  4028b8:	4602      	mov	r2, r0
  4028ba:	460b      	mov	r3, r1
  4028bc:	4650      	mov	r0, sl
  4028be:	4659      	mov	r1, fp
  4028c0:	f000 fa78 	bl	402db4 <__aeabi_dsub>
  4028c4:	4602      	mov	r2, r0
  4028c6:	460b      	mov	r3, r1
  4028c8:	4606      	mov	r6, r0
  4028ca:	460f      	mov	r7, r1
  4028cc:	4640      	mov	r0, r8
  4028ce:	4649      	mov	r1, r9
  4028d0:	f000 fa72 	bl	402db8 <__adddf3>
  4028d4:	4642      	mov	r2, r8
  4028d6:	464b      	mov	r3, r9
  4028d8:	2000      	movs	r0, #0
  4028da:	4682      	mov	sl, r0
  4028dc:	468b      	mov	fp, r1
  4028de:	f000 fa69 	bl	402db4 <__aeabi_dsub>
  4028e2:	4602      	mov	r2, r0
  4028e4:	460b      	mov	r3, r1
  4028e6:	4630      	mov	r0, r6
  4028e8:	4639      	mov	r1, r7
  4028ea:	f000 fa63 	bl	402db4 <__aeabi_dsub>
  4028ee:	4680      	mov	r8, r0
  4028f0:	4689      	mov	r9, r1
  4028f2:	e5d4      	b.n	40249e <__ieee754_pow+0x53e>
  4028f4:	4642      	mov	r2, r8
  4028f6:	464b      	mov	r3, r9
  4028f8:	2000      	movs	r0, #0
  4028fa:	4938      	ldr	r1, [pc, #224]	; (4029dc <__ieee754_pow+0xa7c>)
  4028fc:	f000 fd38 	bl	403370 <__aeabi_ddiv>
  402900:	f7ff bb70 	b.w	401fe4 <__ieee754_pow+0x84>
  402904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402908:	a32d      	add	r3, pc, #180	; (adr r3, 4029c0 <__ieee754_pow+0xa60>)
  40290a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40290e:	f000 fc05 	bl	40311c <__aeabi_dmul>
  402912:	a32b      	add	r3, pc, #172	; (adr r3, 4029c0 <__ieee754_pow+0xa60>)
  402914:	e9d3 2300 	ldrd	r2, r3, [r3]
  402918:	f000 fc00 	bl	40311c <__aeabi_dmul>
  40291c:	f7ff bb62 	b.w	401fe4 <__ieee754_pow+0x84>
  402920:	f1be 0f00 	cmp.w	lr, #0
  402924:	f47f ab69 	bne.w	401ffa <__ieee754_pow+0x9a>
  402928:	f1c3 0314 	rsb	r3, r3, #20
  40292c:	fa47 f203 	asr.w	r2, r7, r3
  402930:	fa02 f303 	lsl.w	r3, r2, r3
  402934:	429f      	cmp	r7, r3
  402936:	d02a      	beq.n	40298e <__ieee754_pow+0xa2e>
  402938:	4674      	mov	r4, lr
  40293a:	f7ff bb36 	b.w	401faa <__ieee754_pow+0x4a>
  40293e:	4b29      	ldr	r3, [pc, #164]	; (4029e4 <__ieee754_pow+0xa84>)
  402940:	4598      	cmp	r8, r3
  402942:	f73f ae0e 	bgt.w	402562 <__ieee754_pow+0x602>
  402946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40294a:	4692      	mov	sl, r2
  40294c:	4693      	mov	fp, r2
  40294e:	e638      	b.n	4025c2 <__ieee754_pow+0x662>
  402950:	4602      	mov	r2, r0
  402952:	460b      	mov	r3, r1
  402954:	f000 fa2e 	bl	402db4 <__aeabi_dsub>
  402958:	4602      	mov	r2, r0
  40295a:	460b      	mov	r3, r1
  40295c:	f000 fd08 	bl	403370 <__aeabi_ddiv>
  402960:	f7ff bb40 	b.w	401fe4 <__ieee754_pow+0x84>
  402964:	a318      	add	r3, pc, #96	; (adr r3, 4029c8 <__ieee754_pow+0xa68>)
  402966:	e9d3 2300 	ldrd	r2, r3, [r3]
  40296a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40296e:	a318      	add	r3, pc, #96	; (adr r3, 4029d0 <__ieee754_pow+0xa70>)
  402970:	e9d3 2300 	ldrd	r2, r3, [r3]
  402974:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402978:	4b1b      	ldr	r3, [pc, #108]	; (4029e8 <__ieee754_pow+0xa88>)
  40297a:	2200      	movs	r2, #0
  40297c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
  402980:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402984:	e401      	b.n	40218a <__ieee754_pow+0x22a>
  402986:	465a      	mov	r2, fp
  402988:	f000 f98a 	bl	402ca0 <scalbn>
  40298c:	e6c9      	b.n	402722 <__ieee754_pow+0x7c2>
  40298e:	f002 0201 	and.w	r2, r2, #1
  402992:	f1c2 0402 	rsb	r4, r2, #2
  402996:	f7ff bb08 	b.w	401faa <__ieee754_pow+0x4a>
  40299a:	bf00      	nop
  40299c:	f3af 8000 	nop.w
  4029a0:	60000000 	.word	0x60000000
  4029a4:	3ff71547 	.word	0x3ff71547
  4029a8:	f85ddf44 	.word	0xf85ddf44
  4029ac:	3e54ae0b 	.word	0x3e54ae0b
  4029b0:	55555555 	.word	0x55555555
  4029b4:	3fd55555 	.word	0x3fd55555
  4029b8:	652b82fe 	.word	0x652b82fe
  4029bc:	3ff71547 	.word	0x3ff71547
  4029c0:	8800759c 	.word	0x8800759c
  4029c4:	7e37e43c 	.word	0x7e37e43c
  4029c8:	40000000 	.word	0x40000000
  4029cc:	3fe2b803 	.word	0x3fe2b803
  4029d0:	43cfd006 	.word	0x43cfd006
  4029d4:	3e4cfdeb 	.word	0x3e4cfdeb
  4029d8:	3feffffe 	.word	0x3feffffe
  4029dc:	3ff00000 	.word	0x3ff00000
  4029e0:	3fd00000 	.word	0x3fd00000
  4029e4:	3fe00000 	.word	0x3fe00000
  4029e8:	3ff80000 	.word	0x3ff80000

004029ec <__ieee754_sqrt>:
  4029ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4029f0:	4f5b      	ldr	r7, [pc, #364]	; (402b60 <__ieee754_sqrt+0x174>)
  4029f2:	438f      	bics	r7, r1
  4029f4:	4605      	mov	r5, r0
  4029f6:	460c      	mov	r4, r1
  4029f8:	f000 8092 	beq.w	402b20 <__ieee754_sqrt+0x134>
  4029fc:	2900      	cmp	r1, #0
  4029fe:	460b      	mov	r3, r1
  402a00:	4602      	mov	r2, r0
  402a02:	dd6f      	ble.n	402ae4 <__ieee754_sqrt+0xf8>
  402a04:	150f      	asrs	r7, r1, #20
  402a06:	d07b      	beq.n	402b00 <__ieee754_sqrt+0x114>
  402a08:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  402a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
  402a10:	07f8      	lsls	r0, r7, #31
  402a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402a16:	d45c      	bmi.n	402ad2 <__ieee754_sqrt+0xe6>
  402a18:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  402a1c:	2600      	movs	r6, #0
  402a1e:	440b      	add	r3, r1
  402a20:	107f      	asrs	r7, r7, #1
  402a22:	0052      	lsls	r2, r2, #1
  402a24:	46b6      	mov	lr, r6
  402a26:	2016      	movs	r0, #22
  402a28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402a2c:	eb0e 0401 	add.w	r4, lr, r1
  402a30:	429c      	cmp	r4, r3
  402a32:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  402a36:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402a3a:	dc03      	bgt.n	402a44 <__ieee754_sqrt+0x58>
  402a3c:	1b1b      	subs	r3, r3, r4
  402a3e:	eb04 0e01 	add.w	lr, r4, r1
  402a42:	440e      	add	r6, r1
  402a44:	3801      	subs	r0, #1
  402a46:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  402a4a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402a4e:	d1ed      	bne.n	402a2c <__ieee754_sqrt+0x40>
  402a50:	4684      	mov	ip, r0
  402a52:	2420      	movs	r4, #32
  402a54:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402a58:	e009      	b.n	402a6e <__ieee754_sqrt+0x82>
  402a5a:	d020      	beq.n	402a9e <__ieee754_sqrt+0xb2>
  402a5c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  402a60:	3c01      	subs	r4, #1
  402a62:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402a66:	442b      	add	r3, r5
  402a68:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402a6c:	d020      	beq.n	402ab0 <__ieee754_sqrt+0xc4>
  402a6e:	4573      	cmp	r3, lr
  402a70:	eb01 050c 	add.w	r5, r1, ip
  402a74:	ddf1      	ble.n	402a5a <__ieee754_sqrt+0x6e>
  402a76:	2d00      	cmp	r5, #0
  402a78:	eb05 0c01 	add.w	ip, r5, r1
  402a7c:	db09      	blt.n	402a92 <__ieee754_sqrt+0xa6>
  402a7e:	46f0      	mov	r8, lr
  402a80:	4295      	cmp	r5, r2
  402a82:	eba3 030e 	sub.w	r3, r3, lr
  402a86:	d900      	bls.n	402a8a <__ieee754_sqrt+0x9e>
  402a88:	3b01      	subs	r3, #1
  402a8a:	1b52      	subs	r2, r2, r5
  402a8c:	4408      	add	r0, r1
  402a8e:	46c6      	mov	lr, r8
  402a90:	e7e4      	b.n	402a5c <__ieee754_sqrt+0x70>
  402a92:	f1bc 0f00 	cmp.w	ip, #0
  402a96:	dbf2      	blt.n	402a7e <__ieee754_sqrt+0x92>
  402a98:	f10e 0801 	add.w	r8, lr, #1
  402a9c:	e7f0      	b.n	402a80 <__ieee754_sqrt+0x94>
  402a9e:	4295      	cmp	r5, r2
  402aa0:	d8dc      	bhi.n	402a5c <__ieee754_sqrt+0x70>
  402aa2:	2d00      	cmp	r5, #0
  402aa4:	eb05 0c01 	add.w	ip, r5, r1
  402aa8:	db44      	blt.n	402b34 <__ieee754_sqrt+0x148>
  402aaa:	4698      	mov	r8, r3
  402aac:	2300      	movs	r3, #0
  402aae:	e7ec      	b.n	402a8a <__ieee754_sqrt+0x9e>
  402ab0:	4313      	orrs	r3, r2
  402ab2:	d113      	bne.n	402adc <__ieee754_sqrt+0xf0>
  402ab4:	0840      	lsrs	r0, r0, #1
  402ab6:	1073      	asrs	r3, r6, #1
  402ab8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402abc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402ac0:	07f2      	lsls	r2, r6, #31
  402ac2:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  402ac6:	bf48      	it	mi
  402ac8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402acc:	4649      	mov	r1, r9
  402ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ad2:	005b      	lsls	r3, r3, #1
  402ad4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  402ad8:	0052      	lsls	r2, r2, #1
  402ada:	e79d      	b.n	402a18 <__ieee754_sqrt+0x2c>
  402adc:	1c41      	adds	r1, r0, #1
  402ade:	d02d      	beq.n	402b3c <__ieee754_sqrt+0x150>
  402ae0:	3001      	adds	r0, #1
  402ae2:	e7e7      	b.n	402ab4 <__ieee754_sqrt+0xc8>
  402ae4:	4606      	mov	r6, r0
  402ae6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  402aea:	433e      	orrs	r6, r7
  402aec:	d0ef      	beq.n	402ace <__ieee754_sqrt+0xe2>
  402aee:	bb69      	cbnz	r1, 402b4c <__ieee754_sqrt+0x160>
  402af0:	460f      	mov	r7, r1
  402af2:	0ad3      	lsrs	r3, r2, #11
  402af4:	3f15      	subs	r7, #21
  402af6:	0552      	lsls	r2, r2, #21
  402af8:	2b00      	cmp	r3, #0
  402afa:	d0fa      	beq.n	402af2 <__ieee754_sqrt+0x106>
  402afc:	02de      	lsls	r6, r3, #11
  402afe:	d420      	bmi.n	402b42 <__ieee754_sqrt+0x156>
  402b00:	2400      	movs	r4, #0
  402b02:	e000      	b.n	402b06 <__ieee754_sqrt+0x11a>
  402b04:	4604      	mov	r4, r0
  402b06:	005b      	lsls	r3, r3, #1
  402b08:	02dd      	lsls	r5, r3, #11
  402b0a:	f104 0001 	add.w	r0, r4, #1
  402b0e:	d5f9      	bpl.n	402b04 <__ieee754_sqrt+0x118>
  402b10:	f1c0 0120 	rsb	r1, r0, #32
  402b14:	fa22 f101 	lsr.w	r1, r2, r1
  402b18:	430b      	orrs	r3, r1
  402b1a:	1b3f      	subs	r7, r7, r4
  402b1c:	4082      	lsls	r2, r0
  402b1e:	e773      	b.n	402a08 <__ieee754_sqrt+0x1c>
  402b20:	4602      	mov	r2, r0
  402b22:	460b      	mov	r3, r1
  402b24:	f000 fafa 	bl	40311c <__aeabi_dmul>
  402b28:	462a      	mov	r2, r5
  402b2a:	4623      	mov	r3, r4
  402b2c:	f000 f944 	bl	402db8 <__adddf3>
  402b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402b34:	f1bc 0f00 	cmp.w	ip, #0
  402b38:	daae      	bge.n	402a98 <__ieee754_sqrt+0xac>
  402b3a:	e7b6      	b.n	402aaa <__ieee754_sqrt+0xbe>
  402b3c:	3601      	adds	r6, #1
  402b3e:	4620      	mov	r0, r4
  402b40:	e7b9      	b.n	402ab6 <__ieee754_sqrt+0xca>
  402b42:	2000      	movs	r0, #0
  402b44:	2120      	movs	r1, #32
  402b46:	f04f 34ff 	mov.w	r4, #4294967295
  402b4a:	e7e3      	b.n	402b14 <__ieee754_sqrt+0x128>
  402b4c:	4602      	mov	r2, r0
  402b4e:	460b      	mov	r3, r1
  402b50:	f000 f930 	bl	402db4 <__aeabi_dsub>
  402b54:	4602      	mov	r2, r0
  402b56:	460b      	mov	r3, r1
  402b58:	f000 fc0a 	bl	403370 <__aeabi_ddiv>
  402b5c:	e7b7      	b.n	402ace <__ieee754_sqrt+0xe2>
  402b5e:	bf00      	nop
  402b60:	7ff00000 	.word	0x7ff00000

00402b64 <fabs>:
  402b64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402b68:	4770      	bx	lr
  402b6a:	bf00      	nop

00402b6c <finite>:
  402b6c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  402b70:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
  402b74:	0fc0      	lsrs	r0, r0, #31
  402b76:	4770      	bx	lr

00402b78 <matherr>:
  402b78:	2000      	movs	r0, #0
  402b7a:	4770      	bx	lr

00402b7c <nan>:
  402b7c:	2000      	movs	r0, #0
  402b7e:	4901      	ldr	r1, [pc, #4]	; (402b84 <nan+0x8>)
  402b80:	4770      	bx	lr
  402b82:	bf00      	nop
  402b84:	7ff80000 	.word	0x7ff80000

00402b88 <rint>:
  402b88:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b8a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
  402b8e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
  402b92:	2e13      	cmp	r6, #19
  402b94:	b083      	sub	sp, #12
  402b96:	4602      	mov	r2, r0
  402b98:	460b      	mov	r3, r1
  402b9a:	460c      	mov	r4, r1
  402b9c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
  402ba0:	4607      	mov	r7, r0
  402ba2:	dc2e      	bgt.n	402c02 <rint+0x7a>
  402ba4:	2e00      	cmp	r6, #0
  402ba6:	db49      	blt.n	402c3c <rint+0xb4>
  402ba8:	493a      	ldr	r1, [pc, #232]	; (402c94 <rint+0x10c>)
  402baa:	4131      	asrs	r1, r6
  402bac:	ea03 0001 	and.w	r0, r3, r1
  402bb0:	4310      	orrs	r0, r2
  402bb2:	d02b      	beq.n	402c0c <rint+0x84>
  402bb4:	0849      	lsrs	r1, r1, #1
  402bb6:	400b      	ands	r3, r1
  402bb8:	ea53 0702 	orrs.w	r7, r3, r2
  402bbc:	d00c      	beq.n	402bd8 <rint+0x50>
  402bbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  402bc2:	2e13      	cmp	r6, #19
  402bc4:	ea24 0101 	bic.w	r1, r4, r1
  402bc8:	fa43 f406 	asr.w	r4, r3, r6
  402bcc:	ea44 0401 	orr.w	r4, r4, r1
  402bd0:	bf0c      	ite	eq
  402bd2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
  402bd6:	2700      	movne	r7, #0
  402bd8:	4b2f      	ldr	r3, [pc, #188]	; (402c98 <rint+0x110>)
  402bda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  402bde:	4621      	mov	r1, r4
  402be0:	e9d5 4500 	ldrd	r4, r5, [r5]
  402be4:	4638      	mov	r0, r7
  402be6:	4622      	mov	r2, r4
  402be8:	462b      	mov	r3, r5
  402bea:	f000 f8e5 	bl	402db8 <__adddf3>
  402bee:	e9cd 0100 	strd	r0, r1, [sp]
  402bf2:	4622      	mov	r2, r4
  402bf4:	462b      	mov	r3, r5
  402bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
  402bfa:	f000 f8db 	bl	402db4 <__aeabi_dsub>
  402bfe:	b003      	add	sp, #12
  402c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c02:	2e33      	cmp	r6, #51	; 0x33
  402c04:	dd06      	ble.n	402c14 <rint+0x8c>
  402c06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  402c0a:	d040      	beq.n	402c8e <rint+0x106>
  402c0c:	4610      	mov	r0, r2
  402c0e:	4619      	mov	r1, r3
  402c10:	b003      	add	sp, #12
  402c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c14:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
  402c18:	f04f 31ff 	mov.w	r1, #4294967295
  402c1c:	fa21 f10e 	lsr.w	r1, r1, lr
  402c20:	4208      	tst	r0, r1
  402c22:	d0f3      	beq.n	402c0c <rint+0x84>
  402c24:	0849      	lsrs	r1, r1, #1
  402c26:	4208      	tst	r0, r1
  402c28:	d0d6      	beq.n	402bd8 <rint+0x50>
  402c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402c2e:	ea20 0101 	bic.w	r1, r0, r1
  402c32:	fa43 fe0e 	asr.w	lr, r3, lr
  402c36:	ea4e 0701 	orr.w	r7, lr, r1
  402c3a:	e7cd      	b.n	402bd8 <rint+0x50>
  402c3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402c40:	4301      	orrs	r1, r0
  402c42:	d0e3      	beq.n	402c0c <rint+0x84>
  402c44:	f3c3 0113 	ubfx	r1, r3, #0, #20
  402c48:	4e13      	ldr	r6, [pc, #76]	; (402c98 <rint+0x110>)
  402c4a:	4301      	orrs	r1, r0
  402c4c:	f1c1 0c00 	rsb	ip, r1, #0
  402c50:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
  402c54:	e9d6 6700 	ldrd	r6, r7, [r6]
  402c58:	ea4c 0c01 	orr.w	ip, ip, r1
  402c5c:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
  402c60:	0c5c      	lsrs	r4, r3, #17
  402c62:	0464      	lsls	r4, r4, #17
  402c64:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
  402c68:	ea43 0104 	orr.w	r1, r3, r4
  402c6c:	4632      	mov	r2, r6
  402c6e:	463b      	mov	r3, r7
  402c70:	f000 f8a2 	bl	402db8 <__adddf3>
  402c74:	e9cd 0100 	strd	r0, r1, [sp]
  402c78:	4632      	mov	r2, r6
  402c7a:	463b      	mov	r3, r7
  402c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
  402c80:	f000 f898 	bl	402db4 <__aeabi_dsub>
  402c84:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  402c88:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
  402c8c:	e7c0      	b.n	402c10 <rint+0x88>
  402c8e:	f000 f893 	bl	402db8 <__adddf3>
  402c92:	e7bd      	b.n	402c10 <rint+0x88>
  402c94:	000fffff 	.word	0x000fffff
  402c98:	00404bc8 	.word	0x00404bc8
  402c9c:	00000000 	.word	0x00000000

00402ca0 <scalbn>:
  402ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ca2:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402ca6:	4604      	mov	r4, r0
  402ca8:	460d      	mov	r5, r1
  402caa:	460b      	mov	r3, r1
  402cac:	4617      	mov	r7, r2
  402cae:	bb0e      	cbnz	r6, 402cf4 <scalbn+0x54>
  402cb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402cb4:	4303      	orrs	r3, r0
  402cb6:	4686      	mov	lr, r0
  402cb8:	d025      	beq.n	402d06 <scalbn+0x66>
  402cba:	2200      	movs	r2, #0
  402cbc:	4b34      	ldr	r3, [pc, #208]	; (402d90 <scalbn+0xf0>)
  402cbe:	f000 fa2d 	bl	40311c <__aeabi_dmul>
  402cc2:	4a34      	ldr	r2, [pc, #208]	; (402d94 <scalbn+0xf4>)
  402cc4:	4297      	cmp	r7, r2
  402cc6:	4604      	mov	r4, r0
  402cc8:	460d      	mov	r5, r1
  402cca:	460b      	mov	r3, r1
  402ccc:	db2a      	blt.n	402d24 <scalbn+0x84>
  402cce:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402cd2:	3e36      	subs	r6, #54	; 0x36
  402cd4:	443e      	add	r6, r7
  402cd6:	f240 72fe 	movw	r2, #2046	; 0x7fe
  402cda:	4296      	cmp	r6, r2
  402cdc:	dc28      	bgt.n	402d30 <scalbn+0x90>
  402cde:	2e00      	cmp	r6, #0
  402ce0:	dd12      	ble.n	402d08 <scalbn+0x68>
  402ce2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402ce6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402cea:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402cee:	4620      	mov	r0, r4
  402cf0:	4629      	mov	r1, r5
  402cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cf4:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402cf8:	4296      	cmp	r6, r2
  402cfa:	d1eb      	bne.n	402cd4 <scalbn+0x34>
  402cfc:	4602      	mov	r2, r0
  402cfe:	460b      	mov	r3, r1
  402d00:	f000 f85a 	bl	402db8 <__adddf3>
  402d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d08:	f116 0f35 	cmn.w	r6, #53	; 0x35
  402d0c:	da1d      	bge.n	402d4a <scalbn+0xaa>
  402d0e:	f24c 3350 	movw	r3, #50000	; 0xc350
  402d12:	429f      	cmp	r7, r3
  402d14:	4622      	mov	r2, r4
  402d16:	462b      	mov	r3, r5
  402d18:	dc25      	bgt.n	402d66 <scalbn+0xc6>
  402d1a:	a119      	add	r1, pc, #100	; (adr r1, 402d80 <scalbn+0xe0>)
  402d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
  402d20:	f000 f83c 	bl	402d9c <copysign>
  402d24:	a316      	add	r3, pc, #88	; (adr r3, 402d80 <scalbn+0xe0>)
  402d26:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d2a:	f000 f9f7 	bl	40311c <__aeabi_dmul>
  402d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d30:	4622      	mov	r2, r4
  402d32:	462b      	mov	r3, r5
  402d34:	a114      	add	r1, pc, #80	; (adr r1, 402d88 <scalbn+0xe8>)
  402d36:	e9d1 0100 	ldrd	r0, r1, [r1]
  402d3a:	f000 f82f 	bl	402d9c <copysign>
  402d3e:	a312      	add	r3, pc, #72	; (adr r3, 402d88 <scalbn+0xe8>)
  402d40:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d44:	f000 f9ea 	bl	40311c <__aeabi_dmul>
  402d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402d4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402d52:	3636      	adds	r6, #54	; 0x36
  402d54:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402d58:	4620      	mov	r0, r4
  402d5a:	4629      	mov	r1, r5
  402d5c:	2200      	movs	r2, #0
  402d5e:	4b0e      	ldr	r3, [pc, #56]	; (402d98 <scalbn+0xf8>)
  402d60:	f000 f9dc 	bl	40311c <__aeabi_dmul>
  402d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d66:	a108      	add	r1, pc, #32	; (adr r1, 402d88 <scalbn+0xe8>)
  402d68:	e9d1 0100 	ldrd	r0, r1, [r1]
  402d6c:	f000 f816 	bl	402d9c <copysign>
  402d70:	a305      	add	r3, pc, #20	; (adr r3, 402d88 <scalbn+0xe8>)
  402d72:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d76:	f000 f9d1 	bl	40311c <__aeabi_dmul>
  402d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d7c:	f3af 8000 	nop.w
  402d80:	c2f8f359 	.word	0xc2f8f359
  402d84:	01a56e1f 	.word	0x01a56e1f
  402d88:	8800759c 	.word	0x8800759c
  402d8c:	7e37e43c 	.word	0x7e37e43c
  402d90:	43500000 	.word	0x43500000
  402d94:	ffff3cb0 	.word	0xffff3cb0
  402d98:	3c900000 	.word	0x3c900000

00402d9c <copysign>:
  402d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  402da0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  402da4:	ea42 0103 	orr.w	r1, r2, r3
  402da8:	4770      	bx	lr
  402daa:	bf00      	nop

00402dac <__aeabi_drsub>:
  402dac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402db0:	e002      	b.n	402db8 <__adddf3>
  402db2:	bf00      	nop

00402db4 <__aeabi_dsub>:
  402db4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402db8 <__adddf3>:
  402db8:	b530      	push	{r4, r5, lr}
  402dba:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402dbe:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402dc2:	ea94 0f05 	teq	r4, r5
  402dc6:	bf08      	it	eq
  402dc8:	ea90 0f02 	teqeq	r0, r2
  402dcc:	bf1f      	itttt	ne
  402dce:	ea54 0c00 	orrsne.w	ip, r4, r0
  402dd2:	ea55 0c02 	orrsne.w	ip, r5, r2
  402dd6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402dda:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402dde:	f000 80e2 	beq.w	402fa6 <__adddf3+0x1ee>
  402de2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402de6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402dea:	bfb8      	it	lt
  402dec:	426d      	neglt	r5, r5
  402dee:	dd0c      	ble.n	402e0a <__adddf3+0x52>
  402df0:	442c      	add	r4, r5
  402df2:	ea80 0202 	eor.w	r2, r0, r2
  402df6:	ea81 0303 	eor.w	r3, r1, r3
  402dfa:	ea82 0000 	eor.w	r0, r2, r0
  402dfe:	ea83 0101 	eor.w	r1, r3, r1
  402e02:	ea80 0202 	eor.w	r2, r0, r2
  402e06:	ea81 0303 	eor.w	r3, r1, r3
  402e0a:	2d36      	cmp	r5, #54	; 0x36
  402e0c:	bf88      	it	hi
  402e0e:	bd30      	pophi	{r4, r5, pc}
  402e10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402e14:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402e18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402e1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402e20:	d002      	beq.n	402e28 <__adddf3+0x70>
  402e22:	4240      	negs	r0, r0
  402e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402e28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402e2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402e30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402e34:	d002      	beq.n	402e3c <__adddf3+0x84>
  402e36:	4252      	negs	r2, r2
  402e38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402e3c:	ea94 0f05 	teq	r4, r5
  402e40:	f000 80a7 	beq.w	402f92 <__adddf3+0x1da>
  402e44:	f1a4 0401 	sub.w	r4, r4, #1
  402e48:	f1d5 0e20 	rsbs	lr, r5, #32
  402e4c:	db0d      	blt.n	402e6a <__adddf3+0xb2>
  402e4e:	fa02 fc0e 	lsl.w	ip, r2, lr
  402e52:	fa22 f205 	lsr.w	r2, r2, r5
  402e56:	1880      	adds	r0, r0, r2
  402e58:	f141 0100 	adc.w	r1, r1, #0
  402e5c:	fa03 f20e 	lsl.w	r2, r3, lr
  402e60:	1880      	adds	r0, r0, r2
  402e62:	fa43 f305 	asr.w	r3, r3, r5
  402e66:	4159      	adcs	r1, r3
  402e68:	e00e      	b.n	402e88 <__adddf3+0xd0>
  402e6a:	f1a5 0520 	sub.w	r5, r5, #32
  402e6e:	f10e 0e20 	add.w	lr, lr, #32
  402e72:	2a01      	cmp	r2, #1
  402e74:	fa03 fc0e 	lsl.w	ip, r3, lr
  402e78:	bf28      	it	cs
  402e7a:	f04c 0c02 	orrcs.w	ip, ip, #2
  402e7e:	fa43 f305 	asr.w	r3, r3, r5
  402e82:	18c0      	adds	r0, r0, r3
  402e84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402e88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402e8c:	d507      	bpl.n	402e9e <__adddf3+0xe6>
  402e8e:	f04f 0e00 	mov.w	lr, #0
  402e92:	f1dc 0c00 	rsbs	ip, ip, #0
  402e96:	eb7e 0000 	sbcs.w	r0, lr, r0
  402e9a:	eb6e 0101 	sbc.w	r1, lr, r1
  402e9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402ea2:	d31b      	bcc.n	402edc <__adddf3+0x124>
  402ea4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402ea8:	d30c      	bcc.n	402ec4 <__adddf3+0x10c>
  402eaa:	0849      	lsrs	r1, r1, #1
  402eac:	ea5f 0030 	movs.w	r0, r0, rrx
  402eb0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402eb4:	f104 0401 	add.w	r4, r4, #1
  402eb8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402ebc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402ec0:	f080 809a 	bcs.w	402ff8 <__adddf3+0x240>
  402ec4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402ec8:	bf08      	it	eq
  402eca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402ece:	f150 0000 	adcs.w	r0, r0, #0
  402ed2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402ed6:	ea41 0105 	orr.w	r1, r1, r5
  402eda:	bd30      	pop	{r4, r5, pc}
  402edc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402ee0:	4140      	adcs	r0, r0
  402ee2:	eb41 0101 	adc.w	r1, r1, r1
  402ee6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402eea:	f1a4 0401 	sub.w	r4, r4, #1
  402eee:	d1e9      	bne.n	402ec4 <__adddf3+0x10c>
  402ef0:	f091 0f00 	teq	r1, #0
  402ef4:	bf04      	itt	eq
  402ef6:	4601      	moveq	r1, r0
  402ef8:	2000      	moveq	r0, #0
  402efa:	fab1 f381 	clz	r3, r1
  402efe:	bf08      	it	eq
  402f00:	3320      	addeq	r3, #32
  402f02:	f1a3 030b 	sub.w	r3, r3, #11
  402f06:	f1b3 0220 	subs.w	r2, r3, #32
  402f0a:	da0c      	bge.n	402f26 <__adddf3+0x16e>
  402f0c:	320c      	adds	r2, #12
  402f0e:	dd08      	ble.n	402f22 <__adddf3+0x16a>
  402f10:	f102 0c14 	add.w	ip, r2, #20
  402f14:	f1c2 020c 	rsb	r2, r2, #12
  402f18:	fa01 f00c 	lsl.w	r0, r1, ip
  402f1c:	fa21 f102 	lsr.w	r1, r1, r2
  402f20:	e00c      	b.n	402f3c <__adddf3+0x184>
  402f22:	f102 0214 	add.w	r2, r2, #20
  402f26:	bfd8      	it	le
  402f28:	f1c2 0c20 	rsble	ip, r2, #32
  402f2c:	fa01 f102 	lsl.w	r1, r1, r2
  402f30:	fa20 fc0c 	lsr.w	ip, r0, ip
  402f34:	bfdc      	itt	le
  402f36:	ea41 010c 	orrle.w	r1, r1, ip
  402f3a:	4090      	lslle	r0, r2
  402f3c:	1ae4      	subs	r4, r4, r3
  402f3e:	bfa2      	ittt	ge
  402f40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402f44:	4329      	orrge	r1, r5
  402f46:	bd30      	popge	{r4, r5, pc}
  402f48:	ea6f 0404 	mvn.w	r4, r4
  402f4c:	3c1f      	subs	r4, #31
  402f4e:	da1c      	bge.n	402f8a <__adddf3+0x1d2>
  402f50:	340c      	adds	r4, #12
  402f52:	dc0e      	bgt.n	402f72 <__adddf3+0x1ba>
  402f54:	f104 0414 	add.w	r4, r4, #20
  402f58:	f1c4 0220 	rsb	r2, r4, #32
  402f5c:	fa20 f004 	lsr.w	r0, r0, r4
  402f60:	fa01 f302 	lsl.w	r3, r1, r2
  402f64:	ea40 0003 	orr.w	r0, r0, r3
  402f68:	fa21 f304 	lsr.w	r3, r1, r4
  402f6c:	ea45 0103 	orr.w	r1, r5, r3
  402f70:	bd30      	pop	{r4, r5, pc}
  402f72:	f1c4 040c 	rsb	r4, r4, #12
  402f76:	f1c4 0220 	rsb	r2, r4, #32
  402f7a:	fa20 f002 	lsr.w	r0, r0, r2
  402f7e:	fa01 f304 	lsl.w	r3, r1, r4
  402f82:	ea40 0003 	orr.w	r0, r0, r3
  402f86:	4629      	mov	r1, r5
  402f88:	bd30      	pop	{r4, r5, pc}
  402f8a:	fa21 f004 	lsr.w	r0, r1, r4
  402f8e:	4629      	mov	r1, r5
  402f90:	bd30      	pop	{r4, r5, pc}
  402f92:	f094 0f00 	teq	r4, #0
  402f96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402f9a:	bf06      	itte	eq
  402f9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402fa0:	3401      	addeq	r4, #1
  402fa2:	3d01      	subne	r5, #1
  402fa4:	e74e      	b.n	402e44 <__adddf3+0x8c>
  402fa6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402faa:	bf18      	it	ne
  402fac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402fb0:	d029      	beq.n	403006 <__adddf3+0x24e>
  402fb2:	ea94 0f05 	teq	r4, r5
  402fb6:	bf08      	it	eq
  402fb8:	ea90 0f02 	teqeq	r0, r2
  402fbc:	d005      	beq.n	402fca <__adddf3+0x212>
  402fbe:	ea54 0c00 	orrs.w	ip, r4, r0
  402fc2:	bf04      	itt	eq
  402fc4:	4619      	moveq	r1, r3
  402fc6:	4610      	moveq	r0, r2
  402fc8:	bd30      	pop	{r4, r5, pc}
  402fca:	ea91 0f03 	teq	r1, r3
  402fce:	bf1e      	ittt	ne
  402fd0:	2100      	movne	r1, #0
  402fd2:	2000      	movne	r0, #0
  402fd4:	bd30      	popne	{r4, r5, pc}
  402fd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402fda:	d105      	bne.n	402fe8 <__adddf3+0x230>
  402fdc:	0040      	lsls	r0, r0, #1
  402fde:	4149      	adcs	r1, r1
  402fe0:	bf28      	it	cs
  402fe2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402fe6:	bd30      	pop	{r4, r5, pc}
  402fe8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402fec:	bf3c      	itt	cc
  402fee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402ff2:	bd30      	popcc	{r4, r5, pc}
  402ff4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402ff8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402ffc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403000:	f04f 0000 	mov.w	r0, #0
  403004:	bd30      	pop	{r4, r5, pc}
  403006:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40300a:	bf1a      	itte	ne
  40300c:	4619      	movne	r1, r3
  40300e:	4610      	movne	r0, r2
  403010:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403014:	bf1c      	itt	ne
  403016:	460b      	movne	r3, r1
  403018:	4602      	movne	r2, r0
  40301a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40301e:	bf06      	itte	eq
  403020:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403024:	ea91 0f03 	teqeq	r1, r3
  403028:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40302c:	bd30      	pop	{r4, r5, pc}
  40302e:	bf00      	nop

00403030 <__aeabi_ui2d>:
  403030:	f090 0f00 	teq	r0, #0
  403034:	bf04      	itt	eq
  403036:	2100      	moveq	r1, #0
  403038:	4770      	bxeq	lr
  40303a:	b530      	push	{r4, r5, lr}
  40303c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403040:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403044:	f04f 0500 	mov.w	r5, #0
  403048:	f04f 0100 	mov.w	r1, #0
  40304c:	e750      	b.n	402ef0 <__adddf3+0x138>
  40304e:	bf00      	nop

00403050 <__aeabi_i2d>:
  403050:	f090 0f00 	teq	r0, #0
  403054:	bf04      	itt	eq
  403056:	2100      	moveq	r1, #0
  403058:	4770      	bxeq	lr
  40305a:	b530      	push	{r4, r5, lr}
  40305c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403060:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403064:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403068:	bf48      	it	mi
  40306a:	4240      	negmi	r0, r0
  40306c:	f04f 0100 	mov.w	r1, #0
  403070:	e73e      	b.n	402ef0 <__adddf3+0x138>
  403072:	bf00      	nop

00403074 <__aeabi_f2d>:
  403074:	0042      	lsls	r2, r0, #1
  403076:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40307a:	ea4f 0131 	mov.w	r1, r1, rrx
  40307e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403082:	bf1f      	itttt	ne
  403084:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403088:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40308c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403090:	4770      	bxne	lr
  403092:	f092 0f00 	teq	r2, #0
  403096:	bf14      	ite	ne
  403098:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40309c:	4770      	bxeq	lr
  40309e:	b530      	push	{r4, r5, lr}
  4030a0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4030a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4030a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4030ac:	e720      	b.n	402ef0 <__adddf3+0x138>
  4030ae:	bf00      	nop

004030b0 <__aeabi_ul2d>:
  4030b0:	ea50 0201 	orrs.w	r2, r0, r1
  4030b4:	bf08      	it	eq
  4030b6:	4770      	bxeq	lr
  4030b8:	b530      	push	{r4, r5, lr}
  4030ba:	f04f 0500 	mov.w	r5, #0
  4030be:	e00a      	b.n	4030d6 <__aeabi_l2d+0x16>

004030c0 <__aeabi_l2d>:
  4030c0:	ea50 0201 	orrs.w	r2, r0, r1
  4030c4:	bf08      	it	eq
  4030c6:	4770      	bxeq	lr
  4030c8:	b530      	push	{r4, r5, lr}
  4030ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4030ce:	d502      	bpl.n	4030d6 <__aeabi_l2d+0x16>
  4030d0:	4240      	negs	r0, r0
  4030d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4030d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4030da:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4030de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4030e2:	f43f aedc 	beq.w	402e9e <__adddf3+0xe6>
  4030e6:	f04f 0203 	mov.w	r2, #3
  4030ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4030ee:	bf18      	it	ne
  4030f0:	3203      	addne	r2, #3
  4030f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4030f6:	bf18      	it	ne
  4030f8:	3203      	addne	r2, #3
  4030fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4030fe:	f1c2 0320 	rsb	r3, r2, #32
  403102:	fa00 fc03 	lsl.w	ip, r0, r3
  403106:	fa20 f002 	lsr.w	r0, r0, r2
  40310a:	fa01 fe03 	lsl.w	lr, r1, r3
  40310e:	ea40 000e 	orr.w	r0, r0, lr
  403112:	fa21 f102 	lsr.w	r1, r1, r2
  403116:	4414      	add	r4, r2
  403118:	e6c1      	b.n	402e9e <__adddf3+0xe6>
  40311a:	bf00      	nop

0040311c <__aeabi_dmul>:
  40311c:	b570      	push	{r4, r5, r6, lr}
  40311e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403122:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40312a:	bf1d      	ittte	ne
  40312c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403130:	ea94 0f0c 	teqne	r4, ip
  403134:	ea95 0f0c 	teqne	r5, ip
  403138:	f000 f8de 	bleq	4032f8 <__aeabi_dmul+0x1dc>
  40313c:	442c      	add	r4, r5
  40313e:	ea81 0603 	eor.w	r6, r1, r3
  403142:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403146:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40314a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40314e:	bf18      	it	ne
  403150:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40315c:	d038      	beq.n	4031d0 <__aeabi_dmul+0xb4>
  40315e:	fba0 ce02 	umull	ip, lr, r0, r2
  403162:	f04f 0500 	mov.w	r5, #0
  403166:	fbe1 e502 	umlal	lr, r5, r1, r2
  40316a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40316e:	fbe0 e503 	umlal	lr, r5, r0, r3
  403172:	f04f 0600 	mov.w	r6, #0
  403176:	fbe1 5603 	umlal	r5, r6, r1, r3
  40317a:	f09c 0f00 	teq	ip, #0
  40317e:	bf18      	it	ne
  403180:	f04e 0e01 	orrne.w	lr, lr, #1
  403184:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403188:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40318c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403190:	d204      	bcs.n	40319c <__aeabi_dmul+0x80>
  403192:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403196:	416d      	adcs	r5, r5
  403198:	eb46 0606 	adc.w	r6, r6, r6
  40319c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4031a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4031a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4031a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4031ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4031b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4031b4:	bf88      	it	hi
  4031b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4031ba:	d81e      	bhi.n	4031fa <__aeabi_dmul+0xde>
  4031bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4031c0:	bf08      	it	eq
  4031c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4031c6:	f150 0000 	adcs.w	r0, r0, #0
  4031ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4031ce:	bd70      	pop	{r4, r5, r6, pc}
  4031d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4031d4:	ea46 0101 	orr.w	r1, r6, r1
  4031d8:	ea40 0002 	orr.w	r0, r0, r2
  4031dc:	ea81 0103 	eor.w	r1, r1, r3
  4031e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4031e4:	bfc2      	ittt	gt
  4031e6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4031ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4031ee:	bd70      	popgt	{r4, r5, r6, pc}
  4031f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4031f4:	f04f 0e00 	mov.w	lr, #0
  4031f8:	3c01      	subs	r4, #1
  4031fa:	f300 80ab 	bgt.w	403354 <__aeabi_dmul+0x238>
  4031fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403202:	bfde      	ittt	le
  403204:	2000      	movle	r0, #0
  403206:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40320a:	bd70      	pople	{r4, r5, r6, pc}
  40320c:	f1c4 0400 	rsb	r4, r4, #0
  403210:	3c20      	subs	r4, #32
  403212:	da35      	bge.n	403280 <__aeabi_dmul+0x164>
  403214:	340c      	adds	r4, #12
  403216:	dc1b      	bgt.n	403250 <__aeabi_dmul+0x134>
  403218:	f104 0414 	add.w	r4, r4, #20
  40321c:	f1c4 0520 	rsb	r5, r4, #32
  403220:	fa00 f305 	lsl.w	r3, r0, r5
  403224:	fa20 f004 	lsr.w	r0, r0, r4
  403228:	fa01 f205 	lsl.w	r2, r1, r5
  40322c:	ea40 0002 	orr.w	r0, r0, r2
  403230:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403234:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403238:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40323c:	fa21 f604 	lsr.w	r6, r1, r4
  403240:	eb42 0106 	adc.w	r1, r2, r6
  403244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403248:	bf08      	it	eq
  40324a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40324e:	bd70      	pop	{r4, r5, r6, pc}
  403250:	f1c4 040c 	rsb	r4, r4, #12
  403254:	f1c4 0520 	rsb	r5, r4, #32
  403258:	fa00 f304 	lsl.w	r3, r0, r4
  40325c:	fa20 f005 	lsr.w	r0, r0, r5
  403260:	fa01 f204 	lsl.w	r2, r1, r4
  403264:	ea40 0002 	orr.w	r0, r0, r2
  403268:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40326c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403270:	f141 0100 	adc.w	r1, r1, #0
  403274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403278:	bf08      	it	eq
  40327a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40327e:	bd70      	pop	{r4, r5, r6, pc}
  403280:	f1c4 0520 	rsb	r5, r4, #32
  403284:	fa00 f205 	lsl.w	r2, r0, r5
  403288:	ea4e 0e02 	orr.w	lr, lr, r2
  40328c:	fa20 f304 	lsr.w	r3, r0, r4
  403290:	fa01 f205 	lsl.w	r2, r1, r5
  403294:	ea43 0302 	orr.w	r3, r3, r2
  403298:	fa21 f004 	lsr.w	r0, r1, r4
  40329c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4032a0:	fa21 f204 	lsr.w	r2, r1, r4
  4032a4:	ea20 0002 	bic.w	r0, r0, r2
  4032a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4032ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4032b0:	bf08      	it	eq
  4032b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4032b6:	bd70      	pop	{r4, r5, r6, pc}
  4032b8:	f094 0f00 	teq	r4, #0
  4032bc:	d10f      	bne.n	4032de <__aeabi_dmul+0x1c2>
  4032be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4032c2:	0040      	lsls	r0, r0, #1
  4032c4:	eb41 0101 	adc.w	r1, r1, r1
  4032c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4032cc:	bf08      	it	eq
  4032ce:	3c01      	subeq	r4, #1
  4032d0:	d0f7      	beq.n	4032c2 <__aeabi_dmul+0x1a6>
  4032d2:	ea41 0106 	orr.w	r1, r1, r6
  4032d6:	f095 0f00 	teq	r5, #0
  4032da:	bf18      	it	ne
  4032dc:	4770      	bxne	lr
  4032de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4032e2:	0052      	lsls	r2, r2, #1
  4032e4:	eb43 0303 	adc.w	r3, r3, r3
  4032e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4032ec:	bf08      	it	eq
  4032ee:	3d01      	subeq	r5, #1
  4032f0:	d0f7      	beq.n	4032e2 <__aeabi_dmul+0x1c6>
  4032f2:	ea43 0306 	orr.w	r3, r3, r6
  4032f6:	4770      	bx	lr
  4032f8:	ea94 0f0c 	teq	r4, ip
  4032fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403300:	bf18      	it	ne
  403302:	ea95 0f0c 	teqne	r5, ip
  403306:	d00c      	beq.n	403322 <__aeabi_dmul+0x206>
  403308:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40330c:	bf18      	it	ne
  40330e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403312:	d1d1      	bne.n	4032b8 <__aeabi_dmul+0x19c>
  403314:	ea81 0103 	eor.w	r1, r1, r3
  403318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40331c:	f04f 0000 	mov.w	r0, #0
  403320:	bd70      	pop	{r4, r5, r6, pc}
  403322:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403326:	bf06      	itte	eq
  403328:	4610      	moveq	r0, r2
  40332a:	4619      	moveq	r1, r3
  40332c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403330:	d019      	beq.n	403366 <__aeabi_dmul+0x24a>
  403332:	ea94 0f0c 	teq	r4, ip
  403336:	d102      	bne.n	40333e <__aeabi_dmul+0x222>
  403338:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40333c:	d113      	bne.n	403366 <__aeabi_dmul+0x24a>
  40333e:	ea95 0f0c 	teq	r5, ip
  403342:	d105      	bne.n	403350 <__aeabi_dmul+0x234>
  403344:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403348:	bf1c      	itt	ne
  40334a:	4610      	movne	r0, r2
  40334c:	4619      	movne	r1, r3
  40334e:	d10a      	bne.n	403366 <__aeabi_dmul+0x24a>
  403350:	ea81 0103 	eor.w	r1, r1, r3
  403354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403358:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40335c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403360:	f04f 0000 	mov.w	r0, #0
  403364:	bd70      	pop	{r4, r5, r6, pc}
  403366:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40336a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40336e:	bd70      	pop	{r4, r5, r6, pc}

00403370 <__aeabi_ddiv>:
  403370:	b570      	push	{r4, r5, r6, lr}
  403372:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403376:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40337a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40337e:	bf1d      	ittte	ne
  403380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403384:	ea94 0f0c 	teqne	r4, ip
  403388:	ea95 0f0c 	teqne	r5, ip
  40338c:	f000 f8a7 	bleq	4034de <__aeabi_ddiv+0x16e>
  403390:	eba4 0405 	sub.w	r4, r4, r5
  403394:	ea81 0e03 	eor.w	lr, r1, r3
  403398:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40339c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4033a0:	f000 8088 	beq.w	4034b4 <__aeabi_ddiv+0x144>
  4033a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4033a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4033ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4033b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4033b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4033b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4033bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4033c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4033c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4033c8:	429d      	cmp	r5, r3
  4033ca:	bf08      	it	eq
  4033cc:	4296      	cmpeq	r6, r2
  4033ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4033d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4033d6:	d202      	bcs.n	4033de <__aeabi_ddiv+0x6e>
  4033d8:	085b      	lsrs	r3, r3, #1
  4033da:	ea4f 0232 	mov.w	r2, r2, rrx
  4033de:	1ab6      	subs	r6, r6, r2
  4033e0:	eb65 0503 	sbc.w	r5, r5, r3
  4033e4:	085b      	lsrs	r3, r3, #1
  4033e6:	ea4f 0232 	mov.w	r2, r2, rrx
  4033ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4033ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4033f2:	ebb6 0e02 	subs.w	lr, r6, r2
  4033f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4033fa:	bf22      	ittt	cs
  4033fc:	1ab6      	subcs	r6, r6, r2
  4033fe:	4675      	movcs	r5, lr
  403400:	ea40 000c 	orrcs.w	r0, r0, ip
  403404:	085b      	lsrs	r3, r3, #1
  403406:	ea4f 0232 	mov.w	r2, r2, rrx
  40340a:	ebb6 0e02 	subs.w	lr, r6, r2
  40340e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403412:	bf22      	ittt	cs
  403414:	1ab6      	subcs	r6, r6, r2
  403416:	4675      	movcs	r5, lr
  403418:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40341c:	085b      	lsrs	r3, r3, #1
  40341e:	ea4f 0232 	mov.w	r2, r2, rrx
  403422:	ebb6 0e02 	subs.w	lr, r6, r2
  403426:	eb75 0e03 	sbcs.w	lr, r5, r3
  40342a:	bf22      	ittt	cs
  40342c:	1ab6      	subcs	r6, r6, r2
  40342e:	4675      	movcs	r5, lr
  403430:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403434:	085b      	lsrs	r3, r3, #1
  403436:	ea4f 0232 	mov.w	r2, r2, rrx
  40343a:	ebb6 0e02 	subs.w	lr, r6, r2
  40343e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403442:	bf22      	ittt	cs
  403444:	1ab6      	subcs	r6, r6, r2
  403446:	4675      	movcs	r5, lr
  403448:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40344c:	ea55 0e06 	orrs.w	lr, r5, r6
  403450:	d018      	beq.n	403484 <__aeabi_ddiv+0x114>
  403452:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403456:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40345a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40345e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403462:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403466:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40346a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40346e:	d1c0      	bne.n	4033f2 <__aeabi_ddiv+0x82>
  403470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403474:	d10b      	bne.n	40348e <__aeabi_ddiv+0x11e>
  403476:	ea41 0100 	orr.w	r1, r1, r0
  40347a:	f04f 0000 	mov.w	r0, #0
  40347e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403482:	e7b6      	b.n	4033f2 <__aeabi_ddiv+0x82>
  403484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403488:	bf04      	itt	eq
  40348a:	4301      	orreq	r1, r0
  40348c:	2000      	moveq	r0, #0
  40348e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403492:	bf88      	it	hi
  403494:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403498:	f63f aeaf 	bhi.w	4031fa <__aeabi_dmul+0xde>
  40349c:	ebb5 0c03 	subs.w	ip, r5, r3
  4034a0:	bf04      	itt	eq
  4034a2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4034a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4034aa:	f150 0000 	adcs.w	r0, r0, #0
  4034ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4034b2:	bd70      	pop	{r4, r5, r6, pc}
  4034b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4034b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4034bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4034c0:	bfc2      	ittt	gt
  4034c2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4034c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4034ca:	bd70      	popgt	{r4, r5, r6, pc}
  4034cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4034d0:	f04f 0e00 	mov.w	lr, #0
  4034d4:	3c01      	subs	r4, #1
  4034d6:	e690      	b.n	4031fa <__aeabi_dmul+0xde>
  4034d8:	ea45 0e06 	orr.w	lr, r5, r6
  4034dc:	e68d      	b.n	4031fa <__aeabi_dmul+0xde>
  4034de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4034e2:	ea94 0f0c 	teq	r4, ip
  4034e6:	bf08      	it	eq
  4034e8:	ea95 0f0c 	teqeq	r5, ip
  4034ec:	f43f af3b 	beq.w	403366 <__aeabi_dmul+0x24a>
  4034f0:	ea94 0f0c 	teq	r4, ip
  4034f4:	d10a      	bne.n	40350c <__aeabi_ddiv+0x19c>
  4034f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4034fa:	f47f af34 	bne.w	403366 <__aeabi_dmul+0x24a>
  4034fe:	ea95 0f0c 	teq	r5, ip
  403502:	f47f af25 	bne.w	403350 <__aeabi_dmul+0x234>
  403506:	4610      	mov	r0, r2
  403508:	4619      	mov	r1, r3
  40350a:	e72c      	b.n	403366 <__aeabi_dmul+0x24a>
  40350c:	ea95 0f0c 	teq	r5, ip
  403510:	d106      	bne.n	403520 <__aeabi_ddiv+0x1b0>
  403512:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403516:	f43f aefd 	beq.w	403314 <__aeabi_dmul+0x1f8>
  40351a:	4610      	mov	r0, r2
  40351c:	4619      	mov	r1, r3
  40351e:	e722      	b.n	403366 <__aeabi_dmul+0x24a>
  403520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403524:	bf18      	it	ne
  403526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40352a:	f47f aec5 	bne.w	4032b8 <__aeabi_dmul+0x19c>
  40352e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403532:	f47f af0d 	bne.w	403350 <__aeabi_dmul+0x234>
  403536:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40353a:	f47f aeeb 	bne.w	403314 <__aeabi_dmul+0x1f8>
  40353e:	e712      	b.n	403366 <__aeabi_dmul+0x24a>

00403540 <__gedf2>:
  403540:	f04f 3cff 	mov.w	ip, #4294967295
  403544:	e006      	b.n	403554 <__cmpdf2+0x4>
  403546:	bf00      	nop

00403548 <__ledf2>:
  403548:	f04f 0c01 	mov.w	ip, #1
  40354c:	e002      	b.n	403554 <__cmpdf2+0x4>
  40354e:	bf00      	nop

00403550 <__cmpdf2>:
  403550:	f04f 0c01 	mov.w	ip, #1
  403554:	f84d cd04 	str.w	ip, [sp, #-4]!
  403558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40355c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403564:	bf18      	it	ne
  403566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40356a:	d01b      	beq.n	4035a4 <__cmpdf2+0x54>
  40356c:	b001      	add	sp, #4
  40356e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403572:	bf0c      	ite	eq
  403574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403578:	ea91 0f03 	teqne	r1, r3
  40357c:	bf02      	ittt	eq
  40357e:	ea90 0f02 	teqeq	r0, r2
  403582:	2000      	moveq	r0, #0
  403584:	4770      	bxeq	lr
  403586:	f110 0f00 	cmn.w	r0, #0
  40358a:	ea91 0f03 	teq	r1, r3
  40358e:	bf58      	it	pl
  403590:	4299      	cmppl	r1, r3
  403592:	bf08      	it	eq
  403594:	4290      	cmpeq	r0, r2
  403596:	bf2c      	ite	cs
  403598:	17d8      	asrcs	r0, r3, #31
  40359a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40359e:	f040 0001 	orr.w	r0, r0, #1
  4035a2:	4770      	bx	lr
  4035a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4035a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4035ac:	d102      	bne.n	4035b4 <__cmpdf2+0x64>
  4035ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4035b2:	d107      	bne.n	4035c4 <__cmpdf2+0x74>
  4035b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4035b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4035bc:	d1d6      	bne.n	40356c <__cmpdf2+0x1c>
  4035be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4035c2:	d0d3      	beq.n	40356c <__cmpdf2+0x1c>
  4035c4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4035c8:	4770      	bx	lr
  4035ca:	bf00      	nop

004035cc <__aeabi_cdrcmple>:
  4035cc:	4684      	mov	ip, r0
  4035ce:	4610      	mov	r0, r2
  4035d0:	4662      	mov	r2, ip
  4035d2:	468c      	mov	ip, r1
  4035d4:	4619      	mov	r1, r3
  4035d6:	4663      	mov	r3, ip
  4035d8:	e000      	b.n	4035dc <__aeabi_cdcmpeq>
  4035da:	bf00      	nop

004035dc <__aeabi_cdcmpeq>:
  4035dc:	b501      	push	{r0, lr}
  4035de:	f7ff ffb7 	bl	403550 <__cmpdf2>
  4035e2:	2800      	cmp	r0, #0
  4035e4:	bf48      	it	mi
  4035e6:	f110 0f00 	cmnmi.w	r0, #0
  4035ea:	bd01      	pop	{r0, pc}

004035ec <__aeabi_dcmpeq>:
  4035ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4035f0:	f7ff fff4 	bl	4035dc <__aeabi_cdcmpeq>
  4035f4:	bf0c      	ite	eq
  4035f6:	2001      	moveq	r0, #1
  4035f8:	2000      	movne	r0, #0
  4035fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4035fe:	bf00      	nop

00403600 <__aeabi_dcmplt>:
  403600:	f84d ed08 	str.w	lr, [sp, #-8]!
  403604:	f7ff ffea 	bl	4035dc <__aeabi_cdcmpeq>
  403608:	bf34      	ite	cc
  40360a:	2001      	movcc	r0, #1
  40360c:	2000      	movcs	r0, #0
  40360e:	f85d fb08 	ldr.w	pc, [sp], #8
  403612:	bf00      	nop

00403614 <__aeabi_dcmple>:
  403614:	f84d ed08 	str.w	lr, [sp, #-8]!
  403618:	f7ff ffe0 	bl	4035dc <__aeabi_cdcmpeq>
  40361c:	bf94      	ite	ls
  40361e:	2001      	movls	r0, #1
  403620:	2000      	movhi	r0, #0
  403622:	f85d fb08 	ldr.w	pc, [sp], #8
  403626:	bf00      	nop

00403628 <__aeabi_dcmpge>:
  403628:	f84d ed08 	str.w	lr, [sp, #-8]!
  40362c:	f7ff ffce 	bl	4035cc <__aeabi_cdrcmple>
  403630:	bf94      	ite	ls
  403632:	2001      	movls	r0, #1
  403634:	2000      	movhi	r0, #0
  403636:	f85d fb08 	ldr.w	pc, [sp], #8
  40363a:	bf00      	nop

0040363c <__aeabi_dcmpgt>:
  40363c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403640:	f7ff ffc4 	bl	4035cc <__aeabi_cdrcmple>
  403644:	bf34      	ite	cc
  403646:	2001      	movcc	r0, #1
  403648:	2000      	movcs	r0, #0
  40364a:	f85d fb08 	ldr.w	pc, [sp], #8
  40364e:	bf00      	nop

00403650 <__aeabi_dcmpun>:
  403650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403658:	d102      	bne.n	403660 <__aeabi_dcmpun+0x10>
  40365a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40365e:	d10a      	bne.n	403676 <__aeabi_dcmpun+0x26>
  403660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403668:	d102      	bne.n	403670 <__aeabi_dcmpun+0x20>
  40366a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40366e:	d102      	bne.n	403676 <__aeabi_dcmpun+0x26>
  403670:	f04f 0000 	mov.w	r0, #0
  403674:	4770      	bx	lr
  403676:	f04f 0001 	mov.w	r0, #1
  40367a:	4770      	bx	lr

0040367c <__aeabi_d2uiz>:
  40367c:	004a      	lsls	r2, r1, #1
  40367e:	d211      	bcs.n	4036a4 <__aeabi_d2uiz+0x28>
  403680:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403684:	d211      	bcs.n	4036aa <__aeabi_d2uiz+0x2e>
  403686:	d50d      	bpl.n	4036a4 <__aeabi_d2uiz+0x28>
  403688:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40368c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403690:	d40e      	bmi.n	4036b0 <__aeabi_d2uiz+0x34>
  403692:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40369a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40369e:	fa23 f002 	lsr.w	r0, r3, r2
  4036a2:	4770      	bx	lr
  4036a4:	f04f 0000 	mov.w	r0, #0
  4036a8:	4770      	bx	lr
  4036aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4036ae:	d102      	bne.n	4036b6 <__aeabi_d2uiz+0x3a>
  4036b0:	f04f 30ff 	mov.w	r0, #4294967295
  4036b4:	4770      	bx	lr
  4036b6:	f04f 0000 	mov.w	r0, #0
  4036ba:	4770      	bx	lr

004036bc <__aeabi_ldivmod>:
  4036bc:	b97b      	cbnz	r3, 4036de <__aeabi_ldivmod+0x22>
  4036be:	b972      	cbnz	r2, 4036de <__aeabi_ldivmod+0x22>
  4036c0:	2900      	cmp	r1, #0
  4036c2:	bfbe      	ittt	lt
  4036c4:	2000      	movlt	r0, #0
  4036c6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
  4036ca:	e006      	blt.n	4036da <__aeabi_ldivmod+0x1e>
  4036cc:	bf08      	it	eq
  4036ce:	2800      	cmpeq	r0, #0
  4036d0:	bf1c      	itt	ne
  4036d2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
  4036d6:	f04f 30ff 	movne.w	r0, #4294967295
  4036da:	f000 b9eb 	b.w	403ab4 <__aeabi_idiv0>
  4036de:	f1ad 0c08 	sub.w	ip, sp, #8
  4036e2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4036e6:	2900      	cmp	r1, #0
  4036e8:	db09      	blt.n	4036fe <__aeabi_ldivmod+0x42>
  4036ea:	2b00      	cmp	r3, #0
  4036ec:	db1a      	blt.n	403724 <__aeabi_ldivmod+0x68>
  4036ee:	f000 f873 	bl	4037d8 <__udivmoddi4>
  4036f2:	f8dd e004 	ldr.w	lr, [sp, #4]
  4036f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4036fa:	b004      	add	sp, #16
  4036fc:	4770      	bx	lr
  4036fe:	4240      	negs	r0, r0
  403700:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403704:	2b00      	cmp	r3, #0
  403706:	db1b      	blt.n	403740 <__aeabi_ldivmod+0x84>
  403708:	f000 f866 	bl	4037d8 <__udivmoddi4>
  40370c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403714:	b004      	add	sp, #16
  403716:	4240      	negs	r0, r0
  403718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40371c:	4252      	negs	r2, r2
  40371e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403722:	4770      	bx	lr
  403724:	4252      	negs	r2, r2
  403726:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40372a:	f000 f855 	bl	4037d8 <__udivmoddi4>
  40372e:	f8dd e004 	ldr.w	lr, [sp, #4]
  403732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403736:	b004      	add	sp, #16
  403738:	4240      	negs	r0, r0
  40373a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40373e:	4770      	bx	lr
  403740:	4252      	negs	r2, r2
  403742:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403746:	f000 f847 	bl	4037d8 <__udivmoddi4>
  40374a:	f8dd e004 	ldr.w	lr, [sp, #4]
  40374e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403752:	b004      	add	sp, #16
  403754:	4252      	negs	r2, r2
  403756:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40375a:	4770      	bx	lr

0040375c <__aeabi_d2lz>:
  40375c:	b538      	push	{r3, r4, r5, lr}
  40375e:	4605      	mov	r5, r0
  403760:	460c      	mov	r4, r1
  403762:	4628      	mov	r0, r5
  403764:	4621      	mov	r1, r4
  403766:	2200      	movs	r2, #0
  403768:	2300      	movs	r3, #0
  40376a:	f7ff ff49 	bl	403600 <__aeabi_dcmplt>
  40376e:	b928      	cbnz	r0, 40377c <__aeabi_d2lz+0x20>
  403770:	4628      	mov	r0, r5
  403772:	4621      	mov	r1, r4
  403774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403778:	f000 b80a 	b.w	403790 <__aeabi_d2ulz>
  40377c:	4628      	mov	r0, r5
  40377e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  403782:	f000 f805 	bl	403790 <__aeabi_d2ulz>
  403786:	4240      	negs	r0, r0
  403788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40378c:	bd38      	pop	{r3, r4, r5, pc}
  40378e:	bf00      	nop

00403790 <__aeabi_d2ulz>:
  403790:	b5d0      	push	{r4, r6, r7, lr}
  403792:	2200      	movs	r2, #0
  403794:	4b0e      	ldr	r3, [pc, #56]	; (4037d0 <__aeabi_d2ulz+0x40>)
  403796:	4606      	mov	r6, r0
  403798:	460f      	mov	r7, r1
  40379a:	f7ff fcbf 	bl	40311c <__aeabi_dmul>
  40379e:	f7ff ff6d 	bl	40367c <__aeabi_d2uiz>
  4037a2:	4604      	mov	r4, r0
  4037a4:	f7ff fc44 	bl	403030 <__aeabi_ui2d>
  4037a8:	2200      	movs	r2, #0
  4037aa:	4b0a      	ldr	r3, [pc, #40]	; (4037d4 <__aeabi_d2ulz+0x44>)
  4037ac:	f7ff fcb6 	bl	40311c <__aeabi_dmul>
  4037b0:	4602      	mov	r2, r0
  4037b2:	460b      	mov	r3, r1
  4037b4:	4630      	mov	r0, r6
  4037b6:	4639      	mov	r1, r7
  4037b8:	f7ff fafc 	bl	402db4 <__aeabi_dsub>
  4037bc:	f7ff ff5e 	bl	40367c <__aeabi_d2uiz>
  4037c0:	4623      	mov	r3, r4
  4037c2:	2200      	movs	r2, #0
  4037c4:	ea42 0200 	orr.w	r2, r2, r0
  4037c8:	4610      	mov	r0, r2
  4037ca:	4619      	mov	r1, r3
  4037cc:	bdd0      	pop	{r4, r6, r7, pc}
  4037ce:	bf00      	nop
  4037d0:	3df00000 	.word	0x3df00000
  4037d4:	41f00000 	.word	0x41f00000

004037d8 <__udivmoddi4>:
  4037d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4037dc:	468c      	mov	ip, r1
  4037de:	460d      	mov	r5, r1
  4037e0:	4604      	mov	r4, r0
  4037e2:	9e08      	ldr	r6, [sp, #32]
  4037e4:	2b00      	cmp	r3, #0
  4037e6:	d151      	bne.n	40388c <__udivmoddi4+0xb4>
  4037e8:	428a      	cmp	r2, r1
  4037ea:	4617      	mov	r7, r2
  4037ec:	d96d      	bls.n	4038ca <__udivmoddi4+0xf2>
  4037ee:	fab2 fe82 	clz	lr, r2
  4037f2:	f1be 0f00 	cmp.w	lr, #0
  4037f6:	d00b      	beq.n	403810 <__udivmoddi4+0x38>
  4037f8:	f1ce 0c20 	rsb	ip, lr, #32
  4037fc:	fa01 f50e 	lsl.w	r5, r1, lr
  403800:	fa20 fc0c 	lsr.w	ip, r0, ip
  403804:	fa02 f70e 	lsl.w	r7, r2, lr
  403808:	ea4c 0c05 	orr.w	ip, ip, r5
  40380c:	fa00 f40e 	lsl.w	r4, r0, lr
  403810:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403814:	0c25      	lsrs	r5, r4, #16
  403816:	fbbc f8fa 	udiv	r8, ip, sl
  40381a:	fa1f f987 	uxth.w	r9, r7
  40381e:	fb0a cc18 	mls	ip, sl, r8, ip
  403822:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403826:	fb08 f309 	mul.w	r3, r8, r9
  40382a:	42ab      	cmp	r3, r5
  40382c:	d90a      	bls.n	403844 <__udivmoddi4+0x6c>
  40382e:	19ed      	adds	r5, r5, r7
  403830:	f108 32ff 	add.w	r2, r8, #4294967295
  403834:	f080 8123 	bcs.w	403a7e <__udivmoddi4+0x2a6>
  403838:	42ab      	cmp	r3, r5
  40383a:	f240 8120 	bls.w	403a7e <__udivmoddi4+0x2a6>
  40383e:	f1a8 0802 	sub.w	r8, r8, #2
  403842:	443d      	add	r5, r7
  403844:	1aed      	subs	r5, r5, r3
  403846:	b2a4      	uxth	r4, r4
  403848:	fbb5 f0fa 	udiv	r0, r5, sl
  40384c:	fb0a 5510 	mls	r5, sl, r0, r5
  403850:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403854:	fb00 f909 	mul.w	r9, r0, r9
  403858:	45a1      	cmp	r9, r4
  40385a:	d909      	bls.n	403870 <__udivmoddi4+0x98>
  40385c:	19e4      	adds	r4, r4, r7
  40385e:	f100 33ff 	add.w	r3, r0, #4294967295
  403862:	f080 810a 	bcs.w	403a7a <__udivmoddi4+0x2a2>
  403866:	45a1      	cmp	r9, r4
  403868:	f240 8107 	bls.w	403a7a <__udivmoddi4+0x2a2>
  40386c:	3802      	subs	r0, #2
  40386e:	443c      	add	r4, r7
  403870:	eba4 0409 	sub.w	r4, r4, r9
  403874:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403878:	2100      	movs	r1, #0
  40387a:	2e00      	cmp	r6, #0
  40387c:	d061      	beq.n	403942 <__udivmoddi4+0x16a>
  40387e:	fa24 f40e 	lsr.w	r4, r4, lr
  403882:	2300      	movs	r3, #0
  403884:	6034      	str	r4, [r6, #0]
  403886:	6073      	str	r3, [r6, #4]
  403888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40388c:	428b      	cmp	r3, r1
  40388e:	d907      	bls.n	4038a0 <__udivmoddi4+0xc8>
  403890:	2e00      	cmp	r6, #0
  403892:	d054      	beq.n	40393e <__udivmoddi4+0x166>
  403894:	2100      	movs	r1, #0
  403896:	e886 0021 	stmia.w	r6, {r0, r5}
  40389a:	4608      	mov	r0, r1
  40389c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4038a0:	fab3 f183 	clz	r1, r3
  4038a4:	2900      	cmp	r1, #0
  4038a6:	f040 808e 	bne.w	4039c6 <__udivmoddi4+0x1ee>
  4038aa:	42ab      	cmp	r3, r5
  4038ac:	d302      	bcc.n	4038b4 <__udivmoddi4+0xdc>
  4038ae:	4282      	cmp	r2, r0
  4038b0:	f200 80fa 	bhi.w	403aa8 <__udivmoddi4+0x2d0>
  4038b4:	1a84      	subs	r4, r0, r2
  4038b6:	eb65 0503 	sbc.w	r5, r5, r3
  4038ba:	2001      	movs	r0, #1
  4038bc:	46ac      	mov	ip, r5
  4038be:	2e00      	cmp	r6, #0
  4038c0:	d03f      	beq.n	403942 <__udivmoddi4+0x16a>
  4038c2:	e886 1010 	stmia.w	r6, {r4, ip}
  4038c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4038ca:	b912      	cbnz	r2, 4038d2 <__udivmoddi4+0xfa>
  4038cc:	2701      	movs	r7, #1
  4038ce:	fbb7 f7f2 	udiv	r7, r7, r2
  4038d2:	fab7 fe87 	clz	lr, r7
  4038d6:	f1be 0f00 	cmp.w	lr, #0
  4038da:	d134      	bne.n	403946 <__udivmoddi4+0x16e>
  4038dc:	1beb      	subs	r3, r5, r7
  4038de:	0c3a      	lsrs	r2, r7, #16
  4038e0:	fa1f fc87 	uxth.w	ip, r7
  4038e4:	2101      	movs	r1, #1
  4038e6:	fbb3 f8f2 	udiv	r8, r3, r2
  4038ea:	0c25      	lsrs	r5, r4, #16
  4038ec:	fb02 3318 	mls	r3, r2, r8, r3
  4038f0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4038f4:	fb0c f308 	mul.w	r3, ip, r8
  4038f8:	42ab      	cmp	r3, r5
  4038fa:	d907      	bls.n	40390c <__udivmoddi4+0x134>
  4038fc:	19ed      	adds	r5, r5, r7
  4038fe:	f108 30ff 	add.w	r0, r8, #4294967295
  403902:	d202      	bcs.n	40390a <__udivmoddi4+0x132>
  403904:	42ab      	cmp	r3, r5
  403906:	f200 80d1 	bhi.w	403aac <__udivmoddi4+0x2d4>
  40390a:	4680      	mov	r8, r0
  40390c:	1aed      	subs	r5, r5, r3
  40390e:	b2a3      	uxth	r3, r4
  403910:	fbb5 f0f2 	udiv	r0, r5, r2
  403914:	fb02 5510 	mls	r5, r2, r0, r5
  403918:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40391c:	fb0c fc00 	mul.w	ip, ip, r0
  403920:	45a4      	cmp	ip, r4
  403922:	d907      	bls.n	403934 <__udivmoddi4+0x15c>
  403924:	19e4      	adds	r4, r4, r7
  403926:	f100 33ff 	add.w	r3, r0, #4294967295
  40392a:	d202      	bcs.n	403932 <__udivmoddi4+0x15a>
  40392c:	45a4      	cmp	ip, r4
  40392e:	f200 80b8 	bhi.w	403aa2 <__udivmoddi4+0x2ca>
  403932:	4618      	mov	r0, r3
  403934:	eba4 040c 	sub.w	r4, r4, ip
  403938:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40393c:	e79d      	b.n	40387a <__udivmoddi4+0xa2>
  40393e:	4631      	mov	r1, r6
  403940:	4630      	mov	r0, r6
  403942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403946:	f1ce 0420 	rsb	r4, lr, #32
  40394a:	fa05 f30e 	lsl.w	r3, r5, lr
  40394e:	fa07 f70e 	lsl.w	r7, r7, lr
  403952:	fa20 f804 	lsr.w	r8, r0, r4
  403956:	0c3a      	lsrs	r2, r7, #16
  403958:	fa25 f404 	lsr.w	r4, r5, r4
  40395c:	ea48 0803 	orr.w	r8, r8, r3
  403960:	fbb4 f1f2 	udiv	r1, r4, r2
  403964:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403968:	fb02 4411 	mls	r4, r2, r1, r4
  40396c:	fa1f fc87 	uxth.w	ip, r7
  403970:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403974:	fb01 f30c 	mul.w	r3, r1, ip
  403978:	42ab      	cmp	r3, r5
  40397a:	fa00 f40e 	lsl.w	r4, r0, lr
  40397e:	d909      	bls.n	403994 <__udivmoddi4+0x1bc>
  403980:	19ed      	adds	r5, r5, r7
  403982:	f101 30ff 	add.w	r0, r1, #4294967295
  403986:	f080 808a 	bcs.w	403a9e <__udivmoddi4+0x2c6>
  40398a:	42ab      	cmp	r3, r5
  40398c:	f240 8087 	bls.w	403a9e <__udivmoddi4+0x2c6>
  403990:	3902      	subs	r1, #2
  403992:	443d      	add	r5, r7
  403994:	1aeb      	subs	r3, r5, r3
  403996:	fa1f f588 	uxth.w	r5, r8
  40399a:	fbb3 f0f2 	udiv	r0, r3, r2
  40399e:	fb02 3310 	mls	r3, r2, r0, r3
  4039a2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4039a6:	fb00 f30c 	mul.w	r3, r0, ip
  4039aa:	42ab      	cmp	r3, r5
  4039ac:	d907      	bls.n	4039be <__udivmoddi4+0x1e6>
  4039ae:	19ed      	adds	r5, r5, r7
  4039b0:	f100 38ff 	add.w	r8, r0, #4294967295
  4039b4:	d26f      	bcs.n	403a96 <__udivmoddi4+0x2be>
  4039b6:	42ab      	cmp	r3, r5
  4039b8:	d96d      	bls.n	403a96 <__udivmoddi4+0x2be>
  4039ba:	3802      	subs	r0, #2
  4039bc:	443d      	add	r5, r7
  4039be:	1aeb      	subs	r3, r5, r3
  4039c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4039c4:	e78f      	b.n	4038e6 <__udivmoddi4+0x10e>
  4039c6:	f1c1 0720 	rsb	r7, r1, #32
  4039ca:	fa22 f807 	lsr.w	r8, r2, r7
  4039ce:	408b      	lsls	r3, r1
  4039d0:	fa05 f401 	lsl.w	r4, r5, r1
  4039d4:	ea48 0303 	orr.w	r3, r8, r3
  4039d8:	fa20 fe07 	lsr.w	lr, r0, r7
  4039dc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4039e0:	40fd      	lsrs	r5, r7
  4039e2:	ea4e 0e04 	orr.w	lr, lr, r4
  4039e6:	fbb5 f9fc 	udiv	r9, r5, ip
  4039ea:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4039ee:	fb0c 5519 	mls	r5, ip, r9, r5
  4039f2:	fa1f f883 	uxth.w	r8, r3
  4039f6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4039fa:	fb09 f408 	mul.w	r4, r9, r8
  4039fe:	42ac      	cmp	r4, r5
  403a00:	fa02 f201 	lsl.w	r2, r2, r1
  403a04:	fa00 fa01 	lsl.w	sl, r0, r1
  403a08:	d908      	bls.n	403a1c <__udivmoddi4+0x244>
  403a0a:	18ed      	adds	r5, r5, r3
  403a0c:	f109 30ff 	add.w	r0, r9, #4294967295
  403a10:	d243      	bcs.n	403a9a <__udivmoddi4+0x2c2>
  403a12:	42ac      	cmp	r4, r5
  403a14:	d941      	bls.n	403a9a <__udivmoddi4+0x2c2>
  403a16:	f1a9 0902 	sub.w	r9, r9, #2
  403a1a:	441d      	add	r5, r3
  403a1c:	1b2d      	subs	r5, r5, r4
  403a1e:	fa1f fe8e 	uxth.w	lr, lr
  403a22:	fbb5 f0fc 	udiv	r0, r5, ip
  403a26:	fb0c 5510 	mls	r5, ip, r0, r5
  403a2a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403a2e:	fb00 f808 	mul.w	r8, r0, r8
  403a32:	45a0      	cmp	r8, r4
  403a34:	d907      	bls.n	403a46 <__udivmoddi4+0x26e>
  403a36:	18e4      	adds	r4, r4, r3
  403a38:	f100 35ff 	add.w	r5, r0, #4294967295
  403a3c:	d229      	bcs.n	403a92 <__udivmoddi4+0x2ba>
  403a3e:	45a0      	cmp	r8, r4
  403a40:	d927      	bls.n	403a92 <__udivmoddi4+0x2ba>
  403a42:	3802      	subs	r0, #2
  403a44:	441c      	add	r4, r3
  403a46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403a4a:	eba4 0408 	sub.w	r4, r4, r8
  403a4e:	fba0 8902 	umull	r8, r9, r0, r2
  403a52:	454c      	cmp	r4, r9
  403a54:	46c6      	mov	lr, r8
  403a56:	464d      	mov	r5, r9
  403a58:	d315      	bcc.n	403a86 <__udivmoddi4+0x2ae>
  403a5a:	d012      	beq.n	403a82 <__udivmoddi4+0x2aa>
  403a5c:	b156      	cbz	r6, 403a74 <__udivmoddi4+0x29c>
  403a5e:	ebba 030e 	subs.w	r3, sl, lr
  403a62:	eb64 0405 	sbc.w	r4, r4, r5
  403a66:	fa04 f707 	lsl.w	r7, r4, r7
  403a6a:	40cb      	lsrs	r3, r1
  403a6c:	431f      	orrs	r7, r3
  403a6e:	40cc      	lsrs	r4, r1
  403a70:	6037      	str	r7, [r6, #0]
  403a72:	6074      	str	r4, [r6, #4]
  403a74:	2100      	movs	r1, #0
  403a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a7a:	4618      	mov	r0, r3
  403a7c:	e6f8      	b.n	403870 <__udivmoddi4+0x98>
  403a7e:	4690      	mov	r8, r2
  403a80:	e6e0      	b.n	403844 <__udivmoddi4+0x6c>
  403a82:	45c2      	cmp	sl, r8
  403a84:	d2ea      	bcs.n	403a5c <__udivmoddi4+0x284>
  403a86:	ebb8 0e02 	subs.w	lr, r8, r2
  403a8a:	eb69 0503 	sbc.w	r5, r9, r3
  403a8e:	3801      	subs	r0, #1
  403a90:	e7e4      	b.n	403a5c <__udivmoddi4+0x284>
  403a92:	4628      	mov	r0, r5
  403a94:	e7d7      	b.n	403a46 <__udivmoddi4+0x26e>
  403a96:	4640      	mov	r0, r8
  403a98:	e791      	b.n	4039be <__udivmoddi4+0x1e6>
  403a9a:	4681      	mov	r9, r0
  403a9c:	e7be      	b.n	403a1c <__udivmoddi4+0x244>
  403a9e:	4601      	mov	r1, r0
  403aa0:	e778      	b.n	403994 <__udivmoddi4+0x1bc>
  403aa2:	3802      	subs	r0, #2
  403aa4:	443c      	add	r4, r7
  403aa6:	e745      	b.n	403934 <__udivmoddi4+0x15c>
  403aa8:	4608      	mov	r0, r1
  403aaa:	e708      	b.n	4038be <__udivmoddi4+0xe6>
  403aac:	f1a8 0802 	sub.w	r8, r8, #2
  403ab0:	443d      	add	r5, r7
  403ab2:	e72b      	b.n	40390c <__udivmoddi4+0x134>

00403ab4 <__aeabi_idiv0>:
  403ab4:	4770      	bx	lr
  403ab6:	bf00      	nop

00403ab8 <__errno>:
  403ab8:	4b01      	ldr	r3, [pc, #4]	; (403ac0 <__errno+0x8>)
  403aba:	6818      	ldr	r0, [r3, #0]
  403abc:	4770      	bx	lr
  403abe:	bf00      	nop
  403ac0:	20000018 	.word	0x20000018

00403ac4 <__libc_init_array>:
  403ac4:	b570      	push	{r4, r5, r6, lr}
  403ac6:	4e0f      	ldr	r6, [pc, #60]	; (403b04 <__libc_init_array+0x40>)
  403ac8:	4d0f      	ldr	r5, [pc, #60]	; (403b08 <__libc_init_array+0x44>)
  403aca:	1b76      	subs	r6, r6, r5
  403acc:	10b6      	asrs	r6, r6, #2
  403ace:	bf18      	it	ne
  403ad0:	2400      	movne	r4, #0
  403ad2:	d005      	beq.n	403ae0 <__libc_init_array+0x1c>
  403ad4:	3401      	adds	r4, #1
  403ad6:	f855 3b04 	ldr.w	r3, [r5], #4
  403ada:	4798      	blx	r3
  403adc:	42a6      	cmp	r6, r4
  403ade:	d1f9      	bne.n	403ad4 <__libc_init_array+0x10>
  403ae0:	4e0a      	ldr	r6, [pc, #40]	; (403b0c <__libc_init_array+0x48>)
  403ae2:	4d0b      	ldr	r5, [pc, #44]	; (403b10 <__libc_init_array+0x4c>)
  403ae4:	1b76      	subs	r6, r6, r5
  403ae6:	f001 f879 	bl	404bdc <_init>
  403aea:	10b6      	asrs	r6, r6, #2
  403aec:	bf18      	it	ne
  403aee:	2400      	movne	r4, #0
  403af0:	d006      	beq.n	403b00 <__libc_init_array+0x3c>
  403af2:	3401      	adds	r4, #1
  403af4:	f855 3b04 	ldr.w	r3, [r5], #4
  403af8:	4798      	blx	r3
  403afa:	42a6      	cmp	r6, r4
  403afc:	d1f9      	bne.n	403af2 <__libc_init_array+0x2e>
  403afe:	bd70      	pop	{r4, r5, r6, pc}
  403b00:	bd70      	pop	{r4, r5, r6, pc}
  403b02:	bf00      	nop
  403b04:	00404be8 	.word	0x00404be8
  403b08:	00404be8 	.word	0x00404be8
  403b0c:	00404bf0 	.word	0x00404bf0
  403b10:	00404be8 	.word	0x00404be8

00403b14 <memset>:
  403b14:	b470      	push	{r4, r5, r6}
  403b16:	0786      	lsls	r6, r0, #30
  403b18:	d046      	beq.n	403ba8 <memset+0x94>
  403b1a:	1e54      	subs	r4, r2, #1
  403b1c:	2a00      	cmp	r2, #0
  403b1e:	d041      	beq.n	403ba4 <memset+0x90>
  403b20:	b2ca      	uxtb	r2, r1
  403b22:	4603      	mov	r3, r0
  403b24:	e002      	b.n	403b2c <memset+0x18>
  403b26:	f114 34ff 	adds.w	r4, r4, #4294967295
  403b2a:	d33b      	bcc.n	403ba4 <memset+0x90>
  403b2c:	f803 2b01 	strb.w	r2, [r3], #1
  403b30:	079d      	lsls	r5, r3, #30
  403b32:	d1f8      	bne.n	403b26 <memset+0x12>
  403b34:	2c03      	cmp	r4, #3
  403b36:	d92e      	bls.n	403b96 <memset+0x82>
  403b38:	b2cd      	uxtb	r5, r1
  403b3a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403b3e:	2c0f      	cmp	r4, #15
  403b40:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403b44:	d919      	bls.n	403b7a <memset+0x66>
  403b46:	f103 0210 	add.w	r2, r3, #16
  403b4a:	4626      	mov	r6, r4
  403b4c:	3e10      	subs	r6, #16
  403b4e:	2e0f      	cmp	r6, #15
  403b50:	f842 5c10 	str.w	r5, [r2, #-16]
  403b54:	f842 5c0c 	str.w	r5, [r2, #-12]
  403b58:	f842 5c08 	str.w	r5, [r2, #-8]
  403b5c:	f842 5c04 	str.w	r5, [r2, #-4]
  403b60:	f102 0210 	add.w	r2, r2, #16
  403b64:	d8f2      	bhi.n	403b4c <memset+0x38>
  403b66:	f1a4 0210 	sub.w	r2, r4, #16
  403b6a:	f022 020f 	bic.w	r2, r2, #15
  403b6e:	f004 040f 	and.w	r4, r4, #15
  403b72:	3210      	adds	r2, #16
  403b74:	2c03      	cmp	r4, #3
  403b76:	4413      	add	r3, r2
  403b78:	d90d      	bls.n	403b96 <memset+0x82>
  403b7a:	461e      	mov	r6, r3
  403b7c:	4622      	mov	r2, r4
  403b7e:	3a04      	subs	r2, #4
  403b80:	2a03      	cmp	r2, #3
  403b82:	f846 5b04 	str.w	r5, [r6], #4
  403b86:	d8fa      	bhi.n	403b7e <memset+0x6a>
  403b88:	1f22      	subs	r2, r4, #4
  403b8a:	f022 0203 	bic.w	r2, r2, #3
  403b8e:	3204      	adds	r2, #4
  403b90:	4413      	add	r3, r2
  403b92:	f004 0403 	and.w	r4, r4, #3
  403b96:	b12c      	cbz	r4, 403ba4 <memset+0x90>
  403b98:	b2c9      	uxtb	r1, r1
  403b9a:	441c      	add	r4, r3
  403b9c:	f803 1b01 	strb.w	r1, [r3], #1
  403ba0:	429c      	cmp	r4, r3
  403ba2:	d1fb      	bne.n	403b9c <memset+0x88>
  403ba4:	bc70      	pop	{r4, r5, r6}
  403ba6:	4770      	bx	lr
  403ba8:	4614      	mov	r4, r2
  403baa:	4603      	mov	r3, r0
  403bac:	e7c2      	b.n	403b34 <memset+0x20>
  403bae:	bf00      	nop

00403bb0 <setbuf>:
  403bb0:	2900      	cmp	r1, #0
  403bb2:	bf0c      	ite	eq
  403bb4:	2202      	moveq	r2, #2
  403bb6:	2200      	movne	r2, #0
  403bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403bbc:	f000 b800 	b.w	403bc0 <setvbuf>

00403bc0 <setvbuf>:
  403bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403bc4:	4c61      	ldr	r4, [pc, #388]	; (403d4c <setvbuf+0x18c>)
  403bc6:	6825      	ldr	r5, [r4, #0]
  403bc8:	b083      	sub	sp, #12
  403bca:	4604      	mov	r4, r0
  403bcc:	460f      	mov	r7, r1
  403bce:	4690      	mov	r8, r2
  403bd0:	461e      	mov	r6, r3
  403bd2:	b115      	cbz	r5, 403bda <setvbuf+0x1a>
  403bd4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403bd6:	2b00      	cmp	r3, #0
  403bd8:	d064      	beq.n	403ca4 <setvbuf+0xe4>
  403bda:	f1b8 0f02 	cmp.w	r8, #2
  403bde:	d006      	beq.n	403bee <setvbuf+0x2e>
  403be0:	f1b8 0f01 	cmp.w	r8, #1
  403be4:	f200 809f 	bhi.w	403d26 <setvbuf+0x166>
  403be8:	2e00      	cmp	r6, #0
  403bea:	f2c0 809c 	blt.w	403d26 <setvbuf+0x166>
  403bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403bf0:	07d8      	lsls	r0, r3, #31
  403bf2:	d534      	bpl.n	403c5e <setvbuf+0x9e>
  403bf4:	4621      	mov	r1, r4
  403bf6:	4628      	mov	r0, r5
  403bf8:	f000 f95a 	bl	403eb0 <_fflush_r>
  403bfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403bfe:	b141      	cbz	r1, 403c12 <setvbuf+0x52>
  403c00:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403c04:	4299      	cmp	r1, r3
  403c06:	d002      	beq.n	403c0e <setvbuf+0x4e>
  403c08:	4628      	mov	r0, r5
  403c0a:	f000 fa4b 	bl	4040a4 <_free_r>
  403c0e:	2300      	movs	r3, #0
  403c10:	6323      	str	r3, [r4, #48]	; 0x30
  403c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c16:	2200      	movs	r2, #0
  403c18:	61a2      	str	r2, [r4, #24]
  403c1a:	6062      	str	r2, [r4, #4]
  403c1c:	061a      	lsls	r2, r3, #24
  403c1e:	d43a      	bmi.n	403c96 <setvbuf+0xd6>
  403c20:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403c24:	f023 0303 	bic.w	r3, r3, #3
  403c28:	f1b8 0f02 	cmp.w	r8, #2
  403c2c:	81a3      	strh	r3, [r4, #12]
  403c2e:	d01d      	beq.n	403c6c <setvbuf+0xac>
  403c30:	ab01      	add	r3, sp, #4
  403c32:	466a      	mov	r2, sp
  403c34:	4621      	mov	r1, r4
  403c36:	4628      	mov	r0, r5
  403c38:	f000 fb4c 	bl	4042d4 <__swhatbuf_r>
  403c3c:	89a3      	ldrh	r3, [r4, #12]
  403c3e:	4318      	orrs	r0, r3
  403c40:	81a0      	strh	r0, [r4, #12]
  403c42:	2e00      	cmp	r6, #0
  403c44:	d132      	bne.n	403cac <setvbuf+0xec>
  403c46:	9e00      	ldr	r6, [sp, #0]
  403c48:	4630      	mov	r0, r6
  403c4a:	f000 fb71 	bl	404330 <malloc>
  403c4e:	4607      	mov	r7, r0
  403c50:	2800      	cmp	r0, #0
  403c52:	d06b      	beq.n	403d2c <setvbuf+0x16c>
  403c54:	89a3      	ldrh	r3, [r4, #12]
  403c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403c5a:	81a3      	strh	r3, [r4, #12]
  403c5c:	e028      	b.n	403cb0 <setvbuf+0xf0>
  403c5e:	89a3      	ldrh	r3, [r4, #12]
  403c60:	0599      	lsls	r1, r3, #22
  403c62:	d4c7      	bmi.n	403bf4 <setvbuf+0x34>
  403c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c66:	f000 fb31 	bl	4042cc <__retarget_lock_acquire_recursive>
  403c6a:	e7c3      	b.n	403bf4 <setvbuf+0x34>
  403c6c:	2500      	movs	r5, #0
  403c6e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403c70:	2600      	movs	r6, #0
  403c72:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403c76:	f043 0302 	orr.w	r3, r3, #2
  403c7a:	2001      	movs	r0, #1
  403c7c:	60a6      	str	r6, [r4, #8]
  403c7e:	07ce      	lsls	r6, r1, #31
  403c80:	81a3      	strh	r3, [r4, #12]
  403c82:	6022      	str	r2, [r4, #0]
  403c84:	6122      	str	r2, [r4, #16]
  403c86:	6160      	str	r0, [r4, #20]
  403c88:	d401      	bmi.n	403c8e <setvbuf+0xce>
  403c8a:	0598      	lsls	r0, r3, #22
  403c8c:	d53e      	bpl.n	403d0c <setvbuf+0x14c>
  403c8e:	4628      	mov	r0, r5
  403c90:	b003      	add	sp, #12
  403c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403c96:	6921      	ldr	r1, [r4, #16]
  403c98:	4628      	mov	r0, r5
  403c9a:	f000 fa03 	bl	4040a4 <_free_r>
  403c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403ca2:	e7bd      	b.n	403c20 <setvbuf+0x60>
  403ca4:	4628      	mov	r0, r5
  403ca6:	f000 f95b 	bl	403f60 <__sinit>
  403caa:	e796      	b.n	403bda <setvbuf+0x1a>
  403cac:	2f00      	cmp	r7, #0
  403cae:	d0cb      	beq.n	403c48 <setvbuf+0x88>
  403cb0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403cb2:	2b00      	cmp	r3, #0
  403cb4:	d033      	beq.n	403d1e <setvbuf+0x15e>
  403cb6:	9b00      	ldr	r3, [sp, #0]
  403cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403cbc:	6027      	str	r7, [r4, #0]
  403cbe:	429e      	cmp	r6, r3
  403cc0:	bf1c      	itt	ne
  403cc2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403cc6:	81a2      	strhne	r2, [r4, #12]
  403cc8:	f1b8 0f01 	cmp.w	r8, #1
  403ccc:	bf04      	itt	eq
  403cce:	f042 0201 	orreq.w	r2, r2, #1
  403cd2:	81a2      	strheq	r2, [r4, #12]
  403cd4:	b292      	uxth	r2, r2
  403cd6:	f012 0308 	ands.w	r3, r2, #8
  403cda:	6127      	str	r7, [r4, #16]
  403cdc:	6166      	str	r6, [r4, #20]
  403cde:	d00e      	beq.n	403cfe <setvbuf+0x13e>
  403ce0:	07d1      	lsls	r1, r2, #31
  403ce2:	d51a      	bpl.n	403d1a <setvbuf+0x15a>
  403ce4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403ce6:	4276      	negs	r6, r6
  403ce8:	2300      	movs	r3, #0
  403cea:	f015 0501 	ands.w	r5, r5, #1
  403cee:	61a6      	str	r6, [r4, #24]
  403cf0:	60a3      	str	r3, [r4, #8]
  403cf2:	d009      	beq.n	403d08 <setvbuf+0x148>
  403cf4:	2500      	movs	r5, #0
  403cf6:	4628      	mov	r0, r5
  403cf8:	b003      	add	sp, #12
  403cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403cfe:	60a3      	str	r3, [r4, #8]
  403d00:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403d02:	f015 0501 	ands.w	r5, r5, #1
  403d06:	d1f5      	bne.n	403cf4 <setvbuf+0x134>
  403d08:	0593      	lsls	r3, r2, #22
  403d0a:	d4c0      	bmi.n	403c8e <setvbuf+0xce>
  403d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403d0e:	f000 fadf 	bl	4042d0 <__retarget_lock_release_recursive>
  403d12:	4628      	mov	r0, r5
  403d14:	b003      	add	sp, #12
  403d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403d1a:	60a6      	str	r6, [r4, #8]
  403d1c:	e7f0      	b.n	403d00 <setvbuf+0x140>
  403d1e:	4628      	mov	r0, r5
  403d20:	f000 f91e 	bl	403f60 <__sinit>
  403d24:	e7c7      	b.n	403cb6 <setvbuf+0xf6>
  403d26:	f04f 35ff 	mov.w	r5, #4294967295
  403d2a:	e7b0      	b.n	403c8e <setvbuf+0xce>
  403d2c:	f8dd 9000 	ldr.w	r9, [sp]
  403d30:	45b1      	cmp	r9, r6
  403d32:	d004      	beq.n	403d3e <setvbuf+0x17e>
  403d34:	4648      	mov	r0, r9
  403d36:	f000 fafb 	bl	404330 <malloc>
  403d3a:	4607      	mov	r7, r0
  403d3c:	b920      	cbnz	r0, 403d48 <setvbuf+0x188>
  403d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d42:	f04f 35ff 	mov.w	r5, #4294967295
  403d46:	e792      	b.n	403c6e <setvbuf+0xae>
  403d48:	464e      	mov	r6, r9
  403d4a:	e783      	b.n	403c54 <setvbuf+0x94>
  403d4c:	20000018 	.word	0x20000018

00403d50 <register_fini>:
  403d50:	4b02      	ldr	r3, [pc, #8]	; (403d5c <register_fini+0xc>)
  403d52:	b113      	cbz	r3, 403d5a <register_fini+0xa>
  403d54:	4802      	ldr	r0, [pc, #8]	; (403d60 <register_fini+0x10>)
  403d56:	f000 b805 	b.w	403d64 <atexit>
  403d5a:	4770      	bx	lr
  403d5c:	00000000 	.word	0x00000000
  403d60:	00403fd1 	.word	0x00403fd1

00403d64 <atexit>:
  403d64:	2300      	movs	r3, #0
  403d66:	4601      	mov	r1, r0
  403d68:	461a      	mov	r2, r3
  403d6a:	4618      	mov	r0, r3
  403d6c:	f000 be10 	b.w	404990 <__register_exitproc>

00403d70 <__sflush_r>:
  403d70:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403d74:	b29a      	uxth	r2, r3
  403d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d7a:	460d      	mov	r5, r1
  403d7c:	0711      	lsls	r1, r2, #28
  403d7e:	4680      	mov	r8, r0
  403d80:	d43a      	bmi.n	403df8 <__sflush_r+0x88>
  403d82:	686a      	ldr	r2, [r5, #4]
  403d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403d88:	2a00      	cmp	r2, #0
  403d8a:	81ab      	strh	r3, [r5, #12]
  403d8c:	dd6f      	ble.n	403e6e <__sflush_r+0xfe>
  403d8e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403d90:	2c00      	cmp	r4, #0
  403d92:	d049      	beq.n	403e28 <__sflush_r+0xb8>
  403d94:	2200      	movs	r2, #0
  403d96:	b29b      	uxth	r3, r3
  403d98:	f8d8 6000 	ldr.w	r6, [r8]
  403d9c:	f8c8 2000 	str.w	r2, [r8]
  403da0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403da4:	d067      	beq.n	403e76 <__sflush_r+0x106>
  403da6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403da8:	075f      	lsls	r7, r3, #29
  403daa:	d505      	bpl.n	403db8 <__sflush_r+0x48>
  403dac:	6869      	ldr	r1, [r5, #4]
  403dae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403db0:	1a52      	subs	r2, r2, r1
  403db2:	b10b      	cbz	r3, 403db8 <__sflush_r+0x48>
  403db4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403db6:	1ad2      	subs	r2, r2, r3
  403db8:	2300      	movs	r3, #0
  403dba:	69e9      	ldr	r1, [r5, #28]
  403dbc:	4640      	mov	r0, r8
  403dbe:	47a0      	blx	r4
  403dc0:	1c44      	adds	r4, r0, #1
  403dc2:	d03c      	beq.n	403e3e <__sflush_r+0xce>
  403dc4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403dc8:	692a      	ldr	r2, [r5, #16]
  403dca:	602a      	str	r2, [r5, #0]
  403dcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403dd0:	2200      	movs	r2, #0
  403dd2:	81ab      	strh	r3, [r5, #12]
  403dd4:	04db      	lsls	r3, r3, #19
  403dd6:	606a      	str	r2, [r5, #4]
  403dd8:	d447      	bmi.n	403e6a <__sflush_r+0xfa>
  403dda:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403ddc:	f8c8 6000 	str.w	r6, [r8]
  403de0:	b311      	cbz	r1, 403e28 <__sflush_r+0xb8>
  403de2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403de6:	4299      	cmp	r1, r3
  403de8:	d002      	beq.n	403df0 <__sflush_r+0x80>
  403dea:	4640      	mov	r0, r8
  403dec:	f000 f95a 	bl	4040a4 <_free_r>
  403df0:	2000      	movs	r0, #0
  403df2:	6328      	str	r0, [r5, #48]	; 0x30
  403df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403df8:	692e      	ldr	r6, [r5, #16]
  403dfa:	b1ae      	cbz	r6, 403e28 <__sflush_r+0xb8>
  403dfc:	682c      	ldr	r4, [r5, #0]
  403dfe:	602e      	str	r6, [r5, #0]
  403e00:	0791      	lsls	r1, r2, #30
  403e02:	bf0c      	ite	eq
  403e04:	696b      	ldreq	r3, [r5, #20]
  403e06:	2300      	movne	r3, #0
  403e08:	1ba4      	subs	r4, r4, r6
  403e0a:	60ab      	str	r3, [r5, #8]
  403e0c:	e00a      	b.n	403e24 <__sflush_r+0xb4>
  403e0e:	4623      	mov	r3, r4
  403e10:	4632      	mov	r2, r6
  403e12:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403e14:	69e9      	ldr	r1, [r5, #28]
  403e16:	4640      	mov	r0, r8
  403e18:	47b8      	blx	r7
  403e1a:	2800      	cmp	r0, #0
  403e1c:	eba4 0400 	sub.w	r4, r4, r0
  403e20:	4406      	add	r6, r0
  403e22:	dd04      	ble.n	403e2e <__sflush_r+0xbe>
  403e24:	2c00      	cmp	r4, #0
  403e26:	dcf2      	bgt.n	403e0e <__sflush_r+0x9e>
  403e28:	2000      	movs	r0, #0
  403e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e2e:	89ab      	ldrh	r3, [r5, #12]
  403e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403e34:	81ab      	strh	r3, [r5, #12]
  403e36:	f04f 30ff 	mov.w	r0, #4294967295
  403e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e3e:	f8d8 4000 	ldr.w	r4, [r8]
  403e42:	2c1d      	cmp	r4, #29
  403e44:	d8f3      	bhi.n	403e2e <__sflush_r+0xbe>
  403e46:	4b19      	ldr	r3, [pc, #100]	; (403eac <__sflush_r+0x13c>)
  403e48:	40e3      	lsrs	r3, r4
  403e4a:	43db      	mvns	r3, r3
  403e4c:	f013 0301 	ands.w	r3, r3, #1
  403e50:	d1ed      	bne.n	403e2e <__sflush_r+0xbe>
  403e52:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403e56:	606b      	str	r3, [r5, #4]
  403e58:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403e5c:	6929      	ldr	r1, [r5, #16]
  403e5e:	81ab      	strh	r3, [r5, #12]
  403e60:	04da      	lsls	r2, r3, #19
  403e62:	6029      	str	r1, [r5, #0]
  403e64:	d5b9      	bpl.n	403dda <__sflush_r+0x6a>
  403e66:	2c00      	cmp	r4, #0
  403e68:	d1b7      	bne.n	403dda <__sflush_r+0x6a>
  403e6a:	6528      	str	r0, [r5, #80]	; 0x50
  403e6c:	e7b5      	b.n	403dda <__sflush_r+0x6a>
  403e6e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403e70:	2a00      	cmp	r2, #0
  403e72:	dc8c      	bgt.n	403d8e <__sflush_r+0x1e>
  403e74:	e7d8      	b.n	403e28 <__sflush_r+0xb8>
  403e76:	2301      	movs	r3, #1
  403e78:	69e9      	ldr	r1, [r5, #28]
  403e7a:	4640      	mov	r0, r8
  403e7c:	47a0      	blx	r4
  403e7e:	1c43      	adds	r3, r0, #1
  403e80:	4602      	mov	r2, r0
  403e82:	d002      	beq.n	403e8a <__sflush_r+0x11a>
  403e84:	89ab      	ldrh	r3, [r5, #12]
  403e86:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403e88:	e78e      	b.n	403da8 <__sflush_r+0x38>
  403e8a:	f8d8 3000 	ldr.w	r3, [r8]
  403e8e:	2b00      	cmp	r3, #0
  403e90:	d0f8      	beq.n	403e84 <__sflush_r+0x114>
  403e92:	2b1d      	cmp	r3, #29
  403e94:	d001      	beq.n	403e9a <__sflush_r+0x12a>
  403e96:	2b16      	cmp	r3, #22
  403e98:	d102      	bne.n	403ea0 <__sflush_r+0x130>
  403e9a:	f8c8 6000 	str.w	r6, [r8]
  403e9e:	e7c3      	b.n	403e28 <__sflush_r+0xb8>
  403ea0:	89ab      	ldrh	r3, [r5, #12]
  403ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403ea6:	81ab      	strh	r3, [r5, #12]
  403ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403eac:	20400001 	.word	0x20400001

00403eb0 <_fflush_r>:
  403eb0:	b538      	push	{r3, r4, r5, lr}
  403eb2:	460d      	mov	r5, r1
  403eb4:	4604      	mov	r4, r0
  403eb6:	b108      	cbz	r0, 403ebc <_fflush_r+0xc>
  403eb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403eba:	b1bb      	cbz	r3, 403eec <_fflush_r+0x3c>
  403ebc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403ec0:	b188      	cbz	r0, 403ee6 <_fflush_r+0x36>
  403ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403ec4:	07db      	lsls	r3, r3, #31
  403ec6:	d401      	bmi.n	403ecc <_fflush_r+0x1c>
  403ec8:	0581      	lsls	r1, r0, #22
  403eca:	d517      	bpl.n	403efc <_fflush_r+0x4c>
  403ecc:	4620      	mov	r0, r4
  403ece:	4629      	mov	r1, r5
  403ed0:	f7ff ff4e 	bl	403d70 <__sflush_r>
  403ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403ed6:	07da      	lsls	r2, r3, #31
  403ed8:	4604      	mov	r4, r0
  403eda:	d402      	bmi.n	403ee2 <_fflush_r+0x32>
  403edc:	89ab      	ldrh	r3, [r5, #12]
  403ede:	059b      	lsls	r3, r3, #22
  403ee0:	d507      	bpl.n	403ef2 <_fflush_r+0x42>
  403ee2:	4620      	mov	r0, r4
  403ee4:	bd38      	pop	{r3, r4, r5, pc}
  403ee6:	4604      	mov	r4, r0
  403ee8:	4620      	mov	r0, r4
  403eea:	bd38      	pop	{r3, r4, r5, pc}
  403eec:	f000 f838 	bl	403f60 <__sinit>
  403ef0:	e7e4      	b.n	403ebc <_fflush_r+0xc>
  403ef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403ef4:	f000 f9ec 	bl	4042d0 <__retarget_lock_release_recursive>
  403ef8:	4620      	mov	r0, r4
  403efa:	bd38      	pop	{r3, r4, r5, pc}
  403efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403efe:	f000 f9e5 	bl	4042cc <__retarget_lock_acquire_recursive>
  403f02:	e7e3      	b.n	403ecc <_fflush_r+0x1c>

00403f04 <_cleanup_r>:
  403f04:	4901      	ldr	r1, [pc, #4]	; (403f0c <_cleanup_r+0x8>)
  403f06:	f000 b9b3 	b.w	404270 <_fwalk_reent>
  403f0a:	bf00      	nop
  403f0c:	00404a79 	.word	0x00404a79

00403f10 <std.isra.0>:
  403f10:	b510      	push	{r4, lr}
  403f12:	2300      	movs	r3, #0
  403f14:	4604      	mov	r4, r0
  403f16:	8181      	strh	r1, [r0, #12]
  403f18:	81c2      	strh	r2, [r0, #14]
  403f1a:	6003      	str	r3, [r0, #0]
  403f1c:	6043      	str	r3, [r0, #4]
  403f1e:	6083      	str	r3, [r0, #8]
  403f20:	6643      	str	r3, [r0, #100]	; 0x64
  403f22:	6103      	str	r3, [r0, #16]
  403f24:	6143      	str	r3, [r0, #20]
  403f26:	6183      	str	r3, [r0, #24]
  403f28:	4619      	mov	r1, r3
  403f2a:	2208      	movs	r2, #8
  403f2c:	305c      	adds	r0, #92	; 0x5c
  403f2e:	f7ff fdf1 	bl	403b14 <memset>
  403f32:	4807      	ldr	r0, [pc, #28]	; (403f50 <std.isra.0+0x40>)
  403f34:	4907      	ldr	r1, [pc, #28]	; (403f54 <std.isra.0+0x44>)
  403f36:	4a08      	ldr	r2, [pc, #32]	; (403f58 <std.isra.0+0x48>)
  403f38:	4b08      	ldr	r3, [pc, #32]	; (403f5c <std.isra.0+0x4c>)
  403f3a:	6220      	str	r0, [r4, #32]
  403f3c:	61e4      	str	r4, [r4, #28]
  403f3e:	6261      	str	r1, [r4, #36]	; 0x24
  403f40:	62a2      	str	r2, [r4, #40]	; 0x28
  403f42:	62e3      	str	r3, [r4, #44]	; 0x2c
  403f44:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403f4c:	f000 b9ba 	b.w	4042c4 <__retarget_lock_init_recursive>
  403f50:	004048dd 	.word	0x004048dd
  403f54:	00404901 	.word	0x00404901
  403f58:	0040493d 	.word	0x0040493d
  403f5c:	0040495d 	.word	0x0040495d

00403f60 <__sinit>:
  403f60:	b510      	push	{r4, lr}
  403f62:	4604      	mov	r4, r0
  403f64:	4812      	ldr	r0, [pc, #72]	; (403fb0 <__sinit+0x50>)
  403f66:	f000 f9b1 	bl	4042cc <__retarget_lock_acquire_recursive>
  403f6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403f6c:	b9d2      	cbnz	r2, 403fa4 <__sinit+0x44>
  403f6e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403f72:	4810      	ldr	r0, [pc, #64]	; (403fb4 <__sinit+0x54>)
  403f74:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403f78:	2103      	movs	r1, #3
  403f7a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403f7e:	63e0      	str	r0, [r4, #60]	; 0x3c
  403f80:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403f84:	6860      	ldr	r0, [r4, #4]
  403f86:	2104      	movs	r1, #4
  403f88:	f7ff ffc2 	bl	403f10 <std.isra.0>
  403f8c:	2201      	movs	r2, #1
  403f8e:	2109      	movs	r1, #9
  403f90:	68a0      	ldr	r0, [r4, #8]
  403f92:	f7ff ffbd 	bl	403f10 <std.isra.0>
  403f96:	2202      	movs	r2, #2
  403f98:	2112      	movs	r1, #18
  403f9a:	68e0      	ldr	r0, [r4, #12]
  403f9c:	f7ff ffb8 	bl	403f10 <std.isra.0>
  403fa0:	2301      	movs	r3, #1
  403fa2:	63a3      	str	r3, [r4, #56]	; 0x38
  403fa4:	4802      	ldr	r0, [pc, #8]	; (403fb0 <__sinit+0x50>)
  403fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403faa:	f000 b991 	b.w	4042d0 <__retarget_lock_release_recursive>
  403fae:	bf00      	nop
  403fb0:	2000ce24 	.word	0x2000ce24
  403fb4:	00403f05 	.word	0x00403f05

00403fb8 <__sfp_lock_acquire>:
  403fb8:	4801      	ldr	r0, [pc, #4]	; (403fc0 <__sfp_lock_acquire+0x8>)
  403fba:	f000 b987 	b.w	4042cc <__retarget_lock_acquire_recursive>
  403fbe:	bf00      	nop
  403fc0:	2000ce38 	.word	0x2000ce38

00403fc4 <__sfp_lock_release>:
  403fc4:	4801      	ldr	r0, [pc, #4]	; (403fcc <__sfp_lock_release+0x8>)
  403fc6:	f000 b983 	b.w	4042d0 <__retarget_lock_release_recursive>
  403fca:	bf00      	nop
  403fcc:	2000ce38 	.word	0x2000ce38

00403fd0 <__libc_fini_array>:
  403fd0:	b538      	push	{r3, r4, r5, lr}
  403fd2:	4c0a      	ldr	r4, [pc, #40]	; (403ffc <__libc_fini_array+0x2c>)
  403fd4:	4d0a      	ldr	r5, [pc, #40]	; (404000 <__libc_fini_array+0x30>)
  403fd6:	1b64      	subs	r4, r4, r5
  403fd8:	10a4      	asrs	r4, r4, #2
  403fda:	d00a      	beq.n	403ff2 <__libc_fini_array+0x22>
  403fdc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403fe0:	3b01      	subs	r3, #1
  403fe2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403fe6:	3c01      	subs	r4, #1
  403fe8:	f855 3904 	ldr.w	r3, [r5], #-4
  403fec:	4798      	blx	r3
  403fee:	2c00      	cmp	r4, #0
  403ff0:	d1f9      	bne.n	403fe6 <__libc_fini_array+0x16>
  403ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403ff6:	f000 bdfb 	b.w	404bf0 <_fini>
  403ffa:	bf00      	nop
  403ffc:	00404c00 	.word	0x00404c00
  404000:	00404bfc 	.word	0x00404bfc

00404004 <_malloc_trim_r>:
  404004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404006:	4f24      	ldr	r7, [pc, #144]	; (404098 <_malloc_trim_r+0x94>)
  404008:	460c      	mov	r4, r1
  40400a:	4606      	mov	r6, r0
  40400c:	f000 fc48 	bl	4048a0 <__malloc_lock>
  404010:	68bb      	ldr	r3, [r7, #8]
  404012:	685d      	ldr	r5, [r3, #4]
  404014:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404018:	310f      	adds	r1, #15
  40401a:	f025 0503 	bic.w	r5, r5, #3
  40401e:	4429      	add	r1, r5
  404020:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404024:	f021 010f 	bic.w	r1, r1, #15
  404028:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40402c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404030:	db07      	blt.n	404042 <_malloc_trim_r+0x3e>
  404032:	2100      	movs	r1, #0
  404034:	4630      	mov	r0, r6
  404036:	f000 fc3f 	bl	4048b8 <_sbrk_r>
  40403a:	68bb      	ldr	r3, [r7, #8]
  40403c:	442b      	add	r3, r5
  40403e:	4298      	cmp	r0, r3
  404040:	d004      	beq.n	40404c <_malloc_trim_r+0x48>
  404042:	4630      	mov	r0, r6
  404044:	f000 fc32 	bl	4048ac <__malloc_unlock>
  404048:	2000      	movs	r0, #0
  40404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40404c:	4261      	negs	r1, r4
  40404e:	4630      	mov	r0, r6
  404050:	f000 fc32 	bl	4048b8 <_sbrk_r>
  404054:	3001      	adds	r0, #1
  404056:	d00d      	beq.n	404074 <_malloc_trim_r+0x70>
  404058:	4b10      	ldr	r3, [pc, #64]	; (40409c <_malloc_trim_r+0x98>)
  40405a:	68ba      	ldr	r2, [r7, #8]
  40405c:	6819      	ldr	r1, [r3, #0]
  40405e:	1b2d      	subs	r5, r5, r4
  404060:	f045 0501 	orr.w	r5, r5, #1
  404064:	4630      	mov	r0, r6
  404066:	1b09      	subs	r1, r1, r4
  404068:	6055      	str	r5, [r2, #4]
  40406a:	6019      	str	r1, [r3, #0]
  40406c:	f000 fc1e 	bl	4048ac <__malloc_unlock>
  404070:	2001      	movs	r0, #1
  404072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404074:	2100      	movs	r1, #0
  404076:	4630      	mov	r0, r6
  404078:	f000 fc1e 	bl	4048b8 <_sbrk_r>
  40407c:	68ba      	ldr	r2, [r7, #8]
  40407e:	1a83      	subs	r3, r0, r2
  404080:	2b0f      	cmp	r3, #15
  404082:	ddde      	ble.n	404042 <_malloc_trim_r+0x3e>
  404084:	4c06      	ldr	r4, [pc, #24]	; (4040a0 <_malloc_trim_r+0x9c>)
  404086:	4905      	ldr	r1, [pc, #20]	; (40409c <_malloc_trim_r+0x98>)
  404088:	6824      	ldr	r4, [r4, #0]
  40408a:	f043 0301 	orr.w	r3, r3, #1
  40408e:	1b00      	subs	r0, r0, r4
  404090:	6053      	str	r3, [r2, #4]
  404092:	6008      	str	r0, [r1, #0]
  404094:	e7d5      	b.n	404042 <_malloc_trim_r+0x3e>
  404096:	bf00      	nop
  404098:	2000044c 	.word	0x2000044c
  40409c:	2000ccf8 	.word	0x2000ccf8
  4040a0:	20000854 	.word	0x20000854

004040a4 <_free_r>:
  4040a4:	2900      	cmp	r1, #0
  4040a6:	d044      	beq.n	404132 <_free_r+0x8e>
  4040a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4040ac:	460d      	mov	r5, r1
  4040ae:	4680      	mov	r8, r0
  4040b0:	f000 fbf6 	bl	4048a0 <__malloc_lock>
  4040b4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4040b8:	4969      	ldr	r1, [pc, #420]	; (404260 <_free_r+0x1bc>)
  4040ba:	f027 0301 	bic.w	r3, r7, #1
  4040be:	f1a5 0408 	sub.w	r4, r5, #8
  4040c2:	18e2      	adds	r2, r4, r3
  4040c4:	688e      	ldr	r6, [r1, #8]
  4040c6:	6850      	ldr	r0, [r2, #4]
  4040c8:	42b2      	cmp	r2, r6
  4040ca:	f020 0003 	bic.w	r0, r0, #3
  4040ce:	d05e      	beq.n	40418e <_free_r+0xea>
  4040d0:	07fe      	lsls	r6, r7, #31
  4040d2:	6050      	str	r0, [r2, #4]
  4040d4:	d40b      	bmi.n	4040ee <_free_r+0x4a>
  4040d6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4040da:	1be4      	subs	r4, r4, r7
  4040dc:	f101 0e08 	add.w	lr, r1, #8
  4040e0:	68a5      	ldr	r5, [r4, #8]
  4040e2:	4575      	cmp	r5, lr
  4040e4:	443b      	add	r3, r7
  4040e6:	d06d      	beq.n	4041c4 <_free_r+0x120>
  4040e8:	68e7      	ldr	r7, [r4, #12]
  4040ea:	60ef      	str	r7, [r5, #12]
  4040ec:	60bd      	str	r5, [r7, #8]
  4040ee:	1815      	adds	r5, r2, r0
  4040f0:	686d      	ldr	r5, [r5, #4]
  4040f2:	07ed      	lsls	r5, r5, #31
  4040f4:	d53e      	bpl.n	404174 <_free_r+0xd0>
  4040f6:	f043 0201 	orr.w	r2, r3, #1
  4040fa:	6062      	str	r2, [r4, #4]
  4040fc:	50e3      	str	r3, [r4, r3]
  4040fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404102:	d217      	bcs.n	404134 <_free_r+0x90>
  404104:	08db      	lsrs	r3, r3, #3
  404106:	1c58      	adds	r0, r3, #1
  404108:	109a      	asrs	r2, r3, #2
  40410a:	684d      	ldr	r5, [r1, #4]
  40410c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404110:	60a7      	str	r7, [r4, #8]
  404112:	2301      	movs	r3, #1
  404114:	4093      	lsls	r3, r2
  404116:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40411a:	432b      	orrs	r3, r5
  40411c:	3a08      	subs	r2, #8
  40411e:	60e2      	str	r2, [r4, #12]
  404120:	604b      	str	r3, [r1, #4]
  404122:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404126:	60fc      	str	r4, [r7, #12]
  404128:	4640      	mov	r0, r8
  40412a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40412e:	f000 bbbd 	b.w	4048ac <__malloc_unlock>
  404132:	4770      	bx	lr
  404134:	0a5a      	lsrs	r2, r3, #9
  404136:	2a04      	cmp	r2, #4
  404138:	d852      	bhi.n	4041e0 <_free_r+0x13c>
  40413a:	099a      	lsrs	r2, r3, #6
  40413c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404140:	00ff      	lsls	r7, r7, #3
  404142:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404146:	19c8      	adds	r0, r1, r7
  404148:	59ca      	ldr	r2, [r1, r7]
  40414a:	3808      	subs	r0, #8
  40414c:	4290      	cmp	r0, r2
  40414e:	d04f      	beq.n	4041f0 <_free_r+0x14c>
  404150:	6851      	ldr	r1, [r2, #4]
  404152:	f021 0103 	bic.w	r1, r1, #3
  404156:	428b      	cmp	r3, r1
  404158:	d232      	bcs.n	4041c0 <_free_r+0x11c>
  40415a:	6892      	ldr	r2, [r2, #8]
  40415c:	4290      	cmp	r0, r2
  40415e:	d1f7      	bne.n	404150 <_free_r+0xac>
  404160:	68c3      	ldr	r3, [r0, #12]
  404162:	60a0      	str	r0, [r4, #8]
  404164:	60e3      	str	r3, [r4, #12]
  404166:	609c      	str	r4, [r3, #8]
  404168:	60c4      	str	r4, [r0, #12]
  40416a:	4640      	mov	r0, r8
  40416c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404170:	f000 bb9c 	b.w	4048ac <__malloc_unlock>
  404174:	6895      	ldr	r5, [r2, #8]
  404176:	4f3b      	ldr	r7, [pc, #236]	; (404264 <_free_r+0x1c0>)
  404178:	42bd      	cmp	r5, r7
  40417a:	4403      	add	r3, r0
  40417c:	d040      	beq.n	404200 <_free_r+0x15c>
  40417e:	68d0      	ldr	r0, [r2, #12]
  404180:	60e8      	str	r0, [r5, #12]
  404182:	f043 0201 	orr.w	r2, r3, #1
  404186:	6085      	str	r5, [r0, #8]
  404188:	6062      	str	r2, [r4, #4]
  40418a:	50e3      	str	r3, [r4, r3]
  40418c:	e7b7      	b.n	4040fe <_free_r+0x5a>
  40418e:	07ff      	lsls	r7, r7, #31
  404190:	4403      	add	r3, r0
  404192:	d407      	bmi.n	4041a4 <_free_r+0x100>
  404194:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404198:	1aa4      	subs	r4, r4, r2
  40419a:	4413      	add	r3, r2
  40419c:	68a0      	ldr	r0, [r4, #8]
  40419e:	68e2      	ldr	r2, [r4, #12]
  4041a0:	60c2      	str	r2, [r0, #12]
  4041a2:	6090      	str	r0, [r2, #8]
  4041a4:	4a30      	ldr	r2, [pc, #192]	; (404268 <_free_r+0x1c4>)
  4041a6:	6812      	ldr	r2, [r2, #0]
  4041a8:	f043 0001 	orr.w	r0, r3, #1
  4041ac:	4293      	cmp	r3, r2
  4041ae:	6060      	str	r0, [r4, #4]
  4041b0:	608c      	str	r4, [r1, #8]
  4041b2:	d3b9      	bcc.n	404128 <_free_r+0x84>
  4041b4:	4b2d      	ldr	r3, [pc, #180]	; (40426c <_free_r+0x1c8>)
  4041b6:	4640      	mov	r0, r8
  4041b8:	6819      	ldr	r1, [r3, #0]
  4041ba:	f7ff ff23 	bl	404004 <_malloc_trim_r>
  4041be:	e7b3      	b.n	404128 <_free_r+0x84>
  4041c0:	4610      	mov	r0, r2
  4041c2:	e7cd      	b.n	404160 <_free_r+0xbc>
  4041c4:	1811      	adds	r1, r2, r0
  4041c6:	6849      	ldr	r1, [r1, #4]
  4041c8:	07c9      	lsls	r1, r1, #31
  4041ca:	d444      	bmi.n	404256 <_free_r+0x1b2>
  4041cc:	6891      	ldr	r1, [r2, #8]
  4041ce:	68d2      	ldr	r2, [r2, #12]
  4041d0:	60ca      	str	r2, [r1, #12]
  4041d2:	4403      	add	r3, r0
  4041d4:	f043 0001 	orr.w	r0, r3, #1
  4041d8:	6091      	str	r1, [r2, #8]
  4041da:	6060      	str	r0, [r4, #4]
  4041dc:	50e3      	str	r3, [r4, r3]
  4041de:	e7a3      	b.n	404128 <_free_r+0x84>
  4041e0:	2a14      	cmp	r2, #20
  4041e2:	d816      	bhi.n	404212 <_free_r+0x16e>
  4041e4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4041e8:	00ff      	lsls	r7, r7, #3
  4041ea:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4041ee:	e7aa      	b.n	404146 <_free_r+0xa2>
  4041f0:	10aa      	asrs	r2, r5, #2
  4041f2:	2301      	movs	r3, #1
  4041f4:	684d      	ldr	r5, [r1, #4]
  4041f6:	4093      	lsls	r3, r2
  4041f8:	432b      	orrs	r3, r5
  4041fa:	604b      	str	r3, [r1, #4]
  4041fc:	4603      	mov	r3, r0
  4041fe:	e7b0      	b.n	404162 <_free_r+0xbe>
  404200:	f043 0201 	orr.w	r2, r3, #1
  404204:	614c      	str	r4, [r1, #20]
  404206:	610c      	str	r4, [r1, #16]
  404208:	60e5      	str	r5, [r4, #12]
  40420a:	60a5      	str	r5, [r4, #8]
  40420c:	6062      	str	r2, [r4, #4]
  40420e:	50e3      	str	r3, [r4, r3]
  404210:	e78a      	b.n	404128 <_free_r+0x84>
  404212:	2a54      	cmp	r2, #84	; 0x54
  404214:	d806      	bhi.n	404224 <_free_r+0x180>
  404216:	0b1a      	lsrs	r2, r3, #12
  404218:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40421c:	00ff      	lsls	r7, r7, #3
  40421e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404222:	e790      	b.n	404146 <_free_r+0xa2>
  404224:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404228:	d806      	bhi.n	404238 <_free_r+0x194>
  40422a:	0bda      	lsrs	r2, r3, #15
  40422c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404230:	00ff      	lsls	r7, r7, #3
  404232:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404236:	e786      	b.n	404146 <_free_r+0xa2>
  404238:	f240 5054 	movw	r0, #1364	; 0x554
  40423c:	4282      	cmp	r2, r0
  40423e:	d806      	bhi.n	40424e <_free_r+0x1aa>
  404240:	0c9a      	lsrs	r2, r3, #18
  404242:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404246:	00ff      	lsls	r7, r7, #3
  404248:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40424c:	e77b      	b.n	404146 <_free_r+0xa2>
  40424e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404252:	257e      	movs	r5, #126	; 0x7e
  404254:	e777      	b.n	404146 <_free_r+0xa2>
  404256:	f043 0101 	orr.w	r1, r3, #1
  40425a:	6061      	str	r1, [r4, #4]
  40425c:	6013      	str	r3, [r2, #0]
  40425e:	e763      	b.n	404128 <_free_r+0x84>
  404260:	2000044c 	.word	0x2000044c
  404264:	20000454 	.word	0x20000454
  404268:	20000858 	.word	0x20000858
  40426c:	2000cd28 	.word	0x2000cd28

00404270 <_fwalk_reent>:
  404270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404274:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404278:	d01f      	beq.n	4042ba <_fwalk_reent+0x4a>
  40427a:	4688      	mov	r8, r1
  40427c:	4606      	mov	r6, r0
  40427e:	f04f 0900 	mov.w	r9, #0
  404282:	687d      	ldr	r5, [r7, #4]
  404284:	68bc      	ldr	r4, [r7, #8]
  404286:	3d01      	subs	r5, #1
  404288:	d411      	bmi.n	4042ae <_fwalk_reent+0x3e>
  40428a:	89a3      	ldrh	r3, [r4, #12]
  40428c:	2b01      	cmp	r3, #1
  40428e:	f105 35ff 	add.w	r5, r5, #4294967295
  404292:	d908      	bls.n	4042a6 <_fwalk_reent+0x36>
  404294:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404298:	3301      	adds	r3, #1
  40429a:	4621      	mov	r1, r4
  40429c:	4630      	mov	r0, r6
  40429e:	d002      	beq.n	4042a6 <_fwalk_reent+0x36>
  4042a0:	47c0      	blx	r8
  4042a2:	ea49 0900 	orr.w	r9, r9, r0
  4042a6:	1c6b      	adds	r3, r5, #1
  4042a8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4042ac:	d1ed      	bne.n	40428a <_fwalk_reent+0x1a>
  4042ae:	683f      	ldr	r7, [r7, #0]
  4042b0:	2f00      	cmp	r7, #0
  4042b2:	d1e6      	bne.n	404282 <_fwalk_reent+0x12>
  4042b4:	4648      	mov	r0, r9
  4042b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4042ba:	46b9      	mov	r9, r7
  4042bc:	4648      	mov	r0, r9
  4042be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4042c2:	bf00      	nop

004042c4 <__retarget_lock_init_recursive>:
  4042c4:	4770      	bx	lr
  4042c6:	bf00      	nop

004042c8 <__retarget_lock_close_recursive>:
  4042c8:	4770      	bx	lr
  4042ca:	bf00      	nop

004042cc <__retarget_lock_acquire_recursive>:
  4042cc:	4770      	bx	lr
  4042ce:	bf00      	nop

004042d0 <__retarget_lock_release_recursive>:
  4042d0:	4770      	bx	lr
  4042d2:	bf00      	nop

004042d4 <__swhatbuf_r>:
  4042d4:	b570      	push	{r4, r5, r6, lr}
  4042d6:	460c      	mov	r4, r1
  4042d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4042dc:	2900      	cmp	r1, #0
  4042de:	b090      	sub	sp, #64	; 0x40
  4042e0:	4615      	mov	r5, r2
  4042e2:	461e      	mov	r6, r3
  4042e4:	db14      	blt.n	404310 <__swhatbuf_r+0x3c>
  4042e6:	aa01      	add	r2, sp, #4
  4042e8:	f000 fc28 	bl	404b3c <_fstat_r>
  4042ec:	2800      	cmp	r0, #0
  4042ee:	db0f      	blt.n	404310 <__swhatbuf_r+0x3c>
  4042f0:	9a02      	ldr	r2, [sp, #8]
  4042f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4042f6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4042fa:	fab2 f282 	clz	r2, r2
  4042fe:	0952      	lsrs	r2, r2, #5
  404300:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404304:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404308:	6032      	str	r2, [r6, #0]
  40430a:	602b      	str	r3, [r5, #0]
  40430c:	b010      	add	sp, #64	; 0x40
  40430e:	bd70      	pop	{r4, r5, r6, pc}
  404310:	89a2      	ldrh	r2, [r4, #12]
  404312:	2300      	movs	r3, #0
  404314:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404318:	6033      	str	r3, [r6, #0]
  40431a:	d004      	beq.n	404326 <__swhatbuf_r+0x52>
  40431c:	2240      	movs	r2, #64	; 0x40
  40431e:	4618      	mov	r0, r3
  404320:	602a      	str	r2, [r5, #0]
  404322:	b010      	add	sp, #64	; 0x40
  404324:	bd70      	pop	{r4, r5, r6, pc}
  404326:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40432a:	602b      	str	r3, [r5, #0]
  40432c:	b010      	add	sp, #64	; 0x40
  40432e:	bd70      	pop	{r4, r5, r6, pc}

00404330 <malloc>:
  404330:	4b02      	ldr	r3, [pc, #8]	; (40433c <malloc+0xc>)
  404332:	4601      	mov	r1, r0
  404334:	6818      	ldr	r0, [r3, #0]
  404336:	f000 b803 	b.w	404340 <_malloc_r>
  40433a:	bf00      	nop
  40433c:	20000018 	.word	0x20000018

00404340 <_malloc_r>:
  404340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404344:	f101 060b 	add.w	r6, r1, #11
  404348:	2e16      	cmp	r6, #22
  40434a:	b083      	sub	sp, #12
  40434c:	4605      	mov	r5, r0
  40434e:	f240 809e 	bls.w	40448e <_malloc_r+0x14e>
  404352:	f036 0607 	bics.w	r6, r6, #7
  404356:	f100 80bd 	bmi.w	4044d4 <_malloc_r+0x194>
  40435a:	42b1      	cmp	r1, r6
  40435c:	f200 80ba 	bhi.w	4044d4 <_malloc_r+0x194>
  404360:	f000 fa9e 	bl	4048a0 <__malloc_lock>
  404364:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404368:	f0c0 8293 	bcc.w	404892 <_malloc_r+0x552>
  40436c:	0a73      	lsrs	r3, r6, #9
  40436e:	f000 80b8 	beq.w	4044e2 <_malloc_r+0x1a2>
  404372:	2b04      	cmp	r3, #4
  404374:	f200 8179 	bhi.w	40466a <_malloc_r+0x32a>
  404378:	09b3      	lsrs	r3, r6, #6
  40437a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40437e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404382:	00c3      	lsls	r3, r0, #3
  404384:	4fbf      	ldr	r7, [pc, #764]	; (404684 <_malloc_r+0x344>)
  404386:	443b      	add	r3, r7
  404388:	f1a3 0108 	sub.w	r1, r3, #8
  40438c:	685c      	ldr	r4, [r3, #4]
  40438e:	42a1      	cmp	r1, r4
  404390:	d106      	bne.n	4043a0 <_malloc_r+0x60>
  404392:	e00c      	b.n	4043ae <_malloc_r+0x6e>
  404394:	2a00      	cmp	r2, #0
  404396:	f280 80aa 	bge.w	4044ee <_malloc_r+0x1ae>
  40439a:	68e4      	ldr	r4, [r4, #12]
  40439c:	42a1      	cmp	r1, r4
  40439e:	d006      	beq.n	4043ae <_malloc_r+0x6e>
  4043a0:	6863      	ldr	r3, [r4, #4]
  4043a2:	f023 0303 	bic.w	r3, r3, #3
  4043a6:	1b9a      	subs	r2, r3, r6
  4043a8:	2a0f      	cmp	r2, #15
  4043aa:	ddf3      	ble.n	404394 <_malloc_r+0x54>
  4043ac:	4670      	mov	r0, lr
  4043ae:	693c      	ldr	r4, [r7, #16]
  4043b0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404698 <_malloc_r+0x358>
  4043b4:	4574      	cmp	r4, lr
  4043b6:	f000 81ab 	beq.w	404710 <_malloc_r+0x3d0>
  4043ba:	6863      	ldr	r3, [r4, #4]
  4043bc:	f023 0303 	bic.w	r3, r3, #3
  4043c0:	1b9a      	subs	r2, r3, r6
  4043c2:	2a0f      	cmp	r2, #15
  4043c4:	f300 8190 	bgt.w	4046e8 <_malloc_r+0x3a8>
  4043c8:	2a00      	cmp	r2, #0
  4043ca:	f8c7 e014 	str.w	lr, [r7, #20]
  4043ce:	f8c7 e010 	str.w	lr, [r7, #16]
  4043d2:	f280 809d 	bge.w	404510 <_malloc_r+0x1d0>
  4043d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4043da:	f080 8161 	bcs.w	4046a0 <_malloc_r+0x360>
  4043de:	08db      	lsrs	r3, r3, #3
  4043e0:	f103 0c01 	add.w	ip, r3, #1
  4043e4:	1099      	asrs	r1, r3, #2
  4043e6:	687a      	ldr	r2, [r7, #4]
  4043e8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4043ec:	f8c4 8008 	str.w	r8, [r4, #8]
  4043f0:	2301      	movs	r3, #1
  4043f2:	408b      	lsls	r3, r1
  4043f4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4043f8:	4313      	orrs	r3, r2
  4043fa:	3908      	subs	r1, #8
  4043fc:	60e1      	str	r1, [r4, #12]
  4043fe:	607b      	str	r3, [r7, #4]
  404400:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404404:	f8c8 400c 	str.w	r4, [r8, #12]
  404408:	1082      	asrs	r2, r0, #2
  40440a:	2401      	movs	r4, #1
  40440c:	4094      	lsls	r4, r2
  40440e:	429c      	cmp	r4, r3
  404410:	f200 808b 	bhi.w	40452a <_malloc_r+0x1ea>
  404414:	421c      	tst	r4, r3
  404416:	d106      	bne.n	404426 <_malloc_r+0xe6>
  404418:	f020 0003 	bic.w	r0, r0, #3
  40441c:	0064      	lsls	r4, r4, #1
  40441e:	421c      	tst	r4, r3
  404420:	f100 0004 	add.w	r0, r0, #4
  404424:	d0fa      	beq.n	40441c <_malloc_r+0xdc>
  404426:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40442a:	46cc      	mov	ip, r9
  40442c:	4680      	mov	r8, r0
  40442e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404432:	459c      	cmp	ip, r3
  404434:	d107      	bne.n	404446 <_malloc_r+0x106>
  404436:	e16d      	b.n	404714 <_malloc_r+0x3d4>
  404438:	2a00      	cmp	r2, #0
  40443a:	f280 817b 	bge.w	404734 <_malloc_r+0x3f4>
  40443e:	68db      	ldr	r3, [r3, #12]
  404440:	459c      	cmp	ip, r3
  404442:	f000 8167 	beq.w	404714 <_malloc_r+0x3d4>
  404446:	6859      	ldr	r1, [r3, #4]
  404448:	f021 0103 	bic.w	r1, r1, #3
  40444c:	1b8a      	subs	r2, r1, r6
  40444e:	2a0f      	cmp	r2, #15
  404450:	ddf2      	ble.n	404438 <_malloc_r+0xf8>
  404452:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404456:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40445a:	9300      	str	r3, [sp, #0]
  40445c:	199c      	adds	r4, r3, r6
  40445e:	4628      	mov	r0, r5
  404460:	f046 0601 	orr.w	r6, r6, #1
  404464:	f042 0501 	orr.w	r5, r2, #1
  404468:	605e      	str	r6, [r3, #4]
  40446a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40446e:	f8cc 8008 	str.w	r8, [ip, #8]
  404472:	617c      	str	r4, [r7, #20]
  404474:	613c      	str	r4, [r7, #16]
  404476:	f8c4 e00c 	str.w	lr, [r4, #12]
  40447a:	f8c4 e008 	str.w	lr, [r4, #8]
  40447e:	6065      	str	r5, [r4, #4]
  404480:	505a      	str	r2, [r3, r1]
  404482:	f000 fa13 	bl	4048ac <__malloc_unlock>
  404486:	9b00      	ldr	r3, [sp, #0]
  404488:	f103 0408 	add.w	r4, r3, #8
  40448c:	e01e      	b.n	4044cc <_malloc_r+0x18c>
  40448e:	2910      	cmp	r1, #16
  404490:	d820      	bhi.n	4044d4 <_malloc_r+0x194>
  404492:	f000 fa05 	bl	4048a0 <__malloc_lock>
  404496:	2610      	movs	r6, #16
  404498:	2318      	movs	r3, #24
  40449a:	2002      	movs	r0, #2
  40449c:	4f79      	ldr	r7, [pc, #484]	; (404684 <_malloc_r+0x344>)
  40449e:	443b      	add	r3, r7
  4044a0:	f1a3 0208 	sub.w	r2, r3, #8
  4044a4:	685c      	ldr	r4, [r3, #4]
  4044a6:	4294      	cmp	r4, r2
  4044a8:	f000 813d 	beq.w	404726 <_malloc_r+0x3e6>
  4044ac:	6863      	ldr	r3, [r4, #4]
  4044ae:	68e1      	ldr	r1, [r4, #12]
  4044b0:	68a6      	ldr	r6, [r4, #8]
  4044b2:	f023 0303 	bic.w	r3, r3, #3
  4044b6:	4423      	add	r3, r4
  4044b8:	4628      	mov	r0, r5
  4044ba:	685a      	ldr	r2, [r3, #4]
  4044bc:	60f1      	str	r1, [r6, #12]
  4044be:	f042 0201 	orr.w	r2, r2, #1
  4044c2:	608e      	str	r6, [r1, #8]
  4044c4:	605a      	str	r2, [r3, #4]
  4044c6:	f000 f9f1 	bl	4048ac <__malloc_unlock>
  4044ca:	3408      	adds	r4, #8
  4044cc:	4620      	mov	r0, r4
  4044ce:	b003      	add	sp, #12
  4044d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044d4:	2400      	movs	r4, #0
  4044d6:	230c      	movs	r3, #12
  4044d8:	4620      	mov	r0, r4
  4044da:	602b      	str	r3, [r5, #0]
  4044dc:	b003      	add	sp, #12
  4044de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044e2:	2040      	movs	r0, #64	; 0x40
  4044e4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4044e8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4044ec:	e74a      	b.n	404384 <_malloc_r+0x44>
  4044ee:	4423      	add	r3, r4
  4044f0:	68e1      	ldr	r1, [r4, #12]
  4044f2:	685a      	ldr	r2, [r3, #4]
  4044f4:	68a6      	ldr	r6, [r4, #8]
  4044f6:	f042 0201 	orr.w	r2, r2, #1
  4044fa:	60f1      	str	r1, [r6, #12]
  4044fc:	4628      	mov	r0, r5
  4044fe:	608e      	str	r6, [r1, #8]
  404500:	605a      	str	r2, [r3, #4]
  404502:	f000 f9d3 	bl	4048ac <__malloc_unlock>
  404506:	3408      	adds	r4, #8
  404508:	4620      	mov	r0, r4
  40450a:	b003      	add	sp, #12
  40450c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404510:	4423      	add	r3, r4
  404512:	4628      	mov	r0, r5
  404514:	685a      	ldr	r2, [r3, #4]
  404516:	f042 0201 	orr.w	r2, r2, #1
  40451a:	605a      	str	r2, [r3, #4]
  40451c:	f000 f9c6 	bl	4048ac <__malloc_unlock>
  404520:	3408      	adds	r4, #8
  404522:	4620      	mov	r0, r4
  404524:	b003      	add	sp, #12
  404526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40452a:	68bc      	ldr	r4, [r7, #8]
  40452c:	6863      	ldr	r3, [r4, #4]
  40452e:	f023 0803 	bic.w	r8, r3, #3
  404532:	45b0      	cmp	r8, r6
  404534:	d304      	bcc.n	404540 <_malloc_r+0x200>
  404536:	eba8 0306 	sub.w	r3, r8, r6
  40453a:	2b0f      	cmp	r3, #15
  40453c:	f300 8085 	bgt.w	40464a <_malloc_r+0x30a>
  404540:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40469c <_malloc_r+0x35c>
  404544:	4b50      	ldr	r3, [pc, #320]	; (404688 <_malloc_r+0x348>)
  404546:	f8d9 2000 	ldr.w	r2, [r9]
  40454a:	681b      	ldr	r3, [r3, #0]
  40454c:	3201      	adds	r2, #1
  40454e:	4433      	add	r3, r6
  404550:	eb04 0a08 	add.w	sl, r4, r8
  404554:	f000 8155 	beq.w	404802 <_malloc_r+0x4c2>
  404558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40455c:	330f      	adds	r3, #15
  40455e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404562:	f02b 0b0f 	bic.w	fp, fp, #15
  404566:	4659      	mov	r1, fp
  404568:	4628      	mov	r0, r5
  40456a:	f000 f9a5 	bl	4048b8 <_sbrk_r>
  40456e:	1c41      	adds	r1, r0, #1
  404570:	4602      	mov	r2, r0
  404572:	f000 80fc 	beq.w	40476e <_malloc_r+0x42e>
  404576:	4582      	cmp	sl, r0
  404578:	f200 80f7 	bhi.w	40476a <_malloc_r+0x42a>
  40457c:	4b43      	ldr	r3, [pc, #268]	; (40468c <_malloc_r+0x34c>)
  40457e:	6819      	ldr	r1, [r3, #0]
  404580:	4459      	add	r1, fp
  404582:	6019      	str	r1, [r3, #0]
  404584:	f000 814d 	beq.w	404822 <_malloc_r+0x4e2>
  404588:	f8d9 0000 	ldr.w	r0, [r9]
  40458c:	3001      	adds	r0, #1
  40458e:	bf1b      	ittet	ne
  404590:	eba2 0a0a 	subne.w	sl, r2, sl
  404594:	4451      	addne	r1, sl
  404596:	f8c9 2000 	streq.w	r2, [r9]
  40459a:	6019      	strne	r1, [r3, #0]
  40459c:	f012 0107 	ands.w	r1, r2, #7
  4045a0:	f000 8115 	beq.w	4047ce <_malloc_r+0x48e>
  4045a4:	f1c1 0008 	rsb	r0, r1, #8
  4045a8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4045ac:	4402      	add	r2, r0
  4045ae:	3108      	adds	r1, #8
  4045b0:	eb02 090b 	add.w	r9, r2, fp
  4045b4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4045b8:	eba1 0909 	sub.w	r9, r1, r9
  4045bc:	4649      	mov	r1, r9
  4045be:	4628      	mov	r0, r5
  4045c0:	9301      	str	r3, [sp, #4]
  4045c2:	9200      	str	r2, [sp, #0]
  4045c4:	f000 f978 	bl	4048b8 <_sbrk_r>
  4045c8:	1c43      	adds	r3, r0, #1
  4045ca:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4045ce:	f000 8143 	beq.w	404858 <_malloc_r+0x518>
  4045d2:	1a80      	subs	r0, r0, r2
  4045d4:	4448      	add	r0, r9
  4045d6:	f040 0001 	orr.w	r0, r0, #1
  4045da:	6819      	ldr	r1, [r3, #0]
  4045dc:	60ba      	str	r2, [r7, #8]
  4045de:	4449      	add	r1, r9
  4045e0:	42bc      	cmp	r4, r7
  4045e2:	6050      	str	r0, [r2, #4]
  4045e4:	6019      	str	r1, [r3, #0]
  4045e6:	d017      	beq.n	404618 <_malloc_r+0x2d8>
  4045e8:	f1b8 0f0f 	cmp.w	r8, #15
  4045ec:	f240 80fb 	bls.w	4047e6 <_malloc_r+0x4a6>
  4045f0:	6860      	ldr	r0, [r4, #4]
  4045f2:	f1a8 020c 	sub.w	r2, r8, #12
  4045f6:	f022 0207 	bic.w	r2, r2, #7
  4045fa:	eb04 0e02 	add.w	lr, r4, r2
  4045fe:	f000 0001 	and.w	r0, r0, #1
  404602:	f04f 0c05 	mov.w	ip, #5
  404606:	4310      	orrs	r0, r2
  404608:	2a0f      	cmp	r2, #15
  40460a:	6060      	str	r0, [r4, #4]
  40460c:	f8ce c004 	str.w	ip, [lr, #4]
  404610:	f8ce c008 	str.w	ip, [lr, #8]
  404614:	f200 8117 	bhi.w	404846 <_malloc_r+0x506>
  404618:	4b1d      	ldr	r3, [pc, #116]	; (404690 <_malloc_r+0x350>)
  40461a:	68bc      	ldr	r4, [r7, #8]
  40461c:	681a      	ldr	r2, [r3, #0]
  40461e:	4291      	cmp	r1, r2
  404620:	bf88      	it	hi
  404622:	6019      	strhi	r1, [r3, #0]
  404624:	4b1b      	ldr	r3, [pc, #108]	; (404694 <_malloc_r+0x354>)
  404626:	681a      	ldr	r2, [r3, #0]
  404628:	4291      	cmp	r1, r2
  40462a:	6862      	ldr	r2, [r4, #4]
  40462c:	bf88      	it	hi
  40462e:	6019      	strhi	r1, [r3, #0]
  404630:	f022 0203 	bic.w	r2, r2, #3
  404634:	4296      	cmp	r6, r2
  404636:	eba2 0306 	sub.w	r3, r2, r6
  40463a:	d801      	bhi.n	404640 <_malloc_r+0x300>
  40463c:	2b0f      	cmp	r3, #15
  40463e:	dc04      	bgt.n	40464a <_malloc_r+0x30a>
  404640:	4628      	mov	r0, r5
  404642:	f000 f933 	bl	4048ac <__malloc_unlock>
  404646:	2400      	movs	r4, #0
  404648:	e740      	b.n	4044cc <_malloc_r+0x18c>
  40464a:	19a2      	adds	r2, r4, r6
  40464c:	f043 0301 	orr.w	r3, r3, #1
  404650:	f046 0601 	orr.w	r6, r6, #1
  404654:	6066      	str	r6, [r4, #4]
  404656:	4628      	mov	r0, r5
  404658:	60ba      	str	r2, [r7, #8]
  40465a:	6053      	str	r3, [r2, #4]
  40465c:	f000 f926 	bl	4048ac <__malloc_unlock>
  404660:	3408      	adds	r4, #8
  404662:	4620      	mov	r0, r4
  404664:	b003      	add	sp, #12
  404666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40466a:	2b14      	cmp	r3, #20
  40466c:	d971      	bls.n	404752 <_malloc_r+0x412>
  40466e:	2b54      	cmp	r3, #84	; 0x54
  404670:	f200 80a3 	bhi.w	4047ba <_malloc_r+0x47a>
  404674:	0b33      	lsrs	r3, r6, #12
  404676:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40467a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40467e:	00c3      	lsls	r3, r0, #3
  404680:	e680      	b.n	404384 <_malloc_r+0x44>
  404682:	bf00      	nop
  404684:	2000044c 	.word	0x2000044c
  404688:	2000cd28 	.word	0x2000cd28
  40468c:	2000ccf8 	.word	0x2000ccf8
  404690:	2000cd20 	.word	0x2000cd20
  404694:	2000cd24 	.word	0x2000cd24
  404698:	20000454 	.word	0x20000454
  40469c:	20000854 	.word	0x20000854
  4046a0:	0a5a      	lsrs	r2, r3, #9
  4046a2:	2a04      	cmp	r2, #4
  4046a4:	d95b      	bls.n	40475e <_malloc_r+0x41e>
  4046a6:	2a14      	cmp	r2, #20
  4046a8:	f200 80ae 	bhi.w	404808 <_malloc_r+0x4c8>
  4046ac:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4046b0:	00c9      	lsls	r1, r1, #3
  4046b2:	325b      	adds	r2, #91	; 0x5b
  4046b4:	eb07 0c01 	add.w	ip, r7, r1
  4046b8:	5879      	ldr	r1, [r7, r1]
  4046ba:	f1ac 0c08 	sub.w	ip, ip, #8
  4046be:	458c      	cmp	ip, r1
  4046c0:	f000 8088 	beq.w	4047d4 <_malloc_r+0x494>
  4046c4:	684a      	ldr	r2, [r1, #4]
  4046c6:	f022 0203 	bic.w	r2, r2, #3
  4046ca:	4293      	cmp	r3, r2
  4046cc:	d273      	bcs.n	4047b6 <_malloc_r+0x476>
  4046ce:	6889      	ldr	r1, [r1, #8]
  4046d0:	458c      	cmp	ip, r1
  4046d2:	d1f7      	bne.n	4046c4 <_malloc_r+0x384>
  4046d4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4046d8:	687b      	ldr	r3, [r7, #4]
  4046da:	60e2      	str	r2, [r4, #12]
  4046dc:	f8c4 c008 	str.w	ip, [r4, #8]
  4046e0:	6094      	str	r4, [r2, #8]
  4046e2:	f8cc 400c 	str.w	r4, [ip, #12]
  4046e6:	e68f      	b.n	404408 <_malloc_r+0xc8>
  4046e8:	19a1      	adds	r1, r4, r6
  4046ea:	f046 0c01 	orr.w	ip, r6, #1
  4046ee:	f042 0601 	orr.w	r6, r2, #1
  4046f2:	f8c4 c004 	str.w	ip, [r4, #4]
  4046f6:	4628      	mov	r0, r5
  4046f8:	6179      	str	r1, [r7, #20]
  4046fa:	6139      	str	r1, [r7, #16]
  4046fc:	f8c1 e00c 	str.w	lr, [r1, #12]
  404700:	f8c1 e008 	str.w	lr, [r1, #8]
  404704:	604e      	str	r6, [r1, #4]
  404706:	50e2      	str	r2, [r4, r3]
  404708:	f000 f8d0 	bl	4048ac <__malloc_unlock>
  40470c:	3408      	adds	r4, #8
  40470e:	e6dd      	b.n	4044cc <_malloc_r+0x18c>
  404710:	687b      	ldr	r3, [r7, #4]
  404712:	e679      	b.n	404408 <_malloc_r+0xc8>
  404714:	f108 0801 	add.w	r8, r8, #1
  404718:	f018 0f03 	tst.w	r8, #3
  40471c:	f10c 0c08 	add.w	ip, ip, #8
  404720:	f47f ae85 	bne.w	40442e <_malloc_r+0xee>
  404724:	e02d      	b.n	404782 <_malloc_r+0x442>
  404726:	68dc      	ldr	r4, [r3, #12]
  404728:	42a3      	cmp	r3, r4
  40472a:	bf08      	it	eq
  40472c:	3002      	addeq	r0, #2
  40472e:	f43f ae3e 	beq.w	4043ae <_malloc_r+0x6e>
  404732:	e6bb      	b.n	4044ac <_malloc_r+0x16c>
  404734:	4419      	add	r1, r3
  404736:	461c      	mov	r4, r3
  404738:	684a      	ldr	r2, [r1, #4]
  40473a:	68db      	ldr	r3, [r3, #12]
  40473c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404740:	f042 0201 	orr.w	r2, r2, #1
  404744:	604a      	str	r2, [r1, #4]
  404746:	4628      	mov	r0, r5
  404748:	60f3      	str	r3, [r6, #12]
  40474a:	609e      	str	r6, [r3, #8]
  40474c:	f000 f8ae 	bl	4048ac <__malloc_unlock>
  404750:	e6bc      	b.n	4044cc <_malloc_r+0x18c>
  404752:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404756:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40475a:	00c3      	lsls	r3, r0, #3
  40475c:	e612      	b.n	404384 <_malloc_r+0x44>
  40475e:	099a      	lsrs	r2, r3, #6
  404760:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404764:	00c9      	lsls	r1, r1, #3
  404766:	3238      	adds	r2, #56	; 0x38
  404768:	e7a4      	b.n	4046b4 <_malloc_r+0x374>
  40476a:	42bc      	cmp	r4, r7
  40476c:	d054      	beq.n	404818 <_malloc_r+0x4d8>
  40476e:	68bc      	ldr	r4, [r7, #8]
  404770:	6862      	ldr	r2, [r4, #4]
  404772:	f022 0203 	bic.w	r2, r2, #3
  404776:	e75d      	b.n	404634 <_malloc_r+0x2f4>
  404778:	f859 3908 	ldr.w	r3, [r9], #-8
  40477c:	4599      	cmp	r9, r3
  40477e:	f040 8086 	bne.w	40488e <_malloc_r+0x54e>
  404782:	f010 0f03 	tst.w	r0, #3
  404786:	f100 30ff 	add.w	r0, r0, #4294967295
  40478a:	d1f5      	bne.n	404778 <_malloc_r+0x438>
  40478c:	687b      	ldr	r3, [r7, #4]
  40478e:	ea23 0304 	bic.w	r3, r3, r4
  404792:	607b      	str	r3, [r7, #4]
  404794:	0064      	lsls	r4, r4, #1
  404796:	429c      	cmp	r4, r3
  404798:	f63f aec7 	bhi.w	40452a <_malloc_r+0x1ea>
  40479c:	2c00      	cmp	r4, #0
  40479e:	f43f aec4 	beq.w	40452a <_malloc_r+0x1ea>
  4047a2:	421c      	tst	r4, r3
  4047a4:	4640      	mov	r0, r8
  4047a6:	f47f ae3e 	bne.w	404426 <_malloc_r+0xe6>
  4047aa:	0064      	lsls	r4, r4, #1
  4047ac:	421c      	tst	r4, r3
  4047ae:	f100 0004 	add.w	r0, r0, #4
  4047b2:	d0fa      	beq.n	4047aa <_malloc_r+0x46a>
  4047b4:	e637      	b.n	404426 <_malloc_r+0xe6>
  4047b6:	468c      	mov	ip, r1
  4047b8:	e78c      	b.n	4046d4 <_malloc_r+0x394>
  4047ba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4047be:	d815      	bhi.n	4047ec <_malloc_r+0x4ac>
  4047c0:	0bf3      	lsrs	r3, r6, #15
  4047c2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4047c6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4047ca:	00c3      	lsls	r3, r0, #3
  4047cc:	e5da      	b.n	404384 <_malloc_r+0x44>
  4047ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4047d2:	e6ed      	b.n	4045b0 <_malloc_r+0x270>
  4047d4:	687b      	ldr	r3, [r7, #4]
  4047d6:	1092      	asrs	r2, r2, #2
  4047d8:	2101      	movs	r1, #1
  4047da:	fa01 f202 	lsl.w	r2, r1, r2
  4047de:	4313      	orrs	r3, r2
  4047e0:	607b      	str	r3, [r7, #4]
  4047e2:	4662      	mov	r2, ip
  4047e4:	e779      	b.n	4046da <_malloc_r+0x39a>
  4047e6:	2301      	movs	r3, #1
  4047e8:	6053      	str	r3, [r2, #4]
  4047ea:	e729      	b.n	404640 <_malloc_r+0x300>
  4047ec:	f240 5254 	movw	r2, #1364	; 0x554
  4047f0:	4293      	cmp	r3, r2
  4047f2:	d822      	bhi.n	40483a <_malloc_r+0x4fa>
  4047f4:	0cb3      	lsrs	r3, r6, #18
  4047f6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4047fa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4047fe:	00c3      	lsls	r3, r0, #3
  404800:	e5c0      	b.n	404384 <_malloc_r+0x44>
  404802:	f103 0b10 	add.w	fp, r3, #16
  404806:	e6ae      	b.n	404566 <_malloc_r+0x226>
  404808:	2a54      	cmp	r2, #84	; 0x54
  40480a:	d829      	bhi.n	404860 <_malloc_r+0x520>
  40480c:	0b1a      	lsrs	r2, r3, #12
  40480e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404812:	00c9      	lsls	r1, r1, #3
  404814:	326e      	adds	r2, #110	; 0x6e
  404816:	e74d      	b.n	4046b4 <_malloc_r+0x374>
  404818:	4b20      	ldr	r3, [pc, #128]	; (40489c <_malloc_r+0x55c>)
  40481a:	6819      	ldr	r1, [r3, #0]
  40481c:	4459      	add	r1, fp
  40481e:	6019      	str	r1, [r3, #0]
  404820:	e6b2      	b.n	404588 <_malloc_r+0x248>
  404822:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404826:	2800      	cmp	r0, #0
  404828:	f47f aeae 	bne.w	404588 <_malloc_r+0x248>
  40482c:	eb08 030b 	add.w	r3, r8, fp
  404830:	68ba      	ldr	r2, [r7, #8]
  404832:	f043 0301 	orr.w	r3, r3, #1
  404836:	6053      	str	r3, [r2, #4]
  404838:	e6ee      	b.n	404618 <_malloc_r+0x2d8>
  40483a:	207f      	movs	r0, #127	; 0x7f
  40483c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404840:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404844:	e59e      	b.n	404384 <_malloc_r+0x44>
  404846:	f104 0108 	add.w	r1, r4, #8
  40484a:	4628      	mov	r0, r5
  40484c:	9300      	str	r3, [sp, #0]
  40484e:	f7ff fc29 	bl	4040a4 <_free_r>
  404852:	9b00      	ldr	r3, [sp, #0]
  404854:	6819      	ldr	r1, [r3, #0]
  404856:	e6df      	b.n	404618 <_malloc_r+0x2d8>
  404858:	2001      	movs	r0, #1
  40485a:	f04f 0900 	mov.w	r9, #0
  40485e:	e6bc      	b.n	4045da <_malloc_r+0x29a>
  404860:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404864:	d805      	bhi.n	404872 <_malloc_r+0x532>
  404866:	0bda      	lsrs	r2, r3, #15
  404868:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40486c:	00c9      	lsls	r1, r1, #3
  40486e:	3277      	adds	r2, #119	; 0x77
  404870:	e720      	b.n	4046b4 <_malloc_r+0x374>
  404872:	f240 5154 	movw	r1, #1364	; 0x554
  404876:	428a      	cmp	r2, r1
  404878:	d805      	bhi.n	404886 <_malloc_r+0x546>
  40487a:	0c9a      	lsrs	r2, r3, #18
  40487c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404880:	00c9      	lsls	r1, r1, #3
  404882:	327c      	adds	r2, #124	; 0x7c
  404884:	e716      	b.n	4046b4 <_malloc_r+0x374>
  404886:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40488a:	227e      	movs	r2, #126	; 0x7e
  40488c:	e712      	b.n	4046b4 <_malloc_r+0x374>
  40488e:	687b      	ldr	r3, [r7, #4]
  404890:	e780      	b.n	404794 <_malloc_r+0x454>
  404892:	08f0      	lsrs	r0, r6, #3
  404894:	f106 0308 	add.w	r3, r6, #8
  404898:	e600      	b.n	40449c <_malloc_r+0x15c>
  40489a:	bf00      	nop
  40489c:	2000ccf8 	.word	0x2000ccf8

004048a0 <__malloc_lock>:
  4048a0:	4801      	ldr	r0, [pc, #4]	; (4048a8 <__malloc_lock+0x8>)
  4048a2:	f7ff bd13 	b.w	4042cc <__retarget_lock_acquire_recursive>
  4048a6:	bf00      	nop
  4048a8:	2000ce28 	.word	0x2000ce28

004048ac <__malloc_unlock>:
  4048ac:	4801      	ldr	r0, [pc, #4]	; (4048b4 <__malloc_unlock+0x8>)
  4048ae:	f7ff bd0f 	b.w	4042d0 <__retarget_lock_release_recursive>
  4048b2:	bf00      	nop
  4048b4:	2000ce28 	.word	0x2000ce28

004048b8 <_sbrk_r>:
  4048b8:	b538      	push	{r3, r4, r5, lr}
  4048ba:	4c07      	ldr	r4, [pc, #28]	; (4048d8 <_sbrk_r+0x20>)
  4048bc:	2300      	movs	r3, #0
  4048be:	4605      	mov	r5, r0
  4048c0:	4608      	mov	r0, r1
  4048c2:	6023      	str	r3, [r4, #0]
  4048c4:	f7fc fefa 	bl	4016bc <_sbrk>
  4048c8:	1c43      	adds	r3, r0, #1
  4048ca:	d000      	beq.n	4048ce <_sbrk_r+0x16>
  4048cc:	bd38      	pop	{r3, r4, r5, pc}
  4048ce:	6823      	ldr	r3, [r4, #0]
  4048d0:	2b00      	cmp	r3, #0
  4048d2:	d0fb      	beq.n	4048cc <_sbrk_r+0x14>
  4048d4:	602b      	str	r3, [r5, #0]
  4048d6:	bd38      	pop	{r3, r4, r5, pc}
  4048d8:	2000ce3c 	.word	0x2000ce3c

004048dc <__sread>:
  4048dc:	b510      	push	{r4, lr}
  4048de:	460c      	mov	r4, r1
  4048e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4048e4:	f000 f954 	bl	404b90 <_read_r>
  4048e8:	2800      	cmp	r0, #0
  4048ea:	db03      	blt.n	4048f4 <__sread+0x18>
  4048ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4048ee:	4403      	add	r3, r0
  4048f0:	6523      	str	r3, [r4, #80]	; 0x50
  4048f2:	bd10      	pop	{r4, pc}
  4048f4:	89a3      	ldrh	r3, [r4, #12]
  4048f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4048fa:	81a3      	strh	r3, [r4, #12]
  4048fc:	bd10      	pop	{r4, pc}
  4048fe:	bf00      	nop

00404900 <__swrite>:
  404900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404904:	4616      	mov	r6, r2
  404906:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40490a:	461f      	mov	r7, r3
  40490c:	05d3      	lsls	r3, r2, #23
  40490e:	460c      	mov	r4, r1
  404910:	4605      	mov	r5, r0
  404912:	d507      	bpl.n	404924 <__swrite+0x24>
  404914:	2200      	movs	r2, #0
  404916:	2302      	movs	r3, #2
  404918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40491c:	f000 f922 	bl	404b64 <_lseek_r>
  404920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404928:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40492c:	81a2      	strh	r2, [r4, #12]
  40492e:	463b      	mov	r3, r7
  404930:	4632      	mov	r2, r6
  404932:	4628      	mov	r0, r5
  404934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404938:	f000 b814 	b.w	404964 <_write_r>

0040493c <__sseek>:
  40493c:	b510      	push	{r4, lr}
  40493e:	460c      	mov	r4, r1
  404940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404944:	f000 f90e 	bl	404b64 <_lseek_r>
  404948:	89a3      	ldrh	r3, [r4, #12]
  40494a:	1c42      	adds	r2, r0, #1
  40494c:	bf0e      	itee	eq
  40494e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404956:	6520      	strne	r0, [r4, #80]	; 0x50
  404958:	81a3      	strh	r3, [r4, #12]
  40495a:	bd10      	pop	{r4, pc}

0040495c <__sclose>:
  40495c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404960:	f000 b878 	b.w	404a54 <_close_r>

00404964 <_write_r>:
  404964:	b570      	push	{r4, r5, r6, lr}
  404966:	460d      	mov	r5, r1
  404968:	4c08      	ldr	r4, [pc, #32]	; (40498c <_write_r+0x28>)
  40496a:	4611      	mov	r1, r2
  40496c:	4606      	mov	r6, r0
  40496e:	461a      	mov	r2, r3
  404970:	4628      	mov	r0, r5
  404972:	2300      	movs	r3, #0
  404974:	6023      	str	r3, [r4, #0]
  404976:	f7fc f9c7 	bl	400d08 <_write>
  40497a:	1c43      	adds	r3, r0, #1
  40497c:	d000      	beq.n	404980 <_write_r+0x1c>
  40497e:	bd70      	pop	{r4, r5, r6, pc}
  404980:	6823      	ldr	r3, [r4, #0]
  404982:	2b00      	cmp	r3, #0
  404984:	d0fb      	beq.n	40497e <_write_r+0x1a>
  404986:	6033      	str	r3, [r6, #0]
  404988:	bd70      	pop	{r4, r5, r6, pc}
  40498a:	bf00      	nop
  40498c:	2000ce3c 	.word	0x2000ce3c

00404990 <__register_exitproc>:
  404990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404994:	4d2c      	ldr	r5, [pc, #176]	; (404a48 <__register_exitproc+0xb8>)
  404996:	4606      	mov	r6, r0
  404998:	6828      	ldr	r0, [r5, #0]
  40499a:	4698      	mov	r8, r3
  40499c:	460f      	mov	r7, r1
  40499e:	4691      	mov	r9, r2
  4049a0:	f7ff fc94 	bl	4042cc <__retarget_lock_acquire_recursive>
  4049a4:	4b29      	ldr	r3, [pc, #164]	; (404a4c <__register_exitproc+0xbc>)
  4049a6:	681c      	ldr	r4, [r3, #0]
  4049a8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4049ac:	2b00      	cmp	r3, #0
  4049ae:	d03e      	beq.n	404a2e <__register_exitproc+0x9e>
  4049b0:	685a      	ldr	r2, [r3, #4]
  4049b2:	2a1f      	cmp	r2, #31
  4049b4:	dc1c      	bgt.n	4049f0 <__register_exitproc+0x60>
  4049b6:	f102 0e01 	add.w	lr, r2, #1
  4049ba:	b176      	cbz	r6, 4049da <__register_exitproc+0x4a>
  4049bc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4049c0:	2401      	movs	r4, #1
  4049c2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4049c6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4049ca:	4094      	lsls	r4, r2
  4049cc:	4320      	orrs	r0, r4
  4049ce:	2e02      	cmp	r6, #2
  4049d0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4049d4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4049d8:	d023      	beq.n	404a22 <__register_exitproc+0x92>
  4049da:	3202      	adds	r2, #2
  4049dc:	f8c3 e004 	str.w	lr, [r3, #4]
  4049e0:	6828      	ldr	r0, [r5, #0]
  4049e2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4049e6:	f7ff fc73 	bl	4042d0 <__retarget_lock_release_recursive>
  4049ea:	2000      	movs	r0, #0
  4049ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4049f0:	4b17      	ldr	r3, [pc, #92]	; (404a50 <__register_exitproc+0xc0>)
  4049f2:	b30b      	cbz	r3, 404a38 <__register_exitproc+0xa8>
  4049f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4049f8:	f7ff fc9a 	bl	404330 <malloc>
  4049fc:	4603      	mov	r3, r0
  4049fe:	b1d8      	cbz	r0, 404a38 <__register_exitproc+0xa8>
  404a00:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  404a04:	6002      	str	r2, [r0, #0]
  404a06:	2100      	movs	r1, #0
  404a08:	6041      	str	r1, [r0, #4]
  404a0a:	460a      	mov	r2, r1
  404a0c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404a10:	f04f 0e01 	mov.w	lr, #1
  404a14:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404a18:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404a1c:	2e00      	cmp	r6, #0
  404a1e:	d0dc      	beq.n	4049da <__register_exitproc+0x4a>
  404a20:	e7cc      	b.n	4049bc <__register_exitproc+0x2c>
  404a22:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  404a26:	430c      	orrs	r4, r1
  404a28:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404a2c:	e7d5      	b.n	4049da <__register_exitproc+0x4a>
  404a2e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404a32:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  404a36:	e7bb      	b.n	4049b0 <__register_exitproc+0x20>
  404a38:	6828      	ldr	r0, [r5, #0]
  404a3a:	f7ff fc49 	bl	4042d0 <__retarget_lock_release_recursive>
  404a3e:	f04f 30ff 	mov.w	r0, #4294967295
  404a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404a46:	bf00      	nop
  404a48:	20000448 	.word	0x20000448
  404a4c:	00404bd8 	.word	0x00404bd8
  404a50:	00404331 	.word	0x00404331

00404a54 <_close_r>:
  404a54:	b538      	push	{r3, r4, r5, lr}
  404a56:	4c07      	ldr	r4, [pc, #28]	; (404a74 <_close_r+0x20>)
  404a58:	2300      	movs	r3, #0
  404a5a:	4605      	mov	r5, r0
  404a5c:	4608      	mov	r0, r1
  404a5e:	6023      	str	r3, [r4, #0]
  404a60:	f7fc fe48 	bl	4016f4 <_close>
  404a64:	1c43      	adds	r3, r0, #1
  404a66:	d000      	beq.n	404a6a <_close_r+0x16>
  404a68:	bd38      	pop	{r3, r4, r5, pc}
  404a6a:	6823      	ldr	r3, [r4, #0]
  404a6c:	2b00      	cmp	r3, #0
  404a6e:	d0fb      	beq.n	404a68 <_close_r+0x14>
  404a70:	602b      	str	r3, [r5, #0]
  404a72:	bd38      	pop	{r3, r4, r5, pc}
  404a74:	2000ce3c 	.word	0x2000ce3c

00404a78 <_fclose_r>:
  404a78:	b570      	push	{r4, r5, r6, lr}
  404a7a:	b159      	cbz	r1, 404a94 <_fclose_r+0x1c>
  404a7c:	4605      	mov	r5, r0
  404a7e:	460c      	mov	r4, r1
  404a80:	b110      	cbz	r0, 404a88 <_fclose_r+0x10>
  404a82:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404a84:	2b00      	cmp	r3, #0
  404a86:	d03c      	beq.n	404b02 <_fclose_r+0x8a>
  404a88:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404a8a:	07d8      	lsls	r0, r3, #31
  404a8c:	d505      	bpl.n	404a9a <_fclose_r+0x22>
  404a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a92:	b92b      	cbnz	r3, 404aa0 <_fclose_r+0x28>
  404a94:	2600      	movs	r6, #0
  404a96:	4630      	mov	r0, r6
  404a98:	bd70      	pop	{r4, r5, r6, pc}
  404a9a:	89a3      	ldrh	r3, [r4, #12]
  404a9c:	0599      	lsls	r1, r3, #22
  404a9e:	d53c      	bpl.n	404b1a <_fclose_r+0xa2>
  404aa0:	4621      	mov	r1, r4
  404aa2:	4628      	mov	r0, r5
  404aa4:	f7ff f964 	bl	403d70 <__sflush_r>
  404aa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404aaa:	4606      	mov	r6, r0
  404aac:	b133      	cbz	r3, 404abc <_fclose_r+0x44>
  404aae:	69e1      	ldr	r1, [r4, #28]
  404ab0:	4628      	mov	r0, r5
  404ab2:	4798      	blx	r3
  404ab4:	2800      	cmp	r0, #0
  404ab6:	bfb8      	it	lt
  404ab8:	f04f 36ff 	movlt.w	r6, #4294967295
  404abc:	89a3      	ldrh	r3, [r4, #12]
  404abe:	061a      	lsls	r2, r3, #24
  404ac0:	d422      	bmi.n	404b08 <_fclose_r+0x90>
  404ac2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404ac4:	b141      	cbz	r1, 404ad8 <_fclose_r+0x60>
  404ac6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404aca:	4299      	cmp	r1, r3
  404acc:	d002      	beq.n	404ad4 <_fclose_r+0x5c>
  404ace:	4628      	mov	r0, r5
  404ad0:	f7ff fae8 	bl	4040a4 <_free_r>
  404ad4:	2300      	movs	r3, #0
  404ad6:	6323      	str	r3, [r4, #48]	; 0x30
  404ad8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404ada:	b121      	cbz	r1, 404ae6 <_fclose_r+0x6e>
  404adc:	4628      	mov	r0, r5
  404ade:	f7ff fae1 	bl	4040a4 <_free_r>
  404ae2:	2300      	movs	r3, #0
  404ae4:	6463      	str	r3, [r4, #68]	; 0x44
  404ae6:	f7ff fa67 	bl	403fb8 <__sfp_lock_acquire>
  404aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404aec:	2200      	movs	r2, #0
  404aee:	07db      	lsls	r3, r3, #31
  404af0:	81a2      	strh	r2, [r4, #12]
  404af2:	d50e      	bpl.n	404b12 <_fclose_r+0x9a>
  404af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404af6:	f7ff fbe7 	bl	4042c8 <__retarget_lock_close_recursive>
  404afa:	f7ff fa63 	bl	403fc4 <__sfp_lock_release>
  404afe:	4630      	mov	r0, r6
  404b00:	bd70      	pop	{r4, r5, r6, pc}
  404b02:	f7ff fa2d 	bl	403f60 <__sinit>
  404b06:	e7bf      	b.n	404a88 <_fclose_r+0x10>
  404b08:	6921      	ldr	r1, [r4, #16]
  404b0a:	4628      	mov	r0, r5
  404b0c:	f7ff faca 	bl	4040a4 <_free_r>
  404b10:	e7d7      	b.n	404ac2 <_fclose_r+0x4a>
  404b12:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b14:	f7ff fbdc 	bl	4042d0 <__retarget_lock_release_recursive>
  404b18:	e7ec      	b.n	404af4 <_fclose_r+0x7c>
  404b1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b1c:	f7ff fbd6 	bl	4042cc <__retarget_lock_acquire_recursive>
  404b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b24:	2b00      	cmp	r3, #0
  404b26:	d1bb      	bne.n	404aa0 <_fclose_r+0x28>
  404b28:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404b2a:	f016 0601 	ands.w	r6, r6, #1
  404b2e:	d1b1      	bne.n	404a94 <_fclose_r+0x1c>
  404b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b32:	f7ff fbcd 	bl	4042d0 <__retarget_lock_release_recursive>
  404b36:	4630      	mov	r0, r6
  404b38:	bd70      	pop	{r4, r5, r6, pc}
  404b3a:	bf00      	nop

00404b3c <_fstat_r>:
  404b3c:	b538      	push	{r3, r4, r5, lr}
  404b3e:	460b      	mov	r3, r1
  404b40:	4c07      	ldr	r4, [pc, #28]	; (404b60 <_fstat_r+0x24>)
  404b42:	4605      	mov	r5, r0
  404b44:	4611      	mov	r1, r2
  404b46:	4618      	mov	r0, r3
  404b48:	2300      	movs	r3, #0
  404b4a:	6023      	str	r3, [r4, #0]
  404b4c:	f7fc fdd5 	bl	4016fa <_fstat>
  404b50:	1c43      	adds	r3, r0, #1
  404b52:	d000      	beq.n	404b56 <_fstat_r+0x1a>
  404b54:	bd38      	pop	{r3, r4, r5, pc}
  404b56:	6823      	ldr	r3, [r4, #0]
  404b58:	2b00      	cmp	r3, #0
  404b5a:	d0fb      	beq.n	404b54 <_fstat_r+0x18>
  404b5c:	602b      	str	r3, [r5, #0]
  404b5e:	bd38      	pop	{r3, r4, r5, pc}
  404b60:	2000ce3c 	.word	0x2000ce3c

00404b64 <_lseek_r>:
  404b64:	b570      	push	{r4, r5, r6, lr}
  404b66:	460d      	mov	r5, r1
  404b68:	4c08      	ldr	r4, [pc, #32]	; (404b8c <_lseek_r+0x28>)
  404b6a:	4611      	mov	r1, r2
  404b6c:	4606      	mov	r6, r0
  404b6e:	461a      	mov	r2, r3
  404b70:	4628      	mov	r0, r5
  404b72:	2300      	movs	r3, #0
  404b74:	6023      	str	r3, [r4, #0]
  404b76:	f7fc fdc5 	bl	401704 <_lseek>
  404b7a:	1c43      	adds	r3, r0, #1
  404b7c:	d000      	beq.n	404b80 <_lseek_r+0x1c>
  404b7e:	bd70      	pop	{r4, r5, r6, pc}
  404b80:	6823      	ldr	r3, [r4, #0]
  404b82:	2b00      	cmp	r3, #0
  404b84:	d0fb      	beq.n	404b7e <_lseek_r+0x1a>
  404b86:	6033      	str	r3, [r6, #0]
  404b88:	bd70      	pop	{r4, r5, r6, pc}
  404b8a:	bf00      	nop
  404b8c:	2000ce3c 	.word	0x2000ce3c

00404b90 <_read_r>:
  404b90:	b570      	push	{r4, r5, r6, lr}
  404b92:	460d      	mov	r5, r1
  404b94:	4c08      	ldr	r4, [pc, #32]	; (404bb8 <_read_r+0x28>)
  404b96:	4611      	mov	r1, r2
  404b98:	4606      	mov	r6, r0
  404b9a:	461a      	mov	r2, r3
  404b9c:	4628      	mov	r0, r5
  404b9e:	2300      	movs	r3, #0
  404ba0:	6023      	str	r3, [r4, #0]
  404ba2:	f7fc f893 	bl	400ccc <_read>
  404ba6:	1c43      	adds	r3, r0, #1
  404ba8:	d000      	beq.n	404bac <_read_r+0x1c>
  404baa:	bd70      	pop	{r4, r5, r6, pc}
  404bac:	6823      	ldr	r3, [r4, #0]
  404bae:	2b00      	cmp	r3, #0
  404bb0:	d0fb      	beq.n	404baa <_read_r+0x1a>
  404bb2:	6033      	str	r3, [r6, #0]
  404bb4:	bd70      	pop	{r4, r5, r6, pc}
  404bb6:	bf00      	nop
  404bb8:	2000ce3c 	.word	0x2000ce3c
  404bbc:	00776f70 	.word	0x00776f70
  404bc0:	74727173 	.word	0x74727173
  404bc4:	00000000 	.word	0x00000000

00404bc8 <TWO52>:
  404bc8:	00000000 43300000 00000000 c3300000     ......0C......0.

00404bd8 <_global_impure_ptr>:
  404bd8:	20000020                                 .. 

00404bdc <_init>:
  404bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404bde:	bf00      	nop
  404be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404be2:	bc08      	pop	{r3}
  404be4:	469e      	mov	lr, r3
  404be6:	4770      	bx	lr

00404be8 <__init_array_start>:
  404be8:	00403d51 	.word	0x00403d51

00404bec <__frame_dummy_init_array_entry>:
  404bec:	0040011d                                ..@.

00404bf0 <_fini>:
  404bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404bf2:	bf00      	nop
  404bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404bf6:	bc08      	pop	{r3}
  404bf8:	469e      	mov	lr, r3
  404bfa:	4770      	bx	lr

00404bfc <__fini_array_start>:
  404bfc:	004000f9 	.word	0x004000f9

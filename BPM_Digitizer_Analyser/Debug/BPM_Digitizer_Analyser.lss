
BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000066d4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004066d4  004066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  004066dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008458  200009b8  00407098  000209b8  2**3
                  ALLOC
  4 .stack        00003000  20008e10  0040f4f0  000209b8  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001875c  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003996  00000000  00000000  0003919b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004fe5  00000000  00000000  0003cb31  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a98  00000000  00000000  00041b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a28  00000000  00000000  000425ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a37c  00000000  00000000  00042fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000db21  00000000  00000000  0005d352  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00065bc5  00000000  00000000  0006ae73  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000028b4  00000000  00000000  000d0a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 be 00 20 69 0a 40 00 65 0a 40 00 65 0a 40 00     ... i.@.e.@.e.@.
  400010:	65 0a 40 00 65 0a 40 00 65 0a 40 00 00 00 00 00     e.@.e.@.e.@.....
	...
  40002c:	65 0a 40 00 65 0a 40 00 00 00 00 00 65 0a 40 00     e.@.e.@.....e.@.
  40003c:	65 0a 40 00 65 0a 40 00 65 0a 40 00 65 0a 40 00     e.@.e.@.e.@.e.@.
  40004c:	65 0a 40 00 65 0a 40 00 65 0a 40 00 65 0a 40 00     e.@.e.@.e.@.e.@.
  40005c:	65 0a 40 00 65 0a 40 00 65 0a 40 00 65 0a 40 00     e.@.e.@.e.@.e.@.
  40006c:	65 0a 40 00 65 0a 40 00 65 0a 40 00 01 0d 40 00     e.@.e.@.e.@...@.
  40007c:	65 0a 40 00 65 0a 40 00 65 0a 40 00 65 0a 40 00     e.@.e.@.e.@.e.@.
  40008c:	65 0a 40 00 65 0a 40 00 65 0a 40 00 c1 16 40 00     e.@.e.@.e.@...@.
  40009c:	65 0a 40 00 65 0a 40 00 65 0a 40 00 65 0a 40 00     e.@.e.@.e.@.e.@.
  4000ac:	65 0a 40 00 65 0a 40 00 65 0a 40 00 e5 06 40 00     e.@.e.@.e.@...@.
  4000bc:	f9 06 40 00 65 0a 40 00 59 16 40 00 65 0a 40 00     ..@.e.@.Y.@.e.@.
  4000cc:	65 0a 40 00 65 0a 40 00 65 0a 40 00 65 0a 40 00     e.@.e.@.e.@.e.@.
  4000dc:	65 0a 40 00 65 0a 40 00 65 0a 40 00 65 0a 40 00     e.@.e.@.e.@.e.@.
  4000ec:	65 0a 40 00 65 0a 40 00 65 0a 40 00                 e.@.e.@.e.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009b8 	.word	0x200009b8
  400114:	00000000 	.word	0x00000000
  400118:	004066dc 	.word	0x004066dc

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004066dc 	.word	0x004066dc
  400158:	200009bc 	.word	0x200009bc
  40015c:	004066dc 	.word	0x004066dc
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	480b      	ldr	r0, [pc, #44]	; (4001c8 <sysclk_init+0x64>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	00400c3d 	.word	0x00400c3d
  4001a8:	0040086d 	.word	0x0040086d
  4001ac:	004008c1 	.word	0x004008c1
  4001b0:	004008d1 	.word	0x004008d1
  4001b4:	200f3f01 	.word	0x200f3f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	004008e1 	.word	0x004008e1
  4001c0:	00400809 	.word	0x00400809
  4001c4:	00400b31 	.word	0x00400b31
  4001c8:	05b8d800 	.word	0x05b8d800

004001cc <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  4001cc:	2a00      	cmp	r2, #0
  4001ce:	d037      	beq.n	400240 <usart_serial_write_packet+0x74>
{
  4001d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4001d4:	4693      	mov	fp, r2
  4001d6:	4605      	mov	r5, r0
  4001d8:	460f      	mov	r7, r1
  4001da:	448b      	add	fp, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001dc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 400250 <usart_serial_write_packet+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001e0:	4e18      	ldr	r6, [pc, #96]	; (400244 <usart_serial_write_packet+0x78>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001e2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400254 <usart_serial_write_packet+0x88>
  4001e6:	e006      	b.n	4001f6 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001e8:	4621      	mov	r1, r4
  4001ea:	4640      	mov	r0, r8
  4001ec:	47b0      	blx	r6
  4001ee:	2800      	cmp	r0, #0
  4001f0:	d1fa      	bne.n	4001e8 <usart_serial_write_packet+0x1c>
	while (len) {
  4001f2:	45bb      	cmp	fp, r7
  4001f4:	d021      	beq.n	40023a <usart_serial_write_packet+0x6e>
		usart_serial_putchar(usart, *data);
  4001f6:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  4001fa:	4545      	cmp	r5, r8
  4001fc:	d0f4      	beq.n	4001e8 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  4001fe:	454d      	cmp	r5, r9
  400200:	d00d      	beq.n	40021e <usart_serial_write_packet+0x52>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400202:	4b11      	ldr	r3, [pc, #68]	; (400248 <usart_serial_write_packet+0x7c>)
  400204:	429d      	cmp	r5, r3
  400206:	d010      	beq.n	40022a <usart_serial_write_packet+0x5e>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400208:	4b10      	ldr	r3, [pc, #64]	; (40024c <usart_serial_write_packet+0x80>)
  40020a:	429d      	cmp	r5, r3
  40020c:	d1f1      	bne.n	4001f2 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40020e:	f8df a048 	ldr.w	sl, [pc, #72]	; 400258 <usart_serial_write_packet+0x8c>
  400212:	4621      	mov	r1, r4
  400214:	480d      	ldr	r0, [pc, #52]	; (40024c <usart_serial_write_packet+0x80>)
  400216:	47d0      	blx	sl
  400218:	2800      	cmp	r0, #0
  40021a:	d1fa      	bne.n	400212 <usart_serial_write_packet+0x46>
  40021c:	e7e9      	b.n	4001f2 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40021e:	4621      	mov	r1, r4
  400220:	4648      	mov	r0, r9
  400222:	47b0      	blx	r6
  400224:	2800      	cmp	r0, #0
  400226:	d1fa      	bne.n	40021e <usart_serial_write_packet+0x52>
  400228:	e7e3      	b.n	4001f2 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40022a:	f8df a02c 	ldr.w	sl, [pc, #44]	; 400258 <usart_serial_write_packet+0x8c>
  40022e:	4621      	mov	r1, r4
  400230:	4805      	ldr	r0, [pc, #20]	; (400248 <usart_serial_write_packet+0x7c>)
  400232:	47d0      	blx	sl
  400234:	2800      	cmp	r0, #0
  400236:	d1fa      	bne.n	40022e <usart_serial_write_packet+0x62>
  400238:	e7db      	b.n	4001f2 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  40023a:	2000      	movs	r0, #0
  40023c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400240:	2000      	movs	r0, #0
  400242:	4770      	bx	lr
  400244:	00400a17 	.word	0x00400a17
  400248:	400a0000 	.word	0x400a0000
  40024c:	400a4000 	.word	0x400a4000
  400250:	400e0600 	.word	0x400e0600
  400254:	40060600 	.word	0x40060600
  400258:	00400a39 	.word	0x00400a39

0040025c <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  40025c:	2a00      	cmp	r2, #0
  40025e:	d03f      	beq.n	4002e0 <usart_serial_read_packet+0x84>
{
  400260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400264:	b083      	sub	sp, #12
  400266:	4606      	mov	r6, r0
  400268:	460c      	mov	r4, r1
  40026a:	4693      	mov	fp, r2
  40026c:	448b      	add	fp, r1
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40026e:	4f1d      	ldr	r7, [pc, #116]	; (4002e4 <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  400270:	4d1d      	ldr	r5, [pc, #116]	; (4002e8 <usart_serial_read_packet+0x8c>)
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400272:	f8df a080 	ldr.w	sl, [pc, #128]	; 4002f4 <usart_serial_read_packet+0x98>
  400276:	e00d      	b.n	400294 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  400278:	4621      	mov	r1, r4
  40027a:	4638      	mov	r0, r7
  40027c:	47a8      	blx	r5
  40027e:	2800      	cmp	r0, #0
  400280:	d1fa      	bne.n	400278 <usart_serial_read_packet+0x1c>
  400282:	e010      	b.n	4002a6 <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  400284:	4621      	mov	r1, r4
  400286:	4650      	mov	r0, sl
  400288:	47a8      	blx	r5
  40028a:	2800      	cmp	r0, #0
  40028c:	d1fa      	bne.n	400284 <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  40028e:	3401      	adds	r4, #1
	while (len) {
  400290:	455c      	cmp	r4, fp
  400292:	d021      	beq.n	4002d8 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400294:	2300      	movs	r3, #0
  400296:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400298:	42be      	cmp	r6, r7
  40029a:	d0ed      	beq.n	400278 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40029c:	4556      	cmp	r6, sl
  40029e:	d0f1      	beq.n	400284 <usart_serial_read_packet+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002a0:	4b12      	ldr	r3, [pc, #72]	; (4002ec <usart_serial_read_packet+0x90>)
  4002a2:	429e      	cmp	r6, r3
  4002a4:	d00d      	beq.n	4002c2 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002a6:	4b12      	ldr	r3, [pc, #72]	; (4002f0 <usart_serial_read_packet+0x94>)
  4002a8:	429e      	cmp	r6, r3
  4002aa:	d1f0      	bne.n	40028e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  4002ac:	4699      	mov	r9, r3
  4002ae:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4002f8 <usart_serial_read_packet+0x9c>
  4002b2:	a901      	add	r1, sp, #4
  4002b4:	4648      	mov	r0, r9
  4002b6:	47c0      	blx	r8
  4002b8:	2800      	cmp	r0, #0
  4002ba:	d1fa      	bne.n	4002b2 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  4002bc:	9b01      	ldr	r3, [sp, #4]
  4002be:	7023      	strb	r3, [r4, #0]
  4002c0:	e7e5      	b.n	40028e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  4002c2:	4699      	mov	r9, r3
  4002c4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4002f8 <usart_serial_read_packet+0x9c>
  4002c8:	a901      	add	r1, sp, #4
  4002ca:	4648      	mov	r0, r9
  4002cc:	47c0      	blx	r8
  4002ce:	2800      	cmp	r0, #0
  4002d0:	d1fa      	bne.n	4002c8 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  4002d2:	9b01      	ldr	r3, [sp, #4]
  4002d4:	7023      	strb	r3, [r4, #0]
  4002d6:	e7da      	b.n	40028e <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  4002d8:	2000      	movs	r0, #0
  4002da:	b003      	add	sp, #12
  4002dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002e0:	2000      	movs	r0, #0
  4002e2:	4770      	bx	lr
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	00400a27 	.word	0x00400a27
  4002ec:	400a0000 	.word	0x400a0000
  4002f0:	400a4000 	.word	0x400a4000
  4002f4:	40060600 	.word	0x40060600
  4002f8:	00400a4d 	.word	0x00400a4d

004002fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400300:	b980      	cbnz	r0, 400324 <_read+0x28>
  400302:	460c      	mov	r4, r1
  400304:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400306:	2a00      	cmp	r2, #0
  400308:	dd0f      	ble.n	40032a <_read+0x2e>
  40030a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40030c:	4e08      	ldr	r6, [pc, #32]	; (400330 <_read+0x34>)
  40030e:	4d09      	ldr	r5, [pc, #36]	; (400334 <_read+0x38>)
  400310:	6830      	ldr	r0, [r6, #0]
  400312:	4621      	mov	r1, r4
  400314:	682b      	ldr	r3, [r5, #0]
  400316:	4798      	blx	r3
		ptr++;
  400318:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40031a:	42bc      	cmp	r4, r7
  40031c:	d1f8      	bne.n	400310 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40031e:	4640      	mov	r0, r8
  400320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400324:	f04f 38ff 	mov.w	r8, #4294967295
  400328:	e7f9      	b.n	40031e <_read+0x22>
	for (; len > 0; --len) {
  40032a:	4680      	mov	r8, r0
  40032c:	e7f7      	b.n	40031e <_read+0x22>
  40032e:	bf00      	nop
  400330:	20008d28 	.word	0x20008d28
  400334:	20008d20 	.word	0x20008d20

00400338 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400338:	3801      	subs	r0, #1
  40033a:	2802      	cmp	r0, #2
  40033c:	d815      	bhi.n	40036a <_write+0x32>
{
  40033e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400342:	460e      	mov	r6, r1
  400344:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400346:	b19a      	cbz	r2, 400370 <_write+0x38>
  400348:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40034a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400384 <_write+0x4c>
  40034e:	4f0c      	ldr	r7, [pc, #48]	; (400380 <_write+0x48>)
  400350:	f8d8 0000 	ldr.w	r0, [r8]
  400354:	f815 1b01 	ldrb.w	r1, [r5], #1
  400358:	683b      	ldr	r3, [r7, #0]
  40035a:	4798      	blx	r3
  40035c:	2800      	cmp	r0, #0
  40035e:	db0a      	blt.n	400376 <_write+0x3e>
  400360:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400362:	3c01      	subs	r4, #1
  400364:	d1f4      	bne.n	400350 <_write+0x18>
  400366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40036a:	f04f 30ff 	mov.w	r0, #4294967295
  40036e:	4770      	bx	lr
	for (; len != 0; --len) {
  400370:	4610      	mov	r0, r2
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400376:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40037e:	bf00      	nop
  400380:	20008d24 	.word	0x20008d24
  400384:	20008d28 	.word	0x20008d28

00400388 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400388:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40038a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40038e:	4b21      	ldr	r3, [pc, #132]	; (400414 <board_init+0x8c>)
  400390:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	2009      	movs	r0, #9
  400394:	4c20      	ldr	r4, [pc, #128]	; (400418 <board_init+0x90>)
  400396:	47a0      	blx	r4
  400398:	200a      	movs	r0, #10
  40039a:	47a0      	blx	r4
  40039c:	200b      	movs	r0, #11
  40039e:	47a0      	blx	r4
  4003a0:	200c      	movs	r0, #12
  4003a2:	47a0      	blx	r4
  4003a4:	200d      	movs	r0, #13
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b1c      	ldr	r3, [pc, #112]	; (40041c <board_init+0x94>)
  4003aa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4003ba:	2204      	movs	r2, #4
  4003bc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003c8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003ca:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d2:	f021 0104 	bic.w	r1, r1, #4
  4003d6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003d8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003da:	f021 0104 	bic.w	r1, r1, #4
  4003de:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4003f0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003f8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400400:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400404:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400406:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400408:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40040c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40040e:	605a      	str	r2, [r3, #4]
  400410:	bd10      	pop	{r4, pc}
  400412:	bf00      	nop
  400414:	400e1850 	.word	0x400e1850
  400418:	004008f1 	.word	0x004008f1
  40041c:	400e1400 	.word	0x400e1400

00400420 <acc_init>:
		Acc *p_acc,
		uint32_t ul_select_plus,
		uint32_t ul_select_minus,
		uint32_t ul_edge_type,
		uint32_t ul_invert)
{
  400420:	b410      	push	{r4}
	/* Validate the parameters. */
	Assert(p_acc);
	
	/* Reset the controller. */
	p_acc->ACC_CR |= ACC_CR_SWRST;
  400422:	6804      	ldr	r4, [r0, #0]
  400424:	f044 0401 	orr.w	r4, r4, #1
  400428:	6004      	str	r4, [r0, #0]

	/* Write to the MR register. */
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  40042a:	9c01      	ldr	r4, [sp, #4]
  40042c:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
  400430:	f444 7480 	orr.w	r4, r4, #256	; 0x100
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
  400434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400438:	431c      	orrs	r4, r3
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
  40043a:	f002 0207 	and.w	r2, r2, #7
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  40043e:	4314      	orrs	r4, r2
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400440:	f001 0170 	and.w	r1, r1, #112	; 0x70
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400444:	430c      	orrs	r4, r1
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400446:	6044      	str	r4, [r0, #4]

	/* Set hysteresis and current option. */
	p_acc->ACC_ACR = (ACC_ACR_ISEL_HISP |
  400448:	2303      	movs	r3, #3
  40044a:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
			ACC_ACR_HYST(ACC_ACR_HYST_50mv_max));

	/* Automatic Output Masking Period. */
	while (p_acc->ACC_ISR & (uint32_t) ACC_ISR_MASK);
  40044e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400450:	2b00      	cmp	r3, #0
  400452:	dbfc      	blt.n	40044e <acc_init+0x2e>
}
  400454:	f85d 4b04 	ldr.w	r4, [sp], #4
  400458:	4770      	bx	lr

0040045a <acc_get_comparison_result>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	uint32_t ul_temp = p_acc->ACC_MR;
  40045a:	6843      	ldr	r3, [r0, #4]
	uint32_t ul_status = p_acc->ACC_ISR;
  40045c:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if ((ul_temp & ACC_MR_INV_EN) == ACC_MR_INV_EN) {
  40045e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		if (ul_status & ACC_ISR_SCO) {
  400462:	bf18      	it	ne
  400464:	f080 0002 	eorne.w	r0, r0, #2
			return 0;	/* inn>inp */
		} else {
			return 1;	/* inp>inn */
		}
	} else {
		if (ul_status & ACC_ISR_SCO) {
  400468:	f3c0 0040 	ubfx	r0, r0, #1, #1
			return 1;	/* inp>inn */
		} else {
			return 0;	/* inn>inp */
		}
	}
}
  40046c:	4770      	bx	lr

0040046e <acc_enable_interrupt>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	p_acc->ACC_IER = ACC_IER_CE;
  40046e:	2301      	movs	r3, #1
  400470:	6243      	str	r3, [r0, #36]	; 0x24
  400472:	4770      	bx	lr

00400474 <acc_get_interrupt_status>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	return p_acc->ACC_ISR;
  400474:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400476:	4770      	bx	lr

00400478 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400478:	b570      	push	{r4, r5, r6, lr}
  40047a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40047c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40047e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400480:	4013      	ands	r3, r2
  400482:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400484:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400486:	4d21      	ldr	r5, [pc, #132]	; (40050c <afec_process_callback+0x94>)
  400488:	42a8      	cmp	r0, r5
  40048a:	bf14      	ite	ne
  40048c:	2500      	movne	r5, #0
  40048e:	2501      	moveq	r5, #1
  400490:	006e      	lsls	r6, r5, #1
  400492:	442e      	add	r6, r5
  400494:	e00b      	b.n	4004ae <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400496:	2c14      	cmp	r4, #20
  400498:	d824      	bhi.n	4004e4 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40049a:	9a01      	ldr	r2, [sp, #4]
  40049c:	f104 0108 	add.w	r1, r4, #8
  4004a0:	2301      	movs	r3, #1
  4004a2:	408b      	lsls	r3, r1
  4004a4:	4213      	tst	r3, r2
  4004a6:	d113      	bne.n	4004d0 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4004a8:	3401      	adds	r4, #1
  4004aa:	2c17      	cmp	r4, #23
  4004ac:	d02b      	beq.n	400506 <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4004ae:	2c0f      	cmp	r4, #15
  4004b0:	d8f1      	bhi.n	400496 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4004b2:	9a01      	ldr	r2, [sp, #4]
  4004b4:	2301      	movs	r3, #1
  4004b6:	40a3      	lsls	r3, r4
  4004b8:	4213      	tst	r3, r2
  4004ba:	d0f5      	beq.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004bc:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004c0:	4423      	add	r3, r4
  4004c2:	4a13      	ldr	r2, [pc, #76]	; (400510 <afec_process_callback+0x98>)
  4004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004c8:	2b00      	cmp	r3, #0
  4004ca:	d0ed      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004cc:	4798      	blx	r3
  4004ce:	e7eb      	b.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004d0:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004d4:	4423      	add	r3, r4
  4004d6:	4a0e      	ldr	r2, [pc, #56]	; (400510 <afec_process_callback+0x98>)
  4004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004dc:	2b00      	cmp	r3, #0
  4004de:	d0e3      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004e0:	4798      	blx	r3
  4004e2:	e7e1      	b.n	4004a8 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4004e4:	9a01      	ldr	r2, [sp, #4]
  4004e6:	f104 0109 	add.w	r1, r4, #9
  4004ea:	2301      	movs	r3, #1
  4004ec:	408b      	lsls	r3, r1
  4004ee:	4213      	tst	r3, r2
  4004f0:	d0da      	beq.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004f2:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004f6:	4423      	add	r3, r4
  4004f8:	4a05      	ldr	r2, [pc, #20]	; (400510 <afec_process_callback+0x98>)
  4004fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004fe:	2b00      	cmp	r3, #0
  400500:	d0d2      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400502:	4798      	blx	r3
  400504:	e7d0      	b.n	4004a8 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400506:	b002      	add	sp, #8
  400508:	bd70      	pop	{r4, r5, r6, pc}
  40050a:	bf00      	nop
  40050c:	400b4000 	.word	0x400b4000
  400510:	20008d2c 	.word	0x20008d2c

00400514 <afec_ch_set_config>:
{
  400514:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400516:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400518:	2301      	movs	r3, #1
  40051a:	408b      	lsls	r3, r1
  40051c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400520:	7815      	ldrb	r5, [r2, #0]
  400522:	2d00      	cmp	r5, #0
  400524:	bf08      	it	eq
  400526:	2300      	moveq	r3, #0
  400528:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40052a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40052c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40052e:	004b      	lsls	r3, r1, #1
  400530:	2103      	movs	r1, #3
  400532:	4099      	lsls	r1, r3
  400534:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400538:	7851      	ldrb	r1, [r2, #1]
  40053a:	4099      	lsls	r1, r3
  40053c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40053e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400540:	bc30      	pop	{r4, r5}
  400542:	4770      	bx	lr

00400544 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400544:	2200      	movs	r2, #0
  400546:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400548:	4b08      	ldr	r3, [pc, #32]	; (40056c <afec_get_config_defaults+0x28>)
  40054a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40054c:	4b08      	ldr	r3, [pc, #32]	; (400570 <afec_get_config_defaults+0x2c>)
  40054e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400550:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400554:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400556:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400558:	2302      	movs	r3, #2
  40055a:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  40055c:	2301      	movs	r3, #1
  40055e:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400560:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400562:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400564:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400566:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400568:	7683      	strb	r3, [r0, #26]
  40056a:	4770      	bx	lr
  40056c:	05b8d800 	.word	0x05b8d800
  400570:	005b8d80 	.word	0x005b8d80

00400574 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400574:	2300      	movs	r3, #0
  400576:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400578:	2301      	movs	r3, #1
  40057a:	7043      	strb	r3, [r0, #1]
  40057c:	4770      	bx	lr
	...

00400580 <afec_init>:
	return afec->AFEC_ISR;
  400580:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400582:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400586:	d001      	beq.n	40058c <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400588:	2019      	movs	r0, #25
  40058a:	4770      	bx	lr
{
  40058c:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40058e:	2301      	movs	r3, #1
  400590:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400592:	7dcb      	ldrb	r3, [r1, #23]
  400594:	2b00      	cmp	r3, #0
  400596:	bf14      	ite	ne
  400598:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  40059c:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  40059e:	7d8b      	ldrb	r3, [r1, #22]
  4005a0:	2b00      	cmp	r3, #0
  4005a2:	bf14      	ite	ne
  4005a4:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  4005a8:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  4005aa:	7d0b      	ldrb	r3, [r1, #20]
  4005ac:	061b      	lsls	r3, r3, #24
  4005ae:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005b2:	690a      	ldr	r2, [r1, #16]
  4005b4:	68ce      	ldr	r6, [r1, #12]
  4005b6:	4332      	orrs	r2, r6
  4005b8:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4005ba:	7d4a      	ldrb	r2, [r1, #21]
  4005bc:	0712      	lsls	r2, r2, #28
  4005be:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005c2:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  4005c4:	688a      	ldr	r2, [r1, #8]
  4005c6:	0056      	lsls	r6, r2, #1
  4005c8:	684a      	ldr	r2, [r1, #4]
  4005ca:	fbb2 f2f6 	udiv	r2, r2, r6
  4005ce:	3a01      	subs	r2, #1
  4005d0:	0212      	lsls	r2, r2, #8
  4005d2:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005d4:	4313      	orrs	r3, r2
  4005d6:	432b      	orrs	r3, r5
  4005d8:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  4005da:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005dc:	7e0b      	ldrb	r3, [r1, #24]
  4005de:	2b00      	cmp	r3, #0
  4005e0:	bf14      	ite	ne
  4005e2:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4005e6:	2300      	moveq	r3, #0
  4005e8:	680a      	ldr	r2, [r1, #0]
  4005ea:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4005ec:	7e4a      	ldrb	r2, [r1, #25]
  4005ee:	2a00      	cmp	r2, #0
  4005f0:	bf14      	ite	ne
  4005f2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4005f6:	2200      	moveq	r2, #0
			(config->resolution) |
  4005f8:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005fa:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  4005fc:	7e8b      	ldrb	r3, [r1, #26]
  4005fe:	021b      	lsls	r3, r3, #8
  400600:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400604:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400608:	4b0e      	ldr	r3, [pc, #56]	; (400644 <afec_init+0xc4>)
  40060a:	4298      	cmp	r0, r3
  40060c:	d005      	beq.n	40061a <afec_init+0x9a>
	if(afec == AFEC1) {
  40060e:	4b0e      	ldr	r3, [pc, #56]	; (400648 <afec_init+0xc8>)
  400610:	4298      	cmp	r0, r3
  400612:	d00c      	beq.n	40062e <afec_init+0xae>
	return STATUS_OK;
  400614:	2000      	movs	r0, #0
}
  400616:	bc70      	pop	{r4, r5, r6}
  400618:	4770      	bx	lr
  40061a:	4b0c      	ldr	r3, [pc, #48]	; (40064c <afec_init+0xcc>)
  40061c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400620:	2200      	movs	r2, #0
  400622:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400626:	428b      	cmp	r3, r1
  400628:	d1fb      	bne.n	400622 <afec_init+0xa2>
	return STATUS_OK;
  40062a:	2000      	movs	r0, #0
  40062c:	e7f3      	b.n	400616 <afec_init+0x96>
  40062e:	4b08      	ldr	r3, [pc, #32]	; (400650 <afec_init+0xd0>)
  400630:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400634:	2200      	movs	r2, #0
  400636:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40063a:	428b      	cmp	r3, r1
  40063c:	d1fb      	bne.n	400636 <afec_init+0xb6>
	return STATUS_OK;
  40063e:	2000      	movs	r0, #0
  400640:	e7e9      	b.n	400616 <afec_init+0x96>
  400642:	bf00      	nop
  400644:	400b0000 	.word	0x400b0000
  400648:	400b4000 	.word	0x400b4000
  40064c:	20008d28 	.word	0x20008d28
  400650:	20008d84 	.word	0x20008d84

00400654 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400654:	4b0c      	ldr	r3, [pc, #48]	; (400688 <afec_enable_interrupt+0x34>)
  400656:	4299      	cmp	r1, r3
  400658:	d007      	beq.n	40066a <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40065a:	290f      	cmp	r1, #15
  40065c:	d80b      	bhi.n	400676 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  40065e:	d006      	beq.n	40066e <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400660:	2301      	movs	r3, #1
  400662:	fa03 f101 	lsl.w	r1, r3, r1
  400666:	6241      	str	r1, [r0, #36]	; 0x24
  400668:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40066a:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  40066c:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  40066e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400672:	6243      	str	r3, [r0, #36]	; 0x24
  400674:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400676:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400678:	bf94      	ite	ls
  40067a:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  40067c:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  40067e:	2301      	movs	r3, #1
  400680:	fa03 f101 	lsl.w	r1, r3, r1
  400684:	6241      	str	r1, [r0, #36]	; 0x24
  400686:	4770      	bx	lr
  400688:	df00ffff 	.word	0xdf00ffff

0040068c <afec_set_callback>:
{
  40068c:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  40068e:	4c11      	ldr	r4, [pc, #68]	; (4006d4 <afec_set_callback+0x48>)
  400690:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400692:	bf0c      	ite	eq
  400694:	2417      	moveq	r4, #23
  400696:	2400      	movne	r4, #0
  400698:	440c      	add	r4, r1
  40069a:	4d0f      	ldr	r5, [pc, #60]	; (4006d8 <afec_set_callback+0x4c>)
  40069c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4006a0:	d10a      	bne.n	4006b8 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006a2:	4a0e      	ldr	r2, [pc, #56]	; (4006dc <afec_set_callback+0x50>)
  4006a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  4006a8:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006ac:	011b      	lsls	r3, r3, #4
  4006ae:	b2db      	uxtb	r3, r3
  4006b0:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006b4:	6014      	str	r4, [r2, #0]
  4006b6:	e009      	b.n	4006cc <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006b8:	4a08      	ldr	r2, [pc, #32]	; (4006dc <afec_set_callback+0x50>)
  4006ba:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4006be:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006c2:	011b      	lsls	r3, r3, #4
  4006c4:	b2db      	uxtb	r3, r3
  4006c6:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006ca:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  4006cc:	4b04      	ldr	r3, [pc, #16]	; (4006e0 <afec_set_callback+0x54>)
  4006ce:	4798      	blx	r3
  4006d0:	bd38      	pop	{r3, r4, r5, pc}
  4006d2:	bf00      	nop
  4006d4:	400b4000 	.word	0x400b4000
  4006d8:	20008d2c 	.word	0x20008d2c
  4006dc:	e000e100 	.word	0xe000e100
  4006e0:	00400655 	.word	0x00400655

004006e4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4006e4:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4006e6:	4802      	ldr	r0, [pc, #8]	; (4006f0 <AFEC0_Handler+0xc>)
  4006e8:	4b02      	ldr	r3, [pc, #8]	; (4006f4 <AFEC0_Handler+0x10>)
  4006ea:	4798      	blx	r3
  4006ec:	bd08      	pop	{r3, pc}
  4006ee:	bf00      	nop
  4006f0:	400b0000 	.word	0x400b0000
  4006f4:	00400479 	.word	0x00400479

004006f8 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4006f8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4006fa:	4802      	ldr	r0, [pc, #8]	; (400704 <AFEC1_Handler+0xc>)
  4006fc:	4b02      	ldr	r3, [pc, #8]	; (400708 <AFEC1_Handler+0x10>)
  4006fe:	4798      	blx	r3
  400700:	bd08      	pop	{r3, pc}
  400702:	bf00      	nop
  400704:	400b4000 	.word	0x400b4000
  400708:	00400479 	.word	0x00400479

0040070c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40070c:	b500      	push	{lr}
  40070e:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400710:	4b13      	ldr	r3, [pc, #76]	; (400760 <afec_enable+0x54>)
  400712:	4298      	cmp	r0, r3
  400714:	bf0c      	ite	eq
  400716:	201f      	moveq	r0, #31
  400718:	201e      	movne	r0, #30
  40071a:	4b12      	ldr	r3, [pc, #72]	; (400764 <afec_enable+0x58>)
  40071c:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40071e:	4b12      	ldr	r3, [pc, #72]	; (400768 <afec_enable+0x5c>)
  400720:	789b      	ldrb	r3, [r3, #2]
  400722:	2bff      	cmp	r3, #255	; 0xff
  400724:	d01a      	beq.n	40075c <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400726:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40072a:	fab3 f383 	clz	r3, r3
  40072e:	095b      	lsrs	r3, r3, #5
  400730:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400732:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400734:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400738:	2200      	movs	r2, #0
  40073a:	4b0c      	ldr	r3, [pc, #48]	; (40076c <afec_enable+0x60>)
  40073c:	701a      	strb	r2, [r3, #0]
	return flags;
  40073e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400740:	4a09      	ldr	r2, [pc, #36]	; (400768 <afec_enable+0x5c>)
  400742:	7893      	ldrb	r3, [r2, #2]
  400744:	3301      	adds	r3, #1
  400746:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400748:	b129      	cbz	r1, 400756 <afec_enable+0x4a>
		cpu_irq_enable();
  40074a:	2201      	movs	r2, #1
  40074c:	4b07      	ldr	r3, [pc, #28]	; (40076c <afec_enable+0x60>)
  40074e:	701a      	strb	r2, [r3, #0]
  400750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400754:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400756:	b003      	add	sp, #12
  400758:	f85d fb04 	ldr.w	pc, [sp], #4
  40075c:	e7fe      	b.n	40075c <afec_enable+0x50>
  40075e:	bf00      	nop
  400760:	400b4000 	.word	0x400b4000
  400764:	004008f1 	.word	0x004008f1
  400768:	20008d18 	.word	0x20008d18
  40076c:	20000000 	.word	0x20000000

00400770 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  400770:	2301      	movs	r3, #1
  400772:	6003      	str	r3, [r0, #0]
  400774:	4770      	bx	lr

00400776 <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  400776:	6843      	ldr	r3, [r0, #4]
  400778:	f023 0301 	bic.w	r3, r3, #1
  40077c:	6043      	str	r3, [r0, #4]
  40077e:	4770      	bx	lr

00400780 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  400780:	b949      	cbnz	r1, 400796 <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400782:	6843      	ldr	r3, [r0, #4]
  400784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400788:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  40078a:	6843      	ldr	r3, [r0, #4]
  40078c:	f023 0310 	bic.w	r3, r3, #16
  400790:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  400792:	2000      	movs	r0, #0
  400794:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400796:	6843      	ldr	r3, [r0, #4]
  400798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40079c:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  40079e:	6843      	ldr	r3, [r0, #4]
  4007a0:	f043 0310 	orr.w	r3, r3, #16
  4007a4:	6043      	str	r3, [r0, #4]
  4007a6:	e7f4      	b.n	400792 <dacc_set_transfer_mode+0x12>

004007a8 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  4007a8:	6201      	str	r1, [r0, #32]
  4007aa:	4770      	bx	lr

004007ac <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4007ac:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4007ae:	2901      	cmp	r1, #1
  4007b0:	d901      	bls.n	4007b6 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  4007b2:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4007b4:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  4007b6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4007ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4007be:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  4007c0:	2000      	movs	r0, #0
  4007c2:	4770      	bx	lr

004007c4 <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  4007c4:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  4007c6:	b941      	cbnz	r1, 4007da <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  4007c8:	4907      	ldr	r1, [pc, #28]	; (4007e8 <dacc_set_timing+0x24>)
  4007ca:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  4007cc:	0612      	lsls	r2, r2, #24
  4007ce:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  4007d2:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  4007d4:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  4007d6:	2000      	movs	r0, #0
  4007d8:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  4007da:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  4007de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  4007e2:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  4007e6:	e7f1      	b.n	4007cc <dacc_set_timing+0x8>
  4007e8:	c0df00ff 	.word	0xc0df00ff

004007ec <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  4007ec:	2901      	cmp	r1, #1
  4007ee:	d901      	bls.n	4007f4 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  4007f0:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  4007f2:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  4007f4:	2301      	movs	r3, #1
  4007f6:	fa03 f101 	lsl.w	r1, r3, r1
  4007fa:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  4007fc:	2000      	movs	r0, #0
  4007fe:	4770      	bx	lr

00400800 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400800:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400804:	2000      	movs	r0, #0
  400806:	4770      	bx	lr

00400808 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400808:	4a17      	ldr	r2, [pc, #92]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  40080a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40080c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400810:	4318      	orrs	r0, r3
  400812:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400814:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400816:	f013 0f08 	tst.w	r3, #8
  40081a:	d10a      	bne.n	400832 <pmc_switch_mck_to_pllack+0x2a>
  40081c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400820:	4911      	ldr	r1, [pc, #68]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  400822:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400824:	f012 0f08 	tst.w	r2, #8
  400828:	d103      	bne.n	400832 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40082a:	3b01      	subs	r3, #1
  40082c:	d1f9      	bne.n	400822 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40082e:	2001      	movs	r0, #1
  400830:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400832:	4a0d      	ldr	r2, [pc, #52]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  400834:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400836:	f023 0303 	bic.w	r3, r3, #3
  40083a:	f043 0302 	orr.w	r3, r3, #2
  40083e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400840:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400842:	f013 0f08 	tst.w	r3, #8
  400846:	d10a      	bne.n	40085e <pmc_switch_mck_to_pllack+0x56>
  400848:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40084c:	4906      	ldr	r1, [pc, #24]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  40084e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400850:	f012 0f08 	tst.w	r2, #8
  400854:	d105      	bne.n	400862 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400856:	3b01      	subs	r3, #1
  400858:	d1f9      	bne.n	40084e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40085a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40085c:	4770      	bx	lr
	return 0;
  40085e:	2000      	movs	r0, #0
  400860:	4770      	bx	lr
  400862:	2000      	movs	r0, #0
  400864:	4770      	bx	lr
  400866:	bf00      	nop
  400868:	400e0400 	.word	0x400e0400

0040086c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40086c:	b9c8      	cbnz	r0, 4008a2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40086e:	4a11      	ldr	r2, [pc, #68]	; (4008b4 <pmc_switch_mainck_to_xtal+0x48>)
  400870:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400872:	0209      	lsls	r1, r1, #8
  400874:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400876:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40087a:	f023 0303 	bic.w	r3, r3, #3
  40087e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400882:	f043 0301 	orr.w	r3, r3, #1
  400886:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400888:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40088a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40088c:	f013 0f01 	tst.w	r3, #1
  400890:	d0fb      	beq.n	40088a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400892:	4a08      	ldr	r2, [pc, #32]	; (4008b4 <pmc_switch_mainck_to_xtal+0x48>)
  400894:	6a13      	ldr	r3, [r2, #32]
  400896:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40089a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40089e:	6213      	str	r3, [r2, #32]
  4008a0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008a2:	4904      	ldr	r1, [pc, #16]	; (4008b4 <pmc_switch_mainck_to_xtal+0x48>)
  4008a4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4008a6:	4a04      	ldr	r2, [pc, #16]	; (4008b8 <pmc_switch_mainck_to_xtal+0x4c>)
  4008a8:	401a      	ands	r2, r3
  4008aa:	4b04      	ldr	r3, [pc, #16]	; (4008bc <pmc_switch_mainck_to_xtal+0x50>)
  4008ac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008ae:	620b      	str	r3, [r1, #32]
  4008b0:	4770      	bx	lr
  4008b2:	bf00      	nop
  4008b4:	400e0400 	.word	0x400e0400
  4008b8:	fec8fffc 	.word	0xfec8fffc
  4008bc:	01370002 	.word	0x01370002

004008c0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4008c0:	4b02      	ldr	r3, [pc, #8]	; (4008cc <pmc_osc_is_ready_mainck+0xc>)
  4008c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008c4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4008c8:	4770      	bx	lr
  4008ca:	bf00      	nop
  4008cc:	400e0400 	.word	0x400e0400

004008d0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4008d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008d4:	4b01      	ldr	r3, [pc, #4]	; (4008dc <pmc_disable_pllack+0xc>)
  4008d6:	629a      	str	r2, [r3, #40]	; 0x28
  4008d8:	4770      	bx	lr
  4008da:	bf00      	nop
  4008dc:	400e0400 	.word	0x400e0400

004008e0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4008e0:	4b02      	ldr	r3, [pc, #8]	; (4008ec <pmc_is_locked_pllack+0xc>)
  4008e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008e4:	f000 0002 	and.w	r0, r0, #2
  4008e8:	4770      	bx	lr
  4008ea:	bf00      	nop
  4008ec:	400e0400 	.word	0x400e0400

004008f0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4008f0:	282f      	cmp	r0, #47	; 0x2f
  4008f2:	d81e      	bhi.n	400932 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4008f4:	281f      	cmp	r0, #31
  4008f6:	d80c      	bhi.n	400912 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008f8:	4b11      	ldr	r3, [pc, #68]	; (400940 <pmc_enable_periph_clk+0x50>)
  4008fa:	699a      	ldr	r2, [r3, #24]
  4008fc:	2301      	movs	r3, #1
  4008fe:	4083      	lsls	r3, r0
  400900:	4393      	bics	r3, r2
  400902:	d018      	beq.n	400936 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400904:	2301      	movs	r3, #1
  400906:	fa03 f000 	lsl.w	r0, r3, r0
  40090a:	4b0d      	ldr	r3, [pc, #52]	; (400940 <pmc_enable_periph_clk+0x50>)
  40090c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40090e:	2000      	movs	r0, #0
  400910:	4770      	bx	lr
		ul_id -= 32;
  400912:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400914:	4b0a      	ldr	r3, [pc, #40]	; (400940 <pmc_enable_periph_clk+0x50>)
  400916:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40091a:	2301      	movs	r3, #1
  40091c:	4083      	lsls	r3, r0
  40091e:	4393      	bics	r3, r2
  400920:	d00b      	beq.n	40093a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400922:	2301      	movs	r3, #1
  400924:	fa03 f000 	lsl.w	r0, r3, r0
  400928:	4b05      	ldr	r3, [pc, #20]	; (400940 <pmc_enable_periph_clk+0x50>)
  40092a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40092e:	2000      	movs	r0, #0
  400930:	4770      	bx	lr
		return 1;
  400932:	2001      	movs	r0, #1
  400934:	4770      	bx	lr
	return 0;
  400936:	2000      	movs	r0, #0
  400938:	4770      	bx	lr
  40093a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40093c:	4770      	bx	lr
  40093e:	bf00      	nop
  400940:	400e0400 	.word	0x400e0400

00400944 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400944:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400946:	0189      	lsls	r1, r1, #6
  400948:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40094a:	2402      	movs	r4, #2
  40094c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40094e:	f04f 31ff 	mov.w	r1, #4294967295
  400952:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400954:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400956:	605a      	str	r2, [r3, #4]
}
  400958:	f85d 4b04 	ldr.w	r4, [sp], #4
  40095c:	4770      	bx	lr

0040095e <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40095e:	0189      	lsls	r1, r1, #6
  400960:	2305      	movs	r3, #5
  400962:	5043      	str	r3, [r0, r1]
  400964:	4770      	bx	lr

00400966 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400966:	0189      	lsls	r1, r1, #6
  400968:	2302      	movs	r3, #2
  40096a:	5043      	str	r3, [r0, r1]
  40096c:	4770      	bx	lr

0040096e <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40096e:	b4f0      	push	{r4, r5, r6, r7}
  400970:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400972:	2402      	movs	r4, #2
  400974:	9401      	str	r4, [sp, #4]
  400976:	2408      	movs	r4, #8
  400978:	9402      	str	r4, [sp, #8]
  40097a:	2420      	movs	r4, #32
  40097c:	9403      	str	r4, [sp, #12]
  40097e:	2480      	movs	r4, #128	; 0x80
  400980:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400982:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400984:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400986:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400988:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40098c:	d814      	bhi.n	4009b8 <tc_find_mck_divisor+0x4a>
  40098e:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400990:	42a0      	cmp	r0, r4
  400992:	d217      	bcs.n	4009c4 <tc_find_mck_divisor+0x56>
  400994:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400996:	af01      	add	r7, sp, #4
  400998:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40099c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4009a0:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4009a2:	4284      	cmp	r4, r0
  4009a4:	d30a      	bcc.n	4009bc <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4009a6:	4286      	cmp	r6, r0
  4009a8:	d90d      	bls.n	4009c6 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4009aa:	3501      	adds	r5, #1
	for (ul_index = 0;
  4009ac:	2d05      	cmp	r5, #5
  4009ae:	d1f3      	bne.n	400998 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4009b0:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4009b2:	b006      	add	sp, #24
  4009b4:	bcf0      	pop	{r4, r5, r6, r7}
  4009b6:	4770      	bx	lr
			return 0;
  4009b8:	2000      	movs	r0, #0
  4009ba:	e7fa      	b.n	4009b2 <tc_find_mck_divisor+0x44>
  4009bc:	2000      	movs	r0, #0
  4009be:	e7f8      	b.n	4009b2 <tc_find_mck_divisor+0x44>
	return 1;
  4009c0:	2001      	movs	r0, #1
  4009c2:	e7f6      	b.n	4009b2 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4009c4:	2500      	movs	r5, #0
	if (p_uldiv) {
  4009c6:	b12a      	cbz	r2, 4009d4 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4009c8:	a906      	add	r1, sp, #24
  4009ca:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4009ce:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4009d2:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4009d4:	2b00      	cmp	r3, #0
  4009d6:	d0f3      	beq.n	4009c0 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4009d8:	601d      	str	r5, [r3, #0]
	return 1;
  4009da:	2001      	movs	r0, #1
  4009dc:	e7e9      	b.n	4009b2 <tc_find_mck_divisor+0x44>

004009de <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4009de:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4009e0:	23ac      	movs	r3, #172	; 0xac
  4009e2:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4009e4:	680b      	ldr	r3, [r1, #0]
  4009e6:	684a      	ldr	r2, [r1, #4]
  4009e8:	fbb3 f3f2 	udiv	r3, r3, r2
  4009ec:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4009ee:	1e5c      	subs	r4, r3, #1
  4009f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4009f4:	4294      	cmp	r4, r2
  4009f6:	d80c      	bhi.n	400a12 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  4009f8:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4009fa:	688b      	ldr	r3, [r1, #8]
  4009fc:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4009fe:	f240 2302 	movw	r3, #514	; 0x202
  400a02:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400a06:	2350      	movs	r3, #80	; 0x50
  400a08:	6003      	str	r3, [r0, #0]

	return 0;
  400a0a:	2000      	movs	r0, #0
}
  400a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a10:	4770      	bx	lr
		return 1;
  400a12:	2001      	movs	r0, #1
  400a14:	e7fa      	b.n	400a0c <uart_init+0x2e>

00400a16 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400a16:	6943      	ldr	r3, [r0, #20]
  400a18:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400a1c:	bf1a      	itte	ne
  400a1e:	61c1      	strne	r1, [r0, #28]
	return 0;
  400a20:	2000      	movne	r0, #0
		return 1;
  400a22:	2001      	moveq	r0, #1
}
  400a24:	4770      	bx	lr

00400a26 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400a26:	6943      	ldr	r3, [r0, #20]
  400a28:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400a2c:	bf1d      	ittte	ne
  400a2e:	6983      	ldrne	r3, [r0, #24]
  400a30:	700b      	strbne	r3, [r1, #0]
	return 0;
  400a32:	2000      	movne	r0, #0
		return 1;
  400a34:	2001      	moveq	r0, #1
}
  400a36:	4770      	bx	lr

00400a38 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a38:	6943      	ldr	r3, [r0, #20]
  400a3a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400a3e:	bf1d      	ittte	ne
  400a40:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400a44:	61c1      	strne	r1, [r0, #28]
	return 0;
  400a46:	2000      	movne	r0, #0
		return 1;
  400a48:	2001      	moveq	r0, #1
}
  400a4a:	4770      	bx	lr

00400a4c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a4c:	6943      	ldr	r3, [r0, #20]
  400a4e:	f013 0f01 	tst.w	r3, #1
  400a52:	d005      	beq.n	400a60 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a54:	6983      	ldr	r3, [r0, #24]
  400a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a5a:	600b      	str	r3, [r1, #0]

	return 0;
  400a5c:	2000      	movs	r0, #0
  400a5e:	4770      	bx	lr
		return 1;
  400a60:	2001      	movs	r0, #1
}
  400a62:	4770      	bx	lr

00400a64 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400a64:	e7fe      	b.n	400a64 <Dummy_Handler>
	...

00400a68 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400a68:	b500      	push	{lr}
  400a6a:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400a6c:	4b25      	ldr	r3, [pc, #148]	; (400b04 <Reset_Handler+0x9c>)
  400a6e:	4a26      	ldr	r2, [pc, #152]	; (400b08 <Reset_Handler+0xa0>)
  400a70:	429a      	cmp	r2, r3
  400a72:	d010      	beq.n	400a96 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400a74:	4b25      	ldr	r3, [pc, #148]	; (400b0c <Reset_Handler+0xa4>)
  400a76:	4a23      	ldr	r2, [pc, #140]	; (400b04 <Reset_Handler+0x9c>)
  400a78:	429a      	cmp	r2, r3
  400a7a:	d20c      	bcs.n	400a96 <Reset_Handler+0x2e>
  400a7c:	3b01      	subs	r3, #1
  400a7e:	1a9b      	subs	r3, r3, r2
  400a80:	f023 0303 	bic.w	r3, r3, #3
  400a84:	3304      	adds	r3, #4
  400a86:	4413      	add	r3, r2
  400a88:	491f      	ldr	r1, [pc, #124]	; (400b08 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400a8a:	f851 0b04 	ldr.w	r0, [r1], #4
  400a8e:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400a92:	429a      	cmp	r2, r3
  400a94:	d1f9      	bne.n	400a8a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400a96:	4b1e      	ldr	r3, [pc, #120]	; (400b10 <Reset_Handler+0xa8>)
  400a98:	4a1e      	ldr	r2, [pc, #120]	; (400b14 <Reset_Handler+0xac>)
  400a9a:	429a      	cmp	r2, r3
  400a9c:	d20a      	bcs.n	400ab4 <Reset_Handler+0x4c>
  400a9e:	3b01      	subs	r3, #1
  400aa0:	1a9b      	subs	r3, r3, r2
  400aa2:	f023 0303 	bic.w	r3, r3, #3
  400aa6:	3304      	adds	r3, #4
  400aa8:	4413      	add	r3, r2
		*pDest++ = 0;
  400aaa:	2100      	movs	r1, #0
  400aac:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400ab0:	4293      	cmp	r3, r2
  400ab2:	d1fb      	bne.n	400aac <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400ab4:	4a18      	ldr	r2, [pc, #96]	; (400b18 <Reset_Handler+0xb0>)
  400ab6:	4b19      	ldr	r3, [pc, #100]	; (400b1c <Reset_Handler+0xb4>)
  400ab8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400abc:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400abe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400ac2:	fab3 f383 	clz	r3, r3
  400ac6:	095b      	lsrs	r3, r3, #5
  400ac8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400aca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400acc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400ad0:	2200      	movs	r2, #0
  400ad2:	4b13      	ldr	r3, [pc, #76]	; (400b20 <Reset_Handler+0xb8>)
  400ad4:	701a      	strb	r2, [r3, #0]
	return flags;
  400ad6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400ad8:	4a12      	ldr	r2, [pc, #72]	; (400b24 <Reset_Handler+0xbc>)
  400ada:	6813      	ldr	r3, [r2, #0]
  400adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ae0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ae6:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400aea:	b129      	cbz	r1, 400af8 <Reset_Handler+0x90>
		cpu_irq_enable();
  400aec:	2201      	movs	r2, #1
  400aee:	4b0c      	ldr	r3, [pc, #48]	; (400b20 <Reset_Handler+0xb8>)
  400af0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400af2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400af6:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400af8:	4b0b      	ldr	r3, [pc, #44]	; (400b28 <Reset_Handler+0xc0>)
  400afa:	4798      	blx	r3

	/* Branch to main function */
	main();
  400afc:	4b0b      	ldr	r3, [pc, #44]	; (400b2c <Reset_Handler+0xc4>)
  400afe:	4798      	blx	r3
  400b00:	e7fe      	b.n	400b00 <Reset_Handler+0x98>
  400b02:	bf00      	nop
  400b04:	20000000 	.word	0x20000000
  400b08:	004066dc 	.word	0x004066dc
  400b0c:	200009b8 	.word	0x200009b8
  400b10:	20008e10 	.word	0x20008e10
  400b14:	200009b8 	.word	0x200009b8
  400b18:	e000ed00 	.word	0xe000ed00
  400b1c:	00400000 	.word	0x00400000
  400b20:	20000000 	.word	0x20000000
  400b24:	e000ed88 	.word	0xe000ed88
  400b28:	0040387d 	.word	0x0040387d
  400b2c:	004016f1 	.word	0x004016f1

00400b30 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400b30:	4b3b      	ldr	r3, [pc, #236]	; (400c20 <SystemCoreClockUpdate+0xf0>)
  400b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b34:	f003 0303 	and.w	r3, r3, #3
  400b38:	2b01      	cmp	r3, #1
  400b3a:	d01d      	beq.n	400b78 <SystemCoreClockUpdate+0x48>
  400b3c:	b183      	cbz	r3, 400b60 <SystemCoreClockUpdate+0x30>
  400b3e:	2b02      	cmp	r3, #2
  400b40:	d036      	beq.n	400bb0 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400b42:	4b37      	ldr	r3, [pc, #220]	; (400c20 <SystemCoreClockUpdate+0xf0>)
  400b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b4a:	2b70      	cmp	r3, #112	; 0x70
  400b4c:	d05f      	beq.n	400c0e <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400b4e:	4b34      	ldr	r3, [pc, #208]	; (400c20 <SystemCoreClockUpdate+0xf0>)
  400b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400b52:	4934      	ldr	r1, [pc, #208]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400b54:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400b58:	680b      	ldr	r3, [r1, #0]
  400b5a:	40d3      	lsrs	r3, r2
  400b5c:	600b      	str	r3, [r1, #0]
  400b5e:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400b60:	4b31      	ldr	r3, [pc, #196]	; (400c28 <SystemCoreClockUpdate+0xf8>)
  400b62:	695b      	ldr	r3, [r3, #20]
  400b64:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b68:	bf14      	ite	ne
  400b6a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b6e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400b72:	4b2c      	ldr	r3, [pc, #176]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400b74:	601a      	str	r2, [r3, #0]
  400b76:	e7e4      	b.n	400b42 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400b78:	4b29      	ldr	r3, [pc, #164]	; (400c20 <SystemCoreClockUpdate+0xf0>)
  400b7a:	6a1b      	ldr	r3, [r3, #32]
  400b7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b80:	d003      	beq.n	400b8a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400b82:	4a2a      	ldr	r2, [pc, #168]	; (400c2c <SystemCoreClockUpdate+0xfc>)
  400b84:	4b27      	ldr	r3, [pc, #156]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400b86:	601a      	str	r2, [r3, #0]
  400b88:	e7db      	b.n	400b42 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b8a:	4a29      	ldr	r2, [pc, #164]	; (400c30 <SystemCoreClockUpdate+0x100>)
  400b8c:	4b25      	ldr	r3, [pc, #148]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400b8e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b90:	4b23      	ldr	r3, [pc, #140]	; (400c20 <SystemCoreClockUpdate+0xf0>)
  400b92:	6a1b      	ldr	r3, [r3, #32]
  400b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b98:	2b10      	cmp	r3, #16
  400b9a:	d005      	beq.n	400ba8 <SystemCoreClockUpdate+0x78>
  400b9c:	2b20      	cmp	r3, #32
  400b9e:	d1d0      	bne.n	400b42 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400ba0:	4a22      	ldr	r2, [pc, #136]	; (400c2c <SystemCoreClockUpdate+0xfc>)
  400ba2:	4b20      	ldr	r3, [pc, #128]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400ba4:	601a      	str	r2, [r3, #0]
				break;
  400ba6:	e7cc      	b.n	400b42 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400ba8:	4a22      	ldr	r2, [pc, #136]	; (400c34 <SystemCoreClockUpdate+0x104>)
  400baa:	4b1e      	ldr	r3, [pc, #120]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400bac:	601a      	str	r2, [r3, #0]
				break;
  400bae:	e7c8      	b.n	400b42 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400bb0:	4b1b      	ldr	r3, [pc, #108]	; (400c20 <SystemCoreClockUpdate+0xf0>)
  400bb2:	6a1b      	ldr	r3, [r3, #32]
  400bb4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bb8:	d016      	beq.n	400be8 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400bba:	4a1c      	ldr	r2, [pc, #112]	; (400c2c <SystemCoreClockUpdate+0xfc>)
  400bbc:	4b19      	ldr	r3, [pc, #100]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400bbe:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400bc0:	4b17      	ldr	r3, [pc, #92]	; (400c20 <SystemCoreClockUpdate+0xf0>)
  400bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bc4:	f003 0303 	and.w	r3, r3, #3
  400bc8:	2b02      	cmp	r3, #2
  400bca:	d1ba      	bne.n	400b42 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bcc:	4a14      	ldr	r2, [pc, #80]	; (400c20 <SystemCoreClockUpdate+0xf0>)
  400bce:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bd0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400bd2:	4814      	ldr	r0, [pc, #80]	; (400c24 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bd4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400bd8:	6803      	ldr	r3, [r0, #0]
  400bda:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bde:	b2d2      	uxtb	r2, r2
  400be0:	fbb3 f3f2 	udiv	r3, r3, r2
  400be4:	6003      	str	r3, [r0, #0]
  400be6:	e7ac      	b.n	400b42 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400be8:	4a11      	ldr	r2, [pc, #68]	; (400c30 <SystemCoreClockUpdate+0x100>)
  400bea:	4b0e      	ldr	r3, [pc, #56]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400bec:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400bee:	4b0c      	ldr	r3, [pc, #48]	; (400c20 <SystemCoreClockUpdate+0xf0>)
  400bf0:	6a1b      	ldr	r3, [r3, #32]
  400bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bf6:	2b10      	cmp	r3, #16
  400bf8:	d005      	beq.n	400c06 <SystemCoreClockUpdate+0xd6>
  400bfa:	2b20      	cmp	r3, #32
  400bfc:	d1e0      	bne.n	400bc0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400bfe:	4a0b      	ldr	r2, [pc, #44]	; (400c2c <SystemCoreClockUpdate+0xfc>)
  400c00:	4b08      	ldr	r3, [pc, #32]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400c02:	601a      	str	r2, [r3, #0]
				break;
  400c04:	e7dc      	b.n	400bc0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400c06:	4a0b      	ldr	r2, [pc, #44]	; (400c34 <SystemCoreClockUpdate+0x104>)
  400c08:	4b06      	ldr	r3, [pc, #24]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400c0a:	601a      	str	r2, [r3, #0]
				break;
  400c0c:	e7d8      	b.n	400bc0 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400c0e:	4a05      	ldr	r2, [pc, #20]	; (400c24 <SystemCoreClockUpdate+0xf4>)
  400c10:	6813      	ldr	r3, [r2, #0]
  400c12:	4909      	ldr	r1, [pc, #36]	; (400c38 <SystemCoreClockUpdate+0x108>)
  400c14:	fba1 1303 	umull	r1, r3, r1, r3
  400c18:	085b      	lsrs	r3, r3, #1
  400c1a:	6013      	str	r3, [r2, #0]
  400c1c:	4770      	bx	lr
  400c1e:	bf00      	nop
  400c20:	400e0400 	.word	0x400e0400
  400c24:	20000004 	.word	0x20000004
  400c28:	400e1810 	.word	0x400e1810
  400c2c:	00b71b00 	.word	0x00b71b00
  400c30:	003d0900 	.word	0x003d0900
  400c34:	007a1200 	.word	0x007a1200
  400c38:	aaaaaaab 	.word	0xaaaaaaab

00400c3c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400c3c:	4b12      	ldr	r3, [pc, #72]	; (400c88 <system_init_flash+0x4c>)
  400c3e:	4298      	cmp	r0, r3
  400c40:	d911      	bls.n	400c66 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400c42:	4b12      	ldr	r3, [pc, #72]	; (400c8c <system_init_flash+0x50>)
  400c44:	4298      	cmp	r0, r3
  400c46:	d913      	bls.n	400c70 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400c48:	4b11      	ldr	r3, [pc, #68]	; (400c90 <system_init_flash+0x54>)
  400c4a:	4298      	cmp	r0, r3
  400c4c:	d914      	bls.n	400c78 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400c4e:	4b11      	ldr	r3, [pc, #68]	; (400c94 <system_init_flash+0x58>)
  400c50:	4298      	cmp	r0, r3
  400c52:	d915      	bls.n	400c80 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400c54:	4b10      	ldr	r3, [pc, #64]	; (400c98 <system_init_flash+0x5c>)
  400c56:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400c58:	bf94      	ite	ls
  400c5a:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c5e:	4a0f      	ldrhi	r2, [pc, #60]	; (400c9c <system_init_flash+0x60>)
  400c60:	4b0f      	ldr	r3, [pc, #60]	; (400ca0 <system_init_flash+0x64>)
  400c62:	601a      	str	r2, [r3, #0]
  400c64:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c6a:	4b0d      	ldr	r3, [pc, #52]	; (400ca0 <system_init_flash+0x64>)
  400c6c:	601a      	str	r2, [r3, #0]
  400c6e:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c70:	4a0c      	ldr	r2, [pc, #48]	; (400ca4 <system_init_flash+0x68>)
  400c72:	4b0b      	ldr	r3, [pc, #44]	; (400ca0 <system_init_flash+0x64>)
  400c74:	601a      	str	r2, [r3, #0]
  400c76:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c78:	4a0b      	ldr	r2, [pc, #44]	; (400ca8 <system_init_flash+0x6c>)
  400c7a:	4b09      	ldr	r3, [pc, #36]	; (400ca0 <system_init_flash+0x64>)
  400c7c:	601a      	str	r2, [r3, #0]
  400c7e:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400c80:	4a0a      	ldr	r2, [pc, #40]	; (400cac <system_init_flash+0x70>)
  400c82:	4b07      	ldr	r3, [pc, #28]	; (400ca0 <system_init_flash+0x64>)
  400c84:	601a      	str	r2, [r3, #0]
  400c86:	4770      	bx	lr
  400c88:	01312cff 	.word	0x01312cff
  400c8c:	026259ff 	.word	0x026259ff
  400c90:	039386ff 	.word	0x039386ff
  400c94:	04c4b3ff 	.word	0x04c4b3ff
  400c98:	05f5e0ff 	.word	0x05f5e0ff
  400c9c:	04000500 	.word	0x04000500
  400ca0:	400e0a00 	.word	0x400e0a00
  400ca4:	04000100 	.word	0x04000100
  400ca8:	04000200 	.word	0x04000200
  400cac:	04000300 	.word	0x04000300

00400cb0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400cb0:	4b0a      	ldr	r3, [pc, #40]	; (400cdc <_sbrk+0x2c>)
  400cb2:	681b      	ldr	r3, [r3, #0]
  400cb4:	b153      	cbz	r3, 400ccc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400cb6:	4b09      	ldr	r3, [pc, #36]	; (400cdc <_sbrk+0x2c>)
  400cb8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400cba:	181a      	adds	r2, r3, r0
  400cbc:	4908      	ldr	r1, [pc, #32]	; (400ce0 <_sbrk+0x30>)
  400cbe:	4291      	cmp	r1, r2
  400cc0:	db08      	blt.n	400cd4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400cc2:	4610      	mov	r0, r2
  400cc4:	4a05      	ldr	r2, [pc, #20]	; (400cdc <_sbrk+0x2c>)
  400cc6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400cc8:	4618      	mov	r0, r3
  400cca:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400ccc:	4a05      	ldr	r2, [pc, #20]	; (400ce4 <_sbrk+0x34>)
  400cce:	4b03      	ldr	r3, [pc, #12]	; (400cdc <_sbrk+0x2c>)
  400cd0:	601a      	str	r2, [r3, #0]
  400cd2:	e7f0      	b.n	400cb6 <_sbrk+0x6>
		return (caddr_t) -1;	
  400cd4:	f04f 30ff 	mov.w	r0, #4294967295
}
  400cd8:	4770      	bx	lr
  400cda:	bf00      	nop
  400cdc:	200009d4 	.word	0x200009d4
  400ce0:	2001fffc 	.word	0x2001fffc
  400ce4:	2000be10 	.word	0x2000be10

00400ce8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400ce8:	f04f 30ff 	mov.w	r0, #4294967295
  400cec:	4770      	bx	lr

00400cee <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400cf2:	604b      	str	r3, [r1, #4]

	return 0;
}
  400cf4:	2000      	movs	r0, #0
  400cf6:	4770      	bx	lr

00400cf8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400cf8:	2001      	movs	r0, #1
  400cfa:	4770      	bx	lr

00400cfc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400cfc:	2000      	movs	r0, #0
  400cfe:	4770      	bx	lr

00400d00 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  400d00:	b500      	push	{lr}
  400d02:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  400d04:	2201      	movs	r2, #1
  400d06:	f10d 0107 	add.w	r1, sp, #7
  400d0a:	4810      	ldr	r0, [pc, #64]	; (400d4c <USART0_Handler+0x4c>)
  400d0c:	4b10      	ldr	r3, [pc, #64]	; (400d50 <USART0_Handler+0x50>)
  400d0e:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400d10:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d12:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  400d16:	2200      	movs	r2, #0
  400d18:	4b0e      	ldr	r3, [pc, #56]	; (400d54 <USART0_Handler+0x54>)
  400d1a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  400d1c:	4b0e      	ldr	r3, [pc, #56]	; (400d58 <USART0_Handler+0x58>)
  400d1e:	781b      	ldrb	r3, [r3, #0]
  400d20:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400d24:	4a0d      	ldr	r2, [pc, #52]	; (400d5c <USART0_Handler+0x5c>)
  400d26:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  400d28:	2b9b      	cmp	r3, #155	; 0x9b
  400d2a:	d00b      	beq.n	400d44 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  400d2c:	3301      	adds	r3, #1
  400d2e:	4a0a      	ldr	r2, [pc, #40]	; (400d58 <USART0_Handler+0x58>)
  400d30:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  400d32:	2201      	movs	r2, #1
  400d34:	4b07      	ldr	r3, [pc, #28]	; (400d54 <USART0_Handler+0x54>)
  400d36:	701a      	strb	r2, [r3, #0]
  400d38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d3c:	b662      	cpsie	i
}
  400d3e:	b003      	add	sp, #12
  400d40:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  400d44:	2200      	movs	r2, #0
  400d46:	4b04      	ldr	r3, [pc, #16]	; (400d58 <USART0_Handler+0x58>)
  400d48:	701a      	strb	r2, [r3, #0]
  400d4a:	e7f2      	b.n	400d32 <USART0_Handler+0x32>
  400d4c:	400a0000 	.word	0x400a0000
  400d50:	0040025d 	.word	0x0040025d
  400d54:	20000000 	.word	0x20000000
  400d58:	20000a74 	.word	0x20000a74
  400d5c:	200009d8 	.word	0x200009d8

00400d60 <addSample>:
		}
	}	
}

void addSample(uint16_t sample){
	if (bufferIndex<buffersize)
  400d60:	4b09      	ldr	r3, [pc, #36]	; (400d88 <addSample+0x28>)
  400d62:	881b      	ldrh	r3, [r3, #0]
  400d64:	f242 028d 	movw	r2, #8333	; 0x208d
  400d68:	4293      	cmp	r3, r2
  400d6a:	d808      	bhi.n	400d7e <addSample+0x1e>
	{
		if (currentbuffer)
  400d6c:	4a07      	ldr	r2, [pc, #28]	; (400d8c <addSample+0x2c>)
  400d6e:	7812      	ldrb	r2, [r2, #0]
  400d70:	b132      	cbz	r2, 400d80 <addSample+0x20>
		{
			//puts("filling buffer 1\n");
			buffer1[bufferIndex]= sample;
  400d72:	4a07      	ldr	r2, [pc, #28]	; (400d90 <addSample+0x30>)
  400d74:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
		}else{
			//puts("filling buffer 0\n");
			buffer0[bufferIndex]= sample;
		}
		bufferIndex++;
  400d78:	3301      	adds	r3, #1
  400d7a:	4a03      	ldr	r2, [pc, #12]	; (400d88 <addSample+0x28>)
  400d7c:	8013      	strh	r3, [r2, #0]
  400d7e:	4770      	bx	lr
			buffer0[bufferIndex]= sample;
  400d80:	4a04      	ldr	r2, [pc, #16]	; (400d94 <addSample+0x34>)
  400d82:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  400d86:	e7f7      	b.n	400d78 <addSample+0x18>
  400d88:	20008cb0 	.word	0x20008cb0
  400d8c:	20008cb4 	.word	0x20008cb4
  400d90:	20004b94 	.word	0x20004b94
  400d94:	20000a78 	.word	0x20000a78

00400d98 <switchBuffer>:
	}
}

volatile void switchBuffer(void){
	buffersFilled++;
  400d98:	4a06      	ldr	r2, [pc, #24]	; (400db4 <switchBuffer+0x1c>)
  400d9a:	8813      	ldrh	r3, [r2, #0]
  400d9c:	3301      	adds	r3, #1
  400d9e:	8013      	strh	r3, [r2, #0]
	bufferIndex=0;
  400da0:	2200      	movs	r2, #0
  400da2:	4b05      	ldr	r3, [pc, #20]	; (400db8 <switchBuffer+0x20>)
  400da4:	801a      	strh	r2, [r3, #0]
	//puts("buffer index reset\n");
	currentbuffer= !currentbuffer;
  400da6:	4a05      	ldr	r2, [pc, #20]	; (400dbc <switchBuffer+0x24>)
  400da8:	7813      	ldrb	r3, [r2, #0]
  400daa:	f083 0301 	eor.w	r3, r3, #1
  400dae:	7013      	strb	r3, [r2, #0]
  400db0:	4770      	bx	lr
  400db2:	bf00      	nop
  400db4:	20008cb2 	.word	0x20008cb2
  400db8:	20008cb0 	.word	0x20008cb0
  400dbc:	20008cb4 	.word	0x20008cb4

00400dc0 <cycleEnded>:
}

void cycleEnded(void){
  400dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("%u\n\r", bufferIndex);
	if (bufferIndex<buffersize)
  400dc2:	4b0a      	ldr	r3, [pc, #40]	; (400dec <cycleEnded+0x2c>)
  400dc4:	881b      	ldrh	r3, [r3, #0]
  400dc6:	f242 028d 	movw	r2, #8333	; 0x208d
  400dca:	4293      	cmp	r3, r2
  400dcc:	d80a      	bhi.n	400de4 <cycleEnded+0x24>
	{
		for (int i=bufferIndex;i<buffersize;i++)
  400dce:	461c      	mov	r4, r3
  400dd0:	dc08      	bgt.n	400de4 <cycleEnded+0x24>
		{
			addSample(0);
  400dd2:	2700      	movs	r7, #0
  400dd4:	4e06      	ldr	r6, [pc, #24]	; (400df0 <cycleEnded+0x30>)
		for (int i=bufferIndex;i<buffersize;i++)
  400dd6:	f242 058e 	movw	r5, #8334	; 0x208e
			addSample(0);
  400dda:	4638      	mov	r0, r7
  400ddc:	47b0      	blx	r6
		for (int i=bufferIndex;i<buffersize;i++)
  400dde:	3401      	adds	r4, #1
  400de0:	42ac      	cmp	r4, r5
  400de2:	d1fa      	bne.n	400dda <cycleEnded+0x1a>
		}
	} 
	
	switchBuffer();
  400de4:	4b03      	ldr	r3, [pc, #12]	; (400df4 <cycleEnded+0x34>)
  400de6:	4798      	blx	r3
  400de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400dea:	bf00      	nop
  400dec:	20008cb0 	.word	0x20008cb0
  400df0:	00400d61 	.word	0x00400d61
  400df4:	00400d99 	.word	0x00400d99

00400df8 <getbuffersFilled>:
	
}

uint16_t getbuffersFilled(){
	return buffersFilled;
}
  400df8:	4b01      	ldr	r3, [pc, #4]	; (400e00 <getbuffersFilled+0x8>)
  400dfa:	8818      	ldrh	r0, [r3, #0]
  400dfc:	4770      	bx	lr
  400dfe:	bf00      	nop
  400e00:	20008cb2 	.word	0x20008cb2

00400e04 <getFilledBuffer>:
		printf("%u\n\r", buffer1[i]);
	}
}

uint16_t* getFilledBuffer(void){
	if (currentbuffer)
  400e04:	4b04      	ldr	r3, [pc, #16]	; (400e18 <getFilledBuffer+0x14>)
  400e06:	7818      	ldrb	r0, [r3, #0]
	} 
	else
	{
		return buffer1;
	}
  400e08:	4b04      	ldr	r3, [pc, #16]	; (400e1c <getFilledBuffer+0x18>)
  400e0a:	4a05      	ldr	r2, [pc, #20]	; (400e20 <getFilledBuffer+0x1c>)
  400e0c:	2800      	cmp	r0, #0
  400e0e:	bf14      	ite	ne
  400e10:	4610      	movne	r0, r2
  400e12:	4618      	moveq	r0, r3
  400e14:	4770      	bx	lr
  400e16:	bf00      	nop
  400e18:	20008cb4 	.word	0x20008cb4
  400e1c:	20004b94 	.word	0x20004b94
  400e20:	20000a78 	.word	0x20000a78

00400e24 <usart_serial_getchar>:
{
  400e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e26:	b083      	sub	sp, #12
  400e28:	4605      	mov	r5, r0
  400e2a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400e2c:	2300      	movs	r3, #0
  400e2e:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400e30:	4b18      	ldr	r3, [pc, #96]	; (400e94 <usart_serial_getchar+0x70>)
  400e32:	4298      	cmp	r0, r3
  400e34:	d00a      	beq.n	400e4c <usart_serial_getchar+0x28>
	if (UART1 == (Uart*)p_usart) {
  400e36:	4b18      	ldr	r3, [pc, #96]	; (400e98 <usart_serial_getchar+0x74>)
  400e38:	4298      	cmp	r0, r3
  400e3a:	d00f      	beq.n	400e5c <usart_serial_getchar+0x38>
	if (USART0 == p_usart) {
  400e3c:	4b17      	ldr	r3, [pc, #92]	; (400e9c <usart_serial_getchar+0x78>)
  400e3e:	4298      	cmp	r0, r3
  400e40:	d014      	beq.n	400e6c <usart_serial_getchar+0x48>
	if (USART1 == p_usart) {
  400e42:	4b17      	ldr	r3, [pc, #92]	; (400ea0 <usart_serial_getchar+0x7c>)
  400e44:	429d      	cmp	r5, r3
  400e46:	d01b      	beq.n	400e80 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400e48:	b003      	add	sp, #12
  400e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400e4c:	461f      	mov	r7, r3
  400e4e:	4e15      	ldr	r6, [pc, #84]	; (400ea4 <usart_serial_getchar+0x80>)
  400e50:	4621      	mov	r1, r4
  400e52:	4638      	mov	r0, r7
  400e54:	47b0      	blx	r6
  400e56:	2800      	cmp	r0, #0
  400e58:	d1fa      	bne.n	400e50 <usart_serial_getchar+0x2c>
  400e5a:	e7f2      	b.n	400e42 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400e5c:	461e      	mov	r6, r3
  400e5e:	4d11      	ldr	r5, [pc, #68]	; (400ea4 <usart_serial_getchar+0x80>)
  400e60:	4621      	mov	r1, r4
  400e62:	4630      	mov	r0, r6
  400e64:	47a8      	blx	r5
  400e66:	2800      	cmp	r0, #0
  400e68:	d1fa      	bne.n	400e60 <usart_serial_getchar+0x3c>
  400e6a:	e7ed      	b.n	400e48 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400e6c:	461e      	mov	r6, r3
  400e6e:	4d0e      	ldr	r5, [pc, #56]	; (400ea8 <usart_serial_getchar+0x84>)
  400e70:	a901      	add	r1, sp, #4
  400e72:	4630      	mov	r0, r6
  400e74:	47a8      	blx	r5
  400e76:	2800      	cmp	r0, #0
  400e78:	d1fa      	bne.n	400e70 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400e7a:	9b01      	ldr	r3, [sp, #4]
  400e7c:	7023      	strb	r3, [r4, #0]
  400e7e:	e7e3      	b.n	400e48 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400e80:	461e      	mov	r6, r3
  400e82:	4d09      	ldr	r5, [pc, #36]	; (400ea8 <usart_serial_getchar+0x84>)
  400e84:	a901      	add	r1, sp, #4
  400e86:	4630      	mov	r0, r6
  400e88:	47a8      	blx	r5
  400e8a:	2800      	cmp	r0, #0
  400e8c:	d1fa      	bne.n	400e84 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400e8e:	9b01      	ldr	r3, [sp, #4]
  400e90:	7023      	strb	r3, [r4, #0]
}
  400e92:	e7d9      	b.n	400e48 <usart_serial_getchar+0x24>
  400e94:	400e0600 	.word	0x400e0600
  400e98:	40060600 	.word	0x40060600
  400e9c:	400a0000 	.word	0x400a0000
  400ea0:	400a4000 	.word	0x400a4000
  400ea4:	00400a27 	.word	0x00400a27
  400ea8:	00400a4d 	.word	0x00400a4d

00400eac <usart_serial_putchar>:
{
  400eac:	b570      	push	{r4, r5, r6, lr}
  400eae:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400eb0:	4b18      	ldr	r3, [pc, #96]	; (400f14 <usart_serial_putchar+0x68>)
  400eb2:	4298      	cmp	r0, r3
  400eb4:	d00a      	beq.n	400ecc <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400eb6:	4b18      	ldr	r3, [pc, #96]	; (400f18 <usart_serial_putchar+0x6c>)
  400eb8:	4298      	cmp	r0, r3
  400eba:	d010      	beq.n	400ede <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400ebc:	4b17      	ldr	r3, [pc, #92]	; (400f1c <usart_serial_putchar+0x70>)
  400ebe:	4298      	cmp	r0, r3
  400ec0:	d016      	beq.n	400ef0 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400ec2:	4b17      	ldr	r3, [pc, #92]	; (400f20 <usart_serial_putchar+0x74>)
  400ec4:	4298      	cmp	r0, r3
  400ec6:	d01c      	beq.n	400f02 <usart_serial_putchar+0x56>
	return 0;
  400ec8:	2000      	movs	r0, #0
}
  400eca:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400ecc:	461e      	mov	r6, r3
  400ece:	4d15      	ldr	r5, [pc, #84]	; (400f24 <usart_serial_putchar+0x78>)
  400ed0:	4621      	mov	r1, r4
  400ed2:	4630      	mov	r0, r6
  400ed4:	47a8      	blx	r5
  400ed6:	2800      	cmp	r0, #0
  400ed8:	d1fa      	bne.n	400ed0 <usart_serial_putchar+0x24>
		return 1;
  400eda:	2001      	movs	r0, #1
  400edc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400ede:	461e      	mov	r6, r3
  400ee0:	4d10      	ldr	r5, [pc, #64]	; (400f24 <usart_serial_putchar+0x78>)
  400ee2:	4621      	mov	r1, r4
  400ee4:	4630      	mov	r0, r6
  400ee6:	47a8      	blx	r5
  400ee8:	2800      	cmp	r0, #0
  400eea:	d1fa      	bne.n	400ee2 <usart_serial_putchar+0x36>
		return 1;
  400eec:	2001      	movs	r0, #1
  400eee:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400ef0:	461e      	mov	r6, r3
  400ef2:	4d0d      	ldr	r5, [pc, #52]	; (400f28 <usart_serial_putchar+0x7c>)
  400ef4:	4621      	mov	r1, r4
  400ef6:	4630      	mov	r0, r6
  400ef8:	47a8      	blx	r5
  400efa:	2800      	cmp	r0, #0
  400efc:	d1fa      	bne.n	400ef4 <usart_serial_putchar+0x48>
		return 1;
  400efe:	2001      	movs	r0, #1
  400f00:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400f02:	461e      	mov	r6, r3
  400f04:	4d08      	ldr	r5, [pc, #32]	; (400f28 <usart_serial_putchar+0x7c>)
  400f06:	4621      	mov	r1, r4
  400f08:	4630      	mov	r0, r6
  400f0a:	47a8      	blx	r5
  400f0c:	2800      	cmp	r0, #0
  400f0e:	d1fa      	bne.n	400f06 <usart_serial_putchar+0x5a>
		return 1;
  400f10:	2001      	movs	r0, #1
  400f12:	bd70      	pop	{r4, r5, r6, pc}
  400f14:	400e0600 	.word	0x400e0600
  400f18:	40060600 	.word	0x40060600
  400f1c:	400a0000 	.word	0x400a0000
  400f20:	400a4000 	.word	0x400a4000
  400f24:	00400a17 	.word	0x00400a17
  400f28:	00400a39 	.word	0x00400a39

00400f2c <afec0_data_ready>:
}

/* brief AFEC0 DRDY interrupt callback function. */

static void afec0_data_ready(void)
{
  400f2c:	b508      	push	{r3, lr}
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  400f2e:	4b04      	ldr	r3, [pc, #16]	; (400f40 <afec0_data_ready+0x14>)
  400f30:	6a18      	ldr	r0, [r3, #32]
	g_afec0_sample_data = afec_get_latest_value(AFEC0);					// Obtain latest sample from COLLECTOR signal (EXT3 - pin4 (ch6))
  400f32:	b280      	uxth	r0, r0
  400f34:	4b03      	ldr	r3, [pc, #12]	; (400f44 <afec0_data_ready+0x18>)
  400f36:	8018      	strh	r0, [r3, #0]
	addSample(g_afec0_sample_data);
  400f38:	4b03      	ldr	r3, [pc, #12]	; (400f48 <afec0_data_ready+0x1c>)
  400f3a:	4798      	blx	r3
  400f3c:	bd08      	pop	{r3, pc}
  400f3e:	bf00      	nop
  400f40:	400b0000 	.word	0x400b0000
  400f44:	20008de4 	.word	0x20008de4
  400f48:	00400d61 	.word	0x00400d61

00400f4c <sample_average>:
 ***************************** BEAM PARAMETER ALGORITHMS ****************************************
 **************************************************************************************************/

/*	Compute average/mean from given sample data within a certain window  */

uint16_t sample_average(uint16_t start, uint16_t end, uint16_t* buffer) {
  400f4c:	b4f0      	push	{r4, r5, r6, r7}
		
	uint32_t sample_avg = 0;
	uint32_t total_frequency = 0;
	
	for (uint16_t i = start; i < end; i++)
  400f4e:	4288      	cmp	r0, r1
  400f50:	d21e      	bcs.n	400f90 <sample_average+0x44>
  400f52:	eb02 0440 	add.w	r4, r2, r0, lsl #1
  400f56:	4603      	mov	r3, r0
  400f58:	4626      	mov	r6, r4
  400f5a:	2500      	movs	r5, #0
	{
		sample_avg += (uint32_t)buffer[i]*i;
  400f5c:	f836 7b02 	ldrh.w	r7, [r6], #2
  400f60:	fb03 5507 	mla	r5, r3, r7, r5
  400f64:	3301      	adds	r3, #1
	for (uint16_t i = start; i < end; i++)
  400f66:	b29f      	uxth	r7, r3
  400f68:	42b9      	cmp	r1, r7
  400f6a:	d8f7      	bhi.n	400f5c <sample_average+0x10>
  400f6c:	3901      	subs	r1, #1
  400f6e:	1a09      	subs	r1, r1, r0
  400f70:	3001      	adds	r0, #1
  400f72:	fa10 f181 	uxtah	r1, r0, r1
  400f76:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  400f7a:	2000      	movs	r0, #0
	}
	
	for (uint16_t i = start; i < end; i++)
	{
		total_frequency += (uint32_t)buffer[i];
  400f7c:	f834 3b02 	ldrh.w	r3, [r4], #2
  400f80:	4418      	add	r0, r3
	for (uint16_t i = start; i < end; i++)
  400f82:	428c      	cmp	r4, r1
  400f84:	d1fa      	bne.n	400f7c <sample_average+0x30>
	}
	
	return sample_avg/total_frequency;
  400f86:	fbb5 f0f0 	udiv	r0, r5, r0
}
  400f8a:	b280      	uxth	r0, r0
  400f8c:	bcf0      	pop	{r4, r5, r6, r7}
  400f8e:	4770      	bx	lr
	uint32_t sample_avg = 0;
  400f90:	2500      	movs	r5, #0
	for (uint16_t i = start; i < end; i++)
  400f92:	4628      	mov	r0, r5
  400f94:	e7f7      	b.n	400f86 <sample_average+0x3a>

00400f96 <find_max>:


/* Find the maximum of the BPM-80 data half cycle and return its index*/

uint16_t find_max(uint16_t* halfcycle, uint16_t length)
{
  400f96:	b470      	push	{r4, r5, r6}
	uint16_t maximum = 0;
	uint16_t max_index = 0;
									
	for (uint16_t i = 0; i < length; i++)
  400f98:	460e      	mov	r6, r1
  400f9a:	b181      	cbz	r1, 400fbe <find_max+0x28>
  400f9c:	1e81      	subs	r1, r0, #2
  400f9e:	2300      	movs	r3, #0
  400fa0:	4618      	mov	r0, r3
  400fa2:	461c      	mov	r4, r3
  400fa4:	b29d      	uxth	r5, r3
	{
		if (halfcycle[i] > maximum) 
  400fa6:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  400faa:	42a2      	cmp	r2, r4
  400fac:	bf84      	itt	hi
  400fae:	4628      	movhi	r0, r5
		{
			max_index = i;
			maximum = halfcycle[i];
  400fb0:	4614      	movhi	r4, r2
  400fb2:	3301      	adds	r3, #1
	for (uint16_t i = 0; i < length; i++)
  400fb4:	b29a      	uxth	r2, r3
  400fb6:	4296      	cmp	r6, r2
  400fb8:	d8f4      	bhi.n	400fa4 <find_max+0xe>
		}
	}
	
	
	return max_index;
}
  400fba:	bc70      	pop	{r4, r5, r6}
  400fbc:	4770      	bx	lr
	uint16_t max_index = 0;
  400fbe:	4608      	mov	r0, r1
  400fc0:	e7fb      	b.n	400fba <find_max+0x24>
	...

00400fc4 <detect_peaks>:
/* Find beam peak locations and peak widths X and Y using the dispersion-based algorithm */
/* Returns an array of 6 elements : 1. peak position X  2. peak edge left X  3. peak edge right X 
									4. peak position Y  5. peak edge left Y  6. peak edge right Y */

void detect_peaks(uint16_t threshold, uint16_t* buffer)
{
  400fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400fc8:	4605      	mov	r5, r0
  400fca:	460c      	mov	r4, r1
	uint16_t peak1 = find_max(buffer, half_cycle_length);
  400fcc:	4b3a      	ldr	r3, [pc, #232]	; (4010b8 <detect_peaks+0xf4>)
  400fce:	881f      	ldrh	r7, [r3, #0]
  400fd0:	4639      	mov	r1, r7
  400fd2:	4620      	mov	r0, r4
  400fd4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 4010c0 <detect_peaks+0xfc>
  400fd8:	47c0      	blx	r8
  400fda:	4606      	mov	r6, r0
	uint16_t peak2 = half_cycle_length + find_max(buffer+half_cycle_length, half_cycle_length);
  400fdc:	4639      	mov	r1, r7
  400fde:	eb04 0047 	add.w	r0, r4, r7, lsl #1
  400fe2:	47c0      	blx	r8
  400fe4:	4438      	add	r0, r7
  400fe6:	b280      	uxth	r0, r0
	
	// Use peak1 and peak2 to find the 4 corner points of the beams, possibly combine with dispersion-based algorithm
	
	peaks_localization[0] = peak1;
  400fe8:	4b34      	ldr	r3, [pc, #208]	; (4010bc <detect_peaks+0xf8>)
  400fea:	801e      	strh	r6, [r3, #0]
	peaks_localization[3] = peak2;
  400fec:	80d8      	strh	r0, [r3, #6]
			
	// find left corner of X peak
		
	for (uint16_t i = 0; i <= peak1; i++)
	{
		if(buffer[peak1 - i] < threshold) 
  400fee:	4631      	mov	r1, r6
  400ff0:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  400ff4:	42ab      	cmp	r3, r5
  400ff6:	d349      	bcc.n	40108c <detect_peaks+0xc8>
  400ff8:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak1; i++)
  400ffa:	3301      	adds	r3, #1
  400ffc:	b29b      	uxth	r3, r3
  400ffe:	429e      	cmp	r6, r3
  401000:	d350      	bcc.n	4010a4 <detect_peaks+0xe0>
		if(buffer[peak1 - i] < threshold) 
  401002:	1aca      	subs	r2, r1, r3
  401004:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  401008:	42aa      	cmp	r2, r5
  40100a:	d2f6      	bcs.n	400ffa <detect_peaks+0x36>
		{
			peaks_localization[1] = peak1-i;
  40100c:	1af3      	subs	r3, r6, r3
  40100e:	4a2b      	ldr	r2, [pc, #172]	; (4010bc <detect_peaks+0xf8>)
  401010:	8053      	strh	r3, [r2, #2]
		}
	}
	
	// find right corner of X peak
	
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  401012:	1bbf      	subs	r7, r7, r6
  401014:	d410      	bmi.n	401038 <detect_peaks+0x74>
	{
		if(buffer[peak1 + i] < threshold) 
  401016:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  40101a:	42ab      	cmp	r3, r5
  40101c:	d338      	bcc.n	401090 <detect_peaks+0xcc>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40101e:	2200      	movs	r2, #0
  401020:	3201      	adds	r2, #1
  401022:	b292      	uxth	r2, r2
  401024:	42ba      	cmp	r2, r7
  401026:	dc07      	bgt.n	401038 <detect_peaks+0x74>
		if(buffer[peak1 + i] < threshold) 
  401028:	1853      	adds	r3, r2, r1
  40102a:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
  40102e:	42ab      	cmp	r3, r5
  401030:	d2f6      	bcs.n	401020 <detect_peaks+0x5c>
		{
			peaks_localization[2] = peak1+i;
  401032:	4432      	add	r2, r6
  401034:	4b21      	ldr	r3, [pc, #132]	; (4010bc <detect_peaks+0xf8>)
  401036:	809a      	strh	r2, [r3, #4]
	
	// find left corner of Y peak
	
	for (uint16_t i = 0; i <= peak2; i++)
	{
		if(buffer[peak2 - i] < threshold)
  401038:	4602      	mov	r2, r0
  40103a:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  40103e:	42ab      	cmp	r3, r5
  401040:	d328      	bcc.n	401094 <detect_peaks+0xd0>
  401042:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak2; i++)
  401044:	3301      	adds	r3, #1
  401046:	b29b      	uxth	r3, r3
  401048:	4298      	cmp	r0, r3
  40104a:	d32e      	bcc.n	4010aa <detect_peaks+0xe6>
		if(buffer[peak2 - i] < threshold)
  40104c:	1ad1      	subs	r1, r2, r3
  40104e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  401052:	42a9      	cmp	r1, r5
  401054:	d2f6      	bcs.n	401044 <detect_peaks+0x80>
		{
			peaks_localization[4] = peak2-i;
  401056:	1ac3      	subs	r3, r0, r3
  401058:	4918      	ldr	r1, [pc, #96]	; (4010bc <detect_peaks+0xf8>)
  40105a:	810b      	strh	r3, [r1, #8]
		}
	}
	
	// find right corner of Y peak
	
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  40105c:	f5c0 5602 	rsb	r6, r0, #8320	; 0x2080
  401060:	360e      	adds	r6, #14
  401062:	2e00      	cmp	r6, #0
  401064:	db18      	blt.n	401098 <detect_peaks+0xd4>
	{
		if(buffer[peak2 + i] < threshold)
  401066:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  40106a:	42ab      	cmp	r3, r5
  40106c:	d316      	bcc.n	40109c <detect_peaks+0xd8>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  40106e:	2300      	movs	r3, #0
  401070:	3301      	adds	r3, #1
  401072:	b29b      	uxth	r3, r3
  401074:	42b3      	cmp	r3, r6
  401076:	dc13      	bgt.n	4010a0 <detect_peaks+0xdc>
		if(buffer[peak2 + i] < threshold)
  401078:	1899      	adds	r1, r3, r2
  40107a:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  40107e:	42a9      	cmp	r1, r5
  401080:	d2f6      	bcs.n	401070 <detect_peaks+0xac>
		{
			peaks_localization[5] = peak2+i;
  401082:	4403      	add	r3, r0
  401084:	4a0d      	ldr	r2, [pc, #52]	; (4010bc <detect_peaks+0xf8>)
  401086:	8153      	strh	r3, [r2, #10]
			break;
  401088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= peak1; i++)
  40108c:	2300      	movs	r3, #0
  40108e:	e7bd      	b.n	40100c <detect_peaks+0x48>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  401090:	2200      	movs	r2, #0
  401092:	e7ce      	b.n	401032 <detect_peaks+0x6e>
	for (uint16_t i = 0; i <= peak2; i++)
  401094:	2300      	movs	r3, #0
  401096:	e7de      	b.n	401056 <detect_peaks+0x92>
  401098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  40109c:	2300      	movs	r3, #0
  40109e:	e7f0      	b.n	401082 <detect_peaks+0xbe>
  4010a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  4010a4:	1bbf      	subs	r7, r7, r6
  4010a6:	d5ba      	bpl.n	40101e <detect_peaks+0x5a>
  4010a8:	e7c6      	b.n	401038 <detect_peaks+0x74>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  4010aa:	f5c0 5602 	rsb	r6, r0, #8320	; 0x2080
  4010ae:	360e      	adds	r6, #14
  4010b0:	2e00      	cmp	r6, #0
  4010b2:	dadc      	bge.n	40106e <detect_peaks+0xaa>
  4010b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010b8:	20000008 	.word	0x20000008
  4010bc:	20008cc4 	.word	0x20008cc4
  4010c0:	00400f97 	.word	0x00400f97

004010c4 <compute_beam_intensity>:
/* Compute beam intensity of a cycle in X and Y cross section */
/* Takes as input the borders of both peaks*/
/* Outputs beam intensity of X and Y crossection, so that higher level data representation can choose whether to multiply or sum them*/

void compute_beam_intensity(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right, uint16_t* buffer)
{
  4010c4:	b4f0      	push	{r4, r5, r6, r7}
  4010c6:	9f04      	ldr	r7, [sp, #16]
	beam_intensity[0] = 0;
  4010c8:	4c15      	ldr	r4, [pc, #84]	; (401120 <compute_beam_intensity+0x5c>)
  4010ca:	2500      	movs	r5, #0
  4010cc:	8025      	strh	r5, [r4, #0]
	beam_intensity[1] = 0;
  4010ce:	8065      	strh	r5, [r4, #2]
	
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  4010d0:	4288      	cmp	r0, r1
  4010d2:	d210      	bcs.n	4010f6 <compute_beam_intensity+0x32>
  4010d4:	eb07 0440 	add.w	r4, r7, r0, lsl #1
  4010d8:	1e4e      	subs	r6, r1, #1
  4010da:	1a36      	subs	r6, r6, r0
  4010dc:	3001      	adds	r0, #1
  4010de:	fa10 f686 	uxtah	r6, r0, r6
  4010e2:	eb07 0646 	add.w	r6, r7, r6, lsl #1
	{
		beam_intensity[0] += (uint32_t)buffer[i];
  4010e6:	480e      	ldr	r0, [pc, #56]	; (401120 <compute_beam_intensity+0x5c>)
  4010e8:	f834 1b02 	ldrh.w	r1, [r4], #2
  4010ec:	8805      	ldrh	r5, [r0, #0]
  4010ee:	4429      	add	r1, r5
  4010f0:	8001      	strh	r1, [r0, #0]
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  4010f2:	42b4      	cmp	r4, r6
  4010f4:	d1f8      	bne.n	4010e8 <compute_beam_intensity+0x24>
	}
	
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  4010f6:	429a      	cmp	r2, r3
  4010f8:	d210      	bcs.n	40111c <compute_beam_intensity+0x58>
  4010fa:	eb07 0142 	add.w	r1, r7, r2, lsl #1
  4010fe:	1e5c      	subs	r4, r3, #1
  401100:	1aa4      	subs	r4, r4, r2
  401102:	3201      	adds	r2, #1
  401104:	fa12 f484 	uxtah	r4, r2, r4
  401108:	eb07 0444 	add.w	r4, r7, r4, lsl #1
	{
		beam_intensity[1] += (uint32_t)buffer[i];
  40110c:	4a04      	ldr	r2, [pc, #16]	; (401120 <compute_beam_intensity+0x5c>)
  40110e:	f831 3b02 	ldrh.w	r3, [r1], #2
  401112:	8850      	ldrh	r0, [r2, #2]
  401114:	4403      	add	r3, r0
  401116:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  401118:	42a1      	cmp	r1, r4
  40111a:	d1f8      	bne.n	40110e <compute_beam_intensity+0x4a>
	}
	
}
  40111c:	bcf0      	pop	{r4, r5, r6, r7}
  40111e:	4770      	bx	lr
  401120:	20008cb8 	.word	0x20008cb8

00401124 <sum>:

 uint16_t sum(uint16_t start, uint16_t end, uint16_t* buffer)
 {
	 uint16_t result=0;
	 for (uint16_t i=start; i< end; i++ )
  401124:	4288      	cmp	r0, r1
  401126:	d210      	bcs.n	40114a <sum+0x26>
  401128:	eb02 0340 	add.w	r3, r2, r0, lsl #1
  40112c:	3901      	subs	r1, #1
  40112e:	1a09      	subs	r1, r1, r0
  401130:	3001      	adds	r0, #1
  401132:	fa10 f181 	uxtah	r1, r0, r1
  401136:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  40113a:	2000      	movs	r0, #0
	 {
		 result+=buffer[i];
  40113c:	f833 1b02 	ldrh.w	r1, [r3], #2
  401140:	4408      	add	r0, r1
  401142:	b280      	uxth	r0, r0
	 for (uint16_t i=start; i< end; i++ )
  401144:	4293      	cmp	r3, r2
  401146:	d1f9      	bne.n	40113c <sum+0x18>
  401148:	4770      	bx	lr
	 uint16_t result=0;
  40114a:	2000      	movs	r0, #0
	 }
	 return result;
 }
  40114c:	4770      	bx	lr
	...

00401150 <compute_fwhm>:
 
 /* Compute FWHM X and Y */

 void compute_fwhm(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right,uint16_t* buffer)
 {
  401150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401154:	b08b      	sub	sp, #44	; 0x2c
  401156:	4680      	mov	r8, r0
  401158:	9007      	str	r0, [sp, #28]
  40115a:	460f      	mov	r7, r1
  40115c:	9108      	str	r1, [sp, #32]
  40115e:	4616      	mov	r6, r2
  401160:	9205      	str	r2, [sp, #20]
  401162:	461d      	mov	r5, r3
  401164:	9306      	str	r3, [sp, #24]
	 
	 uint16_t mean[2] = {0,0};
	 long long summed=0;
	 int variance=0;
	 
	 mean[0] = sample_average(peak1_left, peak1_right,buffer);
  401166:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401168:	4c63      	ldr	r4, [pc, #396]	; (4012f8 <compute_fwhm+0x1a8>)
  40116a:	47a0      	blx	r4
  40116c:	4682      	mov	sl, r0
	 mean[1] = sample_average(peak2_left, peak2_right,buffer);
  40116e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401170:	4629      	mov	r1, r5
  401172:	4630      	mov	r0, r6
  401174:	47a0      	blx	r4
  401176:	9009      	str	r0, [sp, #36]	; 0x24
	 
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  401178:	45b8      	cmp	r8, r7
  40117a:	f080 80ae 	bcs.w	4012da <compute_fwhm+0x18a>
  40117e:	4638      	mov	r0, r7
  401180:	eba8 040a 	sub.w	r4, r8, sl
  401184:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401186:	4615      	mov	r5, r2
  401188:	4642      	mov	r2, r8
  40118a:	eb05 0748 	add.w	r7, r5, r8, lsl #1
  40118e:	1e43      	subs	r3, r0, #1
  401190:	1a9b      	subs	r3, r3, r2
  401192:	3201      	adds	r2, #1
  401194:	fa12 f383 	uxtah	r3, r2, r3
  401198:	eba3 0a0a 	sub.w	sl, r3, sl
  40119c:	2200      	movs	r2, #0
  40119e:	2300      	movs	r3, #0
  4011a0:	e9cd 2300 	strd	r2, r3, [sp]
	 {
		 summed+= (pow((i-mean[0]),2)*buffer[i]);
  4011a4:	4e55      	ldr	r6, [pc, #340]	; (4012fc <compute_fwhm+0x1ac>)
  4011a6:	4d56      	ldr	r5, [pc, #344]	; (401300 <compute_fwhm+0x1b0>)
  4011a8:	f8df 8170 	ldr.w	r8, [pc, #368]	; 40131c <compute_fwhm+0x1cc>
  4011ac:	f8df 9170 	ldr.w	r9, [pc, #368]	; 401320 <compute_fwhm+0x1d0>
  4011b0:	46d3      	mov	fp, sl
  4011b2:	46ba      	mov	sl, r7
  4011b4:	4620      	mov	r0, r4
  4011b6:	47b0      	blx	r6
  4011b8:	f83a 7b02 	ldrh.w	r7, [sl], #2
  4011bc:	4602      	mov	r2, r0
  4011be:	460b      	mov	r3, r1
  4011c0:	47a8      	blx	r5
  4011c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4011c6:	4638      	mov	r0, r7
  4011c8:	47b0      	blx	r6
  4011ca:	4602      	mov	r2, r0
  4011cc:	460b      	mov	r3, r1
  4011ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4011d2:	47a8      	blx	r5
  4011d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4011d8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4011dc:	4b49      	ldr	r3, [pc, #292]	; (401304 <compute_fwhm+0x1b4>)
  4011de:	4798      	blx	r3
  4011e0:	4602      	mov	r2, r0
  4011e2:	460b      	mov	r3, r1
  4011e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4011e8:	47c0      	blx	r8
  4011ea:	47c8      	blx	r9
  4011ec:	e9cd 0100 	strd	r0, r1, [sp]
  4011f0:	3401      	adds	r4, #1
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  4011f2:	455c      	cmp	r4, fp
  4011f4:	d1de      	bne.n	4011b4 <compute_fwhm+0x64>
	 }
	 variance=summed/sum(peak1_left,peak1_right,buffer);
  4011f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4011f8:	9908      	ldr	r1, [sp, #32]
  4011fa:	9807      	ldr	r0, [sp, #28]
  4011fc:	4b42      	ldr	r3, [pc, #264]	; (401308 <compute_fwhm+0x1b8>)
  4011fe:	4798      	blx	r3
  401200:	b282      	uxth	r2, r0
  401202:	2300      	movs	r3, #0
  401204:	e9dd 0100 	ldrd	r0, r1, [sp]
  401208:	4c40      	ldr	r4, [pc, #256]	; (40130c <compute_fwhm+0x1bc>)
  40120a:	47a0      	blx	r4
	
	 fwhm[0]= (uint16_t)(sqrt(variance)*2.355);
  40120c:	4b3b      	ldr	r3, [pc, #236]	; (4012fc <compute_fwhm+0x1ac>)
  40120e:	4798      	blx	r3
  401210:	4b3f      	ldr	r3, [pc, #252]	; (401310 <compute_fwhm+0x1c0>)
  401212:	4798      	blx	r3
  401214:	a336      	add	r3, pc, #216	; (adr r3, 4012f0 <compute_fwhm+0x1a0>)
  401216:	e9d3 2300 	ldrd	r2, r3, [r3]
  40121a:	4c39      	ldr	r4, [pc, #228]	; (401300 <compute_fwhm+0x1b0>)
  40121c:	47a0      	blx	r4
  40121e:	4b3d      	ldr	r3, [pc, #244]	; (401314 <compute_fwhm+0x1c4>)
  401220:	4798      	blx	r3
  401222:	4b3d      	ldr	r3, [pc, #244]	; (401318 <compute_fwhm+0x1c8>)
  401224:	8018      	strh	r0, [r3, #0]
	 summed=0;
	 variance=0;
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  401226:	9a05      	ldr	r2, [sp, #20]
  401228:	4613      	mov	r3, r2
  40122a:	9806      	ldr	r0, [sp, #24]
  40122c:	4282      	cmp	r2, r0
  40122e:	d259      	bcs.n	4012e4 <compute_fwhm+0x194>
  401230:	9d09      	ldr	r5, [sp, #36]	; 0x24
  401232:	1b5c      	subs	r4, r3, r5
  401234:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401236:	4611      	mov	r1, r2
  401238:	eb01 0743 	add.w	r7, r1, r3, lsl #1
  40123c:	f100 3aff 	add.w	sl, r0, #4294967295
  401240:	ebaa 0a03 	sub.w	sl, sl, r3
  401244:	3301      	adds	r3, #1
  401246:	fa13 fa8a 	uxtah	sl, r3, sl
  40124a:	ebaa 0a05 	sub.w	sl, sl, r5
  40124e:	2200      	movs	r2, #0
  401250:	2300      	movs	r3, #0
  401252:	e9cd 2300 	strd	r2, r3, [sp]
	 {
		 summed+= (pow((i-mean[1]),2)*buffer[i]);
  401256:	4e29      	ldr	r6, [pc, #164]	; (4012fc <compute_fwhm+0x1ac>)
  401258:	4d29      	ldr	r5, [pc, #164]	; (401300 <compute_fwhm+0x1b0>)
  40125a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 40131c <compute_fwhm+0x1cc>
  40125e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 401320 <compute_fwhm+0x1d0>
  401262:	4620      	mov	r0, r4
  401264:	47b0      	blx	r6
  401266:	f837 bb02 	ldrh.w	fp, [r7], #2
  40126a:	4602      	mov	r2, r0
  40126c:	460b      	mov	r3, r1
  40126e:	47a8      	blx	r5
  401270:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401274:	4658      	mov	r0, fp
  401276:	47b0      	blx	r6
  401278:	4602      	mov	r2, r0
  40127a:	460b      	mov	r3, r1
  40127c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401280:	47a8      	blx	r5
  401282:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401286:	e9dd 0100 	ldrd	r0, r1, [sp]
  40128a:	4b1e      	ldr	r3, [pc, #120]	; (401304 <compute_fwhm+0x1b4>)
  40128c:	4798      	blx	r3
  40128e:	4602      	mov	r2, r0
  401290:	460b      	mov	r3, r1
  401292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401296:	47c8      	blx	r9
  401298:	47c0      	blx	r8
  40129a:	e9cd 0100 	strd	r0, r1, [sp]
  40129e:	3401      	adds	r4, #1
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  4012a0:	4554      	cmp	r4, sl
  4012a2:	d1de      	bne.n	401262 <compute_fwhm+0x112>
	 }
	 variance=summed/sum(peak2_left,peak2_right,buffer);
  4012a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4012a6:	9906      	ldr	r1, [sp, #24]
  4012a8:	9805      	ldr	r0, [sp, #20]
  4012aa:	4b17      	ldr	r3, [pc, #92]	; (401308 <compute_fwhm+0x1b8>)
  4012ac:	4798      	blx	r3
  4012ae:	b282      	uxth	r2, r0
  4012b0:	2300      	movs	r3, #0
  4012b2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4012b6:	4c15      	ldr	r4, [pc, #84]	; (40130c <compute_fwhm+0x1bc>)
  4012b8:	47a0      	blx	r4
	 fwhm[1]=(uint16_t) (sqrt(variance)*2.355);
  4012ba:	4b10      	ldr	r3, [pc, #64]	; (4012fc <compute_fwhm+0x1ac>)
  4012bc:	4798      	blx	r3
  4012be:	4b14      	ldr	r3, [pc, #80]	; (401310 <compute_fwhm+0x1c0>)
  4012c0:	4798      	blx	r3
  4012c2:	a30b      	add	r3, pc, #44	; (adr r3, 4012f0 <compute_fwhm+0x1a0>)
  4012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012c8:	4c0d      	ldr	r4, [pc, #52]	; (401300 <compute_fwhm+0x1b0>)
  4012ca:	47a0      	blx	r4
  4012cc:	4b11      	ldr	r3, [pc, #68]	; (401314 <compute_fwhm+0x1c4>)
  4012ce:	4798      	blx	r3
  4012d0:	4b11      	ldr	r3, [pc, #68]	; (401318 <compute_fwhm+0x1c8>)
  4012d2:	8058      	strh	r0, [r3, #2]
 }
  4012d4:	b00b      	add	sp, #44	; 0x2c
  4012d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 long long summed=0;
  4012da:	2300      	movs	r3, #0
  4012dc:	2400      	movs	r4, #0
  4012de:	e9cd 3400 	strd	r3, r4, [sp]
  4012e2:	e788      	b.n	4011f6 <compute_fwhm+0xa6>
	 summed=0;
  4012e4:	2300      	movs	r3, #0
  4012e6:	2400      	movs	r4, #0
  4012e8:	e9cd 3400 	strd	r3, r4, [sp]
  4012ec:	e7da      	b.n	4012a4 <compute_fwhm+0x154>
  4012ee:	bf00      	nop
  4012f0:	3d70a3d7 	.word	0x3d70a3d7
  4012f4:	4002d70a 	.word	0x4002d70a
  4012f8:	00400f4d 	.word	0x00400f4d
  4012fc:	00402e09 	.word	0x00402e09
  401300:	00402ed5 	.word	0x00402ed5
  401304:	00402e79 	.word	0x00402e79
  401308:	00401125 	.word	0x00401125
  40130c:	00403475 	.word	0x00403475
  401310:	00401c5d 	.word	0x00401c5d
  401314:	00403435 	.word	0x00403435
  401318:	20008cc0 	.word	0x20008cc0
  40131c:	00402b71 	.word	0x00402b71
  401320:	00403515 	.word	0x00403515
  401324:	00000000 	.word	0x00000000

00401328 <compute_skewness>:


/* Compute skewness of the beam  X and Y */

void compute_skewness(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right,uint16_t* buffer)
{
  401328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40132c:	ed2d 8b02 	vpush	{d8}
  401330:	b085      	sub	sp, #20
  401332:	4680      	mov	r8, r0
  401334:	4689      	mov	r9, r1
  401336:	4617      	mov	r7, r2
  401338:	9202      	str	r2, [sp, #8]
  40133a:	461e      	mov	r6, r3
  40133c:	9303      	str	r3, [sp, #12]
	int first_peak_mean  =  sample_average(peak1_left, peak1_right,buffer);
  40133e:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401340:	4c39      	ldr	r4, [pc, #228]	; (401428 <compute_skewness+0x100>)
  401342:	47a0      	blx	r4
  401344:	4605      	mov	r5, r0
	int second_peak_mean =  sample_average(peak2_left, peak2_right,buffer);
  401346:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401348:	4631      	mov	r1, r6
  40134a:	4638      	mov	r0, r7
  40134c:	47a0      	blx	r4
  40134e:	4604      	mov	r4, r0
	
	double third_central = 0;
	uint32_t second_central = 0;
	
	 for (int i=peak1_left;i<peak1_right;i++ )
  401350:	45c8      	cmp	r8, r9
  401352:	da0f      	bge.n	401374 <compute_skewness+0x4c>
  401354:	4646      	mov	r6, r8
  401356:	464f      	mov	r7, r9
  401358:	eba8 0505 	sub.w	r5, r8, r5
	 {
		 third_central = (double)i-1054;//(pow((i-first_peak_mean),3)*buffer[i]);
		 second_central += (pow((i-first_peak_mean),2)*buffer[i]);
  40135c:	ed9f 8b30 	vldr	d8, [pc, #192]	; 401420 <compute_skewness+0xf8>
  401360:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 401434 <compute_skewness+0x10c>
  401364:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 401444 <compute_skewness+0x11c>
  401368:	2d00      	cmp	r5, #0
  40136a:	dd4d      	ble.n	401408 <compute_skewness+0xe0>
	 for (int i=peak1_left;i<peak1_right;i++ )
  40136c:	3601      	adds	r6, #1
  40136e:	3501      	adds	r5, #1
  401370:	42be      	cmp	r6, r7
  401372:	dbf9      	blt.n	401368 <compute_skewness+0x40>
	 }
	 
	 second_central = second_central / sum(peak1_left,peak1_right,buffer);
	 //third_central = third_central / sum(peak1_left,peak1_right,buffer);
	
	skewness[0] = peak1_left;
  401374:	4640      	mov	r0, r8
  401376:	4b2d      	ldr	r3, [pc, #180]	; (40142c <compute_skewness+0x104>)
  401378:	4798      	blx	r3
  40137a:	4b2d      	ldr	r3, [pc, #180]	; (401430 <compute_skewness+0x108>)
  40137c:	e9c3 0100 	strd	r0, r1, [r3]
	
	third_central = 0;
	second_central = 0;
	
	
	 for (int i=peak2_left;i<peak2_right;i++ )
  401380:	9a02      	ldr	r2, [sp, #8]
  401382:	4613      	mov	r3, r2
  401384:	9803      	ldr	r0, [sp, #12]
  401386:	4282      	cmp	r2, r0
  401388:	da44      	bge.n	401414 <compute_skewness+0xec>
  40138a:	1b14      	subs	r4, r2, r4
  40138c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40138e:	eb02 0543 	add.w	r5, r2, r3, lsl #1
  401392:	eb02 0840 	add.w	r8, r2, r0, lsl #1
  401396:	2300      	movs	r3, #0
  401398:	461e      	mov	r6, r3
	 {
		 second_central += (pow((i-second_peak_mean),2)*buffer[i]);
  40139a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 40142c <compute_skewness+0x104>
  40139e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 401448 <compute_skewness+0x120>
  4013a2:	4620      	mov	r0, r4
  4013a4:	4b23      	ldr	r3, [pc, #140]	; (401434 <compute_skewness+0x10c>)
  4013a6:	4798      	blx	r3
  4013a8:	f835 bb02 	ldrh.w	fp, [r5], #2
  4013ac:	4602      	mov	r2, r0
  4013ae:	460b      	mov	r3, r1
  4013b0:	4f21      	ldr	r7, [pc, #132]	; (401438 <compute_skewness+0x110>)
  4013b2:	47b8      	blx	r7
  4013b4:	e9cd 0100 	strd	r0, r1, [sp]
  4013b8:	4658      	mov	r0, fp
  4013ba:	4b1e      	ldr	r3, [pc, #120]	; (401434 <compute_skewness+0x10c>)
  4013bc:	4798      	blx	r3
  4013be:	4602      	mov	r2, r0
  4013c0:	460b      	mov	r3, r1
  4013c2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4013c6:	47b8      	blx	r7
  4013c8:	e9cd 0100 	strd	r0, r1, [sp]
  4013cc:	4630      	mov	r0, r6
  4013ce:	47c8      	blx	r9
  4013d0:	4602      	mov	r2, r0
  4013d2:	460b      	mov	r3, r1
  4013d4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4013d8:	4e18      	ldr	r6, [pc, #96]	; (40143c <compute_skewness+0x114>)
  4013da:	47b0      	blx	r6
  4013dc:	47d0      	blx	sl
  4013de:	4606      	mov	r6, r0
  4013e0:	3401      	adds	r4, #1
	 for (int i=peak2_left;i<peak2_right;i++ )
  4013e2:	4545      	cmp	r5, r8
  4013e4:	d1dd      	bne.n	4013a2 <compute_skewness+0x7a>
	 }
	 
	 second_central = second_central / sum(peak2_left,peak2_right,buffer);
  4013e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4013e8:	9903      	ldr	r1, [sp, #12]
  4013ea:	9802      	ldr	r0, [sp, #8]
  4013ec:	4b14      	ldr	r3, [pc, #80]	; (401440 <compute_skewness+0x118>)
  4013ee:	4798      	blx	r3
	
	skewness[1] = second_central;
  4013f0:	fbb6 f0f0 	udiv	r0, r6, r0
  4013f4:	4b0d      	ldr	r3, [pc, #52]	; (40142c <compute_skewness+0x104>)
  4013f6:	4798      	blx	r3
  4013f8:	4b0d      	ldr	r3, [pc, #52]	; (401430 <compute_skewness+0x108>)
  4013fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
	
}
  4013fe:	b005      	add	sp, #20
  401400:	ecbd 8b02 	vpop	{d8}
  401404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 second_central += (pow((i-first_peak_mean),2)*buffer[i]);
  401408:	4628      	mov	r0, r5
  40140a:	47d0      	blx	sl
  40140c:	ec53 2b18 	vmov	r2, r3, d8
  401410:	47c8      	blx	r9
  401412:	e7ab      	b.n	40136c <compute_skewness+0x44>
	second_central = 0;
  401414:	2300      	movs	r3, #0
  401416:	461e      	mov	r6, r3
  401418:	e7e5      	b.n	4013e6 <compute_skewness+0xbe>
  40141a:	bf00      	nop
  40141c:	f3af 8000 	nop.w
  401420:	00000000 	.word	0x00000000
  401424:	40000000 	.word	0x40000000
  401428:	00400f4d 	.word	0x00400f4d
  40142c:	00402de9 	.word	0x00402de9
  401430:	20008cd0 	.word	0x20008cd0
  401434:	00402e09 	.word	0x00402e09
  401438:	00402ed5 	.word	0x00402ed5
  40143c:	00402b71 	.word	0x00402b71
  401440:	00401125 	.word	0x00401125
  401444:	00401961 	.word	0x00401961
  401448:	00403435 	.word	0x00403435

0040144c <show_beam_parameters>:


/* Present beam parameters on terminal*/

void show_beam_parameters(uint16_t* buffer)
{
  40144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401450:	b08b      	sub	sp, #44	; 0x2c
  401452:	af02      	add	r7, sp, #8
  401454:	4682      	mov	sl, r0
	
 	detect_peaks(20, buffer);
  401456:	4601      	mov	r1, r0
  401458:	2014      	movs	r0, #20
  40145a:	4b75      	ldr	r3, [pc, #468]	; (401630 <show_beam_parameters+0x1e4>)
  40145c:	4798      	blx	r3
 	compute_beam_intensity(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5], buffer);
  40145e:	4d75      	ldr	r5, [pc, #468]	; (401634 <show_beam_parameters+0x1e8>)
  401460:	896b      	ldrh	r3, [r5, #10]
  401462:	892a      	ldrh	r2, [r5, #8]
  401464:	88a9      	ldrh	r1, [r5, #4]
  401466:	8868      	ldrh	r0, [r5, #2]
  401468:	f8cd a000 	str.w	sl, [sp]
  40146c:	4c72      	ldr	r4, [pc, #456]	; (401638 <show_beam_parameters+0x1ec>)
  40146e:	47a0      	blx	r4
 	compute_fwhm(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5],buffer);
  401470:	896b      	ldrh	r3, [r5, #10]
  401472:	892a      	ldrh	r2, [r5, #8]
  401474:	88a9      	ldrh	r1, [r5, #4]
  401476:	8868      	ldrh	r0, [r5, #2]
  401478:	f8cd a000 	str.w	sl, [sp]
  40147c:	4c6f      	ldr	r4, [pc, #444]	; (40163c <show_beam_parameters+0x1f0>)
  40147e:	47a0      	blx	r4
 	compute_skewness(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5],buffer);
  401480:	896b      	ldrh	r3, [r5, #10]
  401482:	892a      	ldrh	r2, [r5, #8]
  401484:	88a9      	ldrh	r1, [r5, #4]
  401486:	8868      	ldrh	r0, [r5, #2]
  401488:	f8cd a000 	str.w	sl, [sp]
  40148c:	4c6c      	ldr	r4, [pc, #432]	; (401640 <show_beam_parameters+0x1f4>)
  40148e:	47a0      	blx	r4

	
	uint16_t peak_info[7] = {0,0,0,0,0,0,9999};
  401490:	2300      	movs	r3, #0
  401492:	823b      	strh	r3, [r7, #16]
  401494:	827b      	strh	r3, [r7, #18]
  401496:	82bb      	strh	r3, [r7, #20]
  401498:	82fb      	strh	r3, [r7, #22]
  40149a:	833b      	strh	r3, [r7, #24]
  40149c:	837b      	strh	r3, [r7, #26]
  40149e:	f242 730f 	movw	r3, #9999	; 0x270f
  4014a2:	83bb      	strh	r3, [r7, #28]
  4014a4:	462b      	mov	r3, r5
  4014a6:	f107 0410 	add.w	r4, r7, #16
  4014aa:	350c      	adds	r5, #12
  4014ac:	4622      	mov	r2, r4
	
	
	
	for (uint16_t i = 0; i < 6; i++)
	{
		 peak_info[i] = peaks_localization[i];
  4014ae:	f833 1b02 	ldrh.w	r1, [r3], #2
  4014b2:	f822 1b02 	strh.w	r1, [r2], #2
	for (uint16_t i = 0; i < 6; i++)
  4014b6:	42ab      	cmp	r3, r5
  4014b8:	d1f9      	bne.n	4014ae <show_beam_parameters+0x62>
	}
	
	uint16_t peak_width1 = peak_info[2] - peak_info[1] + 1;
  4014ba:	f8b7 c012 	ldrh.w	ip, [r7, #18]
  4014be:	f8b7 9014 	ldrh.w	r9, [r7, #20]
  4014c2:	f109 0901 	add.w	r9, r9, #1
  4014c6:	eba9 090c 	sub.w	r9, r9, ip
  4014ca:	fa1f f989 	uxth.w	r9, r9
	uint16_t peak_one_plot_data[peak_width1];
  4014ce:	f109 31ff 	add.w	r1, r9, #4294967295
  4014d2:	ea4f 0349 	mov.w	r3, r9, lsl #1
  4014d6:	3308      	adds	r3, #8
  4014d8:	f023 0307 	bic.w	r3, r3, #7
  4014dc:	ebad 0d03 	sub.w	sp, sp, r3
  4014e0:	ae02      	add	r6, sp, #8
	uint16_t peak_width2 = peak_info[5] - peak_info[4] + 1;
  4014e2:	f8b7 e018 	ldrh.w	lr, [r7, #24]
  4014e6:	f8b7 801a 	ldrh.w	r8, [r7, #26]
  4014ea:	f108 0801 	add.w	r8, r8, #1
  4014ee:	eba8 080e 	sub.w	r8, r8, lr
  4014f2:	fa1f f888 	uxth.w	r8, r8
	uint16_t peak_two_plot_data[peak_width2];
  4014f6:	f108 30ff 	add.w	r0, r8, #4294967295
  4014fa:	ea4f 0348 	mov.w	r3, r8, lsl #1
  4014fe:	3308      	adds	r3, #8
  401500:	f023 0307 	bic.w	r3, r3, #7
  401504:	ebad 0d03 	sub.w	sp, sp, r3
  401508:	ad02      	add	r5, sp, #8
	
	
	for (uint16_t i = 0; i < peak_width1-1; i++)
  40150a:	2900      	cmp	r1, #0
  40150c:	dd0c      	ble.n	401528 <show_beam_parameters+0xdc>
  40150e:	2200      	movs	r2, #0
  401510:	4613      	mov	r3, r2
	{
		peak_one_plot_data[i] =  buffer[peak_info[1] + i];
  401512:	eb0c 0b02 	add.w	fp, ip, r2
  401516:	f83a b01b 	ldrh.w	fp, [sl, fp, lsl #1]
  40151a:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
	for (uint16_t i = 0; i < peak_width1-1; i++)
  40151e:	3301      	adds	r3, #1
  401520:	b29b      	uxth	r3, r3
  401522:	461a      	mov	r2, r3
  401524:	4299      	cmp	r1, r3
  401526:	dcf4      	bgt.n	401512 <show_beam_parameters+0xc6>
	}
	
	peak_one_plot_data[peak_width1-1] = 8888; 
  401528:	f242 23b8 	movw	r3, #8888	; 0x22b8
  40152c:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
	
	for (uint16_t i = 0; i < peak_width2-1; i++)
  401530:	2800      	cmp	r0, #0
  401532:	dd0c      	ble.n	40154e <show_beam_parameters+0x102>
  401534:	2200      	movs	r2, #0
  401536:	4613      	mov	r3, r2
	{
		peak_two_plot_data[i] =  buffer[peak_info[4] + i];
  401538:	eb0e 0102 	add.w	r1, lr, r2
  40153c:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
  401540:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
	for (uint16_t i = 0; i < peak_width2-1; i++)
  401544:	3301      	adds	r3, #1
  401546:	b29b      	uxth	r3, r3
  401548:	461a      	mov	r2, r3
  40154a:	4298      	cmp	r0, r3
  40154c:	dcf4      	bgt.n	401538 <show_beam_parameters+0xec>
	}
	
	peak_two_plot_data[peak_width2-1] = 7777; 
  40154e:	f641 6361 	movw	r3, #7777	; 0x1e61
  401552:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
	
	
	
	uint16_t beam_parameters[4] = {0,0,0,0};
	
	beam_parameters[0] = beam_intensity[0];
  401556:	4b3b      	ldr	r3, [pc, #236]	; (401644 <show_beam_parameters+0x1f8>)
  401558:	881a      	ldrh	r2, [r3, #0]
  40155a:	813a      	strh	r2, [r7, #8]
	beam_parameters[1] = beam_intensity[1];
  40155c:	885b      	ldrh	r3, [r3, #2]
  40155e:	817b      	strh	r3, [r7, #10]
	beam_parameters[2] = fwhm[0];
  401560:	4b39      	ldr	r3, [pc, #228]	; (401648 <show_beam_parameters+0x1fc>)
  401562:	881a      	ldrh	r2, [r3, #0]
  401564:	81ba      	strh	r2, [r7, #12]
	beam_parameters[3] = fwhm[1];
  401566:	885b      	ldrh	r3, [r3, #2]
  401568:	81fb      	strh	r3, [r7, #14]
  40156a:	f107 0b1e 	add.w	fp, r7, #30
	
	
	
	for (uint16_t i = 0; i < 7; i++)
    {
		usart_serial_write_packet(CONF_UART, peak_info+i,2);
  40156e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 401650 <show_beam_parameters+0x204>
  401572:	2202      	movs	r2, #2
  401574:	4621      	mov	r1, r4
  401576:	4835      	ldr	r0, [pc, #212]	; (40164c <show_beam_parameters+0x200>)
  401578:	47d0      	blx	sl
  40157a:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < 7; i++)
  40157c:	455c      	cmp	r4, fp
  40157e:	d1f8      	bne.n	401572 <show_beam_parameters+0x126>
				
	}
	
	for (uint16_t i = 0; i < peak_width1; i++)
  401580:	f1b9 0f00 	cmp.w	r9, #0
  401584:	d015      	beq.n	4015b2 <show_beam_parameters+0x166>
  401586:	4634      	mov	r4, r6
  401588:	f109 39ff 	add.w	r9, r9, #4294967295
  40158c:	fa1f f989 	uxth.w	r9, r9
  401590:	f109 0901 	add.w	r9, r9, #1
  401594:	eb06 0649 	add.w	r6, r6, r9, lsl #1
	{
		usart_serial_write_packet(CONF_UART, peak_one_plot_data + i,2);
  401598:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 40164c <show_beam_parameters+0x200>
  40159c:	f04f 0a02 	mov.w	sl, #2
  4015a0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 401650 <show_beam_parameters+0x204>
  4015a4:	4652      	mov	r2, sl
  4015a6:	4621      	mov	r1, r4
  4015a8:	4658      	mov	r0, fp
  4015aa:	47c8      	blx	r9
  4015ac:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < peak_width1; i++)
  4015ae:	42b4      	cmp	r4, r6
  4015b0:	d1f8      	bne.n	4015a4 <show_beam_parameters+0x158>
	}
	
	for (uint16_t i = 0; i < peak_width2; i++)
  4015b2:	f1b8 0f00 	cmp.w	r8, #0
  4015b6:	d014      	beq.n	4015e2 <show_beam_parameters+0x196>
  4015b8:	462c      	mov	r4, r5
  4015ba:	f108 38ff 	add.w	r8, r8, #4294967295
  4015be:	fa1f f888 	uxth.w	r8, r8
  4015c2:	f108 0801 	add.w	r8, r8, #1
  4015c6:	eb05 0548 	add.w	r5, r5, r8, lsl #1
	{
		usart_serial_write_packet(CONF_UART, peak_two_plot_data + i,2);
  4015ca:	f8df 9080 	ldr.w	r9, [pc, #128]	; 40164c <show_beam_parameters+0x200>
  4015ce:	f04f 0802 	mov.w	r8, #2
  4015d2:	4e1f      	ldr	r6, [pc, #124]	; (401650 <show_beam_parameters+0x204>)
  4015d4:	4642      	mov	r2, r8
  4015d6:	4621      	mov	r1, r4
  4015d8:	4648      	mov	r0, r9
  4015da:	47b0      	blx	r6
  4015dc:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < peak_width2; i++)
  4015de:	42a5      	cmp	r5, r4
  4015e0:	d1f8      	bne.n	4015d4 <show_beam_parameters+0x188>
  4015e2:	f107 0408 	add.w	r4, r7, #8
  4015e6:	f107 0910 	add.w	r9, r7, #16
	}
	
	for (uint16_t i = 0; i < 4; i++)
	{
		usart_serial_write_packet(CONF_UART, beam_parameters + i,2);
  4015ea:	f8df 8060 	ldr.w	r8, [pc, #96]	; 40164c <show_beam_parameters+0x200>
  4015ee:	2602      	movs	r6, #2
  4015f0:	4d17      	ldr	r5, [pc, #92]	; (401650 <show_beam_parameters+0x204>)
  4015f2:	4632      	mov	r2, r6
  4015f4:	4621      	mov	r1, r4
  4015f6:	4640      	mov	r0, r8
  4015f8:	47a8      	blx	r5
  4015fa:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < 4; i++)
  4015fc:	45a1      	cmp	r9, r4
  4015fe:	d1f8      	bne.n	4015f2 <show_beam_parameters+0x1a6>
	}
	
	for (uint16_t i = 0; i < 2; i++)
	{
		usart_serial_write_packet(CONF_UART, skewness + i,8);
  401600:	4e14      	ldr	r6, [pc, #80]	; (401654 <show_beam_parameters+0x208>)
  401602:	4d12      	ldr	r5, [pc, #72]	; (40164c <show_beam_parameters+0x200>)
  401604:	2208      	movs	r2, #8
  401606:	4631      	mov	r1, r6
  401608:	4628      	mov	r0, r5
  40160a:	4c11      	ldr	r4, [pc, #68]	; (401650 <show_beam_parameters+0x204>)
  40160c:	47a0      	blx	r4
  40160e:	2208      	movs	r2, #8
  401610:	18b1      	adds	r1, r6, r2
  401612:	4628      	mov	r0, r5
  401614:	47a0      	blx	r4
	}
	
	uint16_t delimiter = 6666;
  401616:	f107 0120 	add.w	r1, r7, #32
  40161a:	f641 230a 	movw	r3, #6666	; 0x1a0a
  40161e:	f821 3d1a 	strh.w	r3, [r1, #-26]!
	usart_serial_write_packet(CONF_UART, &delimiter,2);
  401622:	2202      	movs	r2, #2
  401624:	4628      	mov	r0, r5
  401626:	47a0      	blx	r4
	
	printf("Y skewness : ");
	print_float(skewness[1]);
	
	*/
}
  401628:	3724      	adds	r7, #36	; 0x24
  40162a:	46bd      	mov	sp, r7
  40162c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401630:	00400fc5 	.word	0x00400fc5
  401634:	20008cc4 	.word	0x20008cc4
  401638:	004010c5 	.word	0x004010c5
  40163c:	00401151 	.word	0x00401151
  401640:	00401329 	.word	0x00401329
  401644:	20008cb8 	.word	0x20008cb8
  401648:	20008cc0 	.word	0x20008cc0
  40164c:	400e0600 	.word	0x400e0600
  401650:	004001cd 	.word	0x004001cd
  401654:	20008cd0 	.word	0x20008cd0

00401658 <ACC_Handler>:
{
  401658:	b508      	push	{r3, lr}
	ul_status = acc_get_interrupt_status(ACC);
  40165a:	4811      	ldr	r0, [pc, #68]	; (4016a0 <ACC_Handler+0x48>)
  40165c:	4b11      	ldr	r3, [pc, #68]	; (4016a4 <ACC_Handler+0x4c>)
  40165e:	4798      	blx	r3
	if ((ul_status & ACC_ISR_CE) == ACC_ISR_CE) {
  401660:	f010 0f01 	tst.w	r0, #1
  401664:	d100      	bne.n	401668 <ACC_Handler+0x10>
  401666:	bd08      	pop	{r3, pc}
		if (acc_get_comparison_result(ACC)) {
  401668:	480d      	ldr	r0, [pc, #52]	; (4016a0 <ACC_Handler+0x48>)
  40166a:	4b0f      	ldr	r3, [pc, #60]	; (4016a8 <ACC_Handler+0x50>)
  40166c:	4798      	blx	r3
  40166e:	b170      	cbz	r0, 40168e <ACC_Handler+0x36>
			if(!triggered){
  401670:	4b0e      	ldr	r3, [pc, #56]	; (4016ac <ACC_Handler+0x54>)
  401672:	781b      	ldrb	r3, [r3, #0]
  401674:	2b00      	cmp	r3, #0
  401676:	d1f6      	bne.n	401666 <ACC_Handler+0xe>
				cycleEnded();
  401678:	4b0d      	ldr	r3, [pc, #52]	; (4016b0 <ACC_Handler+0x58>)
  40167a:	4798      	blx	r3
				fullBuffer=true;
  40167c:	2101      	movs	r1, #1
  40167e:	4b0d      	ldr	r3, [pc, #52]	; (4016b4 <ACC_Handler+0x5c>)
  401680:	7019      	strb	r1, [r3, #0]
				triggered= true;
  401682:	4b0a      	ldr	r3, [pc, #40]	; (4016ac <ACC_Handler+0x54>)
  401684:	7019      	strb	r1, [r3, #0]
				tc_start(TC0,1);
  401686:	480c      	ldr	r0, [pc, #48]	; (4016b8 <ACC_Handler+0x60>)
  401688:	4b0c      	ldr	r3, [pc, #48]	; (4016bc <ACC_Handler+0x64>)
  40168a:	4798      	blx	r3
  40168c:	bd08      	pop	{r3, pc}
			if(triggered)
  40168e:	4b07      	ldr	r3, [pc, #28]	; (4016ac <ACC_Handler+0x54>)
  401690:	781b      	ldrb	r3, [r3, #0]
  401692:	2b00      	cmp	r3, #0
  401694:	d0e7      	beq.n	401666 <ACC_Handler+0xe>
				triggered=false;
  401696:	2200      	movs	r2, #0
  401698:	4b04      	ldr	r3, [pc, #16]	; (4016ac <ACC_Handler+0x54>)
  40169a:	701a      	strb	r2, [r3, #0]
}
  40169c:	e7e3      	b.n	401666 <ACC_Handler+0xe>
  40169e:	bf00      	nop
  4016a0:	400bc000 	.word	0x400bc000
  4016a4:	00400475 	.word	0x00400475
  4016a8:	0040045b 	.word	0x0040045b
  4016ac:	20008ce0 	.word	0x20008ce0
  4016b0:	00400dc1 	.word	0x00400dc1
  4016b4:	20008cbc 	.word	0x20008cbc
  4016b8:	40090000 	.word	0x40090000
  4016bc:	0040095f 	.word	0x0040095f

004016c0 <TC1_Handler>:
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	NVIC_EnableIRQ((IRQn_Type) ID_TC1);
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
}
void TC1_Handler(void){
  4016c0:	b510      	push	{r4, lr}
	tc_stop(TC0,1);
  4016c2:	4c06      	ldr	r4, [pc, #24]	; (4016dc <TC1_Handler+0x1c>)
  4016c4:	2101      	movs	r1, #1
  4016c6:	4620      	mov	r0, r4
  4016c8:	4b05      	ldr	r3, [pc, #20]	; (4016e0 <TC1_Handler+0x20>)
  4016ca:	4798      	blx	r3
	printf("delay finished");
  4016cc:	4805      	ldr	r0, [pc, #20]	; (4016e4 <TC1_Handler+0x24>)
  4016ce:	4b06      	ldr	r3, [pc, #24]	; (4016e8 <TC1_Handler+0x28>)
  4016d0:	4798      	blx	r3
	tc_start(TC0,0);
  4016d2:	2100      	movs	r1, #0
  4016d4:	4620      	mov	r0, r4
  4016d6:	4b05      	ldr	r3, [pc, #20]	; (4016ec <TC1_Handler+0x2c>)
  4016d8:	4798      	blx	r3
  4016da:	bd10      	pop	{r4, pc}
  4016dc:	40090000 	.word	0x40090000
  4016e0:	00400967 	.word	0x00400967
  4016e4:	00406518 	.word	0x00406518
  4016e8:	004038cd 	.word	0x004038cd
  4016ec:	0040095f 	.word	0x0040095f

004016f0 <main>:
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
	dacc_write_conversion_data(DACC, 3100);
}

int main (void)
{
  4016f0:	b580      	push	{r7, lr}
  4016f2:	b08c      	sub	sp, #48	; 0x30
	sysclk_init();
  4016f4:	4b6d      	ldr	r3, [pc, #436]	; (4018ac <main+0x1bc>)
  4016f6:	4798      	blx	r3
	board_init();
  4016f8:	4b6d      	ldr	r3, [pc, #436]	; (4018b0 <main+0x1c0>)
  4016fa:	4798      	blx	r3
  4016fc:	2007      	movs	r0, #7
  4016fe:	f8df 822c 	ldr.w	r8, [pc, #556]	; 40192c <main+0x23c>
  401702:	47c0      	blx	r8
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401704:	4c6b      	ldr	r4, [pc, #428]	; (4018b4 <main+0x1c4>)
  401706:	4b6c      	ldr	r3, [pc, #432]	; (4018b8 <main+0x1c8>)
  401708:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40170a:	4a6c      	ldr	r2, [pc, #432]	; (4018bc <main+0x1cc>)
  40170c:	4b6c      	ldr	r3, [pc, #432]	; (4018c0 <main+0x1d0>)
  40170e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401710:	4a6c      	ldr	r2, [pc, #432]	; (4018c4 <main+0x1d4>)
  401712:	4b6d      	ldr	r3, [pc, #436]	; (4018c8 <main+0x1d8>)
  401714:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401716:	4d6d      	ldr	r5, [pc, #436]	; (4018cc <main+0x1dc>)
  401718:	9505      	str	r5, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
  40171a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40171e:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
  401720:	f44f 6900 	mov.w	r9, #2048	; 0x800
  401724:	f8cd 901c 	str.w	r9, [sp, #28]
  401728:	2007      	movs	r0, #7
  40172a:	47c0      	blx	r8
		uart_init((Uart*)p_usart, &uart_settings);
  40172c:	a905      	add	r1, sp, #20
  40172e:	4620      	mov	r0, r4
  401730:	4b67      	ldr	r3, [pc, #412]	; (4018d0 <main+0x1e0>)
  401732:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401734:	4e67      	ldr	r6, [pc, #412]	; (4018d4 <main+0x1e4>)
  401736:	6833      	ldr	r3, [r6, #0]
  401738:	2100      	movs	r1, #0
  40173a:	6898      	ldr	r0, [r3, #8]
  40173c:	4c66      	ldr	r4, [pc, #408]	; (4018d8 <main+0x1e8>)
  40173e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401740:	6833      	ldr	r3, [r6, #0]
  401742:	2100      	movs	r1, #0
  401744:	6858      	ldr	r0, [r3, #4]
  401746:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_DACC);
  401748:	2020      	movs	r0, #32
  40174a:	47c0      	blx	r8
	dacc_reset(DACC);
  40174c:	4c63      	ldr	r4, [pc, #396]	; (4018dc <main+0x1ec>)
  40174e:	4620      	mov	r0, r4
  401750:	4b63      	ldr	r3, [pc, #396]	; (4018e0 <main+0x1f0>)
  401752:	4798      	blx	r3
	dacc_disable_trigger(DACC);
  401754:	4620      	mov	r0, r4
  401756:	4b63      	ldr	r3, [pc, #396]	; (4018e4 <main+0x1f4>)
  401758:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
  40175a:	2100      	movs	r1, #0
  40175c:	4620      	mov	r0, r4
  40175e:	4b62      	ldr	r3, [pc, #392]	; (4018e8 <main+0x1f8>)
  401760:	4798      	blx	r3
	dacc_set_timing(DACC, 0, 0xf);
  401762:	220f      	movs	r2, #15
  401764:	2100      	movs	r1, #0
  401766:	4620      	mov	r0, r4
  401768:	4b60      	ldr	r3, [pc, #384]	; (4018ec <main+0x1fc>)
  40176a:	4798      	blx	r3
	dacc_set_channel_selection(DACC, DACC_CHANNEL_0);
  40176c:	2100      	movs	r1, #0
  40176e:	4620      	mov	r0, r4
  401770:	4b5f      	ldr	r3, [pc, #380]	; (4018f0 <main+0x200>)
  401772:	4798      	blx	r3
	dacc_enable_channel(DACC, DACC_CHANNEL_0);
  401774:	2100      	movs	r1, #0
  401776:	4620      	mov	r0, r4
  401778:	4b5e      	ldr	r3, [pc, #376]	; (4018f4 <main+0x204>)
  40177a:	4798      	blx	r3
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  40177c:	f44f 7185 	mov.w	r1, #266	; 0x10a
  401780:	4620      	mov	r0, r4
  401782:	4b5d      	ldr	r3, [pc, #372]	; (4018f8 <main+0x208>)
  401784:	4798      	blx	r3
	dacc_write_conversion_data(DACC, 3100);
  401786:	f640 411c 	movw	r1, #3100	; 0xc1c
  40178a:	4620      	mov	r0, r4
  40178c:	4b5b      	ldr	r3, [pc, #364]	; (4018fc <main+0x20c>)
  40178e:	4798      	blx	r3
	configure_console();
	configureDACC();
	g_afec0_sample_data = 0;
  401790:	2700      	movs	r7, #0
  401792:	4b5b      	ldr	r3, [pc, #364]	; (401900 <main+0x210>)
  401794:	801f      	strh	r7, [r3, #0]
	afec_enable(AFEC0);
  401796:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
  40179a:	4620      	mov	r0, r4
  40179c:	4b59      	ldr	r3, [pc, #356]	; (401904 <main+0x214>)
  40179e:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  4017a0:	a805      	add	r0, sp, #20
  4017a2:	4b59      	ldr	r3, [pc, #356]	; (401908 <main+0x218>)
  4017a4:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4017a6:	a802      	add	r0, sp, #8
  4017a8:	4b58      	ldr	r3, [pc, #352]	; (40190c <main+0x21c>)
  4017aa:	4798      	blx	r3
		afec_init(AFEC0, &afec_cfg);
  4017ac:	a905      	add	r1, sp, #20
  4017ae:	4620      	mov	r0, r4
  4017b0:	f8df a19c 	ldr.w	sl, [pc, #412]	; 401950 <main+0x260>
  4017b4:	47d0      	blx	sl
		afec_init(AFEC1, &afec_cfg);
  4017b6:	4e56      	ldr	r6, [pc, #344]	; (401910 <main+0x220>)
  4017b8:	a905      	add	r1, sp, #20
  4017ba:	4630      	mov	r0, r6
  4017bc:	47d0      	blx	sl
		afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  4017be:	aa02      	add	r2, sp, #8
  4017c0:	2106      	movs	r1, #6
  4017c2:	4620      	mov	r0, r4
  4017c4:	f8df a18c 	ldr.w	sl, [pc, #396]	; 401954 <main+0x264>
  4017c8:	47d0      	blx	sl
		afec_ch_set_config(AFEC1, AFEC_CHANNEL_0, &afec_ch_cfg);
  4017ca:	aa02      	add	r2, sp, #8
  4017cc:	4639      	mov	r1, r7
  4017ce:	4630      	mov	r0, r6
  4017d0:	47d0      	blx	sl
	afec->AFEC_CSELR = afec_ch;
  4017d2:	6677      	str	r7, [r6, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4017d4:	f8c6 906c 	str.w	r9, [r6, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  4017d8:	2306      	movs	r3, #6
  4017da:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4017dc:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	reg = afec->AFEC_MR;
  4017e0:	6873      	ldr	r3, [r6, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4017e2:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  4017e6:	6073      	str	r3, [r6, #4]
    uint32_t ul_div = 0;
  4017e8:	9703      	str	r7, [sp, #12]
	uint32_t ul_tc_clks = 0;
  4017ea:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  4017ee:	f849 7d20 	str.w	r7, [r9, #-32]!
	pmc_enable_periph_clk(ID_TC0);														// Enable peripheral clock of timer counter 0
  4017f2:	2015      	movs	r0, #21
  4017f4:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_TC1);
  4017f6:	2016      	movs	r0, #22
  4017f8:	47c0      	blx	r8
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  4017fa:	9500      	str	r5, [sp, #0]
  4017fc:	464b      	mov	r3, r9
  4017fe:	aa03      	add	r2, sp, #12
  401800:	4629      	mov	r1, r5
  401802:	4844      	ldr	r0, [pc, #272]	; (401914 <main+0x224>)
  401804:	f8df 8150 	ldr.w	r8, [pc, #336]	; 401958 <main+0x268>
  401808:	47c0      	blx	r8
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  40180a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 40195c <main+0x26c>
  40180e:	9a04      	ldr	r2, [sp, #16]
  401810:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  401814:	4639      	mov	r1, r7
  401816:	4640      	mov	r0, r8
  401818:	4b3f      	ldr	r3, [pc, #252]	; (401918 <main+0x228>)
  40181a:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  40181c:	9b03      	ldr	r3, [sp, #12]
  40181e:	fbb5 f3f3 	udiv	r3, r5, r3
  401822:	4a3e      	ldr	r2, [pc, #248]	; (40191c <main+0x22c>)
  401824:	fba2 2303 	umull	r2, r3, r2, r3
  401828:	0c5a      	lsrs	r2, r3, #17
  40182a:	f8c8 2014 	str.w	r2, [r8, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  40182e:	0c1b      	lsrs	r3, r3, #16
  401830:	f8c8 301c 	str.w	r3, [r8, #28]
	reg = afec->AFEC_MR;
  401834:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  401836:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  40183a:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  40183e:	6063      	str	r3, [r4, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401840:	2301      	movs	r3, #1
  401842:	6173      	str	r3, [r6, #20]
  401844:	2240      	movs	r2, #64	; 0x40
  401846:	6162      	str	r2, [r4, #20]
		afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  401848:	4a35      	ldr	r2, [pc, #212]	; (401920 <main+0x230>)
  40184a:	2110      	movs	r1, #16
  40184c:	4620      	mov	r0, r4
  40184e:	4d35      	ldr	r5, [pc, #212]	; (401924 <main+0x234>)
  401850:	47a8      	blx	r5
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  401852:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  401854:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  401856:	6863      	ldr	r3, [r4, #4]
  401858:	f013 0f80 	tst.w	r3, #128	; 0x80
  40185c:	d101      	bne.n	401862 <main+0x172>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  40185e:	2208      	movs	r2, #8
  401860:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  401862:	4b31      	ldr	r3, [pc, #196]	; (401928 <main+0x238>)
  401864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  401866:	2a00      	cmp	r2, #0
  401868:	dafc      	bge.n	401864 <main+0x174>
	g_max_digital = MAX_DIGITAL_12_BIT;
	set_afec_test();
	
	pmc_enable_periph_clk(ID_ACC);
  40186a:	2021      	movs	r0, #33	; 0x21
  40186c:	4b2f      	ldr	r3, [pc, #188]	; (40192c <main+0x23c>)
  40186e:	4798      	blx	r3
	acc_init(ACC, ACC_MR_SELPLUS_AD7, ACC_MR_SELMINUS_DAC1,
  401870:	4c2f      	ldr	r4, [pc, #188]	; (401930 <main+0x240>)
  401872:	2300      	movs	r3, #0
  401874:	9300      	str	r3, [sp, #0]
  401876:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40187a:	2203      	movs	r2, #3
  40187c:	2170      	movs	r1, #112	; 0x70
  40187e:	4620      	mov	r0, r4
  401880:	4d2c      	ldr	r5, [pc, #176]	; (401934 <main+0x244>)
  401882:	47a8      	blx	r5
  401884:	2202      	movs	r2, #2
  401886:	4b2c      	ldr	r3, [pc, #176]	; (401938 <main+0x248>)
  401888:	605a      	str	r2, [r3, #4]
	ACC_MR_EDGETYP_ANY, ACC_MR_INV_DIS);
	NVIC_EnableIRQ(ACC_IRQn);
	acc_enable_interrupt(ACC);	
  40188a:	4620      	mov	r0, r4
  40188c:	4b2b      	ldr	r3, [pc, #172]	; (40193c <main+0x24c>)
  40188e:	4798      	blx	r3
	while (1) {
		if(getbuffersFilled()==100){
  401890:	4d2b      	ldr	r5, [pc, #172]	; (401940 <main+0x250>)
			//break;
		}
		if(fullBuffer){
  401892:	4c2c      	ldr	r4, [pc, #176]	; (401944 <main+0x254>)
			fullBuffer=false;
			show_beam_parameters(getFilledBuffer());
  401894:	4e2c      	ldr	r6, [pc, #176]	; (401948 <main+0x258>)
		if(getbuffersFilled()==100){
  401896:	47a8      	blx	r5
		if(fullBuffer){
  401898:	7823      	ldrb	r3, [r4, #0]
  40189a:	2b00      	cmp	r3, #0
  40189c:	d0fb      	beq.n	401896 <main+0x1a6>
			fullBuffer=false;
  40189e:	2300      	movs	r3, #0
  4018a0:	7023      	strb	r3, [r4, #0]
			show_beam_parameters(getFilledBuffer());
  4018a2:	47b0      	blx	r6
  4018a4:	4b29      	ldr	r3, [pc, #164]	; (40194c <main+0x25c>)
  4018a6:	4798      	blx	r3
  4018a8:	e7f5      	b.n	401896 <main+0x1a6>
  4018aa:	bf00      	nop
  4018ac:	00400165 	.word	0x00400165
  4018b0:	00400389 	.word	0x00400389
  4018b4:	400e0600 	.word	0x400e0600
  4018b8:	20008d28 	.word	0x20008d28
  4018bc:	00400ead 	.word	0x00400ead
  4018c0:	20008d24 	.word	0x20008d24
  4018c4:	00400e25 	.word	0x00400e25
  4018c8:	20008d20 	.word	0x20008d20
  4018cc:	05b8d800 	.word	0x05b8d800
  4018d0:	004009df 	.word	0x004009df
  4018d4:	2000000c 	.word	0x2000000c
  4018d8:	00403991 	.word	0x00403991
  4018dc:	400b8000 	.word	0x400b8000
  4018e0:	00400771 	.word	0x00400771
  4018e4:	00400777 	.word	0x00400777
  4018e8:	00400781 	.word	0x00400781
  4018ec:	004007c5 	.word	0x004007c5
  4018f0:	004007ad 	.word	0x004007ad
  4018f4:	004007ed 	.word	0x004007ed
  4018f8:	00400801 	.word	0x00400801
  4018fc:	004007a9 	.word	0x004007a9
  401900:	20008de4 	.word	0x20008de4
  401904:	0040070d 	.word	0x0040070d
  401908:	00400545 	.word	0x00400545
  40190c:	00400575 	.word	0x00400575
  401910:	400b4000 	.word	0x400b4000
  401914:	0003d090 	.word	0x0003d090
  401918:	00400945 	.word	0x00400945
  40191c:	431bde83 	.word	0x431bde83
  401920:	00400f2d 	.word	0x00400f2d
  401924:	0040068d 	.word	0x0040068d
  401928:	400b0000 	.word	0x400b0000
  40192c:	004008f1 	.word	0x004008f1
  401930:	400bc000 	.word	0x400bc000
  401934:	00400421 	.word	0x00400421
  401938:	e000e100 	.word	0xe000e100
  40193c:	0040046f 	.word	0x0040046f
  401940:	00400df9 	.word	0x00400df9
  401944:	20008cbc 	.word	0x20008cbc
  401948:	00400e05 	.word	0x00400e05
  40194c:	0040144d 	.word	0x0040144d
  401950:	00400581 	.word	0x00400581
  401954:	00400515 	.word	0x00400515
  401958:	0040096f 	.word	0x0040096f
  40195c:	40090000 	.word	0x40090000

00401960 <pow>:
  401960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401964:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 401c58 <pow+0x2f8>
  401968:	b08d      	sub	sp, #52	; 0x34
  40196a:	4606      	mov	r6, r0
  40196c:	460f      	mov	r7, r1
  40196e:	4614      	mov	r4, r2
  401970:	461d      	mov	r5, r3
  401972:	f000 f9d1 	bl	401d18 <__ieee754_pow>
  401976:	f999 8000 	ldrsb.w	r8, [r9]
  40197a:	f1b8 3fff 	cmp.w	r8, #4294967295
  40197e:	e9cd 0100 	strd	r0, r1, [sp]
  401982:	d036      	beq.n	4019f2 <pow+0x92>
  401984:	4622      	mov	r2, r4
  401986:	462b      	mov	r3, r5
  401988:	4620      	mov	r0, r4
  40198a:	4629      	mov	r1, r5
  40198c:	f001 fd3c 	bl	403408 <__aeabi_dcmpun>
  401990:	4683      	mov	fp, r0
  401992:	bb70      	cbnz	r0, 4019f2 <pow+0x92>
  401994:	4632      	mov	r2, r6
  401996:	463b      	mov	r3, r7
  401998:	4630      	mov	r0, r6
  40199a:	4639      	mov	r1, r7
  40199c:	f001 fd34 	bl	403408 <__aeabi_dcmpun>
  4019a0:	2200      	movs	r2, #0
  4019a2:	4682      	mov	sl, r0
  4019a4:	2300      	movs	r3, #0
  4019a6:	2800      	cmp	r0, #0
  4019a8:	f040 80a0 	bne.w	401aec <pow+0x18c>
  4019ac:	4630      	mov	r0, r6
  4019ae:	4639      	mov	r1, r7
  4019b0:	f001 fcf8 	bl	4033a4 <__aeabi_dcmpeq>
  4019b4:	b310      	cbz	r0, 4019fc <pow+0x9c>
  4019b6:	2200      	movs	r2, #0
  4019b8:	2300      	movs	r3, #0
  4019ba:	4620      	mov	r0, r4
  4019bc:	4629      	mov	r1, r5
  4019be:	f001 fcf1 	bl	4033a4 <__aeabi_dcmpeq>
  4019c2:	4683      	mov	fp, r0
  4019c4:	2800      	cmp	r0, #0
  4019c6:	d06a      	beq.n	401a9e <pow+0x13e>
  4019c8:	2201      	movs	r2, #1
  4019ca:	4b9c      	ldr	r3, [pc, #624]	; (401c3c <pow+0x2dc>)
  4019cc:	9202      	str	r2, [sp, #8]
  4019ce:	2100      	movs	r1, #0
  4019d0:	2200      	movs	r2, #0
  4019d2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4019d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  4019da:	e9cd 4506 	strd	r4, r5, [sp, #24]
  4019de:	e9cd 1208 	strd	r1, r2, [sp, #32]
  4019e2:	9303      	str	r3, [sp, #12]
  4019e4:	f1b8 0f00 	cmp.w	r8, #0
  4019e8:	d045      	beq.n	401a76 <pow+0x116>
  4019ea:	4c95      	ldr	r4, [pc, #596]	; (401c40 <pow+0x2e0>)
  4019ec:	2300      	movs	r3, #0
  4019ee:	e9cd 3400 	strd	r3, r4, [sp]
  4019f2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4019f6:	b00d      	add	sp, #52	; 0x34
  4019f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019fc:	e9dd 0100 	ldrd	r0, r1, [sp]
  401a00:	f000 ff90 	bl	402924 <finite>
  401a04:	4680      	mov	r8, r0
  401a06:	2800      	cmp	r0, #0
  401a08:	f000 808b 	beq.w	401b22 <pow+0x1c2>
  401a0c:	f04f 0a00 	mov.w	sl, #0
  401a10:	f04f 0b00 	mov.w	fp, #0
  401a14:	4652      	mov	r2, sl
  401a16:	465b      	mov	r3, fp
  401a18:	e9dd 0100 	ldrd	r0, r1, [sp]
  401a1c:	f001 fcc2 	bl	4033a4 <__aeabi_dcmpeq>
  401a20:	2800      	cmp	r0, #0
  401a22:	d0e6      	beq.n	4019f2 <pow+0x92>
  401a24:	4630      	mov	r0, r6
  401a26:	4639      	mov	r1, r7
  401a28:	f000 ff7c 	bl	402924 <finite>
  401a2c:	2800      	cmp	r0, #0
  401a2e:	d0e0      	beq.n	4019f2 <pow+0x92>
  401a30:	4620      	mov	r0, r4
  401a32:	4629      	mov	r1, r5
  401a34:	f000 ff76 	bl	402924 <finite>
  401a38:	2800      	cmp	r0, #0
  401a3a:	d0da      	beq.n	4019f2 <pow+0x92>
  401a3c:	f999 3000 	ldrsb.w	r3, [r9]
  401a40:	4a7e      	ldr	r2, [pc, #504]	; (401c3c <pow+0x2dc>)
  401a42:	9203      	str	r2, [sp, #12]
  401a44:	2104      	movs	r1, #4
  401a46:	2200      	movs	r2, #0
  401a48:	2b02      	cmp	r3, #2
  401a4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401a4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401a52:	e9cd ab08 	strd	sl, fp, [sp, #32]
  401a56:	9102      	str	r1, [sp, #8]
  401a58:	920a      	str	r2, [sp, #40]	; 0x28
  401a5a:	d003      	beq.n	401a64 <pow+0x104>
  401a5c:	a802      	add	r0, sp, #8
  401a5e:	f000 ff67 	bl	402930 <matherr>
  401a62:	b968      	cbnz	r0, 401a80 <pow+0x120>
  401a64:	f001 ff04 	bl	403870 <__errno>
  401a68:	2322      	movs	r3, #34	; 0x22
  401a6a:	6003      	str	r3, [r0, #0]
  401a6c:	e008      	b.n	401a80 <pow+0x120>
  401a6e:	2300      	movs	r3, #0
  401a70:	2400      	movs	r4, #0
  401a72:	e9cd 3408 	strd	r3, r4, [sp, #32]
  401a76:	a802      	add	r0, sp, #8
  401a78:	f000 ff5a 	bl	402930 <matherr>
  401a7c:	2800      	cmp	r0, #0
  401a7e:	d030      	beq.n	401ae2 <pow+0x182>
  401a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401a82:	b11b      	cbz	r3, 401a8c <pow+0x12c>
  401a84:	f001 fef4 	bl	403870 <__errno>
  401a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401a8a:	6003      	str	r3, [r0, #0]
  401a8c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
  401a90:	e9cd 3400 	strd	r3, r4, [sp]
  401a94:	e9dd 0100 	ldrd	r0, r1, [sp]
  401a98:	b00d      	add	sp, #52	; 0x34
  401a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a9e:	4620      	mov	r0, r4
  401aa0:	4629      	mov	r1, r5
  401aa2:	f000 ff3f 	bl	402924 <finite>
  401aa6:	2800      	cmp	r0, #0
  401aa8:	d0a3      	beq.n	4019f2 <pow+0x92>
  401aaa:	2200      	movs	r2, #0
  401aac:	2300      	movs	r3, #0
  401aae:	4620      	mov	r0, r4
  401ab0:	4629      	mov	r1, r5
  401ab2:	f001 fc81 	bl	4033b8 <__aeabi_dcmplt>
  401ab6:	2800      	cmp	r0, #0
  401ab8:	d09b      	beq.n	4019f2 <pow+0x92>
  401aba:	f999 3000 	ldrsb.w	r3, [r9]
  401abe:	4a5f      	ldr	r2, [pc, #380]	; (401c3c <pow+0x2dc>)
  401ac0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401ac4:	2101      	movs	r1, #1
  401ac6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401aca:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401ace:	9102      	str	r1, [sp, #8]
  401ad0:	9203      	str	r2, [sp, #12]
  401ad2:	2b00      	cmp	r3, #0
  401ad4:	d0cb      	beq.n	401a6e <pow+0x10e>
  401ad6:	495b      	ldr	r1, [pc, #364]	; (401c44 <pow+0x2e4>)
  401ad8:	2000      	movs	r0, #0
  401ada:	2b02      	cmp	r3, #2
  401adc:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401ae0:	d1c9      	bne.n	401a76 <pow+0x116>
  401ae2:	f001 fec5 	bl	403870 <__errno>
  401ae6:	2321      	movs	r3, #33	; 0x21
  401ae8:	6003      	str	r3, [r0, #0]
  401aea:	e7c9      	b.n	401a80 <pow+0x120>
  401aec:	4620      	mov	r0, r4
  401aee:	4629      	mov	r1, r5
  401af0:	f001 fc58 	bl	4033a4 <__aeabi_dcmpeq>
  401af4:	2800      	cmp	r0, #0
  401af6:	f43f af7c 	beq.w	4019f2 <pow+0x92>
  401afa:	4b51      	ldr	r3, [pc, #324]	; (401c40 <pow+0x2e0>)
  401afc:	494f      	ldr	r1, [pc, #316]	; (401c3c <pow+0x2dc>)
  401afe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401b02:	2001      	movs	r0, #1
  401b04:	2200      	movs	r2, #0
  401b06:	f1b8 0f02 	cmp.w	r8, #2
  401b0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401b0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401b12:	9002      	str	r0, [sp, #8]
  401b14:	9103      	str	r1, [sp, #12]
  401b16:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401b1a:	d1ac      	bne.n	401a76 <pow+0x116>
  401b1c:	e9cd 2300 	strd	r2, r3, [sp]
  401b20:	e767      	b.n	4019f2 <pow+0x92>
  401b22:	4630      	mov	r0, r6
  401b24:	4639      	mov	r1, r7
  401b26:	f000 fefd 	bl	402924 <finite>
  401b2a:	2800      	cmp	r0, #0
  401b2c:	f43f af6e 	beq.w	401a0c <pow+0xac>
  401b30:	4620      	mov	r0, r4
  401b32:	4629      	mov	r1, r5
  401b34:	f000 fef6 	bl	402924 <finite>
  401b38:	2800      	cmp	r0, #0
  401b3a:	f43f af67 	beq.w	401a0c <pow+0xac>
  401b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
  401b42:	4610      	mov	r0, r2
  401b44:	4619      	mov	r1, r3
  401b46:	f001 fc5f 	bl	403408 <__aeabi_dcmpun>
  401b4a:	2800      	cmp	r0, #0
  401b4c:	d158      	bne.n	401c00 <pow+0x2a0>
  401b4e:	2303      	movs	r3, #3
  401b50:	f999 8000 	ldrsb.w	r8, [r9]
  401b54:	9302      	str	r3, [sp, #8]
  401b56:	4b39      	ldr	r3, [pc, #228]	; (401c3c <pow+0x2dc>)
  401b58:	900a      	str	r0, [sp, #40]	; 0x28
  401b5a:	9303      	str	r3, [sp, #12]
  401b5c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401b60:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401b64:	2200      	movs	r2, #0
  401b66:	2300      	movs	r3, #0
  401b68:	4630      	mov	r0, r6
  401b6a:	4639      	mov	r1, r7
  401b6c:	f1b8 0f00 	cmp.w	r8, #0
  401b70:	d126      	bne.n	401bc0 <pow+0x260>
  401b72:	4f35      	ldr	r7, [pc, #212]	; (401c48 <pow+0x2e8>)
  401b74:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
  401b78:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401b7c:	f001 fc1c 	bl	4033b8 <__aeabi_dcmplt>
  401b80:	2800      	cmp	r0, #0
  401b82:	f43f af6b 	beq.w	401a5c <pow+0xfc>
  401b86:	2200      	movs	r2, #0
  401b88:	4b30      	ldr	r3, [pc, #192]	; (401c4c <pow+0x2ec>)
  401b8a:	4620      	mov	r0, r4
  401b8c:	4629      	mov	r1, r5
  401b8e:	f001 f9a1 	bl	402ed4 <__aeabi_dmul>
  401b92:	4604      	mov	r4, r0
  401b94:	460d      	mov	r5, r1
  401b96:	f000 fed3 	bl	402940 <rint>
  401b9a:	4602      	mov	r2, r0
  401b9c:	460b      	mov	r3, r1
  401b9e:	4620      	mov	r0, r4
  401ba0:	4629      	mov	r1, r5
  401ba2:	f001 fbff 	bl	4033a4 <__aeabi_dcmpeq>
  401ba6:	bb40      	cbnz	r0, 401bfa <pow+0x29a>
  401ba8:	4b29      	ldr	r3, [pc, #164]	; (401c50 <pow+0x2f0>)
  401baa:	f999 8000 	ldrsb.w	r8, [r9]
  401bae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  401bb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401bb6:	f1b8 0f02 	cmp.w	r8, #2
  401bba:	f47f af4f 	bne.w	401a5c <pow+0xfc>
  401bbe:	e751      	b.n	401a64 <pow+0x104>
  401bc0:	4f24      	ldr	r7, [pc, #144]	; (401c54 <pow+0x2f4>)
  401bc2:	2600      	movs	r6, #0
  401bc4:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401bc8:	f001 fbf6 	bl	4033b8 <__aeabi_dcmplt>
  401bcc:	2800      	cmp	r0, #0
  401bce:	d0f2      	beq.n	401bb6 <pow+0x256>
  401bd0:	2200      	movs	r2, #0
  401bd2:	4b1e      	ldr	r3, [pc, #120]	; (401c4c <pow+0x2ec>)
  401bd4:	4620      	mov	r0, r4
  401bd6:	4629      	mov	r1, r5
  401bd8:	f001 f97c 	bl	402ed4 <__aeabi_dmul>
  401bdc:	4604      	mov	r4, r0
  401bde:	460d      	mov	r5, r1
  401be0:	f000 feae 	bl	402940 <rint>
  401be4:	4602      	mov	r2, r0
  401be6:	460b      	mov	r3, r1
  401be8:	4620      	mov	r0, r4
  401bea:	4629      	mov	r1, r5
  401bec:	f001 fbda 	bl	4033a4 <__aeabi_dcmpeq>
  401bf0:	b918      	cbnz	r0, 401bfa <pow+0x29a>
  401bf2:	4b14      	ldr	r3, [pc, #80]	; (401c44 <pow+0x2e4>)
  401bf4:	2200      	movs	r2, #0
  401bf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401bfa:	f999 8000 	ldrsb.w	r8, [r9]
  401bfe:	e7da      	b.n	401bb6 <pow+0x256>
  401c00:	f999 9000 	ldrsb.w	r9, [r9]
  401c04:	4b0d      	ldr	r3, [pc, #52]	; (401c3c <pow+0x2dc>)
  401c06:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  401c0a:	2201      	movs	r2, #1
  401c0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401c10:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401c14:	9202      	str	r2, [sp, #8]
  401c16:	9303      	str	r3, [sp, #12]
  401c18:	f1b9 0f00 	cmp.w	r9, #0
  401c1c:	f43f af27 	beq.w	401a6e <pow+0x10e>
  401c20:	2200      	movs	r2, #0
  401c22:	2300      	movs	r3, #0
  401c24:	4610      	mov	r0, r2
  401c26:	4619      	mov	r1, r3
  401c28:	f001 fa7e 	bl	403128 <__aeabi_ddiv>
  401c2c:	f1b9 0f02 	cmp.w	r9, #2
  401c30:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401c34:	f43f af55 	beq.w	401ae2 <pow+0x182>
  401c38:	e71d      	b.n	401a76 <pow+0x116>
  401c3a:	bf00      	nop
  401c3c:	00406528 	.word	0x00406528
  401c40:	3ff00000 	.word	0x3ff00000
  401c44:	fff00000 	.word	0xfff00000
  401c48:	47efffff 	.word	0x47efffff
  401c4c:	3fe00000 	.word	0x3fe00000
  401c50:	c7efffff 	.word	0xc7efffff
  401c54:	7ff00000 	.word	0x7ff00000
  401c58:	2000000a 	.word	0x2000000a

00401c5c <sqrt>:
  401c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c60:	b08b      	sub	sp, #44	; 0x2c
  401c62:	4604      	mov	r4, r0
  401c64:	460d      	mov	r5, r1
  401c66:	f000 fd9d 	bl	4027a4 <__ieee754_sqrt>
  401c6a:	4b29      	ldr	r3, [pc, #164]	; (401d10 <sqrt+0xb4>)
  401c6c:	f993 a000 	ldrsb.w	sl, [r3]
  401c70:	f1ba 3fff 	cmp.w	sl, #4294967295
  401c74:	4606      	mov	r6, r0
  401c76:	460f      	mov	r7, r1
  401c78:	d012      	beq.n	401ca0 <sqrt+0x44>
  401c7a:	4622      	mov	r2, r4
  401c7c:	462b      	mov	r3, r5
  401c7e:	4620      	mov	r0, r4
  401c80:	4629      	mov	r1, r5
  401c82:	f001 fbc1 	bl	403408 <__aeabi_dcmpun>
  401c86:	4683      	mov	fp, r0
  401c88:	b950      	cbnz	r0, 401ca0 <sqrt+0x44>
  401c8a:	f04f 0800 	mov.w	r8, #0
  401c8e:	f04f 0900 	mov.w	r9, #0
  401c92:	4642      	mov	r2, r8
  401c94:	464b      	mov	r3, r9
  401c96:	4620      	mov	r0, r4
  401c98:	4629      	mov	r1, r5
  401c9a:	f001 fb8d 	bl	4033b8 <__aeabi_dcmplt>
  401c9e:	b920      	cbnz	r0, 401caa <sqrt+0x4e>
  401ca0:	4630      	mov	r0, r6
  401ca2:	4639      	mov	r1, r7
  401ca4:	b00b      	add	sp, #44	; 0x2c
  401ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401caa:	4b1a      	ldr	r3, [pc, #104]	; (401d14 <sqrt+0xb8>)
  401cac:	f8cd b020 	str.w	fp, [sp, #32]
  401cb0:	2201      	movs	r2, #1
  401cb2:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401cb6:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401cba:	e88d 000c 	stmia.w	sp, {r2, r3}
  401cbe:	f1ba 0f00 	cmp.w	sl, #0
  401cc2:	d017      	beq.n	401cf4 <sqrt+0x98>
  401cc4:	4642      	mov	r2, r8
  401cc6:	464b      	mov	r3, r9
  401cc8:	4640      	mov	r0, r8
  401cca:	4649      	mov	r1, r9
  401ccc:	f001 fa2c 	bl	403128 <__aeabi_ddiv>
  401cd0:	f1ba 0f02 	cmp.w	sl, #2
  401cd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401cd8:	d10e      	bne.n	401cf8 <sqrt+0x9c>
  401cda:	f001 fdc9 	bl	403870 <__errno>
  401cde:	2321      	movs	r3, #33	; 0x21
  401ce0:	6003      	str	r3, [r0, #0]
  401ce2:	9b08      	ldr	r3, [sp, #32]
  401ce4:	b973      	cbnz	r3, 401d04 <sqrt+0xa8>
  401ce6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  401cea:	4630      	mov	r0, r6
  401cec:	4639      	mov	r1, r7
  401cee:	b00b      	add	sp, #44	; 0x2c
  401cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cf4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401cf8:	4668      	mov	r0, sp
  401cfa:	f000 fe19 	bl	402930 <matherr>
  401cfe:	2800      	cmp	r0, #0
  401d00:	d1ef      	bne.n	401ce2 <sqrt+0x86>
  401d02:	e7ea      	b.n	401cda <sqrt+0x7e>
  401d04:	f001 fdb4 	bl	403870 <__errno>
  401d08:	9b08      	ldr	r3, [sp, #32]
  401d0a:	6003      	str	r3, [r0, #0]
  401d0c:	e7eb      	b.n	401ce6 <sqrt+0x8a>
  401d0e:	bf00      	nop
  401d10:	2000000a 	.word	0x2000000a
  401d14:	0040652c 	.word	0x0040652c

00401d18 <__ieee754_pow>:
  401d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d1c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  401d20:	ea57 0402 	orrs.w	r4, r7, r2
  401d24:	b093      	sub	sp, #76	; 0x4c
  401d26:	d037      	beq.n	401d98 <__ieee754_pow+0x80>
  401d28:	4c67      	ldr	r4, [pc, #412]	; (401ec8 <__ieee754_pow+0x1b0>)
  401d2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  401d2e:	42a6      	cmp	r6, r4
  401d30:	4683      	mov	fp, r0
  401d32:	460d      	mov	r5, r1
  401d34:	dc29      	bgt.n	401d8a <__ieee754_pow+0x72>
  401d36:	469a      	mov	sl, r3
  401d38:	4696      	mov	lr, r2
  401d3a:	d025      	beq.n	401d88 <__ieee754_pow+0x70>
  401d3c:	42a7      	cmp	r7, r4
  401d3e:	dc24      	bgt.n	401d8a <__ieee754_pow+0x72>
  401d40:	4c61      	ldr	r4, [pc, #388]	; (401ec8 <__ieee754_pow+0x1b0>)
  401d42:	42a7      	cmp	r7, r4
  401d44:	d079      	beq.n	401e3a <__ieee754_pow+0x122>
  401d46:	2d00      	cmp	r5, #0
  401d48:	4689      	mov	r9, r1
  401d4a:	4680      	mov	r8, r0
  401d4c:	e9cd 2300 	strd	r2, r3, [sp]
  401d50:	db77      	blt.n	401e42 <__ieee754_pow+0x12a>
  401d52:	2400      	movs	r4, #0
  401d54:	f1be 0f00 	cmp.w	lr, #0
  401d58:	d12c      	bne.n	401db4 <__ieee754_pow+0x9c>
  401d5a:	4b5b      	ldr	r3, [pc, #364]	; (401ec8 <__ieee754_pow+0x1b0>)
  401d5c:	429f      	cmp	r7, r3
  401d5e:	f000 808b 	beq.w	401e78 <__ieee754_pow+0x160>
  401d62:	4b5a      	ldr	r3, [pc, #360]	; (401ecc <__ieee754_pow+0x1b4>)
  401d64:	429f      	cmp	r7, r3
  401d66:	d061      	beq.n	401e2c <__ieee754_pow+0x114>
  401d68:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
  401d6c:	f000 83ba 	beq.w	4024e4 <__ieee754_pow+0x7cc>
  401d70:	4b57      	ldr	r3, [pc, #348]	; (401ed0 <__ieee754_pow+0x1b8>)
  401d72:	459a      	cmp	sl, r3
  401d74:	d11e      	bne.n	401db4 <__ieee754_pow+0x9c>
  401d76:	2d00      	cmp	r5, #0
  401d78:	db1c      	blt.n	401db4 <__ieee754_pow+0x9c>
  401d7a:	4640      	mov	r0, r8
  401d7c:	4649      	mov	r1, r9
  401d7e:	b013      	add	sp, #76	; 0x4c
  401d80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d84:	f000 bd0e 	b.w	4027a4 <__ieee754_sqrt>
  401d88:	b158      	cbz	r0, 401da2 <__ieee754_pow+0x8a>
  401d8a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  401d8e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  401d92:	ea56 030b 	orrs.w	r3, r6, fp
  401d96:	d106      	bne.n	401da6 <__ieee754_pow+0x8e>
  401d98:	494c      	ldr	r1, [pc, #304]	; (401ecc <__ieee754_pow+0x1b4>)
  401d9a:	2000      	movs	r0, #0
  401d9c:	b013      	add	sp, #76	; 0x4c
  401d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401da2:	42b7      	cmp	r7, r6
  401da4:	ddcc      	ble.n	401d40 <__ieee754_pow+0x28>
  401da6:	484b      	ldr	r0, [pc, #300]	; (401ed4 <__ieee754_pow+0x1bc>)
  401da8:	b013      	add	sp, #76	; 0x4c
  401daa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401dae:	f000 bdc1 	b.w	402934 <nan>
  401db2:	2400      	movs	r4, #0
  401db4:	4640      	mov	r0, r8
  401db6:	4649      	mov	r1, r9
  401db8:	f000 fdb0 	bl	40291c <fabs>
  401dbc:	f1bb 0f00 	cmp.w	fp, #0
  401dc0:	d119      	bne.n	401df6 <__ieee754_pow+0xde>
  401dc2:	b126      	cbz	r6, 401dce <__ieee754_pow+0xb6>
  401dc4:	4b41      	ldr	r3, [pc, #260]	; (401ecc <__ieee754_pow+0x1b4>)
  401dc6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
  401dca:	429a      	cmp	r2, r3
  401dcc:	d113      	bne.n	401df6 <__ieee754_pow+0xde>
  401dce:	f1ba 0f00 	cmp.w	sl, #0
  401dd2:	f2c0 83bc 	blt.w	40254e <__ieee754_pow+0x836>
  401dd6:	2d00      	cmp	r5, #0
  401dd8:	dae0      	bge.n	401d9c <__ieee754_pow+0x84>
  401dda:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  401dde:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  401de2:	ea56 0304 	orrs.w	r3, r6, r4
  401de6:	f000 848f 	beq.w	402708 <__ieee754_pow+0x9f0>
  401dea:	2c01      	cmp	r4, #1
  401dec:	d1d6      	bne.n	401d9c <__ieee754_pow+0x84>
  401dee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  401df2:	4619      	mov	r1, r3
  401df4:	e7d2      	b.n	401d9c <__ieee754_pow+0x84>
  401df6:	0fed      	lsrs	r5, r5, #31
  401df8:	3d01      	subs	r5, #1
  401dfa:	ea54 0305 	orrs.w	r3, r4, r5
  401dfe:	d04e      	beq.n	401e9e <__ieee754_pow+0x186>
  401e00:	4b35      	ldr	r3, [pc, #212]	; (401ed8 <__ieee754_pow+0x1c0>)
  401e02:	429f      	cmp	r7, r3
  401e04:	dd6e      	ble.n	401ee4 <__ieee754_pow+0x1cc>
  401e06:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
  401e0a:	429f      	cmp	r7, r3
  401e0c:	f340 83e8 	ble.w	4025e0 <__ieee754_pow+0x8c8>
  401e10:	4b32      	ldr	r3, [pc, #200]	; (401edc <__ieee754_pow+0x1c4>)
  401e12:	429e      	cmp	r6, r3
  401e14:	dd4e      	ble.n	401eb4 <__ieee754_pow+0x19c>
  401e16:	f1ba 0f00 	cmp.w	sl, #0
  401e1a:	dd4e      	ble.n	401eba <__ieee754_pow+0x1a2>
  401e1c:	a328      	add	r3, pc, #160	; (adr r3, 401ec0 <__ieee754_pow+0x1a8>)
  401e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e22:	4610      	mov	r0, r2
  401e24:	4619      	mov	r1, r3
  401e26:	f001 f855 	bl	402ed4 <__aeabi_dmul>
  401e2a:	e7b7      	b.n	401d9c <__ieee754_pow+0x84>
  401e2c:	f1ba 0f00 	cmp.w	sl, #0
  401e30:	f2c0 843c 	blt.w	4026ac <__ieee754_pow+0x994>
  401e34:	4640      	mov	r0, r8
  401e36:	4649      	mov	r1, r9
  401e38:	e7b0      	b.n	401d9c <__ieee754_pow+0x84>
  401e3a:	f1be 0f00 	cmp.w	lr, #0
  401e3e:	d082      	beq.n	401d46 <__ieee754_pow+0x2e>
  401e40:	e7a3      	b.n	401d8a <__ieee754_pow+0x72>
  401e42:	4b27      	ldr	r3, [pc, #156]	; (401ee0 <__ieee754_pow+0x1c8>)
  401e44:	429f      	cmp	r7, r3
  401e46:	dc28      	bgt.n	401e9a <__ieee754_pow+0x182>
  401e48:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  401e4c:	429f      	cmp	r7, r3
  401e4e:	dd80      	ble.n	401d52 <__ieee754_pow+0x3a>
  401e50:	153b      	asrs	r3, r7, #20
  401e52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  401e56:	2b14      	cmp	r3, #20
  401e58:	f340 843e 	ble.w	4026d8 <__ieee754_pow+0x9c0>
  401e5c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
  401e60:	fa2e f203 	lsr.w	r2, lr, r3
  401e64:	fa02 f303 	lsl.w	r3, r2, r3
  401e68:	459e      	cmp	lr, r3
  401e6a:	f47f af72 	bne.w	401d52 <__ieee754_pow+0x3a>
  401e6e:	f002 0201 	and.w	r2, r2, #1
  401e72:	f1c2 0402 	rsb	r4, r2, #2
  401e76:	e76d      	b.n	401d54 <__ieee754_pow+0x3c>
  401e78:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
  401e7c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  401e80:	ea53 030b 	orrs.w	r3, r3, fp
  401e84:	d088      	beq.n	401d98 <__ieee754_pow+0x80>
  401e86:	4b15      	ldr	r3, [pc, #84]	; (401edc <__ieee754_pow+0x1c4>)
  401e88:	429e      	cmp	r6, r3
  401e8a:	f340 8332 	ble.w	4024f2 <__ieee754_pow+0x7da>
  401e8e:	f1ba 0f00 	cmp.w	sl, #0
  401e92:	db12      	blt.n	401eba <__ieee754_pow+0x1a2>
  401e94:	e9dd 0100 	ldrd	r0, r1, [sp]
  401e98:	e780      	b.n	401d9c <__ieee754_pow+0x84>
  401e9a:	2402      	movs	r4, #2
  401e9c:	e75a      	b.n	401d54 <__ieee754_pow+0x3c>
  401e9e:	4642      	mov	r2, r8
  401ea0:	464b      	mov	r3, r9
  401ea2:	4640      	mov	r0, r8
  401ea4:	4649      	mov	r1, r9
  401ea6:	f000 fe61 	bl	402b6c <__aeabi_dsub>
  401eaa:	4602      	mov	r2, r0
  401eac:	460b      	mov	r3, r1
  401eae:	f001 f93b 	bl	403128 <__aeabi_ddiv>
  401eb2:	e773      	b.n	401d9c <__ieee754_pow+0x84>
  401eb4:	f1ba 0f00 	cmp.w	sl, #0
  401eb8:	dbb0      	blt.n	401e1c <__ieee754_pow+0x104>
  401eba:	2000      	movs	r0, #0
  401ebc:	2100      	movs	r1, #0
  401ebe:	e76d      	b.n	401d9c <__ieee754_pow+0x84>
  401ec0:	8800759c 	.word	0x8800759c
  401ec4:	7e37e43c 	.word	0x7e37e43c
  401ec8:	7ff00000 	.word	0x7ff00000
  401ecc:	3ff00000 	.word	0x3ff00000
  401ed0:	3fe00000 	.word	0x3fe00000
  401ed4:	0040655c 	.word	0x0040655c
  401ed8:	41e00000 	.word	0x41e00000
  401edc:	3fefffff 	.word	0x3fefffff
  401ee0:	433fffff 	.word	0x433fffff
  401ee4:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
  401ee8:	f04f 0200 	mov.w	r2, #0
  401eec:	da05      	bge.n	401efa <__ieee754_pow+0x1e2>
  401eee:	4bd4      	ldr	r3, [pc, #848]	; (402240 <__ieee754_pow+0x528>)
  401ef0:	f000 fff0 	bl	402ed4 <__aeabi_dmul>
  401ef4:	f06f 0234 	mvn.w	r2, #52	; 0x34
  401ef8:	460e      	mov	r6, r1
  401efa:	1533      	asrs	r3, r6, #20
  401efc:	4fd1      	ldr	r7, [pc, #836]	; (402244 <__ieee754_pow+0x52c>)
  401efe:	f3c6 0613 	ubfx	r6, r6, #0, #20
  401f02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  401f06:	4413      	add	r3, r2
  401f08:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
  401f0c:	42be      	cmp	r6, r7
  401f0e:	461a      	mov	r2, r3
  401f10:	930d      	str	r3, [sp, #52]	; 0x34
  401f12:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
  401f16:	f340 8321 	ble.w	40255c <__ieee754_pow+0x844>
  401f1a:	4bcb      	ldr	r3, [pc, #812]	; (402248 <__ieee754_pow+0x530>)
  401f1c:	429e      	cmp	r6, r3
  401f1e:	f340 83fd 	ble.w	40271c <__ieee754_pow+0xa04>
  401f22:	4613      	mov	r3, r2
  401f24:	3301      	adds	r3, #1
  401f26:	930d      	str	r3, [sp, #52]	; 0x34
  401f28:	4bc8      	ldr	r3, [pc, #800]	; (40224c <__ieee754_pow+0x534>)
  401f2a:	2200      	movs	r2, #0
  401f2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  401f30:	2700      	movs	r7, #0
  401f32:	2600      	movs	r6, #0
  401f34:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401f38:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  401f3c:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
  401f40:	2700      	movs	r7, #0
  401f42:	4602      	mov	r2, r0
  401f44:	4653      	mov	r3, sl
  401f46:	4651      	mov	r1, sl
  401f48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  401f4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401f50:	f000 fe0c 	bl	402b6c <__aeabi_dsub>
  401f54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401f58:	4680      	mov	r8, r0
  401f5a:	4689      	mov	r9, r1
  401f5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401f60:	f000 fe06 	bl	402b70 <__adddf3>
  401f64:	4602      	mov	r2, r0
  401f66:	460b      	mov	r3, r1
  401f68:	2000      	movs	r0, #0
  401f6a:	49b8      	ldr	r1, [pc, #736]	; (40224c <__ieee754_pow+0x534>)
  401f6c:	f001 f8dc 	bl	403128 <__aeabi_ddiv>
  401f70:	460a      	mov	r2, r1
  401f72:	4601      	mov	r1, r0
  401f74:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  401f78:	4613      	mov	r3, r2
  401f7a:	4649      	mov	r1, r9
  401f7c:	4602      	mov	r2, r0
  401f7e:	4640      	mov	r0, r8
  401f80:	f000 ffa8 	bl	402ed4 <__aeabi_dmul>
  401f84:	ea4f 036a 	mov.w	r3, sl, asr #1
  401f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401f8c:	468c      	mov	ip, r1
  401f8e:	4683      	mov	fp, r0
  401f90:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
  401f94:	e9cd bc04 	strd	fp, ip, [sp, #16]
  401f98:	46da      	mov	sl, fp
  401f9a:	468b      	mov	fp, r1
  401f9c:	19d9      	adds	r1, r3, r7
  401f9e:	2300      	movs	r3, #0
  401fa0:	e9cd ab02 	strd	sl, fp, [sp, #8]
  401fa4:	9302      	str	r3, [sp, #8]
  401fa6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  401faa:	2000      	movs	r0, #0
  401fac:	4606      	mov	r6, r0
  401fae:	460f      	mov	r7, r1
  401fb0:	4602      	mov	r2, r0
  401fb2:	460b      	mov	r3, r1
  401fb4:	4650      	mov	r0, sl
  401fb6:	4659      	mov	r1, fp
  401fb8:	f000 ff8c 	bl	402ed4 <__aeabi_dmul>
  401fbc:	4602      	mov	r2, r0
  401fbe:	460b      	mov	r3, r1
  401fc0:	4640      	mov	r0, r8
  401fc2:	4649      	mov	r1, r9
  401fc4:	f000 fdd2 	bl	402b6c <__aeabi_dsub>
  401fc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401fcc:	4680      	mov	r8, r0
  401fce:	4689      	mov	r9, r1
  401fd0:	4630      	mov	r0, r6
  401fd2:	4639      	mov	r1, r7
  401fd4:	f000 fdca 	bl	402b6c <__aeabi_dsub>
  401fd8:	4602      	mov	r2, r0
  401fda:	460b      	mov	r3, r1
  401fdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401fe0:	f000 fdc4 	bl	402b6c <__aeabi_dsub>
  401fe4:	4652      	mov	r2, sl
  401fe6:	465b      	mov	r3, fp
  401fe8:	f000 ff74 	bl	402ed4 <__aeabi_dmul>
  401fec:	4602      	mov	r2, r0
  401fee:	460b      	mov	r3, r1
  401ff0:	4640      	mov	r0, r8
  401ff2:	4649      	mov	r1, r9
  401ff4:	f000 fdba 	bl	402b6c <__aeabi_dsub>
  401ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  401ffc:	f000 ff6a 	bl	402ed4 <__aeabi_dmul>
  402000:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  402004:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402008:	4632      	mov	r2, r6
  40200a:	463b      	mov	r3, r7
  40200c:	4630      	mov	r0, r6
  40200e:	4639      	mov	r1, r7
  402010:	f000 ff60 	bl	402ed4 <__aeabi_dmul>
  402014:	a378      	add	r3, pc, #480	; (adr r3, 4021f8 <__ieee754_pow+0x4e0>)
  402016:	e9d3 2300 	ldrd	r2, r3, [r3]
  40201a:	4606      	mov	r6, r0
  40201c:	460f      	mov	r7, r1
  40201e:	f000 ff59 	bl	402ed4 <__aeabi_dmul>
  402022:	a377      	add	r3, pc, #476	; (adr r3, 402200 <__ieee754_pow+0x4e8>)
  402024:	e9d3 2300 	ldrd	r2, r3, [r3]
  402028:	f000 fda2 	bl	402b70 <__adddf3>
  40202c:	4632      	mov	r2, r6
  40202e:	463b      	mov	r3, r7
  402030:	f000 ff50 	bl	402ed4 <__aeabi_dmul>
  402034:	a374      	add	r3, pc, #464	; (adr r3, 402208 <__ieee754_pow+0x4f0>)
  402036:	e9d3 2300 	ldrd	r2, r3, [r3]
  40203a:	f000 fd99 	bl	402b70 <__adddf3>
  40203e:	4632      	mov	r2, r6
  402040:	463b      	mov	r3, r7
  402042:	f000 ff47 	bl	402ed4 <__aeabi_dmul>
  402046:	a372      	add	r3, pc, #456	; (adr r3, 402210 <__ieee754_pow+0x4f8>)
  402048:	e9d3 2300 	ldrd	r2, r3, [r3]
  40204c:	f000 fd90 	bl	402b70 <__adddf3>
  402050:	4632      	mov	r2, r6
  402052:	463b      	mov	r3, r7
  402054:	f000 ff3e 	bl	402ed4 <__aeabi_dmul>
  402058:	a36f      	add	r3, pc, #444	; (adr r3, 402218 <__ieee754_pow+0x500>)
  40205a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40205e:	f000 fd87 	bl	402b70 <__adddf3>
  402062:	4632      	mov	r2, r6
  402064:	463b      	mov	r3, r7
  402066:	f000 ff35 	bl	402ed4 <__aeabi_dmul>
  40206a:	a36d      	add	r3, pc, #436	; (adr r3, 402220 <__ieee754_pow+0x508>)
  40206c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402070:	f000 fd7e 	bl	402b70 <__adddf3>
  402074:	4632      	mov	r2, r6
  402076:	4680      	mov	r8, r0
  402078:	4689      	mov	r9, r1
  40207a:	463b      	mov	r3, r7
  40207c:	4630      	mov	r0, r6
  40207e:	4639      	mov	r1, r7
  402080:	f000 ff28 	bl	402ed4 <__aeabi_dmul>
  402084:	4602      	mov	r2, r0
  402086:	460b      	mov	r3, r1
  402088:	4640      	mov	r0, r8
  40208a:	4649      	mov	r1, r9
  40208c:	f000 ff22 	bl	402ed4 <__aeabi_dmul>
  402090:	4652      	mov	r2, sl
  402092:	4606      	mov	r6, r0
  402094:	460f      	mov	r7, r1
  402096:	465b      	mov	r3, fp
  402098:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40209c:	f000 fd68 	bl	402b70 <__adddf3>
  4020a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4020a4:	f000 ff16 	bl	402ed4 <__aeabi_dmul>
  4020a8:	4632      	mov	r2, r6
  4020aa:	463b      	mov	r3, r7
  4020ac:	f000 fd60 	bl	402b70 <__adddf3>
  4020b0:	4652      	mov	r2, sl
  4020b2:	4680      	mov	r8, r0
  4020b4:	4689      	mov	r9, r1
  4020b6:	465b      	mov	r3, fp
  4020b8:	4650      	mov	r0, sl
  4020ba:	4659      	mov	r1, fp
  4020bc:	f000 ff0a 	bl	402ed4 <__aeabi_dmul>
  4020c0:	2200      	movs	r2, #0
  4020c2:	4b63      	ldr	r3, [pc, #396]	; (402250 <__ieee754_pow+0x538>)
  4020c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4020c8:	f000 fd52 	bl	402b70 <__adddf3>
  4020cc:	4642      	mov	r2, r8
  4020ce:	464b      	mov	r3, r9
  4020d0:	f000 fd4e 	bl	402b70 <__adddf3>
  4020d4:	9802      	ldr	r0, [sp, #8]
  4020d6:	460f      	mov	r7, r1
  4020d8:	4606      	mov	r6, r0
  4020da:	4632      	mov	r2, r6
  4020dc:	463b      	mov	r3, r7
  4020de:	4650      	mov	r0, sl
  4020e0:	4659      	mov	r1, fp
  4020e2:	f000 fef7 	bl	402ed4 <__aeabi_dmul>
  4020e6:	2200      	movs	r2, #0
  4020e8:	4682      	mov	sl, r0
  4020ea:	468b      	mov	fp, r1
  4020ec:	4b58      	ldr	r3, [pc, #352]	; (402250 <__ieee754_pow+0x538>)
  4020ee:	4630      	mov	r0, r6
  4020f0:	4639      	mov	r1, r7
  4020f2:	f000 fd3b 	bl	402b6c <__aeabi_dsub>
  4020f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4020fa:	f000 fd37 	bl	402b6c <__aeabi_dsub>
  4020fe:	4602      	mov	r2, r0
  402100:	460b      	mov	r3, r1
  402102:	4640      	mov	r0, r8
  402104:	4649      	mov	r1, r9
  402106:	f000 fd31 	bl	402b6c <__aeabi_dsub>
  40210a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40210e:	f000 fee1 	bl	402ed4 <__aeabi_dmul>
  402112:	4632      	mov	r2, r6
  402114:	4680      	mov	r8, r0
  402116:	4689      	mov	r9, r1
  402118:	463b      	mov	r3, r7
  40211a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40211e:	f000 fed9 	bl	402ed4 <__aeabi_dmul>
  402122:	4602      	mov	r2, r0
  402124:	460b      	mov	r3, r1
  402126:	4640      	mov	r0, r8
  402128:	4649      	mov	r1, r9
  40212a:	f000 fd21 	bl	402b70 <__adddf3>
  40212e:	4680      	mov	r8, r0
  402130:	4689      	mov	r9, r1
  402132:	4602      	mov	r2, r0
  402134:	460b      	mov	r3, r1
  402136:	4650      	mov	r0, sl
  402138:	4659      	mov	r1, fp
  40213a:	e9cd ab04 	strd	sl, fp, [sp, #16]
  40213e:	f000 fd17 	bl	402b70 <__adddf3>
  402142:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  402146:	a338      	add	r3, pc, #224	; (adr r3, 402228 <__ieee754_pow+0x510>)
  402148:	e9d3 2300 	ldrd	r2, r3, [r3]
  40214c:	4650      	mov	r0, sl
  40214e:	460f      	mov	r7, r1
  402150:	f000 fec0 	bl	402ed4 <__aeabi_dmul>
  402154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402158:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40215c:	4639      	mov	r1, r7
  40215e:	4650      	mov	r0, sl
  402160:	f000 fd04 	bl	402b6c <__aeabi_dsub>
  402164:	4602      	mov	r2, r0
  402166:	460b      	mov	r3, r1
  402168:	4640      	mov	r0, r8
  40216a:	4649      	mov	r1, r9
  40216c:	f000 fcfe 	bl	402b6c <__aeabi_dsub>
  402170:	a32f      	add	r3, pc, #188	; (adr r3, 402230 <__ieee754_pow+0x518>)
  402172:	e9d3 2300 	ldrd	r2, r3, [r3]
  402176:	f000 fead 	bl	402ed4 <__aeabi_dmul>
  40217a:	a32f      	add	r3, pc, #188	; (adr r3, 402238 <__ieee754_pow+0x520>)
  40217c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402180:	4680      	mov	r8, r0
  402182:	4689      	mov	r9, r1
  402184:	4650      	mov	r0, sl
  402186:	4639      	mov	r1, r7
  402188:	f000 fea4 	bl	402ed4 <__aeabi_dmul>
  40218c:	4602      	mov	r2, r0
  40218e:	460b      	mov	r3, r1
  402190:	4640      	mov	r0, r8
  402192:	4649      	mov	r1, r9
  402194:	f000 fcec 	bl	402b70 <__adddf3>
  402198:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40219c:	f000 fce8 	bl	402b70 <__adddf3>
  4021a0:	4680      	mov	r8, r0
  4021a2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4021a4:	4689      	mov	r9, r1
  4021a6:	f000 fe2f 	bl	402e08 <__aeabi_i2d>
  4021aa:	4642      	mov	r2, r8
  4021ac:	4606      	mov	r6, r0
  4021ae:	460f      	mov	r7, r1
  4021b0:	464b      	mov	r3, r9
  4021b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4021b6:	f000 fcdb 	bl	402b70 <__adddf3>
  4021ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4021be:	f000 fcd7 	bl	402b70 <__adddf3>
  4021c2:	4632      	mov	r2, r6
  4021c4:	463b      	mov	r3, r7
  4021c6:	f000 fcd3 	bl	402b70 <__adddf3>
  4021ca:	4632      	mov	r2, r6
  4021cc:	463b      	mov	r3, r7
  4021ce:	4650      	mov	r0, sl
  4021d0:	468b      	mov	fp, r1
  4021d2:	f000 fccb 	bl	402b6c <__aeabi_dsub>
  4021d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4021da:	f000 fcc7 	bl	402b6c <__aeabi_dsub>
  4021de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4021e2:	f000 fcc3 	bl	402b6c <__aeabi_dsub>
  4021e6:	4602      	mov	r2, r0
  4021e8:	460b      	mov	r3, r1
  4021ea:	4640      	mov	r0, r8
  4021ec:	4649      	mov	r1, r9
  4021ee:	f000 fcbd 	bl	402b6c <__aeabi_dsub>
  4021f2:	4680      	mov	r8, r0
  4021f4:	e02e      	b.n	402254 <__ieee754_pow+0x53c>
  4021f6:	bf00      	nop
  4021f8:	4a454eef 	.word	0x4a454eef
  4021fc:	3fca7e28 	.word	0x3fca7e28
  402200:	93c9db65 	.word	0x93c9db65
  402204:	3fcd864a 	.word	0x3fcd864a
  402208:	a91d4101 	.word	0xa91d4101
  40220c:	3fd17460 	.word	0x3fd17460
  402210:	518f264d 	.word	0x518f264d
  402214:	3fd55555 	.word	0x3fd55555
  402218:	db6fabff 	.word	0xdb6fabff
  40221c:	3fdb6db6 	.word	0x3fdb6db6
  402220:	33333303 	.word	0x33333303
  402224:	3fe33333 	.word	0x3fe33333
  402228:	e0000000 	.word	0xe0000000
  40222c:	3feec709 	.word	0x3feec709
  402230:	dc3a03fd 	.word	0xdc3a03fd
  402234:	3feec709 	.word	0x3feec709
  402238:	145b01f5 	.word	0x145b01f5
  40223c:	be3e2fe0 	.word	0xbe3e2fe0
  402240:	43400000 	.word	0x43400000
  402244:	0003988e 	.word	0x0003988e
  402248:	000bb679 	.word	0x000bb679
  40224c:	3ff00000 	.word	0x3ff00000
  402250:	40080000 	.word	0x40080000
  402254:	4689      	mov	r9, r1
  402256:	3c01      	subs	r4, #1
  402258:	ea54 0305 	orrs.w	r3, r4, r5
  40225c:	e9dd 0100 	ldrd	r0, r1, [sp]
  402260:	bf14      	ite	ne
  402262:	4cd9      	ldrne	r4, [pc, #868]	; (4025c8 <__ieee754_pow+0x8b0>)
  402264:	4cd9      	ldreq	r4, [pc, #868]	; (4025cc <__ieee754_pow+0x8b4>)
  402266:	2300      	movs	r3, #0
  402268:	e9cd 3404 	strd	r3, r4, [sp, #16]
  40226c:	4603      	mov	r3, r0
  40226e:	460c      	mov	r4, r1
  402270:	e9cd 3402 	strd	r3, r4, [sp, #8]
  402274:	2300      	movs	r3, #0
  402276:	9302      	str	r3, [sp, #8]
  402278:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  40227c:	4622      	mov	r2, r4
  40227e:	462b      	mov	r3, r5
  402280:	f000 fc74 	bl	402b6c <__aeabi_dsub>
  402284:	4652      	mov	r2, sl
  402286:	465b      	mov	r3, fp
  402288:	f000 fe24 	bl	402ed4 <__aeabi_dmul>
  40228c:	e9dd 2300 	ldrd	r2, r3, [sp]
  402290:	4606      	mov	r6, r0
  402292:	460f      	mov	r7, r1
  402294:	4640      	mov	r0, r8
  402296:	4649      	mov	r1, r9
  402298:	f000 fe1c 	bl	402ed4 <__aeabi_dmul>
  40229c:	4602      	mov	r2, r0
  40229e:	460b      	mov	r3, r1
  4022a0:	4630      	mov	r0, r6
  4022a2:	4639      	mov	r1, r7
  4022a4:	f000 fc64 	bl	402b70 <__adddf3>
  4022a8:	4622      	mov	r2, r4
  4022aa:	4680      	mov	r8, r0
  4022ac:	4689      	mov	r9, r1
  4022ae:	462b      	mov	r3, r5
  4022b0:	4650      	mov	r0, sl
  4022b2:	4659      	mov	r1, fp
  4022b4:	e9cd 8900 	strd	r8, r9, [sp]
  4022b8:	f000 fe0c 	bl	402ed4 <__aeabi_dmul>
  4022bc:	460b      	mov	r3, r1
  4022be:	4602      	mov	r2, r0
  4022c0:	4606      	mov	r6, r0
  4022c2:	460f      	mov	r7, r1
  4022c4:	4640      	mov	r0, r8
  4022c6:	4649      	mov	r1, r9
  4022c8:	f000 fc52 	bl	402b70 <__adddf3>
  4022cc:	4bc0      	ldr	r3, [pc, #768]	; (4025d0 <__ieee754_pow+0x8b8>)
  4022ce:	4299      	cmp	r1, r3
  4022d0:	4604      	mov	r4, r0
  4022d2:	460d      	mov	r5, r1
  4022d4:	468a      	mov	sl, r1
  4022d6:	f340 8116 	ble.w	402506 <__ieee754_pow+0x7ee>
  4022da:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
  4022de:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
  4022e2:	4303      	orrs	r3, r0
  4022e4:	f040 81ea 	bne.w	4026bc <__ieee754_pow+0x9a4>
  4022e8:	a3a3      	add	r3, pc, #652	; (adr r3, 402578 <__ieee754_pow+0x860>)
  4022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022ee:	e9dd 0100 	ldrd	r0, r1, [sp]
  4022f2:	f000 fc3d 	bl	402b70 <__adddf3>
  4022f6:	4632      	mov	r2, r6
  4022f8:	4680      	mov	r8, r0
  4022fa:	4689      	mov	r9, r1
  4022fc:	463b      	mov	r3, r7
  4022fe:	4620      	mov	r0, r4
  402300:	4629      	mov	r1, r5
  402302:	f000 fc33 	bl	402b6c <__aeabi_dsub>
  402306:	4602      	mov	r2, r0
  402308:	460b      	mov	r3, r1
  40230a:	4640      	mov	r0, r8
  40230c:	4649      	mov	r1, r9
  40230e:	f001 f871 	bl	4033f4 <__aeabi_dcmpgt>
  402312:	2800      	cmp	r0, #0
  402314:	f040 81d2 	bne.w	4026bc <__ieee754_pow+0x9a4>
  402318:	46a8      	mov	r8, r5
  40231a:	ea4f 5328 	mov.w	r3, r8, asr #20
  40231e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402322:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
  402326:	fa42 f303 	asr.w	r3, r2, r3
  40232a:	4453      	add	r3, sl
  40232c:	f3c3 520a 	ubfx	r2, r3, #20, #11
  402330:	4da8      	ldr	r5, [pc, #672]	; (4025d4 <__ieee754_pow+0x8bc>)
  402332:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
  402336:	4115      	asrs	r5, r2
  402338:	f3c3 0413 	ubfx	r4, r3, #0, #20
  40233c:	ea23 0105 	bic.w	r1, r3, r5
  402340:	2000      	movs	r0, #0
  402342:	f1c2 0b14 	rsb	fp, r2, #20
  402346:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40234a:	f1ba 0f00 	cmp.w	sl, #0
  40234e:	4602      	mov	r2, r0
  402350:	460b      	mov	r3, r1
  402352:	fa44 fb0b 	asr.w	fp, r4, fp
  402356:	4630      	mov	r0, r6
  402358:	4639      	mov	r1, r7
  40235a:	bfb8      	it	lt
  40235c:	f1cb 0b00 	rsblt	fp, fp, #0
  402360:	f000 fc04 	bl	402b6c <__aeabi_dsub>
  402364:	4602      	mov	r2, r0
  402366:	460b      	mov	r3, r1
  402368:	4606      	mov	r6, r0
  40236a:	460f      	mov	r7, r1
  40236c:	e9dd 0100 	ldrd	r0, r1, [sp]
  402370:	f000 fbfe 	bl	402b70 <__adddf3>
  402374:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
  402378:	460d      	mov	r5, r1
  40237a:	2400      	movs	r4, #0
  40237c:	a380      	add	r3, pc, #512	; (adr r3, 402580 <__ieee754_pow+0x868>)
  40237e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402382:	4620      	mov	r0, r4
  402384:	4629      	mov	r1, r5
  402386:	f000 fda5 	bl	402ed4 <__aeabi_dmul>
  40238a:	4632      	mov	r2, r6
  40238c:	4680      	mov	r8, r0
  40238e:	4689      	mov	r9, r1
  402390:	463b      	mov	r3, r7
  402392:	4620      	mov	r0, r4
  402394:	4629      	mov	r1, r5
  402396:	f000 fbe9 	bl	402b6c <__aeabi_dsub>
  40239a:	4602      	mov	r2, r0
  40239c:	460b      	mov	r3, r1
  40239e:	e9dd 0100 	ldrd	r0, r1, [sp]
  4023a2:	f000 fbe3 	bl	402b6c <__aeabi_dsub>
  4023a6:	a378      	add	r3, pc, #480	; (adr r3, 402588 <__ieee754_pow+0x870>)
  4023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023ac:	f000 fd92 	bl	402ed4 <__aeabi_dmul>
  4023b0:	a377      	add	r3, pc, #476	; (adr r3, 402590 <__ieee754_pow+0x878>)
  4023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023b6:	4606      	mov	r6, r0
  4023b8:	460f      	mov	r7, r1
  4023ba:	4620      	mov	r0, r4
  4023bc:	4629      	mov	r1, r5
  4023be:	f000 fd89 	bl	402ed4 <__aeabi_dmul>
  4023c2:	4602      	mov	r2, r0
  4023c4:	460b      	mov	r3, r1
  4023c6:	4630      	mov	r0, r6
  4023c8:	4639      	mov	r1, r7
  4023ca:	f000 fbd1 	bl	402b70 <__adddf3>
  4023ce:	4606      	mov	r6, r0
  4023d0:	460f      	mov	r7, r1
  4023d2:	4602      	mov	r2, r0
  4023d4:	460b      	mov	r3, r1
  4023d6:	4640      	mov	r0, r8
  4023d8:	4649      	mov	r1, r9
  4023da:	f000 fbc9 	bl	402b70 <__adddf3>
  4023de:	4642      	mov	r2, r8
  4023e0:	464b      	mov	r3, r9
  4023e2:	4604      	mov	r4, r0
  4023e4:	460d      	mov	r5, r1
  4023e6:	f000 fbc1 	bl	402b6c <__aeabi_dsub>
  4023ea:	4602      	mov	r2, r0
  4023ec:	460b      	mov	r3, r1
  4023ee:	4630      	mov	r0, r6
  4023f0:	4639      	mov	r1, r7
  4023f2:	f000 fbbb 	bl	402b6c <__aeabi_dsub>
  4023f6:	4622      	mov	r2, r4
  4023f8:	4680      	mov	r8, r0
  4023fa:	4689      	mov	r9, r1
  4023fc:	462b      	mov	r3, r5
  4023fe:	4620      	mov	r0, r4
  402400:	4629      	mov	r1, r5
  402402:	f000 fd67 	bl	402ed4 <__aeabi_dmul>
  402406:	a364      	add	r3, pc, #400	; (adr r3, 402598 <__ieee754_pow+0x880>)
  402408:	e9d3 2300 	ldrd	r2, r3, [r3]
  40240c:	4606      	mov	r6, r0
  40240e:	460f      	mov	r7, r1
  402410:	f000 fd60 	bl	402ed4 <__aeabi_dmul>
  402414:	a362      	add	r3, pc, #392	; (adr r3, 4025a0 <__ieee754_pow+0x888>)
  402416:	e9d3 2300 	ldrd	r2, r3, [r3]
  40241a:	f000 fba7 	bl	402b6c <__aeabi_dsub>
  40241e:	4632      	mov	r2, r6
  402420:	463b      	mov	r3, r7
  402422:	f000 fd57 	bl	402ed4 <__aeabi_dmul>
  402426:	a360      	add	r3, pc, #384	; (adr r3, 4025a8 <__ieee754_pow+0x890>)
  402428:	e9d3 2300 	ldrd	r2, r3, [r3]
  40242c:	f000 fba0 	bl	402b70 <__adddf3>
  402430:	4632      	mov	r2, r6
  402432:	463b      	mov	r3, r7
  402434:	f000 fd4e 	bl	402ed4 <__aeabi_dmul>
  402438:	a35d      	add	r3, pc, #372	; (adr r3, 4025b0 <__ieee754_pow+0x898>)
  40243a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40243e:	f000 fb95 	bl	402b6c <__aeabi_dsub>
  402442:	4632      	mov	r2, r6
  402444:	463b      	mov	r3, r7
  402446:	f000 fd45 	bl	402ed4 <__aeabi_dmul>
  40244a:	a35b      	add	r3, pc, #364	; (adr r3, 4025b8 <__ieee754_pow+0x8a0>)
  40244c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402450:	f000 fb8e 	bl	402b70 <__adddf3>
  402454:	4632      	mov	r2, r6
  402456:	463b      	mov	r3, r7
  402458:	f000 fd3c 	bl	402ed4 <__aeabi_dmul>
  40245c:	4602      	mov	r2, r0
  40245e:	460b      	mov	r3, r1
  402460:	4620      	mov	r0, r4
  402462:	4629      	mov	r1, r5
  402464:	f000 fb82 	bl	402b6c <__aeabi_dsub>
  402468:	4606      	mov	r6, r0
  40246a:	460f      	mov	r7, r1
  40246c:	4602      	mov	r2, r0
  40246e:	460b      	mov	r3, r1
  402470:	4620      	mov	r0, r4
  402472:	4629      	mov	r1, r5
  402474:	f000 fd2e 	bl	402ed4 <__aeabi_dmul>
  402478:	2200      	movs	r2, #0
  40247a:	e9cd 0100 	strd	r0, r1, [sp]
  40247e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402482:	4630      	mov	r0, r6
  402484:	4639      	mov	r1, r7
  402486:	f000 fb71 	bl	402b6c <__aeabi_dsub>
  40248a:	4602      	mov	r2, r0
  40248c:	460b      	mov	r3, r1
  40248e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402492:	f000 fe49 	bl	403128 <__aeabi_ddiv>
  402496:	4642      	mov	r2, r8
  402498:	4606      	mov	r6, r0
  40249a:	460f      	mov	r7, r1
  40249c:	464b      	mov	r3, r9
  40249e:	4620      	mov	r0, r4
  4024a0:	4629      	mov	r1, r5
  4024a2:	f000 fd17 	bl	402ed4 <__aeabi_dmul>
  4024a6:	4642      	mov	r2, r8
  4024a8:	464b      	mov	r3, r9
  4024aa:	f000 fb61 	bl	402b70 <__adddf3>
  4024ae:	4602      	mov	r2, r0
  4024b0:	460b      	mov	r3, r1
  4024b2:	4630      	mov	r0, r6
  4024b4:	4639      	mov	r1, r7
  4024b6:	f000 fb59 	bl	402b6c <__aeabi_dsub>
  4024ba:	4622      	mov	r2, r4
  4024bc:	462b      	mov	r3, r5
  4024be:	f000 fb55 	bl	402b6c <__aeabi_dsub>
  4024c2:	4602      	mov	r2, r0
  4024c4:	460b      	mov	r3, r1
  4024c6:	2000      	movs	r0, #0
  4024c8:	493f      	ldr	r1, [pc, #252]	; (4025c8 <__ieee754_pow+0x8b0>)
  4024ca:	f000 fb4f 	bl	402b6c <__aeabi_dsub>
  4024ce:	448a      	add	sl, r1
  4024d0:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
  4024d4:	f2c0 8133 	blt.w	40273e <__ieee754_pow+0xa26>
  4024d8:	4651      	mov	r1, sl
  4024da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4024de:	f000 fcf9 	bl	402ed4 <__aeabi_dmul>
  4024e2:	e45b      	b.n	401d9c <__ieee754_pow+0x84>
  4024e4:	4642      	mov	r2, r8
  4024e6:	4640      	mov	r0, r8
  4024e8:	464b      	mov	r3, r9
  4024ea:	4649      	mov	r1, r9
  4024ec:	f000 fcf2 	bl	402ed4 <__aeabi_dmul>
  4024f0:	e454      	b.n	401d9c <__ieee754_pow+0x84>
  4024f2:	f1ba 0f00 	cmp.w	sl, #0
  4024f6:	f6bf ace0 	bge.w	401eba <__ieee754_pow+0x1a2>
  4024fa:	e9dd 3400 	ldrd	r3, r4, [sp]
  4024fe:	4618      	mov	r0, r3
  402500:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  402504:	e44a      	b.n	401d9c <__ieee754_pow+0x84>
  402506:	4b34      	ldr	r3, [pc, #208]	; (4025d8 <__ieee754_pow+0x8c0>)
  402508:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  40250c:	4598      	cmp	r8, r3
  40250e:	f340 80f2 	ble.w	4026f6 <__ieee754_pow+0x9de>
  402512:	4b32      	ldr	r3, [pc, #200]	; (4025dc <__ieee754_pow+0x8c4>)
  402514:	440b      	add	r3, r1
  402516:	4303      	orrs	r3, r0
  402518:	d10c      	bne.n	402534 <__ieee754_pow+0x81c>
  40251a:	4632      	mov	r2, r6
  40251c:	463b      	mov	r3, r7
  40251e:	f000 fb25 	bl	402b6c <__aeabi_dsub>
  402522:	4602      	mov	r2, r0
  402524:	460b      	mov	r3, r1
  402526:	e9dd 0100 	ldrd	r0, r1, [sp]
  40252a:	f000 ff4f 	bl	4033cc <__aeabi_dcmple>
  40252e:	2800      	cmp	r0, #0
  402530:	f43f aef3 	beq.w	40231a <__ieee754_pow+0x602>
  402534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402538:	a321      	add	r3, pc, #132	; (adr r3, 4025c0 <__ieee754_pow+0x8a8>)
  40253a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40253e:	f000 fcc9 	bl	402ed4 <__aeabi_dmul>
  402542:	a31f      	add	r3, pc, #124	; (adr r3, 4025c0 <__ieee754_pow+0x8a8>)
  402544:	e9d3 2300 	ldrd	r2, r3, [r3]
  402548:	f000 fcc4 	bl	402ed4 <__aeabi_dmul>
  40254c:	e426      	b.n	401d9c <__ieee754_pow+0x84>
  40254e:	4602      	mov	r2, r0
  402550:	460b      	mov	r3, r1
  402552:	2000      	movs	r0, #0
  402554:	491c      	ldr	r1, [pc, #112]	; (4025c8 <__ieee754_pow+0x8b0>)
  402556:	f000 fde7 	bl	403128 <__aeabi_ddiv>
  40255a:	e43c      	b.n	401dd6 <__ieee754_pow+0xbe>
  40255c:	2200      	movs	r2, #0
  40255e:	2300      	movs	r3, #0
  402560:	e9cd 2308 	strd	r2, r3, [sp, #32]
  402564:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402568:	4b17      	ldr	r3, [pc, #92]	; (4025c8 <__ieee754_pow+0x8b0>)
  40256a:	2200      	movs	r2, #0
  40256c:	2700      	movs	r7, #0
  40256e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402572:	e4e6      	b.n	401f42 <__ieee754_pow+0x22a>
  402574:	f3af 8000 	nop.w
  402578:	652b82fe 	.word	0x652b82fe
  40257c:	3c971547 	.word	0x3c971547
  402580:	00000000 	.word	0x00000000
  402584:	3fe62e43 	.word	0x3fe62e43
  402588:	fefa39ef 	.word	0xfefa39ef
  40258c:	3fe62e42 	.word	0x3fe62e42
  402590:	0ca86c39 	.word	0x0ca86c39
  402594:	be205c61 	.word	0xbe205c61
  402598:	72bea4d0 	.word	0x72bea4d0
  40259c:	3e663769 	.word	0x3e663769
  4025a0:	c5d26bf1 	.word	0xc5d26bf1
  4025a4:	3ebbbd41 	.word	0x3ebbbd41
  4025a8:	af25de2c 	.word	0xaf25de2c
  4025ac:	3f11566a 	.word	0x3f11566a
  4025b0:	16bebd93 	.word	0x16bebd93
  4025b4:	3f66c16c 	.word	0x3f66c16c
  4025b8:	5555553e 	.word	0x5555553e
  4025bc:	3fc55555 	.word	0x3fc55555
  4025c0:	c2f8f359 	.word	0xc2f8f359
  4025c4:	01a56e1f 	.word	0x01a56e1f
  4025c8:	3ff00000 	.word	0x3ff00000
  4025cc:	bff00000 	.word	0xbff00000
  4025d0:	408fffff 	.word	0x408fffff
  4025d4:	000fffff 	.word	0x000fffff
  4025d8:	4090cbff 	.word	0x4090cbff
  4025dc:	3f6f3400 	.word	0x3f6f3400
  4025e0:	4b6b      	ldr	r3, [pc, #428]	; (402790 <__ieee754_pow+0xa78>)
  4025e2:	429e      	cmp	r6, r3
  4025e4:	f77f ac66 	ble.w	401eb4 <__ieee754_pow+0x19c>
  4025e8:	4b6a      	ldr	r3, [pc, #424]	; (402794 <__ieee754_pow+0xa7c>)
  4025ea:	429e      	cmp	r6, r3
  4025ec:	f73f ac13 	bgt.w	401e16 <__ieee754_pow+0xfe>
  4025f0:	2200      	movs	r2, #0
  4025f2:	4b68      	ldr	r3, [pc, #416]	; (402794 <__ieee754_pow+0xa7c>)
  4025f4:	f000 faba 	bl	402b6c <__aeabi_dsub>
  4025f8:	a357      	add	r3, pc, #348	; (adr r3, 402758 <__ieee754_pow+0xa40>)
  4025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025fe:	4606      	mov	r6, r0
  402600:	460f      	mov	r7, r1
  402602:	f000 fc67 	bl	402ed4 <__aeabi_dmul>
  402606:	a356      	add	r3, pc, #344	; (adr r3, 402760 <__ieee754_pow+0xa48>)
  402608:	e9d3 2300 	ldrd	r2, r3, [r3]
  40260c:	4680      	mov	r8, r0
  40260e:	4689      	mov	r9, r1
  402610:	4630      	mov	r0, r6
  402612:	4639      	mov	r1, r7
  402614:	f000 fc5e 	bl	402ed4 <__aeabi_dmul>
  402618:	2200      	movs	r2, #0
  40261a:	4682      	mov	sl, r0
  40261c:	468b      	mov	fp, r1
  40261e:	4b5e      	ldr	r3, [pc, #376]	; (402798 <__ieee754_pow+0xa80>)
  402620:	4630      	mov	r0, r6
  402622:	4639      	mov	r1, r7
  402624:	f000 fc56 	bl	402ed4 <__aeabi_dmul>
  402628:	4602      	mov	r2, r0
  40262a:	460b      	mov	r3, r1
  40262c:	a14e      	add	r1, pc, #312	; (adr r1, 402768 <__ieee754_pow+0xa50>)
  40262e:	e9d1 0100 	ldrd	r0, r1, [r1]
  402632:	f000 fa9b 	bl	402b6c <__aeabi_dsub>
  402636:	4632      	mov	r2, r6
  402638:	463b      	mov	r3, r7
  40263a:	f000 fc4b 	bl	402ed4 <__aeabi_dmul>
  40263e:	4602      	mov	r2, r0
  402640:	460b      	mov	r3, r1
  402642:	2000      	movs	r0, #0
  402644:	4955      	ldr	r1, [pc, #340]	; (40279c <__ieee754_pow+0xa84>)
  402646:	f000 fa91 	bl	402b6c <__aeabi_dsub>
  40264a:	4632      	mov	r2, r6
  40264c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402650:	463b      	mov	r3, r7
  402652:	4630      	mov	r0, r6
  402654:	4639      	mov	r1, r7
  402656:	f000 fc3d 	bl	402ed4 <__aeabi_dmul>
  40265a:	4602      	mov	r2, r0
  40265c:	460b      	mov	r3, r1
  40265e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402662:	f000 fc37 	bl	402ed4 <__aeabi_dmul>
  402666:	a342      	add	r3, pc, #264	; (adr r3, 402770 <__ieee754_pow+0xa58>)
  402668:	e9d3 2300 	ldrd	r2, r3, [r3]
  40266c:	f000 fc32 	bl	402ed4 <__aeabi_dmul>
  402670:	4602      	mov	r2, r0
  402672:	460b      	mov	r3, r1
  402674:	4650      	mov	r0, sl
  402676:	4659      	mov	r1, fp
  402678:	f000 fa78 	bl	402b6c <__aeabi_dsub>
  40267c:	4602      	mov	r2, r0
  40267e:	460b      	mov	r3, r1
  402680:	4606      	mov	r6, r0
  402682:	460f      	mov	r7, r1
  402684:	4640      	mov	r0, r8
  402686:	4649      	mov	r1, r9
  402688:	f000 fa72 	bl	402b70 <__adddf3>
  40268c:	4642      	mov	r2, r8
  40268e:	464b      	mov	r3, r9
  402690:	2000      	movs	r0, #0
  402692:	4682      	mov	sl, r0
  402694:	468b      	mov	fp, r1
  402696:	f000 fa69 	bl	402b6c <__aeabi_dsub>
  40269a:	4602      	mov	r2, r0
  40269c:	460b      	mov	r3, r1
  40269e:	4630      	mov	r0, r6
  4026a0:	4639      	mov	r1, r7
  4026a2:	f000 fa63 	bl	402b6c <__aeabi_dsub>
  4026a6:	4680      	mov	r8, r0
  4026a8:	4689      	mov	r9, r1
  4026aa:	e5d4      	b.n	402256 <__ieee754_pow+0x53e>
  4026ac:	4642      	mov	r2, r8
  4026ae:	464b      	mov	r3, r9
  4026b0:	2000      	movs	r0, #0
  4026b2:	4938      	ldr	r1, [pc, #224]	; (402794 <__ieee754_pow+0xa7c>)
  4026b4:	f000 fd38 	bl	403128 <__aeabi_ddiv>
  4026b8:	f7ff bb70 	b.w	401d9c <__ieee754_pow+0x84>
  4026bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4026c0:	a32d      	add	r3, pc, #180	; (adr r3, 402778 <__ieee754_pow+0xa60>)
  4026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026c6:	f000 fc05 	bl	402ed4 <__aeabi_dmul>
  4026ca:	a32b      	add	r3, pc, #172	; (adr r3, 402778 <__ieee754_pow+0xa60>)
  4026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026d0:	f000 fc00 	bl	402ed4 <__aeabi_dmul>
  4026d4:	f7ff bb62 	b.w	401d9c <__ieee754_pow+0x84>
  4026d8:	f1be 0f00 	cmp.w	lr, #0
  4026dc:	f47f ab69 	bne.w	401db2 <__ieee754_pow+0x9a>
  4026e0:	f1c3 0314 	rsb	r3, r3, #20
  4026e4:	fa47 f203 	asr.w	r2, r7, r3
  4026e8:	fa02 f303 	lsl.w	r3, r2, r3
  4026ec:	429f      	cmp	r7, r3
  4026ee:	d02a      	beq.n	402746 <__ieee754_pow+0xa2e>
  4026f0:	4674      	mov	r4, lr
  4026f2:	f7ff bb36 	b.w	401d62 <__ieee754_pow+0x4a>
  4026f6:	4b29      	ldr	r3, [pc, #164]	; (40279c <__ieee754_pow+0xa84>)
  4026f8:	4598      	cmp	r8, r3
  4026fa:	f73f ae0e 	bgt.w	40231a <__ieee754_pow+0x602>
  4026fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402702:	4692      	mov	sl, r2
  402704:	4693      	mov	fp, r2
  402706:	e638      	b.n	40237a <__ieee754_pow+0x662>
  402708:	4602      	mov	r2, r0
  40270a:	460b      	mov	r3, r1
  40270c:	f000 fa2e 	bl	402b6c <__aeabi_dsub>
  402710:	4602      	mov	r2, r0
  402712:	460b      	mov	r3, r1
  402714:	f000 fd08 	bl	403128 <__aeabi_ddiv>
  402718:	f7ff bb40 	b.w	401d9c <__ieee754_pow+0x84>
  40271c:	a318      	add	r3, pc, #96	; (adr r3, 402780 <__ieee754_pow+0xa68>)
  40271e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402722:	e9cd 2308 	strd	r2, r3, [sp, #32]
  402726:	a318      	add	r3, pc, #96	; (adr r3, 402788 <__ieee754_pow+0xa70>)
  402728:	e9d3 2300 	ldrd	r2, r3, [r3]
  40272c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402730:	4b1b      	ldr	r3, [pc, #108]	; (4027a0 <__ieee754_pow+0xa88>)
  402732:	2200      	movs	r2, #0
  402734:	f44f 2780 	mov.w	r7, #262144	; 0x40000
  402738:	e9cd 2306 	strd	r2, r3, [sp, #24]
  40273c:	e401      	b.n	401f42 <__ieee754_pow+0x22a>
  40273e:	465a      	mov	r2, fp
  402740:	f000 f98a 	bl	402a58 <scalbn>
  402744:	e6c9      	b.n	4024da <__ieee754_pow+0x7c2>
  402746:	f002 0201 	and.w	r2, r2, #1
  40274a:	f1c2 0402 	rsb	r4, r2, #2
  40274e:	f7ff bb08 	b.w	401d62 <__ieee754_pow+0x4a>
  402752:	bf00      	nop
  402754:	f3af 8000 	nop.w
  402758:	60000000 	.word	0x60000000
  40275c:	3ff71547 	.word	0x3ff71547
  402760:	f85ddf44 	.word	0xf85ddf44
  402764:	3e54ae0b 	.word	0x3e54ae0b
  402768:	55555555 	.word	0x55555555
  40276c:	3fd55555 	.word	0x3fd55555
  402770:	652b82fe 	.word	0x652b82fe
  402774:	3ff71547 	.word	0x3ff71547
  402778:	8800759c 	.word	0x8800759c
  40277c:	7e37e43c 	.word	0x7e37e43c
  402780:	40000000 	.word	0x40000000
  402784:	3fe2b803 	.word	0x3fe2b803
  402788:	43cfd006 	.word	0x43cfd006
  40278c:	3e4cfdeb 	.word	0x3e4cfdeb
  402790:	3feffffe 	.word	0x3feffffe
  402794:	3ff00000 	.word	0x3ff00000
  402798:	3fd00000 	.word	0x3fd00000
  40279c:	3fe00000 	.word	0x3fe00000
  4027a0:	3ff80000 	.word	0x3ff80000

004027a4 <__ieee754_sqrt>:
  4027a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4027a8:	4f5b      	ldr	r7, [pc, #364]	; (402918 <__ieee754_sqrt+0x174>)
  4027aa:	438f      	bics	r7, r1
  4027ac:	4605      	mov	r5, r0
  4027ae:	460c      	mov	r4, r1
  4027b0:	f000 8092 	beq.w	4028d8 <__ieee754_sqrt+0x134>
  4027b4:	2900      	cmp	r1, #0
  4027b6:	460b      	mov	r3, r1
  4027b8:	4602      	mov	r2, r0
  4027ba:	dd6f      	ble.n	40289c <__ieee754_sqrt+0xf8>
  4027bc:	150f      	asrs	r7, r1, #20
  4027be:	d07b      	beq.n	4028b8 <__ieee754_sqrt+0x114>
  4027c0:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4027c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4027c8:	07f8      	lsls	r0, r7, #31
  4027ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4027ce:	d45c      	bmi.n	40288a <__ieee754_sqrt+0xe6>
  4027d0:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4027d4:	2600      	movs	r6, #0
  4027d6:	440b      	add	r3, r1
  4027d8:	107f      	asrs	r7, r7, #1
  4027da:	0052      	lsls	r2, r2, #1
  4027dc:	46b6      	mov	lr, r6
  4027de:	2016      	movs	r0, #22
  4027e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4027e4:	eb0e 0401 	add.w	r4, lr, r1
  4027e8:	429c      	cmp	r4, r3
  4027ea:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4027ee:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4027f2:	dc03      	bgt.n	4027fc <__ieee754_sqrt+0x58>
  4027f4:	1b1b      	subs	r3, r3, r4
  4027f6:	eb04 0e01 	add.w	lr, r4, r1
  4027fa:	440e      	add	r6, r1
  4027fc:	3801      	subs	r0, #1
  4027fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  402802:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402806:	d1ed      	bne.n	4027e4 <__ieee754_sqrt+0x40>
  402808:	4684      	mov	ip, r0
  40280a:	2420      	movs	r4, #32
  40280c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402810:	e009      	b.n	402826 <__ieee754_sqrt+0x82>
  402812:	d020      	beq.n	402856 <__ieee754_sqrt+0xb2>
  402814:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  402818:	3c01      	subs	r4, #1
  40281a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40281e:	442b      	add	r3, r5
  402820:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402824:	d020      	beq.n	402868 <__ieee754_sqrt+0xc4>
  402826:	4573      	cmp	r3, lr
  402828:	eb01 050c 	add.w	r5, r1, ip
  40282c:	ddf1      	ble.n	402812 <__ieee754_sqrt+0x6e>
  40282e:	2d00      	cmp	r5, #0
  402830:	eb05 0c01 	add.w	ip, r5, r1
  402834:	db09      	blt.n	40284a <__ieee754_sqrt+0xa6>
  402836:	46f0      	mov	r8, lr
  402838:	4295      	cmp	r5, r2
  40283a:	eba3 030e 	sub.w	r3, r3, lr
  40283e:	d900      	bls.n	402842 <__ieee754_sqrt+0x9e>
  402840:	3b01      	subs	r3, #1
  402842:	1b52      	subs	r2, r2, r5
  402844:	4408      	add	r0, r1
  402846:	46c6      	mov	lr, r8
  402848:	e7e4      	b.n	402814 <__ieee754_sqrt+0x70>
  40284a:	f1bc 0f00 	cmp.w	ip, #0
  40284e:	dbf2      	blt.n	402836 <__ieee754_sqrt+0x92>
  402850:	f10e 0801 	add.w	r8, lr, #1
  402854:	e7f0      	b.n	402838 <__ieee754_sqrt+0x94>
  402856:	4295      	cmp	r5, r2
  402858:	d8dc      	bhi.n	402814 <__ieee754_sqrt+0x70>
  40285a:	2d00      	cmp	r5, #0
  40285c:	eb05 0c01 	add.w	ip, r5, r1
  402860:	db44      	blt.n	4028ec <__ieee754_sqrt+0x148>
  402862:	4698      	mov	r8, r3
  402864:	2300      	movs	r3, #0
  402866:	e7ec      	b.n	402842 <__ieee754_sqrt+0x9e>
  402868:	4313      	orrs	r3, r2
  40286a:	d113      	bne.n	402894 <__ieee754_sqrt+0xf0>
  40286c:	0840      	lsrs	r0, r0, #1
  40286e:	1073      	asrs	r3, r6, #1
  402870:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402874:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402878:	07f2      	lsls	r2, r6, #31
  40287a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  40287e:	bf48      	it	mi
  402880:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402884:	4649      	mov	r1, r9
  402886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40288a:	005b      	lsls	r3, r3, #1
  40288c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  402890:	0052      	lsls	r2, r2, #1
  402892:	e79d      	b.n	4027d0 <__ieee754_sqrt+0x2c>
  402894:	1c41      	adds	r1, r0, #1
  402896:	d02d      	beq.n	4028f4 <__ieee754_sqrt+0x150>
  402898:	3001      	adds	r0, #1
  40289a:	e7e7      	b.n	40286c <__ieee754_sqrt+0xc8>
  40289c:	4606      	mov	r6, r0
  40289e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4028a2:	433e      	orrs	r6, r7
  4028a4:	d0ef      	beq.n	402886 <__ieee754_sqrt+0xe2>
  4028a6:	bb69      	cbnz	r1, 402904 <__ieee754_sqrt+0x160>
  4028a8:	460f      	mov	r7, r1
  4028aa:	0ad3      	lsrs	r3, r2, #11
  4028ac:	3f15      	subs	r7, #21
  4028ae:	0552      	lsls	r2, r2, #21
  4028b0:	2b00      	cmp	r3, #0
  4028b2:	d0fa      	beq.n	4028aa <__ieee754_sqrt+0x106>
  4028b4:	02de      	lsls	r6, r3, #11
  4028b6:	d420      	bmi.n	4028fa <__ieee754_sqrt+0x156>
  4028b8:	2400      	movs	r4, #0
  4028ba:	e000      	b.n	4028be <__ieee754_sqrt+0x11a>
  4028bc:	4604      	mov	r4, r0
  4028be:	005b      	lsls	r3, r3, #1
  4028c0:	02dd      	lsls	r5, r3, #11
  4028c2:	f104 0001 	add.w	r0, r4, #1
  4028c6:	d5f9      	bpl.n	4028bc <__ieee754_sqrt+0x118>
  4028c8:	f1c0 0120 	rsb	r1, r0, #32
  4028cc:	fa22 f101 	lsr.w	r1, r2, r1
  4028d0:	430b      	orrs	r3, r1
  4028d2:	1b3f      	subs	r7, r7, r4
  4028d4:	4082      	lsls	r2, r0
  4028d6:	e773      	b.n	4027c0 <__ieee754_sqrt+0x1c>
  4028d8:	4602      	mov	r2, r0
  4028da:	460b      	mov	r3, r1
  4028dc:	f000 fafa 	bl	402ed4 <__aeabi_dmul>
  4028e0:	462a      	mov	r2, r5
  4028e2:	4623      	mov	r3, r4
  4028e4:	f000 f944 	bl	402b70 <__adddf3>
  4028e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4028ec:	f1bc 0f00 	cmp.w	ip, #0
  4028f0:	daae      	bge.n	402850 <__ieee754_sqrt+0xac>
  4028f2:	e7b6      	b.n	402862 <__ieee754_sqrt+0xbe>
  4028f4:	3601      	adds	r6, #1
  4028f6:	4620      	mov	r0, r4
  4028f8:	e7b9      	b.n	40286e <__ieee754_sqrt+0xca>
  4028fa:	2000      	movs	r0, #0
  4028fc:	2120      	movs	r1, #32
  4028fe:	f04f 34ff 	mov.w	r4, #4294967295
  402902:	e7e3      	b.n	4028cc <__ieee754_sqrt+0x128>
  402904:	4602      	mov	r2, r0
  402906:	460b      	mov	r3, r1
  402908:	f000 f930 	bl	402b6c <__aeabi_dsub>
  40290c:	4602      	mov	r2, r0
  40290e:	460b      	mov	r3, r1
  402910:	f000 fc0a 	bl	403128 <__aeabi_ddiv>
  402914:	e7b7      	b.n	402886 <__ieee754_sqrt+0xe2>
  402916:	bf00      	nop
  402918:	7ff00000 	.word	0x7ff00000

0040291c <fabs>:
  40291c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402920:	4770      	bx	lr
  402922:	bf00      	nop

00402924 <finite>:
  402924:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  402928:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
  40292c:	0fc0      	lsrs	r0, r0, #31
  40292e:	4770      	bx	lr

00402930 <matherr>:
  402930:	2000      	movs	r0, #0
  402932:	4770      	bx	lr

00402934 <nan>:
  402934:	2000      	movs	r0, #0
  402936:	4901      	ldr	r1, [pc, #4]	; (40293c <nan+0x8>)
  402938:	4770      	bx	lr
  40293a:	bf00      	nop
  40293c:	7ff80000 	.word	0x7ff80000

00402940 <rint>:
  402940:	b5f0      	push	{r4, r5, r6, r7, lr}
  402942:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
  402946:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
  40294a:	2e13      	cmp	r6, #19
  40294c:	b083      	sub	sp, #12
  40294e:	4602      	mov	r2, r0
  402950:	460b      	mov	r3, r1
  402952:	460c      	mov	r4, r1
  402954:	ea4f 75d1 	mov.w	r5, r1, lsr #31
  402958:	4607      	mov	r7, r0
  40295a:	dc2e      	bgt.n	4029ba <rint+0x7a>
  40295c:	2e00      	cmp	r6, #0
  40295e:	db49      	blt.n	4029f4 <rint+0xb4>
  402960:	493a      	ldr	r1, [pc, #232]	; (402a4c <rint+0x10c>)
  402962:	4131      	asrs	r1, r6
  402964:	ea03 0001 	and.w	r0, r3, r1
  402968:	4310      	orrs	r0, r2
  40296a:	d02b      	beq.n	4029c4 <rint+0x84>
  40296c:	0849      	lsrs	r1, r1, #1
  40296e:	400b      	ands	r3, r1
  402970:	ea53 0702 	orrs.w	r7, r3, r2
  402974:	d00c      	beq.n	402990 <rint+0x50>
  402976:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  40297a:	2e13      	cmp	r6, #19
  40297c:	ea24 0101 	bic.w	r1, r4, r1
  402980:	fa43 f406 	asr.w	r4, r3, r6
  402984:	ea44 0401 	orr.w	r4, r4, r1
  402988:	bf0c      	ite	eq
  40298a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
  40298e:	2700      	movne	r7, #0
  402990:	4b2f      	ldr	r3, [pc, #188]	; (402a50 <rint+0x110>)
  402992:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  402996:	4621      	mov	r1, r4
  402998:	e9d5 4500 	ldrd	r4, r5, [r5]
  40299c:	4638      	mov	r0, r7
  40299e:	4622      	mov	r2, r4
  4029a0:	462b      	mov	r3, r5
  4029a2:	f000 f8e5 	bl	402b70 <__adddf3>
  4029a6:	e9cd 0100 	strd	r0, r1, [sp]
  4029aa:	4622      	mov	r2, r4
  4029ac:	462b      	mov	r3, r5
  4029ae:	e9dd 0100 	ldrd	r0, r1, [sp]
  4029b2:	f000 f8db 	bl	402b6c <__aeabi_dsub>
  4029b6:	b003      	add	sp, #12
  4029b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029ba:	2e33      	cmp	r6, #51	; 0x33
  4029bc:	dd06      	ble.n	4029cc <rint+0x8c>
  4029be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  4029c2:	d040      	beq.n	402a46 <rint+0x106>
  4029c4:	4610      	mov	r0, r2
  4029c6:	4619      	mov	r1, r3
  4029c8:	b003      	add	sp, #12
  4029ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029cc:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
  4029d0:	f04f 31ff 	mov.w	r1, #4294967295
  4029d4:	fa21 f10e 	lsr.w	r1, r1, lr
  4029d8:	4208      	tst	r0, r1
  4029da:	d0f3      	beq.n	4029c4 <rint+0x84>
  4029dc:	0849      	lsrs	r1, r1, #1
  4029de:	4208      	tst	r0, r1
  4029e0:	d0d6      	beq.n	402990 <rint+0x50>
  4029e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4029e6:	ea20 0101 	bic.w	r1, r0, r1
  4029ea:	fa43 fe0e 	asr.w	lr, r3, lr
  4029ee:	ea4e 0701 	orr.w	r7, lr, r1
  4029f2:	e7cd      	b.n	402990 <rint+0x50>
  4029f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4029f8:	4301      	orrs	r1, r0
  4029fa:	d0e3      	beq.n	4029c4 <rint+0x84>
  4029fc:	f3c3 0113 	ubfx	r1, r3, #0, #20
  402a00:	4e13      	ldr	r6, [pc, #76]	; (402a50 <rint+0x110>)
  402a02:	4301      	orrs	r1, r0
  402a04:	f1c1 0c00 	rsb	ip, r1, #0
  402a08:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
  402a0c:	e9d6 6700 	ldrd	r6, r7, [r6]
  402a10:	ea4c 0c01 	orr.w	ip, ip, r1
  402a14:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
  402a18:	0c5c      	lsrs	r4, r3, #17
  402a1a:	0464      	lsls	r4, r4, #17
  402a1c:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
  402a20:	ea43 0104 	orr.w	r1, r3, r4
  402a24:	4632      	mov	r2, r6
  402a26:	463b      	mov	r3, r7
  402a28:	f000 f8a2 	bl	402b70 <__adddf3>
  402a2c:	e9cd 0100 	strd	r0, r1, [sp]
  402a30:	4632      	mov	r2, r6
  402a32:	463b      	mov	r3, r7
  402a34:	e9dd 0100 	ldrd	r0, r1, [sp]
  402a38:	f000 f898 	bl	402b6c <__aeabi_dsub>
  402a3c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  402a40:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
  402a44:	e7c0      	b.n	4029c8 <rint+0x88>
  402a46:	f000 f893 	bl	402b70 <__adddf3>
  402a4a:	e7bd      	b.n	4029c8 <rint+0x88>
  402a4c:	000fffff 	.word	0x000fffff
  402a50:	00406538 	.word	0x00406538
  402a54:	00000000 	.word	0x00000000

00402a58 <scalbn>:
  402a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402a5a:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402a5e:	4604      	mov	r4, r0
  402a60:	460d      	mov	r5, r1
  402a62:	460b      	mov	r3, r1
  402a64:	4617      	mov	r7, r2
  402a66:	bb0e      	cbnz	r6, 402aac <scalbn+0x54>
  402a68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402a6c:	4303      	orrs	r3, r0
  402a6e:	4686      	mov	lr, r0
  402a70:	d025      	beq.n	402abe <scalbn+0x66>
  402a72:	2200      	movs	r2, #0
  402a74:	4b34      	ldr	r3, [pc, #208]	; (402b48 <scalbn+0xf0>)
  402a76:	f000 fa2d 	bl	402ed4 <__aeabi_dmul>
  402a7a:	4a34      	ldr	r2, [pc, #208]	; (402b4c <scalbn+0xf4>)
  402a7c:	4297      	cmp	r7, r2
  402a7e:	4604      	mov	r4, r0
  402a80:	460d      	mov	r5, r1
  402a82:	460b      	mov	r3, r1
  402a84:	db2a      	blt.n	402adc <scalbn+0x84>
  402a86:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402a8a:	3e36      	subs	r6, #54	; 0x36
  402a8c:	443e      	add	r6, r7
  402a8e:	f240 72fe 	movw	r2, #2046	; 0x7fe
  402a92:	4296      	cmp	r6, r2
  402a94:	dc28      	bgt.n	402ae8 <scalbn+0x90>
  402a96:	2e00      	cmp	r6, #0
  402a98:	dd12      	ble.n	402ac0 <scalbn+0x68>
  402a9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402a9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402aa2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402aa6:	4620      	mov	r0, r4
  402aa8:	4629      	mov	r1, r5
  402aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402aac:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402ab0:	4296      	cmp	r6, r2
  402ab2:	d1eb      	bne.n	402a8c <scalbn+0x34>
  402ab4:	4602      	mov	r2, r0
  402ab6:	460b      	mov	r3, r1
  402ab8:	f000 f85a 	bl	402b70 <__adddf3>
  402abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ac0:	f116 0f35 	cmn.w	r6, #53	; 0x35
  402ac4:	da1d      	bge.n	402b02 <scalbn+0xaa>
  402ac6:	f24c 3350 	movw	r3, #50000	; 0xc350
  402aca:	429f      	cmp	r7, r3
  402acc:	4622      	mov	r2, r4
  402ace:	462b      	mov	r3, r5
  402ad0:	dc25      	bgt.n	402b1e <scalbn+0xc6>
  402ad2:	a119      	add	r1, pc, #100	; (adr r1, 402b38 <scalbn+0xe0>)
  402ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
  402ad8:	f000 f83c 	bl	402b54 <copysign>
  402adc:	a316      	add	r3, pc, #88	; (adr r3, 402b38 <scalbn+0xe0>)
  402ade:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ae2:	f000 f9f7 	bl	402ed4 <__aeabi_dmul>
  402ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ae8:	4622      	mov	r2, r4
  402aea:	462b      	mov	r3, r5
  402aec:	a114      	add	r1, pc, #80	; (adr r1, 402b40 <scalbn+0xe8>)
  402aee:	e9d1 0100 	ldrd	r0, r1, [r1]
  402af2:	f000 f82f 	bl	402b54 <copysign>
  402af6:	a312      	add	r3, pc, #72	; (adr r3, 402b40 <scalbn+0xe8>)
  402af8:	e9d3 2300 	ldrd	r2, r3, [r3]
  402afc:	f000 f9ea 	bl	402ed4 <__aeabi_dmul>
  402b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402b06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402b0a:	3636      	adds	r6, #54	; 0x36
  402b0c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402b10:	4620      	mov	r0, r4
  402b12:	4629      	mov	r1, r5
  402b14:	2200      	movs	r2, #0
  402b16:	4b0e      	ldr	r3, [pc, #56]	; (402b50 <scalbn+0xf8>)
  402b18:	f000 f9dc 	bl	402ed4 <__aeabi_dmul>
  402b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b1e:	a108      	add	r1, pc, #32	; (adr r1, 402b40 <scalbn+0xe8>)
  402b20:	e9d1 0100 	ldrd	r0, r1, [r1]
  402b24:	f000 f816 	bl	402b54 <copysign>
  402b28:	a305      	add	r3, pc, #20	; (adr r3, 402b40 <scalbn+0xe8>)
  402b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402b2e:	f000 f9d1 	bl	402ed4 <__aeabi_dmul>
  402b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b34:	f3af 8000 	nop.w
  402b38:	c2f8f359 	.word	0xc2f8f359
  402b3c:	01a56e1f 	.word	0x01a56e1f
  402b40:	8800759c 	.word	0x8800759c
  402b44:	7e37e43c 	.word	0x7e37e43c
  402b48:	43500000 	.word	0x43500000
  402b4c:	ffff3cb0 	.word	0xffff3cb0
  402b50:	3c900000 	.word	0x3c900000

00402b54 <copysign>:
  402b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  402b58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  402b5c:	ea42 0103 	orr.w	r1, r2, r3
  402b60:	4770      	bx	lr
  402b62:	bf00      	nop

00402b64 <__aeabi_drsub>:
  402b64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402b68:	e002      	b.n	402b70 <__adddf3>
  402b6a:	bf00      	nop

00402b6c <__aeabi_dsub>:
  402b6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402b70 <__adddf3>:
  402b70:	b530      	push	{r4, r5, lr}
  402b72:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402b76:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402b7a:	ea94 0f05 	teq	r4, r5
  402b7e:	bf08      	it	eq
  402b80:	ea90 0f02 	teqeq	r0, r2
  402b84:	bf1f      	itttt	ne
  402b86:	ea54 0c00 	orrsne.w	ip, r4, r0
  402b8a:	ea55 0c02 	orrsne.w	ip, r5, r2
  402b8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402b92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402b96:	f000 80e2 	beq.w	402d5e <__adddf3+0x1ee>
  402b9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402b9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402ba2:	bfb8      	it	lt
  402ba4:	426d      	neglt	r5, r5
  402ba6:	dd0c      	ble.n	402bc2 <__adddf3+0x52>
  402ba8:	442c      	add	r4, r5
  402baa:	ea80 0202 	eor.w	r2, r0, r2
  402bae:	ea81 0303 	eor.w	r3, r1, r3
  402bb2:	ea82 0000 	eor.w	r0, r2, r0
  402bb6:	ea83 0101 	eor.w	r1, r3, r1
  402bba:	ea80 0202 	eor.w	r2, r0, r2
  402bbe:	ea81 0303 	eor.w	r3, r1, r3
  402bc2:	2d36      	cmp	r5, #54	; 0x36
  402bc4:	bf88      	it	hi
  402bc6:	bd30      	pophi	{r4, r5, pc}
  402bc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402bcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402bd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402bd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402bd8:	d002      	beq.n	402be0 <__adddf3+0x70>
  402bda:	4240      	negs	r0, r0
  402bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402be0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402be4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402be8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402bec:	d002      	beq.n	402bf4 <__adddf3+0x84>
  402bee:	4252      	negs	r2, r2
  402bf0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402bf4:	ea94 0f05 	teq	r4, r5
  402bf8:	f000 80a7 	beq.w	402d4a <__adddf3+0x1da>
  402bfc:	f1a4 0401 	sub.w	r4, r4, #1
  402c00:	f1d5 0e20 	rsbs	lr, r5, #32
  402c04:	db0d      	blt.n	402c22 <__adddf3+0xb2>
  402c06:	fa02 fc0e 	lsl.w	ip, r2, lr
  402c0a:	fa22 f205 	lsr.w	r2, r2, r5
  402c0e:	1880      	adds	r0, r0, r2
  402c10:	f141 0100 	adc.w	r1, r1, #0
  402c14:	fa03 f20e 	lsl.w	r2, r3, lr
  402c18:	1880      	adds	r0, r0, r2
  402c1a:	fa43 f305 	asr.w	r3, r3, r5
  402c1e:	4159      	adcs	r1, r3
  402c20:	e00e      	b.n	402c40 <__adddf3+0xd0>
  402c22:	f1a5 0520 	sub.w	r5, r5, #32
  402c26:	f10e 0e20 	add.w	lr, lr, #32
  402c2a:	2a01      	cmp	r2, #1
  402c2c:	fa03 fc0e 	lsl.w	ip, r3, lr
  402c30:	bf28      	it	cs
  402c32:	f04c 0c02 	orrcs.w	ip, ip, #2
  402c36:	fa43 f305 	asr.w	r3, r3, r5
  402c3a:	18c0      	adds	r0, r0, r3
  402c3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402c40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402c44:	d507      	bpl.n	402c56 <__adddf3+0xe6>
  402c46:	f04f 0e00 	mov.w	lr, #0
  402c4a:	f1dc 0c00 	rsbs	ip, ip, #0
  402c4e:	eb7e 0000 	sbcs.w	r0, lr, r0
  402c52:	eb6e 0101 	sbc.w	r1, lr, r1
  402c56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402c5a:	d31b      	bcc.n	402c94 <__adddf3+0x124>
  402c5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402c60:	d30c      	bcc.n	402c7c <__adddf3+0x10c>
  402c62:	0849      	lsrs	r1, r1, #1
  402c64:	ea5f 0030 	movs.w	r0, r0, rrx
  402c68:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402c6c:	f104 0401 	add.w	r4, r4, #1
  402c70:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402c74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402c78:	f080 809a 	bcs.w	402db0 <__adddf3+0x240>
  402c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402c80:	bf08      	it	eq
  402c82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402c86:	f150 0000 	adcs.w	r0, r0, #0
  402c8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402c8e:	ea41 0105 	orr.w	r1, r1, r5
  402c92:	bd30      	pop	{r4, r5, pc}
  402c94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402c98:	4140      	adcs	r0, r0
  402c9a:	eb41 0101 	adc.w	r1, r1, r1
  402c9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402ca2:	f1a4 0401 	sub.w	r4, r4, #1
  402ca6:	d1e9      	bne.n	402c7c <__adddf3+0x10c>
  402ca8:	f091 0f00 	teq	r1, #0
  402cac:	bf04      	itt	eq
  402cae:	4601      	moveq	r1, r0
  402cb0:	2000      	moveq	r0, #0
  402cb2:	fab1 f381 	clz	r3, r1
  402cb6:	bf08      	it	eq
  402cb8:	3320      	addeq	r3, #32
  402cba:	f1a3 030b 	sub.w	r3, r3, #11
  402cbe:	f1b3 0220 	subs.w	r2, r3, #32
  402cc2:	da0c      	bge.n	402cde <__adddf3+0x16e>
  402cc4:	320c      	adds	r2, #12
  402cc6:	dd08      	ble.n	402cda <__adddf3+0x16a>
  402cc8:	f102 0c14 	add.w	ip, r2, #20
  402ccc:	f1c2 020c 	rsb	r2, r2, #12
  402cd0:	fa01 f00c 	lsl.w	r0, r1, ip
  402cd4:	fa21 f102 	lsr.w	r1, r1, r2
  402cd8:	e00c      	b.n	402cf4 <__adddf3+0x184>
  402cda:	f102 0214 	add.w	r2, r2, #20
  402cde:	bfd8      	it	le
  402ce0:	f1c2 0c20 	rsble	ip, r2, #32
  402ce4:	fa01 f102 	lsl.w	r1, r1, r2
  402ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
  402cec:	bfdc      	itt	le
  402cee:	ea41 010c 	orrle.w	r1, r1, ip
  402cf2:	4090      	lslle	r0, r2
  402cf4:	1ae4      	subs	r4, r4, r3
  402cf6:	bfa2      	ittt	ge
  402cf8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402cfc:	4329      	orrge	r1, r5
  402cfe:	bd30      	popge	{r4, r5, pc}
  402d00:	ea6f 0404 	mvn.w	r4, r4
  402d04:	3c1f      	subs	r4, #31
  402d06:	da1c      	bge.n	402d42 <__adddf3+0x1d2>
  402d08:	340c      	adds	r4, #12
  402d0a:	dc0e      	bgt.n	402d2a <__adddf3+0x1ba>
  402d0c:	f104 0414 	add.w	r4, r4, #20
  402d10:	f1c4 0220 	rsb	r2, r4, #32
  402d14:	fa20 f004 	lsr.w	r0, r0, r4
  402d18:	fa01 f302 	lsl.w	r3, r1, r2
  402d1c:	ea40 0003 	orr.w	r0, r0, r3
  402d20:	fa21 f304 	lsr.w	r3, r1, r4
  402d24:	ea45 0103 	orr.w	r1, r5, r3
  402d28:	bd30      	pop	{r4, r5, pc}
  402d2a:	f1c4 040c 	rsb	r4, r4, #12
  402d2e:	f1c4 0220 	rsb	r2, r4, #32
  402d32:	fa20 f002 	lsr.w	r0, r0, r2
  402d36:	fa01 f304 	lsl.w	r3, r1, r4
  402d3a:	ea40 0003 	orr.w	r0, r0, r3
  402d3e:	4629      	mov	r1, r5
  402d40:	bd30      	pop	{r4, r5, pc}
  402d42:	fa21 f004 	lsr.w	r0, r1, r4
  402d46:	4629      	mov	r1, r5
  402d48:	bd30      	pop	{r4, r5, pc}
  402d4a:	f094 0f00 	teq	r4, #0
  402d4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402d52:	bf06      	itte	eq
  402d54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402d58:	3401      	addeq	r4, #1
  402d5a:	3d01      	subne	r5, #1
  402d5c:	e74e      	b.n	402bfc <__adddf3+0x8c>
  402d5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402d62:	bf18      	it	ne
  402d64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402d68:	d029      	beq.n	402dbe <__adddf3+0x24e>
  402d6a:	ea94 0f05 	teq	r4, r5
  402d6e:	bf08      	it	eq
  402d70:	ea90 0f02 	teqeq	r0, r2
  402d74:	d005      	beq.n	402d82 <__adddf3+0x212>
  402d76:	ea54 0c00 	orrs.w	ip, r4, r0
  402d7a:	bf04      	itt	eq
  402d7c:	4619      	moveq	r1, r3
  402d7e:	4610      	moveq	r0, r2
  402d80:	bd30      	pop	{r4, r5, pc}
  402d82:	ea91 0f03 	teq	r1, r3
  402d86:	bf1e      	ittt	ne
  402d88:	2100      	movne	r1, #0
  402d8a:	2000      	movne	r0, #0
  402d8c:	bd30      	popne	{r4, r5, pc}
  402d8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402d92:	d105      	bne.n	402da0 <__adddf3+0x230>
  402d94:	0040      	lsls	r0, r0, #1
  402d96:	4149      	adcs	r1, r1
  402d98:	bf28      	it	cs
  402d9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402d9e:	bd30      	pop	{r4, r5, pc}
  402da0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402da4:	bf3c      	itt	cc
  402da6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402daa:	bd30      	popcc	{r4, r5, pc}
  402dac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402db0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402db4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402db8:	f04f 0000 	mov.w	r0, #0
  402dbc:	bd30      	pop	{r4, r5, pc}
  402dbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402dc2:	bf1a      	itte	ne
  402dc4:	4619      	movne	r1, r3
  402dc6:	4610      	movne	r0, r2
  402dc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402dcc:	bf1c      	itt	ne
  402dce:	460b      	movne	r3, r1
  402dd0:	4602      	movne	r2, r0
  402dd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402dd6:	bf06      	itte	eq
  402dd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402ddc:	ea91 0f03 	teqeq	r1, r3
  402de0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402de4:	bd30      	pop	{r4, r5, pc}
  402de6:	bf00      	nop

00402de8 <__aeabi_ui2d>:
  402de8:	f090 0f00 	teq	r0, #0
  402dec:	bf04      	itt	eq
  402dee:	2100      	moveq	r1, #0
  402df0:	4770      	bxeq	lr
  402df2:	b530      	push	{r4, r5, lr}
  402df4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402df8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402dfc:	f04f 0500 	mov.w	r5, #0
  402e00:	f04f 0100 	mov.w	r1, #0
  402e04:	e750      	b.n	402ca8 <__adddf3+0x138>
  402e06:	bf00      	nop

00402e08 <__aeabi_i2d>:
  402e08:	f090 0f00 	teq	r0, #0
  402e0c:	bf04      	itt	eq
  402e0e:	2100      	moveq	r1, #0
  402e10:	4770      	bxeq	lr
  402e12:	b530      	push	{r4, r5, lr}
  402e14:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e18:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402e20:	bf48      	it	mi
  402e22:	4240      	negmi	r0, r0
  402e24:	f04f 0100 	mov.w	r1, #0
  402e28:	e73e      	b.n	402ca8 <__adddf3+0x138>
  402e2a:	bf00      	nop

00402e2c <__aeabi_f2d>:
  402e2c:	0042      	lsls	r2, r0, #1
  402e2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402e32:	ea4f 0131 	mov.w	r1, r1, rrx
  402e36:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402e3a:	bf1f      	itttt	ne
  402e3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402e40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402e44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402e48:	4770      	bxne	lr
  402e4a:	f092 0f00 	teq	r2, #0
  402e4e:	bf14      	ite	ne
  402e50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402e54:	4770      	bxeq	lr
  402e56:	b530      	push	{r4, r5, lr}
  402e58:	f44f 7460 	mov.w	r4, #896	; 0x380
  402e5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402e60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402e64:	e720      	b.n	402ca8 <__adddf3+0x138>
  402e66:	bf00      	nop

00402e68 <__aeabi_ul2d>:
  402e68:	ea50 0201 	orrs.w	r2, r0, r1
  402e6c:	bf08      	it	eq
  402e6e:	4770      	bxeq	lr
  402e70:	b530      	push	{r4, r5, lr}
  402e72:	f04f 0500 	mov.w	r5, #0
  402e76:	e00a      	b.n	402e8e <__aeabi_l2d+0x16>

00402e78 <__aeabi_l2d>:
  402e78:	ea50 0201 	orrs.w	r2, r0, r1
  402e7c:	bf08      	it	eq
  402e7e:	4770      	bxeq	lr
  402e80:	b530      	push	{r4, r5, lr}
  402e82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402e86:	d502      	bpl.n	402e8e <__aeabi_l2d+0x16>
  402e88:	4240      	negs	r0, r0
  402e8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402e8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e92:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402e9a:	f43f aedc 	beq.w	402c56 <__adddf3+0xe6>
  402e9e:	f04f 0203 	mov.w	r2, #3
  402ea2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402ea6:	bf18      	it	ne
  402ea8:	3203      	addne	r2, #3
  402eaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402eae:	bf18      	it	ne
  402eb0:	3203      	addne	r2, #3
  402eb2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402eb6:	f1c2 0320 	rsb	r3, r2, #32
  402eba:	fa00 fc03 	lsl.w	ip, r0, r3
  402ebe:	fa20 f002 	lsr.w	r0, r0, r2
  402ec2:	fa01 fe03 	lsl.w	lr, r1, r3
  402ec6:	ea40 000e 	orr.w	r0, r0, lr
  402eca:	fa21 f102 	lsr.w	r1, r1, r2
  402ece:	4414      	add	r4, r2
  402ed0:	e6c1      	b.n	402c56 <__adddf3+0xe6>
  402ed2:	bf00      	nop

00402ed4 <__aeabi_dmul>:
  402ed4:	b570      	push	{r4, r5, r6, lr}
  402ed6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402eda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402ede:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402ee2:	bf1d      	ittte	ne
  402ee4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402ee8:	ea94 0f0c 	teqne	r4, ip
  402eec:	ea95 0f0c 	teqne	r5, ip
  402ef0:	f000 f8de 	bleq	4030b0 <__aeabi_dmul+0x1dc>
  402ef4:	442c      	add	r4, r5
  402ef6:	ea81 0603 	eor.w	r6, r1, r3
  402efa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402efe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402f02:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402f06:	bf18      	it	ne
  402f08:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402f0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402f10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402f14:	d038      	beq.n	402f88 <__aeabi_dmul+0xb4>
  402f16:	fba0 ce02 	umull	ip, lr, r0, r2
  402f1a:	f04f 0500 	mov.w	r5, #0
  402f1e:	fbe1 e502 	umlal	lr, r5, r1, r2
  402f22:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402f26:	fbe0 e503 	umlal	lr, r5, r0, r3
  402f2a:	f04f 0600 	mov.w	r6, #0
  402f2e:	fbe1 5603 	umlal	r5, r6, r1, r3
  402f32:	f09c 0f00 	teq	ip, #0
  402f36:	bf18      	it	ne
  402f38:	f04e 0e01 	orrne.w	lr, lr, #1
  402f3c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402f40:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402f44:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402f48:	d204      	bcs.n	402f54 <__aeabi_dmul+0x80>
  402f4a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402f4e:	416d      	adcs	r5, r5
  402f50:	eb46 0606 	adc.w	r6, r6, r6
  402f54:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402f58:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402f5c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402f60:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402f64:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402f68:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402f6c:	bf88      	it	hi
  402f6e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402f72:	d81e      	bhi.n	402fb2 <__aeabi_dmul+0xde>
  402f74:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402f78:	bf08      	it	eq
  402f7a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402f7e:	f150 0000 	adcs.w	r0, r0, #0
  402f82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402f86:	bd70      	pop	{r4, r5, r6, pc}
  402f88:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402f8c:	ea46 0101 	orr.w	r1, r6, r1
  402f90:	ea40 0002 	orr.w	r0, r0, r2
  402f94:	ea81 0103 	eor.w	r1, r1, r3
  402f98:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402f9c:	bfc2      	ittt	gt
  402f9e:	ebd4 050c 	rsbsgt	r5, r4, ip
  402fa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402fa6:	bd70      	popgt	{r4, r5, r6, pc}
  402fa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402fac:	f04f 0e00 	mov.w	lr, #0
  402fb0:	3c01      	subs	r4, #1
  402fb2:	f300 80ab 	bgt.w	40310c <__aeabi_dmul+0x238>
  402fb6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402fba:	bfde      	ittt	le
  402fbc:	2000      	movle	r0, #0
  402fbe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402fc2:	bd70      	pople	{r4, r5, r6, pc}
  402fc4:	f1c4 0400 	rsb	r4, r4, #0
  402fc8:	3c20      	subs	r4, #32
  402fca:	da35      	bge.n	403038 <__aeabi_dmul+0x164>
  402fcc:	340c      	adds	r4, #12
  402fce:	dc1b      	bgt.n	403008 <__aeabi_dmul+0x134>
  402fd0:	f104 0414 	add.w	r4, r4, #20
  402fd4:	f1c4 0520 	rsb	r5, r4, #32
  402fd8:	fa00 f305 	lsl.w	r3, r0, r5
  402fdc:	fa20 f004 	lsr.w	r0, r0, r4
  402fe0:	fa01 f205 	lsl.w	r2, r1, r5
  402fe4:	ea40 0002 	orr.w	r0, r0, r2
  402fe8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402fec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402ff0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402ff4:	fa21 f604 	lsr.w	r6, r1, r4
  402ff8:	eb42 0106 	adc.w	r1, r2, r6
  402ffc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403000:	bf08      	it	eq
  403002:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403006:	bd70      	pop	{r4, r5, r6, pc}
  403008:	f1c4 040c 	rsb	r4, r4, #12
  40300c:	f1c4 0520 	rsb	r5, r4, #32
  403010:	fa00 f304 	lsl.w	r3, r0, r4
  403014:	fa20 f005 	lsr.w	r0, r0, r5
  403018:	fa01 f204 	lsl.w	r2, r1, r4
  40301c:	ea40 0002 	orr.w	r0, r0, r2
  403020:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403024:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403028:	f141 0100 	adc.w	r1, r1, #0
  40302c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403030:	bf08      	it	eq
  403032:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403036:	bd70      	pop	{r4, r5, r6, pc}
  403038:	f1c4 0520 	rsb	r5, r4, #32
  40303c:	fa00 f205 	lsl.w	r2, r0, r5
  403040:	ea4e 0e02 	orr.w	lr, lr, r2
  403044:	fa20 f304 	lsr.w	r3, r0, r4
  403048:	fa01 f205 	lsl.w	r2, r1, r5
  40304c:	ea43 0302 	orr.w	r3, r3, r2
  403050:	fa21 f004 	lsr.w	r0, r1, r4
  403054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403058:	fa21 f204 	lsr.w	r2, r1, r4
  40305c:	ea20 0002 	bic.w	r0, r0, r2
  403060:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403064:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403068:	bf08      	it	eq
  40306a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40306e:	bd70      	pop	{r4, r5, r6, pc}
  403070:	f094 0f00 	teq	r4, #0
  403074:	d10f      	bne.n	403096 <__aeabi_dmul+0x1c2>
  403076:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40307a:	0040      	lsls	r0, r0, #1
  40307c:	eb41 0101 	adc.w	r1, r1, r1
  403080:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403084:	bf08      	it	eq
  403086:	3c01      	subeq	r4, #1
  403088:	d0f7      	beq.n	40307a <__aeabi_dmul+0x1a6>
  40308a:	ea41 0106 	orr.w	r1, r1, r6
  40308e:	f095 0f00 	teq	r5, #0
  403092:	bf18      	it	ne
  403094:	4770      	bxne	lr
  403096:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40309a:	0052      	lsls	r2, r2, #1
  40309c:	eb43 0303 	adc.w	r3, r3, r3
  4030a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4030a4:	bf08      	it	eq
  4030a6:	3d01      	subeq	r5, #1
  4030a8:	d0f7      	beq.n	40309a <__aeabi_dmul+0x1c6>
  4030aa:	ea43 0306 	orr.w	r3, r3, r6
  4030ae:	4770      	bx	lr
  4030b0:	ea94 0f0c 	teq	r4, ip
  4030b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4030b8:	bf18      	it	ne
  4030ba:	ea95 0f0c 	teqne	r5, ip
  4030be:	d00c      	beq.n	4030da <__aeabi_dmul+0x206>
  4030c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4030c4:	bf18      	it	ne
  4030c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4030ca:	d1d1      	bne.n	403070 <__aeabi_dmul+0x19c>
  4030cc:	ea81 0103 	eor.w	r1, r1, r3
  4030d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4030d4:	f04f 0000 	mov.w	r0, #0
  4030d8:	bd70      	pop	{r4, r5, r6, pc}
  4030da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4030de:	bf06      	itte	eq
  4030e0:	4610      	moveq	r0, r2
  4030e2:	4619      	moveq	r1, r3
  4030e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4030e8:	d019      	beq.n	40311e <__aeabi_dmul+0x24a>
  4030ea:	ea94 0f0c 	teq	r4, ip
  4030ee:	d102      	bne.n	4030f6 <__aeabi_dmul+0x222>
  4030f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4030f4:	d113      	bne.n	40311e <__aeabi_dmul+0x24a>
  4030f6:	ea95 0f0c 	teq	r5, ip
  4030fa:	d105      	bne.n	403108 <__aeabi_dmul+0x234>
  4030fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403100:	bf1c      	itt	ne
  403102:	4610      	movne	r0, r2
  403104:	4619      	movne	r1, r3
  403106:	d10a      	bne.n	40311e <__aeabi_dmul+0x24a>
  403108:	ea81 0103 	eor.w	r1, r1, r3
  40310c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403110:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403114:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403118:	f04f 0000 	mov.w	r0, #0
  40311c:	bd70      	pop	{r4, r5, r6, pc}
  40311e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403122:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403126:	bd70      	pop	{r4, r5, r6, pc}

00403128 <__aeabi_ddiv>:
  403128:	b570      	push	{r4, r5, r6, lr}
  40312a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40312e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403132:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403136:	bf1d      	ittte	ne
  403138:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40313c:	ea94 0f0c 	teqne	r4, ip
  403140:	ea95 0f0c 	teqne	r5, ip
  403144:	f000 f8a7 	bleq	403296 <__aeabi_ddiv+0x16e>
  403148:	eba4 0405 	sub.w	r4, r4, r5
  40314c:	ea81 0e03 	eor.w	lr, r1, r3
  403150:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403154:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403158:	f000 8088 	beq.w	40326c <__aeabi_ddiv+0x144>
  40315c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403160:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403164:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403168:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40316c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403170:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403174:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403178:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40317c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403180:	429d      	cmp	r5, r3
  403182:	bf08      	it	eq
  403184:	4296      	cmpeq	r6, r2
  403186:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40318a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40318e:	d202      	bcs.n	403196 <__aeabi_ddiv+0x6e>
  403190:	085b      	lsrs	r3, r3, #1
  403192:	ea4f 0232 	mov.w	r2, r2, rrx
  403196:	1ab6      	subs	r6, r6, r2
  403198:	eb65 0503 	sbc.w	r5, r5, r3
  40319c:	085b      	lsrs	r3, r3, #1
  40319e:	ea4f 0232 	mov.w	r2, r2, rrx
  4031a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4031a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4031aa:	ebb6 0e02 	subs.w	lr, r6, r2
  4031ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031b2:	bf22      	ittt	cs
  4031b4:	1ab6      	subcs	r6, r6, r2
  4031b6:	4675      	movcs	r5, lr
  4031b8:	ea40 000c 	orrcs.w	r0, r0, ip
  4031bc:	085b      	lsrs	r3, r3, #1
  4031be:	ea4f 0232 	mov.w	r2, r2, rrx
  4031c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4031c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031ca:	bf22      	ittt	cs
  4031cc:	1ab6      	subcs	r6, r6, r2
  4031ce:	4675      	movcs	r5, lr
  4031d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4031d4:	085b      	lsrs	r3, r3, #1
  4031d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4031da:	ebb6 0e02 	subs.w	lr, r6, r2
  4031de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031e2:	bf22      	ittt	cs
  4031e4:	1ab6      	subcs	r6, r6, r2
  4031e6:	4675      	movcs	r5, lr
  4031e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4031ec:	085b      	lsrs	r3, r3, #1
  4031ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4031f2:	ebb6 0e02 	subs.w	lr, r6, r2
  4031f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031fa:	bf22      	ittt	cs
  4031fc:	1ab6      	subcs	r6, r6, r2
  4031fe:	4675      	movcs	r5, lr
  403200:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403204:	ea55 0e06 	orrs.w	lr, r5, r6
  403208:	d018      	beq.n	40323c <__aeabi_ddiv+0x114>
  40320a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40320e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403212:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403216:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40321a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40321e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403222:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403226:	d1c0      	bne.n	4031aa <__aeabi_ddiv+0x82>
  403228:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40322c:	d10b      	bne.n	403246 <__aeabi_ddiv+0x11e>
  40322e:	ea41 0100 	orr.w	r1, r1, r0
  403232:	f04f 0000 	mov.w	r0, #0
  403236:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40323a:	e7b6      	b.n	4031aa <__aeabi_ddiv+0x82>
  40323c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403240:	bf04      	itt	eq
  403242:	4301      	orreq	r1, r0
  403244:	2000      	moveq	r0, #0
  403246:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40324a:	bf88      	it	hi
  40324c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403250:	f63f aeaf 	bhi.w	402fb2 <__aeabi_dmul+0xde>
  403254:	ebb5 0c03 	subs.w	ip, r5, r3
  403258:	bf04      	itt	eq
  40325a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40325e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403262:	f150 0000 	adcs.w	r0, r0, #0
  403266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40326a:	bd70      	pop	{r4, r5, r6, pc}
  40326c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403270:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403274:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403278:	bfc2      	ittt	gt
  40327a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40327e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403282:	bd70      	popgt	{r4, r5, r6, pc}
  403284:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403288:	f04f 0e00 	mov.w	lr, #0
  40328c:	3c01      	subs	r4, #1
  40328e:	e690      	b.n	402fb2 <__aeabi_dmul+0xde>
  403290:	ea45 0e06 	orr.w	lr, r5, r6
  403294:	e68d      	b.n	402fb2 <__aeabi_dmul+0xde>
  403296:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40329a:	ea94 0f0c 	teq	r4, ip
  40329e:	bf08      	it	eq
  4032a0:	ea95 0f0c 	teqeq	r5, ip
  4032a4:	f43f af3b 	beq.w	40311e <__aeabi_dmul+0x24a>
  4032a8:	ea94 0f0c 	teq	r4, ip
  4032ac:	d10a      	bne.n	4032c4 <__aeabi_ddiv+0x19c>
  4032ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4032b2:	f47f af34 	bne.w	40311e <__aeabi_dmul+0x24a>
  4032b6:	ea95 0f0c 	teq	r5, ip
  4032ba:	f47f af25 	bne.w	403108 <__aeabi_dmul+0x234>
  4032be:	4610      	mov	r0, r2
  4032c0:	4619      	mov	r1, r3
  4032c2:	e72c      	b.n	40311e <__aeabi_dmul+0x24a>
  4032c4:	ea95 0f0c 	teq	r5, ip
  4032c8:	d106      	bne.n	4032d8 <__aeabi_ddiv+0x1b0>
  4032ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4032ce:	f43f aefd 	beq.w	4030cc <__aeabi_dmul+0x1f8>
  4032d2:	4610      	mov	r0, r2
  4032d4:	4619      	mov	r1, r3
  4032d6:	e722      	b.n	40311e <__aeabi_dmul+0x24a>
  4032d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4032dc:	bf18      	it	ne
  4032de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4032e2:	f47f aec5 	bne.w	403070 <__aeabi_dmul+0x19c>
  4032e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4032ea:	f47f af0d 	bne.w	403108 <__aeabi_dmul+0x234>
  4032ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4032f2:	f47f aeeb 	bne.w	4030cc <__aeabi_dmul+0x1f8>
  4032f6:	e712      	b.n	40311e <__aeabi_dmul+0x24a>

004032f8 <__gedf2>:
  4032f8:	f04f 3cff 	mov.w	ip, #4294967295
  4032fc:	e006      	b.n	40330c <__cmpdf2+0x4>
  4032fe:	bf00      	nop

00403300 <__ledf2>:
  403300:	f04f 0c01 	mov.w	ip, #1
  403304:	e002      	b.n	40330c <__cmpdf2+0x4>
  403306:	bf00      	nop

00403308 <__cmpdf2>:
  403308:	f04f 0c01 	mov.w	ip, #1
  40330c:	f84d cd04 	str.w	ip, [sp, #-4]!
  403310:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403314:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403318:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40331c:	bf18      	it	ne
  40331e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  403322:	d01b      	beq.n	40335c <__cmpdf2+0x54>
  403324:	b001      	add	sp, #4
  403326:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40332a:	bf0c      	ite	eq
  40332c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403330:	ea91 0f03 	teqne	r1, r3
  403334:	bf02      	ittt	eq
  403336:	ea90 0f02 	teqeq	r0, r2
  40333a:	2000      	moveq	r0, #0
  40333c:	4770      	bxeq	lr
  40333e:	f110 0f00 	cmn.w	r0, #0
  403342:	ea91 0f03 	teq	r1, r3
  403346:	bf58      	it	pl
  403348:	4299      	cmppl	r1, r3
  40334a:	bf08      	it	eq
  40334c:	4290      	cmpeq	r0, r2
  40334e:	bf2c      	ite	cs
  403350:	17d8      	asrcs	r0, r3, #31
  403352:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403356:	f040 0001 	orr.w	r0, r0, #1
  40335a:	4770      	bx	lr
  40335c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403360:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403364:	d102      	bne.n	40336c <__cmpdf2+0x64>
  403366:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40336a:	d107      	bne.n	40337c <__cmpdf2+0x74>
  40336c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403370:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403374:	d1d6      	bne.n	403324 <__cmpdf2+0x1c>
  403376:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40337a:	d0d3      	beq.n	403324 <__cmpdf2+0x1c>
  40337c:	f85d 0b04 	ldr.w	r0, [sp], #4
  403380:	4770      	bx	lr
  403382:	bf00      	nop

00403384 <__aeabi_cdrcmple>:
  403384:	4684      	mov	ip, r0
  403386:	4610      	mov	r0, r2
  403388:	4662      	mov	r2, ip
  40338a:	468c      	mov	ip, r1
  40338c:	4619      	mov	r1, r3
  40338e:	4663      	mov	r3, ip
  403390:	e000      	b.n	403394 <__aeabi_cdcmpeq>
  403392:	bf00      	nop

00403394 <__aeabi_cdcmpeq>:
  403394:	b501      	push	{r0, lr}
  403396:	f7ff ffb7 	bl	403308 <__cmpdf2>
  40339a:	2800      	cmp	r0, #0
  40339c:	bf48      	it	mi
  40339e:	f110 0f00 	cmnmi.w	r0, #0
  4033a2:	bd01      	pop	{r0, pc}

004033a4 <__aeabi_dcmpeq>:
  4033a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4033a8:	f7ff fff4 	bl	403394 <__aeabi_cdcmpeq>
  4033ac:	bf0c      	ite	eq
  4033ae:	2001      	moveq	r0, #1
  4033b0:	2000      	movne	r0, #0
  4033b2:	f85d fb08 	ldr.w	pc, [sp], #8
  4033b6:	bf00      	nop

004033b8 <__aeabi_dcmplt>:
  4033b8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4033bc:	f7ff ffea 	bl	403394 <__aeabi_cdcmpeq>
  4033c0:	bf34      	ite	cc
  4033c2:	2001      	movcc	r0, #1
  4033c4:	2000      	movcs	r0, #0
  4033c6:	f85d fb08 	ldr.w	pc, [sp], #8
  4033ca:	bf00      	nop

004033cc <__aeabi_dcmple>:
  4033cc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4033d0:	f7ff ffe0 	bl	403394 <__aeabi_cdcmpeq>
  4033d4:	bf94      	ite	ls
  4033d6:	2001      	movls	r0, #1
  4033d8:	2000      	movhi	r0, #0
  4033da:	f85d fb08 	ldr.w	pc, [sp], #8
  4033de:	bf00      	nop

004033e0 <__aeabi_dcmpge>:
  4033e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4033e4:	f7ff ffce 	bl	403384 <__aeabi_cdrcmple>
  4033e8:	bf94      	ite	ls
  4033ea:	2001      	movls	r0, #1
  4033ec:	2000      	movhi	r0, #0
  4033ee:	f85d fb08 	ldr.w	pc, [sp], #8
  4033f2:	bf00      	nop

004033f4 <__aeabi_dcmpgt>:
  4033f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4033f8:	f7ff ffc4 	bl	403384 <__aeabi_cdrcmple>
  4033fc:	bf34      	ite	cc
  4033fe:	2001      	movcc	r0, #1
  403400:	2000      	movcs	r0, #0
  403402:	f85d fb08 	ldr.w	pc, [sp], #8
  403406:	bf00      	nop

00403408 <__aeabi_dcmpun>:
  403408:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40340c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403410:	d102      	bne.n	403418 <__aeabi_dcmpun+0x10>
  403412:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403416:	d10a      	bne.n	40342e <__aeabi_dcmpun+0x26>
  403418:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40341c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403420:	d102      	bne.n	403428 <__aeabi_dcmpun+0x20>
  403422:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403426:	d102      	bne.n	40342e <__aeabi_dcmpun+0x26>
  403428:	f04f 0000 	mov.w	r0, #0
  40342c:	4770      	bx	lr
  40342e:	f04f 0001 	mov.w	r0, #1
  403432:	4770      	bx	lr

00403434 <__aeabi_d2uiz>:
  403434:	004a      	lsls	r2, r1, #1
  403436:	d211      	bcs.n	40345c <__aeabi_d2uiz+0x28>
  403438:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40343c:	d211      	bcs.n	403462 <__aeabi_d2uiz+0x2e>
  40343e:	d50d      	bpl.n	40345c <__aeabi_d2uiz+0x28>
  403440:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403444:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403448:	d40e      	bmi.n	403468 <__aeabi_d2uiz+0x34>
  40344a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40344e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403452:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403456:	fa23 f002 	lsr.w	r0, r3, r2
  40345a:	4770      	bx	lr
  40345c:	f04f 0000 	mov.w	r0, #0
  403460:	4770      	bx	lr
  403462:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403466:	d102      	bne.n	40346e <__aeabi_d2uiz+0x3a>
  403468:	f04f 30ff 	mov.w	r0, #4294967295
  40346c:	4770      	bx	lr
  40346e:	f04f 0000 	mov.w	r0, #0
  403472:	4770      	bx	lr

00403474 <__aeabi_ldivmod>:
  403474:	b97b      	cbnz	r3, 403496 <__aeabi_ldivmod+0x22>
  403476:	b972      	cbnz	r2, 403496 <__aeabi_ldivmod+0x22>
  403478:	2900      	cmp	r1, #0
  40347a:	bfbe      	ittt	lt
  40347c:	2000      	movlt	r0, #0
  40347e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
  403482:	e006      	blt.n	403492 <__aeabi_ldivmod+0x1e>
  403484:	bf08      	it	eq
  403486:	2800      	cmpeq	r0, #0
  403488:	bf1c      	itt	ne
  40348a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
  40348e:	f04f 30ff 	movne.w	r0, #4294967295
  403492:	f000 b9eb 	b.w	40386c <__aeabi_idiv0>
  403496:	f1ad 0c08 	sub.w	ip, sp, #8
  40349a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40349e:	2900      	cmp	r1, #0
  4034a0:	db09      	blt.n	4034b6 <__aeabi_ldivmod+0x42>
  4034a2:	2b00      	cmp	r3, #0
  4034a4:	db1a      	blt.n	4034dc <__aeabi_ldivmod+0x68>
  4034a6:	f000 f873 	bl	403590 <__udivmoddi4>
  4034aa:	f8dd e004 	ldr.w	lr, [sp, #4]
  4034ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4034b2:	b004      	add	sp, #16
  4034b4:	4770      	bx	lr
  4034b6:	4240      	negs	r0, r0
  4034b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4034bc:	2b00      	cmp	r3, #0
  4034be:	db1b      	blt.n	4034f8 <__aeabi_ldivmod+0x84>
  4034c0:	f000 f866 	bl	403590 <__udivmoddi4>
  4034c4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4034c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4034cc:	b004      	add	sp, #16
  4034ce:	4240      	negs	r0, r0
  4034d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4034d4:	4252      	negs	r2, r2
  4034d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4034da:	4770      	bx	lr
  4034dc:	4252      	negs	r2, r2
  4034de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4034e2:	f000 f855 	bl	403590 <__udivmoddi4>
  4034e6:	f8dd e004 	ldr.w	lr, [sp, #4]
  4034ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4034ee:	b004      	add	sp, #16
  4034f0:	4240      	negs	r0, r0
  4034f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4034f6:	4770      	bx	lr
  4034f8:	4252      	negs	r2, r2
  4034fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4034fe:	f000 f847 	bl	403590 <__udivmoddi4>
  403502:	f8dd e004 	ldr.w	lr, [sp, #4]
  403506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40350a:	b004      	add	sp, #16
  40350c:	4252      	negs	r2, r2
  40350e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403512:	4770      	bx	lr

00403514 <__aeabi_d2lz>:
  403514:	b538      	push	{r3, r4, r5, lr}
  403516:	4605      	mov	r5, r0
  403518:	460c      	mov	r4, r1
  40351a:	4628      	mov	r0, r5
  40351c:	4621      	mov	r1, r4
  40351e:	2200      	movs	r2, #0
  403520:	2300      	movs	r3, #0
  403522:	f7ff ff49 	bl	4033b8 <__aeabi_dcmplt>
  403526:	b928      	cbnz	r0, 403534 <__aeabi_d2lz+0x20>
  403528:	4628      	mov	r0, r5
  40352a:	4621      	mov	r1, r4
  40352c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403530:	f000 b80a 	b.w	403548 <__aeabi_d2ulz>
  403534:	4628      	mov	r0, r5
  403536:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  40353a:	f000 f805 	bl	403548 <__aeabi_d2ulz>
  40353e:	4240      	negs	r0, r0
  403540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403544:	bd38      	pop	{r3, r4, r5, pc}
  403546:	bf00      	nop

00403548 <__aeabi_d2ulz>:
  403548:	b5d0      	push	{r4, r6, r7, lr}
  40354a:	2200      	movs	r2, #0
  40354c:	4b0e      	ldr	r3, [pc, #56]	; (403588 <__aeabi_d2ulz+0x40>)
  40354e:	4606      	mov	r6, r0
  403550:	460f      	mov	r7, r1
  403552:	f7ff fcbf 	bl	402ed4 <__aeabi_dmul>
  403556:	f7ff ff6d 	bl	403434 <__aeabi_d2uiz>
  40355a:	4604      	mov	r4, r0
  40355c:	f7ff fc44 	bl	402de8 <__aeabi_ui2d>
  403560:	2200      	movs	r2, #0
  403562:	4b0a      	ldr	r3, [pc, #40]	; (40358c <__aeabi_d2ulz+0x44>)
  403564:	f7ff fcb6 	bl	402ed4 <__aeabi_dmul>
  403568:	4602      	mov	r2, r0
  40356a:	460b      	mov	r3, r1
  40356c:	4630      	mov	r0, r6
  40356e:	4639      	mov	r1, r7
  403570:	f7ff fafc 	bl	402b6c <__aeabi_dsub>
  403574:	f7ff ff5e 	bl	403434 <__aeabi_d2uiz>
  403578:	4623      	mov	r3, r4
  40357a:	2200      	movs	r2, #0
  40357c:	ea42 0200 	orr.w	r2, r2, r0
  403580:	4610      	mov	r0, r2
  403582:	4619      	mov	r1, r3
  403584:	bdd0      	pop	{r4, r6, r7, pc}
  403586:	bf00      	nop
  403588:	3df00000 	.word	0x3df00000
  40358c:	41f00000 	.word	0x41f00000

00403590 <__udivmoddi4>:
  403590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403594:	468c      	mov	ip, r1
  403596:	460d      	mov	r5, r1
  403598:	4604      	mov	r4, r0
  40359a:	9e08      	ldr	r6, [sp, #32]
  40359c:	2b00      	cmp	r3, #0
  40359e:	d151      	bne.n	403644 <__udivmoddi4+0xb4>
  4035a0:	428a      	cmp	r2, r1
  4035a2:	4617      	mov	r7, r2
  4035a4:	d96d      	bls.n	403682 <__udivmoddi4+0xf2>
  4035a6:	fab2 fe82 	clz	lr, r2
  4035aa:	f1be 0f00 	cmp.w	lr, #0
  4035ae:	d00b      	beq.n	4035c8 <__udivmoddi4+0x38>
  4035b0:	f1ce 0c20 	rsb	ip, lr, #32
  4035b4:	fa01 f50e 	lsl.w	r5, r1, lr
  4035b8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4035bc:	fa02 f70e 	lsl.w	r7, r2, lr
  4035c0:	ea4c 0c05 	orr.w	ip, ip, r5
  4035c4:	fa00 f40e 	lsl.w	r4, r0, lr
  4035c8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4035cc:	0c25      	lsrs	r5, r4, #16
  4035ce:	fbbc f8fa 	udiv	r8, ip, sl
  4035d2:	fa1f f987 	uxth.w	r9, r7
  4035d6:	fb0a cc18 	mls	ip, sl, r8, ip
  4035da:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4035de:	fb08 f309 	mul.w	r3, r8, r9
  4035e2:	42ab      	cmp	r3, r5
  4035e4:	d90a      	bls.n	4035fc <__udivmoddi4+0x6c>
  4035e6:	19ed      	adds	r5, r5, r7
  4035e8:	f108 32ff 	add.w	r2, r8, #4294967295
  4035ec:	f080 8123 	bcs.w	403836 <__udivmoddi4+0x2a6>
  4035f0:	42ab      	cmp	r3, r5
  4035f2:	f240 8120 	bls.w	403836 <__udivmoddi4+0x2a6>
  4035f6:	f1a8 0802 	sub.w	r8, r8, #2
  4035fa:	443d      	add	r5, r7
  4035fc:	1aed      	subs	r5, r5, r3
  4035fe:	b2a4      	uxth	r4, r4
  403600:	fbb5 f0fa 	udiv	r0, r5, sl
  403604:	fb0a 5510 	mls	r5, sl, r0, r5
  403608:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40360c:	fb00 f909 	mul.w	r9, r0, r9
  403610:	45a1      	cmp	r9, r4
  403612:	d909      	bls.n	403628 <__udivmoddi4+0x98>
  403614:	19e4      	adds	r4, r4, r7
  403616:	f100 33ff 	add.w	r3, r0, #4294967295
  40361a:	f080 810a 	bcs.w	403832 <__udivmoddi4+0x2a2>
  40361e:	45a1      	cmp	r9, r4
  403620:	f240 8107 	bls.w	403832 <__udivmoddi4+0x2a2>
  403624:	3802      	subs	r0, #2
  403626:	443c      	add	r4, r7
  403628:	eba4 0409 	sub.w	r4, r4, r9
  40362c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403630:	2100      	movs	r1, #0
  403632:	2e00      	cmp	r6, #0
  403634:	d061      	beq.n	4036fa <__udivmoddi4+0x16a>
  403636:	fa24 f40e 	lsr.w	r4, r4, lr
  40363a:	2300      	movs	r3, #0
  40363c:	6034      	str	r4, [r6, #0]
  40363e:	6073      	str	r3, [r6, #4]
  403640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403644:	428b      	cmp	r3, r1
  403646:	d907      	bls.n	403658 <__udivmoddi4+0xc8>
  403648:	2e00      	cmp	r6, #0
  40364a:	d054      	beq.n	4036f6 <__udivmoddi4+0x166>
  40364c:	2100      	movs	r1, #0
  40364e:	e886 0021 	stmia.w	r6, {r0, r5}
  403652:	4608      	mov	r0, r1
  403654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403658:	fab3 f183 	clz	r1, r3
  40365c:	2900      	cmp	r1, #0
  40365e:	f040 808e 	bne.w	40377e <__udivmoddi4+0x1ee>
  403662:	42ab      	cmp	r3, r5
  403664:	d302      	bcc.n	40366c <__udivmoddi4+0xdc>
  403666:	4282      	cmp	r2, r0
  403668:	f200 80fa 	bhi.w	403860 <__udivmoddi4+0x2d0>
  40366c:	1a84      	subs	r4, r0, r2
  40366e:	eb65 0503 	sbc.w	r5, r5, r3
  403672:	2001      	movs	r0, #1
  403674:	46ac      	mov	ip, r5
  403676:	2e00      	cmp	r6, #0
  403678:	d03f      	beq.n	4036fa <__udivmoddi4+0x16a>
  40367a:	e886 1010 	stmia.w	r6, {r4, ip}
  40367e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403682:	b912      	cbnz	r2, 40368a <__udivmoddi4+0xfa>
  403684:	2701      	movs	r7, #1
  403686:	fbb7 f7f2 	udiv	r7, r7, r2
  40368a:	fab7 fe87 	clz	lr, r7
  40368e:	f1be 0f00 	cmp.w	lr, #0
  403692:	d134      	bne.n	4036fe <__udivmoddi4+0x16e>
  403694:	1beb      	subs	r3, r5, r7
  403696:	0c3a      	lsrs	r2, r7, #16
  403698:	fa1f fc87 	uxth.w	ip, r7
  40369c:	2101      	movs	r1, #1
  40369e:	fbb3 f8f2 	udiv	r8, r3, r2
  4036a2:	0c25      	lsrs	r5, r4, #16
  4036a4:	fb02 3318 	mls	r3, r2, r8, r3
  4036a8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4036ac:	fb0c f308 	mul.w	r3, ip, r8
  4036b0:	42ab      	cmp	r3, r5
  4036b2:	d907      	bls.n	4036c4 <__udivmoddi4+0x134>
  4036b4:	19ed      	adds	r5, r5, r7
  4036b6:	f108 30ff 	add.w	r0, r8, #4294967295
  4036ba:	d202      	bcs.n	4036c2 <__udivmoddi4+0x132>
  4036bc:	42ab      	cmp	r3, r5
  4036be:	f200 80d1 	bhi.w	403864 <__udivmoddi4+0x2d4>
  4036c2:	4680      	mov	r8, r0
  4036c4:	1aed      	subs	r5, r5, r3
  4036c6:	b2a3      	uxth	r3, r4
  4036c8:	fbb5 f0f2 	udiv	r0, r5, r2
  4036cc:	fb02 5510 	mls	r5, r2, r0, r5
  4036d0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4036d4:	fb0c fc00 	mul.w	ip, ip, r0
  4036d8:	45a4      	cmp	ip, r4
  4036da:	d907      	bls.n	4036ec <__udivmoddi4+0x15c>
  4036dc:	19e4      	adds	r4, r4, r7
  4036de:	f100 33ff 	add.w	r3, r0, #4294967295
  4036e2:	d202      	bcs.n	4036ea <__udivmoddi4+0x15a>
  4036e4:	45a4      	cmp	ip, r4
  4036e6:	f200 80b8 	bhi.w	40385a <__udivmoddi4+0x2ca>
  4036ea:	4618      	mov	r0, r3
  4036ec:	eba4 040c 	sub.w	r4, r4, ip
  4036f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4036f4:	e79d      	b.n	403632 <__udivmoddi4+0xa2>
  4036f6:	4631      	mov	r1, r6
  4036f8:	4630      	mov	r0, r6
  4036fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4036fe:	f1ce 0420 	rsb	r4, lr, #32
  403702:	fa05 f30e 	lsl.w	r3, r5, lr
  403706:	fa07 f70e 	lsl.w	r7, r7, lr
  40370a:	fa20 f804 	lsr.w	r8, r0, r4
  40370e:	0c3a      	lsrs	r2, r7, #16
  403710:	fa25 f404 	lsr.w	r4, r5, r4
  403714:	ea48 0803 	orr.w	r8, r8, r3
  403718:	fbb4 f1f2 	udiv	r1, r4, r2
  40371c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403720:	fb02 4411 	mls	r4, r2, r1, r4
  403724:	fa1f fc87 	uxth.w	ip, r7
  403728:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40372c:	fb01 f30c 	mul.w	r3, r1, ip
  403730:	42ab      	cmp	r3, r5
  403732:	fa00 f40e 	lsl.w	r4, r0, lr
  403736:	d909      	bls.n	40374c <__udivmoddi4+0x1bc>
  403738:	19ed      	adds	r5, r5, r7
  40373a:	f101 30ff 	add.w	r0, r1, #4294967295
  40373e:	f080 808a 	bcs.w	403856 <__udivmoddi4+0x2c6>
  403742:	42ab      	cmp	r3, r5
  403744:	f240 8087 	bls.w	403856 <__udivmoddi4+0x2c6>
  403748:	3902      	subs	r1, #2
  40374a:	443d      	add	r5, r7
  40374c:	1aeb      	subs	r3, r5, r3
  40374e:	fa1f f588 	uxth.w	r5, r8
  403752:	fbb3 f0f2 	udiv	r0, r3, r2
  403756:	fb02 3310 	mls	r3, r2, r0, r3
  40375a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40375e:	fb00 f30c 	mul.w	r3, r0, ip
  403762:	42ab      	cmp	r3, r5
  403764:	d907      	bls.n	403776 <__udivmoddi4+0x1e6>
  403766:	19ed      	adds	r5, r5, r7
  403768:	f100 38ff 	add.w	r8, r0, #4294967295
  40376c:	d26f      	bcs.n	40384e <__udivmoddi4+0x2be>
  40376e:	42ab      	cmp	r3, r5
  403770:	d96d      	bls.n	40384e <__udivmoddi4+0x2be>
  403772:	3802      	subs	r0, #2
  403774:	443d      	add	r5, r7
  403776:	1aeb      	subs	r3, r5, r3
  403778:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40377c:	e78f      	b.n	40369e <__udivmoddi4+0x10e>
  40377e:	f1c1 0720 	rsb	r7, r1, #32
  403782:	fa22 f807 	lsr.w	r8, r2, r7
  403786:	408b      	lsls	r3, r1
  403788:	fa05 f401 	lsl.w	r4, r5, r1
  40378c:	ea48 0303 	orr.w	r3, r8, r3
  403790:	fa20 fe07 	lsr.w	lr, r0, r7
  403794:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403798:	40fd      	lsrs	r5, r7
  40379a:	ea4e 0e04 	orr.w	lr, lr, r4
  40379e:	fbb5 f9fc 	udiv	r9, r5, ip
  4037a2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4037a6:	fb0c 5519 	mls	r5, ip, r9, r5
  4037aa:	fa1f f883 	uxth.w	r8, r3
  4037ae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4037b2:	fb09 f408 	mul.w	r4, r9, r8
  4037b6:	42ac      	cmp	r4, r5
  4037b8:	fa02 f201 	lsl.w	r2, r2, r1
  4037bc:	fa00 fa01 	lsl.w	sl, r0, r1
  4037c0:	d908      	bls.n	4037d4 <__udivmoddi4+0x244>
  4037c2:	18ed      	adds	r5, r5, r3
  4037c4:	f109 30ff 	add.w	r0, r9, #4294967295
  4037c8:	d243      	bcs.n	403852 <__udivmoddi4+0x2c2>
  4037ca:	42ac      	cmp	r4, r5
  4037cc:	d941      	bls.n	403852 <__udivmoddi4+0x2c2>
  4037ce:	f1a9 0902 	sub.w	r9, r9, #2
  4037d2:	441d      	add	r5, r3
  4037d4:	1b2d      	subs	r5, r5, r4
  4037d6:	fa1f fe8e 	uxth.w	lr, lr
  4037da:	fbb5 f0fc 	udiv	r0, r5, ip
  4037de:	fb0c 5510 	mls	r5, ip, r0, r5
  4037e2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4037e6:	fb00 f808 	mul.w	r8, r0, r8
  4037ea:	45a0      	cmp	r8, r4
  4037ec:	d907      	bls.n	4037fe <__udivmoddi4+0x26e>
  4037ee:	18e4      	adds	r4, r4, r3
  4037f0:	f100 35ff 	add.w	r5, r0, #4294967295
  4037f4:	d229      	bcs.n	40384a <__udivmoddi4+0x2ba>
  4037f6:	45a0      	cmp	r8, r4
  4037f8:	d927      	bls.n	40384a <__udivmoddi4+0x2ba>
  4037fa:	3802      	subs	r0, #2
  4037fc:	441c      	add	r4, r3
  4037fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403802:	eba4 0408 	sub.w	r4, r4, r8
  403806:	fba0 8902 	umull	r8, r9, r0, r2
  40380a:	454c      	cmp	r4, r9
  40380c:	46c6      	mov	lr, r8
  40380e:	464d      	mov	r5, r9
  403810:	d315      	bcc.n	40383e <__udivmoddi4+0x2ae>
  403812:	d012      	beq.n	40383a <__udivmoddi4+0x2aa>
  403814:	b156      	cbz	r6, 40382c <__udivmoddi4+0x29c>
  403816:	ebba 030e 	subs.w	r3, sl, lr
  40381a:	eb64 0405 	sbc.w	r4, r4, r5
  40381e:	fa04 f707 	lsl.w	r7, r4, r7
  403822:	40cb      	lsrs	r3, r1
  403824:	431f      	orrs	r7, r3
  403826:	40cc      	lsrs	r4, r1
  403828:	6037      	str	r7, [r6, #0]
  40382a:	6074      	str	r4, [r6, #4]
  40382c:	2100      	movs	r1, #0
  40382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403832:	4618      	mov	r0, r3
  403834:	e6f8      	b.n	403628 <__udivmoddi4+0x98>
  403836:	4690      	mov	r8, r2
  403838:	e6e0      	b.n	4035fc <__udivmoddi4+0x6c>
  40383a:	45c2      	cmp	sl, r8
  40383c:	d2ea      	bcs.n	403814 <__udivmoddi4+0x284>
  40383e:	ebb8 0e02 	subs.w	lr, r8, r2
  403842:	eb69 0503 	sbc.w	r5, r9, r3
  403846:	3801      	subs	r0, #1
  403848:	e7e4      	b.n	403814 <__udivmoddi4+0x284>
  40384a:	4628      	mov	r0, r5
  40384c:	e7d7      	b.n	4037fe <__udivmoddi4+0x26e>
  40384e:	4640      	mov	r0, r8
  403850:	e791      	b.n	403776 <__udivmoddi4+0x1e6>
  403852:	4681      	mov	r9, r0
  403854:	e7be      	b.n	4037d4 <__udivmoddi4+0x244>
  403856:	4601      	mov	r1, r0
  403858:	e778      	b.n	40374c <__udivmoddi4+0x1bc>
  40385a:	3802      	subs	r0, #2
  40385c:	443c      	add	r4, r7
  40385e:	e745      	b.n	4036ec <__udivmoddi4+0x15c>
  403860:	4608      	mov	r0, r1
  403862:	e708      	b.n	403676 <__udivmoddi4+0xe6>
  403864:	f1a8 0802 	sub.w	r8, r8, #2
  403868:	443d      	add	r5, r7
  40386a:	e72b      	b.n	4036c4 <__udivmoddi4+0x134>

0040386c <__aeabi_idiv0>:
  40386c:	4770      	bx	lr
  40386e:	bf00      	nop

00403870 <__errno>:
  403870:	4b01      	ldr	r3, [pc, #4]	; (403878 <__errno+0x8>)
  403872:	6818      	ldr	r0, [r3, #0]
  403874:	4770      	bx	lr
  403876:	bf00      	nop
  403878:	2000000c 	.word	0x2000000c

0040387c <__libc_init_array>:
  40387c:	b570      	push	{r4, r5, r6, lr}
  40387e:	4e0f      	ldr	r6, [pc, #60]	; (4038bc <__libc_init_array+0x40>)
  403880:	4d0f      	ldr	r5, [pc, #60]	; (4038c0 <__libc_init_array+0x44>)
  403882:	1b76      	subs	r6, r6, r5
  403884:	10b6      	asrs	r6, r6, #2
  403886:	bf18      	it	ne
  403888:	2400      	movne	r4, #0
  40388a:	d005      	beq.n	403898 <__libc_init_array+0x1c>
  40388c:	3401      	adds	r4, #1
  40388e:	f855 3b04 	ldr.w	r3, [r5], #4
  403892:	4798      	blx	r3
  403894:	42a6      	cmp	r6, r4
  403896:	d1f9      	bne.n	40388c <__libc_init_array+0x10>
  403898:	4e0a      	ldr	r6, [pc, #40]	; (4038c4 <__libc_init_array+0x48>)
  40389a:	4d0b      	ldr	r5, [pc, #44]	; (4038c8 <__libc_init_array+0x4c>)
  40389c:	1b76      	subs	r6, r6, r5
  40389e:	f002 ff07 	bl	4066b0 <_init>
  4038a2:	10b6      	asrs	r6, r6, #2
  4038a4:	bf18      	it	ne
  4038a6:	2400      	movne	r4, #0
  4038a8:	d006      	beq.n	4038b8 <__libc_init_array+0x3c>
  4038aa:	3401      	adds	r4, #1
  4038ac:	f855 3b04 	ldr.w	r3, [r5], #4
  4038b0:	4798      	blx	r3
  4038b2:	42a6      	cmp	r6, r4
  4038b4:	d1f9      	bne.n	4038aa <__libc_init_array+0x2e>
  4038b6:	bd70      	pop	{r4, r5, r6, pc}
  4038b8:	bd70      	pop	{r4, r5, r6, pc}
  4038ba:	bf00      	nop
  4038bc:	004066bc 	.word	0x004066bc
  4038c0:	004066bc 	.word	0x004066bc
  4038c4:	004066c4 	.word	0x004066c4
  4038c8:	004066bc 	.word	0x004066bc

004038cc <iprintf>:
  4038cc:	b40f      	push	{r0, r1, r2, r3}
  4038ce:	b500      	push	{lr}
  4038d0:	4907      	ldr	r1, [pc, #28]	; (4038f0 <iprintf+0x24>)
  4038d2:	b083      	sub	sp, #12
  4038d4:	ab04      	add	r3, sp, #16
  4038d6:	6808      	ldr	r0, [r1, #0]
  4038d8:	f853 2b04 	ldr.w	r2, [r3], #4
  4038dc:	6881      	ldr	r1, [r0, #8]
  4038de:	9301      	str	r3, [sp, #4]
  4038e0:	f000 f9dc 	bl	403c9c <_vfiprintf_r>
  4038e4:	b003      	add	sp, #12
  4038e6:	f85d eb04 	ldr.w	lr, [sp], #4
  4038ea:	b004      	add	sp, #16
  4038ec:	4770      	bx	lr
  4038ee:	bf00      	nop
  4038f0:	2000000c 	.word	0x2000000c

004038f4 <memset>:
  4038f4:	b470      	push	{r4, r5, r6}
  4038f6:	0786      	lsls	r6, r0, #30
  4038f8:	d046      	beq.n	403988 <memset+0x94>
  4038fa:	1e54      	subs	r4, r2, #1
  4038fc:	2a00      	cmp	r2, #0
  4038fe:	d041      	beq.n	403984 <memset+0x90>
  403900:	b2ca      	uxtb	r2, r1
  403902:	4603      	mov	r3, r0
  403904:	e002      	b.n	40390c <memset+0x18>
  403906:	f114 34ff 	adds.w	r4, r4, #4294967295
  40390a:	d33b      	bcc.n	403984 <memset+0x90>
  40390c:	f803 2b01 	strb.w	r2, [r3], #1
  403910:	079d      	lsls	r5, r3, #30
  403912:	d1f8      	bne.n	403906 <memset+0x12>
  403914:	2c03      	cmp	r4, #3
  403916:	d92e      	bls.n	403976 <memset+0x82>
  403918:	b2cd      	uxtb	r5, r1
  40391a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40391e:	2c0f      	cmp	r4, #15
  403920:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403924:	d919      	bls.n	40395a <memset+0x66>
  403926:	f103 0210 	add.w	r2, r3, #16
  40392a:	4626      	mov	r6, r4
  40392c:	3e10      	subs	r6, #16
  40392e:	2e0f      	cmp	r6, #15
  403930:	f842 5c10 	str.w	r5, [r2, #-16]
  403934:	f842 5c0c 	str.w	r5, [r2, #-12]
  403938:	f842 5c08 	str.w	r5, [r2, #-8]
  40393c:	f842 5c04 	str.w	r5, [r2, #-4]
  403940:	f102 0210 	add.w	r2, r2, #16
  403944:	d8f2      	bhi.n	40392c <memset+0x38>
  403946:	f1a4 0210 	sub.w	r2, r4, #16
  40394a:	f022 020f 	bic.w	r2, r2, #15
  40394e:	f004 040f 	and.w	r4, r4, #15
  403952:	3210      	adds	r2, #16
  403954:	2c03      	cmp	r4, #3
  403956:	4413      	add	r3, r2
  403958:	d90d      	bls.n	403976 <memset+0x82>
  40395a:	461e      	mov	r6, r3
  40395c:	4622      	mov	r2, r4
  40395e:	3a04      	subs	r2, #4
  403960:	2a03      	cmp	r2, #3
  403962:	f846 5b04 	str.w	r5, [r6], #4
  403966:	d8fa      	bhi.n	40395e <memset+0x6a>
  403968:	1f22      	subs	r2, r4, #4
  40396a:	f022 0203 	bic.w	r2, r2, #3
  40396e:	3204      	adds	r2, #4
  403970:	4413      	add	r3, r2
  403972:	f004 0403 	and.w	r4, r4, #3
  403976:	b12c      	cbz	r4, 403984 <memset+0x90>
  403978:	b2c9      	uxtb	r1, r1
  40397a:	441c      	add	r4, r3
  40397c:	f803 1b01 	strb.w	r1, [r3], #1
  403980:	429c      	cmp	r4, r3
  403982:	d1fb      	bne.n	40397c <memset+0x88>
  403984:	bc70      	pop	{r4, r5, r6}
  403986:	4770      	bx	lr
  403988:	4614      	mov	r4, r2
  40398a:	4603      	mov	r3, r0
  40398c:	e7c2      	b.n	403914 <memset+0x20>
  40398e:	bf00      	nop

00403990 <setbuf>:
  403990:	2900      	cmp	r1, #0
  403992:	bf0c      	ite	eq
  403994:	2202      	moveq	r2, #2
  403996:	2200      	movne	r2, #0
  403998:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40399c:	f000 b800 	b.w	4039a0 <setvbuf>

004039a0 <setvbuf>:
  4039a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4039a4:	4c61      	ldr	r4, [pc, #388]	; (403b2c <setvbuf+0x18c>)
  4039a6:	6825      	ldr	r5, [r4, #0]
  4039a8:	b083      	sub	sp, #12
  4039aa:	4604      	mov	r4, r0
  4039ac:	460f      	mov	r7, r1
  4039ae:	4690      	mov	r8, r2
  4039b0:	461e      	mov	r6, r3
  4039b2:	b115      	cbz	r5, 4039ba <setvbuf+0x1a>
  4039b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4039b6:	2b00      	cmp	r3, #0
  4039b8:	d064      	beq.n	403a84 <setvbuf+0xe4>
  4039ba:	f1b8 0f02 	cmp.w	r8, #2
  4039be:	d006      	beq.n	4039ce <setvbuf+0x2e>
  4039c0:	f1b8 0f01 	cmp.w	r8, #1
  4039c4:	f200 809f 	bhi.w	403b06 <setvbuf+0x166>
  4039c8:	2e00      	cmp	r6, #0
  4039ca:	f2c0 809c 	blt.w	403b06 <setvbuf+0x166>
  4039ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4039d0:	07d8      	lsls	r0, r3, #31
  4039d2:	d534      	bpl.n	403a3e <setvbuf+0x9e>
  4039d4:	4621      	mov	r1, r4
  4039d6:	4628      	mov	r0, r5
  4039d8:	f001 f8fe 	bl	404bd8 <_fflush_r>
  4039dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4039de:	b141      	cbz	r1, 4039f2 <setvbuf+0x52>
  4039e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4039e4:	4299      	cmp	r1, r3
  4039e6:	d002      	beq.n	4039ee <setvbuf+0x4e>
  4039e8:	4628      	mov	r0, r5
  4039ea:	f001 fa73 	bl	404ed4 <_free_r>
  4039ee:	2300      	movs	r3, #0
  4039f0:	6323      	str	r3, [r4, #48]	; 0x30
  4039f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039f6:	2200      	movs	r2, #0
  4039f8:	61a2      	str	r2, [r4, #24]
  4039fa:	6062      	str	r2, [r4, #4]
  4039fc:	061a      	lsls	r2, r3, #24
  4039fe:	d43a      	bmi.n	403a76 <setvbuf+0xd6>
  403a00:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403a04:	f023 0303 	bic.w	r3, r3, #3
  403a08:	f1b8 0f02 	cmp.w	r8, #2
  403a0c:	81a3      	strh	r3, [r4, #12]
  403a0e:	d01d      	beq.n	403a4c <setvbuf+0xac>
  403a10:	ab01      	add	r3, sp, #4
  403a12:	466a      	mov	r2, sp
  403a14:	4621      	mov	r1, r4
  403a16:	4628      	mov	r0, r5
  403a18:	f001 fcfa 	bl	405410 <__swhatbuf_r>
  403a1c:	89a3      	ldrh	r3, [r4, #12]
  403a1e:	4318      	orrs	r0, r3
  403a20:	81a0      	strh	r0, [r4, #12]
  403a22:	2e00      	cmp	r6, #0
  403a24:	d132      	bne.n	403a8c <setvbuf+0xec>
  403a26:	9e00      	ldr	r6, [sp, #0]
  403a28:	4630      	mov	r0, r6
  403a2a:	f001 fd69 	bl	405500 <malloc>
  403a2e:	4607      	mov	r7, r0
  403a30:	2800      	cmp	r0, #0
  403a32:	d06b      	beq.n	403b0c <setvbuf+0x16c>
  403a34:	89a3      	ldrh	r3, [r4, #12]
  403a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403a3a:	81a3      	strh	r3, [r4, #12]
  403a3c:	e028      	b.n	403a90 <setvbuf+0xf0>
  403a3e:	89a3      	ldrh	r3, [r4, #12]
  403a40:	0599      	lsls	r1, r3, #22
  403a42:	d4c7      	bmi.n	4039d4 <setvbuf+0x34>
  403a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a46:	f001 fcdf 	bl	405408 <__retarget_lock_acquire_recursive>
  403a4a:	e7c3      	b.n	4039d4 <setvbuf+0x34>
  403a4c:	2500      	movs	r5, #0
  403a4e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403a50:	2600      	movs	r6, #0
  403a52:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403a56:	f043 0302 	orr.w	r3, r3, #2
  403a5a:	2001      	movs	r0, #1
  403a5c:	60a6      	str	r6, [r4, #8]
  403a5e:	07ce      	lsls	r6, r1, #31
  403a60:	81a3      	strh	r3, [r4, #12]
  403a62:	6022      	str	r2, [r4, #0]
  403a64:	6122      	str	r2, [r4, #16]
  403a66:	6160      	str	r0, [r4, #20]
  403a68:	d401      	bmi.n	403a6e <setvbuf+0xce>
  403a6a:	0598      	lsls	r0, r3, #22
  403a6c:	d53e      	bpl.n	403aec <setvbuf+0x14c>
  403a6e:	4628      	mov	r0, r5
  403a70:	b003      	add	sp, #12
  403a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403a76:	6921      	ldr	r1, [r4, #16]
  403a78:	4628      	mov	r0, r5
  403a7a:	f001 fa2b 	bl	404ed4 <_free_r>
  403a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a82:	e7bd      	b.n	403a00 <setvbuf+0x60>
  403a84:	4628      	mov	r0, r5
  403a86:	f001 f8ff 	bl	404c88 <__sinit>
  403a8a:	e796      	b.n	4039ba <setvbuf+0x1a>
  403a8c:	2f00      	cmp	r7, #0
  403a8e:	d0cb      	beq.n	403a28 <setvbuf+0x88>
  403a90:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403a92:	2b00      	cmp	r3, #0
  403a94:	d033      	beq.n	403afe <setvbuf+0x15e>
  403a96:	9b00      	ldr	r3, [sp, #0]
  403a98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a9c:	6027      	str	r7, [r4, #0]
  403a9e:	429e      	cmp	r6, r3
  403aa0:	bf1c      	itt	ne
  403aa2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403aa6:	81a2      	strhne	r2, [r4, #12]
  403aa8:	f1b8 0f01 	cmp.w	r8, #1
  403aac:	bf04      	itt	eq
  403aae:	f042 0201 	orreq.w	r2, r2, #1
  403ab2:	81a2      	strheq	r2, [r4, #12]
  403ab4:	b292      	uxth	r2, r2
  403ab6:	f012 0308 	ands.w	r3, r2, #8
  403aba:	6127      	str	r7, [r4, #16]
  403abc:	6166      	str	r6, [r4, #20]
  403abe:	d00e      	beq.n	403ade <setvbuf+0x13e>
  403ac0:	07d1      	lsls	r1, r2, #31
  403ac2:	d51a      	bpl.n	403afa <setvbuf+0x15a>
  403ac4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403ac6:	4276      	negs	r6, r6
  403ac8:	2300      	movs	r3, #0
  403aca:	f015 0501 	ands.w	r5, r5, #1
  403ace:	61a6      	str	r6, [r4, #24]
  403ad0:	60a3      	str	r3, [r4, #8]
  403ad2:	d009      	beq.n	403ae8 <setvbuf+0x148>
  403ad4:	2500      	movs	r5, #0
  403ad6:	4628      	mov	r0, r5
  403ad8:	b003      	add	sp, #12
  403ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403ade:	60a3      	str	r3, [r4, #8]
  403ae0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403ae2:	f015 0501 	ands.w	r5, r5, #1
  403ae6:	d1f5      	bne.n	403ad4 <setvbuf+0x134>
  403ae8:	0593      	lsls	r3, r2, #22
  403aea:	d4c0      	bmi.n	403a6e <setvbuf+0xce>
  403aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403aee:	f001 fc8d 	bl	40540c <__retarget_lock_release_recursive>
  403af2:	4628      	mov	r0, r5
  403af4:	b003      	add	sp, #12
  403af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403afa:	60a6      	str	r6, [r4, #8]
  403afc:	e7f0      	b.n	403ae0 <setvbuf+0x140>
  403afe:	4628      	mov	r0, r5
  403b00:	f001 f8c2 	bl	404c88 <__sinit>
  403b04:	e7c7      	b.n	403a96 <setvbuf+0xf6>
  403b06:	f04f 35ff 	mov.w	r5, #4294967295
  403b0a:	e7b0      	b.n	403a6e <setvbuf+0xce>
  403b0c:	f8dd 9000 	ldr.w	r9, [sp]
  403b10:	45b1      	cmp	r9, r6
  403b12:	d004      	beq.n	403b1e <setvbuf+0x17e>
  403b14:	4648      	mov	r0, r9
  403b16:	f001 fcf3 	bl	405500 <malloc>
  403b1a:	4607      	mov	r7, r0
  403b1c:	b920      	cbnz	r0, 403b28 <setvbuf+0x188>
  403b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b22:	f04f 35ff 	mov.w	r5, #4294967295
  403b26:	e792      	b.n	403a4e <setvbuf+0xae>
  403b28:	464e      	mov	r6, r9
  403b2a:	e783      	b.n	403a34 <setvbuf+0x94>
  403b2c:	2000000c 	.word	0x2000000c
	...

00403b40 <strlen>:
  403b40:	f890 f000 	pld	[r0]
  403b44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403b48:	f020 0107 	bic.w	r1, r0, #7
  403b4c:	f06f 0c00 	mvn.w	ip, #0
  403b50:	f010 0407 	ands.w	r4, r0, #7
  403b54:	f891 f020 	pld	[r1, #32]
  403b58:	f040 8049 	bne.w	403bee <strlen+0xae>
  403b5c:	f04f 0400 	mov.w	r4, #0
  403b60:	f06f 0007 	mvn.w	r0, #7
  403b64:	e9d1 2300 	ldrd	r2, r3, [r1]
  403b68:	f891 f040 	pld	[r1, #64]	; 0x40
  403b6c:	f100 0008 	add.w	r0, r0, #8
  403b70:	fa82 f24c 	uadd8	r2, r2, ip
  403b74:	faa4 f28c 	sel	r2, r4, ip
  403b78:	fa83 f34c 	uadd8	r3, r3, ip
  403b7c:	faa2 f38c 	sel	r3, r2, ip
  403b80:	bb4b      	cbnz	r3, 403bd6 <strlen+0x96>
  403b82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403b86:	fa82 f24c 	uadd8	r2, r2, ip
  403b8a:	f100 0008 	add.w	r0, r0, #8
  403b8e:	faa4 f28c 	sel	r2, r4, ip
  403b92:	fa83 f34c 	uadd8	r3, r3, ip
  403b96:	faa2 f38c 	sel	r3, r2, ip
  403b9a:	b9e3      	cbnz	r3, 403bd6 <strlen+0x96>
  403b9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403ba0:	fa82 f24c 	uadd8	r2, r2, ip
  403ba4:	f100 0008 	add.w	r0, r0, #8
  403ba8:	faa4 f28c 	sel	r2, r4, ip
  403bac:	fa83 f34c 	uadd8	r3, r3, ip
  403bb0:	faa2 f38c 	sel	r3, r2, ip
  403bb4:	b97b      	cbnz	r3, 403bd6 <strlen+0x96>
  403bb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403bba:	f101 0120 	add.w	r1, r1, #32
  403bbe:	fa82 f24c 	uadd8	r2, r2, ip
  403bc2:	f100 0008 	add.w	r0, r0, #8
  403bc6:	faa4 f28c 	sel	r2, r4, ip
  403bca:	fa83 f34c 	uadd8	r3, r3, ip
  403bce:	faa2 f38c 	sel	r3, r2, ip
  403bd2:	2b00      	cmp	r3, #0
  403bd4:	d0c6      	beq.n	403b64 <strlen+0x24>
  403bd6:	2a00      	cmp	r2, #0
  403bd8:	bf04      	itt	eq
  403bda:	3004      	addeq	r0, #4
  403bdc:	461a      	moveq	r2, r3
  403bde:	ba12      	rev	r2, r2
  403be0:	fab2 f282 	clz	r2, r2
  403be4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403be8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403bec:	4770      	bx	lr
  403bee:	e9d1 2300 	ldrd	r2, r3, [r1]
  403bf2:	f004 0503 	and.w	r5, r4, #3
  403bf6:	f1c4 0000 	rsb	r0, r4, #0
  403bfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403bfe:	f014 0f04 	tst.w	r4, #4
  403c02:	f891 f040 	pld	[r1, #64]	; 0x40
  403c06:	fa0c f505 	lsl.w	r5, ip, r5
  403c0a:	ea62 0205 	orn	r2, r2, r5
  403c0e:	bf1c      	itt	ne
  403c10:	ea63 0305 	ornne	r3, r3, r5
  403c14:	4662      	movne	r2, ip
  403c16:	f04f 0400 	mov.w	r4, #0
  403c1a:	e7a9      	b.n	403b70 <strlen+0x30>

00403c1c <__sprint_r.part.0>:
  403c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403c22:	049c      	lsls	r4, r3, #18
  403c24:	4693      	mov	fp, r2
  403c26:	d52f      	bpl.n	403c88 <__sprint_r.part.0+0x6c>
  403c28:	6893      	ldr	r3, [r2, #8]
  403c2a:	6812      	ldr	r2, [r2, #0]
  403c2c:	b353      	cbz	r3, 403c84 <__sprint_r.part.0+0x68>
  403c2e:	460e      	mov	r6, r1
  403c30:	4607      	mov	r7, r0
  403c32:	f102 0908 	add.w	r9, r2, #8
  403c36:	e919 0420 	ldmdb	r9, {r5, sl}
  403c3a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  403c3e:	d017      	beq.n	403c70 <__sprint_r.part.0+0x54>
  403c40:	3d04      	subs	r5, #4
  403c42:	2400      	movs	r4, #0
  403c44:	e001      	b.n	403c4a <__sprint_r.part.0+0x2e>
  403c46:	45a0      	cmp	r8, r4
  403c48:	d010      	beq.n	403c6c <__sprint_r.part.0+0x50>
  403c4a:	4632      	mov	r2, r6
  403c4c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403c50:	4638      	mov	r0, r7
  403c52:	f001 f8bb 	bl	404dcc <_fputwc_r>
  403c56:	1c43      	adds	r3, r0, #1
  403c58:	f104 0401 	add.w	r4, r4, #1
  403c5c:	d1f3      	bne.n	403c46 <__sprint_r.part.0+0x2a>
  403c5e:	2300      	movs	r3, #0
  403c60:	f8cb 3008 	str.w	r3, [fp, #8]
  403c64:	f8cb 3004 	str.w	r3, [fp, #4]
  403c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c6c:	f8db 3008 	ldr.w	r3, [fp, #8]
  403c70:	f02a 0a03 	bic.w	sl, sl, #3
  403c74:	eba3 030a 	sub.w	r3, r3, sl
  403c78:	f8cb 3008 	str.w	r3, [fp, #8]
  403c7c:	f109 0908 	add.w	r9, r9, #8
  403c80:	2b00      	cmp	r3, #0
  403c82:	d1d8      	bne.n	403c36 <__sprint_r.part.0+0x1a>
  403c84:	2000      	movs	r0, #0
  403c86:	e7ea      	b.n	403c5e <__sprint_r.part.0+0x42>
  403c88:	f001 fa0a 	bl	4050a0 <__sfvwrite_r>
  403c8c:	2300      	movs	r3, #0
  403c8e:	f8cb 3008 	str.w	r3, [fp, #8]
  403c92:	f8cb 3004 	str.w	r3, [fp, #4]
  403c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c9a:	bf00      	nop

00403c9c <_vfiprintf_r>:
  403c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ca0:	b0ad      	sub	sp, #180	; 0xb4
  403ca2:	461d      	mov	r5, r3
  403ca4:	468b      	mov	fp, r1
  403ca6:	4690      	mov	r8, r2
  403ca8:	9307      	str	r3, [sp, #28]
  403caa:	9006      	str	r0, [sp, #24]
  403cac:	b118      	cbz	r0, 403cb6 <_vfiprintf_r+0x1a>
  403cae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403cb0:	2b00      	cmp	r3, #0
  403cb2:	f000 80f3 	beq.w	403e9c <_vfiprintf_r+0x200>
  403cb6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403cba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403cbe:	07df      	lsls	r7, r3, #31
  403cc0:	b281      	uxth	r1, r0
  403cc2:	d402      	bmi.n	403cca <_vfiprintf_r+0x2e>
  403cc4:	058e      	lsls	r6, r1, #22
  403cc6:	f140 80fc 	bpl.w	403ec2 <_vfiprintf_r+0x226>
  403cca:	048c      	lsls	r4, r1, #18
  403ccc:	d40a      	bmi.n	403ce4 <_vfiprintf_r+0x48>
  403cce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403cd2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403cda:	f8ab 100c 	strh.w	r1, [fp, #12]
  403cde:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403ce2:	b289      	uxth	r1, r1
  403ce4:	0708      	lsls	r0, r1, #28
  403ce6:	f140 80b3 	bpl.w	403e50 <_vfiprintf_r+0x1b4>
  403cea:	f8db 3010 	ldr.w	r3, [fp, #16]
  403cee:	2b00      	cmp	r3, #0
  403cf0:	f000 80ae 	beq.w	403e50 <_vfiprintf_r+0x1b4>
  403cf4:	f001 031a 	and.w	r3, r1, #26
  403cf8:	2b0a      	cmp	r3, #10
  403cfa:	f000 80b5 	beq.w	403e68 <_vfiprintf_r+0x1cc>
  403cfe:	2300      	movs	r3, #0
  403d00:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403d04:	930b      	str	r3, [sp, #44]	; 0x2c
  403d06:	9311      	str	r3, [sp, #68]	; 0x44
  403d08:	9310      	str	r3, [sp, #64]	; 0x40
  403d0a:	9303      	str	r3, [sp, #12]
  403d0c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403d10:	46ca      	mov	sl, r9
  403d12:	f8cd b010 	str.w	fp, [sp, #16]
  403d16:	f898 3000 	ldrb.w	r3, [r8]
  403d1a:	4644      	mov	r4, r8
  403d1c:	b1fb      	cbz	r3, 403d5e <_vfiprintf_r+0xc2>
  403d1e:	2b25      	cmp	r3, #37	; 0x25
  403d20:	d102      	bne.n	403d28 <_vfiprintf_r+0x8c>
  403d22:	e01c      	b.n	403d5e <_vfiprintf_r+0xc2>
  403d24:	2b25      	cmp	r3, #37	; 0x25
  403d26:	d003      	beq.n	403d30 <_vfiprintf_r+0x94>
  403d28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403d2c:	2b00      	cmp	r3, #0
  403d2e:	d1f9      	bne.n	403d24 <_vfiprintf_r+0x88>
  403d30:	eba4 0508 	sub.w	r5, r4, r8
  403d34:	b19d      	cbz	r5, 403d5e <_vfiprintf_r+0xc2>
  403d36:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403d38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d3a:	f8ca 8000 	str.w	r8, [sl]
  403d3e:	3301      	adds	r3, #1
  403d40:	442a      	add	r2, r5
  403d42:	2b07      	cmp	r3, #7
  403d44:	f8ca 5004 	str.w	r5, [sl, #4]
  403d48:	9211      	str	r2, [sp, #68]	; 0x44
  403d4a:	9310      	str	r3, [sp, #64]	; 0x40
  403d4c:	dd7a      	ble.n	403e44 <_vfiprintf_r+0x1a8>
  403d4e:	2a00      	cmp	r2, #0
  403d50:	f040 84b0 	bne.w	4046b4 <_vfiprintf_r+0xa18>
  403d54:	9b03      	ldr	r3, [sp, #12]
  403d56:	9210      	str	r2, [sp, #64]	; 0x40
  403d58:	442b      	add	r3, r5
  403d5a:	46ca      	mov	sl, r9
  403d5c:	9303      	str	r3, [sp, #12]
  403d5e:	7823      	ldrb	r3, [r4, #0]
  403d60:	2b00      	cmp	r3, #0
  403d62:	f000 83e0 	beq.w	404526 <_vfiprintf_r+0x88a>
  403d66:	2000      	movs	r0, #0
  403d68:	f04f 0300 	mov.w	r3, #0
  403d6c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403d70:	f104 0801 	add.w	r8, r4, #1
  403d74:	7862      	ldrb	r2, [r4, #1]
  403d76:	4605      	mov	r5, r0
  403d78:	4606      	mov	r6, r0
  403d7a:	4603      	mov	r3, r0
  403d7c:	f04f 34ff 	mov.w	r4, #4294967295
  403d80:	f108 0801 	add.w	r8, r8, #1
  403d84:	f1a2 0120 	sub.w	r1, r2, #32
  403d88:	2958      	cmp	r1, #88	; 0x58
  403d8a:	f200 82de 	bhi.w	40434a <_vfiprintf_r+0x6ae>
  403d8e:	e8df f011 	tbh	[pc, r1, lsl #1]
  403d92:	0221      	.short	0x0221
  403d94:	02dc02dc 	.word	0x02dc02dc
  403d98:	02dc0229 	.word	0x02dc0229
  403d9c:	02dc02dc 	.word	0x02dc02dc
  403da0:	02dc02dc 	.word	0x02dc02dc
  403da4:	028902dc 	.word	0x028902dc
  403da8:	02dc0295 	.word	0x02dc0295
  403dac:	02bd00a2 	.word	0x02bd00a2
  403db0:	019f02dc 	.word	0x019f02dc
  403db4:	01a401a4 	.word	0x01a401a4
  403db8:	01a401a4 	.word	0x01a401a4
  403dbc:	01a401a4 	.word	0x01a401a4
  403dc0:	01a401a4 	.word	0x01a401a4
  403dc4:	02dc01a4 	.word	0x02dc01a4
  403dc8:	02dc02dc 	.word	0x02dc02dc
  403dcc:	02dc02dc 	.word	0x02dc02dc
  403dd0:	02dc02dc 	.word	0x02dc02dc
  403dd4:	02dc02dc 	.word	0x02dc02dc
  403dd8:	01b202dc 	.word	0x01b202dc
  403ddc:	02dc02dc 	.word	0x02dc02dc
  403de0:	02dc02dc 	.word	0x02dc02dc
  403de4:	02dc02dc 	.word	0x02dc02dc
  403de8:	02dc02dc 	.word	0x02dc02dc
  403dec:	02dc02dc 	.word	0x02dc02dc
  403df0:	02dc0197 	.word	0x02dc0197
  403df4:	02dc02dc 	.word	0x02dc02dc
  403df8:	02dc02dc 	.word	0x02dc02dc
  403dfc:	02dc019b 	.word	0x02dc019b
  403e00:	025302dc 	.word	0x025302dc
  403e04:	02dc02dc 	.word	0x02dc02dc
  403e08:	02dc02dc 	.word	0x02dc02dc
  403e0c:	02dc02dc 	.word	0x02dc02dc
  403e10:	02dc02dc 	.word	0x02dc02dc
  403e14:	02dc02dc 	.word	0x02dc02dc
  403e18:	021b025a 	.word	0x021b025a
  403e1c:	02dc02dc 	.word	0x02dc02dc
  403e20:	026e02dc 	.word	0x026e02dc
  403e24:	02dc021b 	.word	0x02dc021b
  403e28:	027302dc 	.word	0x027302dc
  403e2c:	01f502dc 	.word	0x01f502dc
  403e30:	02090182 	.word	0x02090182
  403e34:	02dc02d7 	.word	0x02dc02d7
  403e38:	02dc029a 	.word	0x02dc029a
  403e3c:	02dc00a7 	.word	0x02dc00a7
  403e40:	022e02dc 	.word	0x022e02dc
  403e44:	f10a 0a08 	add.w	sl, sl, #8
  403e48:	9b03      	ldr	r3, [sp, #12]
  403e4a:	442b      	add	r3, r5
  403e4c:	9303      	str	r3, [sp, #12]
  403e4e:	e786      	b.n	403d5e <_vfiprintf_r+0xc2>
  403e50:	4659      	mov	r1, fp
  403e52:	9806      	ldr	r0, [sp, #24]
  403e54:	f000 fdac 	bl	4049b0 <__swsetup_r>
  403e58:	bb18      	cbnz	r0, 403ea2 <_vfiprintf_r+0x206>
  403e5a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  403e5e:	f001 031a 	and.w	r3, r1, #26
  403e62:	2b0a      	cmp	r3, #10
  403e64:	f47f af4b 	bne.w	403cfe <_vfiprintf_r+0x62>
  403e68:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  403e6c:	2b00      	cmp	r3, #0
  403e6e:	f6ff af46 	blt.w	403cfe <_vfiprintf_r+0x62>
  403e72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403e76:	07db      	lsls	r3, r3, #31
  403e78:	d405      	bmi.n	403e86 <_vfiprintf_r+0x1ea>
  403e7a:	058f      	lsls	r7, r1, #22
  403e7c:	d403      	bmi.n	403e86 <_vfiprintf_r+0x1ea>
  403e7e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403e82:	f001 fac3 	bl	40540c <__retarget_lock_release_recursive>
  403e86:	462b      	mov	r3, r5
  403e88:	4642      	mov	r2, r8
  403e8a:	4659      	mov	r1, fp
  403e8c:	9806      	ldr	r0, [sp, #24]
  403e8e:	f000 fd4d 	bl	40492c <__sbprintf>
  403e92:	9003      	str	r0, [sp, #12]
  403e94:	9803      	ldr	r0, [sp, #12]
  403e96:	b02d      	add	sp, #180	; 0xb4
  403e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e9c:	f000 fef4 	bl	404c88 <__sinit>
  403ea0:	e709      	b.n	403cb6 <_vfiprintf_r+0x1a>
  403ea2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403ea6:	07d9      	lsls	r1, r3, #31
  403ea8:	d404      	bmi.n	403eb4 <_vfiprintf_r+0x218>
  403eaa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403eae:	059a      	lsls	r2, r3, #22
  403eb0:	f140 84aa 	bpl.w	404808 <_vfiprintf_r+0xb6c>
  403eb4:	f04f 33ff 	mov.w	r3, #4294967295
  403eb8:	9303      	str	r3, [sp, #12]
  403eba:	9803      	ldr	r0, [sp, #12]
  403ebc:	b02d      	add	sp, #180	; 0xb4
  403ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ec2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403ec6:	f001 fa9f 	bl	405408 <__retarget_lock_acquire_recursive>
  403eca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403ece:	b281      	uxth	r1, r0
  403ed0:	e6fb      	b.n	403cca <_vfiprintf_r+0x2e>
  403ed2:	4276      	negs	r6, r6
  403ed4:	9207      	str	r2, [sp, #28]
  403ed6:	f043 0304 	orr.w	r3, r3, #4
  403eda:	f898 2000 	ldrb.w	r2, [r8]
  403ede:	e74f      	b.n	403d80 <_vfiprintf_r+0xe4>
  403ee0:	9608      	str	r6, [sp, #32]
  403ee2:	069e      	lsls	r6, r3, #26
  403ee4:	f100 8450 	bmi.w	404788 <_vfiprintf_r+0xaec>
  403ee8:	9907      	ldr	r1, [sp, #28]
  403eea:	06dd      	lsls	r5, r3, #27
  403eec:	460a      	mov	r2, r1
  403eee:	f100 83ef 	bmi.w	4046d0 <_vfiprintf_r+0xa34>
  403ef2:	0658      	lsls	r0, r3, #25
  403ef4:	f140 83ec 	bpl.w	4046d0 <_vfiprintf_r+0xa34>
  403ef8:	880e      	ldrh	r6, [r1, #0]
  403efa:	3104      	adds	r1, #4
  403efc:	2700      	movs	r7, #0
  403efe:	2201      	movs	r2, #1
  403f00:	9107      	str	r1, [sp, #28]
  403f02:	f04f 0100 	mov.w	r1, #0
  403f06:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  403f0a:	2500      	movs	r5, #0
  403f0c:	1c61      	adds	r1, r4, #1
  403f0e:	f000 8116 	beq.w	40413e <_vfiprintf_r+0x4a2>
  403f12:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403f16:	9102      	str	r1, [sp, #8]
  403f18:	ea56 0107 	orrs.w	r1, r6, r7
  403f1c:	f040 8114 	bne.w	404148 <_vfiprintf_r+0x4ac>
  403f20:	2c00      	cmp	r4, #0
  403f22:	f040 835c 	bne.w	4045de <_vfiprintf_r+0x942>
  403f26:	2a00      	cmp	r2, #0
  403f28:	f040 83b7 	bne.w	40469a <_vfiprintf_r+0x9fe>
  403f2c:	f013 0301 	ands.w	r3, r3, #1
  403f30:	9305      	str	r3, [sp, #20]
  403f32:	f000 8457 	beq.w	4047e4 <_vfiprintf_r+0xb48>
  403f36:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403f3a:	2330      	movs	r3, #48	; 0x30
  403f3c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403f40:	9b05      	ldr	r3, [sp, #20]
  403f42:	42a3      	cmp	r3, r4
  403f44:	bfb8      	it	lt
  403f46:	4623      	movlt	r3, r4
  403f48:	9301      	str	r3, [sp, #4]
  403f4a:	b10d      	cbz	r5, 403f50 <_vfiprintf_r+0x2b4>
  403f4c:	3301      	adds	r3, #1
  403f4e:	9301      	str	r3, [sp, #4]
  403f50:	9b02      	ldr	r3, [sp, #8]
  403f52:	f013 0302 	ands.w	r3, r3, #2
  403f56:	9309      	str	r3, [sp, #36]	; 0x24
  403f58:	d002      	beq.n	403f60 <_vfiprintf_r+0x2c4>
  403f5a:	9b01      	ldr	r3, [sp, #4]
  403f5c:	3302      	adds	r3, #2
  403f5e:	9301      	str	r3, [sp, #4]
  403f60:	9b02      	ldr	r3, [sp, #8]
  403f62:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403f66:	930a      	str	r3, [sp, #40]	; 0x28
  403f68:	f040 8217 	bne.w	40439a <_vfiprintf_r+0x6fe>
  403f6c:	9b08      	ldr	r3, [sp, #32]
  403f6e:	9a01      	ldr	r2, [sp, #4]
  403f70:	1a9d      	subs	r5, r3, r2
  403f72:	2d00      	cmp	r5, #0
  403f74:	f340 8211 	ble.w	40439a <_vfiprintf_r+0x6fe>
  403f78:	2d10      	cmp	r5, #16
  403f7a:	f340 8490 	ble.w	40489e <_vfiprintf_r+0xc02>
  403f7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403f80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f82:	4ec4      	ldr	r6, [pc, #784]	; (404294 <_vfiprintf_r+0x5f8>)
  403f84:	46d6      	mov	lr, sl
  403f86:	2710      	movs	r7, #16
  403f88:	46a2      	mov	sl, r4
  403f8a:	4619      	mov	r1, r3
  403f8c:	9c06      	ldr	r4, [sp, #24]
  403f8e:	e007      	b.n	403fa0 <_vfiprintf_r+0x304>
  403f90:	f101 0c02 	add.w	ip, r1, #2
  403f94:	f10e 0e08 	add.w	lr, lr, #8
  403f98:	4601      	mov	r1, r0
  403f9a:	3d10      	subs	r5, #16
  403f9c:	2d10      	cmp	r5, #16
  403f9e:	dd11      	ble.n	403fc4 <_vfiprintf_r+0x328>
  403fa0:	1c48      	adds	r0, r1, #1
  403fa2:	3210      	adds	r2, #16
  403fa4:	2807      	cmp	r0, #7
  403fa6:	9211      	str	r2, [sp, #68]	; 0x44
  403fa8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  403fac:	9010      	str	r0, [sp, #64]	; 0x40
  403fae:	ddef      	ble.n	403f90 <_vfiprintf_r+0x2f4>
  403fb0:	2a00      	cmp	r2, #0
  403fb2:	f040 81e4 	bne.w	40437e <_vfiprintf_r+0x6e2>
  403fb6:	3d10      	subs	r5, #16
  403fb8:	2d10      	cmp	r5, #16
  403fba:	4611      	mov	r1, r2
  403fbc:	f04f 0c01 	mov.w	ip, #1
  403fc0:	46ce      	mov	lr, r9
  403fc2:	dced      	bgt.n	403fa0 <_vfiprintf_r+0x304>
  403fc4:	4654      	mov	r4, sl
  403fc6:	4661      	mov	r1, ip
  403fc8:	46f2      	mov	sl, lr
  403fca:	442a      	add	r2, r5
  403fcc:	2907      	cmp	r1, #7
  403fce:	9211      	str	r2, [sp, #68]	; 0x44
  403fd0:	f8ca 6000 	str.w	r6, [sl]
  403fd4:	f8ca 5004 	str.w	r5, [sl, #4]
  403fd8:	9110      	str	r1, [sp, #64]	; 0x40
  403fda:	f300 82ec 	bgt.w	4045b6 <_vfiprintf_r+0x91a>
  403fde:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403fe2:	f10a 0a08 	add.w	sl, sl, #8
  403fe6:	1c48      	adds	r0, r1, #1
  403fe8:	2d00      	cmp	r5, #0
  403fea:	f040 81de 	bne.w	4043aa <_vfiprintf_r+0x70e>
  403fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ff0:	2b00      	cmp	r3, #0
  403ff2:	f000 81f8 	beq.w	4043e6 <_vfiprintf_r+0x74a>
  403ff6:	3202      	adds	r2, #2
  403ff8:	a90e      	add	r1, sp, #56	; 0x38
  403ffa:	2302      	movs	r3, #2
  403ffc:	2807      	cmp	r0, #7
  403ffe:	9211      	str	r2, [sp, #68]	; 0x44
  404000:	9010      	str	r0, [sp, #64]	; 0x40
  404002:	e88a 000a 	stmia.w	sl, {r1, r3}
  404006:	f340 81ea 	ble.w	4043de <_vfiprintf_r+0x742>
  40400a:	2a00      	cmp	r2, #0
  40400c:	f040 838c 	bne.w	404728 <_vfiprintf_r+0xa8c>
  404010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404012:	2b80      	cmp	r3, #128	; 0x80
  404014:	f04f 0001 	mov.w	r0, #1
  404018:	4611      	mov	r1, r2
  40401a:	46ca      	mov	sl, r9
  40401c:	f040 81e7 	bne.w	4043ee <_vfiprintf_r+0x752>
  404020:	9b08      	ldr	r3, [sp, #32]
  404022:	9d01      	ldr	r5, [sp, #4]
  404024:	1b5e      	subs	r6, r3, r5
  404026:	2e00      	cmp	r6, #0
  404028:	f340 81e1 	ble.w	4043ee <_vfiprintf_r+0x752>
  40402c:	2e10      	cmp	r6, #16
  40402e:	4d9a      	ldr	r5, [pc, #616]	; (404298 <_vfiprintf_r+0x5fc>)
  404030:	f340 8450 	ble.w	4048d4 <_vfiprintf_r+0xc38>
  404034:	46d4      	mov	ip, sl
  404036:	2710      	movs	r7, #16
  404038:	46a2      	mov	sl, r4
  40403a:	9c06      	ldr	r4, [sp, #24]
  40403c:	e007      	b.n	40404e <_vfiprintf_r+0x3b2>
  40403e:	f101 0e02 	add.w	lr, r1, #2
  404042:	f10c 0c08 	add.w	ip, ip, #8
  404046:	4601      	mov	r1, r0
  404048:	3e10      	subs	r6, #16
  40404a:	2e10      	cmp	r6, #16
  40404c:	dd11      	ble.n	404072 <_vfiprintf_r+0x3d6>
  40404e:	1c48      	adds	r0, r1, #1
  404050:	3210      	adds	r2, #16
  404052:	2807      	cmp	r0, #7
  404054:	9211      	str	r2, [sp, #68]	; 0x44
  404056:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40405a:	9010      	str	r0, [sp, #64]	; 0x40
  40405c:	ddef      	ble.n	40403e <_vfiprintf_r+0x3a2>
  40405e:	2a00      	cmp	r2, #0
  404060:	f040 829d 	bne.w	40459e <_vfiprintf_r+0x902>
  404064:	3e10      	subs	r6, #16
  404066:	2e10      	cmp	r6, #16
  404068:	f04f 0e01 	mov.w	lr, #1
  40406c:	4611      	mov	r1, r2
  40406e:	46cc      	mov	ip, r9
  404070:	dced      	bgt.n	40404e <_vfiprintf_r+0x3b2>
  404072:	4654      	mov	r4, sl
  404074:	46e2      	mov	sl, ip
  404076:	4432      	add	r2, r6
  404078:	f1be 0f07 	cmp.w	lr, #7
  40407c:	9211      	str	r2, [sp, #68]	; 0x44
  40407e:	e88a 0060 	stmia.w	sl, {r5, r6}
  404082:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404086:	f300 8369 	bgt.w	40475c <_vfiprintf_r+0xac0>
  40408a:	f10a 0a08 	add.w	sl, sl, #8
  40408e:	f10e 0001 	add.w	r0, lr, #1
  404092:	4671      	mov	r1, lr
  404094:	e1ab      	b.n	4043ee <_vfiprintf_r+0x752>
  404096:	9608      	str	r6, [sp, #32]
  404098:	f013 0220 	ands.w	r2, r3, #32
  40409c:	f040 838c 	bne.w	4047b8 <_vfiprintf_r+0xb1c>
  4040a0:	f013 0110 	ands.w	r1, r3, #16
  4040a4:	f040 831a 	bne.w	4046dc <_vfiprintf_r+0xa40>
  4040a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4040ac:	f000 8316 	beq.w	4046dc <_vfiprintf_r+0xa40>
  4040b0:	9807      	ldr	r0, [sp, #28]
  4040b2:	460a      	mov	r2, r1
  4040b4:	4601      	mov	r1, r0
  4040b6:	3104      	adds	r1, #4
  4040b8:	8806      	ldrh	r6, [r0, #0]
  4040ba:	9107      	str	r1, [sp, #28]
  4040bc:	2700      	movs	r7, #0
  4040be:	e720      	b.n	403f02 <_vfiprintf_r+0x266>
  4040c0:	9608      	str	r6, [sp, #32]
  4040c2:	f043 0310 	orr.w	r3, r3, #16
  4040c6:	e7e7      	b.n	404098 <_vfiprintf_r+0x3fc>
  4040c8:	9608      	str	r6, [sp, #32]
  4040ca:	f043 0310 	orr.w	r3, r3, #16
  4040ce:	e708      	b.n	403ee2 <_vfiprintf_r+0x246>
  4040d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4040d4:	f898 2000 	ldrb.w	r2, [r8]
  4040d8:	e652      	b.n	403d80 <_vfiprintf_r+0xe4>
  4040da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4040de:	2600      	movs	r6, #0
  4040e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4040e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4040e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4040ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4040f0:	2909      	cmp	r1, #9
  4040f2:	d9f5      	bls.n	4040e0 <_vfiprintf_r+0x444>
  4040f4:	e646      	b.n	403d84 <_vfiprintf_r+0xe8>
  4040f6:	9608      	str	r6, [sp, #32]
  4040f8:	2800      	cmp	r0, #0
  4040fa:	f040 8408 	bne.w	40490e <_vfiprintf_r+0xc72>
  4040fe:	f043 0310 	orr.w	r3, r3, #16
  404102:	069e      	lsls	r6, r3, #26
  404104:	f100 834c 	bmi.w	4047a0 <_vfiprintf_r+0xb04>
  404108:	06dd      	lsls	r5, r3, #27
  40410a:	f100 82f3 	bmi.w	4046f4 <_vfiprintf_r+0xa58>
  40410e:	0658      	lsls	r0, r3, #25
  404110:	f140 82f0 	bpl.w	4046f4 <_vfiprintf_r+0xa58>
  404114:	9d07      	ldr	r5, [sp, #28]
  404116:	f9b5 6000 	ldrsh.w	r6, [r5]
  40411a:	462a      	mov	r2, r5
  40411c:	17f7      	asrs	r7, r6, #31
  40411e:	3204      	adds	r2, #4
  404120:	4630      	mov	r0, r6
  404122:	4639      	mov	r1, r7
  404124:	9207      	str	r2, [sp, #28]
  404126:	2800      	cmp	r0, #0
  404128:	f171 0200 	sbcs.w	r2, r1, #0
  40412c:	f2c0 835d 	blt.w	4047ea <_vfiprintf_r+0xb4e>
  404130:	1c61      	adds	r1, r4, #1
  404132:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404136:	f04f 0201 	mov.w	r2, #1
  40413a:	f47f aeea 	bne.w	403f12 <_vfiprintf_r+0x276>
  40413e:	ea56 0107 	orrs.w	r1, r6, r7
  404142:	f000 824d 	beq.w	4045e0 <_vfiprintf_r+0x944>
  404146:	9302      	str	r3, [sp, #8]
  404148:	2a01      	cmp	r2, #1
  40414a:	f000 828c 	beq.w	404666 <_vfiprintf_r+0x9ca>
  40414e:	2a02      	cmp	r2, #2
  404150:	f040 825c 	bne.w	40460c <_vfiprintf_r+0x970>
  404154:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404156:	46cb      	mov	fp, r9
  404158:	0933      	lsrs	r3, r6, #4
  40415a:	f006 010f 	and.w	r1, r6, #15
  40415e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404162:	093a      	lsrs	r2, r7, #4
  404164:	461e      	mov	r6, r3
  404166:	4617      	mov	r7, r2
  404168:	5c43      	ldrb	r3, [r0, r1]
  40416a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40416e:	ea56 0307 	orrs.w	r3, r6, r7
  404172:	d1f1      	bne.n	404158 <_vfiprintf_r+0x4bc>
  404174:	eba9 030b 	sub.w	r3, r9, fp
  404178:	9305      	str	r3, [sp, #20]
  40417a:	e6e1      	b.n	403f40 <_vfiprintf_r+0x2a4>
  40417c:	2800      	cmp	r0, #0
  40417e:	f040 83c0 	bne.w	404902 <_vfiprintf_r+0xc66>
  404182:	0699      	lsls	r1, r3, #26
  404184:	f100 8367 	bmi.w	404856 <_vfiprintf_r+0xbba>
  404188:	06da      	lsls	r2, r3, #27
  40418a:	f100 80f1 	bmi.w	404370 <_vfiprintf_r+0x6d4>
  40418e:	065b      	lsls	r3, r3, #25
  404190:	f140 80ee 	bpl.w	404370 <_vfiprintf_r+0x6d4>
  404194:	9a07      	ldr	r2, [sp, #28]
  404196:	6813      	ldr	r3, [r2, #0]
  404198:	3204      	adds	r2, #4
  40419a:	9207      	str	r2, [sp, #28]
  40419c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4041a0:	801a      	strh	r2, [r3, #0]
  4041a2:	e5b8      	b.n	403d16 <_vfiprintf_r+0x7a>
  4041a4:	9807      	ldr	r0, [sp, #28]
  4041a6:	4a3d      	ldr	r2, [pc, #244]	; (40429c <_vfiprintf_r+0x600>)
  4041a8:	9608      	str	r6, [sp, #32]
  4041aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4041ac:	6806      	ldr	r6, [r0, #0]
  4041ae:	2278      	movs	r2, #120	; 0x78
  4041b0:	2130      	movs	r1, #48	; 0x30
  4041b2:	3004      	adds	r0, #4
  4041b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4041b8:	f043 0302 	orr.w	r3, r3, #2
  4041bc:	9007      	str	r0, [sp, #28]
  4041be:	2700      	movs	r7, #0
  4041c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4041c4:	2202      	movs	r2, #2
  4041c6:	e69c      	b.n	403f02 <_vfiprintf_r+0x266>
  4041c8:	9608      	str	r6, [sp, #32]
  4041ca:	2800      	cmp	r0, #0
  4041cc:	d099      	beq.n	404102 <_vfiprintf_r+0x466>
  4041ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4041d2:	e796      	b.n	404102 <_vfiprintf_r+0x466>
  4041d4:	f898 2000 	ldrb.w	r2, [r8]
  4041d8:	2d00      	cmp	r5, #0
  4041da:	f47f add1 	bne.w	403d80 <_vfiprintf_r+0xe4>
  4041de:	2001      	movs	r0, #1
  4041e0:	2520      	movs	r5, #32
  4041e2:	e5cd      	b.n	403d80 <_vfiprintf_r+0xe4>
  4041e4:	f043 0301 	orr.w	r3, r3, #1
  4041e8:	f898 2000 	ldrb.w	r2, [r8]
  4041ec:	e5c8      	b.n	403d80 <_vfiprintf_r+0xe4>
  4041ee:	9608      	str	r6, [sp, #32]
  4041f0:	2800      	cmp	r0, #0
  4041f2:	f040 8393 	bne.w	40491c <_vfiprintf_r+0xc80>
  4041f6:	4929      	ldr	r1, [pc, #164]	; (40429c <_vfiprintf_r+0x600>)
  4041f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4041fa:	069f      	lsls	r7, r3, #26
  4041fc:	f100 82e8 	bmi.w	4047d0 <_vfiprintf_r+0xb34>
  404200:	9807      	ldr	r0, [sp, #28]
  404202:	06de      	lsls	r6, r3, #27
  404204:	4601      	mov	r1, r0
  404206:	f100 8270 	bmi.w	4046ea <_vfiprintf_r+0xa4e>
  40420a:	065d      	lsls	r5, r3, #25
  40420c:	f140 826d 	bpl.w	4046ea <_vfiprintf_r+0xa4e>
  404210:	3104      	adds	r1, #4
  404212:	8806      	ldrh	r6, [r0, #0]
  404214:	9107      	str	r1, [sp, #28]
  404216:	2700      	movs	r7, #0
  404218:	07d8      	lsls	r0, r3, #31
  40421a:	f140 8222 	bpl.w	404662 <_vfiprintf_r+0x9c6>
  40421e:	ea56 0107 	orrs.w	r1, r6, r7
  404222:	f000 821e 	beq.w	404662 <_vfiprintf_r+0x9c6>
  404226:	2130      	movs	r1, #48	; 0x30
  404228:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40422c:	f043 0302 	orr.w	r3, r3, #2
  404230:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404234:	2202      	movs	r2, #2
  404236:	e664      	b.n	403f02 <_vfiprintf_r+0x266>
  404238:	9608      	str	r6, [sp, #32]
  40423a:	2800      	cmp	r0, #0
  40423c:	f040 836b 	bne.w	404916 <_vfiprintf_r+0xc7a>
  404240:	4917      	ldr	r1, [pc, #92]	; (4042a0 <_vfiprintf_r+0x604>)
  404242:	910b      	str	r1, [sp, #44]	; 0x2c
  404244:	e7d9      	b.n	4041fa <_vfiprintf_r+0x55e>
  404246:	9907      	ldr	r1, [sp, #28]
  404248:	9608      	str	r6, [sp, #32]
  40424a:	680a      	ldr	r2, [r1, #0]
  40424c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404250:	f04f 0000 	mov.w	r0, #0
  404254:	460a      	mov	r2, r1
  404256:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40425a:	3204      	adds	r2, #4
  40425c:	2001      	movs	r0, #1
  40425e:	9001      	str	r0, [sp, #4]
  404260:	9207      	str	r2, [sp, #28]
  404262:	9005      	str	r0, [sp, #20]
  404264:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404268:	9302      	str	r3, [sp, #8]
  40426a:	2400      	movs	r4, #0
  40426c:	e670      	b.n	403f50 <_vfiprintf_r+0x2b4>
  40426e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404272:	f898 2000 	ldrb.w	r2, [r8]
  404276:	e583      	b.n	403d80 <_vfiprintf_r+0xe4>
  404278:	f898 2000 	ldrb.w	r2, [r8]
  40427c:	2a6c      	cmp	r2, #108	; 0x6c
  40427e:	bf03      	ittte	eq
  404280:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404284:	f043 0320 	orreq.w	r3, r3, #32
  404288:	f108 0801 	addeq.w	r8, r8, #1
  40428c:	f043 0310 	orrne.w	r3, r3, #16
  404290:	e576      	b.n	403d80 <_vfiprintf_r+0xe4>
  404292:	bf00      	nop
  404294:	0040657c 	.word	0x0040657c
  404298:	0040658c 	.word	0x0040658c
  40429c:	00406560 	.word	0x00406560
  4042a0:	0040654c 	.word	0x0040654c
  4042a4:	9907      	ldr	r1, [sp, #28]
  4042a6:	680e      	ldr	r6, [r1, #0]
  4042a8:	460a      	mov	r2, r1
  4042aa:	2e00      	cmp	r6, #0
  4042ac:	f102 0204 	add.w	r2, r2, #4
  4042b0:	f6ff ae0f 	blt.w	403ed2 <_vfiprintf_r+0x236>
  4042b4:	9207      	str	r2, [sp, #28]
  4042b6:	f898 2000 	ldrb.w	r2, [r8]
  4042ba:	e561      	b.n	403d80 <_vfiprintf_r+0xe4>
  4042bc:	f898 2000 	ldrb.w	r2, [r8]
  4042c0:	2001      	movs	r0, #1
  4042c2:	252b      	movs	r5, #43	; 0x2b
  4042c4:	e55c      	b.n	403d80 <_vfiprintf_r+0xe4>
  4042c6:	9907      	ldr	r1, [sp, #28]
  4042c8:	9608      	str	r6, [sp, #32]
  4042ca:	f8d1 b000 	ldr.w	fp, [r1]
  4042ce:	f04f 0200 	mov.w	r2, #0
  4042d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4042d6:	1d0e      	adds	r6, r1, #4
  4042d8:	f1bb 0f00 	cmp.w	fp, #0
  4042dc:	f000 82e5 	beq.w	4048aa <_vfiprintf_r+0xc0e>
  4042e0:	1c67      	adds	r7, r4, #1
  4042e2:	f000 82c4 	beq.w	40486e <_vfiprintf_r+0xbd2>
  4042e6:	4622      	mov	r2, r4
  4042e8:	2100      	movs	r1, #0
  4042ea:	4658      	mov	r0, fp
  4042ec:	9301      	str	r3, [sp, #4]
  4042ee:	f001 fbd7 	bl	405aa0 <memchr>
  4042f2:	9b01      	ldr	r3, [sp, #4]
  4042f4:	2800      	cmp	r0, #0
  4042f6:	f000 82e5 	beq.w	4048c4 <_vfiprintf_r+0xc28>
  4042fa:	eba0 020b 	sub.w	r2, r0, fp
  4042fe:	9205      	str	r2, [sp, #20]
  404300:	9607      	str	r6, [sp, #28]
  404302:	9302      	str	r3, [sp, #8]
  404304:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404308:	2400      	movs	r4, #0
  40430a:	e619      	b.n	403f40 <_vfiprintf_r+0x2a4>
  40430c:	f898 2000 	ldrb.w	r2, [r8]
  404310:	2a2a      	cmp	r2, #42	; 0x2a
  404312:	f108 0701 	add.w	r7, r8, #1
  404316:	f000 82e9 	beq.w	4048ec <_vfiprintf_r+0xc50>
  40431a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40431e:	2909      	cmp	r1, #9
  404320:	46b8      	mov	r8, r7
  404322:	f04f 0400 	mov.w	r4, #0
  404326:	f63f ad2d 	bhi.w	403d84 <_vfiprintf_r+0xe8>
  40432a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40432e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404332:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404336:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40433a:	2909      	cmp	r1, #9
  40433c:	d9f5      	bls.n	40432a <_vfiprintf_r+0x68e>
  40433e:	e521      	b.n	403d84 <_vfiprintf_r+0xe8>
  404340:	f043 0320 	orr.w	r3, r3, #32
  404344:	f898 2000 	ldrb.w	r2, [r8]
  404348:	e51a      	b.n	403d80 <_vfiprintf_r+0xe4>
  40434a:	9608      	str	r6, [sp, #32]
  40434c:	2800      	cmp	r0, #0
  40434e:	f040 82db 	bne.w	404908 <_vfiprintf_r+0xc6c>
  404352:	2a00      	cmp	r2, #0
  404354:	f000 80e7 	beq.w	404526 <_vfiprintf_r+0x88a>
  404358:	2101      	movs	r1, #1
  40435a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40435e:	f04f 0200 	mov.w	r2, #0
  404362:	9101      	str	r1, [sp, #4]
  404364:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404368:	9105      	str	r1, [sp, #20]
  40436a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40436e:	e77b      	b.n	404268 <_vfiprintf_r+0x5cc>
  404370:	9a07      	ldr	r2, [sp, #28]
  404372:	6813      	ldr	r3, [r2, #0]
  404374:	3204      	adds	r2, #4
  404376:	9207      	str	r2, [sp, #28]
  404378:	9a03      	ldr	r2, [sp, #12]
  40437a:	601a      	str	r2, [r3, #0]
  40437c:	e4cb      	b.n	403d16 <_vfiprintf_r+0x7a>
  40437e:	aa0f      	add	r2, sp, #60	; 0x3c
  404380:	9904      	ldr	r1, [sp, #16]
  404382:	4620      	mov	r0, r4
  404384:	f7ff fc4a 	bl	403c1c <__sprint_r.part.0>
  404388:	2800      	cmp	r0, #0
  40438a:	f040 8139 	bne.w	404600 <_vfiprintf_r+0x964>
  40438e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404390:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404392:	f101 0c01 	add.w	ip, r1, #1
  404396:	46ce      	mov	lr, r9
  404398:	e5ff      	b.n	403f9a <_vfiprintf_r+0x2fe>
  40439a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40439c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40439e:	1c48      	adds	r0, r1, #1
  4043a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4043a4:	2d00      	cmp	r5, #0
  4043a6:	f43f ae22 	beq.w	403fee <_vfiprintf_r+0x352>
  4043aa:	3201      	adds	r2, #1
  4043ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4043b0:	2101      	movs	r1, #1
  4043b2:	2807      	cmp	r0, #7
  4043b4:	9211      	str	r2, [sp, #68]	; 0x44
  4043b6:	9010      	str	r0, [sp, #64]	; 0x40
  4043b8:	f8ca 5000 	str.w	r5, [sl]
  4043bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4043c0:	f340 8108 	ble.w	4045d4 <_vfiprintf_r+0x938>
  4043c4:	2a00      	cmp	r2, #0
  4043c6:	f040 81bc 	bne.w	404742 <_vfiprintf_r+0xaa6>
  4043ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4043cc:	2b00      	cmp	r3, #0
  4043ce:	f43f ae1f 	beq.w	404010 <_vfiprintf_r+0x374>
  4043d2:	ab0e      	add	r3, sp, #56	; 0x38
  4043d4:	2202      	movs	r2, #2
  4043d6:	4608      	mov	r0, r1
  4043d8:	931c      	str	r3, [sp, #112]	; 0x70
  4043da:	921d      	str	r2, [sp, #116]	; 0x74
  4043dc:	46ca      	mov	sl, r9
  4043de:	4601      	mov	r1, r0
  4043e0:	f10a 0a08 	add.w	sl, sl, #8
  4043e4:	3001      	adds	r0, #1
  4043e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4043e8:	2b80      	cmp	r3, #128	; 0x80
  4043ea:	f43f ae19 	beq.w	404020 <_vfiprintf_r+0x384>
  4043ee:	9b05      	ldr	r3, [sp, #20]
  4043f0:	1ae4      	subs	r4, r4, r3
  4043f2:	2c00      	cmp	r4, #0
  4043f4:	dd2e      	ble.n	404454 <_vfiprintf_r+0x7b8>
  4043f6:	2c10      	cmp	r4, #16
  4043f8:	4db3      	ldr	r5, [pc, #716]	; (4046c8 <_vfiprintf_r+0xa2c>)
  4043fa:	dd1e      	ble.n	40443a <_vfiprintf_r+0x79e>
  4043fc:	46d6      	mov	lr, sl
  4043fe:	2610      	movs	r6, #16
  404400:	9f06      	ldr	r7, [sp, #24]
  404402:	f8dd a010 	ldr.w	sl, [sp, #16]
  404406:	e006      	b.n	404416 <_vfiprintf_r+0x77a>
  404408:	1c88      	adds	r0, r1, #2
  40440a:	f10e 0e08 	add.w	lr, lr, #8
  40440e:	4619      	mov	r1, r3
  404410:	3c10      	subs	r4, #16
  404412:	2c10      	cmp	r4, #16
  404414:	dd10      	ble.n	404438 <_vfiprintf_r+0x79c>
  404416:	1c4b      	adds	r3, r1, #1
  404418:	3210      	adds	r2, #16
  40441a:	2b07      	cmp	r3, #7
  40441c:	9211      	str	r2, [sp, #68]	; 0x44
  40441e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404422:	9310      	str	r3, [sp, #64]	; 0x40
  404424:	ddf0      	ble.n	404408 <_vfiprintf_r+0x76c>
  404426:	2a00      	cmp	r2, #0
  404428:	d165      	bne.n	4044f6 <_vfiprintf_r+0x85a>
  40442a:	3c10      	subs	r4, #16
  40442c:	2c10      	cmp	r4, #16
  40442e:	f04f 0001 	mov.w	r0, #1
  404432:	4611      	mov	r1, r2
  404434:	46ce      	mov	lr, r9
  404436:	dcee      	bgt.n	404416 <_vfiprintf_r+0x77a>
  404438:	46f2      	mov	sl, lr
  40443a:	4422      	add	r2, r4
  40443c:	2807      	cmp	r0, #7
  40443e:	9211      	str	r2, [sp, #68]	; 0x44
  404440:	f8ca 5000 	str.w	r5, [sl]
  404444:	f8ca 4004 	str.w	r4, [sl, #4]
  404448:	9010      	str	r0, [sp, #64]	; 0x40
  40444a:	f300 8085 	bgt.w	404558 <_vfiprintf_r+0x8bc>
  40444e:	f10a 0a08 	add.w	sl, sl, #8
  404452:	3001      	adds	r0, #1
  404454:	9905      	ldr	r1, [sp, #20]
  404456:	f8ca b000 	str.w	fp, [sl]
  40445a:	440a      	add	r2, r1
  40445c:	2807      	cmp	r0, #7
  40445e:	9211      	str	r2, [sp, #68]	; 0x44
  404460:	f8ca 1004 	str.w	r1, [sl, #4]
  404464:	9010      	str	r0, [sp, #64]	; 0x40
  404466:	f340 8082 	ble.w	40456e <_vfiprintf_r+0x8d2>
  40446a:	2a00      	cmp	r2, #0
  40446c:	f040 8118 	bne.w	4046a0 <_vfiprintf_r+0xa04>
  404470:	9b02      	ldr	r3, [sp, #8]
  404472:	9210      	str	r2, [sp, #64]	; 0x40
  404474:	0758      	lsls	r0, r3, #29
  404476:	d535      	bpl.n	4044e4 <_vfiprintf_r+0x848>
  404478:	9b08      	ldr	r3, [sp, #32]
  40447a:	9901      	ldr	r1, [sp, #4]
  40447c:	1a5c      	subs	r4, r3, r1
  40447e:	2c00      	cmp	r4, #0
  404480:	f340 80e7 	ble.w	404652 <_vfiprintf_r+0x9b6>
  404484:	46ca      	mov	sl, r9
  404486:	2c10      	cmp	r4, #16
  404488:	f340 8218 	ble.w	4048bc <_vfiprintf_r+0xc20>
  40448c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40448e:	4e8f      	ldr	r6, [pc, #572]	; (4046cc <_vfiprintf_r+0xa30>)
  404490:	9f06      	ldr	r7, [sp, #24]
  404492:	f8dd b010 	ldr.w	fp, [sp, #16]
  404496:	2510      	movs	r5, #16
  404498:	e006      	b.n	4044a8 <_vfiprintf_r+0x80c>
  40449a:	1c88      	adds	r0, r1, #2
  40449c:	f10a 0a08 	add.w	sl, sl, #8
  4044a0:	4619      	mov	r1, r3
  4044a2:	3c10      	subs	r4, #16
  4044a4:	2c10      	cmp	r4, #16
  4044a6:	dd11      	ble.n	4044cc <_vfiprintf_r+0x830>
  4044a8:	1c4b      	adds	r3, r1, #1
  4044aa:	3210      	adds	r2, #16
  4044ac:	2b07      	cmp	r3, #7
  4044ae:	9211      	str	r2, [sp, #68]	; 0x44
  4044b0:	f8ca 6000 	str.w	r6, [sl]
  4044b4:	f8ca 5004 	str.w	r5, [sl, #4]
  4044b8:	9310      	str	r3, [sp, #64]	; 0x40
  4044ba:	ddee      	ble.n	40449a <_vfiprintf_r+0x7fe>
  4044bc:	bb42      	cbnz	r2, 404510 <_vfiprintf_r+0x874>
  4044be:	3c10      	subs	r4, #16
  4044c0:	2c10      	cmp	r4, #16
  4044c2:	f04f 0001 	mov.w	r0, #1
  4044c6:	4611      	mov	r1, r2
  4044c8:	46ca      	mov	sl, r9
  4044ca:	dced      	bgt.n	4044a8 <_vfiprintf_r+0x80c>
  4044cc:	4422      	add	r2, r4
  4044ce:	2807      	cmp	r0, #7
  4044d0:	9211      	str	r2, [sp, #68]	; 0x44
  4044d2:	f8ca 6000 	str.w	r6, [sl]
  4044d6:	f8ca 4004 	str.w	r4, [sl, #4]
  4044da:	9010      	str	r0, [sp, #64]	; 0x40
  4044dc:	dd51      	ble.n	404582 <_vfiprintf_r+0x8e6>
  4044de:	2a00      	cmp	r2, #0
  4044e0:	f040 819b 	bne.w	40481a <_vfiprintf_r+0xb7e>
  4044e4:	9b03      	ldr	r3, [sp, #12]
  4044e6:	9a08      	ldr	r2, [sp, #32]
  4044e8:	9901      	ldr	r1, [sp, #4]
  4044ea:	428a      	cmp	r2, r1
  4044ec:	bfac      	ite	ge
  4044ee:	189b      	addge	r3, r3, r2
  4044f0:	185b      	addlt	r3, r3, r1
  4044f2:	9303      	str	r3, [sp, #12]
  4044f4:	e04e      	b.n	404594 <_vfiprintf_r+0x8f8>
  4044f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4044f8:	4651      	mov	r1, sl
  4044fa:	4638      	mov	r0, r7
  4044fc:	f7ff fb8e 	bl	403c1c <__sprint_r.part.0>
  404500:	2800      	cmp	r0, #0
  404502:	f040 813f 	bne.w	404784 <_vfiprintf_r+0xae8>
  404506:	9910      	ldr	r1, [sp, #64]	; 0x40
  404508:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40450a:	1c48      	adds	r0, r1, #1
  40450c:	46ce      	mov	lr, r9
  40450e:	e77f      	b.n	404410 <_vfiprintf_r+0x774>
  404510:	aa0f      	add	r2, sp, #60	; 0x3c
  404512:	4659      	mov	r1, fp
  404514:	4638      	mov	r0, r7
  404516:	f7ff fb81 	bl	403c1c <__sprint_r.part.0>
  40451a:	b960      	cbnz	r0, 404536 <_vfiprintf_r+0x89a>
  40451c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40451e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404520:	1c48      	adds	r0, r1, #1
  404522:	46ca      	mov	sl, r9
  404524:	e7bd      	b.n	4044a2 <_vfiprintf_r+0x806>
  404526:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404528:	f8dd b010 	ldr.w	fp, [sp, #16]
  40452c:	2b00      	cmp	r3, #0
  40452e:	f040 81d4 	bne.w	4048da <_vfiprintf_r+0xc3e>
  404532:	2300      	movs	r3, #0
  404534:	9310      	str	r3, [sp, #64]	; 0x40
  404536:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40453a:	f013 0f01 	tst.w	r3, #1
  40453e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404542:	d102      	bne.n	40454a <_vfiprintf_r+0x8ae>
  404544:	059a      	lsls	r2, r3, #22
  404546:	f140 80de 	bpl.w	404706 <_vfiprintf_r+0xa6a>
  40454a:	065b      	lsls	r3, r3, #25
  40454c:	f53f acb2 	bmi.w	403eb4 <_vfiprintf_r+0x218>
  404550:	9803      	ldr	r0, [sp, #12]
  404552:	b02d      	add	sp, #180	; 0xb4
  404554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404558:	2a00      	cmp	r2, #0
  40455a:	f040 8106 	bne.w	40476a <_vfiprintf_r+0xace>
  40455e:	9a05      	ldr	r2, [sp, #20]
  404560:	921d      	str	r2, [sp, #116]	; 0x74
  404562:	2301      	movs	r3, #1
  404564:	9211      	str	r2, [sp, #68]	; 0x44
  404566:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40456a:	9310      	str	r3, [sp, #64]	; 0x40
  40456c:	46ca      	mov	sl, r9
  40456e:	f10a 0a08 	add.w	sl, sl, #8
  404572:	9b02      	ldr	r3, [sp, #8]
  404574:	0759      	lsls	r1, r3, #29
  404576:	d504      	bpl.n	404582 <_vfiprintf_r+0x8e6>
  404578:	9b08      	ldr	r3, [sp, #32]
  40457a:	9901      	ldr	r1, [sp, #4]
  40457c:	1a5c      	subs	r4, r3, r1
  40457e:	2c00      	cmp	r4, #0
  404580:	dc81      	bgt.n	404486 <_vfiprintf_r+0x7ea>
  404582:	9b03      	ldr	r3, [sp, #12]
  404584:	9908      	ldr	r1, [sp, #32]
  404586:	9801      	ldr	r0, [sp, #4]
  404588:	4281      	cmp	r1, r0
  40458a:	bfac      	ite	ge
  40458c:	185b      	addge	r3, r3, r1
  40458e:	181b      	addlt	r3, r3, r0
  404590:	9303      	str	r3, [sp, #12]
  404592:	bb72      	cbnz	r2, 4045f2 <_vfiprintf_r+0x956>
  404594:	2300      	movs	r3, #0
  404596:	9310      	str	r3, [sp, #64]	; 0x40
  404598:	46ca      	mov	sl, r9
  40459a:	f7ff bbbc 	b.w	403d16 <_vfiprintf_r+0x7a>
  40459e:	aa0f      	add	r2, sp, #60	; 0x3c
  4045a0:	9904      	ldr	r1, [sp, #16]
  4045a2:	4620      	mov	r0, r4
  4045a4:	f7ff fb3a 	bl	403c1c <__sprint_r.part.0>
  4045a8:	bb50      	cbnz	r0, 404600 <_vfiprintf_r+0x964>
  4045aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4045ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045ae:	f101 0e01 	add.w	lr, r1, #1
  4045b2:	46cc      	mov	ip, r9
  4045b4:	e548      	b.n	404048 <_vfiprintf_r+0x3ac>
  4045b6:	2a00      	cmp	r2, #0
  4045b8:	f040 8140 	bne.w	40483c <_vfiprintf_r+0xba0>
  4045bc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4045c0:	2900      	cmp	r1, #0
  4045c2:	f000 811b 	beq.w	4047fc <_vfiprintf_r+0xb60>
  4045c6:	2201      	movs	r2, #1
  4045c8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4045cc:	4610      	mov	r0, r2
  4045ce:	921d      	str	r2, [sp, #116]	; 0x74
  4045d0:	911c      	str	r1, [sp, #112]	; 0x70
  4045d2:	46ca      	mov	sl, r9
  4045d4:	4601      	mov	r1, r0
  4045d6:	f10a 0a08 	add.w	sl, sl, #8
  4045da:	3001      	adds	r0, #1
  4045dc:	e507      	b.n	403fee <_vfiprintf_r+0x352>
  4045de:	9b02      	ldr	r3, [sp, #8]
  4045e0:	2a01      	cmp	r2, #1
  4045e2:	f000 8098 	beq.w	404716 <_vfiprintf_r+0xa7a>
  4045e6:	2a02      	cmp	r2, #2
  4045e8:	d10d      	bne.n	404606 <_vfiprintf_r+0x96a>
  4045ea:	9302      	str	r3, [sp, #8]
  4045ec:	2600      	movs	r6, #0
  4045ee:	2700      	movs	r7, #0
  4045f0:	e5b0      	b.n	404154 <_vfiprintf_r+0x4b8>
  4045f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4045f4:	9904      	ldr	r1, [sp, #16]
  4045f6:	9806      	ldr	r0, [sp, #24]
  4045f8:	f7ff fb10 	bl	403c1c <__sprint_r.part.0>
  4045fc:	2800      	cmp	r0, #0
  4045fe:	d0c9      	beq.n	404594 <_vfiprintf_r+0x8f8>
  404600:	f8dd b010 	ldr.w	fp, [sp, #16]
  404604:	e797      	b.n	404536 <_vfiprintf_r+0x89a>
  404606:	9302      	str	r3, [sp, #8]
  404608:	2600      	movs	r6, #0
  40460a:	2700      	movs	r7, #0
  40460c:	4649      	mov	r1, r9
  40460e:	e000      	b.n	404612 <_vfiprintf_r+0x976>
  404610:	4659      	mov	r1, fp
  404612:	08f2      	lsrs	r2, r6, #3
  404614:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404618:	08f8      	lsrs	r0, r7, #3
  40461a:	f006 0307 	and.w	r3, r6, #7
  40461e:	4607      	mov	r7, r0
  404620:	4616      	mov	r6, r2
  404622:	3330      	adds	r3, #48	; 0x30
  404624:	ea56 0207 	orrs.w	r2, r6, r7
  404628:	f801 3c01 	strb.w	r3, [r1, #-1]
  40462c:	f101 3bff 	add.w	fp, r1, #4294967295
  404630:	d1ee      	bne.n	404610 <_vfiprintf_r+0x974>
  404632:	9a02      	ldr	r2, [sp, #8]
  404634:	07d6      	lsls	r6, r2, #31
  404636:	f57f ad9d 	bpl.w	404174 <_vfiprintf_r+0x4d8>
  40463a:	2b30      	cmp	r3, #48	; 0x30
  40463c:	f43f ad9a 	beq.w	404174 <_vfiprintf_r+0x4d8>
  404640:	3902      	subs	r1, #2
  404642:	2330      	movs	r3, #48	; 0x30
  404644:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404648:	eba9 0301 	sub.w	r3, r9, r1
  40464c:	9305      	str	r3, [sp, #20]
  40464e:	468b      	mov	fp, r1
  404650:	e476      	b.n	403f40 <_vfiprintf_r+0x2a4>
  404652:	9b03      	ldr	r3, [sp, #12]
  404654:	9a08      	ldr	r2, [sp, #32]
  404656:	428a      	cmp	r2, r1
  404658:	bfac      	ite	ge
  40465a:	189b      	addge	r3, r3, r2
  40465c:	185b      	addlt	r3, r3, r1
  40465e:	9303      	str	r3, [sp, #12]
  404660:	e798      	b.n	404594 <_vfiprintf_r+0x8f8>
  404662:	2202      	movs	r2, #2
  404664:	e44d      	b.n	403f02 <_vfiprintf_r+0x266>
  404666:	2f00      	cmp	r7, #0
  404668:	bf08      	it	eq
  40466a:	2e0a      	cmpeq	r6, #10
  40466c:	d352      	bcc.n	404714 <_vfiprintf_r+0xa78>
  40466e:	46cb      	mov	fp, r9
  404670:	4630      	mov	r0, r6
  404672:	4639      	mov	r1, r7
  404674:	220a      	movs	r2, #10
  404676:	2300      	movs	r3, #0
  404678:	f001 ff36 	bl	4064e8 <__aeabi_uldivmod>
  40467c:	3230      	adds	r2, #48	; 0x30
  40467e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404682:	4630      	mov	r0, r6
  404684:	4639      	mov	r1, r7
  404686:	2300      	movs	r3, #0
  404688:	220a      	movs	r2, #10
  40468a:	f001 ff2d 	bl	4064e8 <__aeabi_uldivmod>
  40468e:	4606      	mov	r6, r0
  404690:	460f      	mov	r7, r1
  404692:	ea56 0307 	orrs.w	r3, r6, r7
  404696:	d1eb      	bne.n	404670 <_vfiprintf_r+0x9d4>
  404698:	e56c      	b.n	404174 <_vfiprintf_r+0x4d8>
  40469a:	9405      	str	r4, [sp, #20]
  40469c:	46cb      	mov	fp, r9
  40469e:	e44f      	b.n	403f40 <_vfiprintf_r+0x2a4>
  4046a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4046a2:	9904      	ldr	r1, [sp, #16]
  4046a4:	9806      	ldr	r0, [sp, #24]
  4046a6:	f7ff fab9 	bl	403c1c <__sprint_r.part.0>
  4046aa:	2800      	cmp	r0, #0
  4046ac:	d1a8      	bne.n	404600 <_vfiprintf_r+0x964>
  4046ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4046b0:	46ca      	mov	sl, r9
  4046b2:	e75e      	b.n	404572 <_vfiprintf_r+0x8d6>
  4046b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4046b6:	9904      	ldr	r1, [sp, #16]
  4046b8:	9806      	ldr	r0, [sp, #24]
  4046ba:	f7ff faaf 	bl	403c1c <__sprint_r.part.0>
  4046be:	2800      	cmp	r0, #0
  4046c0:	d19e      	bne.n	404600 <_vfiprintf_r+0x964>
  4046c2:	46ca      	mov	sl, r9
  4046c4:	f7ff bbc0 	b.w	403e48 <_vfiprintf_r+0x1ac>
  4046c8:	0040658c 	.word	0x0040658c
  4046cc:	0040657c 	.word	0x0040657c
  4046d0:	3104      	adds	r1, #4
  4046d2:	6816      	ldr	r6, [r2, #0]
  4046d4:	9107      	str	r1, [sp, #28]
  4046d6:	2201      	movs	r2, #1
  4046d8:	2700      	movs	r7, #0
  4046da:	e412      	b.n	403f02 <_vfiprintf_r+0x266>
  4046dc:	9807      	ldr	r0, [sp, #28]
  4046de:	4601      	mov	r1, r0
  4046e0:	3104      	adds	r1, #4
  4046e2:	6806      	ldr	r6, [r0, #0]
  4046e4:	9107      	str	r1, [sp, #28]
  4046e6:	2700      	movs	r7, #0
  4046e8:	e40b      	b.n	403f02 <_vfiprintf_r+0x266>
  4046ea:	680e      	ldr	r6, [r1, #0]
  4046ec:	3104      	adds	r1, #4
  4046ee:	9107      	str	r1, [sp, #28]
  4046f0:	2700      	movs	r7, #0
  4046f2:	e591      	b.n	404218 <_vfiprintf_r+0x57c>
  4046f4:	9907      	ldr	r1, [sp, #28]
  4046f6:	680e      	ldr	r6, [r1, #0]
  4046f8:	460a      	mov	r2, r1
  4046fa:	17f7      	asrs	r7, r6, #31
  4046fc:	3204      	adds	r2, #4
  4046fe:	9207      	str	r2, [sp, #28]
  404700:	4630      	mov	r0, r6
  404702:	4639      	mov	r1, r7
  404704:	e50f      	b.n	404126 <_vfiprintf_r+0x48a>
  404706:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40470a:	f000 fe7f 	bl	40540c <__retarget_lock_release_recursive>
  40470e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404712:	e71a      	b.n	40454a <_vfiprintf_r+0x8ae>
  404714:	9b02      	ldr	r3, [sp, #8]
  404716:	9302      	str	r3, [sp, #8]
  404718:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40471c:	3630      	adds	r6, #48	; 0x30
  40471e:	2301      	movs	r3, #1
  404720:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404724:	9305      	str	r3, [sp, #20]
  404726:	e40b      	b.n	403f40 <_vfiprintf_r+0x2a4>
  404728:	aa0f      	add	r2, sp, #60	; 0x3c
  40472a:	9904      	ldr	r1, [sp, #16]
  40472c:	9806      	ldr	r0, [sp, #24]
  40472e:	f7ff fa75 	bl	403c1c <__sprint_r.part.0>
  404732:	2800      	cmp	r0, #0
  404734:	f47f af64 	bne.w	404600 <_vfiprintf_r+0x964>
  404738:	9910      	ldr	r1, [sp, #64]	; 0x40
  40473a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40473c:	1c48      	adds	r0, r1, #1
  40473e:	46ca      	mov	sl, r9
  404740:	e651      	b.n	4043e6 <_vfiprintf_r+0x74a>
  404742:	aa0f      	add	r2, sp, #60	; 0x3c
  404744:	9904      	ldr	r1, [sp, #16]
  404746:	9806      	ldr	r0, [sp, #24]
  404748:	f7ff fa68 	bl	403c1c <__sprint_r.part.0>
  40474c:	2800      	cmp	r0, #0
  40474e:	f47f af57 	bne.w	404600 <_vfiprintf_r+0x964>
  404752:	9910      	ldr	r1, [sp, #64]	; 0x40
  404754:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404756:	1c48      	adds	r0, r1, #1
  404758:	46ca      	mov	sl, r9
  40475a:	e448      	b.n	403fee <_vfiprintf_r+0x352>
  40475c:	2a00      	cmp	r2, #0
  40475e:	f040 8091 	bne.w	404884 <_vfiprintf_r+0xbe8>
  404762:	2001      	movs	r0, #1
  404764:	4611      	mov	r1, r2
  404766:	46ca      	mov	sl, r9
  404768:	e641      	b.n	4043ee <_vfiprintf_r+0x752>
  40476a:	aa0f      	add	r2, sp, #60	; 0x3c
  40476c:	9904      	ldr	r1, [sp, #16]
  40476e:	9806      	ldr	r0, [sp, #24]
  404770:	f7ff fa54 	bl	403c1c <__sprint_r.part.0>
  404774:	2800      	cmp	r0, #0
  404776:	f47f af43 	bne.w	404600 <_vfiprintf_r+0x964>
  40477a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40477c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40477e:	3001      	adds	r0, #1
  404780:	46ca      	mov	sl, r9
  404782:	e667      	b.n	404454 <_vfiprintf_r+0x7b8>
  404784:	46d3      	mov	fp, sl
  404786:	e6d6      	b.n	404536 <_vfiprintf_r+0x89a>
  404788:	9e07      	ldr	r6, [sp, #28]
  40478a:	3607      	adds	r6, #7
  40478c:	f026 0207 	bic.w	r2, r6, #7
  404790:	f102 0108 	add.w	r1, r2, #8
  404794:	e9d2 6700 	ldrd	r6, r7, [r2]
  404798:	9107      	str	r1, [sp, #28]
  40479a:	2201      	movs	r2, #1
  40479c:	f7ff bbb1 	b.w	403f02 <_vfiprintf_r+0x266>
  4047a0:	9e07      	ldr	r6, [sp, #28]
  4047a2:	3607      	adds	r6, #7
  4047a4:	f026 0607 	bic.w	r6, r6, #7
  4047a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4047ac:	f106 0208 	add.w	r2, r6, #8
  4047b0:	9207      	str	r2, [sp, #28]
  4047b2:	4606      	mov	r6, r0
  4047b4:	460f      	mov	r7, r1
  4047b6:	e4b6      	b.n	404126 <_vfiprintf_r+0x48a>
  4047b8:	9e07      	ldr	r6, [sp, #28]
  4047ba:	3607      	adds	r6, #7
  4047bc:	f026 0207 	bic.w	r2, r6, #7
  4047c0:	f102 0108 	add.w	r1, r2, #8
  4047c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4047c8:	9107      	str	r1, [sp, #28]
  4047ca:	2200      	movs	r2, #0
  4047cc:	f7ff bb99 	b.w	403f02 <_vfiprintf_r+0x266>
  4047d0:	9e07      	ldr	r6, [sp, #28]
  4047d2:	3607      	adds	r6, #7
  4047d4:	f026 0107 	bic.w	r1, r6, #7
  4047d8:	f101 0008 	add.w	r0, r1, #8
  4047dc:	9007      	str	r0, [sp, #28]
  4047de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4047e2:	e519      	b.n	404218 <_vfiprintf_r+0x57c>
  4047e4:	46cb      	mov	fp, r9
  4047e6:	f7ff bbab 	b.w	403f40 <_vfiprintf_r+0x2a4>
  4047ea:	252d      	movs	r5, #45	; 0x2d
  4047ec:	4276      	negs	r6, r6
  4047ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4047f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4047f6:	2201      	movs	r2, #1
  4047f8:	f7ff bb88 	b.w	403f0c <_vfiprintf_r+0x270>
  4047fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4047fe:	b9b3      	cbnz	r3, 40482e <_vfiprintf_r+0xb92>
  404800:	4611      	mov	r1, r2
  404802:	2001      	movs	r0, #1
  404804:	46ca      	mov	sl, r9
  404806:	e5f2      	b.n	4043ee <_vfiprintf_r+0x752>
  404808:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40480c:	f000 fdfe 	bl	40540c <__retarget_lock_release_recursive>
  404810:	f04f 33ff 	mov.w	r3, #4294967295
  404814:	9303      	str	r3, [sp, #12]
  404816:	f7ff bb50 	b.w	403eba <_vfiprintf_r+0x21e>
  40481a:	aa0f      	add	r2, sp, #60	; 0x3c
  40481c:	9904      	ldr	r1, [sp, #16]
  40481e:	9806      	ldr	r0, [sp, #24]
  404820:	f7ff f9fc 	bl	403c1c <__sprint_r.part.0>
  404824:	2800      	cmp	r0, #0
  404826:	f47f aeeb 	bne.w	404600 <_vfiprintf_r+0x964>
  40482a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40482c:	e6a9      	b.n	404582 <_vfiprintf_r+0x8e6>
  40482e:	ab0e      	add	r3, sp, #56	; 0x38
  404830:	2202      	movs	r2, #2
  404832:	931c      	str	r3, [sp, #112]	; 0x70
  404834:	921d      	str	r2, [sp, #116]	; 0x74
  404836:	2001      	movs	r0, #1
  404838:	46ca      	mov	sl, r9
  40483a:	e5d0      	b.n	4043de <_vfiprintf_r+0x742>
  40483c:	aa0f      	add	r2, sp, #60	; 0x3c
  40483e:	9904      	ldr	r1, [sp, #16]
  404840:	9806      	ldr	r0, [sp, #24]
  404842:	f7ff f9eb 	bl	403c1c <__sprint_r.part.0>
  404846:	2800      	cmp	r0, #0
  404848:	f47f aeda 	bne.w	404600 <_vfiprintf_r+0x964>
  40484c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40484e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404850:	1c48      	adds	r0, r1, #1
  404852:	46ca      	mov	sl, r9
  404854:	e5a4      	b.n	4043a0 <_vfiprintf_r+0x704>
  404856:	9a07      	ldr	r2, [sp, #28]
  404858:	9903      	ldr	r1, [sp, #12]
  40485a:	6813      	ldr	r3, [r2, #0]
  40485c:	17cd      	asrs	r5, r1, #31
  40485e:	4608      	mov	r0, r1
  404860:	3204      	adds	r2, #4
  404862:	4629      	mov	r1, r5
  404864:	9207      	str	r2, [sp, #28]
  404866:	e9c3 0100 	strd	r0, r1, [r3]
  40486a:	f7ff ba54 	b.w	403d16 <_vfiprintf_r+0x7a>
  40486e:	4658      	mov	r0, fp
  404870:	9607      	str	r6, [sp, #28]
  404872:	9302      	str	r3, [sp, #8]
  404874:	f7ff f964 	bl	403b40 <strlen>
  404878:	2400      	movs	r4, #0
  40487a:	9005      	str	r0, [sp, #20]
  40487c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404880:	f7ff bb5e 	b.w	403f40 <_vfiprintf_r+0x2a4>
  404884:	aa0f      	add	r2, sp, #60	; 0x3c
  404886:	9904      	ldr	r1, [sp, #16]
  404888:	9806      	ldr	r0, [sp, #24]
  40488a:	f7ff f9c7 	bl	403c1c <__sprint_r.part.0>
  40488e:	2800      	cmp	r0, #0
  404890:	f47f aeb6 	bne.w	404600 <_vfiprintf_r+0x964>
  404894:	9910      	ldr	r1, [sp, #64]	; 0x40
  404896:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404898:	1c48      	adds	r0, r1, #1
  40489a:	46ca      	mov	sl, r9
  40489c:	e5a7      	b.n	4043ee <_vfiprintf_r+0x752>
  40489e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4048a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4048a2:	4e20      	ldr	r6, [pc, #128]	; (404924 <_vfiprintf_r+0xc88>)
  4048a4:	3101      	adds	r1, #1
  4048a6:	f7ff bb90 	b.w	403fca <_vfiprintf_r+0x32e>
  4048aa:	2c06      	cmp	r4, #6
  4048ac:	bf28      	it	cs
  4048ae:	2406      	movcs	r4, #6
  4048b0:	9405      	str	r4, [sp, #20]
  4048b2:	9607      	str	r6, [sp, #28]
  4048b4:	9401      	str	r4, [sp, #4]
  4048b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 404928 <_vfiprintf_r+0xc8c>
  4048ba:	e4d5      	b.n	404268 <_vfiprintf_r+0x5cc>
  4048bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4048be:	4e19      	ldr	r6, [pc, #100]	; (404924 <_vfiprintf_r+0xc88>)
  4048c0:	3001      	adds	r0, #1
  4048c2:	e603      	b.n	4044cc <_vfiprintf_r+0x830>
  4048c4:	9405      	str	r4, [sp, #20]
  4048c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4048ca:	9607      	str	r6, [sp, #28]
  4048cc:	9302      	str	r3, [sp, #8]
  4048ce:	4604      	mov	r4, r0
  4048d0:	f7ff bb36 	b.w	403f40 <_vfiprintf_r+0x2a4>
  4048d4:	4686      	mov	lr, r0
  4048d6:	f7ff bbce 	b.w	404076 <_vfiprintf_r+0x3da>
  4048da:	9806      	ldr	r0, [sp, #24]
  4048dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4048de:	4659      	mov	r1, fp
  4048e0:	f7ff f99c 	bl	403c1c <__sprint_r.part.0>
  4048e4:	2800      	cmp	r0, #0
  4048e6:	f43f ae24 	beq.w	404532 <_vfiprintf_r+0x896>
  4048ea:	e624      	b.n	404536 <_vfiprintf_r+0x89a>
  4048ec:	9907      	ldr	r1, [sp, #28]
  4048ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4048f2:	680c      	ldr	r4, [r1, #0]
  4048f4:	3104      	adds	r1, #4
  4048f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4048fa:	46b8      	mov	r8, r7
  4048fc:	9107      	str	r1, [sp, #28]
  4048fe:	f7ff ba3f 	b.w	403d80 <_vfiprintf_r+0xe4>
  404902:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404906:	e43c      	b.n	404182 <_vfiprintf_r+0x4e6>
  404908:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40490c:	e521      	b.n	404352 <_vfiprintf_r+0x6b6>
  40490e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404912:	f7ff bbf4 	b.w	4040fe <_vfiprintf_r+0x462>
  404916:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40491a:	e491      	b.n	404240 <_vfiprintf_r+0x5a4>
  40491c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404920:	e469      	b.n	4041f6 <_vfiprintf_r+0x55a>
  404922:	bf00      	nop
  404924:	0040657c 	.word	0x0040657c
  404928:	00406574 	.word	0x00406574

0040492c <__sbprintf>:
  40492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404930:	460c      	mov	r4, r1
  404932:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404936:	8989      	ldrh	r1, [r1, #12]
  404938:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40493a:	89e5      	ldrh	r5, [r4, #14]
  40493c:	9619      	str	r6, [sp, #100]	; 0x64
  40493e:	f021 0102 	bic.w	r1, r1, #2
  404942:	4606      	mov	r6, r0
  404944:	69e0      	ldr	r0, [r4, #28]
  404946:	f8ad 100c 	strh.w	r1, [sp, #12]
  40494a:	4617      	mov	r7, r2
  40494c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404950:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404952:	f8ad 500e 	strh.w	r5, [sp, #14]
  404956:	4698      	mov	r8, r3
  404958:	ad1a      	add	r5, sp, #104	; 0x68
  40495a:	2300      	movs	r3, #0
  40495c:	9007      	str	r0, [sp, #28]
  40495e:	a816      	add	r0, sp, #88	; 0x58
  404960:	9209      	str	r2, [sp, #36]	; 0x24
  404962:	9306      	str	r3, [sp, #24]
  404964:	9500      	str	r5, [sp, #0]
  404966:	9504      	str	r5, [sp, #16]
  404968:	9102      	str	r1, [sp, #8]
  40496a:	9105      	str	r1, [sp, #20]
  40496c:	f000 fd48 	bl	405400 <__retarget_lock_init_recursive>
  404970:	4643      	mov	r3, r8
  404972:	463a      	mov	r2, r7
  404974:	4669      	mov	r1, sp
  404976:	4630      	mov	r0, r6
  404978:	f7ff f990 	bl	403c9c <_vfiprintf_r>
  40497c:	1e05      	subs	r5, r0, #0
  40497e:	db07      	blt.n	404990 <__sbprintf+0x64>
  404980:	4630      	mov	r0, r6
  404982:	4669      	mov	r1, sp
  404984:	f000 f928 	bl	404bd8 <_fflush_r>
  404988:	2800      	cmp	r0, #0
  40498a:	bf18      	it	ne
  40498c:	f04f 35ff 	movne.w	r5, #4294967295
  404990:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404994:	065b      	lsls	r3, r3, #25
  404996:	d503      	bpl.n	4049a0 <__sbprintf+0x74>
  404998:	89a3      	ldrh	r3, [r4, #12]
  40499a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40499e:	81a3      	strh	r3, [r4, #12]
  4049a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4049a2:	f000 fd2f 	bl	405404 <__retarget_lock_close_recursive>
  4049a6:	4628      	mov	r0, r5
  4049a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004049b0 <__swsetup_r>:
  4049b0:	b538      	push	{r3, r4, r5, lr}
  4049b2:	4b30      	ldr	r3, [pc, #192]	; (404a74 <__swsetup_r+0xc4>)
  4049b4:	681b      	ldr	r3, [r3, #0]
  4049b6:	4605      	mov	r5, r0
  4049b8:	460c      	mov	r4, r1
  4049ba:	b113      	cbz	r3, 4049c2 <__swsetup_r+0x12>
  4049bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4049be:	2a00      	cmp	r2, #0
  4049c0:	d038      	beq.n	404a34 <__swsetup_r+0x84>
  4049c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4049c6:	b293      	uxth	r3, r2
  4049c8:	0718      	lsls	r0, r3, #28
  4049ca:	d50c      	bpl.n	4049e6 <__swsetup_r+0x36>
  4049cc:	6920      	ldr	r0, [r4, #16]
  4049ce:	b1a8      	cbz	r0, 4049fc <__swsetup_r+0x4c>
  4049d0:	f013 0201 	ands.w	r2, r3, #1
  4049d4:	d01e      	beq.n	404a14 <__swsetup_r+0x64>
  4049d6:	6963      	ldr	r3, [r4, #20]
  4049d8:	2200      	movs	r2, #0
  4049da:	425b      	negs	r3, r3
  4049dc:	61a3      	str	r3, [r4, #24]
  4049de:	60a2      	str	r2, [r4, #8]
  4049e0:	b1f0      	cbz	r0, 404a20 <__swsetup_r+0x70>
  4049e2:	2000      	movs	r0, #0
  4049e4:	bd38      	pop	{r3, r4, r5, pc}
  4049e6:	06d9      	lsls	r1, r3, #27
  4049e8:	d53c      	bpl.n	404a64 <__swsetup_r+0xb4>
  4049ea:	0758      	lsls	r0, r3, #29
  4049ec:	d426      	bmi.n	404a3c <__swsetup_r+0x8c>
  4049ee:	6920      	ldr	r0, [r4, #16]
  4049f0:	f042 0308 	orr.w	r3, r2, #8
  4049f4:	81a3      	strh	r3, [r4, #12]
  4049f6:	b29b      	uxth	r3, r3
  4049f8:	2800      	cmp	r0, #0
  4049fa:	d1e9      	bne.n	4049d0 <__swsetup_r+0x20>
  4049fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404a00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404a04:	d0e4      	beq.n	4049d0 <__swsetup_r+0x20>
  404a06:	4628      	mov	r0, r5
  404a08:	4621      	mov	r1, r4
  404a0a:	f000 fd2f 	bl	40546c <__smakebuf_r>
  404a0e:	89a3      	ldrh	r3, [r4, #12]
  404a10:	6920      	ldr	r0, [r4, #16]
  404a12:	e7dd      	b.n	4049d0 <__swsetup_r+0x20>
  404a14:	0799      	lsls	r1, r3, #30
  404a16:	bf58      	it	pl
  404a18:	6962      	ldrpl	r2, [r4, #20]
  404a1a:	60a2      	str	r2, [r4, #8]
  404a1c:	2800      	cmp	r0, #0
  404a1e:	d1e0      	bne.n	4049e2 <__swsetup_r+0x32>
  404a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a24:	061a      	lsls	r2, r3, #24
  404a26:	d5dd      	bpl.n	4049e4 <__swsetup_r+0x34>
  404a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404a2c:	81a3      	strh	r3, [r4, #12]
  404a2e:	f04f 30ff 	mov.w	r0, #4294967295
  404a32:	bd38      	pop	{r3, r4, r5, pc}
  404a34:	4618      	mov	r0, r3
  404a36:	f000 f927 	bl	404c88 <__sinit>
  404a3a:	e7c2      	b.n	4049c2 <__swsetup_r+0x12>
  404a3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a3e:	b151      	cbz	r1, 404a56 <__swsetup_r+0xa6>
  404a40:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a44:	4299      	cmp	r1, r3
  404a46:	d004      	beq.n	404a52 <__swsetup_r+0xa2>
  404a48:	4628      	mov	r0, r5
  404a4a:	f000 fa43 	bl	404ed4 <_free_r>
  404a4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a52:	2300      	movs	r3, #0
  404a54:	6323      	str	r3, [r4, #48]	; 0x30
  404a56:	2300      	movs	r3, #0
  404a58:	6920      	ldr	r0, [r4, #16]
  404a5a:	6063      	str	r3, [r4, #4]
  404a5c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404a60:	6020      	str	r0, [r4, #0]
  404a62:	e7c5      	b.n	4049f0 <__swsetup_r+0x40>
  404a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404a68:	2309      	movs	r3, #9
  404a6a:	602b      	str	r3, [r5, #0]
  404a6c:	f04f 30ff 	mov.w	r0, #4294967295
  404a70:	81a2      	strh	r2, [r4, #12]
  404a72:	bd38      	pop	{r3, r4, r5, pc}
  404a74:	2000000c 	.word	0x2000000c

00404a78 <register_fini>:
  404a78:	4b02      	ldr	r3, [pc, #8]	; (404a84 <register_fini+0xc>)
  404a7a:	b113      	cbz	r3, 404a82 <register_fini+0xa>
  404a7c:	4802      	ldr	r0, [pc, #8]	; (404a88 <register_fini+0x10>)
  404a7e:	f000 b805 	b.w	404a8c <atexit>
  404a82:	4770      	bx	lr
  404a84:	00000000 	.word	0x00000000
  404a88:	00404cf9 	.word	0x00404cf9

00404a8c <atexit>:
  404a8c:	2300      	movs	r3, #0
  404a8e:	4601      	mov	r1, r0
  404a90:	461a      	mov	r2, r3
  404a92:	4618      	mov	r0, r3
  404a94:	f001 bc00 	b.w	406298 <__register_exitproc>

00404a98 <__sflush_r>:
  404a98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404a9c:	b29a      	uxth	r2, r3
  404a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404aa2:	460d      	mov	r5, r1
  404aa4:	0711      	lsls	r1, r2, #28
  404aa6:	4680      	mov	r8, r0
  404aa8:	d43a      	bmi.n	404b20 <__sflush_r+0x88>
  404aaa:	686a      	ldr	r2, [r5, #4]
  404aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404ab0:	2a00      	cmp	r2, #0
  404ab2:	81ab      	strh	r3, [r5, #12]
  404ab4:	dd6f      	ble.n	404b96 <__sflush_r+0xfe>
  404ab6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404ab8:	2c00      	cmp	r4, #0
  404aba:	d049      	beq.n	404b50 <__sflush_r+0xb8>
  404abc:	2200      	movs	r2, #0
  404abe:	b29b      	uxth	r3, r3
  404ac0:	f8d8 6000 	ldr.w	r6, [r8]
  404ac4:	f8c8 2000 	str.w	r2, [r8]
  404ac8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  404acc:	d067      	beq.n	404b9e <__sflush_r+0x106>
  404ace:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404ad0:	075f      	lsls	r7, r3, #29
  404ad2:	d505      	bpl.n	404ae0 <__sflush_r+0x48>
  404ad4:	6869      	ldr	r1, [r5, #4]
  404ad6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404ad8:	1a52      	subs	r2, r2, r1
  404ada:	b10b      	cbz	r3, 404ae0 <__sflush_r+0x48>
  404adc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404ade:	1ad2      	subs	r2, r2, r3
  404ae0:	2300      	movs	r3, #0
  404ae2:	69e9      	ldr	r1, [r5, #28]
  404ae4:	4640      	mov	r0, r8
  404ae6:	47a0      	blx	r4
  404ae8:	1c44      	adds	r4, r0, #1
  404aea:	d03c      	beq.n	404b66 <__sflush_r+0xce>
  404aec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404af0:	692a      	ldr	r2, [r5, #16]
  404af2:	602a      	str	r2, [r5, #0]
  404af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404af8:	2200      	movs	r2, #0
  404afa:	81ab      	strh	r3, [r5, #12]
  404afc:	04db      	lsls	r3, r3, #19
  404afe:	606a      	str	r2, [r5, #4]
  404b00:	d447      	bmi.n	404b92 <__sflush_r+0xfa>
  404b02:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404b04:	f8c8 6000 	str.w	r6, [r8]
  404b08:	b311      	cbz	r1, 404b50 <__sflush_r+0xb8>
  404b0a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404b0e:	4299      	cmp	r1, r3
  404b10:	d002      	beq.n	404b18 <__sflush_r+0x80>
  404b12:	4640      	mov	r0, r8
  404b14:	f000 f9de 	bl	404ed4 <_free_r>
  404b18:	2000      	movs	r0, #0
  404b1a:	6328      	str	r0, [r5, #48]	; 0x30
  404b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b20:	692e      	ldr	r6, [r5, #16]
  404b22:	b1ae      	cbz	r6, 404b50 <__sflush_r+0xb8>
  404b24:	682c      	ldr	r4, [r5, #0]
  404b26:	602e      	str	r6, [r5, #0]
  404b28:	0791      	lsls	r1, r2, #30
  404b2a:	bf0c      	ite	eq
  404b2c:	696b      	ldreq	r3, [r5, #20]
  404b2e:	2300      	movne	r3, #0
  404b30:	1ba4      	subs	r4, r4, r6
  404b32:	60ab      	str	r3, [r5, #8]
  404b34:	e00a      	b.n	404b4c <__sflush_r+0xb4>
  404b36:	4623      	mov	r3, r4
  404b38:	4632      	mov	r2, r6
  404b3a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404b3c:	69e9      	ldr	r1, [r5, #28]
  404b3e:	4640      	mov	r0, r8
  404b40:	47b8      	blx	r7
  404b42:	2800      	cmp	r0, #0
  404b44:	eba4 0400 	sub.w	r4, r4, r0
  404b48:	4406      	add	r6, r0
  404b4a:	dd04      	ble.n	404b56 <__sflush_r+0xbe>
  404b4c:	2c00      	cmp	r4, #0
  404b4e:	dcf2      	bgt.n	404b36 <__sflush_r+0x9e>
  404b50:	2000      	movs	r0, #0
  404b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b56:	89ab      	ldrh	r3, [r5, #12]
  404b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b5c:	81ab      	strh	r3, [r5, #12]
  404b5e:	f04f 30ff 	mov.w	r0, #4294967295
  404b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b66:	f8d8 4000 	ldr.w	r4, [r8]
  404b6a:	2c1d      	cmp	r4, #29
  404b6c:	d8f3      	bhi.n	404b56 <__sflush_r+0xbe>
  404b6e:	4b19      	ldr	r3, [pc, #100]	; (404bd4 <__sflush_r+0x13c>)
  404b70:	40e3      	lsrs	r3, r4
  404b72:	43db      	mvns	r3, r3
  404b74:	f013 0301 	ands.w	r3, r3, #1
  404b78:	d1ed      	bne.n	404b56 <__sflush_r+0xbe>
  404b7a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  404b7e:	606b      	str	r3, [r5, #4]
  404b80:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404b84:	6929      	ldr	r1, [r5, #16]
  404b86:	81ab      	strh	r3, [r5, #12]
  404b88:	04da      	lsls	r2, r3, #19
  404b8a:	6029      	str	r1, [r5, #0]
  404b8c:	d5b9      	bpl.n	404b02 <__sflush_r+0x6a>
  404b8e:	2c00      	cmp	r4, #0
  404b90:	d1b7      	bne.n	404b02 <__sflush_r+0x6a>
  404b92:	6528      	str	r0, [r5, #80]	; 0x50
  404b94:	e7b5      	b.n	404b02 <__sflush_r+0x6a>
  404b96:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404b98:	2a00      	cmp	r2, #0
  404b9a:	dc8c      	bgt.n	404ab6 <__sflush_r+0x1e>
  404b9c:	e7d8      	b.n	404b50 <__sflush_r+0xb8>
  404b9e:	2301      	movs	r3, #1
  404ba0:	69e9      	ldr	r1, [r5, #28]
  404ba2:	4640      	mov	r0, r8
  404ba4:	47a0      	blx	r4
  404ba6:	1c43      	adds	r3, r0, #1
  404ba8:	4602      	mov	r2, r0
  404baa:	d002      	beq.n	404bb2 <__sflush_r+0x11a>
  404bac:	89ab      	ldrh	r3, [r5, #12]
  404bae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404bb0:	e78e      	b.n	404ad0 <__sflush_r+0x38>
  404bb2:	f8d8 3000 	ldr.w	r3, [r8]
  404bb6:	2b00      	cmp	r3, #0
  404bb8:	d0f8      	beq.n	404bac <__sflush_r+0x114>
  404bba:	2b1d      	cmp	r3, #29
  404bbc:	d001      	beq.n	404bc2 <__sflush_r+0x12a>
  404bbe:	2b16      	cmp	r3, #22
  404bc0:	d102      	bne.n	404bc8 <__sflush_r+0x130>
  404bc2:	f8c8 6000 	str.w	r6, [r8]
  404bc6:	e7c3      	b.n	404b50 <__sflush_r+0xb8>
  404bc8:	89ab      	ldrh	r3, [r5, #12]
  404bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404bce:	81ab      	strh	r3, [r5, #12]
  404bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404bd4:	20400001 	.word	0x20400001

00404bd8 <_fflush_r>:
  404bd8:	b538      	push	{r3, r4, r5, lr}
  404bda:	460d      	mov	r5, r1
  404bdc:	4604      	mov	r4, r0
  404bde:	b108      	cbz	r0, 404be4 <_fflush_r+0xc>
  404be0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404be2:	b1bb      	cbz	r3, 404c14 <_fflush_r+0x3c>
  404be4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404be8:	b188      	cbz	r0, 404c0e <_fflush_r+0x36>
  404bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404bec:	07db      	lsls	r3, r3, #31
  404bee:	d401      	bmi.n	404bf4 <_fflush_r+0x1c>
  404bf0:	0581      	lsls	r1, r0, #22
  404bf2:	d517      	bpl.n	404c24 <_fflush_r+0x4c>
  404bf4:	4620      	mov	r0, r4
  404bf6:	4629      	mov	r1, r5
  404bf8:	f7ff ff4e 	bl	404a98 <__sflush_r>
  404bfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404bfe:	07da      	lsls	r2, r3, #31
  404c00:	4604      	mov	r4, r0
  404c02:	d402      	bmi.n	404c0a <_fflush_r+0x32>
  404c04:	89ab      	ldrh	r3, [r5, #12]
  404c06:	059b      	lsls	r3, r3, #22
  404c08:	d507      	bpl.n	404c1a <_fflush_r+0x42>
  404c0a:	4620      	mov	r0, r4
  404c0c:	bd38      	pop	{r3, r4, r5, pc}
  404c0e:	4604      	mov	r4, r0
  404c10:	4620      	mov	r0, r4
  404c12:	bd38      	pop	{r3, r4, r5, pc}
  404c14:	f000 f838 	bl	404c88 <__sinit>
  404c18:	e7e4      	b.n	404be4 <_fflush_r+0xc>
  404c1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404c1c:	f000 fbf6 	bl	40540c <__retarget_lock_release_recursive>
  404c20:	4620      	mov	r0, r4
  404c22:	bd38      	pop	{r3, r4, r5, pc}
  404c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404c26:	f000 fbef 	bl	405408 <__retarget_lock_acquire_recursive>
  404c2a:	e7e3      	b.n	404bf4 <_fflush_r+0x1c>

00404c2c <_cleanup_r>:
  404c2c:	4901      	ldr	r1, [pc, #4]	; (404c34 <_cleanup_r+0x8>)
  404c2e:	f000 bbaf 	b.w	405390 <_fwalk_reent>
  404c32:	bf00      	nop
  404c34:	00406381 	.word	0x00406381

00404c38 <std.isra.0>:
  404c38:	b510      	push	{r4, lr}
  404c3a:	2300      	movs	r3, #0
  404c3c:	4604      	mov	r4, r0
  404c3e:	8181      	strh	r1, [r0, #12]
  404c40:	81c2      	strh	r2, [r0, #14]
  404c42:	6003      	str	r3, [r0, #0]
  404c44:	6043      	str	r3, [r0, #4]
  404c46:	6083      	str	r3, [r0, #8]
  404c48:	6643      	str	r3, [r0, #100]	; 0x64
  404c4a:	6103      	str	r3, [r0, #16]
  404c4c:	6143      	str	r3, [r0, #20]
  404c4e:	6183      	str	r3, [r0, #24]
  404c50:	4619      	mov	r1, r3
  404c52:	2208      	movs	r2, #8
  404c54:	305c      	adds	r0, #92	; 0x5c
  404c56:	f7fe fe4d 	bl	4038f4 <memset>
  404c5a:	4807      	ldr	r0, [pc, #28]	; (404c78 <std.isra.0+0x40>)
  404c5c:	4907      	ldr	r1, [pc, #28]	; (404c7c <std.isra.0+0x44>)
  404c5e:	4a08      	ldr	r2, [pc, #32]	; (404c80 <std.isra.0+0x48>)
  404c60:	4b08      	ldr	r3, [pc, #32]	; (404c84 <std.isra.0+0x4c>)
  404c62:	6220      	str	r0, [r4, #32]
  404c64:	61e4      	str	r4, [r4, #28]
  404c66:	6261      	str	r1, [r4, #36]	; 0x24
  404c68:	62a2      	str	r2, [r4, #40]	; 0x28
  404c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
  404c6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404c74:	f000 bbc4 	b.w	405400 <__retarget_lock_init_recursive>
  404c78:	004060c5 	.word	0x004060c5
  404c7c:	004060e9 	.word	0x004060e9
  404c80:	00406125 	.word	0x00406125
  404c84:	00406145 	.word	0x00406145

00404c88 <__sinit>:
  404c88:	b510      	push	{r4, lr}
  404c8a:	4604      	mov	r4, r0
  404c8c:	4812      	ldr	r0, [pc, #72]	; (404cd8 <__sinit+0x50>)
  404c8e:	f000 fbbb 	bl	405408 <__retarget_lock_acquire_recursive>
  404c92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404c94:	b9d2      	cbnz	r2, 404ccc <__sinit+0x44>
  404c96:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  404c9a:	4810      	ldr	r0, [pc, #64]	; (404cdc <__sinit+0x54>)
  404c9c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404ca0:	2103      	movs	r1, #3
  404ca2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404ca6:	63e0      	str	r0, [r4, #60]	; 0x3c
  404ca8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  404cac:	6860      	ldr	r0, [r4, #4]
  404cae:	2104      	movs	r1, #4
  404cb0:	f7ff ffc2 	bl	404c38 <std.isra.0>
  404cb4:	2201      	movs	r2, #1
  404cb6:	2109      	movs	r1, #9
  404cb8:	68a0      	ldr	r0, [r4, #8]
  404cba:	f7ff ffbd 	bl	404c38 <std.isra.0>
  404cbe:	2202      	movs	r2, #2
  404cc0:	2112      	movs	r1, #18
  404cc2:	68e0      	ldr	r0, [r4, #12]
  404cc4:	f7ff ffb8 	bl	404c38 <std.isra.0>
  404cc8:	2301      	movs	r3, #1
  404cca:	63a3      	str	r3, [r4, #56]	; 0x38
  404ccc:	4802      	ldr	r0, [pc, #8]	; (404cd8 <__sinit+0x50>)
  404cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404cd2:	f000 bb9b 	b.w	40540c <__retarget_lock_release_recursive>
  404cd6:	bf00      	nop
  404cd8:	20008df4 	.word	0x20008df4
  404cdc:	00404c2d 	.word	0x00404c2d

00404ce0 <__sfp_lock_acquire>:
  404ce0:	4801      	ldr	r0, [pc, #4]	; (404ce8 <__sfp_lock_acquire+0x8>)
  404ce2:	f000 bb91 	b.w	405408 <__retarget_lock_acquire_recursive>
  404ce6:	bf00      	nop
  404ce8:	20008e08 	.word	0x20008e08

00404cec <__sfp_lock_release>:
  404cec:	4801      	ldr	r0, [pc, #4]	; (404cf4 <__sfp_lock_release+0x8>)
  404cee:	f000 bb8d 	b.w	40540c <__retarget_lock_release_recursive>
  404cf2:	bf00      	nop
  404cf4:	20008e08 	.word	0x20008e08

00404cf8 <__libc_fini_array>:
  404cf8:	b538      	push	{r3, r4, r5, lr}
  404cfa:	4c0a      	ldr	r4, [pc, #40]	; (404d24 <__libc_fini_array+0x2c>)
  404cfc:	4d0a      	ldr	r5, [pc, #40]	; (404d28 <__libc_fini_array+0x30>)
  404cfe:	1b64      	subs	r4, r4, r5
  404d00:	10a4      	asrs	r4, r4, #2
  404d02:	d00a      	beq.n	404d1a <__libc_fini_array+0x22>
  404d04:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404d08:	3b01      	subs	r3, #1
  404d0a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404d0e:	3c01      	subs	r4, #1
  404d10:	f855 3904 	ldr.w	r3, [r5], #-4
  404d14:	4798      	blx	r3
  404d16:	2c00      	cmp	r4, #0
  404d18:	d1f9      	bne.n	404d0e <__libc_fini_array+0x16>
  404d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404d1e:	f001 bcd1 	b.w	4066c4 <_fini>
  404d22:	bf00      	nop
  404d24:	004066d4 	.word	0x004066d4
  404d28:	004066d0 	.word	0x004066d0

00404d2c <__fputwc>:
  404d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404d30:	b082      	sub	sp, #8
  404d32:	4680      	mov	r8, r0
  404d34:	4689      	mov	r9, r1
  404d36:	4614      	mov	r4, r2
  404d38:	f000 fb54 	bl	4053e4 <__locale_mb_cur_max>
  404d3c:	2801      	cmp	r0, #1
  404d3e:	d036      	beq.n	404dae <__fputwc+0x82>
  404d40:	464a      	mov	r2, r9
  404d42:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404d46:	a901      	add	r1, sp, #4
  404d48:	4640      	mov	r0, r8
  404d4a:	f001 fa57 	bl	4061fc <_wcrtomb_r>
  404d4e:	1c42      	adds	r2, r0, #1
  404d50:	4606      	mov	r6, r0
  404d52:	d025      	beq.n	404da0 <__fputwc+0x74>
  404d54:	b3a8      	cbz	r0, 404dc2 <__fputwc+0x96>
  404d56:	f89d e004 	ldrb.w	lr, [sp, #4]
  404d5a:	2500      	movs	r5, #0
  404d5c:	f10d 0a04 	add.w	sl, sp, #4
  404d60:	e009      	b.n	404d76 <__fputwc+0x4a>
  404d62:	6823      	ldr	r3, [r4, #0]
  404d64:	1c5a      	adds	r2, r3, #1
  404d66:	6022      	str	r2, [r4, #0]
  404d68:	f883 e000 	strb.w	lr, [r3]
  404d6c:	3501      	adds	r5, #1
  404d6e:	42b5      	cmp	r5, r6
  404d70:	d227      	bcs.n	404dc2 <__fputwc+0x96>
  404d72:	f815 e00a 	ldrb.w	lr, [r5, sl]
  404d76:	68a3      	ldr	r3, [r4, #8]
  404d78:	3b01      	subs	r3, #1
  404d7a:	2b00      	cmp	r3, #0
  404d7c:	60a3      	str	r3, [r4, #8]
  404d7e:	daf0      	bge.n	404d62 <__fputwc+0x36>
  404d80:	69a7      	ldr	r7, [r4, #24]
  404d82:	42bb      	cmp	r3, r7
  404d84:	4671      	mov	r1, lr
  404d86:	4622      	mov	r2, r4
  404d88:	4640      	mov	r0, r8
  404d8a:	db02      	blt.n	404d92 <__fputwc+0x66>
  404d8c:	f1be 0f0a 	cmp.w	lr, #10
  404d90:	d1e7      	bne.n	404d62 <__fputwc+0x36>
  404d92:	f001 f9db 	bl	40614c <__swbuf_r>
  404d96:	1c43      	adds	r3, r0, #1
  404d98:	d1e8      	bne.n	404d6c <__fputwc+0x40>
  404d9a:	b002      	add	sp, #8
  404d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404da0:	89a3      	ldrh	r3, [r4, #12]
  404da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404da6:	81a3      	strh	r3, [r4, #12]
  404da8:	b002      	add	sp, #8
  404daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404dae:	f109 33ff 	add.w	r3, r9, #4294967295
  404db2:	2bfe      	cmp	r3, #254	; 0xfe
  404db4:	d8c4      	bhi.n	404d40 <__fputwc+0x14>
  404db6:	fa5f fe89 	uxtb.w	lr, r9
  404dba:	4606      	mov	r6, r0
  404dbc:	f88d e004 	strb.w	lr, [sp, #4]
  404dc0:	e7cb      	b.n	404d5a <__fputwc+0x2e>
  404dc2:	4648      	mov	r0, r9
  404dc4:	b002      	add	sp, #8
  404dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404dca:	bf00      	nop

00404dcc <_fputwc_r>:
  404dcc:	b530      	push	{r4, r5, lr}
  404dce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404dd0:	f013 0f01 	tst.w	r3, #1
  404dd4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404dd8:	4614      	mov	r4, r2
  404dda:	b083      	sub	sp, #12
  404ddc:	4605      	mov	r5, r0
  404dde:	b29a      	uxth	r2, r3
  404de0:	d101      	bne.n	404de6 <_fputwc_r+0x1a>
  404de2:	0590      	lsls	r0, r2, #22
  404de4:	d51c      	bpl.n	404e20 <_fputwc_r+0x54>
  404de6:	0490      	lsls	r0, r2, #18
  404de8:	d406      	bmi.n	404df8 <_fputwc_r+0x2c>
  404dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404dec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404df4:	81a3      	strh	r3, [r4, #12]
  404df6:	6662      	str	r2, [r4, #100]	; 0x64
  404df8:	4628      	mov	r0, r5
  404dfa:	4622      	mov	r2, r4
  404dfc:	f7ff ff96 	bl	404d2c <__fputwc>
  404e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404e02:	07da      	lsls	r2, r3, #31
  404e04:	4605      	mov	r5, r0
  404e06:	d402      	bmi.n	404e0e <_fputwc_r+0x42>
  404e08:	89a3      	ldrh	r3, [r4, #12]
  404e0a:	059b      	lsls	r3, r3, #22
  404e0c:	d502      	bpl.n	404e14 <_fputwc_r+0x48>
  404e0e:	4628      	mov	r0, r5
  404e10:	b003      	add	sp, #12
  404e12:	bd30      	pop	{r4, r5, pc}
  404e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404e16:	f000 faf9 	bl	40540c <__retarget_lock_release_recursive>
  404e1a:	4628      	mov	r0, r5
  404e1c:	b003      	add	sp, #12
  404e1e:	bd30      	pop	{r4, r5, pc}
  404e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404e22:	9101      	str	r1, [sp, #4]
  404e24:	f000 faf0 	bl	405408 <__retarget_lock_acquire_recursive>
  404e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e2c:	9901      	ldr	r1, [sp, #4]
  404e2e:	b29a      	uxth	r2, r3
  404e30:	e7d9      	b.n	404de6 <_fputwc_r+0x1a>
  404e32:	bf00      	nop

00404e34 <_malloc_trim_r>:
  404e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e36:	4f24      	ldr	r7, [pc, #144]	; (404ec8 <_malloc_trim_r+0x94>)
  404e38:	460c      	mov	r4, r1
  404e3a:	4606      	mov	r6, r0
  404e3c:	f000 ff7e 	bl	405d3c <__malloc_lock>
  404e40:	68bb      	ldr	r3, [r7, #8]
  404e42:	685d      	ldr	r5, [r3, #4]
  404e44:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404e48:	310f      	adds	r1, #15
  404e4a:	f025 0503 	bic.w	r5, r5, #3
  404e4e:	4429      	add	r1, r5
  404e50:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404e54:	f021 010f 	bic.w	r1, r1, #15
  404e58:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404e5c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404e60:	db07      	blt.n	404e72 <_malloc_trim_r+0x3e>
  404e62:	2100      	movs	r1, #0
  404e64:	4630      	mov	r0, r6
  404e66:	f001 f91b 	bl	4060a0 <_sbrk_r>
  404e6a:	68bb      	ldr	r3, [r7, #8]
  404e6c:	442b      	add	r3, r5
  404e6e:	4298      	cmp	r0, r3
  404e70:	d004      	beq.n	404e7c <_malloc_trim_r+0x48>
  404e72:	4630      	mov	r0, r6
  404e74:	f000 ff68 	bl	405d48 <__malloc_unlock>
  404e78:	2000      	movs	r0, #0
  404e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e7c:	4261      	negs	r1, r4
  404e7e:	4630      	mov	r0, r6
  404e80:	f001 f90e 	bl	4060a0 <_sbrk_r>
  404e84:	3001      	adds	r0, #1
  404e86:	d00d      	beq.n	404ea4 <_malloc_trim_r+0x70>
  404e88:	4b10      	ldr	r3, [pc, #64]	; (404ecc <_malloc_trim_r+0x98>)
  404e8a:	68ba      	ldr	r2, [r7, #8]
  404e8c:	6819      	ldr	r1, [r3, #0]
  404e8e:	1b2d      	subs	r5, r5, r4
  404e90:	f045 0501 	orr.w	r5, r5, #1
  404e94:	4630      	mov	r0, r6
  404e96:	1b09      	subs	r1, r1, r4
  404e98:	6055      	str	r5, [r2, #4]
  404e9a:	6019      	str	r1, [r3, #0]
  404e9c:	f000 ff54 	bl	405d48 <__malloc_unlock>
  404ea0:	2001      	movs	r0, #1
  404ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ea4:	2100      	movs	r1, #0
  404ea6:	4630      	mov	r0, r6
  404ea8:	f001 f8fa 	bl	4060a0 <_sbrk_r>
  404eac:	68ba      	ldr	r2, [r7, #8]
  404eae:	1a83      	subs	r3, r0, r2
  404eb0:	2b0f      	cmp	r3, #15
  404eb2:	ddde      	ble.n	404e72 <_malloc_trim_r+0x3e>
  404eb4:	4c06      	ldr	r4, [pc, #24]	; (404ed0 <_malloc_trim_r+0x9c>)
  404eb6:	4905      	ldr	r1, [pc, #20]	; (404ecc <_malloc_trim_r+0x98>)
  404eb8:	6824      	ldr	r4, [r4, #0]
  404eba:	f043 0301 	orr.w	r3, r3, #1
  404ebe:	1b00      	subs	r0, r0, r4
  404ec0:	6053      	str	r3, [r2, #4]
  404ec2:	6008      	str	r0, [r1, #0]
  404ec4:	e7d5      	b.n	404e72 <_malloc_trim_r+0x3e>
  404ec6:	bf00      	nop
  404ec8:	200005a8 	.word	0x200005a8
  404ecc:	20008ce4 	.word	0x20008ce4
  404ed0:	200009b0 	.word	0x200009b0

00404ed4 <_free_r>:
  404ed4:	2900      	cmp	r1, #0
  404ed6:	d044      	beq.n	404f62 <_free_r+0x8e>
  404ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404edc:	460d      	mov	r5, r1
  404ede:	4680      	mov	r8, r0
  404ee0:	f000 ff2c 	bl	405d3c <__malloc_lock>
  404ee4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404ee8:	4969      	ldr	r1, [pc, #420]	; (405090 <_free_r+0x1bc>)
  404eea:	f027 0301 	bic.w	r3, r7, #1
  404eee:	f1a5 0408 	sub.w	r4, r5, #8
  404ef2:	18e2      	adds	r2, r4, r3
  404ef4:	688e      	ldr	r6, [r1, #8]
  404ef6:	6850      	ldr	r0, [r2, #4]
  404ef8:	42b2      	cmp	r2, r6
  404efa:	f020 0003 	bic.w	r0, r0, #3
  404efe:	d05e      	beq.n	404fbe <_free_r+0xea>
  404f00:	07fe      	lsls	r6, r7, #31
  404f02:	6050      	str	r0, [r2, #4]
  404f04:	d40b      	bmi.n	404f1e <_free_r+0x4a>
  404f06:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404f0a:	1be4      	subs	r4, r4, r7
  404f0c:	f101 0e08 	add.w	lr, r1, #8
  404f10:	68a5      	ldr	r5, [r4, #8]
  404f12:	4575      	cmp	r5, lr
  404f14:	443b      	add	r3, r7
  404f16:	d06d      	beq.n	404ff4 <_free_r+0x120>
  404f18:	68e7      	ldr	r7, [r4, #12]
  404f1a:	60ef      	str	r7, [r5, #12]
  404f1c:	60bd      	str	r5, [r7, #8]
  404f1e:	1815      	adds	r5, r2, r0
  404f20:	686d      	ldr	r5, [r5, #4]
  404f22:	07ed      	lsls	r5, r5, #31
  404f24:	d53e      	bpl.n	404fa4 <_free_r+0xd0>
  404f26:	f043 0201 	orr.w	r2, r3, #1
  404f2a:	6062      	str	r2, [r4, #4]
  404f2c:	50e3      	str	r3, [r4, r3]
  404f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404f32:	d217      	bcs.n	404f64 <_free_r+0x90>
  404f34:	08db      	lsrs	r3, r3, #3
  404f36:	1c58      	adds	r0, r3, #1
  404f38:	109a      	asrs	r2, r3, #2
  404f3a:	684d      	ldr	r5, [r1, #4]
  404f3c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404f40:	60a7      	str	r7, [r4, #8]
  404f42:	2301      	movs	r3, #1
  404f44:	4093      	lsls	r3, r2
  404f46:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  404f4a:	432b      	orrs	r3, r5
  404f4c:	3a08      	subs	r2, #8
  404f4e:	60e2      	str	r2, [r4, #12]
  404f50:	604b      	str	r3, [r1, #4]
  404f52:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404f56:	60fc      	str	r4, [r7, #12]
  404f58:	4640      	mov	r0, r8
  404f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404f5e:	f000 bef3 	b.w	405d48 <__malloc_unlock>
  404f62:	4770      	bx	lr
  404f64:	0a5a      	lsrs	r2, r3, #9
  404f66:	2a04      	cmp	r2, #4
  404f68:	d852      	bhi.n	405010 <_free_r+0x13c>
  404f6a:	099a      	lsrs	r2, r3, #6
  404f6c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404f70:	00ff      	lsls	r7, r7, #3
  404f72:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404f76:	19c8      	adds	r0, r1, r7
  404f78:	59ca      	ldr	r2, [r1, r7]
  404f7a:	3808      	subs	r0, #8
  404f7c:	4290      	cmp	r0, r2
  404f7e:	d04f      	beq.n	405020 <_free_r+0x14c>
  404f80:	6851      	ldr	r1, [r2, #4]
  404f82:	f021 0103 	bic.w	r1, r1, #3
  404f86:	428b      	cmp	r3, r1
  404f88:	d232      	bcs.n	404ff0 <_free_r+0x11c>
  404f8a:	6892      	ldr	r2, [r2, #8]
  404f8c:	4290      	cmp	r0, r2
  404f8e:	d1f7      	bne.n	404f80 <_free_r+0xac>
  404f90:	68c3      	ldr	r3, [r0, #12]
  404f92:	60a0      	str	r0, [r4, #8]
  404f94:	60e3      	str	r3, [r4, #12]
  404f96:	609c      	str	r4, [r3, #8]
  404f98:	60c4      	str	r4, [r0, #12]
  404f9a:	4640      	mov	r0, r8
  404f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404fa0:	f000 bed2 	b.w	405d48 <__malloc_unlock>
  404fa4:	6895      	ldr	r5, [r2, #8]
  404fa6:	4f3b      	ldr	r7, [pc, #236]	; (405094 <_free_r+0x1c0>)
  404fa8:	42bd      	cmp	r5, r7
  404faa:	4403      	add	r3, r0
  404fac:	d040      	beq.n	405030 <_free_r+0x15c>
  404fae:	68d0      	ldr	r0, [r2, #12]
  404fb0:	60e8      	str	r0, [r5, #12]
  404fb2:	f043 0201 	orr.w	r2, r3, #1
  404fb6:	6085      	str	r5, [r0, #8]
  404fb8:	6062      	str	r2, [r4, #4]
  404fba:	50e3      	str	r3, [r4, r3]
  404fbc:	e7b7      	b.n	404f2e <_free_r+0x5a>
  404fbe:	07ff      	lsls	r7, r7, #31
  404fc0:	4403      	add	r3, r0
  404fc2:	d407      	bmi.n	404fd4 <_free_r+0x100>
  404fc4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404fc8:	1aa4      	subs	r4, r4, r2
  404fca:	4413      	add	r3, r2
  404fcc:	68a0      	ldr	r0, [r4, #8]
  404fce:	68e2      	ldr	r2, [r4, #12]
  404fd0:	60c2      	str	r2, [r0, #12]
  404fd2:	6090      	str	r0, [r2, #8]
  404fd4:	4a30      	ldr	r2, [pc, #192]	; (405098 <_free_r+0x1c4>)
  404fd6:	6812      	ldr	r2, [r2, #0]
  404fd8:	f043 0001 	orr.w	r0, r3, #1
  404fdc:	4293      	cmp	r3, r2
  404fde:	6060      	str	r0, [r4, #4]
  404fe0:	608c      	str	r4, [r1, #8]
  404fe2:	d3b9      	bcc.n	404f58 <_free_r+0x84>
  404fe4:	4b2d      	ldr	r3, [pc, #180]	; (40509c <_free_r+0x1c8>)
  404fe6:	4640      	mov	r0, r8
  404fe8:	6819      	ldr	r1, [r3, #0]
  404fea:	f7ff ff23 	bl	404e34 <_malloc_trim_r>
  404fee:	e7b3      	b.n	404f58 <_free_r+0x84>
  404ff0:	4610      	mov	r0, r2
  404ff2:	e7cd      	b.n	404f90 <_free_r+0xbc>
  404ff4:	1811      	adds	r1, r2, r0
  404ff6:	6849      	ldr	r1, [r1, #4]
  404ff8:	07c9      	lsls	r1, r1, #31
  404ffa:	d444      	bmi.n	405086 <_free_r+0x1b2>
  404ffc:	6891      	ldr	r1, [r2, #8]
  404ffe:	68d2      	ldr	r2, [r2, #12]
  405000:	60ca      	str	r2, [r1, #12]
  405002:	4403      	add	r3, r0
  405004:	f043 0001 	orr.w	r0, r3, #1
  405008:	6091      	str	r1, [r2, #8]
  40500a:	6060      	str	r0, [r4, #4]
  40500c:	50e3      	str	r3, [r4, r3]
  40500e:	e7a3      	b.n	404f58 <_free_r+0x84>
  405010:	2a14      	cmp	r2, #20
  405012:	d816      	bhi.n	405042 <_free_r+0x16e>
  405014:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405018:	00ff      	lsls	r7, r7, #3
  40501a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40501e:	e7aa      	b.n	404f76 <_free_r+0xa2>
  405020:	10aa      	asrs	r2, r5, #2
  405022:	2301      	movs	r3, #1
  405024:	684d      	ldr	r5, [r1, #4]
  405026:	4093      	lsls	r3, r2
  405028:	432b      	orrs	r3, r5
  40502a:	604b      	str	r3, [r1, #4]
  40502c:	4603      	mov	r3, r0
  40502e:	e7b0      	b.n	404f92 <_free_r+0xbe>
  405030:	f043 0201 	orr.w	r2, r3, #1
  405034:	614c      	str	r4, [r1, #20]
  405036:	610c      	str	r4, [r1, #16]
  405038:	60e5      	str	r5, [r4, #12]
  40503a:	60a5      	str	r5, [r4, #8]
  40503c:	6062      	str	r2, [r4, #4]
  40503e:	50e3      	str	r3, [r4, r3]
  405040:	e78a      	b.n	404f58 <_free_r+0x84>
  405042:	2a54      	cmp	r2, #84	; 0x54
  405044:	d806      	bhi.n	405054 <_free_r+0x180>
  405046:	0b1a      	lsrs	r2, r3, #12
  405048:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40504c:	00ff      	lsls	r7, r7, #3
  40504e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405052:	e790      	b.n	404f76 <_free_r+0xa2>
  405054:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405058:	d806      	bhi.n	405068 <_free_r+0x194>
  40505a:	0bda      	lsrs	r2, r3, #15
  40505c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405060:	00ff      	lsls	r7, r7, #3
  405062:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405066:	e786      	b.n	404f76 <_free_r+0xa2>
  405068:	f240 5054 	movw	r0, #1364	; 0x554
  40506c:	4282      	cmp	r2, r0
  40506e:	d806      	bhi.n	40507e <_free_r+0x1aa>
  405070:	0c9a      	lsrs	r2, r3, #18
  405072:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405076:	00ff      	lsls	r7, r7, #3
  405078:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40507c:	e77b      	b.n	404f76 <_free_r+0xa2>
  40507e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405082:	257e      	movs	r5, #126	; 0x7e
  405084:	e777      	b.n	404f76 <_free_r+0xa2>
  405086:	f043 0101 	orr.w	r1, r3, #1
  40508a:	6061      	str	r1, [r4, #4]
  40508c:	6013      	str	r3, [r2, #0]
  40508e:	e763      	b.n	404f58 <_free_r+0x84>
  405090:	200005a8 	.word	0x200005a8
  405094:	200005b0 	.word	0x200005b0
  405098:	200009b4 	.word	0x200009b4
  40509c:	20008d14 	.word	0x20008d14

004050a0 <__sfvwrite_r>:
  4050a0:	6893      	ldr	r3, [r2, #8]
  4050a2:	2b00      	cmp	r3, #0
  4050a4:	d073      	beq.n	40518e <__sfvwrite_r+0xee>
  4050a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050aa:	898b      	ldrh	r3, [r1, #12]
  4050ac:	b083      	sub	sp, #12
  4050ae:	460c      	mov	r4, r1
  4050b0:	0719      	lsls	r1, r3, #28
  4050b2:	9000      	str	r0, [sp, #0]
  4050b4:	4616      	mov	r6, r2
  4050b6:	d526      	bpl.n	405106 <__sfvwrite_r+0x66>
  4050b8:	6922      	ldr	r2, [r4, #16]
  4050ba:	b322      	cbz	r2, 405106 <__sfvwrite_r+0x66>
  4050bc:	f013 0002 	ands.w	r0, r3, #2
  4050c0:	6835      	ldr	r5, [r6, #0]
  4050c2:	d02c      	beq.n	40511e <__sfvwrite_r+0x7e>
  4050c4:	f04f 0900 	mov.w	r9, #0
  4050c8:	4fb0      	ldr	r7, [pc, #704]	; (40538c <__sfvwrite_r+0x2ec>)
  4050ca:	46c8      	mov	r8, r9
  4050cc:	46b2      	mov	sl, r6
  4050ce:	45b8      	cmp	r8, r7
  4050d0:	4643      	mov	r3, r8
  4050d2:	464a      	mov	r2, r9
  4050d4:	bf28      	it	cs
  4050d6:	463b      	movcs	r3, r7
  4050d8:	9800      	ldr	r0, [sp, #0]
  4050da:	f1b8 0f00 	cmp.w	r8, #0
  4050de:	d050      	beq.n	405182 <__sfvwrite_r+0xe2>
  4050e0:	69e1      	ldr	r1, [r4, #28]
  4050e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4050e4:	47b0      	blx	r6
  4050e6:	2800      	cmp	r0, #0
  4050e8:	dd58      	ble.n	40519c <__sfvwrite_r+0xfc>
  4050ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4050ee:	1a1b      	subs	r3, r3, r0
  4050f0:	4481      	add	r9, r0
  4050f2:	eba8 0800 	sub.w	r8, r8, r0
  4050f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4050fa:	2b00      	cmp	r3, #0
  4050fc:	d1e7      	bne.n	4050ce <__sfvwrite_r+0x2e>
  4050fe:	2000      	movs	r0, #0
  405100:	b003      	add	sp, #12
  405102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405106:	4621      	mov	r1, r4
  405108:	9800      	ldr	r0, [sp, #0]
  40510a:	f7ff fc51 	bl	4049b0 <__swsetup_r>
  40510e:	2800      	cmp	r0, #0
  405110:	f040 8133 	bne.w	40537a <__sfvwrite_r+0x2da>
  405114:	89a3      	ldrh	r3, [r4, #12]
  405116:	6835      	ldr	r5, [r6, #0]
  405118:	f013 0002 	ands.w	r0, r3, #2
  40511c:	d1d2      	bne.n	4050c4 <__sfvwrite_r+0x24>
  40511e:	f013 0901 	ands.w	r9, r3, #1
  405122:	d145      	bne.n	4051b0 <__sfvwrite_r+0x110>
  405124:	464f      	mov	r7, r9
  405126:	9601      	str	r6, [sp, #4]
  405128:	b337      	cbz	r7, 405178 <__sfvwrite_r+0xd8>
  40512a:	059a      	lsls	r2, r3, #22
  40512c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405130:	f140 8083 	bpl.w	40523a <__sfvwrite_r+0x19a>
  405134:	4547      	cmp	r7, r8
  405136:	46c3      	mov	fp, r8
  405138:	f0c0 80ab 	bcc.w	405292 <__sfvwrite_r+0x1f2>
  40513c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405140:	f040 80ac 	bne.w	40529c <__sfvwrite_r+0x1fc>
  405144:	6820      	ldr	r0, [r4, #0]
  405146:	46ba      	mov	sl, r7
  405148:	465a      	mov	r2, fp
  40514a:	4649      	mov	r1, r9
  40514c:	f000 fd92 	bl	405c74 <memmove>
  405150:	68a2      	ldr	r2, [r4, #8]
  405152:	6823      	ldr	r3, [r4, #0]
  405154:	eba2 0208 	sub.w	r2, r2, r8
  405158:	445b      	add	r3, fp
  40515a:	60a2      	str	r2, [r4, #8]
  40515c:	6023      	str	r3, [r4, #0]
  40515e:	9a01      	ldr	r2, [sp, #4]
  405160:	6893      	ldr	r3, [r2, #8]
  405162:	eba3 030a 	sub.w	r3, r3, sl
  405166:	44d1      	add	r9, sl
  405168:	eba7 070a 	sub.w	r7, r7, sl
  40516c:	6093      	str	r3, [r2, #8]
  40516e:	2b00      	cmp	r3, #0
  405170:	d0c5      	beq.n	4050fe <__sfvwrite_r+0x5e>
  405172:	89a3      	ldrh	r3, [r4, #12]
  405174:	2f00      	cmp	r7, #0
  405176:	d1d8      	bne.n	40512a <__sfvwrite_r+0x8a>
  405178:	f8d5 9000 	ldr.w	r9, [r5]
  40517c:	686f      	ldr	r7, [r5, #4]
  40517e:	3508      	adds	r5, #8
  405180:	e7d2      	b.n	405128 <__sfvwrite_r+0x88>
  405182:	f8d5 9000 	ldr.w	r9, [r5]
  405186:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40518a:	3508      	adds	r5, #8
  40518c:	e79f      	b.n	4050ce <__sfvwrite_r+0x2e>
  40518e:	2000      	movs	r0, #0
  405190:	4770      	bx	lr
  405192:	4621      	mov	r1, r4
  405194:	9800      	ldr	r0, [sp, #0]
  405196:	f7ff fd1f 	bl	404bd8 <_fflush_r>
  40519a:	b370      	cbz	r0, 4051fa <__sfvwrite_r+0x15a>
  40519c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4051a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051a4:	f04f 30ff 	mov.w	r0, #4294967295
  4051a8:	81a3      	strh	r3, [r4, #12]
  4051aa:	b003      	add	sp, #12
  4051ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051b0:	4681      	mov	r9, r0
  4051b2:	4633      	mov	r3, r6
  4051b4:	464e      	mov	r6, r9
  4051b6:	46a8      	mov	r8, r5
  4051b8:	469a      	mov	sl, r3
  4051ba:	464d      	mov	r5, r9
  4051bc:	b34e      	cbz	r6, 405212 <__sfvwrite_r+0x172>
  4051be:	b380      	cbz	r0, 405222 <__sfvwrite_r+0x182>
  4051c0:	6820      	ldr	r0, [r4, #0]
  4051c2:	6923      	ldr	r3, [r4, #16]
  4051c4:	6962      	ldr	r2, [r4, #20]
  4051c6:	45b1      	cmp	r9, r6
  4051c8:	46cb      	mov	fp, r9
  4051ca:	bf28      	it	cs
  4051cc:	46b3      	movcs	fp, r6
  4051ce:	4298      	cmp	r0, r3
  4051d0:	465f      	mov	r7, fp
  4051d2:	d904      	bls.n	4051de <__sfvwrite_r+0x13e>
  4051d4:	68a3      	ldr	r3, [r4, #8]
  4051d6:	4413      	add	r3, r2
  4051d8:	459b      	cmp	fp, r3
  4051da:	f300 80a6 	bgt.w	40532a <__sfvwrite_r+0x28a>
  4051de:	4593      	cmp	fp, r2
  4051e0:	db4b      	blt.n	40527a <__sfvwrite_r+0x1da>
  4051e2:	4613      	mov	r3, r2
  4051e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4051e6:	69e1      	ldr	r1, [r4, #28]
  4051e8:	9800      	ldr	r0, [sp, #0]
  4051ea:	462a      	mov	r2, r5
  4051ec:	47b8      	blx	r7
  4051ee:	1e07      	subs	r7, r0, #0
  4051f0:	ddd4      	ble.n	40519c <__sfvwrite_r+0xfc>
  4051f2:	ebb9 0907 	subs.w	r9, r9, r7
  4051f6:	d0cc      	beq.n	405192 <__sfvwrite_r+0xf2>
  4051f8:	2001      	movs	r0, #1
  4051fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4051fe:	1bdb      	subs	r3, r3, r7
  405200:	443d      	add	r5, r7
  405202:	1bf6      	subs	r6, r6, r7
  405204:	f8ca 3008 	str.w	r3, [sl, #8]
  405208:	2b00      	cmp	r3, #0
  40520a:	f43f af78 	beq.w	4050fe <__sfvwrite_r+0x5e>
  40520e:	2e00      	cmp	r6, #0
  405210:	d1d5      	bne.n	4051be <__sfvwrite_r+0x11e>
  405212:	f108 0308 	add.w	r3, r8, #8
  405216:	e913 0060 	ldmdb	r3, {r5, r6}
  40521a:	4698      	mov	r8, r3
  40521c:	3308      	adds	r3, #8
  40521e:	2e00      	cmp	r6, #0
  405220:	d0f9      	beq.n	405216 <__sfvwrite_r+0x176>
  405222:	4632      	mov	r2, r6
  405224:	210a      	movs	r1, #10
  405226:	4628      	mov	r0, r5
  405228:	f000 fc3a 	bl	405aa0 <memchr>
  40522c:	2800      	cmp	r0, #0
  40522e:	f000 80a1 	beq.w	405374 <__sfvwrite_r+0x2d4>
  405232:	3001      	adds	r0, #1
  405234:	eba0 0905 	sub.w	r9, r0, r5
  405238:	e7c2      	b.n	4051c0 <__sfvwrite_r+0x120>
  40523a:	6820      	ldr	r0, [r4, #0]
  40523c:	6923      	ldr	r3, [r4, #16]
  40523e:	4298      	cmp	r0, r3
  405240:	d802      	bhi.n	405248 <__sfvwrite_r+0x1a8>
  405242:	6963      	ldr	r3, [r4, #20]
  405244:	429f      	cmp	r7, r3
  405246:	d25d      	bcs.n	405304 <__sfvwrite_r+0x264>
  405248:	45b8      	cmp	r8, r7
  40524a:	bf28      	it	cs
  40524c:	46b8      	movcs	r8, r7
  40524e:	4642      	mov	r2, r8
  405250:	4649      	mov	r1, r9
  405252:	f000 fd0f 	bl	405c74 <memmove>
  405256:	68a3      	ldr	r3, [r4, #8]
  405258:	6822      	ldr	r2, [r4, #0]
  40525a:	eba3 0308 	sub.w	r3, r3, r8
  40525e:	4442      	add	r2, r8
  405260:	60a3      	str	r3, [r4, #8]
  405262:	6022      	str	r2, [r4, #0]
  405264:	b10b      	cbz	r3, 40526a <__sfvwrite_r+0x1ca>
  405266:	46c2      	mov	sl, r8
  405268:	e779      	b.n	40515e <__sfvwrite_r+0xbe>
  40526a:	4621      	mov	r1, r4
  40526c:	9800      	ldr	r0, [sp, #0]
  40526e:	f7ff fcb3 	bl	404bd8 <_fflush_r>
  405272:	2800      	cmp	r0, #0
  405274:	d192      	bne.n	40519c <__sfvwrite_r+0xfc>
  405276:	46c2      	mov	sl, r8
  405278:	e771      	b.n	40515e <__sfvwrite_r+0xbe>
  40527a:	465a      	mov	r2, fp
  40527c:	4629      	mov	r1, r5
  40527e:	f000 fcf9 	bl	405c74 <memmove>
  405282:	68a2      	ldr	r2, [r4, #8]
  405284:	6823      	ldr	r3, [r4, #0]
  405286:	eba2 020b 	sub.w	r2, r2, fp
  40528a:	445b      	add	r3, fp
  40528c:	60a2      	str	r2, [r4, #8]
  40528e:	6023      	str	r3, [r4, #0]
  405290:	e7af      	b.n	4051f2 <__sfvwrite_r+0x152>
  405292:	6820      	ldr	r0, [r4, #0]
  405294:	46b8      	mov	r8, r7
  405296:	46ba      	mov	sl, r7
  405298:	46bb      	mov	fp, r7
  40529a:	e755      	b.n	405148 <__sfvwrite_r+0xa8>
  40529c:	6962      	ldr	r2, [r4, #20]
  40529e:	6820      	ldr	r0, [r4, #0]
  4052a0:	6921      	ldr	r1, [r4, #16]
  4052a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4052a6:	eba0 0a01 	sub.w	sl, r0, r1
  4052aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4052ae:	f10a 0001 	add.w	r0, sl, #1
  4052b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4052b6:	4438      	add	r0, r7
  4052b8:	4540      	cmp	r0, r8
  4052ba:	4642      	mov	r2, r8
  4052bc:	bf84      	itt	hi
  4052be:	4680      	movhi	r8, r0
  4052c0:	4642      	movhi	r2, r8
  4052c2:	055b      	lsls	r3, r3, #21
  4052c4:	d544      	bpl.n	405350 <__sfvwrite_r+0x2b0>
  4052c6:	4611      	mov	r1, r2
  4052c8:	9800      	ldr	r0, [sp, #0]
  4052ca:	f000 f921 	bl	405510 <_malloc_r>
  4052ce:	4683      	mov	fp, r0
  4052d0:	2800      	cmp	r0, #0
  4052d2:	d055      	beq.n	405380 <__sfvwrite_r+0x2e0>
  4052d4:	4652      	mov	r2, sl
  4052d6:	6921      	ldr	r1, [r4, #16]
  4052d8:	f000 fc32 	bl	405b40 <memcpy>
  4052dc:	89a3      	ldrh	r3, [r4, #12]
  4052de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4052e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4052e6:	81a3      	strh	r3, [r4, #12]
  4052e8:	eb0b 000a 	add.w	r0, fp, sl
  4052ec:	eba8 030a 	sub.w	r3, r8, sl
  4052f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4052f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4052f8:	6020      	str	r0, [r4, #0]
  4052fa:	60a3      	str	r3, [r4, #8]
  4052fc:	46b8      	mov	r8, r7
  4052fe:	46ba      	mov	sl, r7
  405300:	46bb      	mov	fp, r7
  405302:	e721      	b.n	405148 <__sfvwrite_r+0xa8>
  405304:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405308:	42b9      	cmp	r1, r7
  40530a:	bf28      	it	cs
  40530c:	4639      	movcs	r1, r7
  40530e:	464a      	mov	r2, r9
  405310:	fb91 f1f3 	sdiv	r1, r1, r3
  405314:	9800      	ldr	r0, [sp, #0]
  405316:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405318:	fb03 f301 	mul.w	r3, r3, r1
  40531c:	69e1      	ldr	r1, [r4, #28]
  40531e:	47b0      	blx	r6
  405320:	f1b0 0a00 	subs.w	sl, r0, #0
  405324:	f73f af1b 	bgt.w	40515e <__sfvwrite_r+0xbe>
  405328:	e738      	b.n	40519c <__sfvwrite_r+0xfc>
  40532a:	461a      	mov	r2, r3
  40532c:	4629      	mov	r1, r5
  40532e:	9301      	str	r3, [sp, #4]
  405330:	f000 fca0 	bl	405c74 <memmove>
  405334:	6822      	ldr	r2, [r4, #0]
  405336:	9b01      	ldr	r3, [sp, #4]
  405338:	9800      	ldr	r0, [sp, #0]
  40533a:	441a      	add	r2, r3
  40533c:	6022      	str	r2, [r4, #0]
  40533e:	4621      	mov	r1, r4
  405340:	f7ff fc4a 	bl	404bd8 <_fflush_r>
  405344:	9b01      	ldr	r3, [sp, #4]
  405346:	2800      	cmp	r0, #0
  405348:	f47f af28 	bne.w	40519c <__sfvwrite_r+0xfc>
  40534c:	461f      	mov	r7, r3
  40534e:	e750      	b.n	4051f2 <__sfvwrite_r+0x152>
  405350:	9800      	ldr	r0, [sp, #0]
  405352:	f000 fcff 	bl	405d54 <_realloc_r>
  405356:	4683      	mov	fp, r0
  405358:	2800      	cmp	r0, #0
  40535a:	d1c5      	bne.n	4052e8 <__sfvwrite_r+0x248>
  40535c:	9d00      	ldr	r5, [sp, #0]
  40535e:	6921      	ldr	r1, [r4, #16]
  405360:	4628      	mov	r0, r5
  405362:	f7ff fdb7 	bl	404ed4 <_free_r>
  405366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40536a:	220c      	movs	r2, #12
  40536c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405370:	602a      	str	r2, [r5, #0]
  405372:	e715      	b.n	4051a0 <__sfvwrite_r+0x100>
  405374:	f106 0901 	add.w	r9, r6, #1
  405378:	e722      	b.n	4051c0 <__sfvwrite_r+0x120>
  40537a:	f04f 30ff 	mov.w	r0, #4294967295
  40537e:	e6bf      	b.n	405100 <__sfvwrite_r+0x60>
  405380:	9a00      	ldr	r2, [sp, #0]
  405382:	230c      	movs	r3, #12
  405384:	6013      	str	r3, [r2, #0]
  405386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40538a:	e709      	b.n	4051a0 <__sfvwrite_r+0x100>
  40538c:	7ffffc00 	.word	0x7ffffc00

00405390 <_fwalk_reent>:
  405390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405394:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405398:	d01f      	beq.n	4053da <_fwalk_reent+0x4a>
  40539a:	4688      	mov	r8, r1
  40539c:	4606      	mov	r6, r0
  40539e:	f04f 0900 	mov.w	r9, #0
  4053a2:	687d      	ldr	r5, [r7, #4]
  4053a4:	68bc      	ldr	r4, [r7, #8]
  4053a6:	3d01      	subs	r5, #1
  4053a8:	d411      	bmi.n	4053ce <_fwalk_reent+0x3e>
  4053aa:	89a3      	ldrh	r3, [r4, #12]
  4053ac:	2b01      	cmp	r3, #1
  4053ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4053b2:	d908      	bls.n	4053c6 <_fwalk_reent+0x36>
  4053b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4053b8:	3301      	adds	r3, #1
  4053ba:	4621      	mov	r1, r4
  4053bc:	4630      	mov	r0, r6
  4053be:	d002      	beq.n	4053c6 <_fwalk_reent+0x36>
  4053c0:	47c0      	blx	r8
  4053c2:	ea49 0900 	orr.w	r9, r9, r0
  4053c6:	1c6b      	adds	r3, r5, #1
  4053c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4053cc:	d1ed      	bne.n	4053aa <_fwalk_reent+0x1a>
  4053ce:	683f      	ldr	r7, [r7, #0]
  4053d0:	2f00      	cmp	r7, #0
  4053d2:	d1e6      	bne.n	4053a2 <_fwalk_reent+0x12>
  4053d4:	4648      	mov	r0, r9
  4053d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4053da:	46b9      	mov	r9, r7
  4053dc:	4648      	mov	r0, r9
  4053de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4053e2:	bf00      	nop

004053e4 <__locale_mb_cur_max>:
  4053e4:	4b04      	ldr	r3, [pc, #16]	; (4053f8 <__locale_mb_cur_max+0x14>)
  4053e6:	4a05      	ldr	r2, [pc, #20]	; (4053fc <__locale_mb_cur_max+0x18>)
  4053e8:	681b      	ldr	r3, [r3, #0]
  4053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4053ec:	2b00      	cmp	r3, #0
  4053ee:	bf08      	it	eq
  4053f0:	4613      	moveq	r3, r2
  4053f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4053f6:	4770      	bx	lr
  4053f8:	2000000c 	.word	0x2000000c
  4053fc:	2000043c 	.word	0x2000043c

00405400 <__retarget_lock_init_recursive>:
  405400:	4770      	bx	lr
  405402:	bf00      	nop

00405404 <__retarget_lock_close_recursive>:
  405404:	4770      	bx	lr
  405406:	bf00      	nop

00405408 <__retarget_lock_acquire_recursive>:
  405408:	4770      	bx	lr
  40540a:	bf00      	nop

0040540c <__retarget_lock_release_recursive>:
  40540c:	4770      	bx	lr
  40540e:	bf00      	nop

00405410 <__swhatbuf_r>:
  405410:	b570      	push	{r4, r5, r6, lr}
  405412:	460c      	mov	r4, r1
  405414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405418:	2900      	cmp	r1, #0
  40541a:	b090      	sub	sp, #64	; 0x40
  40541c:	4615      	mov	r5, r2
  40541e:	461e      	mov	r6, r3
  405420:	db14      	blt.n	40544c <__swhatbuf_r+0x3c>
  405422:	aa01      	add	r2, sp, #4
  405424:	f001 f80e 	bl	406444 <_fstat_r>
  405428:	2800      	cmp	r0, #0
  40542a:	db0f      	blt.n	40544c <__swhatbuf_r+0x3c>
  40542c:	9a02      	ldr	r2, [sp, #8]
  40542e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405432:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405436:	fab2 f282 	clz	r2, r2
  40543a:	0952      	lsrs	r2, r2, #5
  40543c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405440:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405444:	6032      	str	r2, [r6, #0]
  405446:	602b      	str	r3, [r5, #0]
  405448:	b010      	add	sp, #64	; 0x40
  40544a:	bd70      	pop	{r4, r5, r6, pc}
  40544c:	89a2      	ldrh	r2, [r4, #12]
  40544e:	2300      	movs	r3, #0
  405450:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405454:	6033      	str	r3, [r6, #0]
  405456:	d004      	beq.n	405462 <__swhatbuf_r+0x52>
  405458:	2240      	movs	r2, #64	; 0x40
  40545a:	4618      	mov	r0, r3
  40545c:	602a      	str	r2, [r5, #0]
  40545e:	b010      	add	sp, #64	; 0x40
  405460:	bd70      	pop	{r4, r5, r6, pc}
  405462:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405466:	602b      	str	r3, [r5, #0]
  405468:	b010      	add	sp, #64	; 0x40
  40546a:	bd70      	pop	{r4, r5, r6, pc}

0040546c <__smakebuf_r>:
  40546c:	898a      	ldrh	r2, [r1, #12]
  40546e:	0792      	lsls	r2, r2, #30
  405470:	460b      	mov	r3, r1
  405472:	d506      	bpl.n	405482 <__smakebuf_r+0x16>
  405474:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405478:	2101      	movs	r1, #1
  40547a:	601a      	str	r2, [r3, #0]
  40547c:	611a      	str	r2, [r3, #16]
  40547e:	6159      	str	r1, [r3, #20]
  405480:	4770      	bx	lr
  405482:	b5f0      	push	{r4, r5, r6, r7, lr}
  405484:	b083      	sub	sp, #12
  405486:	ab01      	add	r3, sp, #4
  405488:	466a      	mov	r2, sp
  40548a:	460c      	mov	r4, r1
  40548c:	4606      	mov	r6, r0
  40548e:	f7ff ffbf 	bl	405410 <__swhatbuf_r>
  405492:	9900      	ldr	r1, [sp, #0]
  405494:	4605      	mov	r5, r0
  405496:	4630      	mov	r0, r6
  405498:	f000 f83a 	bl	405510 <_malloc_r>
  40549c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054a0:	b1d8      	cbz	r0, 4054da <__smakebuf_r+0x6e>
  4054a2:	9a01      	ldr	r2, [sp, #4]
  4054a4:	4f15      	ldr	r7, [pc, #84]	; (4054fc <__smakebuf_r+0x90>)
  4054a6:	9900      	ldr	r1, [sp, #0]
  4054a8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4054ae:	81a3      	strh	r3, [r4, #12]
  4054b0:	6020      	str	r0, [r4, #0]
  4054b2:	6120      	str	r0, [r4, #16]
  4054b4:	6161      	str	r1, [r4, #20]
  4054b6:	b91a      	cbnz	r2, 4054c0 <__smakebuf_r+0x54>
  4054b8:	432b      	orrs	r3, r5
  4054ba:	81a3      	strh	r3, [r4, #12]
  4054bc:	b003      	add	sp, #12
  4054be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4054c0:	4630      	mov	r0, r6
  4054c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4054c6:	f000 ffd1 	bl	40646c <_isatty_r>
  4054ca:	b1a0      	cbz	r0, 4054f6 <__smakebuf_r+0x8a>
  4054cc:	89a3      	ldrh	r3, [r4, #12]
  4054ce:	f023 0303 	bic.w	r3, r3, #3
  4054d2:	f043 0301 	orr.w	r3, r3, #1
  4054d6:	b21b      	sxth	r3, r3
  4054d8:	e7ee      	b.n	4054b8 <__smakebuf_r+0x4c>
  4054da:	059a      	lsls	r2, r3, #22
  4054dc:	d4ee      	bmi.n	4054bc <__smakebuf_r+0x50>
  4054de:	f023 0303 	bic.w	r3, r3, #3
  4054e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4054e6:	f043 0302 	orr.w	r3, r3, #2
  4054ea:	2101      	movs	r1, #1
  4054ec:	81a3      	strh	r3, [r4, #12]
  4054ee:	6022      	str	r2, [r4, #0]
  4054f0:	6122      	str	r2, [r4, #16]
  4054f2:	6161      	str	r1, [r4, #20]
  4054f4:	e7e2      	b.n	4054bc <__smakebuf_r+0x50>
  4054f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054fa:	e7dd      	b.n	4054b8 <__smakebuf_r+0x4c>
  4054fc:	00404c2d 	.word	0x00404c2d

00405500 <malloc>:
  405500:	4b02      	ldr	r3, [pc, #8]	; (40550c <malloc+0xc>)
  405502:	4601      	mov	r1, r0
  405504:	6818      	ldr	r0, [r3, #0]
  405506:	f000 b803 	b.w	405510 <_malloc_r>
  40550a:	bf00      	nop
  40550c:	2000000c 	.word	0x2000000c

00405510 <_malloc_r>:
  405510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405514:	f101 060b 	add.w	r6, r1, #11
  405518:	2e16      	cmp	r6, #22
  40551a:	b083      	sub	sp, #12
  40551c:	4605      	mov	r5, r0
  40551e:	f240 809e 	bls.w	40565e <_malloc_r+0x14e>
  405522:	f036 0607 	bics.w	r6, r6, #7
  405526:	f100 80bd 	bmi.w	4056a4 <_malloc_r+0x194>
  40552a:	42b1      	cmp	r1, r6
  40552c:	f200 80ba 	bhi.w	4056a4 <_malloc_r+0x194>
  405530:	f000 fc04 	bl	405d3c <__malloc_lock>
  405534:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405538:	f0c0 8293 	bcc.w	405a62 <_malloc_r+0x552>
  40553c:	0a73      	lsrs	r3, r6, #9
  40553e:	f000 80b8 	beq.w	4056b2 <_malloc_r+0x1a2>
  405542:	2b04      	cmp	r3, #4
  405544:	f200 8179 	bhi.w	40583a <_malloc_r+0x32a>
  405548:	09b3      	lsrs	r3, r6, #6
  40554a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40554e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405552:	00c3      	lsls	r3, r0, #3
  405554:	4fbf      	ldr	r7, [pc, #764]	; (405854 <_malloc_r+0x344>)
  405556:	443b      	add	r3, r7
  405558:	f1a3 0108 	sub.w	r1, r3, #8
  40555c:	685c      	ldr	r4, [r3, #4]
  40555e:	42a1      	cmp	r1, r4
  405560:	d106      	bne.n	405570 <_malloc_r+0x60>
  405562:	e00c      	b.n	40557e <_malloc_r+0x6e>
  405564:	2a00      	cmp	r2, #0
  405566:	f280 80aa 	bge.w	4056be <_malloc_r+0x1ae>
  40556a:	68e4      	ldr	r4, [r4, #12]
  40556c:	42a1      	cmp	r1, r4
  40556e:	d006      	beq.n	40557e <_malloc_r+0x6e>
  405570:	6863      	ldr	r3, [r4, #4]
  405572:	f023 0303 	bic.w	r3, r3, #3
  405576:	1b9a      	subs	r2, r3, r6
  405578:	2a0f      	cmp	r2, #15
  40557a:	ddf3      	ble.n	405564 <_malloc_r+0x54>
  40557c:	4670      	mov	r0, lr
  40557e:	693c      	ldr	r4, [r7, #16]
  405580:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405868 <_malloc_r+0x358>
  405584:	4574      	cmp	r4, lr
  405586:	f000 81ab 	beq.w	4058e0 <_malloc_r+0x3d0>
  40558a:	6863      	ldr	r3, [r4, #4]
  40558c:	f023 0303 	bic.w	r3, r3, #3
  405590:	1b9a      	subs	r2, r3, r6
  405592:	2a0f      	cmp	r2, #15
  405594:	f300 8190 	bgt.w	4058b8 <_malloc_r+0x3a8>
  405598:	2a00      	cmp	r2, #0
  40559a:	f8c7 e014 	str.w	lr, [r7, #20]
  40559e:	f8c7 e010 	str.w	lr, [r7, #16]
  4055a2:	f280 809d 	bge.w	4056e0 <_malloc_r+0x1d0>
  4055a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4055aa:	f080 8161 	bcs.w	405870 <_malloc_r+0x360>
  4055ae:	08db      	lsrs	r3, r3, #3
  4055b0:	f103 0c01 	add.w	ip, r3, #1
  4055b4:	1099      	asrs	r1, r3, #2
  4055b6:	687a      	ldr	r2, [r7, #4]
  4055b8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4055bc:	f8c4 8008 	str.w	r8, [r4, #8]
  4055c0:	2301      	movs	r3, #1
  4055c2:	408b      	lsls	r3, r1
  4055c4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4055c8:	4313      	orrs	r3, r2
  4055ca:	3908      	subs	r1, #8
  4055cc:	60e1      	str	r1, [r4, #12]
  4055ce:	607b      	str	r3, [r7, #4]
  4055d0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4055d4:	f8c8 400c 	str.w	r4, [r8, #12]
  4055d8:	1082      	asrs	r2, r0, #2
  4055da:	2401      	movs	r4, #1
  4055dc:	4094      	lsls	r4, r2
  4055de:	429c      	cmp	r4, r3
  4055e0:	f200 808b 	bhi.w	4056fa <_malloc_r+0x1ea>
  4055e4:	421c      	tst	r4, r3
  4055e6:	d106      	bne.n	4055f6 <_malloc_r+0xe6>
  4055e8:	f020 0003 	bic.w	r0, r0, #3
  4055ec:	0064      	lsls	r4, r4, #1
  4055ee:	421c      	tst	r4, r3
  4055f0:	f100 0004 	add.w	r0, r0, #4
  4055f4:	d0fa      	beq.n	4055ec <_malloc_r+0xdc>
  4055f6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4055fa:	46cc      	mov	ip, r9
  4055fc:	4680      	mov	r8, r0
  4055fe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405602:	459c      	cmp	ip, r3
  405604:	d107      	bne.n	405616 <_malloc_r+0x106>
  405606:	e16d      	b.n	4058e4 <_malloc_r+0x3d4>
  405608:	2a00      	cmp	r2, #0
  40560a:	f280 817b 	bge.w	405904 <_malloc_r+0x3f4>
  40560e:	68db      	ldr	r3, [r3, #12]
  405610:	459c      	cmp	ip, r3
  405612:	f000 8167 	beq.w	4058e4 <_malloc_r+0x3d4>
  405616:	6859      	ldr	r1, [r3, #4]
  405618:	f021 0103 	bic.w	r1, r1, #3
  40561c:	1b8a      	subs	r2, r1, r6
  40561e:	2a0f      	cmp	r2, #15
  405620:	ddf2      	ble.n	405608 <_malloc_r+0xf8>
  405622:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405626:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40562a:	9300      	str	r3, [sp, #0]
  40562c:	199c      	adds	r4, r3, r6
  40562e:	4628      	mov	r0, r5
  405630:	f046 0601 	orr.w	r6, r6, #1
  405634:	f042 0501 	orr.w	r5, r2, #1
  405638:	605e      	str	r6, [r3, #4]
  40563a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40563e:	f8cc 8008 	str.w	r8, [ip, #8]
  405642:	617c      	str	r4, [r7, #20]
  405644:	613c      	str	r4, [r7, #16]
  405646:	f8c4 e00c 	str.w	lr, [r4, #12]
  40564a:	f8c4 e008 	str.w	lr, [r4, #8]
  40564e:	6065      	str	r5, [r4, #4]
  405650:	505a      	str	r2, [r3, r1]
  405652:	f000 fb79 	bl	405d48 <__malloc_unlock>
  405656:	9b00      	ldr	r3, [sp, #0]
  405658:	f103 0408 	add.w	r4, r3, #8
  40565c:	e01e      	b.n	40569c <_malloc_r+0x18c>
  40565e:	2910      	cmp	r1, #16
  405660:	d820      	bhi.n	4056a4 <_malloc_r+0x194>
  405662:	f000 fb6b 	bl	405d3c <__malloc_lock>
  405666:	2610      	movs	r6, #16
  405668:	2318      	movs	r3, #24
  40566a:	2002      	movs	r0, #2
  40566c:	4f79      	ldr	r7, [pc, #484]	; (405854 <_malloc_r+0x344>)
  40566e:	443b      	add	r3, r7
  405670:	f1a3 0208 	sub.w	r2, r3, #8
  405674:	685c      	ldr	r4, [r3, #4]
  405676:	4294      	cmp	r4, r2
  405678:	f000 813d 	beq.w	4058f6 <_malloc_r+0x3e6>
  40567c:	6863      	ldr	r3, [r4, #4]
  40567e:	68e1      	ldr	r1, [r4, #12]
  405680:	68a6      	ldr	r6, [r4, #8]
  405682:	f023 0303 	bic.w	r3, r3, #3
  405686:	4423      	add	r3, r4
  405688:	4628      	mov	r0, r5
  40568a:	685a      	ldr	r2, [r3, #4]
  40568c:	60f1      	str	r1, [r6, #12]
  40568e:	f042 0201 	orr.w	r2, r2, #1
  405692:	608e      	str	r6, [r1, #8]
  405694:	605a      	str	r2, [r3, #4]
  405696:	f000 fb57 	bl	405d48 <__malloc_unlock>
  40569a:	3408      	adds	r4, #8
  40569c:	4620      	mov	r0, r4
  40569e:	b003      	add	sp, #12
  4056a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056a4:	2400      	movs	r4, #0
  4056a6:	230c      	movs	r3, #12
  4056a8:	4620      	mov	r0, r4
  4056aa:	602b      	str	r3, [r5, #0]
  4056ac:	b003      	add	sp, #12
  4056ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056b2:	2040      	movs	r0, #64	; 0x40
  4056b4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4056b8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4056bc:	e74a      	b.n	405554 <_malloc_r+0x44>
  4056be:	4423      	add	r3, r4
  4056c0:	68e1      	ldr	r1, [r4, #12]
  4056c2:	685a      	ldr	r2, [r3, #4]
  4056c4:	68a6      	ldr	r6, [r4, #8]
  4056c6:	f042 0201 	orr.w	r2, r2, #1
  4056ca:	60f1      	str	r1, [r6, #12]
  4056cc:	4628      	mov	r0, r5
  4056ce:	608e      	str	r6, [r1, #8]
  4056d0:	605a      	str	r2, [r3, #4]
  4056d2:	f000 fb39 	bl	405d48 <__malloc_unlock>
  4056d6:	3408      	adds	r4, #8
  4056d8:	4620      	mov	r0, r4
  4056da:	b003      	add	sp, #12
  4056dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056e0:	4423      	add	r3, r4
  4056e2:	4628      	mov	r0, r5
  4056e4:	685a      	ldr	r2, [r3, #4]
  4056e6:	f042 0201 	orr.w	r2, r2, #1
  4056ea:	605a      	str	r2, [r3, #4]
  4056ec:	f000 fb2c 	bl	405d48 <__malloc_unlock>
  4056f0:	3408      	adds	r4, #8
  4056f2:	4620      	mov	r0, r4
  4056f4:	b003      	add	sp, #12
  4056f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056fa:	68bc      	ldr	r4, [r7, #8]
  4056fc:	6863      	ldr	r3, [r4, #4]
  4056fe:	f023 0803 	bic.w	r8, r3, #3
  405702:	45b0      	cmp	r8, r6
  405704:	d304      	bcc.n	405710 <_malloc_r+0x200>
  405706:	eba8 0306 	sub.w	r3, r8, r6
  40570a:	2b0f      	cmp	r3, #15
  40570c:	f300 8085 	bgt.w	40581a <_malloc_r+0x30a>
  405710:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40586c <_malloc_r+0x35c>
  405714:	4b50      	ldr	r3, [pc, #320]	; (405858 <_malloc_r+0x348>)
  405716:	f8d9 2000 	ldr.w	r2, [r9]
  40571a:	681b      	ldr	r3, [r3, #0]
  40571c:	3201      	adds	r2, #1
  40571e:	4433      	add	r3, r6
  405720:	eb04 0a08 	add.w	sl, r4, r8
  405724:	f000 8155 	beq.w	4059d2 <_malloc_r+0x4c2>
  405728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40572c:	330f      	adds	r3, #15
  40572e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405732:	f02b 0b0f 	bic.w	fp, fp, #15
  405736:	4659      	mov	r1, fp
  405738:	4628      	mov	r0, r5
  40573a:	f000 fcb1 	bl	4060a0 <_sbrk_r>
  40573e:	1c41      	adds	r1, r0, #1
  405740:	4602      	mov	r2, r0
  405742:	f000 80fc 	beq.w	40593e <_malloc_r+0x42e>
  405746:	4582      	cmp	sl, r0
  405748:	f200 80f7 	bhi.w	40593a <_malloc_r+0x42a>
  40574c:	4b43      	ldr	r3, [pc, #268]	; (40585c <_malloc_r+0x34c>)
  40574e:	6819      	ldr	r1, [r3, #0]
  405750:	4459      	add	r1, fp
  405752:	6019      	str	r1, [r3, #0]
  405754:	f000 814d 	beq.w	4059f2 <_malloc_r+0x4e2>
  405758:	f8d9 0000 	ldr.w	r0, [r9]
  40575c:	3001      	adds	r0, #1
  40575e:	bf1b      	ittet	ne
  405760:	eba2 0a0a 	subne.w	sl, r2, sl
  405764:	4451      	addne	r1, sl
  405766:	f8c9 2000 	streq.w	r2, [r9]
  40576a:	6019      	strne	r1, [r3, #0]
  40576c:	f012 0107 	ands.w	r1, r2, #7
  405770:	f000 8115 	beq.w	40599e <_malloc_r+0x48e>
  405774:	f1c1 0008 	rsb	r0, r1, #8
  405778:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40577c:	4402      	add	r2, r0
  40577e:	3108      	adds	r1, #8
  405780:	eb02 090b 	add.w	r9, r2, fp
  405784:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405788:	eba1 0909 	sub.w	r9, r1, r9
  40578c:	4649      	mov	r1, r9
  40578e:	4628      	mov	r0, r5
  405790:	9301      	str	r3, [sp, #4]
  405792:	9200      	str	r2, [sp, #0]
  405794:	f000 fc84 	bl	4060a0 <_sbrk_r>
  405798:	1c43      	adds	r3, r0, #1
  40579a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40579e:	f000 8143 	beq.w	405a28 <_malloc_r+0x518>
  4057a2:	1a80      	subs	r0, r0, r2
  4057a4:	4448      	add	r0, r9
  4057a6:	f040 0001 	orr.w	r0, r0, #1
  4057aa:	6819      	ldr	r1, [r3, #0]
  4057ac:	60ba      	str	r2, [r7, #8]
  4057ae:	4449      	add	r1, r9
  4057b0:	42bc      	cmp	r4, r7
  4057b2:	6050      	str	r0, [r2, #4]
  4057b4:	6019      	str	r1, [r3, #0]
  4057b6:	d017      	beq.n	4057e8 <_malloc_r+0x2d8>
  4057b8:	f1b8 0f0f 	cmp.w	r8, #15
  4057bc:	f240 80fb 	bls.w	4059b6 <_malloc_r+0x4a6>
  4057c0:	6860      	ldr	r0, [r4, #4]
  4057c2:	f1a8 020c 	sub.w	r2, r8, #12
  4057c6:	f022 0207 	bic.w	r2, r2, #7
  4057ca:	eb04 0e02 	add.w	lr, r4, r2
  4057ce:	f000 0001 	and.w	r0, r0, #1
  4057d2:	f04f 0c05 	mov.w	ip, #5
  4057d6:	4310      	orrs	r0, r2
  4057d8:	2a0f      	cmp	r2, #15
  4057da:	6060      	str	r0, [r4, #4]
  4057dc:	f8ce c004 	str.w	ip, [lr, #4]
  4057e0:	f8ce c008 	str.w	ip, [lr, #8]
  4057e4:	f200 8117 	bhi.w	405a16 <_malloc_r+0x506>
  4057e8:	4b1d      	ldr	r3, [pc, #116]	; (405860 <_malloc_r+0x350>)
  4057ea:	68bc      	ldr	r4, [r7, #8]
  4057ec:	681a      	ldr	r2, [r3, #0]
  4057ee:	4291      	cmp	r1, r2
  4057f0:	bf88      	it	hi
  4057f2:	6019      	strhi	r1, [r3, #0]
  4057f4:	4b1b      	ldr	r3, [pc, #108]	; (405864 <_malloc_r+0x354>)
  4057f6:	681a      	ldr	r2, [r3, #0]
  4057f8:	4291      	cmp	r1, r2
  4057fa:	6862      	ldr	r2, [r4, #4]
  4057fc:	bf88      	it	hi
  4057fe:	6019      	strhi	r1, [r3, #0]
  405800:	f022 0203 	bic.w	r2, r2, #3
  405804:	4296      	cmp	r6, r2
  405806:	eba2 0306 	sub.w	r3, r2, r6
  40580a:	d801      	bhi.n	405810 <_malloc_r+0x300>
  40580c:	2b0f      	cmp	r3, #15
  40580e:	dc04      	bgt.n	40581a <_malloc_r+0x30a>
  405810:	4628      	mov	r0, r5
  405812:	f000 fa99 	bl	405d48 <__malloc_unlock>
  405816:	2400      	movs	r4, #0
  405818:	e740      	b.n	40569c <_malloc_r+0x18c>
  40581a:	19a2      	adds	r2, r4, r6
  40581c:	f043 0301 	orr.w	r3, r3, #1
  405820:	f046 0601 	orr.w	r6, r6, #1
  405824:	6066      	str	r6, [r4, #4]
  405826:	4628      	mov	r0, r5
  405828:	60ba      	str	r2, [r7, #8]
  40582a:	6053      	str	r3, [r2, #4]
  40582c:	f000 fa8c 	bl	405d48 <__malloc_unlock>
  405830:	3408      	adds	r4, #8
  405832:	4620      	mov	r0, r4
  405834:	b003      	add	sp, #12
  405836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40583a:	2b14      	cmp	r3, #20
  40583c:	d971      	bls.n	405922 <_malloc_r+0x412>
  40583e:	2b54      	cmp	r3, #84	; 0x54
  405840:	f200 80a3 	bhi.w	40598a <_malloc_r+0x47a>
  405844:	0b33      	lsrs	r3, r6, #12
  405846:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40584a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40584e:	00c3      	lsls	r3, r0, #3
  405850:	e680      	b.n	405554 <_malloc_r+0x44>
  405852:	bf00      	nop
  405854:	200005a8 	.word	0x200005a8
  405858:	20008d14 	.word	0x20008d14
  40585c:	20008ce4 	.word	0x20008ce4
  405860:	20008d0c 	.word	0x20008d0c
  405864:	20008d10 	.word	0x20008d10
  405868:	200005b0 	.word	0x200005b0
  40586c:	200009b0 	.word	0x200009b0
  405870:	0a5a      	lsrs	r2, r3, #9
  405872:	2a04      	cmp	r2, #4
  405874:	d95b      	bls.n	40592e <_malloc_r+0x41e>
  405876:	2a14      	cmp	r2, #20
  405878:	f200 80ae 	bhi.w	4059d8 <_malloc_r+0x4c8>
  40587c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405880:	00c9      	lsls	r1, r1, #3
  405882:	325b      	adds	r2, #91	; 0x5b
  405884:	eb07 0c01 	add.w	ip, r7, r1
  405888:	5879      	ldr	r1, [r7, r1]
  40588a:	f1ac 0c08 	sub.w	ip, ip, #8
  40588e:	458c      	cmp	ip, r1
  405890:	f000 8088 	beq.w	4059a4 <_malloc_r+0x494>
  405894:	684a      	ldr	r2, [r1, #4]
  405896:	f022 0203 	bic.w	r2, r2, #3
  40589a:	4293      	cmp	r3, r2
  40589c:	d273      	bcs.n	405986 <_malloc_r+0x476>
  40589e:	6889      	ldr	r1, [r1, #8]
  4058a0:	458c      	cmp	ip, r1
  4058a2:	d1f7      	bne.n	405894 <_malloc_r+0x384>
  4058a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4058a8:	687b      	ldr	r3, [r7, #4]
  4058aa:	60e2      	str	r2, [r4, #12]
  4058ac:	f8c4 c008 	str.w	ip, [r4, #8]
  4058b0:	6094      	str	r4, [r2, #8]
  4058b2:	f8cc 400c 	str.w	r4, [ip, #12]
  4058b6:	e68f      	b.n	4055d8 <_malloc_r+0xc8>
  4058b8:	19a1      	adds	r1, r4, r6
  4058ba:	f046 0c01 	orr.w	ip, r6, #1
  4058be:	f042 0601 	orr.w	r6, r2, #1
  4058c2:	f8c4 c004 	str.w	ip, [r4, #4]
  4058c6:	4628      	mov	r0, r5
  4058c8:	6179      	str	r1, [r7, #20]
  4058ca:	6139      	str	r1, [r7, #16]
  4058cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  4058d0:	f8c1 e008 	str.w	lr, [r1, #8]
  4058d4:	604e      	str	r6, [r1, #4]
  4058d6:	50e2      	str	r2, [r4, r3]
  4058d8:	f000 fa36 	bl	405d48 <__malloc_unlock>
  4058dc:	3408      	adds	r4, #8
  4058de:	e6dd      	b.n	40569c <_malloc_r+0x18c>
  4058e0:	687b      	ldr	r3, [r7, #4]
  4058e2:	e679      	b.n	4055d8 <_malloc_r+0xc8>
  4058e4:	f108 0801 	add.w	r8, r8, #1
  4058e8:	f018 0f03 	tst.w	r8, #3
  4058ec:	f10c 0c08 	add.w	ip, ip, #8
  4058f0:	f47f ae85 	bne.w	4055fe <_malloc_r+0xee>
  4058f4:	e02d      	b.n	405952 <_malloc_r+0x442>
  4058f6:	68dc      	ldr	r4, [r3, #12]
  4058f8:	42a3      	cmp	r3, r4
  4058fa:	bf08      	it	eq
  4058fc:	3002      	addeq	r0, #2
  4058fe:	f43f ae3e 	beq.w	40557e <_malloc_r+0x6e>
  405902:	e6bb      	b.n	40567c <_malloc_r+0x16c>
  405904:	4419      	add	r1, r3
  405906:	461c      	mov	r4, r3
  405908:	684a      	ldr	r2, [r1, #4]
  40590a:	68db      	ldr	r3, [r3, #12]
  40590c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405910:	f042 0201 	orr.w	r2, r2, #1
  405914:	604a      	str	r2, [r1, #4]
  405916:	4628      	mov	r0, r5
  405918:	60f3      	str	r3, [r6, #12]
  40591a:	609e      	str	r6, [r3, #8]
  40591c:	f000 fa14 	bl	405d48 <__malloc_unlock>
  405920:	e6bc      	b.n	40569c <_malloc_r+0x18c>
  405922:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405926:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40592a:	00c3      	lsls	r3, r0, #3
  40592c:	e612      	b.n	405554 <_malloc_r+0x44>
  40592e:	099a      	lsrs	r2, r3, #6
  405930:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405934:	00c9      	lsls	r1, r1, #3
  405936:	3238      	adds	r2, #56	; 0x38
  405938:	e7a4      	b.n	405884 <_malloc_r+0x374>
  40593a:	42bc      	cmp	r4, r7
  40593c:	d054      	beq.n	4059e8 <_malloc_r+0x4d8>
  40593e:	68bc      	ldr	r4, [r7, #8]
  405940:	6862      	ldr	r2, [r4, #4]
  405942:	f022 0203 	bic.w	r2, r2, #3
  405946:	e75d      	b.n	405804 <_malloc_r+0x2f4>
  405948:	f859 3908 	ldr.w	r3, [r9], #-8
  40594c:	4599      	cmp	r9, r3
  40594e:	f040 8086 	bne.w	405a5e <_malloc_r+0x54e>
  405952:	f010 0f03 	tst.w	r0, #3
  405956:	f100 30ff 	add.w	r0, r0, #4294967295
  40595a:	d1f5      	bne.n	405948 <_malloc_r+0x438>
  40595c:	687b      	ldr	r3, [r7, #4]
  40595e:	ea23 0304 	bic.w	r3, r3, r4
  405962:	607b      	str	r3, [r7, #4]
  405964:	0064      	lsls	r4, r4, #1
  405966:	429c      	cmp	r4, r3
  405968:	f63f aec7 	bhi.w	4056fa <_malloc_r+0x1ea>
  40596c:	2c00      	cmp	r4, #0
  40596e:	f43f aec4 	beq.w	4056fa <_malloc_r+0x1ea>
  405972:	421c      	tst	r4, r3
  405974:	4640      	mov	r0, r8
  405976:	f47f ae3e 	bne.w	4055f6 <_malloc_r+0xe6>
  40597a:	0064      	lsls	r4, r4, #1
  40597c:	421c      	tst	r4, r3
  40597e:	f100 0004 	add.w	r0, r0, #4
  405982:	d0fa      	beq.n	40597a <_malloc_r+0x46a>
  405984:	e637      	b.n	4055f6 <_malloc_r+0xe6>
  405986:	468c      	mov	ip, r1
  405988:	e78c      	b.n	4058a4 <_malloc_r+0x394>
  40598a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40598e:	d815      	bhi.n	4059bc <_malloc_r+0x4ac>
  405990:	0bf3      	lsrs	r3, r6, #15
  405992:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405996:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40599a:	00c3      	lsls	r3, r0, #3
  40599c:	e5da      	b.n	405554 <_malloc_r+0x44>
  40599e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4059a2:	e6ed      	b.n	405780 <_malloc_r+0x270>
  4059a4:	687b      	ldr	r3, [r7, #4]
  4059a6:	1092      	asrs	r2, r2, #2
  4059a8:	2101      	movs	r1, #1
  4059aa:	fa01 f202 	lsl.w	r2, r1, r2
  4059ae:	4313      	orrs	r3, r2
  4059b0:	607b      	str	r3, [r7, #4]
  4059b2:	4662      	mov	r2, ip
  4059b4:	e779      	b.n	4058aa <_malloc_r+0x39a>
  4059b6:	2301      	movs	r3, #1
  4059b8:	6053      	str	r3, [r2, #4]
  4059ba:	e729      	b.n	405810 <_malloc_r+0x300>
  4059bc:	f240 5254 	movw	r2, #1364	; 0x554
  4059c0:	4293      	cmp	r3, r2
  4059c2:	d822      	bhi.n	405a0a <_malloc_r+0x4fa>
  4059c4:	0cb3      	lsrs	r3, r6, #18
  4059c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4059ca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4059ce:	00c3      	lsls	r3, r0, #3
  4059d0:	e5c0      	b.n	405554 <_malloc_r+0x44>
  4059d2:	f103 0b10 	add.w	fp, r3, #16
  4059d6:	e6ae      	b.n	405736 <_malloc_r+0x226>
  4059d8:	2a54      	cmp	r2, #84	; 0x54
  4059da:	d829      	bhi.n	405a30 <_malloc_r+0x520>
  4059dc:	0b1a      	lsrs	r2, r3, #12
  4059de:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4059e2:	00c9      	lsls	r1, r1, #3
  4059e4:	326e      	adds	r2, #110	; 0x6e
  4059e6:	e74d      	b.n	405884 <_malloc_r+0x374>
  4059e8:	4b20      	ldr	r3, [pc, #128]	; (405a6c <_malloc_r+0x55c>)
  4059ea:	6819      	ldr	r1, [r3, #0]
  4059ec:	4459      	add	r1, fp
  4059ee:	6019      	str	r1, [r3, #0]
  4059f0:	e6b2      	b.n	405758 <_malloc_r+0x248>
  4059f2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4059f6:	2800      	cmp	r0, #0
  4059f8:	f47f aeae 	bne.w	405758 <_malloc_r+0x248>
  4059fc:	eb08 030b 	add.w	r3, r8, fp
  405a00:	68ba      	ldr	r2, [r7, #8]
  405a02:	f043 0301 	orr.w	r3, r3, #1
  405a06:	6053      	str	r3, [r2, #4]
  405a08:	e6ee      	b.n	4057e8 <_malloc_r+0x2d8>
  405a0a:	207f      	movs	r0, #127	; 0x7f
  405a0c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405a10:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405a14:	e59e      	b.n	405554 <_malloc_r+0x44>
  405a16:	f104 0108 	add.w	r1, r4, #8
  405a1a:	4628      	mov	r0, r5
  405a1c:	9300      	str	r3, [sp, #0]
  405a1e:	f7ff fa59 	bl	404ed4 <_free_r>
  405a22:	9b00      	ldr	r3, [sp, #0]
  405a24:	6819      	ldr	r1, [r3, #0]
  405a26:	e6df      	b.n	4057e8 <_malloc_r+0x2d8>
  405a28:	2001      	movs	r0, #1
  405a2a:	f04f 0900 	mov.w	r9, #0
  405a2e:	e6bc      	b.n	4057aa <_malloc_r+0x29a>
  405a30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405a34:	d805      	bhi.n	405a42 <_malloc_r+0x532>
  405a36:	0bda      	lsrs	r2, r3, #15
  405a38:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405a3c:	00c9      	lsls	r1, r1, #3
  405a3e:	3277      	adds	r2, #119	; 0x77
  405a40:	e720      	b.n	405884 <_malloc_r+0x374>
  405a42:	f240 5154 	movw	r1, #1364	; 0x554
  405a46:	428a      	cmp	r2, r1
  405a48:	d805      	bhi.n	405a56 <_malloc_r+0x546>
  405a4a:	0c9a      	lsrs	r2, r3, #18
  405a4c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405a50:	00c9      	lsls	r1, r1, #3
  405a52:	327c      	adds	r2, #124	; 0x7c
  405a54:	e716      	b.n	405884 <_malloc_r+0x374>
  405a56:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405a5a:	227e      	movs	r2, #126	; 0x7e
  405a5c:	e712      	b.n	405884 <_malloc_r+0x374>
  405a5e:	687b      	ldr	r3, [r7, #4]
  405a60:	e780      	b.n	405964 <_malloc_r+0x454>
  405a62:	08f0      	lsrs	r0, r6, #3
  405a64:	f106 0308 	add.w	r3, r6, #8
  405a68:	e600      	b.n	40566c <_malloc_r+0x15c>
  405a6a:	bf00      	nop
  405a6c:	20008ce4 	.word	0x20008ce4

00405a70 <__ascii_mbtowc>:
  405a70:	b082      	sub	sp, #8
  405a72:	b149      	cbz	r1, 405a88 <__ascii_mbtowc+0x18>
  405a74:	b15a      	cbz	r2, 405a8e <__ascii_mbtowc+0x1e>
  405a76:	b16b      	cbz	r3, 405a94 <__ascii_mbtowc+0x24>
  405a78:	7813      	ldrb	r3, [r2, #0]
  405a7a:	600b      	str	r3, [r1, #0]
  405a7c:	7812      	ldrb	r2, [r2, #0]
  405a7e:	1c10      	adds	r0, r2, #0
  405a80:	bf18      	it	ne
  405a82:	2001      	movne	r0, #1
  405a84:	b002      	add	sp, #8
  405a86:	4770      	bx	lr
  405a88:	a901      	add	r1, sp, #4
  405a8a:	2a00      	cmp	r2, #0
  405a8c:	d1f3      	bne.n	405a76 <__ascii_mbtowc+0x6>
  405a8e:	4610      	mov	r0, r2
  405a90:	b002      	add	sp, #8
  405a92:	4770      	bx	lr
  405a94:	f06f 0001 	mvn.w	r0, #1
  405a98:	e7f4      	b.n	405a84 <__ascii_mbtowc+0x14>
  405a9a:	bf00      	nop
  405a9c:	0000      	movs	r0, r0
	...

00405aa0 <memchr>:
  405aa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405aa4:	2a10      	cmp	r2, #16
  405aa6:	db2b      	blt.n	405b00 <memchr+0x60>
  405aa8:	f010 0f07 	tst.w	r0, #7
  405aac:	d008      	beq.n	405ac0 <memchr+0x20>
  405aae:	f810 3b01 	ldrb.w	r3, [r0], #1
  405ab2:	3a01      	subs	r2, #1
  405ab4:	428b      	cmp	r3, r1
  405ab6:	d02d      	beq.n	405b14 <memchr+0x74>
  405ab8:	f010 0f07 	tst.w	r0, #7
  405abc:	b342      	cbz	r2, 405b10 <memchr+0x70>
  405abe:	d1f6      	bne.n	405aae <memchr+0xe>
  405ac0:	b4f0      	push	{r4, r5, r6, r7}
  405ac2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405ac6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405aca:	f022 0407 	bic.w	r4, r2, #7
  405ace:	f07f 0700 	mvns.w	r7, #0
  405ad2:	2300      	movs	r3, #0
  405ad4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405ad8:	3c08      	subs	r4, #8
  405ada:	ea85 0501 	eor.w	r5, r5, r1
  405ade:	ea86 0601 	eor.w	r6, r6, r1
  405ae2:	fa85 f547 	uadd8	r5, r5, r7
  405ae6:	faa3 f587 	sel	r5, r3, r7
  405aea:	fa86 f647 	uadd8	r6, r6, r7
  405aee:	faa5 f687 	sel	r6, r5, r7
  405af2:	b98e      	cbnz	r6, 405b18 <memchr+0x78>
  405af4:	d1ee      	bne.n	405ad4 <memchr+0x34>
  405af6:	bcf0      	pop	{r4, r5, r6, r7}
  405af8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405afc:	f002 0207 	and.w	r2, r2, #7
  405b00:	b132      	cbz	r2, 405b10 <memchr+0x70>
  405b02:	f810 3b01 	ldrb.w	r3, [r0], #1
  405b06:	3a01      	subs	r2, #1
  405b08:	ea83 0301 	eor.w	r3, r3, r1
  405b0c:	b113      	cbz	r3, 405b14 <memchr+0x74>
  405b0e:	d1f8      	bne.n	405b02 <memchr+0x62>
  405b10:	2000      	movs	r0, #0
  405b12:	4770      	bx	lr
  405b14:	3801      	subs	r0, #1
  405b16:	4770      	bx	lr
  405b18:	2d00      	cmp	r5, #0
  405b1a:	bf06      	itte	eq
  405b1c:	4635      	moveq	r5, r6
  405b1e:	3803      	subeq	r0, #3
  405b20:	3807      	subne	r0, #7
  405b22:	f015 0f01 	tst.w	r5, #1
  405b26:	d107      	bne.n	405b38 <memchr+0x98>
  405b28:	3001      	adds	r0, #1
  405b2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405b2e:	bf02      	ittt	eq
  405b30:	3001      	addeq	r0, #1
  405b32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405b36:	3001      	addeq	r0, #1
  405b38:	bcf0      	pop	{r4, r5, r6, r7}
  405b3a:	3801      	subs	r0, #1
  405b3c:	4770      	bx	lr
  405b3e:	bf00      	nop

00405b40 <memcpy>:
  405b40:	4684      	mov	ip, r0
  405b42:	ea41 0300 	orr.w	r3, r1, r0
  405b46:	f013 0303 	ands.w	r3, r3, #3
  405b4a:	d16d      	bne.n	405c28 <memcpy+0xe8>
  405b4c:	3a40      	subs	r2, #64	; 0x40
  405b4e:	d341      	bcc.n	405bd4 <memcpy+0x94>
  405b50:	f851 3b04 	ldr.w	r3, [r1], #4
  405b54:	f840 3b04 	str.w	r3, [r0], #4
  405b58:	f851 3b04 	ldr.w	r3, [r1], #4
  405b5c:	f840 3b04 	str.w	r3, [r0], #4
  405b60:	f851 3b04 	ldr.w	r3, [r1], #4
  405b64:	f840 3b04 	str.w	r3, [r0], #4
  405b68:	f851 3b04 	ldr.w	r3, [r1], #4
  405b6c:	f840 3b04 	str.w	r3, [r0], #4
  405b70:	f851 3b04 	ldr.w	r3, [r1], #4
  405b74:	f840 3b04 	str.w	r3, [r0], #4
  405b78:	f851 3b04 	ldr.w	r3, [r1], #4
  405b7c:	f840 3b04 	str.w	r3, [r0], #4
  405b80:	f851 3b04 	ldr.w	r3, [r1], #4
  405b84:	f840 3b04 	str.w	r3, [r0], #4
  405b88:	f851 3b04 	ldr.w	r3, [r1], #4
  405b8c:	f840 3b04 	str.w	r3, [r0], #4
  405b90:	f851 3b04 	ldr.w	r3, [r1], #4
  405b94:	f840 3b04 	str.w	r3, [r0], #4
  405b98:	f851 3b04 	ldr.w	r3, [r1], #4
  405b9c:	f840 3b04 	str.w	r3, [r0], #4
  405ba0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ba4:	f840 3b04 	str.w	r3, [r0], #4
  405ba8:	f851 3b04 	ldr.w	r3, [r1], #4
  405bac:	f840 3b04 	str.w	r3, [r0], #4
  405bb0:	f851 3b04 	ldr.w	r3, [r1], #4
  405bb4:	f840 3b04 	str.w	r3, [r0], #4
  405bb8:	f851 3b04 	ldr.w	r3, [r1], #4
  405bbc:	f840 3b04 	str.w	r3, [r0], #4
  405bc0:	f851 3b04 	ldr.w	r3, [r1], #4
  405bc4:	f840 3b04 	str.w	r3, [r0], #4
  405bc8:	f851 3b04 	ldr.w	r3, [r1], #4
  405bcc:	f840 3b04 	str.w	r3, [r0], #4
  405bd0:	3a40      	subs	r2, #64	; 0x40
  405bd2:	d2bd      	bcs.n	405b50 <memcpy+0x10>
  405bd4:	3230      	adds	r2, #48	; 0x30
  405bd6:	d311      	bcc.n	405bfc <memcpy+0xbc>
  405bd8:	f851 3b04 	ldr.w	r3, [r1], #4
  405bdc:	f840 3b04 	str.w	r3, [r0], #4
  405be0:	f851 3b04 	ldr.w	r3, [r1], #4
  405be4:	f840 3b04 	str.w	r3, [r0], #4
  405be8:	f851 3b04 	ldr.w	r3, [r1], #4
  405bec:	f840 3b04 	str.w	r3, [r0], #4
  405bf0:	f851 3b04 	ldr.w	r3, [r1], #4
  405bf4:	f840 3b04 	str.w	r3, [r0], #4
  405bf8:	3a10      	subs	r2, #16
  405bfa:	d2ed      	bcs.n	405bd8 <memcpy+0x98>
  405bfc:	320c      	adds	r2, #12
  405bfe:	d305      	bcc.n	405c0c <memcpy+0xcc>
  405c00:	f851 3b04 	ldr.w	r3, [r1], #4
  405c04:	f840 3b04 	str.w	r3, [r0], #4
  405c08:	3a04      	subs	r2, #4
  405c0a:	d2f9      	bcs.n	405c00 <memcpy+0xc0>
  405c0c:	3204      	adds	r2, #4
  405c0e:	d008      	beq.n	405c22 <memcpy+0xe2>
  405c10:	07d2      	lsls	r2, r2, #31
  405c12:	bf1c      	itt	ne
  405c14:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405c18:	f800 3b01 	strbne.w	r3, [r0], #1
  405c1c:	d301      	bcc.n	405c22 <memcpy+0xe2>
  405c1e:	880b      	ldrh	r3, [r1, #0]
  405c20:	8003      	strh	r3, [r0, #0]
  405c22:	4660      	mov	r0, ip
  405c24:	4770      	bx	lr
  405c26:	bf00      	nop
  405c28:	2a08      	cmp	r2, #8
  405c2a:	d313      	bcc.n	405c54 <memcpy+0x114>
  405c2c:	078b      	lsls	r3, r1, #30
  405c2e:	d08d      	beq.n	405b4c <memcpy+0xc>
  405c30:	f010 0303 	ands.w	r3, r0, #3
  405c34:	d08a      	beq.n	405b4c <memcpy+0xc>
  405c36:	f1c3 0304 	rsb	r3, r3, #4
  405c3a:	1ad2      	subs	r2, r2, r3
  405c3c:	07db      	lsls	r3, r3, #31
  405c3e:	bf1c      	itt	ne
  405c40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405c44:	f800 3b01 	strbne.w	r3, [r0], #1
  405c48:	d380      	bcc.n	405b4c <memcpy+0xc>
  405c4a:	f831 3b02 	ldrh.w	r3, [r1], #2
  405c4e:	f820 3b02 	strh.w	r3, [r0], #2
  405c52:	e77b      	b.n	405b4c <memcpy+0xc>
  405c54:	3a04      	subs	r2, #4
  405c56:	d3d9      	bcc.n	405c0c <memcpy+0xcc>
  405c58:	3a01      	subs	r2, #1
  405c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
  405c5e:	f800 3b01 	strb.w	r3, [r0], #1
  405c62:	d2f9      	bcs.n	405c58 <memcpy+0x118>
  405c64:	780b      	ldrb	r3, [r1, #0]
  405c66:	7003      	strb	r3, [r0, #0]
  405c68:	784b      	ldrb	r3, [r1, #1]
  405c6a:	7043      	strb	r3, [r0, #1]
  405c6c:	788b      	ldrb	r3, [r1, #2]
  405c6e:	7083      	strb	r3, [r0, #2]
  405c70:	4660      	mov	r0, ip
  405c72:	4770      	bx	lr

00405c74 <memmove>:
  405c74:	4288      	cmp	r0, r1
  405c76:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c78:	d90d      	bls.n	405c96 <memmove+0x22>
  405c7a:	188b      	adds	r3, r1, r2
  405c7c:	4298      	cmp	r0, r3
  405c7e:	d20a      	bcs.n	405c96 <memmove+0x22>
  405c80:	1884      	adds	r4, r0, r2
  405c82:	2a00      	cmp	r2, #0
  405c84:	d051      	beq.n	405d2a <memmove+0xb6>
  405c86:	4622      	mov	r2, r4
  405c88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405c8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405c90:	4299      	cmp	r1, r3
  405c92:	d1f9      	bne.n	405c88 <memmove+0x14>
  405c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c96:	2a0f      	cmp	r2, #15
  405c98:	d948      	bls.n	405d2c <memmove+0xb8>
  405c9a:	ea41 0300 	orr.w	r3, r1, r0
  405c9e:	079b      	lsls	r3, r3, #30
  405ca0:	d146      	bne.n	405d30 <memmove+0xbc>
  405ca2:	f100 0410 	add.w	r4, r0, #16
  405ca6:	f101 0310 	add.w	r3, r1, #16
  405caa:	4615      	mov	r5, r2
  405cac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405cb0:	f844 6c10 	str.w	r6, [r4, #-16]
  405cb4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405cb8:	f844 6c0c 	str.w	r6, [r4, #-12]
  405cbc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405cc0:	f844 6c08 	str.w	r6, [r4, #-8]
  405cc4:	3d10      	subs	r5, #16
  405cc6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405cca:	f844 6c04 	str.w	r6, [r4, #-4]
  405cce:	2d0f      	cmp	r5, #15
  405cd0:	f103 0310 	add.w	r3, r3, #16
  405cd4:	f104 0410 	add.w	r4, r4, #16
  405cd8:	d8e8      	bhi.n	405cac <memmove+0x38>
  405cda:	f1a2 0310 	sub.w	r3, r2, #16
  405cde:	f023 030f 	bic.w	r3, r3, #15
  405ce2:	f002 0e0f 	and.w	lr, r2, #15
  405ce6:	3310      	adds	r3, #16
  405ce8:	f1be 0f03 	cmp.w	lr, #3
  405cec:	4419      	add	r1, r3
  405cee:	4403      	add	r3, r0
  405cf0:	d921      	bls.n	405d36 <memmove+0xc2>
  405cf2:	1f1e      	subs	r6, r3, #4
  405cf4:	460d      	mov	r5, r1
  405cf6:	4674      	mov	r4, lr
  405cf8:	3c04      	subs	r4, #4
  405cfa:	f855 7b04 	ldr.w	r7, [r5], #4
  405cfe:	f846 7f04 	str.w	r7, [r6, #4]!
  405d02:	2c03      	cmp	r4, #3
  405d04:	d8f8      	bhi.n	405cf8 <memmove+0x84>
  405d06:	f1ae 0404 	sub.w	r4, lr, #4
  405d0a:	f024 0403 	bic.w	r4, r4, #3
  405d0e:	3404      	adds	r4, #4
  405d10:	4421      	add	r1, r4
  405d12:	4423      	add	r3, r4
  405d14:	f002 0203 	and.w	r2, r2, #3
  405d18:	b162      	cbz	r2, 405d34 <memmove+0xc0>
  405d1a:	3b01      	subs	r3, #1
  405d1c:	440a      	add	r2, r1
  405d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405d22:	f803 4f01 	strb.w	r4, [r3, #1]!
  405d26:	428a      	cmp	r2, r1
  405d28:	d1f9      	bne.n	405d1e <memmove+0xaa>
  405d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d2c:	4603      	mov	r3, r0
  405d2e:	e7f3      	b.n	405d18 <memmove+0xa4>
  405d30:	4603      	mov	r3, r0
  405d32:	e7f2      	b.n	405d1a <memmove+0xa6>
  405d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d36:	4672      	mov	r2, lr
  405d38:	e7ee      	b.n	405d18 <memmove+0xa4>
  405d3a:	bf00      	nop

00405d3c <__malloc_lock>:
  405d3c:	4801      	ldr	r0, [pc, #4]	; (405d44 <__malloc_lock+0x8>)
  405d3e:	f7ff bb63 	b.w	405408 <__retarget_lock_acquire_recursive>
  405d42:	bf00      	nop
  405d44:	20008df8 	.word	0x20008df8

00405d48 <__malloc_unlock>:
  405d48:	4801      	ldr	r0, [pc, #4]	; (405d50 <__malloc_unlock+0x8>)
  405d4a:	f7ff bb5f 	b.w	40540c <__retarget_lock_release_recursive>
  405d4e:	bf00      	nop
  405d50:	20008df8 	.word	0x20008df8

00405d54 <_realloc_r>:
  405d54:	2900      	cmp	r1, #0
  405d56:	f000 8095 	beq.w	405e84 <_realloc_r+0x130>
  405d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d5e:	460d      	mov	r5, r1
  405d60:	4616      	mov	r6, r2
  405d62:	b083      	sub	sp, #12
  405d64:	4680      	mov	r8, r0
  405d66:	f106 070b 	add.w	r7, r6, #11
  405d6a:	f7ff ffe7 	bl	405d3c <__malloc_lock>
  405d6e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405d72:	2f16      	cmp	r7, #22
  405d74:	f02e 0403 	bic.w	r4, lr, #3
  405d78:	f1a5 0908 	sub.w	r9, r5, #8
  405d7c:	d83c      	bhi.n	405df8 <_realloc_r+0xa4>
  405d7e:	2210      	movs	r2, #16
  405d80:	4617      	mov	r7, r2
  405d82:	42be      	cmp	r6, r7
  405d84:	d83d      	bhi.n	405e02 <_realloc_r+0xae>
  405d86:	4294      	cmp	r4, r2
  405d88:	da43      	bge.n	405e12 <_realloc_r+0xbe>
  405d8a:	4bc4      	ldr	r3, [pc, #784]	; (40609c <_realloc_r+0x348>)
  405d8c:	6899      	ldr	r1, [r3, #8]
  405d8e:	eb09 0004 	add.w	r0, r9, r4
  405d92:	4288      	cmp	r0, r1
  405d94:	f000 80b4 	beq.w	405f00 <_realloc_r+0x1ac>
  405d98:	6843      	ldr	r3, [r0, #4]
  405d9a:	f023 0101 	bic.w	r1, r3, #1
  405d9e:	4401      	add	r1, r0
  405da0:	6849      	ldr	r1, [r1, #4]
  405da2:	07c9      	lsls	r1, r1, #31
  405da4:	d54c      	bpl.n	405e40 <_realloc_r+0xec>
  405da6:	f01e 0f01 	tst.w	lr, #1
  405daa:	f000 809b 	beq.w	405ee4 <_realloc_r+0x190>
  405dae:	4631      	mov	r1, r6
  405db0:	4640      	mov	r0, r8
  405db2:	f7ff fbad 	bl	405510 <_malloc_r>
  405db6:	4606      	mov	r6, r0
  405db8:	2800      	cmp	r0, #0
  405dba:	d03a      	beq.n	405e32 <_realloc_r+0xde>
  405dbc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405dc0:	f023 0301 	bic.w	r3, r3, #1
  405dc4:	444b      	add	r3, r9
  405dc6:	f1a0 0208 	sub.w	r2, r0, #8
  405dca:	429a      	cmp	r2, r3
  405dcc:	f000 8121 	beq.w	406012 <_realloc_r+0x2be>
  405dd0:	1f22      	subs	r2, r4, #4
  405dd2:	2a24      	cmp	r2, #36	; 0x24
  405dd4:	f200 8107 	bhi.w	405fe6 <_realloc_r+0x292>
  405dd8:	2a13      	cmp	r2, #19
  405dda:	f200 80db 	bhi.w	405f94 <_realloc_r+0x240>
  405dde:	4603      	mov	r3, r0
  405de0:	462a      	mov	r2, r5
  405de2:	6811      	ldr	r1, [r2, #0]
  405de4:	6019      	str	r1, [r3, #0]
  405de6:	6851      	ldr	r1, [r2, #4]
  405de8:	6059      	str	r1, [r3, #4]
  405dea:	6892      	ldr	r2, [r2, #8]
  405dec:	609a      	str	r2, [r3, #8]
  405dee:	4629      	mov	r1, r5
  405df0:	4640      	mov	r0, r8
  405df2:	f7ff f86f 	bl	404ed4 <_free_r>
  405df6:	e01c      	b.n	405e32 <_realloc_r+0xde>
  405df8:	f027 0707 	bic.w	r7, r7, #7
  405dfc:	2f00      	cmp	r7, #0
  405dfe:	463a      	mov	r2, r7
  405e00:	dabf      	bge.n	405d82 <_realloc_r+0x2e>
  405e02:	2600      	movs	r6, #0
  405e04:	230c      	movs	r3, #12
  405e06:	4630      	mov	r0, r6
  405e08:	f8c8 3000 	str.w	r3, [r8]
  405e0c:	b003      	add	sp, #12
  405e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e12:	462e      	mov	r6, r5
  405e14:	1be3      	subs	r3, r4, r7
  405e16:	2b0f      	cmp	r3, #15
  405e18:	d81e      	bhi.n	405e58 <_realloc_r+0x104>
  405e1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405e1e:	f003 0301 	and.w	r3, r3, #1
  405e22:	4323      	orrs	r3, r4
  405e24:	444c      	add	r4, r9
  405e26:	f8c9 3004 	str.w	r3, [r9, #4]
  405e2a:	6863      	ldr	r3, [r4, #4]
  405e2c:	f043 0301 	orr.w	r3, r3, #1
  405e30:	6063      	str	r3, [r4, #4]
  405e32:	4640      	mov	r0, r8
  405e34:	f7ff ff88 	bl	405d48 <__malloc_unlock>
  405e38:	4630      	mov	r0, r6
  405e3a:	b003      	add	sp, #12
  405e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e40:	f023 0303 	bic.w	r3, r3, #3
  405e44:	18e1      	adds	r1, r4, r3
  405e46:	4291      	cmp	r1, r2
  405e48:	db1f      	blt.n	405e8a <_realloc_r+0x136>
  405e4a:	68c3      	ldr	r3, [r0, #12]
  405e4c:	6882      	ldr	r2, [r0, #8]
  405e4e:	462e      	mov	r6, r5
  405e50:	60d3      	str	r3, [r2, #12]
  405e52:	460c      	mov	r4, r1
  405e54:	609a      	str	r2, [r3, #8]
  405e56:	e7dd      	b.n	405e14 <_realloc_r+0xc0>
  405e58:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405e5c:	eb09 0107 	add.w	r1, r9, r7
  405e60:	f002 0201 	and.w	r2, r2, #1
  405e64:	444c      	add	r4, r9
  405e66:	f043 0301 	orr.w	r3, r3, #1
  405e6a:	4317      	orrs	r7, r2
  405e6c:	f8c9 7004 	str.w	r7, [r9, #4]
  405e70:	604b      	str	r3, [r1, #4]
  405e72:	6863      	ldr	r3, [r4, #4]
  405e74:	f043 0301 	orr.w	r3, r3, #1
  405e78:	3108      	adds	r1, #8
  405e7a:	6063      	str	r3, [r4, #4]
  405e7c:	4640      	mov	r0, r8
  405e7e:	f7ff f829 	bl	404ed4 <_free_r>
  405e82:	e7d6      	b.n	405e32 <_realloc_r+0xde>
  405e84:	4611      	mov	r1, r2
  405e86:	f7ff bb43 	b.w	405510 <_malloc_r>
  405e8a:	f01e 0f01 	tst.w	lr, #1
  405e8e:	d18e      	bne.n	405dae <_realloc_r+0x5a>
  405e90:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405e94:	eba9 0a01 	sub.w	sl, r9, r1
  405e98:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e9c:	f021 0103 	bic.w	r1, r1, #3
  405ea0:	440b      	add	r3, r1
  405ea2:	4423      	add	r3, r4
  405ea4:	4293      	cmp	r3, r2
  405ea6:	db25      	blt.n	405ef4 <_realloc_r+0x1a0>
  405ea8:	68c2      	ldr	r2, [r0, #12]
  405eaa:	6881      	ldr	r1, [r0, #8]
  405eac:	4656      	mov	r6, sl
  405eae:	60ca      	str	r2, [r1, #12]
  405eb0:	6091      	str	r1, [r2, #8]
  405eb2:	f8da 100c 	ldr.w	r1, [sl, #12]
  405eb6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405eba:	1f22      	subs	r2, r4, #4
  405ebc:	2a24      	cmp	r2, #36	; 0x24
  405ebe:	60c1      	str	r1, [r0, #12]
  405ec0:	6088      	str	r0, [r1, #8]
  405ec2:	f200 8094 	bhi.w	405fee <_realloc_r+0x29a>
  405ec6:	2a13      	cmp	r2, #19
  405ec8:	d96f      	bls.n	405faa <_realloc_r+0x256>
  405eca:	6829      	ldr	r1, [r5, #0]
  405ecc:	f8ca 1008 	str.w	r1, [sl, #8]
  405ed0:	6869      	ldr	r1, [r5, #4]
  405ed2:	f8ca 100c 	str.w	r1, [sl, #12]
  405ed6:	2a1b      	cmp	r2, #27
  405ed8:	f200 80a2 	bhi.w	406020 <_realloc_r+0x2cc>
  405edc:	3508      	adds	r5, #8
  405ede:	f10a 0210 	add.w	r2, sl, #16
  405ee2:	e063      	b.n	405fac <_realloc_r+0x258>
  405ee4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405ee8:	eba9 0a03 	sub.w	sl, r9, r3
  405eec:	f8da 1004 	ldr.w	r1, [sl, #4]
  405ef0:	f021 0103 	bic.w	r1, r1, #3
  405ef4:	1863      	adds	r3, r4, r1
  405ef6:	4293      	cmp	r3, r2
  405ef8:	f6ff af59 	blt.w	405dae <_realloc_r+0x5a>
  405efc:	4656      	mov	r6, sl
  405efe:	e7d8      	b.n	405eb2 <_realloc_r+0x15e>
  405f00:	6841      	ldr	r1, [r0, #4]
  405f02:	f021 0b03 	bic.w	fp, r1, #3
  405f06:	44a3      	add	fp, r4
  405f08:	f107 0010 	add.w	r0, r7, #16
  405f0c:	4583      	cmp	fp, r0
  405f0e:	da56      	bge.n	405fbe <_realloc_r+0x26a>
  405f10:	f01e 0f01 	tst.w	lr, #1
  405f14:	f47f af4b 	bne.w	405dae <_realloc_r+0x5a>
  405f18:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405f1c:	eba9 0a01 	sub.w	sl, r9, r1
  405f20:	f8da 1004 	ldr.w	r1, [sl, #4]
  405f24:	f021 0103 	bic.w	r1, r1, #3
  405f28:	448b      	add	fp, r1
  405f2a:	4558      	cmp	r0, fp
  405f2c:	dce2      	bgt.n	405ef4 <_realloc_r+0x1a0>
  405f2e:	4656      	mov	r6, sl
  405f30:	f8da 100c 	ldr.w	r1, [sl, #12]
  405f34:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405f38:	1f22      	subs	r2, r4, #4
  405f3a:	2a24      	cmp	r2, #36	; 0x24
  405f3c:	60c1      	str	r1, [r0, #12]
  405f3e:	6088      	str	r0, [r1, #8]
  405f40:	f200 808f 	bhi.w	406062 <_realloc_r+0x30e>
  405f44:	2a13      	cmp	r2, #19
  405f46:	f240 808a 	bls.w	40605e <_realloc_r+0x30a>
  405f4a:	6829      	ldr	r1, [r5, #0]
  405f4c:	f8ca 1008 	str.w	r1, [sl, #8]
  405f50:	6869      	ldr	r1, [r5, #4]
  405f52:	f8ca 100c 	str.w	r1, [sl, #12]
  405f56:	2a1b      	cmp	r2, #27
  405f58:	f200 808a 	bhi.w	406070 <_realloc_r+0x31c>
  405f5c:	3508      	adds	r5, #8
  405f5e:	f10a 0210 	add.w	r2, sl, #16
  405f62:	6829      	ldr	r1, [r5, #0]
  405f64:	6011      	str	r1, [r2, #0]
  405f66:	6869      	ldr	r1, [r5, #4]
  405f68:	6051      	str	r1, [r2, #4]
  405f6a:	68a9      	ldr	r1, [r5, #8]
  405f6c:	6091      	str	r1, [r2, #8]
  405f6e:	eb0a 0107 	add.w	r1, sl, r7
  405f72:	ebab 0207 	sub.w	r2, fp, r7
  405f76:	f042 0201 	orr.w	r2, r2, #1
  405f7a:	6099      	str	r1, [r3, #8]
  405f7c:	604a      	str	r2, [r1, #4]
  405f7e:	f8da 3004 	ldr.w	r3, [sl, #4]
  405f82:	f003 0301 	and.w	r3, r3, #1
  405f86:	431f      	orrs	r7, r3
  405f88:	4640      	mov	r0, r8
  405f8a:	f8ca 7004 	str.w	r7, [sl, #4]
  405f8e:	f7ff fedb 	bl	405d48 <__malloc_unlock>
  405f92:	e751      	b.n	405e38 <_realloc_r+0xe4>
  405f94:	682b      	ldr	r3, [r5, #0]
  405f96:	6003      	str	r3, [r0, #0]
  405f98:	686b      	ldr	r3, [r5, #4]
  405f9a:	6043      	str	r3, [r0, #4]
  405f9c:	2a1b      	cmp	r2, #27
  405f9e:	d82d      	bhi.n	405ffc <_realloc_r+0x2a8>
  405fa0:	f100 0308 	add.w	r3, r0, #8
  405fa4:	f105 0208 	add.w	r2, r5, #8
  405fa8:	e71b      	b.n	405de2 <_realloc_r+0x8e>
  405faa:	4632      	mov	r2, r6
  405fac:	6829      	ldr	r1, [r5, #0]
  405fae:	6011      	str	r1, [r2, #0]
  405fb0:	6869      	ldr	r1, [r5, #4]
  405fb2:	6051      	str	r1, [r2, #4]
  405fb4:	68a9      	ldr	r1, [r5, #8]
  405fb6:	6091      	str	r1, [r2, #8]
  405fb8:	461c      	mov	r4, r3
  405fba:	46d1      	mov	r9, sl
  405fbc:	e72a      	b.n	405e14 <_realloc_r+0xc0>
  405fbe:	eb09 0107 	add.w	r1, r9, r7
  405fc2:	ebab 0b07 	sub.w	fp, fp, r7
  405fc6:	f04b 0201 	orr.w	r2, fp, #1
  405fca:	6099      	str	r1, [r3, #8]
  405fcc:	604a      	str	r2, [r1, #4]
  405fce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405fd2:	f003 0301 	and.w	r3, r3, #1
  405fd6:	431f      	orrs	r7, r3
  405fd8:	4640      	mov	r0, r8
  405fda:	f845 7c04 	str.w	r7, [r5, #-4]
  405fde:	f7ff feb3 	bl	405d48 <__malloc_unlock>
  405fe2:	462e      	mov	r6, r5
  405fe4:	e728      	b.n	405e38 <_realloc_r+0xe4>
  405fe6:	4629      	mov	r1, r5
  405fe8:	f7ff fe44 	bl	405c74 <memmove>
  405fec:	e6ff      	b.n	405dee <_realloc_r+0x9a>
  405fee:	4629      	mov	r1, r5
  405ff0:	4630      	mov	r0, r6
  405ff2:	461c      	mov	r4, r3
  405ff4:	46d1      	mov	r9, sl
  405ff6:	f7ff fe3d 	bl	405c74 <memmove>
  405ffa:	e70b      	b.n	405e14 <_realloc_r+0xc0>
  405ffc:	68ab      	ldr	r3, [r5, #8]
  405ffe:	6083      	str	r3, [r0, #8]
  406000:	68eb      	ldr	r3, [r5, #12]
  406002:	60c3      	str	r3, [r0, #12]
  406004:	2a24      	cmp	r2, #36	; 0x24
  406006:	d017      	beq.n	406038 <_realloc_r+0x2e4>
  406008:	f100 0310 	add.w	r3, r0, #16
  40600c:	f105 0210 	add.w	r2, r5, #16
  406010:	e6e7      	b.n	405de2 <_realloc_r+0x8e>
  406012:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406016:	f023 0303 	bic.w	r3, r3, #3
  40601a:	441c      	add	r4, r3
  40601c:	462e      	mov	r6, r5
  40601e:	e6f9      	b.n	405e14 <_realloc_r+0xc0>
  406020:	68a9      	ldr	r1, [r5, #8]
  406022:	f8ca 1010 	str.w	r1, [sl, #16]
  406026:	68e9      	ldr	r1, [r5, #12]
  406028:	f8ca 1014 	str.w	r1, [sl, #20]
  40602c:	2a24      	cmp	r2, #36	; 0x24
  40602e:	d00c      	beq.n	40604a <_realloc_r+0x2f6>
  406030:	3510      	adds	r5, #16
  406032:	f10a 0218 	add.w	r2, sl, #24
  406036:	e7b9      	b.n	405fac <_realloc_r+0x258>
  406038:	692b      	ldr	r3, [r5, #16]
  40603a:	6103      	str	r3, [r0, #16]
  40603c:	696b      	ldr	r3, [r5, #20]
  40603e:	6143      	str	r3, [r0, #20]
  406040:	f105 0218 	add.w	r2, r5, #24
  406044:	f100 0318 	add.w	r3, r0, #24
  406048:	e6cb      	b.n	405de2 <_realloc_r+0x8e>
  40604a:	692a      	ldr	r2, [r5, #16]
  40604c:	f8ca 2018 	str.w	r2, [sl, #24]
  406050:	696a      	ldr	r2, [r5, #20]
  406052:	f8ca 201c 	str.w	r2, [sl, #28]
  406056:	3518      	adds	r5, #24
  406058:	f10a 0220 	add.w	r2, sl, #32
  40605c:	e7a6      	b.n	405fac <_realloc_r+0x258>
  40605e:	4632      	mov	r2, r6
  406060:	e77f      	b.n	405f62 <_realloc_r+0x20e>
  406062:	4629      	mov	r1, r5
  406064:	4630      	mov	r0, r6
  406066:	9301      	str	r3, [sp, #4]
  406068:	f7ff fe04 	bl	405c74 <memmove>
  40606c:	9b01      	ldr	r3, [sp, #4]
  40606e:	e77e      	b.n	405f6e <_realloc_r+0x21a>
  406070:	68a9      	ldr	r1, [r5, #8]
  406072:	f8ca 1010 	str.w	r1, [sl, #16]
  406076:	68e9      	ldr	r1, [r5, #12]
  406078:	f8ca 1014 	str.w	r1, [sl, #20]
  40607c:	2a24      	cmp	r2, #36	; 0x24
  40607e:	d003      	beq.n	406088 <_realloc_r+0x334>
  406080:	3510      	adds	r5, #16
  406082:	f10a 0218 	add.w	r2, sl, #24
  406086:	e76c      	b.n	405f62 <_realloc_r+0x20e>
  406088:	692a      	ldr	r2, [r5, #16]
  40608a:	f8ca 2018 	str.w	r2, [sl, #24]
  40608e:	696a      	ldr	r2, [r5, #20]
  406090:	f8ca 201c 	str.w	r2, [sl, #28]
  406094:	3518      	adds	r5, #24
  406096:	f10a 0220 	add.w	r2, sl, #32
  40609a:	e762      	b.n	405f62 <_realloc_r+0x20e>
  40609c:	200005a8 	.word	0x200005a8

004060a0 <_sbrk_r>:
  4060a0:	b538      	push	{r3, r4, r5, lr}
  4060a2:	4c07      	ldr	r4, [pc, #28]	; (4060c0 <_sbrk_r+0x20>)
  4060a4:	2300      	movs	r3, #0
  4060a6:	4605      	mov	r5, r0
  4060a8:	4608      	mov	r0, r1
  4060aa:	6023      	str	r3, [r4, #0]
  4060ac:	f7fa fe00 	bl	400cb0 <_sbrk>
  4060b0:	1c43      	adds	r3, r0, #1
  4060b2:	d000      	beq.n	4060b6 <_sbrk_r+0x16>
  4060b4:	bd38      	pop	{r3, r4, r5, pc}
  4060b6:	6823      	ldr	r3, [r4, #0]
  4060b8:	2b00      	cmp	r3, #0
  4060ba:	d0fb      	beq.n	4060b4 <_sbrk_r+0x14>
  4060bc:	602b      	str	r3, [r5, #0]
  4060be:	bd38      	pop	{r3, r4, r5, pc}
  4060c0:	20008e0c 	.word	0x20008e0c

004060c4 <__sread>:
  4060c4:	b510      	push	{r4, lr}
  4060c6:	460c      	mov	r4, r1
  4060c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4060cc:	f000 f9f6 	bl	4064bc <_read_r>
  4060d0:	2800      	cmp	r0, #0
  4060d2:	db03      	blt.n	4060dc <__sread+0x18>
  4060d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4060d6:	4403      	add	r3, r0
  4060d8:	6523      	str	r3, [r4, #80]	; 0x50
  4060da:	bd10      	pop	{r4, pc}
  4060dc:	89a3      	ldrh	r3, [r4, #12]
  4060de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4060e2:	81a3      	strh	r3, [r4, #12]
  4060e4:	bd10      	pop	{r4, pc}
  4060e6:	bf00      	nop

004060e8 <__swrite>:
  4060e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4060ec:	4616      	mov	r6, r2
  4060ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4060f2:	461f      	mov	r7, r3
  4060f4:	05d3      	lsls	r3, r2, #23
  4060f6:	460c      	mov	r4, r1
  4060f8:	4605      	mov	r5, r0
  4060fa:	d507      	bpl.n	40610c <__swrite+0x24>
  4060fc:	2200      	movs	r2, #0
  4060fe:	2302      	movs	r3, #2
  406100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406104:	f000 f9c4 	bl	406490 <_lseek_r>
  406108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40610c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406114:	81a2      	strh	r2, [r4, #12]
  406116:	463b      	mov	r3, r7
  406118:	4632      	mov	r2, r6
  40611a:	4628      	mov	r0, r5
  40611c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406120:	f000 b8a4 	b.w	40626c <_write_r>

00406124 <__sseek>:
  406124:	b510      	push	{r4, lr}
  406126:	460c      	mov	r4, r1
  406128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40612c:	f000 f9b0 	bl	406490 <_lseek_r>
  406130:	89a3      	ldrh	r3, [r4, #12]
  406132:	1c42      	adds	r2, r0, #1
  406134:	bf0e      	itee	eq
  406136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40613a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40613e:	6520      	strne	r0, [r4, #80]	; 0x50
  406140:	81a3      	strh	r3, [r4, #12]
  406142:	bd10      	pop	{r4, pc}

00406144 <__sclose>:
  406144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406148:	f000 b908 	b.w	40635c <_close_r>

0040614c <__swbuf_r>:
  40614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40614e:	460d      	mov	r5, r1
  406150:	4614      	mov	r4, r2
  406152:	4606      	mov	r6, r0
  406154:	b110      	cbz	r0, 40615c <__swbuf_r+0x10>
  406156:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406158:	2b00      	cmp	r3, #0
  40615a:	d04b      	beq.n	4061f4 <__swbuf_r+0xa8>
  40615c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406160:	69a3      	ldr	r3, [r4, #24]
  406162:	60a3      	str	r3, [r4, #8]
  406164:	b291      	uxth	r1, r2
  406166:	0708      	lsls	r0, r1, #28
  406168:	d539      	bpl.n	4061de <__swbuf_r+0x92>
  40616a:	6923      	ldr	r3, [r4, #16]
  40616c:	2b00      	cmp	r3, #0
  40616e:	d036      	beq.n	4061de <__swbuf_r+0x92>
  406170:	b2ed      	uxtb	r5, r5
  406172:	0489      	lsls	r1, r1, #18
  406174:	462f      	mov	r7, r5
  406176:	d515      	bpl.n	4061a4 <__swbuf_r+0x58>
  406178:	6822      	ldr	r2, [r4, #0]
  40617a:	6961      	ldr	r1, [r4, #20]
  40617c:	1ad3      	subs	r3, r2, r3
  40617e:	428b      	cmp	r3, r1
  406180:	da1c      	bge.n	4061bc <__swbuf_r+0x70>
  406182:	3301      	adds	r3, #1
  406184:	68a1      	ldr	r1, [r4, #8]
  406186:	1c50      	adds	r0, r2, #1
  406188:	3901      	subs	r1, #1
  40618a:	60a1      	str	r1, [r4, #8]
  40618c:	6020      	str	r0, [r4, #0]
  40618e:	7015      	strb	r5, [r2, #0]
  406190:	6962      	ldr	r2, [r4, #20]
  406192:	429a      	cmp	r2, r3
  406194:	d01a      	beq.n	4061cc <__swbuf_r+0x80>
  406196:	89a3      	ldrh	r3, [r4, #12]
  406198:	07db      	lsls	r3, r3, #31
  40619a:	d501      	bpl.n	4061a0 <__swbuf_r+0x54>
  40619c:	2d0a      	cmp	r5, #10
  40619e:	d015      	beq.n	4061cc <__swbuf_r+0x80>
  4061a0:	4638      	mov	r0, r7
  4061a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4061a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4061a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4061aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4061ae:	81a2      	strh	r2, [r4, #12]
  4061b0:	6822      	ldr	r2, [r4, #0]
  4061b2:	6661      	str	r1, [r4, #100]	; 0x64
  4061b4:	6961      	ldr	r1, [r4, #20]
  4061b6:	1ad3      	subs	r3, r2, r3
  4061b8:	428b      	cmp	r3, r1
  4061ba:	dbe2      	blt.n	406182 <__swbuf_r+0x36>
  4061bc:	4621      	mov	r1, r4
  4061be:	4630      	mov	r0, r6
  4061c0:	f7fe fd0a 	bl	404bd8 <_fflush_r>
  4061c4:	b940      	cbnz	r0, 4061d8 <__swbuf_r+0x8c>
  4061c6:	6822      	ldr	r2, [r4, #0]
  4061c8:	2301      	movs	r3, #1
  4061ca:	e7db      	b.n	406184 <__swbuf_r+0x38>
  4061cc:	4621      	mov	r1, r4
  4061ce:	4630      	mov	r0, r6
  4061d0:	f7fe fd02 	bl	404bd8 <_fflush_r>
  4061d4:	2800      	cmp	r0, #0
  4061d6:	d0e3      	beq.n	4061a0 <__swbuf_r+0x54>
  4061d8:	f04f 37ff 	mov.w	r7, #4294967295
  4061dc:	e7e0      	b.n	4061a0 <__swbuf_r+0x54>
  4061de:	4621      	mov	r1, r4
  4061e0:	4630      	mov	r0, r6
  4061e2:	f7fe fbe5 	bl	4049b0 <__swsetup_r>
  4061e6:	2800      	cmp	r0, #0
  4061e8:	d1f6      	bne.n	4061d8 <__swbuf_r+0x8c>
  4061ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4061ee:	6923      	ldr	r3, [r4, #16]
  4061f0:	b291      	uxth	r1, r2
  4061f2:	e7bd      	b.n	406170 <__swbuf_r+0x24>
  4061f4:	f7fe fd48 	bl	404c88 <__sinit>
  4061f8:	e7b0      	b.n	40615c <__swbuf_r+0x10>
  4061fa:	bf00      	nop

004061fc <_wcrtomb_r>:
  4061fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4061fe:	4606      	mov	r6, r0
  406200:	b085      	sub	sp, #20
  406202:	461f      	mov	r7, r3
  406204:	b189      	cbz	r1, 40622a <_wcrtomb_r+0x2e>
  406206:	4c10      	ldr	r4, [pc, #64]	; (406248 <_wcrtomb_r+0x4c>)
  406208:	4d10      	ldr	r5, [pc, #64]	; (40624c <_wcrtomb_r+0x50>)
  40620a:	6824      	ldr	r4, [r4, #0]
  40620c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40620e:	2c00      	cmp	r4, #0
  406210:	bf08      	it	eq
  406212:	462c      	moveq	r4, r5
  406214:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406218:	47a0      	blx	r4
  40621a:	1c43      	adds	r3, r0, #1
  40621c:	d103      	bne.n	406226 <_wcrtomb_r+0x2a>
  40621e:	2200      	movs	r2, #0
  406220:	238a      	movs	r3, #138	; 0x8a
  406222:	603a      	str	r2, [r7, #0]
  406224:	6033      	str	r3, [r6, #0]
  406226:	b005      	add	sp, #20
  406228:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40622a:	460c      	mov	r4, r1
  40622c:	4906      	ldr	r1, [pc, #24]	; (406248 <_wcrtomb_r+0x4c>)
  40622e:	4a07      	ldr	r2, [pc, #28]	; (40624c <_wcrtomb_r+0x50>)
  406230:	6809      	ldr	r1, [r1, #0]
  406232:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406234:	2900      	cmp	r1, #0
  406236:	bf08      	it	eq
  406238:	4611      	moveq	r1, r2
  40623a:	4622      	mov	r2, r4
  40623c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406240:	a901      	add	r1, sp, #4
  406242:	47a0      	blx	r4
  406244:	e7e9      	b.n	40621a <_wcrtomb_r+0x1e>
  406246:	bf00      	nop
  406248:	2000000c 	.word	0x2000000c
  40624c:	2000043c 	.word	0x2000043c

00406250 <__ascii_wctomb>:
  406250:	b121      	cbz	r1, 40625c <__ascii_wctomb+0xc>
  406252:	2aff      	cmp	r2, #255	; 0xff
  406254:	d804      	bhi.n	406260 <__ascii_wctomb+0x10>
  406256:	700a      	strb	r2, [r1, #0]
  406258:	2001      	movs	r0, #1
  40625a:	4770      	bx	lr
  40625c:	4608      	mov	r0, r1
  40625e:	4770      	bx	lr
  406260:	238a      	movs	r3, #138	; 0x8a
  406262:	6003      	str	r3, [r0, #0]
  406264:	f04f 30ff 	mov.w	r0, #4294967295
  406268:	4770      	bx	lr
  40626a:	bf00      	nop

0040626c <_write_r>:
  40626c:	b570      	push	{r4, r5, r6, lr}
  40626e:	460d      	mov	r5, r1
  406270:	4c08      	ldr	r4, [pc, #32]	; (406294 <_write_r+0x28>)
  406272:	4611      	mov	r1, r2
  406274:	4606      	mov	r6, r0
  406276:	461a      	mov	r2, r3
  406278:	4628      	mov	r0, r5
  40627a:	2300      	movs	r3, #0
  40627c:	6023      	str	r3, [r4, #0]
  40627e:	f7fa f85b 	bl	400338 <_write>
  406282:	1c43      	adds	r3, r0, #1
  406284:	d000      	beq.n	406288 <_write_r+0x1c>
  406286:	bd70      	pop	{r4, r5, r6, pc}
  406288:	6823      	ldr	r3, [r4, #0]
  40628a:	2b00      	cmp	r3, #0
  40628c:	d0fb      	beq.n	406286 <_write_r+0x1a>
  40628e:	6033      	str	r3, [r6, #0]
  406290:	bd70      	pop	{r4, r5, r6, pc}
  406292:	bf00      	nop
  406294:	20008e0c 	.word	0x20008e0c

00406298 <__register_exitproc>:
  406298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40629c:	4d2c      	ldr	r5, [pc, #176]	; (406350 <__register_exitproc+0xb8>)
  40629e:	4606      	mov	r6, r0
  4062a0:	6828      	ldr	r0, [r5, #0]
  4062a2:	4698      	mov	r8, r3
  4062a4:	460f      	mov	r7, r1
  4062a6:	4691      	mov	r9, r2
  4062a8:	f7ff f8ae 	bl	405408 <__retarget_lock_acquire_recursive>
  4062ac:	4b29      	ldr	r3, [pc, #164]	; (406354 <__register_exitproc+0xbc>)
  4062ae:	681c      	ldr	r4, [r3, #0]
  4062b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4062b4:	2b00      	cmp	r3, #0
  4062b6:	d03e      	beq.n	406336 <__register_exitproc+0x9e>
  4062b8:	685a      	ldr	r2, [r3, #4]
  4062ba:	2a1f      	cmp	r2, #31
  4062bc:	dc1c      	bgt.n	4062f8 <__register_exitproc+0x60>
  4062be:	f102 0e01 	add.w	lr, r2, #1
  4062c2:	b176      	cbz	r6, 4062e2 <__register_exitproc+0x4a>
  4062c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4062c8:	2401      	movs	r4, #1
  4062ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4062ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4062d2:	4094      	lsls	r4, r2
  4062d4:	4320      	orrs	r0, r4
  4062d6:	2e02      	cmp	r6, #2
  4062d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4062dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4062e0:	d023      	beq.n	40632a <__register_exitproc+0x92>
  4062e2:	3202      	adds	r2, #2
  4062e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4062e8:	6828      	ldr	r0, [r5, #0]
  4062ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4062ee:	f7ff f88d 	bl	40540c <__retarget_lock_release_recursive>
  4062f2:	2000      	movs	r0, #0
  4062f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4062f8:	4b17      	ldr	r3, [pc, #92]	; (406358 <__register_exitproc+0xc0>)
  4062fa:	b30b      	cbz	r3, 406340 <__register_exitproc+0xa8>
  4062fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406300:	f7ff f8fe 	bl	405500 <malloc>
  406304:	4603      	mov	r3, r0
  406306:	b1d8      	cbz	r0, 406340 <__register_exitproc+0xa8>
  406308:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40630c:	6002      	str	r2, [r0, #0]
  40630e:	2100      	movs	r1, #0
  406310:	6041      	str	r1, [r0, #4]
  406312:	460a      	mov	r2, r1
  406314:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406318:	f04f 0e01 	mov.w	lr, #1
  40631c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406320:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406324:	2e00      	cmp	r6, #0
  406326:	d0dc      	beq.n	4062e2 <__register_exitproc+0x4a>
  406328:	e7cc      	b.n	4062c4 <__register_exitproc+0x2c>
  40632a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40632e:	430c      	orrs	r4, r1
  406330:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406334:	e7d5      	b.n	4062e2 <__register_exitproc+0x4a>
  406336:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40633a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40633e:	e7bb      	b.n	4062b8 <__register_exitproc+0x20>
  406340:	6828      	ldr	r0, [r5, #0]
  406342:	f7ff f863 	bl	40540c <__retarget_lock_release_recursive>
  406346:	f04f 30ff 	mov.w	r0, #4294967295
  40634a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40634e:	bf00      	nop
  406350:	20000438 	.word	0x20000438
  406354:	00406548 	.word	0x00406548
  406358:	00405501 	.word	0x00405501

0040635c <_close_r>:
  40635c:	b538      	push	{r3, r4, r5, lr}
  40635e:	4c07      	ldr	r4, [pc, #28]	; (40637c <_close_r+0x20>)
  406360:	2300      	movs	r3, #0
  406362:	4605      	mov	r5, r0
  406364:	4608      	mov	r0, r1
  406366:	6023      	str	r3, [r4, #0]
  406368:	f7fa fcbe 	bl	400ce8 <_close>
  40636c:	1c43      	adds	r3, r0, #1
  40636e:	d000      	beq.n	406372 <_close_r+0x16>
  406370:	bd38      	pop	{r3, r4, r5, pc}
  406372:	6823      	ldr	r3, [r4, #0]
  406374:	2b00      	cmp	r3, #0
  406376:	d0fb      	beq.n	406370 <_close_r+0x14>
  406378:	602b      	str	r3, [r5, #0]
  40637a:	bd38      	pop	{r3, r4, r5, pc}
  40637c:	20008e0c 	.word	0x20008e0c

00406380 <_fclose_r>:
  406380:	b570      	push	{r4, r5, r6, lr}
  406382:	b159      	cbz	r1, 40639c <_fclose_r+0x1c>
  406384:	4605      	mov	r5, r0
  406386:	460c      	mov	r4, r1
  406388:	b110      	cbz	r0, 406390 <_fclose_r+0x10>
  40638a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40638c:	2b00      	cmp	r3, #0
  40638e:	d03c      	beq.n	40640a <_fclose_r+0x8a>
  406390:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406392:	07d8      	lsls	r0, r3, #31
  406394:	d505      	bpl.n	4063a2 <_fclose_r+0x22>
  406396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40639a:	b92b      	cbnz	r3, 4063a8 <_fclose_r+0x28>
  40639c:	2600      	movs	r6, #0
  40639e:	4630      	mov	r0, r6
  4063a0:	bd70      	pop	{r4, r5, r6, pc}
  4063a2:	89a3      	ldrh	r3, [r4, #12]
  4063a4:	0599      	lsls	r1, r3, #22
  4063a6:	d53c      	bpl.n	406422 <_fclose_r+0xa2>
  4063a8:	4621      	mov	r1, r4
  4063aa:	4628      	mov	r0, r5
  4063ac:	f7fe fb74 	bl	404a98 <__sflush_r>
  4063b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4063b2:	4606      	mov	r6, r0
  4063b4:	b133      	cbz	r3, 4063c4 <_fclose_r+0x44>
  4063b6:	69e1      	ldr	r1, [r4, #28]
  4063b8:	4628      	mov	r0, r5
  4063ba:	4798      	blx	r3
  4063bc:	2800      	cmp	r0, #0
  4063be:	bfb8      	it	lt
  4063c0:	f04f 36ff 	movlt.w	r6, #4294967295
  4063c4:	89a3      	ldrh	r3, [r4, #12]
  4063c6:	061a      	lsls	r2, r3, #24
  4063c8:	d422      	bmi.n	406410 <_fclose_r+0x90>
  4063ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4063cc:	b141      	cbz	r1, 4063e0 <_fclose_r+0x60>
  4063ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4063d2:	4299      	cmp	r1, r3
  4063d4:	d002      	beq.n	4063dc <_fclose_r+0x5c>
  4063d6:	4628      	mov	r0, r5
  4063d8:	f7fe fd7c 	bl	404ed4 <_free_r>
  4063dc:	2300      	movs	r3, #0
  4063de:	6323      	str	r3, [r4, #48]	; 0x30
  4063e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4063e2:	b121      	cbz	r1, 4063ee <_fclose_r+0x6e>
  4063e4:	4628      	mov	r0, r5
  4063e6:	f7fe fd75 	bl	404ed4 <_free_r>
  4063ea:	2300      	movs	r3, #0
  4063ec:	6463      	str	r3, [r4, #68]	; 0x44
  4063ee:	f7fe fc77 	bl	404ce0 <__sfp_lock_acquire>
  4063f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4063f4:	2200      	movs	r2, #0
  4063f6:	07db      	lsls	r3, r3, #31
  4063f8:	81a2      	strh	r2, [r4, #12]
  4063fa:	d50e      	bpl.n	40641a <_fclose_r+0x9a>
  4063fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4063fe:	f7ff f801 	bl	405404 <__retarget_lock_close_recursive>
  406402:	f7fe fc73 	bl	404cec <__sfp_lock_release>
  406406:	4630      	mov	r0, r6
  406408:	bd70      	pop	{r4, r5, r6, pc}
  40640a:	f7fe fc3d 	bl	404c88 <__sinit>
  40640e:	e7bf      	b.n	406390 <_fclose_r+0x10>
  406410:	6921      	ldr	r1, [r4, #16]
  406412:	4628      	mov	r0, r5
  406414:	f7fe fd5e 	bl	404ed4 <_free_r>
  406418:	e7d7      	b.n	4063ca <_fclose_r+0x4a>
  40641a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40641c:	f7fe fff6 	bl	40540c <__retarget_lock_release_recursive>
  406420:	e7ec      	b.n	4063fc <_fclose_r+0x7c>
  406422:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406424:	f7fe fff0 	bl	405408 <__retarget_lock_acquire_recursive>
  406428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40642c:	2b00      	cmp	r3, #0
  40642e:	d1bb      	bne.n	4063a8 <_fclose_r+0x28>
  406430:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406432:	f016 0601 	ands.w	r6, r6, #1
  406436:	d1b1      	bne.n	40639c <_fclose_r+0x1c>
  406438:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40643a:	f7fe ffe7 	bl	40540c <__retarget_lock_release_recursive>
  40643e:	4630      	mov	r0, r6
  406440:	bd70      	pop	{r4, r5, r6, pc}
  406442:	bf00      	nop

00406444 <_fstat_r>:
  406444:	b538      	push	{r3, r4, r5, lr}
  406446:	460b      	mov	r3, r1
  406448:	4c07      	ldr	r4, [pc, #28]	; (406468 <_fstat_r+0x24>)
  40644a:	4605      	mov	r5, r0
  40644c:	4611      	mov	r1, r2
  40644e:	4618      	mov	r0, r3
  406450:	2300      	movs	r3, #0
  406452:	6023      	str	r3, [r4, #0]
  406454:	f7fa fc4b 	bl	400cee <_fstat>
  406458:	1c43      	adds	r3, r0, #1
  40645a:	d000      	beq.n	40645e <_fstat_r+0x1a>
  40645c:	bd38      	pop	{r3, r4, r5, pc}
  40645e:	6823      	ldr	r3, [r4, #0]
  406460:	2b00      	cmp	r3, #0
  406462:	d0fb      	beq.n	40645c <_fstat_r+0x18>
  406464:	602b      	str	r3, [r5, #0]
  406466:	bd38      	pop	{r3, r4, r5, pc}
  406468:	20008e0c 	.word	0x20008e0c

0040646c <_isatty_r>:
  40646c:	b538      	push	{r3, r4, r5, lr}
  40646e:	4c07      	ldr	r4, [pc, #28]	; (40648c <_isatty_r+0x20>)
  406470:	2300      	movs	r3, #0
  406472:	4605      	mov	r5, r0
  406474:	4608      	mov	r0, r1
  406476:	6023      	str	r3, [r4, #0]
  406478:	f7fa fc3e 	bl	400cf8 <_isatty>
  40647c:	1c43      	adds	r3, r0, #1
  40647e:	d000      	beq.n	406482 <_isatty_r+0x16>
  406480:	bd38      	pop	{r3, r4, r5, pc}
  406482:	6823      	ldr	r3, [r4, #0]
  406484:	2b00      	cmp	r3, #0
  406486:	d0fb      	beq.n	406480 <_isatty_r+0x14>
  406488:	602b      	str	r3, [r5, #0]
  40648a:	bd38      	pop	{r3, r4, r5, pc}
  40648c:	20008e0c 	.word	0x20008e0c

00406490 <_lseek_r>:
  406490:	b570      	push	{r4, r5, r6, lr}
  406492:	460d      	mov	r5, r1
  406494:	4c08      	ldr	r4, [pc, #32]	; (4064b8 <_lseek_r+0x28>)
  406496:	4611      	mov	r1, r2
  406498:	4606      	mov	r6, r0
  40649a:	461a      	mov	r2, r3
  40649c:	4628      	mov	r0, r5
  40649e:	2300      	movs	r3, #0
  4064a0:	6023      	str	r3, [r4, #0]
  4064a2:	f7fa fc2b 	bl	400cfc <_lseek>
  4064a6:	1c43      	adds	r3, r0, #1
  4064a8:	d000      	beq.n	4064ac <_lseek_r+0x1c>
  4064aa:	bd70      	pop	{r4, r5, r6, pc}
  4064ac:	6823      	ldr	r3, [r4, #0]
  4064ae:	2b00      	cmp	r3, #0
  4064b0:	d0fb      	beq.n	4064aa <_lseek_r+0x1a>
  4064b2:	6033      	str	r3, [r6, #0]
  4064b4:	bd70      	pop	{r4, r5, r6, pc}
  4064b6:	bf00      	nop
  4064b8:	20008e0c 	.word	0x20008e0c

004064bc <_read_r>:
  4064bc:	b570      	push	{r4, r5, r6, lr}
  4064be:	460d      	mov	r5, r1
  4064c0:	4c08      	ldr	r4, [pc, #32]	; (4064e4 <_read_r+0x28>)
  4064c2:	4611      	mov	r1, r2
  4064c4:	4606      	mov	r6, r0
  4064c6:	461a      	mov	r2, r3
  4064c8:	4628      	mov	r0, r5
  4064ca:	2300      	movs	r3, #0
  4064cc:	6023      	str	r3, [r4, #0]
  4064ce:	f7f9 ff15 	bl	4002fc <_read>
  4064d2:	1c43      	adds	r3, r0, #1
  4064d4:	d000      	beq.n	4064d8 <_read_r+0x1c>
  4064d6:	bd70      	pop	{r4, r5, r6, pc}
  4064d8:	6823      	ldr	r3, [r4, #0]
  4064da:	2b00      	cmp	r3, #0
  4064dc:	d0fb      	beq.n	4064d6 <_read_r+0x1a>
  4064de:	6033      	str	r3, [r6, #0]
  4064e0:	bd70      	pop	{r4, r5, r6, pc}
  4064e2:	bf00      	nop
  4064e4:	20008e0c 	.word	0x20008e0c

004064e8 <__aeabi_uldivmod>:
  4064e8:	b953      	cbnz	r3, 406500 <__aeabi_uldivmod+0x18>
  4064ea:	b94a      	cbnz	r2, 406500 <__aeabi_uldivmod+0x18>
  4064ec:	2900      	cmp	r1, #0
  4064ee:	bf08      	it	eq
  4064f0:	2800      	cmpeq	r0, #0
  4064f2:	bf1c      	itt	ne
  4064f4:	f04f 31ff 	movne.w	r1, #4294967295
  4064f8:	f04f 30ff 	movne.w	r0, #4294967295
  4064fc:	f7fd b9b6 	b.w	40386c <__aeabi_idiv0>
  406500:	f1ad 0c08 	sub.w	ip, sp, #8
  406504:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406508:	f7fd f842 	bl	403590 <__udivmoddi4>
  40650c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406514:	b004      	add	sp, #16
  406516:	4770      	bx	lr
  406518:	616c6564 	.word	0x616c6564
  40651c:	69662079 	.word	0x69662079
  406520:	6873696e 	.word	0x6873696e
  406524:	00006465 	.word	0x00006465
  406528:	00776f70 	.word	0x00776f70
  40652c:	74727173 	.word	0x74727173
	...

00406538 <TWO52>:
  406538:	00000000 43300000 00000000 c3300000     ......0C......0.

00406548 <_global_impure_ptr>:
  406548:	20000010 33323130 37363534 42413938     ... 0123456789AB
  406558:	46454443 00000000 33323130 37363534     CDEF....01234567
  406568:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406578:	0000296c                                l)..

0040657c <blanks.7217>:
  40657c:	20202020 20202020 20202020 20202020                     

0040658c <zeroes.7218>:
  40658c:	30303030 30303030 30303030 30303030     0000000000000000
  40659c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004065ac <_ctype_>:
  4065ac:	20202000 20202020 28282020 20282828     .         ((((( 
  4065bc:	20202020 20202020 20202020 20202020                     
  4065cc:	10108820 10101010 10101010 10101010      ...............
  4065dc:	04040410 04040404 10040404 10101010     ................
  4065ec:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4065fc:	01010101 01010101 01010101 10101010     ................
  40660c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40661c:	02020202 02020202 02020202 10101010     ................
  40662c:	00000020 00000000 00000000 00000000      ...............
	...

004066b0 <_init>:
  4066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4066b2:	bf00      	nop
  4066b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4066b6:	bc08      	pop	{r3}
  4066b8:	469e      	mov	lr, r3
  4066ba:	4770      	bx	lr

004066bc <__init_array_start>:
  4066bc:	00404a79 	.word	0x00404a79

004066c0 <__frame_dummy_init_array_entry>:
  4066c0:	0040011d                                ..@.

004066c4 <_fini>:
  4066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4066c6:	bf00      	nop
  4066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4066ca:	bc08      	pop	{r3}
  4066cc:	469e      	mov	lr, r3
  4066ce:	4770      	bx	lr

004066d0 <__fini_array_start>:
  4066d0:	004000f9 	.word	0x004000f9


BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000068cc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004068cc  004068cc  000168cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20000000  004068d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008460  200009c0  00407298  000209c0  2**3
                  ALLOC
  4 .stack        00003000  20008e20  0040f6f8  000209c0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001922b  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000039dd  00000000  00000000  00039c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005141  00000000  00000000  0003d64f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a98  00000000  00000000  00042790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a28  00000000  00000000  00043228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a382  00000000  00000000  00043c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000dba6  00000000  00000000  0005dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00065c0d  00000000  00000000  0006bb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000028b8  00000000  00000000  000d1788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	20 be 00 20 2d 0b 40 00 29 0b 40 00 29 0b 40 00      .. -.@.).@.).@.
  400010:	29 0b 40 00 29 0b 40 00 29 0b 40 00 00 00 00 00     ).@.).@.).@.....
	...
  40002c:	29 0b 40 00 29 0b 40 00 00 00 00 00 29 0b 40 00     ).@.).@.....).@.
  40003c:	29 0b 40 00 29 0b 40 00 29 0b 40 00 29 0b 40 00     ).@.).@.).@.).@.
  40004c:	29 0b 40 00 29 0b 40 00 29 0b 40 00 29 0b 40 00     ).@.).@.).@.).@.
  40005c:	29 0b 40 00 29 0b 40 00 29 0b 40 00 29 0b 40 00     ).@.).@.).@.).@.
  40006c:	29 0b 40 00 29 0b 40 00 29 0b 40 00 c5 0d 40 00     ).@.).@.).@...@.
  40007c:	29 0b 40 00 29 0b 40 00 29 0b 40 00 29 0b 40 00     ).@.).@.).@.).@.
  40008c:	29 0b 40 00 29 0b 40 00 29 0b 40 00 01 18 40 00     ).@.).@.).@...@.
  40009c:	29 0b 40 00 29 0b 40 00 29 0b 40 00 29 0b 40 00     ).@.).@.).@.).@.
  4000ac:	29 0b 40 00 29 0b 40 00 29 0b 40 00 e5 06 40 00     ).@.).@.).@...@.
  4000bc:	f9 06 40 00 29 0b 40 00 31 17 40 00 29 0b 40 00     ..@.).@.1.@.).@.
  4000cc:	29 0b 40 00 29 0b 40 00 29 0b 40 00 29 0b 40 00     ).@.).@.).@.).@.
  4000dc:	29 0b 40 00 29 0b 40 00 29 0b 40 00 29 0b 40 00     ).@.).@.).@.).@.
  4000ec:	29 0b 40 00 29 0b 40 00 29 0b 40 00                 ).@.).@.).@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009c0 	.word	0x200009c0
  400114:	00000000 	.word	0x00000000
  400118:	004068d4 	.word	0x004068d4

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004068d4 	.word	0x004068d4
  400158:	200009c4 	.word	0x200009c4
  40015c:	004068d4 	.word	0x004068d4
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	480b      	ldr	r0, [pc, #44]	; (4001c8 <sysclk_init+0x64>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	00400d01 	.word	0x00400d01
  4001a8:	004008cd 	.word	0x004008cd
  4001ac:	00400921 	.word	0x00400921
  4001b0:	00400931 	.word	0x00400931
  4001b4:	200f3f01 	.word	0x200f3f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	00400941 	.word	0x00400941
  4001c0:	00400869 	.word	0x00400869
  4001c4:	00400bf5 	.word	0x00400bf5
  4001c8:	05b8d800 	.word	0x05b8d800

004001cc <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  4001cc:	2a00      	cmp	r2, #0
  4001ce:	d037      	beq.n	400240 <usart_serial_write_packet+0x74>
{
  4001d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4001d4:	4693      	mov	fp, r2
  4001d6:	4605      	mov	r5, r0
  4001d8:	460f      	mov	r7, r1
  4001da:	448b      	add	fp, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001dc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 400250 <usart_serial_write_packet+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001e0:	4e18      	ldr	r6, [pc, #96]	; (400244 <usart_serial_write_packet+0x78>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001e2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400254 <usart_serial_write_packet+0x88>
  4001e6:	e006      	b.n	4001f6 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001e8:	4621      	mov	r1, r4
  4001ea:	4640      	mov	r0, r8
  4001ec:	47b0      	blx	r6
  4001ee:	2800      	cmp	r0, #0
  4001f0:	d1fa      	bne.n	4001e8 <usart_serial_write_packet+0x1c>
	while (len) {
  4001f2:	45bb      	cmp	fp, r7
  4001f4:	d021      	beq.n	40023a <usart_serial_write_packet+0x6e>
		usart_serial_putchar(usart, *data);
  4001f6:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  4001fa:	4545      	cmp	r5, r8
  4001fc:	d0f4      	beq.n	4001e8 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  4001fe:	454d      	cmp	r5, r9
  400200:	d00d      	beq.n	40021e <usart_serial_write_packet+0x52>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400202:	4b11      	ldr	r3, [pc, #68]	; (400248 <usart_serial_write_packet+0x7c>)
  400204:	429d      	cmp	r5, r3
  400206:	d010      	beq.n	40022a <usart_serial_write_packet+0x5e>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400208:	4b10      	ldr	r3, [pc, #64]	; (40024c <usart_serial_write_packet+0x80>)
  40020a:	429d      	cmp	r5, r3
  40020c:	d1f1      	bne.n	4001f2 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40020e:	f8df a048 	ldr.w	sl, [pc, #72]	; 400258 <usart_serial_write_packet+0x8c>
  400212:	4621      	mov	r1, r4
  400214:	480d      	ldr	r0, [pc, #52]	; (40024c <usart_serial_write_packet+0x80>)
  400216:	47d0      	blx	sl
  400218:	2800      	cmp	r0, #0
  40021a:	d1fa      	bne.n	400212 <usart_serial_write_packet+0x46>
  40021c:	e7e9      	b.n	4001f2 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40021e:	4621      	mov	r1, r4
  400220:	4648      	mov	r0, r9
  400222:	47b0      	blx	r6
  400224:	2800      	cmp	r0, #0
  400226:	d1fa      	bne.n	40021e <usart_serial_write_packet+0x52>
  400228:	e7e3      	b.n	4001f2 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40022a:	f8df a02c 	ldr.w	sl, [pc, #44]	; 400258 <usart_serial_write_packet+0x8c>
  40022e:	4621      	mov	r1, r4
  400230:	4805      	ldr	r0, [pc, #20]	; (400248 <usart_serial_write_packet+0x7c>)
  400232:	47d0      	blx	sl
  400234:	2800      	cmp	r0, #0
  400236:	d1fa      	bne.n	40022e <usart_serial_write_packet+0x62>
  400238:	e7db      	b.n	4001f2 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  40023a:	2000      	movs	r0, #0
  40023c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400240:	2000      	movs	r0, #0
  400242:	4770      	bx	lr
  400244:	00400adb 	.word	0x00400adb
  400248:	400a0000 	.word	0x400a0000
  40024c:	400a4000 	.word	0x400a4000
  400250:	400e0600 	.word	0x400e0600
  400254:	40060600 	.word	0x40060600
  400258:	00400afd 	.word	0x00400afd

0040025c <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  40025c:	2a00      	cmp	r2, #0
  40025e:	d03f      	beq.n	4002e0 <usart_serial_read_packet+0x84>
{
  400260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400264:	b083      	sub	sp, #12
  400266:	4606      	mov	r6, r0
  400268:	460c      	mov	r4, r1
  40026a:	4693      	mov	fp, r2
  40026c:	448b      	add	fp, r1
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40026e:	4f1d      	ldr	r7, [pc, #116]	; (4002e4 <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  400270:	4d1d      	ldr	r5, [pc, #116]	; (4002e8 <usart_serial_read_packet+0x8c>)
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400272:	f8df a080 	ldr.w	sl, [pc, #128]	; 4002f4 <usart_serial_read_packet+0x98>
  400276:	e00d      	b.n	400294 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  400278:	4621      	mov	r1, r4
  40027a:	4638      	mov	r0, r7
  40027c:	47a8      	blx	r5
  40027e:	2800      	cmp	r0, #0
  400280:	d1fa      	bne.n	400278 <usart_serial_read_packet+0x1c>
  400282:	e010      	b.n	4002a6 <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  400284:	4621      	mov	r1, r4
  400286:	4650      	mov	r0, sl
  400288:	47a8      	blx	r5
  40028a:	2800      	cmp	r0, #0
  40028c:	d1fa      	bne.n	400284 <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  40028e:	3401      	adds	r4, #1
	while (len) {
  400290:	455c      	cmp	r4, fp
  400292:	d021      	beq.n	4002d8 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400294:	2300      	movs	r3, #0
  400296:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400298:	42be      	cmp	r6, r7
  40029a:	d0ed      	beq.n	400278 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40029c:	4556      	cmp	r6, sl
  40029e:	d0f1      	beq.n	400284 <usart_serial_read_packet+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002a0:	4b12      	ldr	r3, [pc, #72]	; (4002ec <usart_serial_read_packet+0x90>)
  4002a2:	429e      	cmp	r6, r3
  4002a4:	d00d      	beq.n	4002c2 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002a6:	4b12      	ldr	r3, [pc, #72]	; (4002f0 <usart_serial_read_packet+0x94>)
  4002a8:	429e      	cmp	r6, r3
  4002aa:	d1f0      	bne.n	40028e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  4002ac:	4699      	mov	r9, r3
  4002ae:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4002f8 <usart_serial_read_packet+0x9c>
  4002b2:	a901      	add	r1, sp, #4
  4002b4:	4648      	mov	r0, r9
  4002b6:	47c0      	blx	r8
  4002b8:	2800      	cmp	r0, #0
  4002ba:	d1fa      	bne.n	4002b2 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  4002bc:	9b01      	ldr	r3, [sp, #4]
  4002be:	7023      	strb	r3, [r4, #0]
  4002c0:	e7e5      	b.n	40028e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  4002c2:	4699      	mov	r9, r3
  4002c4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4002f8 <usart_serial_read_packet+0x9c>
  4002c8:	a901      	add	r1, sp, #4
  4002ca:	4648      	mov	r0, r9
  4002cc:	47c0      	blx	r8
  4002ce:	2800      	cmp	r0, #0
  4002d0:	d1fa      	bne.n	4002c8 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  4002d2:	9b01      	ldr	r3, [sp, #4]
  4002d4:	7023      	strb	r3, [r4, #0]
  4002d6:	e7da      	b.n	40028e <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  4002d8:	2000      	movs	r0, #0
  4002da:	b003      	add	sp, #12
  4002dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002e0:	2000      	movs	r0, #0
  4002e2:	4770      	bx	lr
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	00400aeb 	.word	0x00400aeb
  4002ec:	400a0000 	.word	0x400a0000
  4002f0:	400a4000 	.word	0x400a4000
  4002f4:	40060600 	.word	0x40060600
  4002f8:	00400b11 	.word	0x00400b11

004002fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400300:	b980      	cbnz	r0, 400324 <_read+0x28>
  400302:	460c      	mov	r4, r1
  400304:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400306:	2a00      	cmp	r2, #0
  400308:	dd0f      	ble.n	40032a <_read+0x2e>
  40030a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40030c:	4e08      	ldr	r6, [pc, #32]	; (400330 <_read+0x34>)
  40030e:	4d09      	ldr	r5, [pc, #36]	; (400334 <_read+0x38>)
  400310:	6830      	ldr	r0, [r6, #0]
  400312:	4621      	mov	r1, r4
  400314:	682b      	ldr	r3, [r5, #0]
  400316:	4798      	blx	r3
		ptr++;
  400318:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40031a:	42bc      	cmp	r4, r7
  40031c:	d1f8      	bne.n	400310 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40031e:	4640      	mov	r0, r8
  400320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400324:	f04f 38ff 	mov.w	r8, #4294967295
  400328:	e7f9      	b.n	40031e <_read+0x22>
	for (; len > 0; --len) {
  40032a:	4680      	mov	r8, r0
  40032c:	e7f7      	b.n	40031e <_read+0x22>
  40032e:	bf00      	nop
  400330:	20008d38 	.word	0x20008d38
  400334:	20008d30 	.word	0x20008d30

00400338 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400338:	3801      	subs	r0, #1
  40033a:	2802      	cmp	r0, #2
  40033c:	d815      	bhi.n	40036a <_write+0x32>
{
  40033e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400342:	460e      	mov	r6, r1
  400344:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400346:	b19a      	cbz	r2, 400370 <_write+0x38>
  400348:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40034a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400384 <_write+0x4c>
  40034e:	4f0c      	ldr	r7, [pc, #48]	; (400380 <_write+0x48>)
  400350:	f8d8 0000 	ldr.w	r0, [r8]
  400354:	f815 1b01 	ldrb.w	r1, [r5], #1
  400358:	683b      	ldr	r3, [r7, #0]
  40035a:	4798      	blx	r3
  40035c:	2800      	cmp	r0, #0
  40035e:	db0a      	blt.n	400376 <_write+0x3e>
  400360:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400362:	3c01      	subs	r4, #1
  400364:	d1f4      	bne.n	400350 <_write+0x18>
  400366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40036a:	f04f 30ff 	mov.w	r0, #4294967295
  40036e:	4770      	bx	lr
	for (; len != 0; --len) {
  400370:	4610      	mov	r0, r2
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400376:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40037e:	bf00      	nop
  400380:	20008d34 	.word	0x20008d34
  400384:	20008d38 	.word	0x20008d38

00400388 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400388:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40038a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40038e:	4b21      	ldr	r3, [pc, #132]	; (400414 <board_init+0x8c>)
  400390:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	2009      	movs	r0, #9
  400394:	4c20      	ldr	r4, [pc, #128]	; (400418 <board_init+0x90>)
  400396:	47a0      	blx	r4
  400398:	200a      	movs	r0, #10
  40039a:	47a0      	blx	r4
  40039c:	200b      	movs	r0, #11
  40039e:	47a0      	blx	r4
  4003a0:	200c      	movs	r0, #12
  4003a2:	47a0      	blx	r4
  4003a4:	200d      	movs	r0, #13
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b1c      	ldr	r3, [pc, #112]	; (40041c <board_init+0x94>)
  4003aa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4003ba:	2204      	movs	r2, #4
  4003bc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003c8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003ca:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d2:	f021 0104 	bic.w	r1, r1, #4
  4003d6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003d8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003da:	f021 0104 	bic.w	r1, r1, #4
  4003de:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4003f0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003f8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400400:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400404:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400406:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400408:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40040c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40040e:	605a      	str	r2, [r3, #4]
  400410:	bd10      	pop	{r4, pc}
  400412:	bf00      	nop
  400414:	400e1850 	.word	0x400e1850
  400418:	00400951 	.word	0x00400951
  40041c:	400e1400 	.word	0x400e1400

00400420 <acc_init>:
		Acc *p_acc,
		uint32_t ul_select_plus,
		uint32_t ul_select_minus,
		uint32_t ul_edge_type,
		uint32_t ul_invert)
{
  400420:	b410      	push	{r4}
	/* Validate the parameters. */
	Assert(p_acc);
	
	/* Reset the controller. */
	p_acc->ACC_CR |= ACC_CR_SWRST;
  400422:	6804      	ldr	r4, [r0, #0]
  400424:	f044 0401 	orr.w	r4, r4, #1
  400428:	6004      	str	r4, [r0, #0]

	/* Write to the MR register. */
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  40042a:	9c01      	ldr	r4, [sp, #4]
  40042c:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
  400430:	f444 7480 	orr.w	r4, r4, #256	; 0x100
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
  400434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400438:	431c      	orrs	r4, r3
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
  40043a:	f002 0207 	and.w	r2, r2, #7
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  40043e:	4314      	orrs	r4, r2
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400440:	f001 0170 	and.w	r1, r1, #112	; 0x70
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400444:	430c      	orrs	r4, r1
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400446:	6044      	str	r4, [r0, #4]

	/* Set hysteresis and current option. */
	p_acc->ACC_ACR = (ACC_ACR_ISEL_HISP |
  400448:	2303      	movs	r3, #3
  40044a:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
			ACC_ACR_HYST(ACC_ACR_HYST_50mv_max));

	/* Automatic Output Masking Period. */
	while (p_acc->ACC_ISR & (uint32_t) ACC_ISR_MASK);
  40044e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400450:	2b00      	cmp	r3, #0
  400452:	dbfc      	blt.n	40044e <acc_init+0x2e>
}
  400454:	f85d 4b04 	ldr.w	r4, [sp], #4
  400458:	4770      	bx	lr

0040045a <acc_get_comparison_result>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	uint32_t ul_temp = p_acc->ACC_MR;
  40045a:	6843      	ldr	r3, [r0, #4]
	uint32_t ul_status = p_acc->ACC_ISR;
  40045c:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if ((ul_temp & ACC_MR_INV_EN) == ACC_MR_INV_EN) {
  40045e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		if (ul_status & ACC_ISR_SCO) {
  400462:	bf18      	it	ne
  400464:	f080 0002 	eorne.w	r0, r0, #2
			return 0;	/* inn>inp */
		} else {
			return 1;	/* inp>inn */
		}
	} else {
		if (ul_status & ACC_ISR_SCO) {
  400468:	f3c0 0040 	ubfx	r0, r0, #1, #1
			return 1;	/* inp>inn */
		} else {
			return 0;	/* inn>inp */
		}
	}
}
  40046c:	4770      	bx	lr

0040046e <acc_enable_interrupt>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	p_acc->ACC_IER = ACC_IER_CE;
  40046e:	2301      	movs	r3, #1
  400470:	6243      	str	r3, [r0, #36]	; 0x24
  400472:	4770      	bx	lr

00400474 <acc_get_interrupt_status>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	return p_acc->ACC_ISR;
  400474:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400476:	4770      	bx	lr

00400478 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400478:	b570      	push	{r4, r5, r6, lr}
  40047a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40047c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40047e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400480:	4013      	ands	r3, r2
  400482:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400484:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400486:	4d21      	ldr	r5, [pc, #132]	; (40050c <afec_process_callback+0x94>)
  400488:	42a8      	cmp	r0, r5
  40048a:	bf14      	ite	ne
  40048c:	2500      	movne	r5, #0
  40048e:	2501      	moveq	r5, #1
  400490:	006e      	lsls	r6, r5, #1
  400492:	442e      	add	r6, r5
  400494:	e00b      	b.n	4004ae <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400496:	2c14      	cmp	r4, #20
  400498:	d824      	bhi.n	4004e4 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40049a:	9a01      	ldr	r2, [sp, #4]
  40049c:	f104 0108 	add.w	r1, r4, #8
  4004a0:	2301      	movs	r3, #1
  4004a2:	408b      	lsls	r3, r1
  4004a4:	4213      	tst	r3, r2
  4004a6:	d113      	bne.n	4004d0 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4004a8:	3401      	adds	r4, #1
  4004aa:	2c17      	cmp	r4, #23
  4004ac:	d02b      	beq.n	400506 <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4004ae:	2c0f      	cmp	r4, #15
  4004b0:	d8f1      	bhi.n	400496 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4004b2:	9a01      	ldr	r2, [sp, #4]
  4004b4:	2301      	movs	r3, #1
  4004b6:	40a3      	lsls	r3, r4
  4004b8:	4213      	tst	r3, r2
  4004ba:	d0f5      	beq.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004bc:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004c0:	4423      	add	r3, r4
  4004c2:	4a13      	ldr	r2, [pc, #76]	; (400510 <afec_process_callback+0x98>)
  4004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004c8:	2b00      	cmp	r3, #0
  4004ca:	d0ed      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004cc:	4798      	blx	r3
  4004ce:	e7eb      	b.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004d0:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004d4:	4423      	add	r3, r4
  4004d6:	4a0e      	ldr	r2, [pc, #56]	; (400510 <afec_process_callback+0x98>)
  4004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004dc:	2b00      	cmp	r3, #0
  4004de:	d0e3      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004e0:	4798      	blx	r3
  4004e2:	e7e1      	b.n	4004a8 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4004e4:	9a01      	ldr	r2, [sp, #4]
  4004e6:	f104 0109 	add.w	r1, r4, #9
  4004ea:	2301      	movs	r3, #1
  4004ec:	408b      	lsls	r3, r1
  4004ee:	4213      	tst	r3, r2
  4004f0:	d0da      	beq.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004f2:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004f6:	4423      	add	r3, r4
  4004f8:	4a05      	ldr	r2, [pc, #20]	; (400510 <afec_process_callback+0x98>)
  4004fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004fe:	2b00      	cmp	r3, #0
  400500:	d0d2      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400502:	4798      	blx	r3
  400504:	e7d0      	b.n	4004a8 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400506:	b002      	add	sp, #8
  400508:	bd70      	pop	{r4, r5, r6, pc}
  40050a:	bf00      	nop
  40050c:	400b4000 	.word	0x400b4000
  400510:	20008d3c 	.word	0x20008d3c

00400514 <afec_ch_set_config>:
{
  400514:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400516:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400518:	2301      	movs	r3, #1
  40051a:	408b      	lsls	r3, r1
  40051c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400520:	7815      	ldrb	r5, [r2, #0]
  400522:	2d00      	cmp	r5, #0
  400524:	bf08      	it	eq
  400526:	2300      	moveq	r3, #0
  400528:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40052a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40052c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40052e:	004b      	lsls	r3, r1, #1
  400530:	2103      	movs	r1, #3
  400532:	4099      	lsls	r1, r3
  400534:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400538:	7851      	ldrb	r1, [r2, #1]
  40053a:	4099      	lsls	r1, r3
  40053c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40053e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400540:	bc30      	pop	{r4, r5}
  400542:	4770      	bx	lr

00400544 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400544:	2200      	movs	r2, #0
  400546:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400548:	4b08      	ldr	r3, [pc, #32]	; (40056c <afec_get_config_defaults+0x28>)
  40054a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40054c:	4b08      	ldr	r3, [pc, #32]	; (400570 <afec_get_config_defaults+0x2c>)
  40054e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400550:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400554:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400556:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400558:	2302      	movs	r3, #2
  40055a:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  40055c:	2301      	movs	r3, #1
  40055e:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400560:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400562:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400564:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400566:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400568:	7683      	strb	r3, [r0, #26]
  40056a:	4770      	bx	lr
  40056c:	05b8d800 	.word	0x05b8d800
  400570:	005b8d80 	.word	0x005b8d80

00400574 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400574:	2300      	movs	r3, #0
  400576:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400578:	2301      	movs	r3, #1
  40057a:	7043      	strb	r3, [r0, #1]
  40057c:	4770      	bx	lr
	...

00400580 <afec_init>:
	return afec->AFEC_ISR;
  400580:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400582:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400586:	d001      	beq.n	40058c <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400588:	2019      	movs	r0, #25
  40058a:	4770      	bx	lr
{
  40058c:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40058e:	2301      	movs	r3, #1
  400590:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400592:	7dcb      	ldrb	r3, [r1, #23]
  400594:	2b00      	cmp	r3, #0
  400596:	bf14      	ite	ne
  400598:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  40059c:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  40059e:	7d8b      	ldrb	r3, [r1, #22]
  4005a0:	2b00      	cmp	r3, #0
  4005a2:	bf14      	ite	ne
  4005a4:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  4005a8:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  4005aa:	7d0b      	ldrb	r3, [r1, #20]
  4005ac:	061b      	lsls	r3, r3, #24
  4005ae:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005b2:	690a      	ldr	r2, [r1, #16]
  4005b4:	68ce      	ldr	r6, [r1, #12]
  4005b6:	4332      	orrs	r2, r6
  4005b8:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4005ba:	7d4a      	ldrb	r2, [r1, #21]
  4005bc:	0712      	lsls	r2, r2, #28
  4005be:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005c2:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  4005c4:	688a      	ldr	r2, [r1, #8]
  4005c6:	0056      	lsls	r6, r2, #1
  4005c8:	684a      	ldr	r2, [r1, #4]
  4005ca:	fbb2 f2f6 	udiv	r2, r2, r6
  4005ce:	3a01      	subs	r2, #1
  4005d0:	0212      	lsls	r2, r2, #8
  4005d2:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005d4:	4313      	orrs	r3, r2
  4005d6:	432b      	orrs	r3, r5
  4005d8:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  4005da:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005dc:	7e0b      	ldrb	r3, [r1, #24]
  4005de:	2b00      	cmp	r3, #0
  4005e0:	bf14      	ite	ne
  4005e2:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4005e6:	2300      	moveq	r3, #0
  4005e8:	680a      	ldr	r2, [r1, #0]
  4005ea:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4005ec:	7e4a      	ldrb	r2, [r1, #25]
  4005ee:	2a00      	cmp	r2, #0
  4005f0:	bf14      	ite	ne
  4005f2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4005f6:	2200      	moveq	r2, #0
			(config->resolution) |
  4005f8:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005fa:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  4005fc:	7e8b      	ldrb	r3, [r1, #26]
  4005fe:	021b      	lsls	r3, r3, #8
  400600:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400604:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400608:	4b0e      	ldr	r3, [pc, #56]	; (400644 <afec_init+0xc4>)
  40060a:	4298      	cmp	r0, r3
  40060c:	d005      	beq.n	40061a <afec_init+0x9a>
	if(afec == AFEC1) {
  40060e:	4b0e      	ldr	r3, [pc, #56]	; (400648 <afec_init+0xc8>)
  400610:	4298      	cmp	r0, r3
  400612:	d00c      	beq.n	40062e <afec_init+0xae>
	return STATUS_OK;
  400614:	2000      	movs	r0, #0
}
  400616:	bc70      	pop	{r4, r5, r6}
  400618:	4770      	bx	lr
  40061a:	4b0c      	ldr	r3, [pc, #48]	; (40064c <afec_init+0xcc>)
  40061c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400620:	2200      	movs	r2, #0
  400622:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400626:	428b      	cmp	r3, r1
  400628:	d1fb      	bne.n	400622 <afec_init+0xa2>
	return STATUS_OK;
  40062a:	2000      	movs	r0, #0
  40062c:	e7f3      	b.n	400616 <afec_init+0x96>
  40062e:	4b08      	ldr	r3, [pc, #32]	; (400650 <afec_init+0xd0>)
  400630:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400634:	2200      	movs	r2, #0
  400636:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40063a:	428b      	cmp	r3, r1
  40063c:	d1fb      	bne.n	400636 <afec_init+0xb6>
	return STATUS_OK;
  40063e:	2000      	movs	r0, #0
  400640:	e7e9      	b.n	400616 <afec_init+0x96>
  400642:	bf00      	nop
  400644:	400b0000 	.word	0x400b0000
  400648:	400b4000 	.word	0x400b4000
  40064c:	20008d38 	.word	0x20008d38
  400650:	20008d94 	.word	0x20008d94

00400654 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400654:	4b0c      	ldr	r3, [pc, #48]	; (400688 <afec_enable_interrupt+0x34>)
  400656:	4299      	cmp	r1, r3
  400658:	d007      	beq.n	40066a <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40065a:	290f      	cmp	r1, #15
  40065c:	d80b      	bhi.n	400676 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  40065e:	d006      	beq.n	40066e <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400660:	2301      	movs	r3, #1
  400662:	fa03 f101 	lsl.w	r1, r3, r1
  400666:	6241      	str	r1, [r0, #36]	; 0x24
  400668:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40066a:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  40066c:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  40066e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400672:	6243      	str	r3, [r0, #36]	; 0x24
  400674:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400676:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400678:	bf94      	ite	ls
  40067a:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  40067c:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  40067e:	2301      	movs	r3, #1
  400680:	fa03 f101 	lsl.w	r1, r3, r1
  400684:	6241      	str	r1, [r0, #36]	; 0x24
  400686:	4770      	bx	lr
  400688:	df00ffff 	.word	0xdf00ffff

0040068c <afec_set_callback>:
{
  40068c:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  40068e:	4c11      	ldr	r4, [pc, #68]	; (4006d4 <afec_set_callback+0x48>)
  400690:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400692:	bf0c      	ite	eq
  400694:	2417      	moveq	r4, #23
  400696:	2400      	movne	r4, #0
  400698:	440c      	add	r4, r1
  40069a:	4d0f      	ldr	r5, [pc, #60]	; (4006d8 <afec_set_callback+0x4c>)
  40069c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4006a0:	d10a      	bne.n	4006b8 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006a2:	4a0e      	ldr	r2, [pc, #56]	; (4006dc <afec_set_callback+0x50>)
  4006a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  4006a8:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006ac:	011b      	lsls	r3, r3, #4
  4006ae:	b2db      	uxtb	r3, r3
  4006b0:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006b4:	6014      	str	r4, [r2, #0]
  4006b6:	e009      	b.n	4006cc <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006b8:	4a08      	ldr	r2, [pc, #32]	; (4006dc <afec_set_callback+0x50>)
  4006ba:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4006be:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006c2:	011b      	lsls	r3, r3, #4
  4006c4:	b2db      	uxtb	r3, r3
  4006c6:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006ca:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  4006cc:	4b04      	ldr	r3, [pc, #16]	; (4006e0 <afec_set_callback+0x54>)
  4006ce:	4798      	blx	r3
  4006d0:	bd38      	pop	{r3, r4, r5, pc}
  4006d2:	bf00      	nop
  4006d4:	400b4000 	.word	0x400b4000
  4006d8:	20008d3c 	.word	0x20008d3c
  4006dc:	e000e100 	.word	0xe000e100
  4006e0:	00400655 	.word	0x00400655

004006e4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4006e4:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4006e6:	4802      	ldr	r0, [pc, #8]	; (4006f0 <AFEC0_Handler+0xc>)
  4006e8:	4b02      	ldr	r3, [pc, #8]	; (4006f4 <AFEC0_Handler+0x10>)
  4006ea:	4798      	blx	r3
  4006ec:	bd08      	pop	{r3, pc}
  4006ee:	bf00      	nop
  4006f0:	400b0000 	.word	0x400b0000
  4006f4:	00400479 	.word	0x00400479

004006f8 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4006f8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4006fa:	4802      	ldr	r0, [pc, #8]	; (400704 <AFEC1_Handler+0xc>)
  4006fc:	4b02      	ldr	r3, [pc, #8]	; (400708 <AFEC1_Handler+0x10>)
  4006fe:	4798      	blx	r3
  400700:	bd08      	pop	{r3, pc}
  400702:	bf00      	nop
  400704:	400b4000 	.word	0x400b4000
  400708:	00400479 	.word	0x00400479

0040070c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40070c:	b500      	push	{lr}
  40070e:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400710:	4b13      	ldr	r3, [pc, #76]	; (400760 <afec_enable+0x54>)
  400712:	4298      	cmp	r0, r3
  400714:	bf0c      	ite	eq
  400716:	201f      	moveq	r0, #31
  400718:	201e      	movne	r0, #30
  40071a:	4b12      	ldr	r3, [pc, #72]	; (400764 <afec_enable+0x58>)
  40071c:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40071e:	4b12      	ldr	r3, [pc, #72]	; (400768 <afec_enable+0x5c>)
  400720:	789b      	ldrb	r3, [r3, #2]
  400722:	2bff      	cmp	r3, #255	; 0xff
  400724:	d01a      	beq.n	40075c <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400726:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40072a:	fab3 f383 	clz	r3, r3
  40072e:	095b      	lsrs	r3, r3, #5
  400730:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400732:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400734:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400738:	2200      	movs	r2, #0
  40073a:	4b0c      	ldr	r3, [pc, #48]	; (40076c <afec_enable+0x60>)
  40073c:	701a      	strb	r2, [r3, #0]
	return flags;
  40073e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400740:	4a09      	ldr	r2, [pc, #36]	; (400768 <afec_enable+0x5c>)
  400742:	7893      	ldrb	r3, [r2, #2]
  400744:	3301      	adds	r3, #1
  400746:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400748:	b129      	cbz	r1, 400756 <afec_enable+0x4a>
		cpu_irq_enable();
  40074a:	2201      	movs	r2, #1
  40074c:	4b07      	ldr	r3, [pc, #28]	; (40076c <afec_enable+0x60>)
  40074e:	701a      	strb	r2, [r3, #0]
  400750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400754:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400756:	b003      	add	sp, #12
  400758:	f85d fb04 	ldr.w	pc, [sp], #4
  40075c:	e7fe      	b.n	40075c <afec_enable+0x50>
  40075e:	bf00      	nop
  400760:	400b4000 	.word	0x400b4000
  400764:	00400951 	.word	0x00400951
  400768:	20008d28 	.word	0x20008d28
  40076c:	20000000 	.word	0x20000000

00400770 <afec_disable>:
 * \brief Disable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_disable(Afec *const afec)
{
  400770:	b500      	push	{lr}
  400772:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Disable peripheral clock. */
	pmc_disable_periph_clk(pid);
  400774:	4b12      	ldr	r3, [pc, #72]	; (4007c0 <afec_disable+0x50>)
  400776:	4298      	cmp	r0, r3
  400778:	bf0c      	ite	eq
  40077a:	201f      	moveq	r0, #31
  40077c:	201e      	movne	r0, #30
  40077e:	4b11      	ldr	r3, [pc, #68]	; (4007c4 <afec_disable+0x54>)
  400780:	4798      	blx	r3
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  400782:	4b11      	ldr	r3, [pc, #68]	; (4007c8 <afec_disable+0x58>)
  400784:	789b      	ldrb	r3, [r3, #2]
  400786:	b903      	cbnz	r3, 40078a <afec_disable+0x1a>
  400788:	e7fe      	b.n	400788 <afec_disable+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40078a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40078e:	fab3 f383 	clz	r3, r3
  400792:	095b      	lsrs	r3, r3, #5
  400794:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400796:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400798:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40079c:	2200      	movs	r2, #0
  40079e:	4b0b      	ldr	r3, [pc, #44]	; (4007cc <afec_disable+0x5c>)
  4007a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4007a2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  4007a4:	4a08      	ldr	r2, [pc, #32]	; (4007c8 <afec_disable+0x58>)
  4007a6:	7893      	ldrb	r3, [r2, #2]
  4007a8:	3b01      	subs	r3, #1
  4007aa:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  4007ac:	b129      	cbz	r1, 4007ba <afec_disable+0x4a>
		cpu_irq_enable();
  4007ae:	2201      	movs	r2, #1
  4007b0:	4b06      	ldr	r3, [pc, #24]	; (4007cc <afec_disable+0x5c>)
  4007b2:	701a      	strb	r2, [r3, #0]
  4007b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007b8:	b662      	cpsie	i
	sleepmgr_unlock_mode(SLEEPMGR_SLEEP_WFI);
}
  4007ba:	b003      	add	sp, #12
  4007bc:	f85d fb04 	ldr.w	pc, [sp], #4
  4007c0:	400b4000 	.word	0x400b4000
  4007c4:	004009a5 	.word	0x004009a5
  4007c8:	20008d28 	.word	0x20008d28
  4007cc:	20000000 	.word	0x20000000

004007d0 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4007d0:	2301      	movs	r3, #1
  4007d2:	6003      	str	r3, [r0, #0]
  4007d4:	4770      	bx	lr

004007d6 <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  4007d6:	6843      	ldr	r3, [r0, #4]
  4007d8:	f023 0301 	bic.w	r3, r3, #1
  4007dc:	6043      	str	r3, [r0, #4]
  4007de:	4770      	bx	lr

004007e0 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  4007e0:	b949      	cbnz	r1, 4007f6 <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  4007e2:	6843      	ldr	r3, [r0, #4]
  4007e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4007e8:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  4007ea:	6843      	ldr	r3, [r0, #4]
  4007ec:	f023 0310 	bic.w	r3, r3, #16
  4007f0:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4007f2:	2000      	movs	r0, #0
  4007f4:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  4007f6:	6843      	ldr	r3, [r0, #4]
  4007f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4007fc:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  4007fe:	6843      	ldr	r3, [r0, #4]
  400800:	f043 0310 	orr.w	r3, r3, #16
  400804:	6043      	str	r3, [r0, #4]
  400806:	e7f4      	b.n	4007f2 <dacc_set_transfer_mode+0x12>

00400808 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  400808:	6201      	str	r1, [r0, #32]
  40080a:	4770      	bx	lr

0040080c <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  40080c:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  40080e:	2901      	cmp	r1, #1
  400810:	d901      	bls.n	400816 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  400812:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  400814:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  400816:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  40081a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  40081e:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  400820:	2000      	movs	r0, #0
  400822:	4770      	bx	lr

00400824 <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  400824:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  400826:	b941      	cbnz	r1, 40083a <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  400828:	4907      	ldr	r1, [pc, #28]	; (400848 <dacc_set_timing+0x24>)
  40082a:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  40082c:	0612      	lsls	r2, r2, #24
  40082e:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  400832:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  400834:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  400836:	2000      	movs	r0, #0
  400838:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  40083a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  40083e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  400842:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  400846:	e7f1      	b.n	40082c <dacc_set_timing+0x8>
  400848:	c0df00ff 	.word	0xc0df00ff

0040084c <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  40084c:	2901      	cmp	r1, #1
  40084e:	d901      	bls.n	400854 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  400850:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  400852:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400854:	2301      	movs	r3, #1
  400856:	fa03 f101 	lsl.w	r1, r3, r1
  40085a:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  40085c:	2000      	movs	r0, #0
  40085e:	4770      	bx	lr

00400860 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400860:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400864:	2000      	movs	r0, #0
  400866:	4770      	bx	lr

00400868 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400868:	4a17      	ldr	r2, [pc, #92]	; (4008c8 <pmc_switch_mck_to_pllack+0x60>)
  40086a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40086c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400870:	4318      	orrs	r0, r3
  400872:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400874:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400876:	f013 0f08 	tst.w	r3, #8
  40087a:	d10a      	bne.n	400892 <pmc_switch_mck_to_pllack+0x2a>
  40087c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400880:	4911      	ldr	r1, [pc, #68]	; (4008c8 <pmc_switch_mck_to_pllack+0x60>)
  400882:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400884:	f012 0f08 	tst.w	r2, #8
  400888:	d103      	bne.n	400892 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40088a:	3b01      	subs	r3, #1
  40088c:	d1f9      	bne.n	400882 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40088e:	2001      	movs	r0, #1
  400890:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400892:	4a0d      	ldr	r2, [pc, #52]	; (4008c8 <pmc_switch_mck_to_pllack+0x60>)
  400894:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400896:	f023 0303 	bic.w	r3, r3, #3
  40089a:	f043 0302 	orr.w	r3, r3, #2
  40089e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008a2:	f013 0f08 	tst.w	r3, #8
  4008a6:	d10a      	bne.n	4008be <pmc_switch_mck_to_pllack+0x56>
  4008a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008ac:	4906      	ldr	r1, [pc, #24]	; (4008c8 <pmc_switch_mck_to_pllack+0x60>)
  4008ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4008b0:	f012 0f08 	tst.w	r2, #8
  4008b4:	d105      	bne.n	4008c2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008b6:	3b01      	subs	r3, #1
  4008b8:	d1f9      	bne.n	4008ae <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4008ba:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4008bc:	4770      	bx	lr
	return 0;
  4008be:	2000      	movs	r0, #0
  4008c0:	4770      	bx	lr
  4008c2:	2000      	movs	r0, #0
  4008c4:	4770      	bx	lr
  4008c6:	bf00      	nop
  4008c8:	400e0400 	.word	0x400e0400

004008cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4008cc:	b9c8      	cbnz	r0, 400902 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008ce:	4a11      	ldr	r2, [pc, #68]	; (400914 <pmc_switch_mainck_to_xtal+0x48>)
  4008d0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4008d2:	0209      	lsls	r1, r1, #8
  4008d4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4008d6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4008da:	f023 0303 	bic.w	r3, r3, #3
  4008de:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4008e2:	f043 0301 	orr.w	r3, r3, #1
  4008e6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008e8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4008ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008ec:	f013 0f01 	tst.w	r3, #1
  4008f0:	d0fb      	beq.n	4008ea <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4008f2:	4a08      	ldr	r2, [pc, #32]	; (400914 <pmc_switch_mainck_to_xtal+0x48>)
  4008f4:	6a13      	ldr	r3, [r2, #32]
  4008f6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4008fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4008fe:	6213      	str	r3, [r2, #32]
  400900:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400902:	4904      	ldr	r1, [pc, #16]	; (400914 <pmc_switch_mainck_to_xtal+0x48>)
  400904:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400906:	4a04      	ldr	r2, [pc, #16]	; (400918 <pmc_switch_mainck_to_xtal+0x4c>)
  400908:	401a      	ands	r2, r3
  40090a:	4b04      	ldr	r3, [pc, #16]	; (40091c <pmc_switch_mainck_to_xtal+0x50>)
  40090c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40090e:	620b      	str	r3, [r1, #32]
  400910:	4770      	bx	lr
  400912:	bf00      	nop
  400914:	400e0400 	.word	0x400e0400
  400918:	fec8fffc 	.word	0xfec8fffc
  40091c:	01370002 	.word	0x01370002

00400920 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400920:	4b02      	ldr	r3, [pc, #8]	; (40092c <pmc_osc_is_ready_mainck+0xc>)
  400922:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400924:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400928:	4770      	bx	lr
  40092a:	bf00      	nop
  40092c:	400e0400 	.word	0x400e0400

00400930 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400930:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400934:	4b01      	ldr	r3, [pc, #4]	; (40093c <pmc_disable_pllack+0xc>)
  400936:	629a      	str	r2, [r3, #40]	; 0x28
  400938:	4770      	bx	lr
  40093a:	bf00      	nop
  40093c:	400e0400 	.word	0x400e0400

00400940 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400940:	4b02      	ldr	r3, [pc, #8]	; (40094c <pmc_is_locked_pllack+0xc>)
  400942:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400944:	f000 0002 	and.w	r0, r0, #2
  400948:	4770      	bx	lr
  40094a:	bf00      	nop
  40094c:	400e0400 	.word	0x400e0400

00400950 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400950:	282f      	cmp	r0, #47	; 0x2f
  400952:	d81e      	bhi.n	400992 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400954:	281f      	cmp	r0, #31
  400956:	d80c      	bhi.n	400972 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400958:	4b11      	ldr	r3, [pc, #68]	; (4009a0 <pmc_enable_periph_clk+0x50>)
  40095a:	699a      	ldr	r2, [r3, #24]
  40095c:	2301      	movs	r3, #1
  40095e:	4083      	lsls	r3, r0
  400960:	4393      	bics	r3, r2
  400962:	d018      	beq.n	400996 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400964:	2301      	movs	r3, #1
  400966:	fa03 f000 	lsl.w	r0, r3, r0
  40096a:	4b0d      	ldr	r3, [pc, #52]	; (4009a0 <pmc_enable_periph_clk+0x50>)
  40096c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40096e:	2000      	movs	r0, #0
  400970:	4770      	bx	lr
		ul_id -= 32;
  400972:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400974:	4b0a      	ldr	r3, [pc, #40]	; (4009a0 <pmc_enable_periph_clk+0x50>)
  400976:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40097a:	2301      	movs	r3, #1
  40097c:	4083      	lsls	r3, r0
  40097e:	4393      	bics	r3, r2
  400980:	d00b      	beq.n	40099a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400982:	2301      	movs	r3, #1
  400984:	fa03 f000 	lsl.w	r0, r3, r0
  400988:	4b05      	ldr	r3, [pc, #20]	; (4009a0 <pmc_enable_periph_clk+0x50>)
  40098a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40098e:	2000      	movs	r0, #0
  400990:	4770      	bx	lr
		return 1;
  400992:	2001      	movs	r0, #1
  400994:	4770      	bx	lr
	return 0;
  400996:	2000      	movs	r0, #0
  400998:	4770      	bx	lr
  40099a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40099c:	4770      	bx	lr
  40099e:	bf00      	nop
  4009a0:	400e0400 	.word	0x400e0400

004009a4 <pmc_disable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4009a4:	282f      	cmp	r0, #47	; 0x2f
  4009a6:	d822      	bhi.n	4009ee <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  4009a8:	281f      	cmp	r0, #31
  4009aa:	d80e      	bhi.n	4009ca <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  4009ac:	4b11      	ldr	r3, [pc, #68]	; (4009f4 <pmc_disable_periph_clk+0x50>)
  4009ae:	699a      	ldr	r2, [r3, #24]
  4009b0:	2301      	movs	r3, #1
  4009b2:	4083      	lsls	r3, r0
  4009b4:	4393      	bics	r3, r2
  4009b6:	d001      	beq.n	4009bc <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  4009b8:	2000      	movs	r0, #0
  4009ba:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  4009bc:	2301      	movs	r3, #1
  4009be:	fa03 f000 	lsl.w	r0, r3, r0
  4009c2:	4b0c      	ldr	r3, [pc, #48]	; (4009f4 <pmc_disable_periph_clk+0x50>)
  4009c4:	6158      	str	r0, [r3, #20]
	return 0;
  4009c6:	2000      	movs	r0, #0
  4009c8:	4770      	bx	lr
		ul_id -= 32;
  4009ca:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4009cc:	4b09      	ldr	r3, [pc, #36]	; (4009f4 <pmc_disable_periph_clk+0x50>)
  4009ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4009d2:	2301      	movs	r3, #1
  4009d4:	4083      	lsls	r3, r0
  4009d6:	4393      	bics	r3, r2
  4009d8:	d001      	beq.n	4009de <pmc_disable_periph_clk+0x3a>
	return 0;
  4009da:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4009dc:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  4009de:	2301      	movs	r3, #1
  4009e0:	fa03 f000 	lsl.w	r0, r3, r0
  4009e4:	4b03      	ldr	r3, [pc, #12]	; (4009f4 <pmc_disable_periph_clk+0x50>)
  4009e6:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  4009ea:	2000      	movs	r0, #0
  4009ec:	4770      	bx	lr
		return 1;
  4009ee:	2001      	movs	r0, #1
  4009f0:	4770      	bx	lr
  4009f2:	bf00      	nop
  4009f4:	400e0400 	.word	0x400e0400

004009f8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4009f8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4009fa:	0189      	lsls	r1, r1, #6
  4009fc:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4009fe:	2402      	movs	r4, #2
  400a00:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400a02:	f04f 31ff 	mov.w	r1, #4294967295
  400a06:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400a08:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400a0a:	605a      	str	r2, [r3, #4]
}
  400a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a10:	4770      	bx	lr

00400a12 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400a12:	0189      	lsls	r1, r1, #6
  400a14:	2305      	movs	r3, #5
  400a16:	5043      	str	r3, [r0, r1]
  400a18:	4770      	bx	lr

00400a1a <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400a1a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400a1e:	61ca      	str	r2, [r1, #28]
  400a20:	4770      	bx	lr

00400a22 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a22:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400a26:	624a      	str	r2, [r1, #36]	; 0x24
  400a28:	4770      	bx	lr

00400a2a <tc_disable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a2a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IDR = ul_sources;
  400a2e:	628a      	str	r2, [r1, #40]	; 0x28
  400a30:	4770      	bx	lr

00400a32 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400a32:	b4f0      	push	{r4, r5, r6, r7}
  400a34:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400a36:	2402      	movs	r4, #2
  400a38:	9401      	str	r4, [sp, #4]
  400a3a:	2408      	movs	r4, #8
  400a3c:	9402      	str	r4, [sp, #8]
  400a3e:	2420      	movs	r4, #32
  400a40:	9403      	str	r4, [sp, #12]
  400a42:	2480      	movs	r4, #128	; 0x80
  400a44:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400a46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400a48:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400a4a:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400a4c:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400a50:	d814      	bhi.n	400a7c <tc_find_mck_divisor+0x4a>
  400a52:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400a54:	42a0      	cmp	r0, r4
  400a56:	d217      	bcs.n	400a88 <tc_find_mck_divisor+0x56>
  400a58:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400a5a:	af01      	add	r7, sp, #4
  400a5c:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400a60:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400a64:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400a66:	4284      	cmp	r4, r0
  400a68:	d30a      	bcc.n	400a80 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400a6a:	4286      	cmp	r6, r0
  400a6c:	d90d      	bls.n	400a8a <tc_find_mck_divisor+0x58>
			ul_index++) {
  400a6e:	3501      	adds	r5, #1
	for (ul_index = 0;
  400a70:	2d05      	cmp	r5, #5
  400a72:	d1f3      	bne.n	400a5c <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400a74:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400a76:	b006      	add	sp, #24
  400a78:	bcf0      	pop	{r4, r5, r6, r7}
  400a7a:	4770      	bx	lr
			return 0;
  400a7c:	2000      	movs	r0, #0
  400a7e:	e7fa      	b.n	400a76 <tc_find_mck_divisor+0x44>
  400a80:	2000      	movs	r0, #0
  400a82:	e7f8      	b.n	400a76 <tc_find_mck_divisor+0x44>
	return 1;
  400a84:	2001      	movs	r0, #1
  400a86:	e7f6      	b.n	400a76 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400a88:	2500      	movs	r5, #0
	if (p_uldiv) {
  400a8a:	b12a      	cbz	r2, 400a98 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400a8c:	a906      	add	r1, sp, #24
  400a8e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400a92:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400a96:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400a98:	2b00      	cmp	r3, #0
  400a9a:	d0f3      	beq.n	400a84 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400a9c:	601d      	str	r5, [r3, #0]
	return 1;
  400a9e:	2001      	movs	r0, #1
  400aa0:	e7e9      	b.n	400a76 <tc_find_mck_divisor+0x44>

00400aa2 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400aa2:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400aa4:	23ac      	movs	r3, #172	; 0xac
  400aa6:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400aa8:	680b      	ldr	r3, [r1, #0]
  400aaa:	684a      	ldr	r2, [r1, #4]
  400aac:	fbb3 f3f2 	udiv	r3, r3, r2
  400ab0:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400ab2:	1e5c      	subs	r4, r3, #1
  400ab4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400ab8:	4294      	cmp	r4, r2
  400aba:	d80c      	bhi.n	400ad6 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400abc:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400abe:	688b      	ldr	r3, [r1, #8]
  400ac0:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400ac2:	f240 2302 	movw	r3, #514	; 0x202
  400ac6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400aca:	2350      	movs	r3, #80	; 0x50
  400acc:	6003      	str	r3, [r0, #0]

	return 0;
  400ace:	2000      	movs	r0, #0
}
  400ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ad4:	4770      	bx	lr
		return 1;
  400ad6:	2001      	movs	r0, #1
  400ad8:	e7fa      	b.n	400ad0 <uart_init+0x2e>

00400ada <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400ada:	6943      	ldr	r3, [r0, #20]
  400adc:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400ae0:	bf1a      	itte	ne
  400ae2:	61c1      	strne	r1, [r0, #28]
	return 0;
  400ae4:	2000      	movne	r0, #0
		return 1;
  400ae6:	2001      	moveq	r0, #1
}
  400ae8:	4770      	bx	lr

00400aea <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400aea:	6943      	ldr	r3, [r0, #20]
  400aec:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400af0:	bf1d      	ittte	ne
  400af2:	6983      	ldrne	r3, [r0, #24]
  400af4:	700b      	strbne	r3, [r1, #0]
	return 0;
  400af6:	2000      	movne	r0, #0
		return 1;
  400af8:	2001      	moveq	r0, #1
}
  400afa:	4770      	bx	lr

00400afc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400afc:	6943      	ldr	r3, [r0, #20]
  400afe:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400b02:	bf1d      	ittte	ne
  400b04:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400b08:	61c1      	strne	r1, [r0, #28]
	return 0;
  400b0a:	2000      	movne	r0, #0
		return 1;
  400b0c:	2001      	moveq	r0, #1
}
  400b0e:	4770      	bx	lr

00400b10 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b10:	6943      	ldr	r3, [r0, #20]
  400b12:	f013 0f01 	tst.w	r3, #1
  400b16:	d005      	beq.n	400b24 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b18:	6983      	ldr	r3, [r0, #24]
  400b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b1e:	600b      	str	r3, [r1, #0]

	return 0;
  400b20:	2000      	movs	r0, #0
  400b22:	4770      	bx	lr
		return 1;
  400b24:	2001      	movs	r0, #1
}
  400b26:	4770      	bx	lr

00400b28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b28:	e7fe      	b.n	400b28 <Dummy_Handler>
	...

00400b2c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400b2c:	b500      	push	{lr}
  400b2e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400b30:	4b25      	ldr	r3, [pc, #148]	; (400bc8 <Reset_Handler+0x9c>)
  400b32:	4a26      	ldr	r2, [pc, #152]	; (400bcc <Reset_Handler+0xa0>)
  400b34:	429a      	cmp	r2, r3
  400b36:	d010      	beq.n	400b5a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400b38:	4b25      	ldr	r3, [pc, #148]	; (400bd0 <Reset_Handler+0xa4>)
  400b3a:	4a23      	ldr	r2, [pc, #140]	; (400bc8 <Reset_Handler+0x9c>)
  400b3c:	429a      	cmp	r2, r3
  400b3e:	d20c      	bcs.n	400b5a <Reset_Handler+0x2e>
  400b40:	3b01      	subs	r3, #1
  400b42:	1a9b      	subs	r3, r3, r2
  400b44:	f023 0303 	bic.w	r3, r3, #3
  400b48:	3304      	adds	r3, #4
  400b4a:	4413      	add	r3, r2
  400b4c:	491f      	ldr	r1, [pc, #124]	; (400bcc <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400b4e:	f851 0b04 	ldr.w	r0, [r1], #4
  400b52:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400b56:	429a      	cmp	r2, r3
  400b58:	d1f9      	bne.n	400b4e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400b5a:	4b1e      	ldr	r3, [pc, #120]	; (400bd4 <Reset_Handler+0xa8>)
  400b5c:	4a1e      	ldr	r2, [pc, #120]	; (400bd8 <Reset_Handler+0xac>)
  400b5e:	429a      	cmp	r2, r3
  400b60:	d20a      	bcs.n	400b78 <Reset_Handler+0x4c>
  400b62:	3b01      	subs	r3, #1
  400b64:	1a9b      	subs	r3, r3, r2
  400b66:	f023 0303 	bic.w	r3, r3, #3
  400b6a:	3304      	adds	r3, #4
  400b6c:	4413      	add	r3, r2
		*pDest++ = 0;
  400b6e:	2100      	movs	r1, #0
  400b70:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400b74:	4293      	cmp	r3, r2
  400b76:	d1fb      	bne.n	400b70 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400b78:	4a18      	ldr	r2, [pc, #96]	; (400bdc <Reset_Handler+0xb0>)
  400b7a:	4b19      	ldr	r3, [pc, #100]	; (400be0 <Reset_Handler+0xb4>)
  400b7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400b80:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400b82:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400b86:	fab3 f383 	clz	r3, r3
  400b8a:	095b      	lsrs	r3, r3, #5
  400b8c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400b8e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400b90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400b94:	2200      	movs	r2, #0
  400b96:	4b13      	ldr	r3, [pc, #76]	; (400be4 <Reset_Handler+0xb8>)
  400b98:	701a      	strb	r2, [r3, #0]
	return flags;
  400b9a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400b9c:	4a12      	ldr	r2, [pc, #72]	; (400be8 <Reset_Handler+0xbc>)
  400b9e:	6813      	ldr	r3, [r2, #0]
  400ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ba4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400ba6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400baa:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400bae:	b129      	cbz	r1, 400bbc <Reset_Handler+0x90>
		cpu_irq_enable();
  400bb0:	2201      	movs	r2, #1
  400bb2:	4b0c      	ldr	r3, [pc, #48]	; (400be4 <Reset_Handler+0xb8>)
  400bb4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400bb6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400bba:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400bbc:	4b0b      	ldr	r3, [pc, #44]	; (400bec <Reset_Handler+0xc0>)
  400bbe:	4798      	blx	r3

	/* Branch to main function */
	main();
  400bc0:	4b0b      	ldr	r3, [pc, #44]	; (400bf0 <Reset_Handler+0xc4>)
  400bc2:	4798      	blx	r3
  400bc4:	e7fe      	b.n	400bc4 <Reset_Handler+0x98>
  400bc6:	bf00      	nop
  400bc8:	20000000 	.word	0x20000000
  400bcc:	004068d4 	.word	0x004068d4
  400bd0:	200009c0 	.word	0x200009c0
  400bd4:	20008e20 	.word	0x20008e20
  400bd8:	200009c0 	.word	0x200009c0
  400bdc:	e000ed00 	.word	0xe000ed00
  400be0:	00400000 	.word	0x00400000
  400be4:	20000000 	.word	0x20000000
  400be8:	e000ed88 	.word	0xe000ed88
  400bec:	00403a65 	.word	0x00403a65
  400bf0:	00401865 	.word	0x00401865

00400bf4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400bf4:	4b3b      	ldr	r3, [pc, #236]	; (400ce4 <SystemCoreClockUpdate+0xf0>)
  400bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bf8:	f003 0303 	and.w	r3, r3, #3
  400bfc:	2b01      	cmp	r3, #1
  400bfe:	d01d      	beq.n	400c3c <SystemCoreClockUpdate+0x48>
  400c00:	b183      	cbz	r3, 400c24 <SystemCoreClockUpdate+0x30>
  400c02:	2b02      	cmp	r3, #2
  400c04:	d036      	beq.n	400c74 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400c06:	4b37      	ldr	r3, [pc, #220]	; (400ce4 <SystemCoreClockUpdate+0xf0>)
  400c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c0e:	2b70      	cmp	r3, #112	; 0x70
  400c10:	d05f      	beq.n	400cd2 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400c12:	4b34      	ldr	r3, [pc, #208]	; (400ce4 <SystemCoreClockUpdate+0xf0>)
  400c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c16:	4934      	ldr	r1, [pc, #208]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400c18:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c1c:	680b      	ldr	r3, [r1, #0]
  400c1e:	40d3      	lsrs	r3, r2
  400c20:	600b      	str	r3, [r1, #0]
  400c22:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400c24:	4b31      	ldr	r3, [pc, #196]	; (400cec <SystemCoreClockUpdate+0xf8>)
  400c26:	695b      	ldr	r3, [r3, #20]
  400c28:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c2c:	bf14      	ite	ne
  400c2e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c32:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c36:	4b2c      	ldr	r3, [pc, #176]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400c38:	601a      	str	r2, [r3, #0]
  400c3a:	e7e4      	b.n	400c06 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c3c:	4b29      	ldr	r3, [pc, #164]	; (400ce4 <SystemCoreClockUpdate+0xf0>)
  400c3e:	6a1b      	ldr	r3, [r3, #32]
  400c40:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c44:	d003      	beq.n	400c4e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400c46:	4a2a      	ldr	r2, [pc, #168]	; (400cf0 <SystemCoreClockUpdate+0xfc>)
  400c48:	4b27      	ldr	r3, [pc, #156]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400c4a:	601a      	str	r2, [r3, #0]
  400c4c:	e7db      	b.n	400c06 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c4e:	4a29      	ldr	r2, [pc, #164]	; (400cf4 <SystemCoreClockUpdate+0x100>)
  400c50:	4b25      	ldr	r3, [pc, #148]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400c52:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400c54:	4b23      	ldr	r3, [pc, #140]	; (400ce4 <SystemCoreClockUpdate+0xf0>)
  400c56:	6a1b      	ldr	r3, [r3, #32]
  400c58:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c5c:	2b10      	cmp	r3, #16
  400c5e:	d005      	beq.n	400c6c <SystemCoreClockUpdate+0x78>
  400c60:	2b20      	cmp	r3, #32
  400c62:	d1d0      	bne.n	400c06 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400c64:	4a22      	ldr	r2, [pc, #136]	; (400cf0 <SystemCoreClockUpdate+0xfc>)
  400c66:	4b20      	ldr	r3, [pc, #128]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400c68:	601a      	str	r2, [r3, #0]
				break;
  400c6a:	e7cc      	b.n	400c06 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400c6c:	4a22      	ldr	r2, [pc, #136]	; (400cf8 <SystemCoreClockUpdate+0x104>)
  400c6e:	4b1e      	ldr	r3, [pc, #120]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400c70:	601a      	str	r2, [r3, #0]
				break;
  400c72:	e7c8      	b.n	400c06 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c74:	4b1b      	ldr	r3, [pc, #108]	; (400ce4 <SystemCoreClockUpdate+0xf0>)
  400c76:	6a1b      	ldr	r3, [r3, #32]
  400c78:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c7c:	d016      	beq.n	400cac <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400c7e:	4a1c      	ldr	r2, [pc, #112]	; (400cf0 <SystemCoreClockUpdate+0xfc>)
  400c80:	4b19      	ldr	r3, [pc, #100]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400c82:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400c84:	4b17      	ldr	r3, [pc, #92]	; (400ce4 <SystemCoreClockUpdate+0xf0>)
  400c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c88:	f003 0303 	and.w	r3, r3, #3
  400c8c:	2b02      	cmp	r3, #2
  400c8e:	d1ba      	bne.n	400c06 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400c90:	4a14      	ldr	r2, [pc, #80]	; (400ce4 <SystemCoreClockUpdate+0xf0>)
  400c92:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400c94:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400c96:	4814      	ldr	r0, [pc, #80]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400c98:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400c9c:	6803      	ldr	r3, [r0, #0]
  400c9e:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ca2:	b2d2      	uxtb	r2, r2
  400ca4:	fbb3 f3f2 	udiv	r3, r3, r2
  400ca8:	6003      	str	r3, [r0, #0]
  400caa:	e7ac      	b.n	400c06 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400cac:	4a11      	ldr	r2, [pc, #68]	; (400cf4 <SystemCoreClockUpdate+0x100>)
  400cae:	4b0e      	ldr	r3, [pc, #56]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400cb0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400cb2:	4b0c      	ldr	r3, [pc, #48]	; (400ce4 <SystemCoreClockUpdate+0xf0>)
  400cb4:	6a1b      	ldr	r3, [r3, #32]
  400cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cba:	2b10      	cmp	r3, #16
  400cbc:	d005      	beq.n	400cca <SystemCoreClockUpdate+0xd6>
  400cbe:	2b20      	cmp	r3, #32
  400cc0:	d1e0      	bne.n	400c84 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400cc2:	4a0b      	ldr	r2, [pc, #44]	; (400cf0 <SystemCoreClockUpdate+0xfc>)
  400cc4:	4b08      	ldr	r3, [pc, #32]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400cc6:	601a      	str	r2, [r3, #0]
				break;
  400cc8:	e7dc      	b.n	400c84 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400cca:	4a0b      	ldr	r2, [pc, #44]	; (400cf8 <SystemCoreClockUpdate+0x104>)
  400ccc:	4b06      	ldr	r3, [pc, #24]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400cce:	601a      	str	r2, [r3, #0]
				break;
  400cd0:	e7d8      	b.n	400c84 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400cd2:	4a05      	ldr	r2, [pc, #20]	; (400ce8 <SystemCoreClockUpdate+0xf4>)
  400cd4:	6813      	ldr	r3, [r2, #0]
  400cd6:	4909      	ldr	r1, [pc, #36]	; (400cfc <SystemCoreClockUpdate+0x108>)
  400cd8:	fba1 1303 	umull	r1, r3, r1, r3
  400cdc:	085b      	lsrs	r3, r3, #1
  400cde:	6013      	str	r3, [r2, #0]
  400ce0:	4770      	bx	lr
  400ce2:	bf00      	nop
  400ce4:	400e0400 	.word	0x400e0400
  400ce8:	20000004 	.word	0x20000004
  400cec:	400e1810 	.word	0x400e1810
  400cf0:	00b71b00 	.word	0x00b71b00
  400cf4:	003d0900 	.word	0x003d0900
  400cf8:	007a1200 	.word	0x007a1200
  400cfc:	aaaaaaab 	.word	0xaaaaaaab

00400d00 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400d00:	4b12      	ldr	r3, [pc, #72]	; (400d4c <system_init_flash+0x4c>)
  400d02:	4298      	cmp	r0, r3
  400d04:	d911      	bls.n	400d2a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400d06:	4b12      	ldr	r3, [pc, #72]	; (400d50 <system_init_flash+0x50>)
  400d08:	4298      	cmp	r0, r3
  400d0a:	d913      	bls.n	400d34 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400d0c:	4b11      	ldr	r3, [pc, #68]	; (400d54 <system_init_flash+0x54>)
  400d0e:	4298      	cmp	r0, r3
  400d10:	d914      	bls.n	400d3c <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400d12:	4b11      	ldr	r3, [pc, #68]	; (400d58 <system_init_flash+0x58>)
  400d14:	4298      	cmp	r0, r3
  400d16:	d915      	bls.n	400d44 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400d18:	4b10      	ldr	r3, [pc, #64]	; (400d5c <system_init_flash+0x5c>)
  400d1a:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d1c:	bf94      	ite	ls
  400d1e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d22:	4a0f      	ldrhi	r2, [pc, #60]	; (400d60 <system_init_flash+0x60>)
  400d24:	4b0f      	ldr	r3, [pc, #60]	; (400d64 <system_init_flash+0x64>)
  400d26:	601a      	str	r2, [r3, #0]
  400d28:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d2e:	4b0d      	ldr	r3, [pc, #52]	; (400d64 <system_init_flash+0x64>)
  400d30:	601a      	str	r2, [r3, #0]
  400d32:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d34:	4a0c      	ldr	r2, [pc, #48]	; (400d68 <system_init_flash+0x68>)
  400d36:	4b0b      	ldr	r3, [pc, #44]	; (400d64 <system_init_flash+0x64>)
  400d38:	601a      	str	r2, [r3, #0]
  400d3a:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d3c:	4a0b      	ldr	r2, [pc, #44]	; (400d6c <system_init_flash+0x6c>)
  400d3e:	4b09      	ldr	r3, [pc, #36]	; (400d64 <system_init_flash+0x64>)
  400d40:	601a      	str	r2, [r3, #0]
  400d42:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d44:	4a0a      	ldr	r2, [pc, #40]	; (400d70 <system_init_flash+0x70>)
  400d46:	4b07      	ldr	r3, [pc, #28]	; (400d64 <system_init_flash+0x64>)
  400d48:	601a      	str	r2, [r3, #0]
  400d4a:	4770      	bx	lr
  400d4c:	01312cff 	.word	0x01312cff
  400d50:	026259ff 	.word	0x026259ff
  400d54:	039386ff 	.word	0x039386ff
  400d58:	04c4b3ff 	.word	0x04c4b3ff
  400d5c:	05f5e0ff 	.word	0x05f5e0ff
  400d60:	04000500 	.word	0x04000500
  400d64:	400e0a00 	.word	0x400e0a00
  400d68:	04000100 	.word	0x04000100
  400d6c:	04000200 	.word	0x04000200
  400d70:	04000300 	.word	0x04000300

00400d74 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400d74:	4b0a      	ldr	r3, [pc, #40]	; (400da0 <_sbrk+0x2c>)
  400d76:	681b      	ldr	r3, [r3, #0]
  400d78:	b153      	cbz	r3, 400d90 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400d7a:	4b09      	ldr	r3, [pc, #36]	; (400da0 <_sbrk+0x2c>)
  400d7c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400d7e:	181a      	adds	r2, r3, r0
  400d80:	4908      	ldr	r1, [pc, #32]	; (400da4 <_sbrk+0x30>)
  400d82:	4291      	cmp	r1, r2
  400d84:	db08      	blt.n	400d98 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400d86:	4610      	mov	r0, r2
  400d88:	4a05      	ldr	r2, [pc, #20]	; (400da0 <_sbrk+0x2c>)
  400d8a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400d8c:	4618      	mov	r0, r3
  400d8e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400d90:	4a05      	ldr	r2, [pc, #20]	; (400da8 <_sbrk+0x34>)
  400d92:	4b03      	ldr	r3, [pc, #12]	; (400da0 <_sbrk+0x2c>)
  400d94:	601a      	str	r2, [r3, #0]
  400d96:	e7f0      	b.n	400d7a <_sbrk+0x6>
		return (caddr_t) -1;	
  400d98:	f04f 30ff 	mov.w	r0, #4294967295
}
  400d9c:	4770      	bx	lr
  400d9e:	bf00      	nop
  400da0:	200009dc 	.word	0x200009dc
  400da4:	2001fffc 	.word	0x2001fffc
  400da8:	2000be20 	.word	0x2000be20

00400dac <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400dac:	f04f 30ff 	mov.w	r0, #4294967295
  400db0:	4770      	bx	lr

00400db2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400db6:	604b      	str	r3, [r1, #4]

	return 0;
}
  400db8:	2000      	movs	r0, #0
  400dba:	4770      	bx	lr

00400dbc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400dbc:	2001      	movs	r0, #1
  400dbe:	4770      	bx	lr

00400dc0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400dc0:	2000      	movs	r0, #0
  400dc2:	4770      	bx	lr

00400dc4 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  400dc4:	b500      	push	{lr}
  400dc6:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  400dc8:	2201      	movs	r2, #1
  400dca:	f10d 0107 	add.w	r1, sp, #7
  400dce:	4810      	ldr	r0, [pc, #64]	; (400e10 <USART0_Handler+0x4c>)
  400dd0:	4b10      	ldr	r3, [pc, #64]	; (400e14 <USART0_Handler+0x50>)
  400dd2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400dd4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400dd6:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  400dda:	2200      	movs	r2, #0
  400ddc:	4b0e      	ldr	r3, [pc, #56]	; (400e18 <USART0_Handler+0x54>)
  400dde:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  400de0:	4b0e      	ldr	r3, [pc, #56]	; (400e1c <USART0_Handler+0x58>)
  400de2:	781b      	ldrb	r3, [r3, #0]
  400de4:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400de8:	4a0d      	ldr	r2, [pc, #52]	; (400e20 <USART0_Handler+0x5c>)
  400dea:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  400dec:	2b9b      	cmp	r3, #155	; 0x9b
  400dee:	d00b      	beq.n	400e08 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  400df0:	3301      	adds	r3, #1
  400df2:	4a0a      	ldr	r2, [pc, #40]	; (400e1c <USART0_Handler+0x58>)
  400df4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  400df6:	2201      	movs	r2, #1
  400df8:	4b07      	ldr	r3, [pc, #28]	; (400e18 <USART0_Handler+0x54>)
  400dfa:	701a      	strb	r2, [r3, #0]
  400dfc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e00:	b662      	cpsie	i
}
  400e02:	b003      	add	sp, #12
  400e04:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  400e08:	2200      	movs	r2, #0
  400e0a:	4b04      	ldr	r3, [pc, #16]	; (400e1c <USART0_Handler+0x58>)
  400e0c:	701a      	strb	r2, [r3, #0]
  400e0e:	e7f2      	b.n	400df6 <USART0_Handler+0x32>
  400e10:	400a0000 	.word	0x400a0000
  400e14:	0040025d 	.word	0x0040025d
  400e18:	20000000 	.word	0x20000000
  400e1c:	20000a7c 	.word	0x20000a7c
  400e20:	200009e0 	.word	0x200009e0

00400e24 <addSample>:
		}
	}	
}

void addSample(uint16_t sample){
	if (bufferIndex<buffersize)
  400e24:	4b09      	ldr	r3, [pc, #36]	; (400e4c <addSample+0x28>)
  400e26:	881b      	ldrh	r3, [r3, #0]
  400e28:	f242 028d 	movw	r2, #8333	; 0x208d
  400e2c:	4293      	cmp	r3, r2
  400e2e:	d808      	bhi.n	400e42 <addSample+0x1e>
	{
		if (currentbuffer)
  400e30:	4a07      	ldr	r2, [pc, #28]	; (400e50 <addSample+0x2c>)
  400e32:	7812      	ldrb	r2, [r2, #0]
  400e34:	b132      	cbz	r2, 400e44 <addSample+0x20>
		{
			//puts("filling buffer 1\n");
			buffer1[bufferIndex]= sample;
  400e36:	4a07      	ldr	r2, [pc, #28]	; (400e54 <addSample+0x30>)
  400e38:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
		}else{
			//puts("filling buffer 0\n");
			buffer0[bufferIndex]= sample;
		}
		bufferIndex++;
  400e3c:	3301      	adds	r3, #1
  400e3e:	4a03      	ldr	r2, [pc, #12]	; (400e4c <addSample+0x28>)
  400e40:	8013      	strh	r3, [r2, #0]
  400e42:	4770      	bx	lr
			buffer0[bufferIndex]= sample;
  400e44:	4a04      	ldr	r2, [pc, #16]	; (400e58 <addSample+0x34>)
  400e46:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  400e4a:	e7f7      	b.n	400e3c <addSample+0x18>
  400e4c:	20008cb8 	.word	0x20008cb8
  400e50:	20008cbc 	.word	0x20008cbc
  400e54:	20004b9c 	.word	0x20004b9c
  400e58:	20000a80 	.word	0x20000a80

00400e5c <switchBuffer>:
	}
}

volatile void switchBuffer(void){
	buffersFilled++;
  400e5c:	4a06      	ldr	r2, [pc, #24]	; (400e78 <switchBuffer+0x1c>)
  400e5e:	8813      	ldrh	r3, [r2, #0]
  400e60:	3301      	adds	r3, #1
  400e62:	8013      	strh	r3, [r2, #0]
	bufferIndex=0;
  400e64:	2200      	movs	r2, #0
  400e66:	4b05      	ldr	r3, [pc, #20]	; (400e7c <switchBuffer+0x20>)
  400e68:	801a      	strh	r2, [r3, #0]
	//puts("buffer index reset\n");
	currentbuffer= !currentbuffer;
  400e6a:	4a05      	ldr	r2, [pc, #20]	; (400e80 <switchBuffer+0x24>)
  400e6c:	7813      	ldrb	r3, [r2, #0]
  400e6e:	f083 0301 	eor.w	r3, r3, #1
  400e72:	7013      	strb	r3, [r2, #0]
  400e74:	4770      	bx	lr
  400e76:	bf00      	nop
  400e78:	20008cba 	.word	0x20008cba
  400e7c:	20008cb8 	.word	0x20008cb8
  400e80:	20008cbc 	.word	0x20008cbc

00400e84 <cycleEnded>:
}

void cycleEnded(void){
  400e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("%u\n\r", bufferIndex);
	if (bufferIndex<buffersize)
  400e86:	4b0a      	ldr	r3, [pc, #40]	; (400eb0 <cycleEnded+0x2c>)
  400e88:	881b      	ldrh	r3, [r3, #0]
  400e8a:	f242 028d 	movw	r2, #8333	; 0x208d
  400e8e:	4293      	cmp	r3, r2
  400e90:	d80a      	bhi.n	400ea8 <cycleEnded+0x24>
	{
		for (int i=bufferIndex;i<buffersize;i++)
  400e92:	461c      	mov	r4, r3
  400e94:	dc08      	bgt.n	400ea8 <cycleEnded+0x24>
		{
			addSample(0);
  400e96:	2700      	movs	r7, #0
  400e98:	4e06      	ldr	r6, [pc, #24]	; (400eb4 <cycleEnded+0x30>)
		for (int i=bufferIndex;i<buffersize;i++)
  400e9a:	f242 058e 	movw	r5, #8334	; 0x208e
			addSample(0);
  400e9e:	4638      	mov	r0, r7
  400ea0:	47b0      	blx	r6
		for (int i=bufferIndex;i<buffersize;i++)
  400ea2:	3401      	adds	r4, #1
  400ea4:	42ac      	cmp	r4, r5
  400ea6:	d1fa      	bne.n	400e9e <cycleEnded+0x1a>
		}
	} 
	
	switchBuffer();
  400ea8:	4b03      	ldr	r3, [pc, #12]	; (400eb8 <cycleEnded+0x34>)
  400eaa:	4798      	blx	r3
  400eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400eae:	bf00      	nop
  400eb0:	20008cb8 	.word	0x20008cb8
  400eb4:	00400e25 	.word	0x00400e25
  400eb8:	00400e5d 	.word	0x00400e5d

00400ebc <getbuffersFilled>:
	
}

uint16_t getbuffersFilled(){
	return buffersFilled;
}
  400ebc:	4b01      	ldr	r3, [pc, #4]	; (400ec4 <getbuffersFilled+0x8>)
  400ebe:	8818      	ldrh	r0, [r3, #0]
  400ec0:	4770      	bx	lr
  400ec2:	bf00      	nop
  400ec4:	20008cba 	.word	0x20008cba

00400ec8 <getFilledBuffer>:
		printf("%u\n\r", buffer1[i]);
	}
}

uint16_t* getFilledBuffer(void){
	if (currentbuffer)
  400ec8:	4b04      	ldr	r3, [pc, #16]	; (400edc <getFilledBuffer+0x14>)
  400eca:	7818      	ldrb	r0, [r3, #0]
	} 
	else
	{
		return buffer1;
	}
  400ecc:	4b04      	ldr	r3, [pc, #16]	; (400ee0 <getFilledBuffer+0x18>)
  400ece:	4a05      	ldr	r2, [pc, #20]	; (400ee4 <getFilledBuffer+0x1c>)
  400ed0:	2800      	cmp	r0, #0
  400ed2:	bf14      	ite	ne
  400ed4:	4610      	movne	r0, r2
  400ed6:	4618      	moveq	r0, r3
  400ed8:	4770      	bx	lr
  400eda:	bf00      	nop
  400edc:	20008cbc 	.word	0x20008cbc
  400ee0:	20004b9c 	.word	0x20004b9c
  400ee4:	20000a80 	.word	0x20000a80

00400ee8 <usart_serial_getchar>:
{
  400ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400eea:	b083      	sub	sp, #12
  400eec:	4605      	mov	r5, r0
  400eee:	460c      	mov	r4, r1
	uint32_t val = 0;
  400ef0:	2300      	movs	r3, #0
  400ef2:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400ef4:	4b18      	ldr	r3, [pc, #96]	; (400f58 <usart_serial_getchar+0x70>)
  400ef6:	4298      	cmp	r0, r3
  400ef8:	d00a      	beq.n	400f10 <usart_serial_getchar+0x28>
	if (UART1 == (Uart*)p_usart) {
  400efa:	4b18      	ldr	r3, [pc, #96]	; (400f5c <usart_serial_getchar+0x74>)
  400efc:	4298      	cmp	r0, r3
  400efe:	d00f      	beq.n	400f20 <usart_serial_getchar+0x38>
	if (USART0 == p_usart) {
  400f00:	4b17      	ldr	r3, [pc, #92]	; (400f60 <usart_serial_getchar+0x78>)
  400f02:	4298      	cmp	r0, r3
  400f04:	d014      	beq.n	400f30 <usart_serial_getchar+0x48>
	if (USART1 == p_usart) {
  400f06:	4b17      	ldr	r3, [pc, #92]	; (400f64 <usart_serial_getchar+0x7c>)
  400f08:	429d      	cmp	r5, r3
  400f0a:	d01b      	beq.n	400f44 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400f0c:	b003      	add	sp, #12
  400f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400f10:	461f      	mov	r7, r3
  400f12:	4e15      	ldr	r6, [pc, #84]	; (400f68 <usart_serial_getchar+0x80>)
  400f14:	4621      	mov	r1, r4
  400f16:	4638      	mov	r0, r7
  400f18:	47b0      	blx	r6
  400f1a:	2800      	cmp	r0, #0
  400f1c:	d1fa      	bne.n	400f14 <usart_serial_getchar+0x2c>
  400f1e:	e7f2      	b.n	400f06 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400f20:	461e      	mov	r6, r3
  400f22:	4d11      	ldr	r5, [pc, #68]	; (400f68 <usart_serial_getchar+0x80>)
  400f24:	4621      	mov	r1, r4
  400f26:	4630      	mov	r0, r6
  400f28:	47a8      	blx	r5
  400f2a:	2800      	cmp	r0, #0
  400f2c:	d1fa      	bne.n	400f24 <usart_serial_getchar+0x3c>
  400f2e:	e7ed      	b.n	400f0c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400f30:	461e      	mov	r6, r3
  400f32:	4d0e      	ldr	r5, [pc, #56]	; (400f6c <usart_serial_getchar+0x84>)
  400f34:	a901      	add	r1, sp, #4
  400f36:	4630      	mov	r0, r6
  400f38:	47a8      	blx	r5
  400f3a:	2800      	cmp	r0, #0
  400f3c:	d1fa      	bne.n	400f34 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400f3e:	9b01      	ldr	r3, [sp, #4]
  400f40:	7023      	strb	r3, [r4, #0]
  400f42:	e7e3      	b.n	400f0c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400f44:	461e      	mov	r6, r3
  400f46:	4d09      	ldr	r5, [pc, #36]	; (400f6c <usart_serial_getchar+0x84>)
  400f48:	a901      	add	r1, sp, #4
  400f4a:	4630      	mov	r0, r6
  400f4c:	47a8      	blx	r5
  400f4e:	2800      	cmp	r0, #0
  400f50:	d1fa      	bne.n	400f48 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400f52:	9b01      	ldr	r3, [sp, #4]
  400f54:	7023      	strb	r3, [r4, #0]
}
  400f56:	e7d9      	b.n	400f0c <usart_serial_getchar+0x24>
  400f58:	400e0600 	.word	0x400e0600
  400f5c:	40060600 	.word	0x40060600
  400f60:	400a0000 	.word	0x400a0000
  400f64:	400a4000 	.word	0x400a4000
  400f68:	00400aeb 	.word	0x00400aeb
  400f6c:	00400b11 	.word	0x00400b11

00400f70 <usart_serial_putchar>:
{
  400f70:	b570      	push	{r4, r5, r6, lr}
  400f72:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400f74:	4b18      	ldr	r3, [pc, #96]	; (400fd8 <usart_serial_putchar+0x68>)
  400f76:	4298      	cmp	r0, r3
  400f78:	d00a      	beq.n	400f90 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400f7a:	4b18      	ldr	r3, [pc, #96]	; (400fdc <usart_serial_putchar+0x6c>)
  400f7c:	4298      	cmp	r0, r3
  400f7e:	d010      	beq.n	400fa2 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400f80:	4b17      	ldr	r3, [pc, #92]	; (400fe0 <usart_serial_putchar+0x70>)
  400f82:	4298      	cmp	r0, r3
  400f84:	d016      	beq.n	400fb4 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400f86:	4b17      	ldr	r3, [pc, #92]	; (400fe4 <usart_serial_putchar+0x74>)
  400f88:	4298      	cmp	r0, r3
  400f8a:	d01c      	beq.n	400fc6 <usart_serial_putchar+0x56>
	return 0;
  400f8c:	2000      	movs	r0, #0
}
  400f8e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400f90:	461e      	mov	r6, r3
  400f92:	4d15      	ldr	r5, [pc, #84]	; (400fe8 <usart_serial_putchar+0x78>)
  400f94:	4621      	mov	r1, r4
  400f96:	4630      	mov	r0, r6
  400f98:	47a8      	blx	r5
  400f9a:	2800      	cmp	r0, #0
  400f9c:	d1fa      	bne.n	400f94 <usart_serial_putchar+0x24>
		return 1;
  400f9e:	2001      	movs	r0, #1
  400fa0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400fa2:	461e      	mov	r6, r3
  400fa4:	4d10      	ldr	r5, [pc, #64]	; (400fe8 <usart_serial_putchar+0x78>)
  400fa6:	4621      	mov	r1, r4
  400fa8:	4630      	mov	r0, r6
  400faa:	47a8      	blx	r5
  400fac:	2800      	cmp	r0, #0
  400fae:	d1fa      	bne.n	400fa6 <usart_serial_putchar+0x36>
		return 1;
  400fb0:	2001      	movs	r0, #1
  400fb2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400fb4:	461e      	mov	r6, r3
  400fb6:	4d0d      	ldr	r5, [pc, #52]	; (400fec <usart_serial_putchar+0x7c>)
  400fb8:	4621      	mov	r1, r4
  400fba:	4630      	mov	r0, r6
  400fbc:	47a8      	blx	r5
  400fbe:	2800      	cmp	r0, #0
  400fc0:	d1fa      	bne.n	400fb8 <usart_serial_putchar+0x48>
		return 1;
  400fc2:	2001      	movs	r0, #1
  400fc4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400fc6:	461e      	mov	r6, r3
  400fc8:	4d08      	ldr	r5, [pc, #32]	; (400fec <usart_serial_putchar+0x7c>)
  400fca:	4621      	mov	r1, r4
  400fcc:	4630      	mov	r0, r6
  400fce:	47a8      	blx	r5
  400fd0:	2800      	cmp	r0, #0
  400fd2:	d1fa      	bne.n	400fca <usart_serial_putchar+0x5a>
		return 1;
  400fd4:	2001      	movs	r0, #1
  400fd6:	bd70      	pop	{r4, r5, r6, pc}
  400fd8:	400e0600 	.word	0x400e0600
  400fdc:	40060600 	.word	0x40060600
  400fe0:	400a0000 	.word	0x400a0000
  400fe4:	400a4000 	.word	0x400a4000
  400fe8:	00400adb 	.word	0x00400adb
  400fec:	00400afd 	.word	0x00400afd

00400ff0 <afec0_data_ready>:
	
}
/* brief AFEC0 DRDY interrupt callback function. */

static void afec0_data_ready(void)
{
  400ff0:	b508      	push	{r3, lr}
	if (!startedSampling)
  400ff2:	4b07      	ldr	r3, [pc, #28]	; (401010 <afec0_data_ready+0x20>)
  400ff4:	781b      	ldrb	r3, [r3, #0]
  400ff6:	b91b      	cbnz	r3, 401000 <afec0_data_ready+0x10>
	{
		test++;
  400ff8:	4a06      	ldr	r2, [pc, #24]	; (401014 <afec0_data_ready+0x24>)
  400ffa:	6813      	ldr	r3, [r2, #0]
  400ffc:	3301      	adds	r3, #1
  400ffe:	6013      	str	r3, [r2, #0]
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  401000:	4b05      	ldr	r3, [pc, #20]	; (401018 <afec0_data_ready+0x28>)
  401002:	6a18      	ldr	r0, [r3, #32]
	}
	g_afec0_sample_data = afec_get_latest_value(AFEC0);					// Obtain latest sample from COLLECTOR signal (EXT3 - pin4 (ch6))
  401004:	b280      	uxth	r0, r0
  401006:	4b05      	ldr	r3, [pc, #20]	; (40101c <afec0_data_ready+0x2c>)
  401008:	8018      	strh	r0, [r3, #0]
	addSample(g_afec0_sample_data);
  40100a:	4b05      	ldr	r3, [pc, #20]	; (401020 <afec0_data_ready+0x30>)
  40100c:	4798      	blx	r3
  40100e:	bd08      	pop	{r3, pc}
  401010:	20008ce8 	.word	0x20008ce8
  401014:	20008cec 	.word	0x20008cec
  401018:	400b0000 	.word	0x400b0000
  40101c:	20008df4 	.word	0x20008df4
  401020:	00400e25 	.word	0x00400e25

00401024 <sample_average>:
 ***************************** BEAM PARAMETER ALGORITHMS ****************************************
 **************************************************************************************************/

/*	Compute average/mean from given sample data within a certain window  */

uint16_t sample_average(uint16_t start, uint16_t end, uint16_t* buffer) {
  401024:	b4f0      	push	{r4, r5, r6, r7}
		
	uint32_t sample_avg = 0;
	uint32_t total_frequency = 0;
	
	for (uint16_t i = start; i < end; i++)
  401026:	4288      	cmp	r0, r1
  401028:	d21e      	bcs.n	401068 <sample_average+0x44>
  40102a:	eb02 0440 	add.w	r4, r2, r0, lsl #1
  40102e:	4603      	mov	r3, r0
  401030:	4626      	mov	r6, r4
  401032:	2500      	movs	r5, #0
	{
		sample_avg += (uint32_t)buffer[i]*i;
  401034:	f836 7b02 	ldrh.w	r7, [r6], #2
  401038:	fb03 5507 	mla	r5, r3, r7, r5
  40103c:	3301      	adds	r3, #1
	for (uint16_t i = start; i < end; i++)
  40103e:	b29f      	uxth	r7, r3
  401040:	42b9      	cmp	r1, r7
  401042:	d8f7      	bhi.n	401034 <sample_average+0x10>
  401044:	3901      	subs	r1, #1
  401046:	1a09      	subs	r1, r1, r0
  401048:	3001      	adds	r0, #1
  40104a:	fa10 f181 	uxtah	r1, r0, r1
  40104e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  401052:	2000      	movs	r0, #0
	}
	
	for (uint16_t i = start; i < end; i++)
	{
		total_frequency += (uint32_t)buffer[i];
  401054:	f834 3b02 	ldrh.w	r3, [r4], #2
  401058:	4418      	add	r0, r3
	for (uint16_t i = start; i < end; i++)
  40105a:	428c      	cmp	r4, r1
  40105c:	d1fa      	bne.n	401054 <sample_average+0x30>
	}
	
	return sample_avg/total_frequency;
  40105e:	fbb5 f0f0 	udiv	r0, r5, r0
}
  401062:	b280      	uxth	r0, r0
  401064:	bcf0      	pop	{r4, r5, r6, r7}
  401066:	4770      	bx	lr
	uint32_t sample_avg = 0;
  401068:	2500      	movs	r5, #0
	for (uint16_t i = start; i < end; i++)
  40106a:	4628      	mov	r0, r5
  40106c:	e7f7      	b.n	40105e <sample_average+0x3a>

0040106e <find_max>:


/* Find the maximum of the BPM-80 data half cycle and return its index*/

uint16_t find_max(uint16_t* halfcycle, uint16_t length)
{
  40106e:	b470      	push	{r4, r5, r6}
	uint16_t maximum = 0;
	uint16_t max_index = 0;
									
	for (uint16_t i = 0; i < length; i++)
  401070:	460e      	mov	r6, r1
  401072:	b181      	cbz	r1, 401096 <find_max+0x28>
  401074:	1e81      	subs	r1, r0, #2
  401076:	2300      	movs	r3, #0
  401078:	4618      	mov	r0, r3
  40107a:	461c      	mov	r4, r3
  40107c:	b29d      	uxth	r5, r3
	{
		if (halfcycle[i] > maximum) 
  40107e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  401082:	42a2      	cmp	r2, r4
  401084:	bf84      	itt	hi
  401086:	4628      	movhi	r0, r5
		{
			max_index = i;
			maximum = halfcycle[i];
  401088:	4614      	movhi	r4, r2
  40108a:	3301      	adds	r3, #1
	for (uint16_t i = 0; i < length; i++)
  40108c:	b29a      	uxth	r2, r3
  40108e:	4296      	cmp	r6, r2
  401090:	d8f4      	bhi.n	40107c <find_max+0xe>
		}
	}
	
	
	return max_index;
}
  401092:	bc70      	pop	{r4, r5, r6}
  401094:	4770      	bx	lr
	uint16_t max_index = 0;
  401096:	4608      	mov	r0, r1
  401098:	e7fb      	b.n	401092 <find_max+0x24>
	...

0040109c <detect_peaks>:
/* Find beam peak locations and peak widths X and Y using the dispersion-based algorithm */
/* Returns an array of 6 elements : 1. peak position X  2. peak edge left X  3. peak edge right X 
									4. peak position Y  5. peak edge left Y  6. peak edge right Y */

void detect_peaks(uint16_t threshold, uint16_t* buffer)
{
  40109c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010a0:	4605      	mov	r5, r0
  4010a2:	460c      	mov	r4, r1
	uint16_t peak1 = find_max(buffer, half_cycle_length);
  4010a4:	4b3a      	ldr	r3, [pc, #232]	; (401190 <detect_peaks+0xf4>)
  4010a6:	881f      	ldrh	r7, [r3, #0]
  4010a8:	4639      	mov	r1, r7
  4010aa:	4620      	mov	r0, r4
  4010ac:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 401198 <detect_peaks+0xfc>
  4010b0:	47c0      	blx	r8
  4010b2:	4606      	mov	r6, r0
	uint16_t peak2 = half_cycle_length + find_max(buffer+half_cycle_length, half_cycle_length);
  4010b4:	4639      	mov	r1, r7
  4010b6:	eb04 0047 	add.w	r0, r4, r7, lsl #1
  4010ba:	47c0      	blx	r8
  4010bc:	4438      	add	r0, r7
  4010be:	b280      	uxth	r0, r0
	
	// Use peak1 and peak2 to find the 4 corner points of the beams, possibly combine with dispersion-based algorithm
	
	peaks_localization[0] = peak1;
  4010c0:	4b34      	ldr	r3, [pc, #208]	; (401194 <detect_peaks+0xf8>)
  4010c2:	801e      	strh	r6, [r3, #0]
	peaks_localization[3] = peak2;
  4010c4:	80d8      	strh	r0, [r3, #6]
			
	// find left corner of X peak
		
	for (uint16_t i = 0; i <= peak1; i++)
	{
		if(buffer[peak1 - i] < threshold) 
  4010c6:	4631      	mov	r1, r6
  4010c8:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  4010cc:	42ab      	cmp	r3, r5
  4010ce:	d349      	bcc.n	401164 <detect_peaks+0xc8>
  4010d0:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak1; i++)
  4010d2:	3301      	adds	r3, #1
  4010d4:	b29b      	uxth	r3, r3
  4010d6:	429e      	cmp	r6, r3
  4010d8:	d350      	bcc.n	40117c <detect_peaks+0xe0>
		if(buffer[peak1 - i] < threshold) 
  4010da:	1aca      	subs	r2, r1, r3
  4010dc:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  4010e0:	42aa      	cmp	r2, r5
  4010e2:	d2f6      	bcs.n	4010d2 <detect_peaks+0x36>
		{
			peaks_localization[1] = peak1-i;
  4010e4:	1af3      	subs	r3, r6, r3
  4010e6:	4a2b      	ldr	r2, [pc, #172]	; (401194 <detect_peaks+0xf8>)
  4010e8:	8053      	strh	r3, [r2, #2]
		}
	}
	
	// find right corner of X peak
	
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  4010ea:	1bbf      	subs	r7, r7, r6
  4010ec:	d410      	bmi.n	401110 <detect_peaks+0x74>
	{
		if(buffer[peak1 + i] < threshold) 
  4010ee:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  4010f2:	42ab      	cmp	r3, r5
  4010f4:	d338      	bcc.n	401168 <detect_peaks+0xcc>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  4010f6:	2200      	movs	r2, #0
  4010f8:	3201      	adds	r2, #1
  4010fa:	b292      	uxth	r2, r2
  4010fc:	42ba      	cmp	r2, r7
  4010fe:	dc07      	bgt.n	401110 <detect_peaks+0x74>
		if(buffer[peak1 + i] < threshold) 
  401100:	1853      	adds	r3, r2, r1
  401102:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
  401106:	42ab      	cmp	r3, r5
  401108:	d2f6      	bcs.n	4010f8 <detect_peaks+0x5c>
		{
			peaks_localization[2] = peak1+i;
  40110a:	4432      	add	r2, r6
  40110c:	4b21      	ldr	r3, [pc, #132]	; (401194 <detect_peaks+0xf8>)
  40110e:	809a      	strh	r2, [r3, #4]
	
	// find left corner of Y peak
	
	for (uint16_t i = 0; i <= peak2; i++)
	{
		if(buffer[peak2 - i] < threshold)
  401110:	4602      	mov	r2, r0
  401112:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  401116:	42ab      	cmp	r3, r5
  401118:	d328      	bcc.n	40116c <detect_peaks+0xd0>
  40111a:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak2; i++)
  40111c:	3301      	adds	r3, #1
  40111e:	b29b      	uxth	r3, r3
  401120:	4298      	cmp	r0, r3
  401122:	d32e      	bcc.n	401182 <detect_peaks+0xe6>
		if(buffer[peak2 - i] < threshold)
  401124:	1ad1      	subs	r1, r2, r3
  401126:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  40112a:	42a9      	cmp	r1, r5
  40112c:	d2f6      	bcs.n	40111c <detect_peaks+0x80>
		{
			peaks_localization[4] = peak2-i;
  40112e:	1ac3      	subs	r3, r0, r3
  401130:	4918      	ldr	r1, [pc, #96]	; (401194 <detect_peaks+0xf8>)
  401132:	810b      	strh	r3, [r1, #8]
		}
	}
	
	// find right corner of Y peak
	
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  401134:	f5c0 5602 	rsb	r6, r0, #8320	; 0x2080
  401138:	360e      	adds	r6, #14
  40113a:	2e00      	cmp	r6, #0
  40113c:	db18      	blt.n	401170 <detect_peaks+0xd4>
	{
		if(buffer[peak2 + i] < threshold)
  40113e:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  401142:	42ab      	cmp	r3, r5
  401144:	d316      	bcc.n	401174 <detect_peaks+0xd8>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  401146:	2300      	movs	r3, #0
  401148:	3301      	adds	r3, #1
  40114a:	b29b      	uxth	r3, r3
  40114c:	42b3      	cmp	r3, r6
  40114e:	dc13      	bgt.n	401178 <detect_peaks+0xdc>
		if(buffer[peak2 + i] < threshold)
  401150:	1899      	adds	r1, r3, r2
  401152:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  401156:	42a9      	cmp	r1, r5
  401158:	d2f6      	bcs.n	401148 <detect_peaks+0xac>
		{
			peaks_localization[5] = peak2+i;
  40115a:	4403      	add	r3, r0
  40115c:	4a0d      	ldr	r2, [pc, #52]	; (401194 <detect_peaks+0xf8>)
  40115e:	8153      	strh	r3, [r2, #10]
			break;
  401160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= peak1; i++)
  401164:	2300      	movs	r3, #0
  401166:	e7bd      	b.n	4010e4 <detect_peaks+0x48>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  401168:	2200      	movs	r2, #0
  40116a:	e7ce      	b.n	40110a <detect_peaks+0x6e>
	for (uint16_t i = 0; i <= peak2; i++)
  40116c:	2300      	movs	r3, #0
  40116e:	e7de      	b.n	40112e <detect_peaks+0x92>
  401170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  401174:	2300      	movs	r3, #0
  401176:	e7f0      	b.n	40115a <detect_peaks+0xbe>
  401178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  40117c:	1bbf      	subs	r7, r7, r6
  40117e:	d5ba      	bpl.n	4010f6 <detect_peaks+0x5a>
  401180:	e7c6      	b.n	401110 <detect_peaks+0x74>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  401182:	f5c0 5602 	rsb	r6, r0, #8320	; 0x2080
  401186:	360e      	adds	r6, #14
  401188:	2e00      	cmp	r6, #0
  40118a:	dadc      	bge.n	401146 <detect_peaks+0xaa>
  40118c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401190:	2000000c 	.word	0x2000000c
  401194:	20008ccc 	.word	0x20008ccc
  401198:	0040106f 	.word	0x0040106f

0040119c <compute_beam_intensity>:
/* Compute beam intensity of a cycle in X and Y cross section */
/* Takes as input the borders of both peaks*/
/* Outputs beam intensity of X and Y crossection, so that higher level data representation can choose whether to multiply or sum them*/

void compute_beam_intensity(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right, uint16_t* buffer)
{
  40119c:	b4f0      	push	{r4, r5, r6, r7}
  40119e:	9f04      	ldr	r7, [sp, #16]
	beam_intensity[0] = 0;
  4011a0:	4c15      	ldr	r4, [pc, #84]	; (4011f8 <compute_beam_intensity+0x5c>)
  4011a2:	2500      	movs	r5, #0
  4011a4:	8025      	strh	r5, [r4, #0]
	beam_intensity[1] = 0;
  4011a6:	8065      	strh	r5, [r4, #2]
	
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  4011a8:	4288      	cmp	r0, r1
  4011aa:	d210      	bcs.n	4011ce <compute_beam_intensity+0x32>
  4011ac:	eb07 0440 	add.w	r4, r7, r0, lsl #1
  4011b0:	1e4e      	subs	r6, r1, #1
  4011b2:	1a36      	subs	r6, r6, r0
  4011b4:	3001      	adds	r0, #1
  4011b6:	fa10 f686 	uxtah	r6, r0, r6
  4011ba:	eb07 0646 	add.w	r6, r7, r6, lsl #1
	{
		beam_intensity[0] += (uint32_t)buffer[i];
  4011be:	480e      	ldr	r0, [pc, #56]	; (4011f8 <compute_beam_intensity+0x5c>)
  4011c0:	f834 1b02 	ldrh.w	r1, [r4], #2
  4011c4:	8805      	ldrh	r5, [r0, #0]
  4011c6:	4429      	add	r1, r5
  4011c8:	8001      	strh	r1, [r0, #0]
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  4011ca:	42b4      	cmp	r4, r6
  4011cc:	d1f8      	bne.n	4011c0 <compute_beam_intensity+0x24>
	}
	
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  4011ce:	429a      	cmp	r2, r3
  4011d0:	d210      	bcs.n	4011f4 <compute_beam_intensity+0x58>
  4011d2:	eb07 0142 	add.w	r1, r7, r2, lsl #1
  4011d6:	1e5c      	subs	r4, r3, #1
  4011d8:	1aa4      	subs	r4, r4, r2
  4011da:	3201      	adds	r2, #1
  4011dc:	fa12 f484 	uxtah	r4, r2, r4
  4011e0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
	{
		beam_intensity[1] += (uint32_t)buffer[i];
  4011e4:	4a04      	ldr	r2, [pc, #16]	; (4011f8 <compute_beam_intensity+0x5c>)
  4011e6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4011ea:	8850      	ldrh	r0, [r2, #2]
  4011ec:	4403      	add	r3, r0
  4011ee:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  4011f0:	42a1      	cmp	r1, r4
  4011f2:	d1f8      	bne.n	4011e6 <compute_beam_intensity+0x4a>
	}
	
}
  4011f4:	bcf0      	pop	{r4, r5, r6, r7}
  4011f6:	4770      	bx	lr
  4011f8:	20008cc0 	.word	0x20008cc0

004011fc <sum>:

 uint16_t sum(uint16_t start, uint16_t end, uint16_t* buffer)
 {
	 uint16_t result=0;
	 for (uint16_t i=start; i< end; i++ )
  4011fc:	4288      	cmp	r0, r1
  4011fe:	d210      	bcs.n	401222 <sum+0x26>
  401200:	eb02 0340 	add.w	r3, r2, r0, lsl #1
  401204:	3901      	subs	r1, #1
  401206:	1a09      	subs	r1, r1, r0
  401208:	3001      	adds	r0, #1
  40120a:	fa10 f181 	uxtah	r1, r0, r1
  40120e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  401212:	2000      	movs	r0, #0
	 {
		 result+=buffer[i];
  401214:	f833 1b02 	ldrh.w	r1, [r3], #2
  401218:	4408      	add	r0, r1
  40121a:	b280      	uxth	r0, r0
	 for (uint16_t i=start; i< end; i++ )
  40121c:	4293      	cmp	r3, r2
  40121e:	d1f9      	bne.n	401214 <sum+0x18>
  401220:	4770      	bx	lr
	 uint16_t result=0;
  401222:	2000      	movs	r0, #0
	 }
	 return result;
 }
  401224:	4770      	bx	lr
	...

00401228 <compute_fwhm>:
 
 /* Compute FWHM X and Y */

 void compute_fwhm(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right,uint16_t* buffer)
 {
  401228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40122c:	b08b      	sub	sp, #44	; 0x2c
  40122e:	4680      	mov	r8, r0
  401230:	9007      	str	r0, [sp, #28]
  401232:	460f      	mov	r7, r1
  401234:	9108      	str	r1, [sp, #32]
  401236:	4616      	mov	r6, r2
  401238:	9205      	str	r2, [sp, #20]
  40123a:	461d      	mov	r5, r3
  40123c:	9306      	str	r3, [sp, #24]
	 
	 uint16_t mean[2] = {0,0};
	 long long summed=0;
	 int variance=0;
	 
	 mean[0] = sample_average(peak1_left, peak1_right,buffer);
  40123e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401240:	4c63      	ldr	r4, [pc, #396]	; (4013d0 <compute_fwhm+0x1a8>)
  401242:	47a0      	blx	r4
  401244:	4682      	mov	sl, r0
	 mean[1] = sample_average(peak2_left, peak2_right,buffer);
  401246:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401248:	4629      	mov	r1, r5
  40124a:	4630      	mov	r0, r6
  40124c:	47a0      	blx	r4
  40124e:	9009      	str	r0, [sp, #36]	; 0x24
	 
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  401250:	45b8      	cmp	r8, r7
  401252:	f080 80ae 	bcs.w	4013b2 <compute_fwhm+0x18a>
  401256:	4638      	mov	r0, r7
  401258:	eba8 040a 	sub.w	r4, r8, sl
  40125c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40125e:	4615      	mov	r5, r2
  401260:	4642      	mov	r2, r8
  401262:	eb05 0748 	add.w	r7, r5, r8, lsl #1
  401266:	1e43      	subs	r3, r0, #1
  401268:	1a9b      	subs	r3, r3, r2
  40126a:	3201      	adds	r2, #1
  40126c:	fa12 f383 	uxtah	r3, r2, r3
  401270:	eba3 0a0a 	sub.w	sl, r3, sl
  401274:	2200      	movs	r2, #0
  401276:	2300      	movs	r3, #0
  401278:	e9cd 2300 	strd	r2, r3, [sp]
	 {
		 summed+= (pow((i-mean[0]),2)*buffer[i]);
  40127c:	4e55      	ldr	r6, [pc, #340]	; (4013d4 <compute_fwhm+0x1ac>)
  40127e:	4d56      	ldr	r5, [pc, #344]	; (4013d8 <compute_fwhm+0x1b0>)
  401280:	f8df 8170 	ldr.w	r8, [pc, #368]	; 4013f4 <compute_fwhm+0x1cc>
  401284:	f8df 9170 	ldr.w	r9, [pc, #368]	; 4013f8 <compute_fwhm+0x1d0>
  401288:	46d3      	mov	fp, sl
  40128a:	46ba      	mov	sl, r7
  40128c:	4620      	mov	r0, r4
  40128e:	47b0      	blx	r6
  401290:	f83a 7b02 	ldrh.w	r7, [sl], #2
  401294:	4602      	mov	r2, r0
  401296:	460b      	mov	r3, r1
  401298:	47a8      	blx	r5
  40129a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40129e:	4638      	mov	r0, r7
  4012a0:	47b0      	blx	r6
  4012a2:	4602      	mov	r2, r0
  4012a4:	460b      	mov	r3, r1
  4012a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4012aa:	47a8      	blx	r5
  4012ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4012b0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4012b4:	4b49      	ldr	r3, [pc, #292]	; (4013dc <compute_fwhm+0x1b4>)
  4012b6:	4798      	blx	r3
  4012b8:	4602      	mov	r2, r0
  4012ba:	460b      	mov	r3, r1
  4012bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4012c0:	47c0      	blx	r8
  4012c2:	47c8      	blx	r9
  4012c4:	e9cd 0100 	strd	r0, r1, [sp]
  4012c8:	3401      	adds	r4, #1
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  4012ca:	455c      	cmp	r4, fp
  4012cc:	d1de      	bne.n	40128c <compute_fwhm+0x64>
	 }
	 variance=summed/sum(peak1_left,peak1_right,buffer);
  4012ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4012d0:	9908      	ldr	r1, [sp, #32]
  4012d2:	9807      	ldr	r0, [sp, #28]
  4012d4:	4b42      	ldr	r3, [pc, #264]	; (4013e0 <compute_fwhm+0x1b8>)
  4012d6:	4798      	blx	r3
  4012d8:	b282      	uxth	r2, r0
  4012da:	2300      	movs	r3, #0
  4012dc:	e9dd 0100 	ldrd	r0, r1, [sp]
  4012e0:	4c40      	ldr	r4, [pc, #256]	; (4013e4 <compute_fwhm+0x1bc>)
  4012e2:	47a0      	blx	r4
	
	 fwhm[0]= (uint16_t)(sqrt(variance)*2.355);
  4012e4:	4b3b      	ldr	r3, [pc, #236]	; (4013d4 <compute_fwhm+0x1ac>)
  4012e6:	4798      	blx	r3
  4012e8:	4b3f      	ldr	r3, [pc, #252]	; (4013e8 <compute_fwhm+0x1c0>)
  4012ea:	4798      	blx	r3
  4012ec:	a336      	add	r3, pc, #216	; (adr r3, 4013c8 <compute_fwhm+0x1a0>)
  4012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012f2:	4c39      	ldr	r4, [pc, #228]	; (4013d8 <compute_fwhm+0x1b0>)
  4012f4:	47a0      	blx	r4
  4012f6:	4b3d      	ldr	r3, [pc, #244]	; (4013ec <compute_fwhm+0x1c4>)
  4012f8:	4798      	blx	r3
  4012fa:	4b3d      	ldr	r3, [pc, #244]	; (4013f0 <compute_fwhm+0x1c8>)
  4012fc:	8018      	strh	r0, [r3, #0]
	 summed=0;
	 variance=0;
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  4012fe:	9a05      	ldr	r2, [sp, #20]
  401300:	4613      	mov	r3, r2
  401302:	9806      	ldr	r0, [sp, #24]
  401304:	4282      	cmp	r2, r0
  401306:	d259      	bcs.n	4013bc <compute_fwhm+0x194>
  401308:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40130a:	1b5c      	subs	r4, r3, r5
  40130c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40130e:	4611      	mov	r1, r2
  401310:	eb01 0743 	add.w	r7, r1, r3, lsl #1
  401314:	f100 3aff 	add.w	sl, r0, #4294967295
  401318:	ebaa 0a03 	sub.w	sl, sl, r3
  40131c:	3301      	adds	r3, #1
  40131e:	fa13 fa8a 	uxtah	sl, r3, sl
  401322:	ebaa 0a05 	sub.w	sl, sl, r5
  401326:	2200      	movs	r2, #0
  401328:	2300      	movs	r3, #0
  40132a:	e9cd 2300 	strd	r2, r3, [sp]
	 {
		 summed+= (pow((i-mean[1]),2)*buffer[i]);
  40132e:	4e29      	ldr	r6, [pc, #164]	; (4013d4 <compute_fwhm+0x1ac>)
  401330:	4d29      	ldr	r5, [pc, #164]	; (4013d8 <compute_fwhm+0x1b0>)
  401332:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4013f4 <compute_fwhm+0x1cc>
  401336:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 4013f8 <compute_fwhm+0x1d0>
  40133a:	4620      	mov	r0, r4
  40133c:	47b0      	blx	r6
  40133e:	f837 bb02 	ldrh.w	fp, [r7], #2
  401342:	4602      	mov	r2, r0
  401344:	460b      	mov	r3, r1
  401346:	47a8      	blx	r5
  401348:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40134c:	4658      	mov	r0, fp
  40134e:	47b0      	blx	r6
  401350:	4602      	mov	r2, r0
  401352:	460b      	mov	r3, r1
  401354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401358:	47a8      	blx	r5
  40135a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40135e:	e9dd 0100 	ldrd	r0, r1, [sp]
  401362:	4b1e      	ldr	r3, [pc, #120]	; (4013dc <compute_fwhm+0x1b4>)
  401364:	4798      	blx	r3
  401366:	4602      	mov	r2, r0
  401368:	460b      	mov	r3, r1
  40136a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40136e:	47c8      	blx	r9
  401370:	47c0      	blx	r8
  401372:	e9cd 0100 	strd	r0, r1, [sp]
  401376:	3401      	adds	r4, #1
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  401378:	4554      	cmp	r4, sl
  40137a:	d1de      	bne.n	40133a <compute_fwhm+0x112>
	 }
	 variance=summed/sum(peak2_left,peak2_right,buffer);
  40137c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40137e:	9906      	ldr	r1, [sp, #24]
  401380:	9805      	ldr	r0, [sp, #20]
  401382:	4b17      	ldr	r3, [pc, #92]	; (4013e0 <compute_fwhm+0x1b8>)
  401384:	4798      	blx	r3
  401386:	b282      	uxth	r2, r0
  401388:	2300      	movs	r3, #0
  40138a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40138e:	4c15      	ldr	r4, [pc, #84]	; (4013e4 <compute_fwhm+0x1bc>)
  401390:	47a0      	blx	r4
	 fwhm[1]=(uint16_t) (sqrt(variance)*2.355);
  401392:	4b10      	ldr	r3, [pc, #64]	; (4013d4 <compute_fwhm+0x1ac>)
  401394:	4798      	blx	r3
  401396:	4b14      	ldr	r3, [pc, #80]	; (4013e8 <compute_fwhm+0x1c0>)
  401398:	4798      	blx	r3
  40139a:	a30b      	add	r3, pc, #44	; (adr r3, 4013c8 <compute_fwhm+0x1a0>)
  40139c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013a0:	4c0d      	ldr	r4, [pc, #52]	; (4013d8 <compute_fwhm+0x1b0>)
  4013a2:	47a0      	blx	r4
  4013a4:	4b11      	ldr	r3, [pc, #68]	; (4013ec <compute_fwhm+0x1c4>)
  4013a6:	4798      	blx	r3
  4013a8:	4b11      	ldr	r3, [pc, #68]	; (4013f0 <compute_fwhm+0x1c8>)
  4013aa:	8058      	strh	r0, [r3, #2]
 }
  4013ac:	b00b      	add	sp, #44	; 0x2c
  4013ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 long long summed=0;
  4013b2:	2300      	movs	r3, #0
  4013b4:	2400      	movs	r4, #0
  4013b6:	e9cd 3400 	strd	r3, r4, [sp]
  4013ba:	e788      	b.n	4012ce <compute_fwhm+0xa6>
	 summed=0;
  4013bc:	2300      	movs	r3, #0
  4013be:	2400      	movs	r4, #0
  4013c0:	e9cd 3400 	strd	r3, r4, [sp]
  4013c4:	e7da      	b.n	40137c <compute_fwhm+0x154>
  4013c6:	bf00      	nop
  4013c8:	3d70a3d7 	.word	0x3d70a3d7
  4013cc:	4002d70a 	.word	0x4002d70a
  4013d0:	00401025 	.word	0x00401025
  4013d4:	00402ff1 	.word	0x00402ff1
  4013d8:	004030bd 	.word	0x004030bd
  4013dc:	00403061 	.word	0x00403061
  4013e0:	004011fd 	.word	0x004011fd
  4013e4:	0040365d 	.word	0x0040365d
  4013e8:	00401e45 	.word	0x00401e45
  4013ec:	0040361d 	.word	0x0040361d
  4013f0:	20008cc8 	.word	0x20008cc8
  4013f4:	00402d59 	.word	0x00402d59
  4013f8:	004036fd 	.word	0x004036fd
  4013fc:	00000000 	.word	0x00000000

00401400 <compute_skewness>:


/* Compute skewness of the beam  X and Y */

void compute_skewness(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right,uint16_t* buffer)
{
  401400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401404:	ed2d 8b02 	vpush	{d8}
  401408:	b085      	sub	sp, #20
  40140a:	4680      	mov	r8, r0
  40140c:	4689      	mov	r9, r1
  40140e:	4617      	mov	r7, r2
  401410:	9202      	str	r2, [sp, #8]
  401412:	461e      	mov	r6, r3
  401414:	9303      	str	r3, [sp, #12]
	int first_peak_mean  =  sample_average(peak1_left, peak1_right,buffer);
  401416:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401418:	4c39      	ldr	r4, [pc, #228]	; (401500 <compute_skewness+0x100>)
  40141a:	47a0      	blx	r4
  40141c:	4605      	mov	r5, r0
	int second_peak_mean =  sample_average(peak2_left, peak2_right,buffer);
  40141e:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401420:	4631      	mov	r1, r6
  401422:	4638      	mov	r0, r7
  401424:	47a0      	blx	r4
  401426:	4604      	mov	r4, r0
	
	double third_central = 0;
	uint32_t second_central = 0;
	
	 for (int i=peak1_left;i<peak1_right;i++ )
  401428:	45c8      	cmp	r8, r9
  40142a:	da0f      	bge.n	40144c <compute_skewness+0x4c>
  40142c:	4646      	mov	r6, r8
  40142e:	464f      	mov	r7, r9
  401430:	eba8 0505 	sub.w	r5, r8, r5
	 {
		 third_central = (double)i-1054;//(pow((i-first_peak_mean),3)*buffer[i]);
		 second_central += (pow((i-first_peak_mean),2)*buffer[i]);
  401434:	ed9f 8b30 	vldr	d8, [pc, #192]	; 4014f8 <compute_skewness+0xf8>
  401438:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 40150c <compute_skewness+0x10c>
  40143c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 40151c <compute_skewness+0x11c>
  401440:	2d00      	cmp	r5, #0
  401442:	dd4d      	ble.n	4014e0 <compute_skewness+0xe0>
	 for (int i=peak1_left;i<peak1_right;i++ )
  401444:	3601      	adds	r6, #1
  401446:	3501      	adds	r5, #1
  401448:	42be      	cmp	r6, r7
  40144a:	dbf9      	blt.n	401440 <compute_skewness+0x40>
	 }
	 
	 second_central = second_central / sum(peak1_left,peak1_right,buffer);
	 //third_central = third_central / sum(peak1_left,peak1_right,buffer);
	
	skewness[0] = peak1_left;
  40144c:	4640      	mov	r0, r8
  40144e:	4b2d      	ldr	r3, [pc, #180]	; (401504 <compute_skewness+0x104>)
  401450:	4798      	blx	r3
  401452:	4b2d      	ldr	r3, [pc, #180]	; (401508 <compute_skewness+0x108>)
  401454:	e9c3 0100 	strd	r0, r1, [r3]
	
	third_central = 0;
	second_central = 0;
	
	
	 for (int i=peak2_left;i<peak2_right;i++ )
  401458:	9a02      	ldr	r2, [sp, #8]
  40145a:	4613      	mov	r3, r2
  40145c:	9803      	ldr	r0, [sp, #12]
  40145e:	4282      	cmp	r2, r0
  401460:	da44      	bge.n	4014ec <compute_skewness+0xec>
  401462:	1b14      	subs	r4, r2, r4
  401464:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401466:	eb02 0543 	add.w	r5, r2, r3, lsl #1
  40146a:	eb02 0840 	add.w	r8, r2, r0, lsl #1
  40146e:	2300      	movs	r3, #0
  401470:	461e      	mov	r6, r3
	 {
		 second_central += (pow((i-second_peak_mean),2)*buffer[i]);
  401472:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401504 <compute_skewness+0x104>
  401476:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 401520 <compute_skewness+0x120>
  40147a:	4620      	mov	r0, r4
  40147c:	4b23      	ldr	r3, [pc, #140]	; (40150c <compute_skewness+0x10c>)
  40147e:	4798      	blx	r3
  401480:	f835 bb02 	ldrh.w	fp, [r5], #2
  401484:	4602      	mov	r2, r0
  401486:	460b      	mov	r3, r1
  401488:	4f21      	ldr	r7, [pc, #132]	; (401510 <compute_skewness+0x110>)
  40148a:	47b8      	blx	r7
  40148c:	e9cd 0100 	strd	r0, r1, [sp]
  401490:	4658      	mov	r0, fp
  401492:	4b1e      	ldr	r3, [pc, #120]	; (40150c <compute_skewness+0x10c>)
  401494:	4798      	blx	r3
  401496:	4602      	mov	r2, r0
  401498:	460b      	mov	r3, r1
  40149a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40149e:	47b8      	blx	r7
  4014a0:	e9cd 0100 	strd	r0, r1, [sp]
  4014a4:	4630      	mov	r0, r6
  4014a6:	47c8      	blx	r9
  4014a8:	4602      	mov	r2, r0
  4014aa:	460b      	mov	r3, r1
  4014ac:	e9dd 0100 	ldrd	r0, r1, [sp]
  4014b0:	4e18      	ldr	r6, [pc, #96]	; (401514 <compute_skewness+0x114>)
  4014b2:	47b0      	blx	r6
  4014b4:	47d0      	blx	sl
  4014b6:	4606      	mov	r6, r0
  4014b8:	3401      	adds	r4, #1
	 for (int i=peak2_left;i<peak2_right;i++ )
  4014ba:	4545      	cmp	r5, r8
  4014bc:	d1dd      	bne.n	40147a <compute_skewness+0x7a>
	 }
	 
	 second_central = second_central / sum(peak2_left,peak2_right,buffer);
  4014be:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4014c0:	9903      	ldr	r1, [sp, #12]
  4014c2:	9802      	ldr	r0, [sp, #8]
  4014c4:	4b14      	ldr	r3, [pc, #80]	; (401518 <compute_skewness+0x118>)
  4014c6:	4798      	blx	r3
	
	skewness[1] = second_central;
  4014c8:	fbb6 f0f0 	udiv	r0, r6, r0
  4014cc:	4b0d      	ldr	r3, [pc, #52]	; (401504 <compute_skewness+0x104>)
  4014ce:	4798      	blx	r3
  4014d0:	4b0d      	ldr	r3, [pc, #52]	; (401508 <compute_skewness+0x108>)
  4014d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
	
}
  4014d6:	b005      	add	sp, #20
  4014d8:	ecbd 8b02 	vpop	{d8}
  4014dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 second_central += (pow((i-first_peak_mean),2)*buffer[i]);
  4014e0:	4628      	mov	r0, r5
  4014e2:	47d0      	blx	sl
  4014e4:	ec53 2b18 	vmov	r2, r3, d8
  4014e8:	47c8      	blx	r9
  4014ea:	e7ab      	b.n	401444 <compute_skewness+0x44>
	second_central = 0;
  4014ec:	2300      	movs	r3, #0
  4014ee:	461e      	mov	r6, r3
  4014f0:	e7e5      	b.n	4014be <compute_skewness+0xbe>
  4014f2:	bf00      	nop
  4014f4:	f3af 8000 	nop.w
  4014f8:	00000000 	.word	0x00000000
  4014fc:	40000000 	.word	0x40000000
  401500:	00401025 	.word	0x00401025
  401504:	00402fd1 	.word	0x00402fd1
  401508:	20008cd8 	.word	0x20008cd8
  40150c:	00402ff1 	.word	0x00402ff1
  401510:	004030bd 	.word	0x004030bd
  401514:	00402d59 	.word	0x00402d59
  401518:	004011fd 	.word	0x004011fd
  40151c:	00401b49 	.word	0x00401b49
  401520:	0040361d 	.word	0x0040361d

00401524 <show_beam_parameters>:


/* Present beam parameters on terminal*/

void show_beam_parameters(uint16_t* buffer)
{
  401524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401528:	b08b      	sub	sp, #44	; 0x2c
  40152a:	af02      	add	r7, sp, #8
  40152c:	4682      	mov	sl, r0
	
 	detect_peaks(20, buffer);
  40152e:	4601      	mov	r1, r0
  401530:	2014      	movs	r0, #20
  401532:	4b75      	ldr	r3, [pc, #468]	; (401708 <show_beam_parameters+0x1e4>)
  401534:	4798      	blx	r3
 	compute_beam_intensity(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5], buffer);
  401536:	4d75      	ldr	r5, [pc, #468]	; (40170c <show_beam_parameters+0x1e8>)
  401538:	896b      	ldrh	r3, [r5, #10]
  40153a:	892a      	ldrh	r2, [r5, #8]
  40153c:	88a9      	ldrh	r1, [r5, #4]
  40153e:	8868      	ldrh	r0, [r5, #2]
  401540:	f8cd a000 	str.w	sl, [sp]
  401544:	4c72      	ldr	r4, [pc, #456]	; (401710 <show_beam_parameters+0x1ec>)
  401546:	47a0      	blx	r4
 	compute_fwhm(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5],buffer);
  401548:	896b      	ldrh	r3, [r5, #10]
  40154a:	892a      	ldrh	r2, [r5, #8]
  40154c:	88a9      	ldrh	r1, [r5, #4]
  40154e:	8868      	ldrh	r0, [r5, #2]
  401550:	f8cd a000 	str.w	sl, [sp]
  401554:	4c6f      	ldr	r4, [pc, #444]	; (401714 <show_beam_parameters+0x1f0>)
  401556:	47a0      	blx	r4
 	compute_skewness(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5],buffer);
  401558:	896b      	ldrh	r3, [r5, #10]
  40155a:	892a      	ldrh	r2, [r5, #8]
  40155c:	88a9      	ldrh	r1, [r5, #4]
  40155e:	8868      	ldrh	r0, [r5, #2]
  401560:	f8cd a000 	str.w	sl, [sp]
  401564:	4c6c      	ldr	r4, [pc, #432]	; (401718 <show_beam_parameters+0x1f4>)
  401566:	47a0      	blx	r4

	
	uint16_t peak_info[7] = {0,0,0,0,0,0,9999};
  401568:	2300      	movs	r3, #0
  40156a:	823b      	strh	r3, [r7, #16]
  40156c:	827b      	strh	r3, [r7, #18]
  40156e:	82bb      	strh	r3, [r7, #20]
  401570:	82fb      	strh	r3, [r7, #22]
  401572:	833b      	strh	r3, [r7, #24]
  401574:	837b      	strh	r3, [r7, #26]
  401576:	f242 730f 	movw	r3, #9999	; 0x270f
  40157a:	83bb      	strh	r3, [r7, #28]
  40157c:	462b      	mov	r3, r5
  40157e:	f107 0410 	add.w	r4, r7, #16
  401582:	350c      	adds	r5, #12
  401584:	4622      	mov	r2, r4
	
	
	
	for (uint16_t i = 0; i < 6; i++)
	{
		 peak_info[i] = peaks_localization[i];
  401586:	f833 1b02 	ldrh.w	r1, [r3], #2
  40158a:	f822 1b02 	strh.w	r1, [r2], #2
	for (uint16_t i = 0; i < 6; i++)
  40158e:	42ab      	cmp	r3, r5
  401590:	d1f9      	bne.n	401586 <show_beam_parameters+0x62>
	}
	
	uint16_t peak_width1 = peak_info[2] - peak_info[1] + 1;
  401592:	f8b7 c012 	ldrh.w	ip, [r7, #18]
  401596:	f8b7 9014 	ldrh.w	r9, [r7, #20]
  40159a:	f109 0901 	add.w	r9, r9, #1
  40159e:	eba9 090c 	sub.w	r9, r9, ip
  4015a2:	fa1f f989 	uxth.w	r9, r9
	uint16_t peak_one_plot_data[peak_width1];
  4015a6:	f109 31ff 	add.w	r1, r9, #4294967295
  4015aa:	ea4f 0349 	mov.w	r3, r9, lsl #1
  4015ae:	3308      	adds	r3, #8
  4015b0:	f023 0307 	bic.w	r3, r3, #7
  4015b4:	ebad 0d03 	sub.w	sp, sp, r3
  4015b8:	ae02      	add	r6, sp, #8
	uint16_t peak_width2 = peak_info[5] - peak_info[4] + 1;
  4015ba:	f8b7 e018 	ldrh.w	lr, [r7, #24]
  4015be:	f8b7 801a 	ldrh.w	r8, [r7, #26]
  4015c2:	f108 0801 	add.w	r8, r8, #1
  4015c6:	eba8 080e 	sub.w	r8, r8, lr
  4015ca:	fa1f f888 	uxth.w	r8, r8
	uint16_t peak_two_plot_data[peak_width2];
  4015ce:	f108 30ff 	add.w	r0, r8, #4294967295
  4015d2:	ea4f 0348 	mov.w	r3, r8, lsl #1
  4015d6:	3308      	adds	r3, #8
  4015d8:	f023 0307 	bic.w	r3, r3, #7
  4015dc:	ebad 0d03 	sub.w	sp, sp, r3
  4015e0:	ad02      	add	r5, sp, #8
	
	
	for (uint16_t i = 0; i < peak_width1-1; i++)
  4015e2:	2900      	cmp	r1, #0
  4015e4:	dd0c      	ble.n	401600 <show_beam_parameters+0xdc>
  4015e6:	2200      	movs	r2, #0
  4015e8:	4613      	mov	r3, r2
	{
		peak_one_plot_data[i] =  buffer[peak_info[1] + i];
  4015ea:	eb0c 0b02 	add.w	fp, ip, r2
  4015ee:	f83a b01b 	ldrh.w	fp, [sl, fp, lsl #1]
  4015f2:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
	for (uint16_t i = 0; i < peak_width1-1; i++)
  4015f6:	3301      	adds	r3, #1
  4015f8:	b29b      	uxth	r3, r3
  4015fa:	461a      	mov	r2, r3
  4015fc:	4299      	cmp	r1, r3
  4015fe:	dcf4      	bgt.n	4015ea <show_beam_parameters+0xc6>
	}
	
	peak_one_plot_data[peak_width1-1] = 8888; 
  401600:	f242 23b8 	movw	r3, #8888	; 0x22b8
  401604:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
	
	for (uint16_t i = 0; i < peak_width2-1; i++)
  401608:	2800      	cmp	r0, #0
  40160a:	dd0c      	ble.n	401626 <show_beam_parameters+0x102>
  40160c:	2200      	movs	r2, #0
  40160e:	4613      	mov	r3, r2
	{
		peak_two_plot_data[i] =  buffer[peak_info[4] + i];
  401610:	eb0e 0102 	add.w	r1, lr, r2
  401614:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
  401618:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
	for (uint16_t i = 0; i < peak_width2-1; i++)
  40161c:	3301      	adds	r3, #1
  40161e:	b29b      	uxth	r3, r3
  401620:	461a      	mov	r2, r3
  401622:	4298      	cmp	r0, r3
  401624:	dcf4      	bgt.n	401610 <show_beam_parameters+0xec>
	}
	
	peak_two_plot_data[peak_width2-1] = 7777; 
  401626:	f641 6361 	movw	r3, #7777	; 0x1e61
  40162a:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
	
	
	
	uint16_t beam_parameters[4] = {0,0,0,0};
	
	beam_parameters[0] = beam_intensity[0];
  40162e:	4b3b      	ldr	r3, [pc, #236]	; (40171c <show_beam_parameters+0x1f8>)
  401630:	881a      	ldrh	r2, [r3, #0]
  401632:	813a      	strh	r2, [r7, #8]
	beam_parameters[1] = beam_intensity[1];
  401634:	885b      	ldrh	r3, [r3, #2]
  401636:	817b      	strh	r3, [r7, #10]
	beam_parameters[2] = fwhm[0];
  401638:	4b39      	ldr	r3, [pc, #228]	; (401720 <show_beam_parameters+0x1fc>)
  40163a:	881a      	ldrh	r2, [r3, #0]
  40163c:	81ba      	strh	r2, [r7, #12]
	beam_parameters[3] = fwhm[1];
  40163e:	885b      	ldrh	r3, [r3, #2]
  401640:	81fb      	strh	r3, [r7, #14]
  401642:	f107 0b1e 	add.w	fp, r7, #30
	
	
	
	for (uint16_t i = 0; i < 7; i++)
    {
		usart_serial_write_packet(CONF_UART, peak_info+i,2);
  401646:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 401728 <show_beam_parameters+0x204>
  40164a:	2202      	movs	r2, #2
  40164c:	4621      	mov	r1, r4
  40164e:	4835      	ldr	r0, [pc, #212]	; (401724 <show_beam_parameters+0x200>)
  401650:	47d0      	blx	sl
  401652:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < 7; i++)
  401654:	455c      	cmp	r4, fp
  401656:	d1f8      	bne.n	40164a <show_beam_parameters+0x126>
				
	}
	
	for (uint16_t i = 0; i < peak_width1; i++)
  401658:	f1b9 0f00 	cmp.w	r9, #0
  40165c:	d015      	beq.n	40168a <show_beam_parameters+0x166>
  40165e:	4634      	mov	r4, r6
  401660:	f109 39ff 	add.w	r9, r9, #4294967295
  401664:	fa1f f989 	uxth.w	r9, r9
  401668:	f109 0901 	add.w	r9, r9, #1
  40166c:	eb06 0649 	add.w	r6, r6, r9, lsl #1
	{
		usart_serial_write_packet(CONF_UART, peak_one_plot_data + i,2);
  401670:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 401724 <show_beam_parameters+0x200>
  401674:	f04f 0a02 	mov.w	sl, #2
  401678:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 401728 <show_beam_parameters+0x204>
  40167c:	4652      	mov	r2, sl
  40167e:	4621      	mov	r1, r4
  401680:	4658      	mov	r0, fp
  401682:	47c8      	blx	r9
  401684:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < peak_width1; i++)
  401686:	42b4      	cmp	r4, r6
  401688:	d1f8      	bne.n	40167c <show_beam_parameters+0x158>
	}
	
	for (uint16_t i = 0; i < peak_width2; i++)
  40168a:	f1b8 0f00 	cmp.w	r8, #0
  40168e:	d014      	beq.n	4016ba <show_beam_parameters+0x196>
  401690:	462c      	mov	r4, r5
  401692:	f108 38ff 	add.w	r8, r8, #4294967295
  401696:	fa1f f888 	uxth.w	r8, r8
  40169a:	f108 0801 	add.w	r8, r8, #1
  40169e:	eb05 0548 	add.w	r5, r5, r8, lsl #1
	{
		usart_serial_write_packet(CONF_UART, peak_two_plot_data + i,2);
  4016a2:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401724 <show_beam_parameters+0x200>
  4016a6:	f04f 0802 	mov.w	r8, #2
  4016aa:	4e1f      	ldr	r6, [pc, #124]	; (401728 <show_beam_parameters+0x204>)
  4016ac:	4642      	mov	r2, r8
  4016ae:	4621      	mov	r1, r4
  4016b0:	4648      	mov	r0, r9
  4016b2:	47b0      	blx	r6
  4016b4:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < peak_width2; i++)
  4016b6:	42a5      	cmp	r5, r4
  4016b8:	d1f8      	bne.n	4016ac <show_beam_parameters+0x188>
  4016ba:	f107 0408 	add.w	r4, r7, #8
  4016be:	f107 0910 	add.w	r9, r7, #16
	}
	
	for (uint16_t i = 0; i < 4; i++)
	{
		usart_serial_write_packet(CONF_UART, beam_parameters + i,2);
  4016c2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 401724 <show_beam_parameters+0x200>
  4016c6:	2602      	movs	r6, #2
  4016c8:	4d17      	ldr	r5, [pc, #92]	; (401728 <show_beam_parameters+0x204>)
  4016ca:	4632      	mov	r2, r6
  4016cc:	4621      	mov	r1, r4
  4016ce:	4640      	mov	r0, r8
  4016d0:	47a8      	blx	r5
  4016d2:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < 4; i++)
  4016d4:	45a1      	cmp	r9, r4
  4016d6:	d1f8      	bne.n	4016ca <show_beam_parameters+0x1a6>
	}
	
	for (uint16_t i = 0; i < 2; i++)
	{
		usart_serial_write_packet(CONF_UART, skewness + i,8);
  4016d8:	4e14      	ldr	r6, [pc, #80]	; (40172c <show_beam_parameters+0x208>)
  4016da:	4d12      	ldr	r5, [pc, #72]	; (401724 <show_beam_parameters+0x200>)
  4016dc:	2208      	movs	r2, #8
  4016de:	4631      	mov	r1, r6
  4016e0:	4628      	mov	r0, r5
  4016e2:	4c11      	ldr	r4, [pc, #68]	; (401728 <show_beam_parameters+0x204>)
  4016e4:	47a0      	blx	r4
  4016e6:	2208      	movs	r2, #8
  4016e8:	18b1      	adds	r1, r6, r2
  4016ea:	4628      	mov	r0, r5
  4016ec:	47a0      	blx	r4
	}
	
	uint16_t delimiter = 6666;
  4016ee:	f107 0120 	add.w	r1, r7, #32
  4016f2:	f641 230a 	movw	r3, #6666	; 0x1a0a
  4016f6:	f821 3d1a 	strh.w	r3, [r1, #-26]!
	usart_serial_write_packet(CONF_UART, &delimiter,2);
  4016fa:	2202      	movs	r2, #2
  4016fc:	4628      	mov	r0, r5
  4016fe:	47a0      	blx	r4
	
	printf("Y skewness : ");
	print_float(skewness[1]);
	
	*/
}
  401700:	3724      	adds	r7, #36	; 0x24
  401702:	46bd      	mov	sp, r7
  401704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401708:	0040109d 	.word	0x0040109d
  40170c:	20008ccc 	.word	0x20008ccc
  401710:	0040119d 	.word	0x0040119d
  401714:	00401229 	.word	0x00401229
  401718:	00401401 	.word	0x00401401
  40171c:	20008cc0 	.word	0x20008cc0
  401720:	20008cc8 	.word	0x20008cc8
  401724:	400e0600 	.word	0x400e0600
  401728:	004001cd 	.word	0x004001cd
  40172c:	20008cd8 	.word	0x20008cd8

00401730 <ACC_Handler>:
{
  401730:	b570      	push	{r4, r5, r6, lr}
	ul_status = acc_get_interrupt_status(ACC);
  401732:	4824      	ldr	r0, [pc, #144]	; (4017c4 <ACC_Handler+0x94>)
  401734:	4b24      	ldr	r3, [pc, #144]	; (4017c8 <ACC_Handler+0x98>)
  401736:	4798      	blx	r3
	if ((ul_status & ACC_ISR_CE) == ACC_ISR_CE) {
  401738:	f010 0f01 	tst.w	r0, #1
  40173c:	d100      	bne.n	401740 <ACC_Handler+0x10>
  40173e:	bd70      	pop	{r4, r5, r6, pc}
		if (acc_get_comparison_result(ACC)) {
  401740:	4820      	ldr	r0, [pc, #128]	; (4017c4 <ACC_Handler+0x94>)
  401742:	4b22      	ldr	r3, [pc, #136]	; (4017cc <ACC_Handler+0x9c>)
  401744:	4798      	blx	r3
  401746:	2800      	cmp	r0, #0
  401748:	d033      	beq.n	4017b2 <ACC_Handler+0x82>
			if(!triggered){
  40174a:	4b21      	ldr	r3, [pc, #132]	; (4017d0 <ACC_Handler+0xa0>)
  40174c:	781b      	ldrb	r3, [r3, #0]
  40174e:	2b00      	cmp	r3, #0
  401750:	d1f5      	bne.n	40173e <ACC_Handler+0xe>
				startedSampling=false;
  401752:	4a20      	ldr	r2, [pc, #128]	; (4017d4 <ACC_Handler+0xa4>)
  401754:	7013      	strb	r3, [r2, #0]
				test=0;
  401756:	4a20      	ldr	r2, [pc, #128]	; (4017d8 <ACC_Handler+0xa8>)
  401758:	6013      	str	r3, [r2, #0]
				triggered= true;
  40175a:	2201      	movs	r2, #1
  40175c:	4b1c      	ldr	r3, [pc, #112]	; (4017d0 <ACC_Handler+0xa0>)
  40175e:	701a      	strb	r2, [r3, #0]
				if(delay==0){
  401760:	4b1e      	ldr	r3, [pc, #120]	; (4017dc <ACC_Handler+0xac>)
  401762:	681b      	ldr	r3, [r3, #0]
  401764:	b933      	cbnz	r3, 401774 <ACC_Handler+0x44>
					tc_start(TC0,0);
  401766:	2100      	movs	r1, #0
  401768:	481d      	ldr	r0, [pc, #116]	; (4017e0 <ACC_Handler+0xb0>)
  40176a:	4b1e      	ldr	r3, [pc, #120]	; (4017e4 <ACC_Handler+0xb4>)
  40176c:	4798      	blx	r3
					cycleEnded();
  40176e:	4b1e      	ldr	r3, [pc, #120]	; (4017e8 <ACC_Handler+0xb8>)
  401770:	4798      	blx	r3
  401772:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401774:	4b1d      	ldr	r3, [pc, #116]	; (4017ec <ACC_Handler+0xbc>)
  401776:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
  40177a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40177e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401782:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401786:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40178a:	601c      	str	r4, [r3, #0]
					tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
  40178c:	4d14      	ldr	r5, [pc, #80]	; (4017e0 <ACC_Handler+0xb0>)
  40178e:	2210      	movs	r2, #16
  401790:	2101      	movs	r1, #1
  401792:	4628      	mov	r0, r5
  401794:	4b16      	ldr	r3, [pc, #88]	; (4017f0 <ACC_Handler+0xc0>)
  401796:	4798      	blx	r3
					afec_enable(AFEC0);
  401798:	4816      	ldr	r0, [pc, #88]	; (4017f4 <ACC_Handler+0xc4>)
  40179a:	4b17      	ldr	r3, [pc, #92]	; (4017f8 <ACC_Handler+0xc8>)
  40179c:	4798      	blx	r3
					tc_start(TC0,1);
  40179e:	2101      	movs	r1, #1
  4017a0:	4628      	mov	r0, r5
  4017a2:	4e10      	ldr	r6, [pc, #64]	; (4017e4 <ACC_Handler+0xb4>)
  4017a4:	47b0      	blx	r6
					tc_start(TC0,0);
  4017a6:	2100      	movs	r1, #0
  4017a8:	4628      	mov	r0, r5
  4017aa:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4017ac:	4b13      	ldr	r3, [pc, #76]	; (4017fc <ACC_Handler+0xcc>)
  4017ae:	635c      	str	r4, [r3, #52]	; 0x34
  4017b0:	bd70      	pop	{r4, r5, r6, pc}
			if(triggered)
  4017b2:	4b07      	ldr	r3, [pc, #28]	; (4017d0 <ACC_Handler+0xa0>)
  4017b4:	781b      	ldrb	r3, [r3, #0]
  4017b6:	2b00      	cmp	r3, #0
  4017b8:	d0c1      	beq.n	40173e <ACC_Handler+0xe>
				triggered=false;
  4017ba:	2200      	movs	r2, #0
  4017bc:	4b04      	ldr	r3, [pc, #16]	; (4017d0 <ACC_Handler+0xa0>)
  4017be:	701a      	strb	r2, [r3, #0]
}
  4017c0:	e7bd      	b.n	40173e <ACC_Handler+0xe>
  4017c2:	bf00      	nop
  4017c4:	400bc000 	.word	0x400bc000
  4017c8:	00400475 	.word	0x00400475
  4017cc:	0040045b 	.word	0x0040045b
  4017d0:	20008cf0 	.word	0x20008cf0
  4017d4:	20008ce8 	.word	0x20008ce8
  4017d8:	20008cec 	.word	0x20008cec
  4017dc:	20000008 	.word	0x20000008
  4017e0:	40090000 	.word	0x40090000
  4017e4:	00400a13 	.word	0x00400a13
  4017e8:	00400e85 	.word	0x00400e85
  4017ec:	e000e100 	.word	0xe000e100
  4017f0:	00400a23 	.word	0x00400a23
  4017f4:	400b0000 	.word	0x400b0000
  4017f8:	0040070d 	.word	0x0040070d
  4017fc:	400e1400 	.word	0x400e1400

00401800 <TC1_Handler>:
void TC1_Handler(void){
  401800:	b510      	push	{r4, lr}
	startedSampling=true;
  401802:	2401      	movs	r4, #1
  401804:	4b0d      	ldr	r3, [pc, #52]	; (40183c <TC1_Handler+0x3c>)
  401806:	701c      	strb	r4, [r3, #0]
	printf("%d\n\r",test);
  401808:	4b0d      	ldr	r3, [pc, #52]	; (401840 <TC1_Handler+0x40>)
  40180a:	6819      	ldr	r1, [r3, #0]
  40180c:	480d      	ldr	r0, [pc, #52]	; (401844 <TC1_Handler+0x44>)
  40180e:	4b0e      	ldr	r3, [pc, #56]	; (401848 <TC1_Handler+0x48>)
  401810:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401816:	4a0d      	ldr	r2, [pc, #52]	; (40184c <TC1_Handler+0x4c>)
  401818:	6313      	str	r3, [r2, #48]	; 0x30
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40181a:	4a0d      	ldr	r2, [pc, #52]	; (401850 <TC1_Handler+0x50>)
  40181c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  401820:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401824:	f3bf 8f6f 	isb	sy
	tc_disable_interrupt(TC0, 1, TC_IER_CPCS);
  401828:	2210      	movs	r2, #16
  40182a:	4621      	mov	r1, r4
  40182c:	4809      	ldr	r0, [pc, #36]	; (401854 <TC1_Handler+0x54>)
  40182e:	4b0a      	ldr	r3, [pc, #40]	; (401858 <TC1_Handler+0x58>)
  401830:	4798      	blx	r3
	afec_disable(AFEC0);
  401832:	480a      	ldr	r0, [pc, #40]	; (40185c <TC1_Handler+0x5c>)
  401834:	4b0a      	ldr	r3, [pc, #40]	; (401860 <TC1_Handler+0x60>)
  401836:	4798      	blx	r3
  401838:	bd10      	pop	{r4, pc}
  40183a:	bf00      	nop
  40183c:	20008ce8 	.word	0x20008ce8
  401840:	20008cec 	.word	0x20008cec
  401844:	00406718 	.word	0x00406718
  401848:	00403ab5 	.word	0x00403ab5
  40184c:	400e1400 	.word	0x400e1400
  401850:	e000e100 	.word	0xe000e100
  401854:	40090000 	.word	0x40090000
  401858:	00400a2b 	.word	0x00400a2b
  40185c:	400b0000 	.word	0x400b0000
  401860:	00400771 	.word	0x00400771

00401864 <main>:
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
	dacc_write_conversion_data(DACC, 3100);
}

int main (void)
{
  401864:	b580      	push	{r7, lr}
  401866:	b08c      	sub	sp, #48	; 0x30
	sysclk_init();
  401868:	4b86      	ldr	r3, [pc, #536]	; (401a84 <main+0x220>)
  40186a:	4798      	blx	r3
	board_init();
  40186c:	4b86      	ldr	r3, [pc, #536]	; (401a88 <main+0x224>)
  40186e:	4798      	blx	r3
  401870:	2007      	movs	r0, #7
  401872:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 401b20 <main+0x2bc>
  401876:	47c0      	blx	r8
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401878:	4d84      	ldr	r5, [pc, #528]	; (401a8c <main+0x228>)
  40187a:	4b85      	ldr	r3, [pc, #532]	; (401a90 <main+0x22c>)
  40187c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40187e:	4a85      	ldr	r2, [pc, #532]	; (401a94 <main+0x230>)
  401880:	4b85      	ldr	r3, [pc, #532]	; (401a98 <main+0x234>)
  401882:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401884:	4a85      	ldr	r2, [pc, #532]	; (401a9c <main+0x238>)
  401886:	4b86      	ldr	r3, [pc, #536]	; (401aa0 <main+0x23c>)
  401888:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40188a:	4c86      	ldr	r4, [pc, #536]	; (401aa4 <main+0x240>)
  40188c:	9405      	str	r4, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
  40188e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401892:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
  401894:	f44f 6900 	mov.w	r9, #2048	; 0x800
  401898:	f8cd 901c 	str.w	r9, [sp, #28]
  40189c:	2007      	movs	r0, #7
  40189e:	47c0      	blx	r8
		uart_init((Uart*)p_usart, &uart_settings);
  4018a0:	a905      	add	r1, sp, #20
  4018a2:	4628      	mov	r0, r5
  4018a4:	4b80      	ldr	r3, [pc, #512]	; (401aa8 <main+0x244>)
  4018a6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4018a8:	4e80      	ldr	r6, [pc, #512]	; (401aac <main+0x248>)
  4018aa:	6833      	ldr	r3, [r6, #0]
  4018ac:	2100      	movs	r1, #0
  4018ae:	6898      	ldr	r0, [r3, #8]
  4018b0:	4d7f      	ldr	r5, [pc, #508]	; (401ab0 <main+0x24c>)
  4018b2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4018b4:	6833      	ldr	r3, [r6, #0]
  4018b6:	2100      	movs	r1, #0
  4018b8:	6858      	ldr	r0, [r3, #4]
  4018ba:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_DACC);
  4018bc:	2020      	movs	r0, #32
  4018be:	47c0      	blx	r8
	dacc_reset(DACC);
  4018c0:	4d7c      	ldr	r5, [pc, #496]	; (401ab4 <main+0x250>)
  4018c2:	4628      	mov	r0, r5
  4018c4:	4b7c      	ldr	r3, [pc, #496]	; (401ab8 <main+0x254>)
  4018c6:	4798      	blx	r3
	dacc_disable_trigger(DACC);
  4018c8:	4628      	mov	r0, r5
  4018ca:	4b7c      	ldr	r3, [pc, #496]	; (401abc <main+0x258>)
  4018cc:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
  4018ce:	2100      	movs	r1, #0
  4018d0:	4628      	mov	r0, r5
  4018d2:	4b7b      	ldr	r3, [pc, #492]	; (401ac0 <main+0x25c>)
  4018d4:	4798      	blx	r3
	dacc_set_timing(DACC, 0, 0xf);
  4018d6:	220f      	movs	r2, #15
  4018d8:	2100      	movs	r1, #0
  4018da:	4628      	mov	r0, r5
  4018dc:	4b79      	ldr	r3, [pc, #484]	; (401ac4 <main+0x260>)
  4018de:	4798      	blx	r3
	dacc_set_channel_selection(DACC, DACC_CHANNEL_0);
  4018e0:	2100      	movs	r1, #0
  4018e2:	4628      	mov	r0, r5
  4018e4:	4b78      	ldr	r3, [pc, #480]	; (401ac8 <main+0x264>)
  4018e6:	4798      	blx	r3
	dacc_enable_channel(DACC, DACC_CHANNEL_0);
  4018e8:	2100      	movs	r1, #0
  4018ea:	4628      	mov	r0, r5
  4018ec:	4b77      	ldr	r3, [pc, #476]	; (401acc <main+0x268>)
  4018ee:	4798      	blx	r3
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  4018f0:	f44f 7185 	mov.w	r1, #266	; 0x10a
  4018f4:	4628      	mov	r0, r5
  4018f6:	4b76      	ldr	r3, [pc, #472]	; (401ad0 <main+0x26c>)
  4018f8:	4798      	blx	r3
	dacc_write_conversion_data(DACC, 3100);
  4018fa:	f640 411c 	movw	r1, #3100	; 0xc1c
  4018fe:	4628      	mov	r0, r5
  401900:	4b74      	ldr	r3, [pc, #464]	; (401ad4 <main+0x270>)
  401902:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401904:	4b74      	ldr	r3, [pc, #464]	; (401ad8 <main+0x274>)
  401906:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40190a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40190c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	configure_console();
	configureDACC();
	
	ioport_set_pin_dir(delayPin,IOPORT_DIR_OUTPUT);
	g_afec0_sample_data = 0;
  401910:	2600      	movs	r6, #0
  401912:	4b72      	ldr	r3, [pc, #456]	; (401adc <main+0x278>)
  401914:	801e      	strh	r6, [r3, #0]
	afec_enable(AFEC0);
  401916:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
  40191a:	4628      	mov	r0, r5
  40191c:	4b70      	ldr	r3, [pc, #448]	; (401ae0 <main+0x27c>)
  40191e:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  401920:	a805      	add	r0, sp, #20
  401922:	4b70      	ldr	r3, [pc, #448]	; (401ae4 <main+0x280>)
  401924:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  401926:	a802      	add	r0, sp, #8
  401928:	4b6f      	ldr	r3, [pc, #444]	; (401ae8 <main+0x284>)
  40192a:	4798      	blx	r3
		afec_init(AFEC0, &afec_cfg);
  40192c:	a905      	add	r1, sp, #20
  40192e:	4628      	mov	r0, r5
  401930:	f8df a20c 	ldr.w	sl, [pc, #524]	; 401b40 <main+0x2dc>
  401934:	47d0      	blx	sl
		afec_init(AFEC1, &afec_cfg);
  401936:	4f6d      	ldr	r7, [pc, #436]	; (401aec <main+0x288>)
  401938:	a905      	add	r1, sp, #20
  40193a:	4638      	mov	r0, r7
  40193c:	47d0      	blx	sl
		afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  40193e:	aa02      	add	r2, sp, #8
  401940:	2106      	movs	r1, #6
  401942:	4628      	mov	r0, r5
  401944:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 401b44 <main+0x2e0>
  401948:	47d0      	blx	sl
		afec_ch_set_config(AFEC1, AFEC_CHANNEL_0, &afec_ch_cfg);
  40194a:	aa02      	add	r2, sp, #8
  40194c:	4631      	mov	r1, r6
  40194e:	4638      	mov	r0, r7
  401950:	47d0      	blx	sl
	afec->AFEC_CSELR = afec_ch;
  401952:	667e      	str	r6, [r7, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  401954:	f8c7 906c 	str.w	r9, [r7, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  401958:	2306      	movs	r3, #6
  40195a:	666b      	str	r3, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40195c:	f8c5 906c 	str.w	r9, [r5, #108]	; 0x6c
	reg = afec->AFEC_MR;
  401960:	687b      	ldr	r3, [r7, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  401962:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  401966:	607b      	str	r3, [r7, #4]
    uint32_t ul_div = 0;
  401968:	9603      	str	r6, [sp, #12]
	uint32_t ul_tc_clks = 0;
  40196a:	af0c      	add	r7, sp, #48	; 0x30
  40196c:	f847 6d20 	str.w	r6, [r7, #-32]!
	pmc_enable_periph_clk(ID_TC0);														// Enable peripheral clock of timer counter 0
  401970:	2015      	movs	r0, #21
  401972:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_TC1);
  401974:	2016      	movs	r0, #22
  401976:	47c0      	blx	r8
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  401978:	9400      	str	r4, [sp, #0]
  40197a:	463b      	mov	r3, r7
  40197c:	aa03      	add	r2, sp, #12
  40197e:	4621      	mov	r1, r4
  401980:	485b      	ldr	r0, [pc, #364]	; (401af0 <main+0x28c>)
  401982:	4f5c      	ldr	r7, [pc, #368]	; (401af4 <main+0x290>)
  401984:	47b8      	blx	r7
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  401986:	4f5c      	ldr	r7, [pc, #368]	; (401af8 <main+0x294>)
  401988:	9a04      	ldr	r2, [sp, #16]
  40198a:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  40198e:	4631      	mov	r1, r6
  401990:	4638      	mov	r0, r7
  401992:	4b5a      	ldr	r3, [pc, #360]	; (401afc <main+0x298>)
  401994:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  401996:	9b03      	ldr	r3, [sp, #12]
  401998:	fbb4 f3f3 	udiv	r3, r4, r3
  40199c:	4a58      	ldr	r2, [pc, #352]	; (401b00 <main+0x29c>)
  40199e:	fba2 2303 	umull	r2, r3, r2, r3
  4019a2:	0c5a      	lsrs	r2, r3, #17
  4019a4:	617a      	str	r2, [r7, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  4019a6:	0c1b      	lsrs	r3, r3, #16
  4019a8:	61fb      	str	r3, [r7, #28]
	reg = afec->AFEC_MR;
  4019aa:	686b      	ldr	r3, [r5, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4019ac:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  4019b0:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  4019b4:	606b      	str	r3, [r5, #4]
		if(delay!=0){
  4019b6:	4b53      	ldr	r3, [pc, #332]	; (401b04 <main+0x2a0>)
  4019b8:	681e      	ldr	r6, [r3, #0]
  4019ba:	b35e      	cbz	r6, 401a14 <main+0x1b0>
	uint32_t ul_div=0;
  4019bc:	2200      	movs	r2, #0
  4019be:	9203      	str	r2, [sp, #12]
	uint32_t ul_tc_clks=0;
  4019c0:	ab0c      	add	r3, sp, #48	; 0x30
  4019c2:	f843 2d20 	str.w	r2, [r3, #-32]!
	tc_find_mck_divisor(delayFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  4019c6:	9400      	str	r4, [sp, #0]
  4019c8:	aa03      	add	r2, sp, #12
  4019ca:	4621      	mov	r1, r4
  4019cc:	4630      	mov	r0, r6
  4019ce:	4d49      	ldr	r5, [pc, #292]	; (401af4 <main+0x290>)
  4019d0:	47a8      	blx	r5
	tc_init(TC0,1,ul_tc_clks | TC_CMR_CPCTRG);
  4019d2:	9a04      	ldr	r2, [sp, #16]
  4019d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4019d8:	2101      	movs	r1, #1
  4019da:	4638      	mov	r0, r7
  4019dc:	4b47      	ldr	r3, [pc, #284]	; (401afc <main+0x298>)
  4019de:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/delayFreq;
  4019e0:	9a03      	ldr	r2, [sp, #12]
  4019e2:	fbb4 f2f2 	udiv	r2, r4, r2
	tc_write_rc(TC0,1,counts);
  4019e6:	fbb2 f2f6 	udiv	r2, r2, r6
  4019ea:	2101      	movs	r1, #1
  4019ec:	4638      	mov	r0, r7
  4019ee:	4b46      	ldr	r3, [pc, #280]	; (401b08 <main+0x2a4>)
  4019f0:	4798      	blx	r3
  4019f2:	4b46      	ldr	r3, [pc, #280]	; (401b0c <main+0x2a8>)
  4019f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4019f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4019fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401a00:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a04:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a08:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
  401a0a:	2210      	movs	r2, #16
  401a0c:	2101      	movs	r1, #1
  401a0e:	4638      	mov	r0, r7
  401a10:	4b3f      	ldr	r3, [pc, #252]	; (401b10 <main+0x2ac>)
  401a12:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401a14:	2301      	movs	r3, #1
  401a16:	4a35      	ldr	r2, [pc, #212]	; (401aec <main+0x288>)
  401a18:	6153      	str	r3, [r2, #20]
  401a1a:	4c3e      	ldr	r4, [pc, #248]	; (401b14 <main+0x2b0>)
  401a1c:	2240      	movs	r2, #64	; 0x40
  401a1e:	6162      	str	r2, [r4, #20]
		afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  401a20:	4a3d      	ldr	r2, [pc, #244]	; (401b18 <main+0x2b4>)
  401a22:	2110      	movs	r1, #16
  401a24:	4620      	mov	r0, r4
  401a26:	4d3d      	ldr	r5, [pc, #244]	; (401b1c <main+0x2b8>)
  401a28:	47a8      	blx	r5
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  401a2a:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  401a2c:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  401a2e:	6863      	ldr	r3, [r4, #4]
  401a30:	f013 0f80 	tst.w	r3, #128	; 0x80
  401a34:	d101      	bne.n	401a3a <main+0x1d6>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  401a36:	2208      	movs	r2, #8
  401a38:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  401a3a:	4b36      	ldr	r3, [pc, #216]	; (401b14 <main+0x2b0>)
  401a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  401a3e:	2a00      	cmp	r2, #0
  401a40:	dafc      	bge.n	401a3c <main+0x1d8>
	g_max_digital = MAX_DIGITAL_12_BIT;
	set_afec_test();
	pmc_enable_periph_clk(ID_ACC);
  401a42:	2021      	movs	r0, #33	; 0x21
  401a44:	4b36      	ldr	r3, [pc, #216]	; (401b20 <main+0x2bc>)
  401a46:	4798      	blx	r3
	acc_init(ACC, ACC_MR_SELPLUS_AD7, ACC_MR_SELMINUS_DAC1,
  401a48:	4c36      	ldr	r4, [pc, #216]	; (401b24 <main+0x2c0>)
  401a4a:	2300      	movs	r3, #0
  401a4c:	9300      	str	r3, [sp, #0]
  401a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401a52:	2203      	movs	r2, #3
  401a54:	2170      	movs	r1, #112	; 0x70
  401a56:	4620      	mov	r0, r4
  401a58:	4d33      	ldr	r5, [pc, #204]	; (401b28 <main+0x2c4>)
  401a5a:	47a8      	blx	r5
  401a5c:	2202      	movs	r2, #2
  401a5e:	4b2b      	ldr	r3, [pc, #172]	; (401b0c <main+0x2a8>)
  401a60:	605a      	str	r2, [r3, #4]
	ACC_MR_EDGETYP_ANY, ACC_MR_INV_DIS);
	NVIC_EnableIRQ(ACC_IRQn);
	acc_enable_interrupt(ACC);	
  401a62:	4620      	mov	r0, r4
  401a64:	4b31      	ldr	r3, [pc, #196]	; (401b2c <main+0x2c8>)
  401a66:	4798      	blx	r3
	while (1) {
		if(getbuffersFilled()==100){
  401a68:	4d31      	ldr	r5, [pc, #196]	; (401b30 <main+0x2cc>)
			//break;
		}
					
		if(fullBuffer){
  401a6a:	4c32      	ldr	r4, [pc, #200]	; (401b34 <main+0x2d0>)
			fullBuffer=false;
			show_beam_parameters(getFilledBuffer());
  401a6c:	4e32      	ldr	r6, [pc, #200]	; (401b38 <main+0x2d4>)
		if(getbuffersFilled()==100){
  401a6e:	47a8      	blx	r5
		if(fullBuffer){
  401a70:	7823      	ldrb	r3, [r4, #0]
  401a72:	2b00      	cmp	r3, #0
  401a74:	d0fb      	beq.n	401a6e <main+0x20a>
			fullBuffer=false;
  401a76:	2300      	movs	r3, #0
  401a78:	7023      	strb	r3, [r4, #0]
			show_beam_parameters(getFilledBuffer());
  401a7a:	47b0      	blx	r6
  401a7c:	4b2f      	ldr	r3, [pc, #188]	; (401b3c <main+0x2d8>)
  401a7e:	4798      	blx	r3
  401a80:	e7f5      	b.n	401a6e <main+0x20a>
  401a82:	bf00      	nop
  401a84:	00400165 	.word	0x00400165
  401a88:	00400389 	.word	0x00400389
  401a8c:	400e0600 	.word	0x400e0600
  401a90:	20008d38 	.word	0x20008d38
  401a94:	00400f71 	.word	0x00400f71
  401a98:	20008d34 	.word	0x20008d34
  401a9c:	00400ee9 	.word	0x00400ee9
  401aa0:	20008d30 	.word	0x20008d30
  401aa4:	05b8d800 	.word	0x05b8d800
  401aa8:	00400aa3 	.word	0x00400aa3
  401aac:	20000010 	.word	0x20000010
  401ab0:	00403b79 	.word	0x00403b79
  401ab4:	400b8000 	.word	0x400b8000
  401ab8:	004007d1 	.word	0x004007d1
  401abc:	004007d7 	.word	0x004007d7
  401ac0:	004007e1 	.word	0x004007e1
  401ac4:	00400825 	.word	0x00400825
  401ac8:	0040080d 	.word	0x0040080d
  401acc:	0040084d 	.word	0x0040084d
  401ad0:	00400861 	.word	0x00400861
  401ad4:	00400809 	.word	0x00400809
  401ad8:	400e1400 	.word	0x400e1400
  401adc:	20008df4 	.word	0x20008df4
  401ae0:	0040070d 	.word	0x0040070d
  401ae4:	00400545 	.word	0x00400545
  401ae8:	00400575 	.word	0x00400575
  401aec:	400b4000 	.word	0x400b4000
  401af0:	0003d090 	.word	0x0003d090
  401af4:	00400a33 	.word	0x00400a33
  401af8:	40090000 	.word	0x40090000
  401afc:	004009f9 	.word	0x004009f9
  401b00:	431bde83 	.word	0x431bde83
  401b04:	20000008 	.word	0x20000008
  401b08:	00400a1b 	.word	0x00400a1b
  401b0c:	e000e100 	.word	0xe000e100
  401b10:	00400a23 	.word	0x00400a23
  401b14:	400b0000 	.word	0x400b0000
  401b18:	00400ff1 	.word	0x00400ff1
  401b1c:	0040068d 	.word	0x0040068d
  401b20:	00400951 	.word	0x00400951
  401b24:	400bc000 	.word	0x400bc000
  401b28:	00400421 	.word	0x00400421
  401b2c:	0040046f 	.word	0x0040046f
  401b30:	00400ebd 	.word	0x00400ebd
  401b34:	20008cc4 	.word	0x20008cc4
  401b38:	00400ec9 	.word	0x00400ec9
  401b3c:	00401525 	.word	0x00401525
  401b40:	00400581 	.word	0x00400581
  401b44:	00400515 	.word	0x00400515

00401b48 <pow>:
  401b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b4c:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 401e40 <pow+0x2f8>
  401b50:	b08d      	sub	sp, #52	; 0x34
  401b52:	4606      	mov	r6, r0
  401b54:	460f      	mov	r7, r1
  401b56:	4614      	mov	r4, r2
  401b58:	461d      	mov	r5, r3
  401b5a:	f000 f9d1 	bl	401f00 <__ieee754_pow>
  401b5e:	f999 8000 	ldrsb.w	r8, [r9]
  401b62:	f1b8 3fff 	cmp.w	r8, #4294967295
  401b66:	e9cd 0100 	strd	r0, r1, [sp]
  401b6a:	d036      	beq.n	401bda <pow+0x92>
  401b6c:	4622      	mov	r2, r4
  401b6e:	462b      	mov	r3, r5
  401b70:	4620      	mov	r0, r4
  401b72:	4629      	mov	r1, r5
  401b74:	f001 fd3c 	bl	4035f0 <__aeabi_dcmpun>
  401b78:	4683      	mov	fp, r0
  401b7a:	bb70      	cbnz	r0, 401bda <pow+0x92>
  401b7c:	4632      	mov	r2, r6
  401b7e:	463b      	mov	r3, r7
  401b80:	4630      	mov	r0, r6
  401b82:	4639      	mov	r1, r7
  401b84:	f001 fd34 	bl	4035f0 <__aeabi_dcmpun>
  401b88:	2200      	movs	r2, #0
  401b8a:	4682      	mov	sl, r0
  401b8c:	2300      	movs	r3, #0
  401b8e:	2800      	cmp	r0, #0
  401b90:	f040 80a0 	bne.w	401cd4 <pow+0x18c>
  401b94:	4630      	mov	r0, r6
  401b96:	4639      	mov	r1, r7
  401b98:	f001 fcf8 	bl	40358c <__aeabi_dcmpeq>
  401b9c:	b310      	cbz	r0, 401be4 <pow+0x9c>
  401b9e:	2200      	movs	r2, #0
  401ba0:	2300      	movs	r3, #0
  401ba2:	4620      	mov	r0, r4
  401ba4:	4629      	mov	r1, r5
  401ba6:	f001 fcf1 	bl	40358c <__aeabi_dcmpeq>
  401baa:	4683      	mov	fp, r0
  401bac:	2800      	cmp	r0, #0
  401bae:	d06a      	beq.n	401c86 <pow+0x13e>
  401bb0:	2201      	movs	r2, #1
  401bb2:	4b9c      	ldr	r3, [pc, #624]	; (401e24 <pow+0x2dc>)
  401bb4:	9202      	str	r2, [sp, #8]
  401bb6:	2100      	movs	r1, #0
  401bb8:	2200      	movs	r2, #0
  401bba:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  401bbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401bc2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401bc6:	e9cd 1208 	strd	r1, r2, [sp, #32]
  401bca:	9303      	str	r3, [sp, #12]
  401bcc:	f1b8 0f00 	cmp.w	r8, #0
  401bd0:	d045      	beq.n	401c5e <pow+0x116>
  401bd2:	4c95      	ldr	r4, [pc, #596]	; (401e28 <pow+0x2e0>)
  401bd4:	2300      	movs	r3, #0
  401bd6:	e9cd 3400 	strd	r3, r4, [sp]
  401bda:	e9dd 0100 	ldrd	r0, r1, [sp]
  401bde:	b00d      	add	sp, #52	; 0x34
  401be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401be4:	e9dd 0100 	ldrd	r0, r1, [sp]
  401be8:	f000 ff90 	bl	402b0c <finite>
  401bec:	4680      	mov	r8, r0
  401bee:	2800      	cmp	r0, #0
  401bf0:	f000 808b 	beq.w	401d0a <pow+0x1c2>
  401bf4:	f04f 0a00 	mov.w	sl, #0
  401bf8:	f04f 0b00 	mov.w	fp, #0
  401bfc:	4652      	mov	r2, sl
  401bfe:	465b      	mov	r3, fp
  401c00:	e9dd 0100 	ldrd	r0, r1, [sp]
  401c04:	f001 fcc2 	bl	40358c <__aeabi_dcmpeq>
  401c08:	2800      	cmp	r0, #0
  401c0a:	d0e6      	beq.n	401bda <pow+0x92>
  401c0c:	4630      	mov	r0, r6
  401c0e:	4639      	mov	r1, r7
  401c10:	f000 ff7c 	bl	402b0c <finite>
  401c14:	2800      	cmp	r0, #0
  401c16:	d0e0      	beq.n	401bda <pow+0x92>
  401c18:	4620      	mov	r0, r4
  401c1a:	4629      	mov	r1, r5
  401c1c:	f000 ff76 	bl	402b0c <finite>
  401c20:	2800      	cmp	r0, #0
  401c22:	d0da      	beq.n	401bda <pow+0x92>
  401c24:	f999 3000 	ldrsb.w	r3, [r9]
  401c28:	4a7e      	ldr	r2, [pc, #504]	; (401e24 <pow+0x2dc>)
  401c2a:	9203      	str	r2, [sp, #12]
  401c2c:	2104      	movs	r1, #4
  401c2e:	2200      	movs	r2, #0
  401c30:	2b02      	cmp	r3, #2
  401c32:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401c36:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401c3a:	e9cd ab08 	strd	sl, fp, [sp, #32]
  401c3e:	9102      	str	r1, [sp, #8]
  401c40:	920a      	str	r2, [sp, #40]	; 0x28
  401c42:	d003      	beq.n	401c4c <pow+0x104>
  401c44:	a802      	add	r0, sp, #8
  401c46:	f000 ff67 	bl	402b18 <matherr>
  401c4a:	b968      	cbnz	r0, 401c68 <pow+0x120>
  401c4c:	f001 ff04 	bl	403a58 <__errno>
  401c50:	2322      	movs	r3, #34	; 0x22
  401c52:	6003      	str	r3, [r0, #0]
  401c54:	e008      	b.n	401c68 <pow+0x120>
  401c56:	2300      	movs	r3, #0
  401c58:	2400      	movs	r4, #0
  401c5a:	e9cd 3408 	strd	r3, r4, [sp, #32]
  401c5e:	a802      	add	r0, sp, #8
  401c60:	f000 ff5a 	bl	402b18 <matherr>
  401c64:	2800      	cmp	r0, #0
  401c66:	d030      	beq.n	401cca <pow+0x182>
  401c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401c6a:	b11b      	cbz	r3, 401c74 <pow+0x12c>
  401c6c:	f001 fef4 	bl	403a58 <__errno>
  401c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401c72:	6003      	str	r3, [r0, #0]
  401c74:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
  401c78:	e9cd 3400 	strd	r3, r4, [sp]
  401c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
  401c80:	b00d      	add	sp, #52	; 0x34
  401c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c86:	4620      	mov	r0, r4
  401c88:	4629      	mov	r1, r5
  401c8a:	f000 ff3f 	bl	402b0c <finite>
  401c8e:	2800      	cmp	r0, #0
  401c90:	d0a3      	beq.n	401bda <pow+0x92>
  401c92:	2200      	movs	r2, #0
  401c94:	2300      	movs	r3, #0
  401c96:	4620      	mov	r0, r4
  401c98:	4629      	mov	r1, r5
  401c9a:	f001 fc81 	bl	4035a0 <__aeabi_dcmplt>
  401c9e:	2800      	cmp	r0, #0
  401ca0:	d09b      	beq.n	401bda <pow+0x92>
  401ca2:	f999 3000 	ldrsb.w	r3, [r9]
  401ca6:	4a5f      	ldr	r2, [pc, #380]	; (401e24 <pow+0x2dc>)
  401ca8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401cac:	2101      	movs	r1, #1
  401cae:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401cb2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401cb6:	9102      	str	r1, [sp, #8]
  401cb8:	9203      	str	r2, [sp, #12]
  401cba:	2b00      	cmp	r3, #0
  401cbc:	d0cb      	beq.n	401c56 <pow+0x10e>
  401cbe:	495b      	ldr	r1, [pc, #364]	; (401e2c <pow+0x2e4>)
  401cc0:	2000      	movs	r0, #0
  401cc2:	2b02      	cmp	r3, #2
  401cc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401cc8:	d1c9      	bne.n	401c5e <pow+0x116>
  401cca:	f001 fec5 	bl	403a58 <__errno>
  401cce:	2321      	movs	r3, #33	; 0x21
  401cd0:	6003      	str	r3, [r0, #0]
  401cd2:	e7c9      	b.n	401c68 <pow+0x120>
  401cd4:	4620      	mov	r0, r4
  401cd6:	4629      	mov	r1, r5
  401cd8:	f001 fc58 	bl	40358c <__aeabi_dcmpeq>
  401cdc:	2800      	cmp	r0, #0
  401cde:	f43f af7c 	beq.w	401bda <pow+0x92>
  401ce2:	4b51      	ldr	r3, [pc, #324]	; (401e28 <pow+0x2e0>)
  401ce4:	494f      	ldr	r1, [pc, #316]	; (401e24 <pow+0x2dc>)
  401ce6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401cea:	2001      	movs	r0, #1
  401cec:	2200      	movs	r2, #0
  401cee:	f1b8 0f02 	cmp.w	r8, #2
  401cf2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401cf6:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401cfa:	9002      	str	r0, [sp, #8]
  401cfc:	9103      	str	r1, [sp, #12]
  401cfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401d02:	d1ac      	bne.n	401c5e <pow+0x116>
  401d04:	e9cd 2300 	strd	r2, r3, [sp]
  401d08:	e767      	b.n	401bda <pow+0x92>
  401d0a:	4630      	mov	r0, r6
  401d0c:	4639      	mov	r1, r7
  401d0e:	f000 fefd 	bl	402b0c <finite>
  401d12:	2800      	cmp	r0, #0
  401d14:	f43f af6e 	beq.w	401bf4 <pow+0xac>
  401d18:	4620      	mov	r0, r4
  401d1a:	4629      	mov	r1, r5
  401d1c:	f000 fef6 	bl	402b0c <finite>
  401d20:	2800      	cmp	r0, #0
  401d22:	f43f af67 	beq.w	401bf4 <pow+0xac>
  401d26:	e9dd 2300 	ldrd	r2, r3, [sp]
  401d2a:	4610      	mov	r0, r2
  401d2c:	4619      	mov	r1, r3
  401d2e:	f001 fc5f 	bl	4035f0 <__aeabi_dcmpun>
  401d32:	2800      	cmp	r0, #0
  401d34:	d158      	bne.n	401de8 <pow+0x2a0>
  401d36:	2303      	movs	r3, #3
  401d38:	f999 8000 	ldrsb.w	r8, [r9]
  401d3c:	9302      	str	r3, [sp, #8]
  401d3e:	4b39      	ldr	r3, [pc, #228]	; (401e24 <pow+0x2dc>)
  401d40:	900a      	str	r0, [sp, #40]	; 0x28
  401d42:	9303      	str	r3, [sp, #12]
  401d44:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401d48:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401d4c:	2200      	movs	r2, #0
  401d4e:	2300      	movs	r3, #0
  401d50:	4630      	mov	r0, r6
  401d52:	4639      	mov	r1, r7
  401d54:	f1b8 0f00 	cmp.w	r8, #0
  401d58:	d126      	bne.n	401da8 <pow+0x260>
  401d5a:	4f35      	ldr	r7, [pc, #212]	; (401e30 <pow+0x2e8>)
  401d5c:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
  401d60:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401d64:	f001 fc1c 	bl	4035a0 <__aeabi_dcmplt>
  401d68:	2800      	cmp	r0, #0
  401d6a:	f43f af6b 	beq.w	401c44 <pow+0xfc>
  401d6e:	2200      	movs	r2, #0
  401d70:	4b30      	ldr	r3, [pc, #192]	; (401e34 <pow+0x2ec>)
  401d72:	4620      	mov	r0, r4
  401d74:	4629      	mov	r1, r5
  401d76:	f001 f9a1 	bl	4030bc <__aeabi_dmul>
  401d7a:	4604      	mov	r4, r0
  401d7c:	460d      	mov	r5, r1
  401d7e:	f000 fed3 	bl	402b28 <rint>
  401d82:	4602      	mov	r2, r0
  401d84:	460b      	mov	r3, r1
  401d86:	4620      	mov	r0, r4
  401d88:	4629      	mov	r1, r5
  401d8a:	f001 fbff 	bl	40358c <__aeabi_dcmpeq>
  401d8e:	bb40      	cbnz	r0, 401de2 <pow+0x29a>
  401d90:	4b29      	ldr	r3, [pc, #164]	; (401e38 <pow+0x2f0>)
  401d92:	f999 8000 	ldrsb.w	r8, [r9]
  401d96:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  401d9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401d9e:	f1b8 0f02 	cmp.w	r8, #2
  401da2:	f47f af4f 	bne.w	401c44 <pow+0xfc>
  401da6:	e751      	b.n	401c4c <pow+0x104>
  401da8:	4f24      	ldr	r7, [pc, #144]	; (401e3c <pow+0x2f4>)
  401daa:	2600      	movs	r6, #0
  401dac:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401db0:	f001 fbf6 	bl	4035a0 <__aeabi_dcmplt>
  401db4:	2800      	cmp	r0, #0
  401db6:	d0f2      	beq.n	401d9e <pow+0x256>
  401db8:	2200      	movs	r2, #0
  401dba:	4b1e      	ldr	r3, [pc, #120]	; (401e34 <pow+0x2ec>)
  401dbc:	4620      	mov	r0, r4
  401dbe:	4629      	mov	r1, r5
  401dc0:	f001 f97c 	bl	4030bc <__aeabi_dmul>
  401dc4:	4604      	mov	r4, r0
  401dc6:	460d      	mov	r5, r1
  401dc8:	f000 feae 	bl	402b28 <rint>
  401dcc:	4602      	mov	r2, r0
  401dce:	460b      	mov	r3, r1
  401dd0:	4620      	mov	r0, r4
  401dd2:	4629      	mov	r1, r5
  401dd4:	f001 fbda 	bl	40358c <__aeabi_dcmpeq>
  401dd8:	b918      	cbnz	r0, 401de2 <pow+0x29a>
  401dda:	4b14      	ldr	r3, [pc, #80]	; (401e2c <pow+0x2e4>)
  401ddc:	2200      	movs	r2, #0
  401dde:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401de2:	f999 8000 	ldrsb.w	r8, [r9]
  401de6:	e7da      	b.n	401d9e <pow+0x256>
  401de8:	f999 9000 	ldrsb.w	r9, [r9]
  401dec:	4b0d      	ldr	r3, [pc, #52]	; (401e24 <pow+0x2dc>)
  401dee:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  401df2:	2201      	movs	r2, #1
  401df4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401df8:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401dfc:	9202      	str	r2, [sp, #8]
  401dfe:	9303      	str	r3, [sp, #12]
  401e00:	f1b9 0f00 	cmp.w	r9, #0
  401e04:	f43f af27 	beq.w	401c56 <pow+0x10e>
  401e08:	2200      	movs	r2, #0
  401e0a:	2300      	movs	r3, #0
  401e0c:	4610      	mov	r0, r2
  401e0e:	4619      	mov	r1, r3
  401e10:	f001 fa7e 	bl	403310 <__aeabi_ddiv>
  401e14:	f1b9 0f02 	cmp.w	r9, #2
  401e18:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401e1c:	f43f af55 	beq.w	401cca <pow+0x182>
  401e20:	e71d      	b.n	401c5e <pow+0x116>
  401e22:	bf00      	nop
  401e24:	00406720 	.word	0x00406720
  401e28:	3ff00000 	.word	0x3ff00000
  401e2c:	fff00000 	.word	0xfff00000
  401e30:	47efffff 	.word	0x47efffff
  401e34:	3fe00000 	.word	0x3fe00000
  401e38:	c7efffff 	.word	0xc7efffff
  401e3c:	7ff00000 	.word	0x7ff00000
  401e40:	2000000e 	.word	0x2000000e

00401e44 <sqrt>:
  401e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e48:	b08b      	sub	sp, #44	; 0x2c
  401e4a:	4604      	mov	r4, r0
  401e4c:	460d      	mov	r5, r1
  401e4e:	f000 fd9d 	bl	40298c <__ieee754_sqrt>
  401e52:	4b29      	ldr	r3, [pc, #164]	; (401ef8 <sqrt+0xb4>)
  401e54:	f993 a000 	ldrsb.w	sl, [r3]
  401e58:	f1ba 3fff 	cmp.w	sl, #4294967295
  401e5c:	4606      	mov	r6, r0
  401e5e:	460f      	mov	r7, r1
  401e60:	d012      	beq.n	401e88 <sqrt+0x44>
  401e62:	4622      	mov	r2, r4
  401e64:	462b      	mov	r3, r5
  401e66:	4620      	mov	r0, r4
  401e68:	4629      	mov	r1, r5
  401e6a:	f001 fbc1 	bl	4035f0 <__aeabi_dcmpun>
  401e6e:	4683      	mov	fp, r0
  401e70:	b950      	cbnz	r0, 401e88 <sqrt+0x44>
  401e72:	f04f 0800 	mov.w	r8, #0
  401e76:	f04f 0900 	mov.w	r9, #0
  401e7a:	4642      	mov	r2, r8
  401e7c:	464b      	mov	r3, r9
  401e7e:	4620      	mov	r0, r4
  401e80:	4629      	mov	r1, r5
  401e82:	f001 fb8d 	bl	4035a0 <__aeabi_dcmplt>
  401e86:	b920      	cbnz	r0, 401e92 <sqrt+0x4e>
  401e88:	4630      	mov	r0, r6
  401e8a:	4639      	mov	r1, r7
  401e8c:	b00b      	add	sp, #44	; 0x2c
  401e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e92:	4b1a      	ldr	r3, [pc, #104]	; (401efc <sqrt+0xb8>)
  401e94:	f8cd b020 	str.w	fp, [sp, #32]
  401e98:	2201      	movs	r2, #1
  401e9a:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401e9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401ea2:	e88d 000c 	stmia.w	sp, {r2, r3}
  401ea6:	f1ba 0f00 	cmp.w	sl, #0
  401eaa:	d017      	beq.n	401edc <sqrt+0x98>
  401eac:	4642      	mov	r2, r8
  401eae:	464b      	mov	r3, r9
  401eb0:	4640      	mov	r0, r8
  401eb2:	4649      	mov	r1, r9
  401eb4:	f001 fa2c 	bl	403310 <__aeabi_ddiv>
  401eb8:	f1ba 0f02 	cmp.w	sl, #2
  401ebc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401ec0:	d10e      	bne.n	401ee0 <sqrt+0x9c>
  401ec2:	f001 fdc9 	bl	403a58 <__errno>
  401ec6:	2321      	movs	r3, #33	; 0x21
  401ec8:	6003      	str	r3, [r0, #0]
  401eca:	9b08      	ldr	r3, [sp, #32]
  401ecc:	b973      	cbnz	r3, 401eec <sqrt+0xa8>
  401ece:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  401ed2:	4630      	mov	r0, r6
  401ed4:	4639      	mov	r1, r7
  401ed6:	b00b      	add	sp, #44	; 0x2c
  401ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401edc:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401ee0:	4668      	mov	r0, sp
  401ee2:	f000 fe19 	bl	402b18 <matherr>
  401ee6:	2800      	cmp	r0, #0
  401ee8:	d1ef      	bne.n	401eca <sqrt+0x86>
  401eea:	e7ea      	b.n	401ec2 <sqrt+0x7e>
  401eec:	f001 fdb4 	bl	403a58 <__errno>
  401ef0:	9b08      	ldr	r3, [sp, #32]
  401ef2:	6003      	str	r3, [r0, #0]
  401ef4:	e7eb      	b.n	401ece <sqrt+0x8a>
  401ef6:	bf00      	nop
  401ef8:	2000000e 	.word	0x2000000e
  401efc:	00406724 	.word	0x00406724

00401f00 <__ieee754_pow>:
  401f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f04:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  401f08:	ea57 0402 	orrs.w	r4, r7, r2
  401f0c:	b093      	sub	sp, #76	; 0x4c
  401f0e:	d037      	beq.n	401f80 <__ieee754_pow+0x80>
  401f10:	4c67      	ldr	r4, [pc, #412]	; (4020b0 <__ieee754_pow+0x1b0>)
  401f12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  401f16:	42a6      	cmp	r6, r4
  401f18:	4683      	mov	fp, r0
  401f1a:	460d      	mov	r5, r1
  401f1c:	dc29      	bgt.n	401f72 <__ieee754_pow+0x72>
  401f1e:	469a      	mov	sl, r3
  401f20:	4696      	mov	lr, r2
  401f22:	d025      	beq.n	401f70 <__ieee754_pow+0x70>
  401f24:	42a7      	cmp	r7, r4
  401f26:	dc24      	bgt.n	401f72 <__ieee754_pow+0x72>
  401f28:	4c61      	ldr	r4, [pc, #388]	; (4020b0 <__ieee754_pow+0x1b0>)
  401f2a:	42a7      	cmp	r7, r4
  401f2c:	d079      	beq.n	402022 <__ieee754_pow+0x122>
  401f2e:	2d00      	cmp	r5, #0
  401f30:	4689      	mov	r9, r1
  401f32:	4680      	mov	r8, r0
  401f34:	e9cd 2300 	strd	r2, r3, [sp]
  401f38:	db77      	blt.n	40202a <__ieee754_pow+0x12a>
  401f3a:	2400      	movs	r4, #0
  401f3c:	f1be 0f00 	cmp.w	lr, #0
  401f40:	d12c      	bne.n	401f9c <__ieee754_pow+0x9c>
  401f42:	4b5b      	ldr	r3, [pc, #364]	; (4020b0 <__ieee754_pow+0x1b0>)
  401f44:	429f      	cmp	r7, r3
  401f46:	f000 808b 	beq.w	402060 <__ieee754_pow+0x160>
  401f4a:	4b5a      	ldr	r3, [pc, #360]	; (4020b4 <__ieee754_pow+0x1b4>)
  401f4c:	429f      	cmp	r7, r3
  401f4e:	d061      	beq.n	402014 <__ieee754_pow+0x114>
  401f50:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
  401f54:	f000 83ba 	beq.w	4026cc <__ieee754_pow+0x7cc>
  401f58:	4b57      	ldr	r3, [pc, #348]	; (4020b8 <__ieee754_pow+0x1b8>)
  401f5a:	459a      	cmp	sl, r3
  401f5c:	d11e      	bne.n	401f9c <__ieee754_pow+0x9c>
  401f5e:	2d00      	cmp	r5, #0
  401f60:	db1c      	blt.n	401f9c <__ieee754_pow+0x9c>
  401f62:	4640      	mov	r0, r8
  401f64:	4649      	mov	r1, r9
  401f66:	b013      	add	sp, #76	; 0x4c
  401f68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f6c:	f000 bd0e 	b.w	40298c <__ieee754_sqrt>
  401f70:	b158      	cbz	r0, 401f8a <__ieee754_pow+0x8a>
  401f72:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  401f76:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  401f7a:	ea56 030b 	orrs.w	r3, r6, fp
  401f7e:	d106      	bne.n	401f8e <__ieee754_pow+0x8e>
  401f80:	494c      	ldr	r1, [pc, #304]	; (4020b4 <__ieee754_pow+0x1b4>)
  401f82:	2000      	movs	r0, #0
  401f84:	b013      	add	sp, #76	; 0x4c
  401f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f8a:	42b7      	cmp	r7, r6
  401f8c:	ddcc      	ble.n	401f28 <__ieee754_pow+0x28>
  401f8e:	484b      	ldr	r0, [pc, #300]	; (4020bc <__ieee754_pow+0x1bc>)
  401f90:	b013      	add	sp, #76	; 0x4c
  401f92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f96:	f000 bdc1 	b.w	402b1c <nan>
  401f9a:	2400      	movs	r4, #0
  401f9c:	4640      	mov	r0, r8
  401f9e:	4649      	mov	r1, r9
  401fa0:	f000 fdb0 	bl	402b04 <fabs>
  401fa4:	f1bb 0f00 	cmp.w	fp, #0
  401fa8:	d119      	bne.n	401fde <__ieee754_pow+0xde>
  401faa:	b126      	cbz	r6, 401fb6 <__ieee754_pow+0xb6>
  401fac:	4b41      	ldr	r3, [pc, #260]	; (4020b4 <__ieee754_pow+0x1b4>)
  401fae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
  401fb2:	429a      	cmp	r2, r3
  401fb4:	d113      	bne.n	401fde <__ieee754_pow+0xde>
  401fb6:	f1ba 0f00 	cmp.w	sl, #0
  401fba:	f2c0 83bc 	blt.w	402736 <__ieee754_pow+0x836>
  401fbe:	2d00      	cmp	r5, #0
  401fc0:	dae0      	bge.n	401f84 <__ieee754_pow+0x84>
  401fc2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  401fc6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  401fca:	ea56 0304 	orrs.w	r3, r6, r4
  401fce:	f000 848f 	beq.w	4028f0 <__ieee754_pow+0x9f0>
  401fd2:	2c01      	cmp	r4, #1
  401fd4:	d1d6      	bne.n	401f84 <__ieee754_pow+0x84>
  401fd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  401fda:	4619      	mov	r1, r3
  401fdc:	e7d2      	b.n	401f84 <__ieee754_pow+0x84>
  401fde:	0fed      	lsrs	r5, r5, #31
  401fe0:	3d01      	subs	r5, #1
  401fe2:	ea54 0305 	orrs.w	r3, r4, r5
  401fe6:	d04e      	beq.n	402086 <__ieee754_pow+0x186>
  401fe8:	4b35      	ldr	r3, [pc, #212]	; (4020c0 <__ieee754_pow+0x1c0>)
  401fea:	429f      	cmp	r7, r3
  401fec:	dd6e      	ble.n	4020cc <__ieee754_pow+0x1cc>
  401fee:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
  401ff2:	429f      	cmp	r7, r3
  401ff4:	f340 83e8 	ble.w	4027c8 <__ieee754_pow+0x8c8>
  401ff8:	4b32      	ldr	r3, [pc, #200]	; (4020c4 <__ieee754_pow+0x1c4>)
  401ffa:	429e      	cmp	r6, r3
  401ffc:	dd4e      	ble.n	40209c <__ieee754_pow+0x19c>
  401ffe:	f1ba 0f00 	cmp.w	sl, #0
  402002:	dd4e      	ble.n	4020a2 <__ieee754_pow+0x1a2>
  402004:	a328      	add	r3, pc, #160	; (adr r3, 4020a8 <__ieee754_pow+0x1a8>)
  402006:	e9d3 2300 	ldrd	r2, r3, [r3]
  40200a:	4610      	mov	r0, r2
  40200c:	4619      	mov	r1, r3
  40200e:	f001 f855 	bl	4030bc <__aeabi_dmul>
  402012:	e7b7      	b.n	401f84 <__ieee754_pow+0x84>
  402014:	f1ba 0f00 	cmp.w	sl, #0
  402018:	f2c0 843c 	blt.w	402894 <__ieee754_pow+0x994>
  40201c:	4640      	mov	r0, r8
  40201e:	4649      	mov	r1, r9
  402020:	e7b0      	b.n	401f84 <__ieee754_pow+0x84>
  402022:	f1be 0f00 	cmp.w	lr, #0
  402026:	d082      	beq.n	401f2e <__ieee754_pow+0x2e>
  402028:	e7a3      	b.n	401f72 <__ieee754_pow+0x72>
  40202a:	4b27      	ldr	r3, [pc, #156]	; (4020c8 <__ieee754_pow+0x1c8>)
  40202c:	429f      	cmp	r7, r3
  40202e:	dc28      	bgt.n	402082 <__ieee754_pow+0x182>
  402030:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  402034:	429f      	cmp	r7, r3
  402036:	dd80      	ble.n	401f3a <__ieee754_pow+0x3a>
  402038:	153b      	asrs	r3, r7, #20
  40203a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  40203e:	2b14      	cmp	r3, #20
  402040:	f340 843e 	ble.w	4028c0 <__ieee754_pow+0x9c0>
  402044:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
  402048:	fa2e f203 	lsr.w	r2, lr, r3
  40204c:	fa02 f303 	lsl.w	r3, r2, r3
  402050:	459e      	cmp	lr, r3
  402052:	f47f af72 	bne.w	401f3a <__ieee754_pow+0x3a>
  402056:	f002 0201 	and.w	r2, r2, #1
  40205a:	f1c2 0402 	rsb	r4, r2, #2
  40205e:	e76d      	b.n	401f3c <__ieee754_pow+0x3c>
  402060:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
  402064:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  402068:	ea53 030b 	orrs.w	r3, r3, fp
  40206c:	d088      	beq.n	401f80 <__ieee754_pow+0x80>
  40206e:	4b15      	ldr	r3, [pc, #84]	; (4020c4 <__ieee754_pow+0x1c4>)
  402070:	429e      	cmp	r6, r3
  402072:	f340 8332 	ble.w	4026da <__ieee754_pow+0x7da>
  402076:	f1ba 0f00 	cmp.w	sl, #0
  40207a:	db12      	blt.n	4020a2 <__ieee754_pow+0x1a2>
  40207c:	e9dd 0100 	ldrd	r0, r1, [sp]
  402080:	e780      	b.n	401f84 <__ieee754_pow+0x84>
  402082:	2402      	movs	r4, #2
  402084:	e75a      	b.n	401f3c <__ieee754_pow+0x3c>
  402086:	4642      	mov	r2, r8
  402088:	464b      	mov	r3, r9
  40208a:	4640      	mov	r0, r8
  40208c:	4649      	mov	r1, r9
  40208e:	f000 fe61 	bl	402d54 <__aeabi_dsub>
  402092:	4602      	mov	r2, r0
  402094:	460b      	mov	r3, r1
  402096:	f001 f93b 	bl	403310 <__aeabi_ddiv>
  40209a:	e773      	b.n	401f84 <__ieee754_pow+0x84>
  40209c:	f1ba 0f00 	cmp.w	sl, #0
  4020a0:	dbb0      	blt.n	402004 <__ieee754_pow+0x104>
  4020a2:	2000      	movs	r0, #0
  4020a4:	2100      	movs	r1, #0
  4020a6:	e76d      	b.n	401f84 <__ieee754_pow+0x84>
  4020a8:	8800759c 	.word	0x8800759c
  4020ac:	7e37e43c 	.word	0x7e37e43c
  4020b0:	7ff00000 	.word	0x7ff00000
  4020b4:	3ff00000 	.word	0x3ff00000
  4020b8:	3fe00000 	.word	0x3fe00000
  4020bc:	0040671c 	.word	0x0040671c
  4020c0:	41e00000 	.word	0x41e00000
  4020c4:	3fefffff 	.word	0x3fefffff
  4020c8:	433fffff 	.word	0x433fffff
  4020cc:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
  4020d0:	f04f 0200 	mov.w	r2, #0
  4020d4:	da05      	bge.n	4020e2 <__ieee754_pow+0x1e2>
  4020d6:	4bd4      	ldr	r3, [pc, #848]	; (402428 <__ieee754_pow+0x528>)
  4020d8:	f000 fff0 	bl	4030bc <__aeabi_dmul>
  4020dc:	f06f 0234 	mvn.w	r2, #52	; 0x34
  4020e0:	460e      	mov	r6, r1
  4020e2:	1533      	asrs	r3, r6, #20
  4020e4:	4fd1      	ldr	r7, [pc, #836]	; (40242c <__ieee754_pow+0x52c>)
  4020e6:	f3c6 0613 	ubfx	r6, r6, #0, #20
  4020ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  4020ee:	4413      	add	r3, r2
  4020f0:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
  4020f4:	42be      	cmp	r6, r7
  4020f6:	461a      	mov	r2, r3
  4020f8:	930d      	str	r3, [sp, #52]	; 0x34
  4020fa:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
  4020fe:	f340 8321 	ble.w	402744 <__ieee754_pow+0x844>
  402102:	4bcb      	ldr	r3, [pc, #812]	; (402430 <__ieee754_pow+0x530>)
  402104:	429e      	cmp	r6, r3
  402106:	f340 83fd 	ble.w	402904 <__ieee754_pow+0xa04>
  40210a:	4613      	mov	r3, r2
  40210c:	3301      	adds	r3, #1
  40210e:	930d      	str	r3, [sp, #52]	; 0x34
  402110:	4bc8      	ldr	r3, [pc, #800]	; (402434 <__ieee754_pow+0x534>)
  402112:	2200      	movs	r2, #0
  402114:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402118:	2700      	movs	r7, #0
  40211a:	2600      	movs	r6, #0
  40211c:	e9cd 6708 	strd	r6, r7, [sp, #32]
  402120:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  402124:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
  402128:	2700      	movs	r7, #0
  40212a:	4602      	mov	r2, r0
  40212c:	4653      	mov	r3, sl
  40212e:	4651      	mov	r1, sl
  402130:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402134:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402138:	f000 fe0c 	bl	402d54 <__aeabi_dsub>
  40213c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402140:	4680      	mov	r8, r0
  402142:	4689      	mov	r9, r1
  402144:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  402148:	f000 fe06 	bl	402d58 <__adddf3>
  40214c:	4602      	mov	r2, r0
  40214e:	460b      	mov	r3, r1
  402150:	2000      	movs	r0, #0
  402152:	49b8      	ldr	r1, [pc, #736]	; (402434 <__ieee754_pow+0x534>)
  402154:	f001 f8dc 	bl	403310 <__aeabi_ddiv>
  402158:	460a      	mov	r2, r1
  40215a:	4601      	mov	r1, r0
  40215c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  402160:	4613      	mov	r3, r2
  402162:	4649      	mov	r1, r9
  402164:	4602      	mov	r2, r0
  402166:	4640      	mov	r0, r8
  402168:	f000 ffa8 	bl	4030bc <__aeabi_dmul>
  40216c:	ea4f 036a 	mov.w	r3, sl, asr #1
  402170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402174:	468c      	mov	ip, r1
  402176:	4683      	mov	fp, r0
  402178:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
  40217c:	e9cd bc04 	strd	fp, ip, [sp, #16]
  402180:	46da      	mov	sl, fp
  402182:	468b      	mov	fp, r1
  402184:	19d9      	adds	r1, r3, r7
  402186:	2300      	movs	r3, #0
  402188:	e9cd ab02 	strd	sl, fp, [sp, #8]
  40218c:	9302      	str	r3, [sp, #8]
  40218e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  402192:	2000      	movs	r0, #0
  402194:	4606      	mov	r6, r0
  402196:	460f      	mov	r7, r1
  402198:	4602      	mov	r2, r0
  40219a:	460b      	mov	r3, r1
  40219c:	4650      	mov	r0, sl
  40219e:	4659      	mov	r1, fp
  4021a0:	f000 ff8c 	bl	4030bc <__aeabi_dmul>
  4021a4:	4602      	mov	r2, r0
  4021a6:	460b      	mov	r3, r1
  4021a8:	4640      	mov	r0, r8
  4021aa:	4649      	mov	r1, r9
  4021ac:	f000 fdd2 	bl	402d54 <__aeabi_dsub>
  4021b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4021b4:	4680      	mov	r8, r0
  4021b6:	4689      	mov	r9, r1
  4021b8:	4630      	mov	r0, r6
  4021ba:	4639      	mov	r1, r7
  4021bc:	f000 fdca 	bl	402d54 <__aeabi_dsub>
  4021c0:	4602      	mov	r2, r0
  4021c2:	460b      	mov	r3, r1
  4021c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4021c8:	f000 fdc4 	bl	402d54 <__aeabi_dsub>
  4021cc:	4652      	mov	r2, sl
  4021ce:	465b      	mov	r3, fp
  4021d0:	f000 ff74 	bl	4030bc <__aeabi_dmul>
  4021d4:	4602      	mov	r2, r0
  4021d6:	460b      	mov	r3, r1
  4021d8:	4640      	mov	r0, r8
  4021da:	4649      	mov	r1, r9
  4021dc:	f000 fdba 	bl	402d54 <__aeabi_dsub>
  4021e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4021e4:	f000 ff6a 	bl	4030bc <__aeabi_dmul>
  4021e8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  4021ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4021f0:	4632      	mov	r2, r6
  4021f2:	463b      	mov	r3, r7
  4021f4:	4630      	mov	r0, r6
  4021f6:	4639      	mov	r1, r7
  4021f8:	f000 ff60 	bl	4030bc <__aeabi_dmul>
  4021fc:	a378      	add	r3, pc, #480	; (adr r3, 4023e0 <__ieee754_pow+0x4e0>)
  4021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  402202:	4606      	mov	r6, r0
  402204:	460f      	mov	r7, r1
  402206:	f000 ff59 	bl	4030bc <__aeabi_dmul>
  40220a:	a377      	add	r3, pc, #476	; (adr r3, 4023e8 <__ieee754_pow+0x4e8>)
  40220c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402210:	f000 fda2 	bl	402d58 <__adddf3>
  402214:	4632      	mov	r2, r6
  402216:	463b      	mov	r3, r7
  402218:	f000 ff50 	bl	4030bc <__aeabi_dmul>
  40221c:	a374      	add	r3, pc, #464	; (adr r3, 4023f0 <__ieee754_pow+0x4f0>)
  40221e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402222:	f000 fd99 	bl	402d58 <__adddf3>
  402226:	4632      	mov	r2, r6
  402228:	463b      	mov	r3, r7
  40222a:	f000 ff47 	bl	4030bc <__aeabi_dmul>
  40222e:	a372      	add	r3, pc, #456	; (adr r3, 4023f8 <__ieee754_pow+0x4f8>)
  402230:	e9d3 2300 	ldrd	r2, r3, [r3]
  402234:	f000 fd90 	bl	402d58 <__adddf3>
  402238:	4632      	mov	r2, r6
  40223a:	463b      	mov	r3, r7
  40223c:	f000 ff3e 	bl	4030bc <__aeabi_dmul>
  402240:	a36f      	add	r3, pc, #444	; (adr r3, 402400 <__ieee754_pow+0x500>)
  402242:	e9d3 2300 	ldrd	r2, r3, [r3]
  402246:	f000 fd87 	bl	402d58 <__adddf3>
  40224a:	4632      	mov	r2, r6
  40224c:	463b      	mov	r3, r7
  40224e:	f000 ff35 	bl	4030bc <__aeabi_dmul>
  402252:	a36d      	add	r3, pc, #436	; (adr r3, 402408 <__ieee754_pow+0x508>)
  402254:	e9d3 2300 	ldrd	r2, r3, [r3]
  402258:	f000 fd7e 	bl	402d58 <__adddf3>
  40225c:	4632      	mov	r2, r6
  40225e:	4680      	mov	r8, r0
  402260:	4689      	mov	r9, r1
  402262:	463b      	mov	r3, r7
  402264:	4630      	mov	r0, r6
  402266:	4639      	mov	r1, r7
  402268:	f000 ff28 	bl	4030bc <__aeabi_dmul>
  40226c:	4602      	mov	r2, r0
  40226e:	460b      	mov	r3, r1
  402270:	4640      	mov	r0, r8
  402272:	4649      	mov	r1, r9
  402274:	f000 ff22 	bl	4030bc <__aeabi_dmul>
  402278:	4652      	mov	r2, sl
  40227a:	4606      	mov	r6, r0
  40227c:	460f      	mov	r7, r1
  40227e:	465b      	mov	r3, fp
  402280:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402284:	f000 fd68 	bl	402d58 <__adddf3>
  402288:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  40228c:	f000 ff16 	bl	4030bc <__aeabi_dmul>
  402290:	4632      	mov	r2, r6
  402292:	463b      	mov	r3, r7
  402294:	f000 fd60 	bl	402d58 <__adddf3>
  402298:	4652      	mov	r2, sl
  40229a:	4680      	mov	r8, r0
  40229c:	4689      	mov	r9, r1
  40229e:	465b      	mov	r3, fp
  4022a0:	4650      	mov	r0, sl
  4022a2:	4659      	mov	r1, fp
  4022a4:	f000 ff0a 	bl	4030bc <__aeabi_dmul>
  4022a8:	2200      	movs	r2, #0
  4022aa:	4b63      	ldr	r3, [pc, #396]	; (402438 <__ieee754_pow+0x538>)
  4022ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4022b0:	f000 fd52 	bl	402d58 <__adddf3>
  4022b4:	4642      	mov	r2, r8
  4022b6:	464b      	mov	r3, r9
  4022b8:	f000 fd4e 	bl	402d58 <__adddf3>
  4022bc:	9802      	ldr	r0, [sp, #8]
  4022be:	460f      	mov	r7, r1
  4022c0:	4606      	mov	r6, r0
  4022c2:	4632      	mov	r2, r6
  4022c4:	463b      	mov	r3, r7
  4022c6:	4650      	mov	r0, sl
  4022c8:	4659      	mov	r1, fp
  4022ca:	f000 fef7 	bl	4030bc <__aeabi_dmul>
  4022ce:	2200      	movs	r2, #0
  4022d0:	4682      	mov	sl, r0
  4022d2:	468b      	mov	fp, r1
  4022d4:	4b58      	ldr	r3, [pc, #352]	; (402438 <__ieee754_pow+0x538>)
  4022d6:	4630      	mov	r0, r6
  4022d8:	4639      	mov	r1, r7
  4022da:	f000 fd3b 	bl	402d54 <__aeabi_dsub>
  4022de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4022e2:	f000 fd37 	bl	402d54 <__aeabi_dsub>
  4022e6:	4602      	mov	r2, r0
  4022e8:	460b      	mov	r3, r1
  4022ea:	4640      	mov	r0, r8
  4022ec:	4649      	mov	r1, r9
  4022ee:	f000 fd31 	bl	402d54 <__aeabi_dsub>
  4022f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4022f6:	f000 fee1 	bl	4030bc <__aeabi_dmul>
  4022fa:	4632      	mov	r2, r6
  4022fc:	4680      	mov	r8, r0
  4022fe:	4689      	mov	r9, r1
  402300:	463b      	mov	r3, r7
  402302:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402306:	f000 fed9 	bl	4030bc <__aeabi_dmul>
  40230a:	4602      	mov	r2, r0
  40230c:	460b      	mov	r3, r1
  40230e:	4640      	mov	r0, r8
  402310:	4649      	mov	r1, r9
  402312:	f000 fd21 	bl	402d58 <__adddf3>
  402316:	4680      	mov	r8, r0
  402318:	4689      	mov	r9, r1
  40231a:	4602      	mov	r2, r0
  40231c:	460b      	mov	r3, r1
  40231e:	4650      	mov	r0, sl
  402320:	4659      	mov	r1, fp
  402322:	e9cd ab04 	strd	sl, fp, [sp, #16]
  402326:	f000 fd17 	bl	402d58 <__adddf3>
  40232a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40232e:	a338      	add	r3, pc, #224	; (adr r3, 402410 <__ieee754_pow+0x510>)
  402330:	e9d3 2300 	ldrd	r2, r3, [r3]
  402334:	4650      	mov	r0, sl
  402336:	460f      	mov	r7, r1
  402338:	f000 fec0 	bl	4030bc <__aeabi_dmul>
  40233c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402340:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402344:	4639      	mov	r1, r7
  402346:	4650      	mov	r0, sl
  402348:	f000 fd04 	bl	402d54 <__aeabi_dsub>
  40234c:	4602      	mov	r2, r0
  40234e:	460b      	mov	r3, r1
  402350:	4640      	mov	r0, r8
  402352:	4649      	mov	r1, r9
  402354:	f000 fcfe 	bl	402d54 <__aeabi_dsub>
  402358:	a32f      	add	r3, pc, #188	; (adr r3, 402418 <__ieee754_pow+0x518>)
  40235a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40235e:	f000 fead 	bl	4030bc <__aeabi_dmul>
  402362:	a32f      	add	r3, pc, #188	; (adr r3, 402420 <__ieee754_pow+0x520>)
  402364:	e9d3 2300 	ldrd	r2, r3, [r3]
  402368:	4680      	mov	r8, r0
  40236a:	4689      	mov	r9, r1
  40236c:	4650      	mov	r0, sl
  40236e:	4639      	mov	r1, r7
  402370:	f000 fea4 	bl	4030bc <__aeabi_dmul>
  402374:	4602      	mov	r2, r0
  402376:	460b      	mov	r3, r1
  402378:	4640      	mov	r0, r8
  40237a:	4649      	mov	r1, r9
  40237c:	f000 fcec 	bl	402d58 <__adddf3>
  402380:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  402384:	f000 fce8 	bl	402d58 <__adddf3>
  402388:	4680      	mov	r8, r0
  40238a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40238c:	4689      	mov	r9, r1
  40238e:	f000 fe2f 	bl	402ff0 <__aeabi_i2d>
  402392:	4642      	mov	r2, r8
  402394:	4606      	mov	r6, r0
  402396:	460f      	mov	r7, r1
  402398:	464b      	mov	r3, r9
  40239a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40239e:	f000 fcdb 	bl	402d58 <__adddf3>
  4023a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4023a6:	f000 fcd7 	bl	402d58 <__adddf3>
  4023aa:	4632      	mov	r2, r6
  4023ac:	463b      	mov	r3, r7
  4023ae:	f000 fcd3 	bl	402d58 <__adddf3>
  4023b2:	4632      	mov	r2, r6
  4023b4:	463b      	mov	r3, r7
  4023b6:	4650      	mov	r0, sl
  4023b8:	468b      	mov	fp, r1
  4023ba:	f000 fccb 	bl	402d54 <__aeabi_dsub>
  4023be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4023c2:	f000 fcc7 	bl	402d54 <__aeabi_dsub>
  4023c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4023ca:	f000 fcc3 	bl	402d54 <__aeabi_dsub>
  4023ce:	4602      	mov	r2, r0
  4023d0:	460b      	mov	r3, r1
  4023d2:	4640      	mov	r0, r8
  4023d4:	4649      	mov	r1, r9
  4023d6:	f000 fcbd 	bl	402d54 <__aeabi_dsub>
  4023da:	4680      	mov	r8, r0
  4023dc:	e02e      	b.n	40243c <__ieee754_pow+0x53c>
  4023de:	bf00      	nop
  4023e0:	4a454eef 	.word	0x4a454eef
  4023e4:	3fca7e28 	.word	0x3fca7e28
  4023e8:	93c9db65 	.word	0x93c9db65
  4023ec:	3fcd864a 	.word	0x3fcd864a
  4023f0:	a91d4101 	.word	0xa91d4101
  4023f4:	3fd17460 	.word	0x3fd17460
  4023f8:	518f264d 	.word	0x518f264d
  4023fc:	3fd55555 	.word	0x3fd55555
  402400:	db6fabff 	.word	0xdb6fabff
  402404:	3fdb6db6 	.word	0x3fdb6db6
  402408:	33333303 	.word	0x33333303
  40240c:	3fe33333 	.word	0x3fe33333
  402410:	e0000000 	.word	0xe0000000
  402414:	3feec709 	.word	0x3feec709
  402418:	dc3a03fd 	.word	0xdc3a03fd
  40241c:	3feec709 	.word	0x3feec709
  402420:	145b01f5 	.word	0x145b01f5
  402424:	be3e2fe0 	.word	0xbe3e2fe0
  402428:	43400000 	.word	0x43400000
  40242c:	0003988e 	.word	0x0003988e
  402430:	000bb679 	.word	0x000bb679
  402434:	3ff00000 	.word	0x3ff00000
  402438:	40080000 	.word	0x40080000
  40243c:	4689      	mov	r9, r1
  40243e:	3c01      	subs	r4, #1
  402440:	ea54 0305 	orrs.w	r3, r4, r5
  402444:	e9dd 0100 	ldrd	r0, r1, [sp]
  402448:	bf14      	ite	ne
  40244a:	4cd9      	ldrne	r4, [pc, #868]	; (4027b0 <__ieee754_pow+0x8b0>)
  40244c:	4cd9      	ldreq	r4, [pc, #868]	; (4027b4 <__ieee754_pow+0x8b4>)
  40244e:	2300      	movs	r3, #0
  402450:	e9cd 3404 	strd	r3, r4, [sp, #16]
  402454:	4603      	mov	r3, r0
  402456:	460c      	mov	r4, r1
  402458:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40245c:	2300      	movs	r3, #0
  40245e:	9302      	str	r3, [sp, #8]
  402460:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  402464:	4622      	mov	r2, r4
  402466:	462b      	mov	r3, r5
  402468:	f000 fc74 	bl	402d54 <__aeabi_dsub>
  40246c:	4652      	mov	r2, sl
  40246e:	465b      	mov	r3, fp
  402470:	f000 fe24 	bl	4030bc <__aeabi_dmul>
  402474:	e9dd 2300 	ldrd	r2, r3, [sp]
  402478:	4606      	mov	r6, r0
  40247a:	460f      	mov	r7, r1
  40247c:	4640      	mov	r0, r8
  40247e:	4649      	mov	r1, r9
  402480:	f000 fe1c 	bl	4030bc <__aeabi_dmul>
  402484:	4602      	mov	r2, r0
  402486:	460b      	mov	r3, r1
  402488:	4630      	mov	r0, r6
  40248a:	4639      	mov	r1, r7
  40248c:	f000 fc64 	bl	402d58 <__adddf3>
  402490:	4622      	mov	r2, r4
  402492:	4680      	mov	r8, r0
  402494:	4689      	mov	r9, r1
  402496:	462b      	mov	r3, r5
  402498:	4650      	mov	r0, sl
  40249a:	4659      	mov	r1, fp
  40249c:	e9cd 8900 	strd	r8, r9, [sp]
  4024a0:	f000 fe0c 	bl	4030bc <__aeabi_dmul>
  4024a4:	460b      	mov	r3, r1
  4024a6:	4602      	mov	r2, r0
  4024a8:	4606      	mov	r6, r0
  4024aa:	460f      	mov	r7, r1
  4024ac:	4640      	mov	r0, r8
  4024ae:	4649      	mov	r1, r9
  4024b0:	f000 fc52 	bl	402d58 <__adddf3>
  4024b4:	4bc0      	ldr	r3, [pc, #768]	; (4027b8 <__ieee754_pow+0x8b8>)
  4024b6:	4299      	cmp	r1, r3
  4024b8:	4604      	mov	r4, r0
  4024ba:	460d      	mov	r5, r1
  4024bc:	468a      	mov	sl, r1
  4024be:	f340 8116 	ble.w	4026ee <__ieee754_pow+0x7ee>
  4024c2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
  4024c6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
  4024ca:	4303      	orrs	r3, r0
  4024cc:	f040 81ea 	bne.w	4028a4 <__ieee754_pow+0x9a4>
  4024d0:	a3a3      	add	r3, pc, #652	; (adr r3, 402760 <__ieee754_pow+0x860>)
  4024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024d6:	e9dd 0100 	ldrd	r0, r1, [sp]
  4024da:	f000 fc3d 	bl	402d58 <__adddf3>
  4024de:	4632      	mov	r2, r6
  4024e0:	4680      	mov	r8, r0
  4024e2:	4689      	mov	r9, r1
  4024e4:	463b      	mov	r3, r7
  4024e6:	4620      	mov	r0, r4
  4024e8:	4629      	mov	r1, r5
  4024ea:	f000 fc33 	bl	402d54 <__aeabi_dsub>
  4024ee:	4602      	mov	r2, r0
  4024f0:	460b      	mov	r3, r1
  4024f2:	4640      	mov	r0, r8
  4024f4:	4649      	mov	r1, r9
  4024f6:	f001 f871 	bl	4035dc <__aeabi_dcmpgt>
  4024fa:	2800      	cmp	r0, #0
  4024fc:	f040 81d2 	bne.w	4028a4 <__ieee754_pow+0x9a4>
  402500:	46a8      	mov	r8, r5
  402502:	ea4f 5328 	mov.w	r3, r8, asr #20
  402506:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40250a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
  40250e:	fa42 f303 	asr.w	r3, r2, r3
  402512:	4453      	add	r3, sl
  402514:	f3c3 520a 	ubfx	r2, r3, #20, #11
  402518:	4da8      	ldr	r5, [pc, #672]	; (4027bc <__ieee754_pow+0x8bc>)
  40251a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
  40251e:	4115      	asrs	r5, r2
  402520:	f3c3 0413 	ubfx	r4, r3, #0, #20
  402524:	ea23 0105 	bic.w	r1, r3, r5
  402528:	2000      	movs	r0, #0
  40252a:	f1c2 0b14 	rsb	fp, r2, #20
  40252e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  402532:	f1ba 0f00 	cmp.w	sl, #0
  402536:	4602      	mov	r2, r0
  402538:	460b      	mov	r3, r1
  40253a:	fa44 fb0b 	asr.w	fp, r4, fp
  40253e:	4630      	mov	r0, r6
  402540:	4639      	mov	r1, r7
  402542:	bfb8      	it	lt
  402544:	f1cb 0b00 	rsblt	fp, fp, #0
  402548:	f000 fc04 	bl	402d54 <__aeabi_dsub>
  40254c:	4602      	mov	r2, r0
  40254e:	460b      	mov	r3, r1
  402550:	4606      	mov	r6, r0
  402552:	460f      	mov	r7, r1
  402554:	e9dd 0100 	ldrd	r0, r1, [sp]
  402558:	f000 fbfe 	bl	402d58 <__adddf3>
  40255c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
  402560:	460d      	mov	r5, r1
  402562:	2400      	movs	r4, #0
  402564:	a380      	add	r3, pc, #512	; (adr r3, 402768 <__ieee754_pow+0x868>)
  402566:	e9d3 2300 	ldrd	r2, r3, [r3]
  40256a:	4620      	mov	r0, r4
  40256c:	4629      	mov	r1, r5
  40256e:	f000 fda5 	bl	4030bc <__aeabi_dmul>
  402572:	4632      	mov	r2, r6
  402574:	4680      	mov	r8, r0
  402576:	4689      	mov	r9, r1
  402578:	463b      	mov	r3, r7
  40257a:	4620      	mov	r0, r4
  40257c:	4629      	mov	r1, r5
  40257e:	f000 fbe9 	bl	402d54 <__aeabi_dsub>
  402582:	4602      	mov	r2, r0
  402584:	460b      	mov	r3, r1
  402586:	e9dd 0100 	ldrd	r0, r1, [sp]
  40258a:	f000 fbe3 	bl	402d54 <__aeabi_dsub>
  40258e:	a378      	add	r3, pc, #480	; (adr r3, 402770 <__ieee754_pow+0x870>)
  402590:	e9d3 2300 	ldrd	r2, r3, [r3]
  402594:	f000 fd92 	bl	4030bc <__aeabi_dmul>
  402598:	a377      	add	r3, pc, #476	; (adr r3, 402778 <__ieee754_pow+0x878>)
  40259a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40259e:	4606      	mov	r6, r0
  4025a0:	460f      	mov	r7, r1
  4025a2:	4620      	mov	r0, r4
  4025a4:	4629      	mov	r1, r5
  4025a6:	f000 fd89 	bl	4030bc <__aeabi_dmul>
  4025aa:	4602      	mov	r2, r0
  4025ac:	460b      	mov	r3, r1
  4025ae:	4630      	mov	r0, r6
  4025b0:	4639      	mov	r1, r7
  4025b2:	f000 fbd1 	bl	402d58 <__adddf3>
  4025b6:	4606      	mov	r6, r0
  4025b8:	460f      	mov	r7, r1
  4025ba:	4602      	mov	r2, r0
  4025bc:	460b      	mov	r3, r1
  4025be:	4640      	mov	r0, r8
  4025c0:	4649      	mov	r1, r9
  4025c2:	f000 fbc9 	bl	402d58 <__adddf3>
  4025c6:	4642      	mov	r2, r8
  4025c8:	464b      	mov	r3, r9
  4025ca:	4604      	mov	r4, r0
  4025cc:	460d      	mov	r5, r1
  4025ce:	f000 fbc1 	bl	402d54 <__aeabi_dsub>
  4025d2:	4602      	mov	r2, r0
  4025d4:	460b      	mov	r3, r1
  4025d6:	4630      	mov	r0, r6
  4025d8:	4639      	mov	r1, r7
  4025da:	f000 fbbb 	bl	402d54 <__aeabi_dsub>
  4025de:	4622      	mov	r2, r4
  4025e0:	4680      	mov	r8, r0
  4025e2:	4689      	mov	r9, r1
  4025e4:	462b      	mov	r3, r5
  4025e6:	4620      	mov	r0, r4
  4025e8:	4629      	mov	r1, r5
  4025ea:	f000 fd67 	bl	4030bc <__aeabi_dmul>
  4025ee:	a364      	add	r3, pc, #400	; (adr r3, 402780 <__ieee754_pow+0x880>)
  4025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025f4:	4606      	mov	r6, r0
  4025f6:	460f      	mov	r7, r1
  4025f8:	f000 fd60 	bl	4030bc <__aeabi_dmul>
  4025fc:	a362      	add	r3, pc, #392	; (adr r3, 402788 <__ieee754_pow+0x888>)
  4025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  402602:	f000 fba7 	bl	402d54 <__aeabi_dsub>
  402606:	4632      	mov	r2, r6
  402608:	463b      	mov	r3, r7
  40260a:	f000 fd57 	bl	4030bc <__aeabi_dmul>
  40260e:	a360      	add	r3, pc, #384	; (adr r3, 402790 <__ieee754_pow+0x890>)
  402610:	e9d3 2300 	ldrd	r2, r3, [r3]
  402614:	f000 fba0 	bl	402d58 <__adddf3>
  402618:	4632      	mov	r2, r6
  40261a:	463b      	mov	r3, r7
  40261c:	f000 fd4e 	bl	4030bc <__aeabi_dmul>
  402620:	a35d      	add	r3, pc, #372	; (adr r3, 402798 <__ieee754_pow+0x898>)
  402622:	e9d3 2300 	ldrd	r2, r3, [r3]
  402626:	f000 fb95 	bl	402d54 <__aeabi_dsub>
  40262a:	4632      	mov	r2, r6
  40262c:	463b      	mov	r3, r7
  40262e:	f000 fd45 	bl	4030bc <__aeabi_dmul>
  402632:	a35b      	add	r3, pc, #364	; (adr r3, 4027a0 <__ieee754_pow+0x8a0>)
  402634:	e9d3 2300 	ldrd	r2, r3, [r3]
  402638:	f000 fb8e 	bl	402d58 <__adddf3>
  40263c:	4632      	mov	r2, r6
  40263e:	463b      	mov	r3, r7
  402640:	f000 fd3c 	bl	4030bc <__aeabi_dmul>
  402644:	4602      	mov	r2, r0
  402646:	460b      	mov	r3, r1
  402648:	4620      	mov	r0, r4
  40264a:	4629      	mov	r1, r5
  40264c:	f000 fb82 	bl	402d54 <__aeabi_dsub>
  402650:	4606      	mov	r6, r0
  402652:	460f      	mov	r7, r1
  402654:	4602      	mov	r2, r0
  402656:	460b      	mov	r3, r1
  402658:	4620      	mov	r0, r4
  40265a:	4629      	mov	r1, r5
  40265c:	f000 fd2e 	bl	4030bc <__aeabi_dmul>
  402660:	2200      	movs	r2, #0
  402662:	e9cd 0100 	strd	r0, r1, [sp]
  402666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40266a:	4630      	mov	r0, r6
  40266c:	4639      	mov	r1, r7
  40266e:	f000 fb71 	bl	402d54 <__aeabi_dsub>
  402672:	4602      	mov	r2, r0
  402674:	460b      	mov	r3, r1
  402676:	e9dd 0100 	ldrd	r0, r1, [sp]
  40267a:	f000 fe49 	bl	403310 <__aeabi_ddiv>
  40267e:	4642      	mov	r2, r8
  402680:	4606      	mov	r6, r0
  402682:	460f      	mov	r7, r1
  402684:	464b      	mov	r3, r9
  402686:	4620      	mov	r0, r4
  402688:	4629      	mov	r1, r5
  40268a:	f000 fd17 	bl	4030bc <__aeabi_dmul>
  40268e:	4642      	mov	r2, r8
  402690:	464b      	mov	r3, r9
  402692:	f000 fb61 	bl	402d58 <__adddf3>
  402696:	4602      	mov	r2, r0
  402698:	460b      	mov	r3, r1
  40269a:	4630      	mov	r0, r6
  40269c:	4639      	mov	r1, r7
  40269e:	f000 fb59 	bl	402d54 <__aeabi_dsub>
  4026a2:	4622      	mov	r2, r4
  4026a4:	462b      	mov	r3, r5
  4026a6:	f000 fb55 	bl	402d54 <__aeabi_dsub>
  4026aa:	4602      	mov	r2, r0
  4026ac:	460b      	mov	r3, r1
  4026ae:	2000      	movs	r0, #0
  4026b0:	493f      	ldr	r1, [pc, #252]	; (4027b0 <__ieee754_pow+0x8b0>)
  4026b2:	f000 fb4f 	bl	402d54 <__aeabi_dsub>
  4026b6:	448a      	add	sl, r1
  4026b8:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
  4026bc:	f2c0 8133 	blt.w	402926 <__ieee754_pow+0xa26>
  4026c0:	4651      	mov	r1, sl
  4026c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4026c6:	f000 fcf9 	bl	4030bc <__aeabi_dmul>
  4026ca:	e45b      	b.n	401f84 <__ieee754_pow+0x84>
  4026cc:	4642      	mov	r2, r8
  4026ce:	4640      	mov	r0, r8
  4026d0:	464b      	mov	r3, r9
  4026d2:	4649      	mov	r1, r9
  4026d4:	f000 fcf2 	bl	4030bc <__aeabi_dmul>
  4026d8:	e454      	b.n	401f84 <__ieee754_pow+0x84>
  4026da:	f1ba 0f00 	cmp.w	sl, #0
  4026de:	f6bf ace0 	bge.w	4020a2 <__ieee754_pow+0x1a2>
  4026e2:	e9dd 3400 	ldrd	r3, r4, [sp]
  4026e6:	4618      	mov	r0, r3
  4026e8:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  4026ec:	e44a      	b.n	401f84 <__ieee754_pow+0x84>
  4026ee:	4b34      	ldr	r3, [pc, #208]	; (4027c0 <__ieee754_pow+0x8c0>)
  4026f0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  4026f4:	4598      	cmp	r8, r3
  4026f6:	f340 80f2 	ble.w	4028de <__ieee754_pow+0x9de>
  4026fa:	4b32      	ldr	r3, [pc, #200]	; (4027c4 <__ieee754_pow+0x8c4>)
  4026fc:	440b      	add	r3, r1
  4026fe:	4303      	orrs	r3, r0
  402700:	d10c      	bne.n	40271c <__ieee754_pow+0x81c>
  402702:	4632      	mov	r2, r6
  402704:	463b      	mov	r3, r7
  402706:	f000 fb25 	bl	402d54 <__aeabi_dsub>
  40270a:	4602      	mov	r2, r0
  40270c:	460b      	mov	r3, r1
  40270e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402712:	f000 ff4f 	bl	4035b4 <__aeabi_dcmple>
  402716:	2800      	cmp	r0, #0
  402718:	f43f aef3 	beq.w	402502 <__ieee754_pow+0x602>
  40271c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402720:	a321      	add	r3, pc, #132	; (adr r3, 4027a8 <__ieee754_pow+0x8a8>)
  402722:	e9d3 2300 	ldrd	r2, r3, [r3]
  402726:	f000 fcc9 	bl	4030bc <__aeabi_dmul>
  40272a:	a31f      	add	r3, pc, #124	; (adr r3, 4027a8 <__ieee754_pow+0x8a8>)
  40272c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402730:	f000 fcc4 	bl	4030bc <__aeabi_dmul>
  402734:	e426      	b.n	401f84 <__ieee754_pow+0x84>
  402736:	4602      	mov	r2, r0
  402738:	460b      	mov	r3, r1
  40273a:	2000      	movs	r0, #0
  40273c:	491c      	ldr	r1, [pc, #112]	; (4027b0 <__ieee754_pow+0x8b0>)
  40273e:	f000 fde7 	bl	403310 <__aeabi_ddiv>
  402742:	e43c      	b.n	401fbe <__ieee754_pow+0xbe>
  402744:	2200      	movs	r2, #0
  402746:	2300      	movs	r3, #0
  402748:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40274c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402750:	4b17      	ldr	r3, [pc, #92]	; (4027b0 <__ieee754_pow+0x8b0>)
  402752:	2200      	movs	r2, #0
  402754:	2700      	movs	r7, #0
  402756:	e9cd 2306 	strd	r2, r3, [sp, #24]
  40275a:	e4e6      	b.n	40212a <__ieee754_pow+0x22a>
  40275c:	f3af 8000 	nop.w
  402760:	652b82fe 	.word	0x652b82fe
  402764:	3c971547 	.word	0x3c971547
  402768:	00000000 	.word	0x00000000
  40276c:	3fe62e43 	.word	0x3fe62e43
  402770:	fefa39ef 	.word	0xfefa39ef
  402774:	3fe62e42 	.word	0x3fe62e42
  402778:	0ca86c39 	.word	0x0ca86c39
  40277c:	be205c61 	.word	0xbe205c61
  402780:	72bea4d0 	.word	0x72bea4d0
  402784:	3e663769 	.word	0x3e663769
  402788:	c5d26bf1 	.word	0xc5d26bf1
  40278c:	3ebbbd41 	.word	0x3ebbbd41
  402790:	af25de2c 	.word	0xaf25de2c
  402794:	3f11566a 	.word	0x3f11566a
  402798:	16bebd93 	.word	0x16bebd93
  40279c:	3f66c16c 	.word	0x3f66c16c
  4027a0:	5555553e 	.word	0x5555553e
  4027a4:	3fc55555 	.word	0x3fc55555
  4027a8:	c2f8f359 	.word	0xc2f8f359
  4027ac:	01a56e1f 	.word	0x01a56e1f
  4027b0:	3ff00000 	.word	0x3ff00000
  4027b4:	bff00000 	.word	0xbff00000
  4027b8:	408fffff 	.word	0x408fffff
  4027bc:	000fffff 	.word	0x000fffff
  4027c0:	4090cbff 	.word	0x4090cbff
  4027c4:	3f6f3400 	.word	0x3f6f3400
  4027c8:	4b6b      	ldr	r3, [pc, #428]	; (402978 <__ieee754_pow+0xa78>)
  4027ca:	429e      	cmp	r6, r3
  4027cc:	f77f ac66 	ble.w	40209c <__ieee754_pow+0x19c>
  4027d0:	4b6a      	ldr	r3, [pc, #424]	; (40297c <__ieee754_pow+0xa7c>)
  4027d2:	429e      	cmp	r6, r3
  4027d4:	f73f ac13 	bgt.w	401ffe <__ieee754_pow+0xfe>
  4027d8:	2200      	movs	r2, #0
  4027da:	4b68      	ldr	r3, [pc, #416]	; (40297c <__ieee754_pow+0xa7c>)
  4027dc:	f000 faba 	bl	402d54 <__aeabi_dsub>
  4027e0:	a357      	add	r3, pc, #348	; (adr r3, 402940 <__ieee754_pow+0xa40>)
  4027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027e6:	4606      	mov	r6, r0
  4027e8:	460f      	mov	r7, r1
  4027ea:	f000 fc67 	bl	4030bc <__aeabi_dmul>
  4027ee:	a356      	add	r3, pc, #344	; (adr r3, 402948 <__ieee754_pow+0xa48>)
  4027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027f4:	4680      	mov	r8, r0
  4027f6:	4689      	mov	r9, r1
  4027f8:	4630      	mov	r0, r6
  4027fa:	4639      	mov	r1, r7
  4027fc:	f000 fc5e 	bl	4030bc <__aeabi_dmul>
  402800:	2200      	movs	r2, #0
  402802:	4682      	mov	sl, r0
  402804:	468b      	mov	fp, r1
  402806:	4b5e      	ldr	r3, [pc, #376]	; (402980 <__ieee754_pow+0xa80>)
  402808:	4630      	mov	r0, r6
  40280a:	4639      	mov	r1, r7
  40280c:	f000 fc56 	bl	4030bc <__aeabi_dmul>
  402810:	4602      	mov	r2, r0
  402812:	460b      	mov	r3, r1
  402814:	a14e      	add	r1, pc, #312	; (adr r1, 402950 <__ieee754_pow+0xa50>)
  402816:	e9d1 0100 	ldrd	r0, r1, [r1]
  40281a:	f000 fa9b 	bl	402d54 <__aeabi_dsub>
  40281e:	4632      	mov	r2, r6
  402820:	463b      	mov	r3, r7
  402822:	f000 fc4b 	bl	4030bc <__aeabi_dmul>
  402826:	4602      	mov	r2, r0
  402828:	460b      	mov	r3, r1
  40282a:	2000      	movs	r0, #0
  40282c:	4955      	ldr	r1, [pc, #340]	; (402984 <__ieee754_pow+0xa84>)
  40282e:	f000 fa91 	bl	402d54 <__aeabi_dsub>
  402832:	4632      	mov	r2, r6
  402834:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402838:	463b      	mov	r3, r7
  40283a:	4630      	mov	r0, r6
  40283c:	4639      	mov	r1, r7
  40283e:	f000 fc3d 	bl	4030bc <__aeabi_dmul>
  402842:	4602      	mov	r2, r0
  402844:	460b      	mov	r3, r1
  402846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40284a:	f000 fc37 	bl	4030bc <__aeabi_dmul>
  40284e:	a342      	add	r3, pc, #264	; (adr r3, 402958 <__ieee754_pow+0xa58>)
  402850:	e9d3 2300 	ldrd	r2, r3, [r3]
  402854:	f000 fc32 	bl	4030bc <__aeabi_dmul>
  402858:	4602      	mov	r2, r0
  40285a:	460b      	mov	r3, r1
  40285c:	4650      	mov	r0, sl
  40285e:	4659      	mov	r1, fp
  402860:	f000 fa78 	bl	402d54 <__aeabi_dsub>
  402864:	4602      	mov	r2, r0
  402866:	460b      	mov	r3, r1
  402868:	4606      	mov	r6, r0
  40286a:	460f      	mov	r7, r1
  40286c:	4640      	mov	r0, r8
  40286e:	4649      	mov	r1, r9
  402870:	f000 fa72 	bl	402d58 <__adddf3>
  402874:	4642      	mov	r2, r8
  402876:	464b      	mov	r3, r9
  402878:	2000      	movs	r0, #0
  40287a:	4682      	mov	sl, r0
  40287c:	468b      	mov	fp, r1
  40287e:	f000 fa69 	bl	402d54 <__aeabi_dsub>
  402882:	4602      	mov	r2, r0
  402884:	460b      	mov	r3, r1
  402886:	4630      	mov	r0, r6
  402888:	4639      	mov	r1, r7
  40288a:	f000 fa63 	bl	402d54 <__aeabi_dsub>
  40288e:	4680      	mov	r8, r0
  402890:	4689      	mov	r9, r1
  402892:	e5d4      	b.n	40243e <__ieee754_pow+0x53e>
  402894:	4642      	mov	r2, r8
  402896:	464b      	mov	r3, r9
  402898:	2000      	movs	r0, #0
  40289a:	4938      	ldr	r1, [pc, #224]	; (40297c <__ieee754_pow+0xa7c>)
  40289c:	f000 fd38 	bl	403310 <__aeabi_ddiv>
  4028a0:	f7ff bb70 	b.w	401f84 <__ieee754_pow+0x84>
  4028a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4028a8:	a32d      	add	r3, pc, #180	; (adr r3, 402960 <__ieee754_pow+0xa60>)
  4028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4028ae:	f000 fc05 	bl	4030bc <__aeabi_dmul>
  4028b2:	a32b      	add	r3, pc, #172	; (adr r3, 402960 <__ieee754_pow+0xa60>)
  4028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4028b8:	f000 fc00 	bl	4030bc <__aeabi_dmul>
  4028bc:	f7ff bb62 	b.w	401f84 <__ieee754_pow+0x84>
  4028c0:	f1be 0f00 	cmp.w	lr, #0
  4028c4:	f47f ab69 	bne.w	401f9a <__ieee754_pow+0x9a>
  4028c8:	f1c3 0314 	rsb	r3, r3, #20
  4028cc:	fa47 f203 	asr.w	r2, r7, r3
  4028d0:	fa02 f303 	lsl.w	r3, r2, r3
  4028d4:	429f      	cmp	r7, r3
  4028d6:	d02a      	beq.n	40292e <__ieee754_pow+0xa2e>
  4028d8:	4674      	mov	r4, lr
  4028da:	f7ff bb36 	b.w	401f4a <__ieee754_pow+0x4a>
  4028de:	4b29      	ldr	r3, [pc, #164]	; (402984 <__ieee754_pow+0xa84>)
  4028e0:	4598      	cmp	r8, r3
  4028e2:	f73f ae0e 	bgt.w	402502 <__ieee754_pow+0x602>
  4028e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4028ea:	4692      	mov	sl, r2
  4028ec:	4693      	mov	fp, r2
  4028ee:	e638      	b.n	402562 <__ieee754_pow+0x662>
  4028f0:	4602      	mov	r2, r0
  4028f2:	460b      	mov	r3, r1
  4028f4:	f000 fa2e 	bl	402d54 <__aeabi_dsub>
  4028f8:	4602      	mov	r2, r0
  4028fa:	460b      	mov	r3, r1
  4028fc:	f000 fd08 	bl	403310 <__aeabi_ddiv>
  402900:	f7ff bb40 	b.w	401f84 <__ieee754_pow+0x84>
  402904:	a318      	add	r3, pc, #96	; (adr r3, 402968 <__ieee754_pow+0xa68>)
  402906:	e9d3 2300 	ldrd	r2, r3, [r3]
  40290a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40290e:	a318      	add	r3, pc, #96	; (adr r3, 402970 <__ieee754_pow+0xa70>)
  402910:	e9d3 2300 	ldrd	r2, r3, [r3]
  402914:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402918:	4b1b      	ldr	r3, [pc, #108]	; (402988 <__ieee754_pow+0xa88>)
  40291a:	2200      	movs	r2, #0
  40291c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
  402920:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402924:	e401      	b.n	40212a <__ieee754_pow+0x22a>
  402926:	465a      	mov	r2, fp
  402928:	f000 f98a 	bl	402c40 <scalbn>
  40292c:	e6c9      	b.n	4026c2 <__ieee754_pow+0x7c2>
  40292e:	f002 0201 	and.w	r2, r2, #1
  402932:	f1c2 0402 	rsb	r4, r2, #2
  402936:	f7ff bb08 	b.w	401f4a <__ieee754_pow+0x4a>
  40293a:	bf00      	nop
  40293c:	f3af 8000 	nop.w
  402940:	60000000 	.word	0x60000000
  402944:	3ff71547 	.word	0x3ff71547
  402948:	f85ddf44 	.word	0xf85ddf44
  40294c:	3e54ae0b 	.word	0x3e54ae0b
  402950:	55555555 	.word	0x55555555
  402954:	3fd55555 	.word	0x3fd55555
  402958:	652b82fe 	.word	0x652b82fe
  40295c:	3ff71547 	.word	0x3ff71547
  402960:	8800759c 	.word	0x8800759c
  402964:	7e37e43c 	.word	0x7e37e43c
  402968:	40000000 	.word	0x40000000
  40296c:	3fe2b803 	.word	0x3fe2b803
  402970:	43cfd006 	.word	0x43cfd006
  402974:	3e4cfdeb 	.word	0x3e4cfdeb
  402978:	3feffffe 	.word	0x3feffffe
  40297c:	3ff00000 	.word	0x3ff00000
  402980:	3fd00000 	.word	0x3fd00000
  402984:	3fe00000 	.word	0x3fe00000
  402988:	3ff80000 	.word	0x3ff80000

0040298c <__ieee754_sqrt>:
  40298c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402990:	4f5b      	ldr	r7, [pc, #364]	; (402b00 <__ieee754_sqrt+0x174>)
  402992:	438f      	bics	r7, r1
  402994:	4605      	mov	r5, r0
  402996:	460c      	mov	r4, r1
  402998:	f000 8092 	beq.w	402ac0 <__ieee754_sqrt+0x134>
  40299c:	2900      	cmp	r1, #0
  40299e:	460b      	mov	r3, r1
  4029a0:	4602      	mov	r2, r0
  4029a2:	dd6f      	ble.n	402a84 <__ieee754_sqrt+0xf8>
  4029a4:	150f      	asrs	r7, r1, #20
  4029a6:	d07b      	beq.n	402aa0 <__ieee754_sqrt+0x114>
  4029a8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4029ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4029b0:	07f8      	lsls	r0, r7, #31
  4029b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4029b6:	d45c      	bmi.n	402a72 <__ieee754_sqrt+0xe6>
  4029b8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4029bc:	2600      	movs	r6, #0
  4029be:	440b      	add	r3, r1
  4029c0:	107f      	asrs	r7, r7, #1
  4029c2:	0052      	lsls	r2, r2, #1
  4029c4:	46b6      	mov	lr, r6
  4029c6:	2016      	movs	r0, #22
  4029c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4029cc:	eb0e 0401 	add.w	r4, lr, r1
  4029d0:	429c      	cmp	r4, r3
  4029d2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4029d6:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4029da:	dc03      	bgt.n	4029e4 <__ieee754_sqrt+0x58>
  4029dc:	1b1b      	subs	r3, r3, r4
  4029de:	eb04 0e01 	add.w	lr, r4, r1
  4029e2:	440e      	add	r6, r1
  4029e4:	3801      	subs	r0, #1
  4029e6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  4029ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4029ee:	d1ed      	bne.n	4029cc <__ieee754_sqrt+0x40>
  4029f0:	4684      	mov	ip, r0
  4029f2:	2420      	movs	r4, #32
  4029f4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4029f8:	e009      	b.n	402a0e <__ieee754_sqrt+0x82>
  4029fa:	d020      	beq.n	402a3e <__ieee754_sqrt+0xb2>
  4029fc:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  402a00:	3c01      	subs	r4, #1
  402a02:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402a06:	442b      	add	r3, r5
  402a08:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402a0c:	d020      	beq.n	402a50 <__ieee754_sqrt+0xc4>
  402a0e:	4573      	cmp	r3, lr
  402a10:	eb01 050c 	add.w	r5, r1, ip
  402a14:	ddf1      	ble.n	4029fa <__ieee754_sqrt+0x6e>
  402a16:	2d00      	cmp	r5, #0
  402a18:	eb05 0c01 	add.w	ip, r5, r1
  402a1c:	db09      	blt.n	402a32 <__ieee754_sqrt+0xa6>
  402a1e:	46f0      	mov	r8, lr
  402a20:	4295      	cmp	r5, r2
  402a22:	eba3 030e 	sub.w	r3, r3, lr
  402a26:	d900      	bls.n	402a2a <__ieee754_sqrt+0x9e>
  402a28:	3b01      	subs	r3, #1
  402a2a:	1b52      	subs	r2, r2, r5
  402a2c:	4408      	add	r0, r1
  402a2e:	46c6      	mov	lr, r8
  402a30:	e7e4      	b.n	4029fc <__ieee754_sqrt+0x70>
  402a32:	f1bc 0f00 	cmp.w	ip, #0
  402a36:	dbf2      	blt.n	402a1e <__ieee754_sqrt+0x92>
  402a38:	f10e 0801 	add.w	r8, lr, #1
  402a3c:	e7f0      	b.n	402a20 <__ieee754_sqrt+0x94>
  402a3e:	4295      	cmp	r5, r2
  402a40:	d8dc      	bhi.n	4029fc <__ieee754_sqrt+0x70>
  402a42:	2d00      	cmp	r5, #0
  402a44:	eb05 0c01 	add.w	ip, r5, r1
  402a48:	db44      	blt.n	402ad4 <__ieee754_sqrt+0x148>
  402a4a:	4698      	mov	r8, r3
  402a4c:	2300      	movs	r3, #0
  402a4e:	e7ec      	b.n	402a2a <__ieee754_sqrt+0x9e>
  402a50:	4313      	orrs	r3, r2
  402a52:	d113      	bne.n	402a7c <__ieee754_sqrt+0xf0>
  402a54:	0840      	lsrs	r0, r0, #1
  402a56:	1073      	asrs	r3, r6, #1
  402a58:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402a5c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402a60:	07f2      	lsls	r2, r6, #31
  402a62:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  402a66:	bf48      	it	mi
  402a68:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402a6c:	4649      	mov	r1, r9
  402a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a72:	005b      	lsls	r3, r3, #1
  402a74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  402a78:	0052      	lsls	r2, r2, #1
  402a7a:	e79d      	b.n	4029b8 <__ieee754_sqrt+0x2c>
  402a7c:	1c41      	adds	r1, r0, #1
  402a7e:	d02d      	beq.n	402adc <__ieee754_sqrt+0x150>
  402a80:	3001      	adds	r0, #1
  402a82:	e7e7      	b.n	402a54 <__ieee754_sqrt+0xc8>
  402a84:	4606      	mov	r6, r0
  402a86:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  402a8a:	433e      	orrs	r6, r7
  402a8c:	d0ef      	beq.n	402a6e <__ieee754_sqrt+0xe2>
  402a8e:	bb69      	cbnz	r1, 402aec <__ieee754_sqrt+0x160>
  402a90:	460f      	mov	r7, r1
  402a92:	0ad3      	lsrs	r3, r2, #11
  402a94:	3f15      	subs	r7, #21
  402a96:	0552      	lsls	r2, r2, #21
  402a98:	2b00      	cmp	r3, #0
  402a9a:	d0fa      	beq.n	402a92 <__ieee754_sqrt+0x106>
  402a9c:	02de      	lsls	r6, r3, #11
  402a9e:	d420      	bmi.n	402ae2 <__ieee754_sqrt+0x156>
  402aa0:	2400      	movs	r4, #0
  402aa2:	e000      	b.n	402aa6 <__ieee754_sqrt+0x11a>
  402aa4:	4604      	mov	r4, r0
  402aa6:	005b      	lsls	r3, r3, #1
  402aa8:	02dd      	lsls	r5, r3, #11
  402aaa:	f104 0001 	add.w	r0, r4, #1
  402aae:	d5f9      	bpl.n	402aa4 <__ieee754_sqrt+0x118>
  402ab0:	f1c0 0120 	rsb	r1, r0, #32
  402ab4:	fa22 f101 	lsr.w	r1, r2, r1
  402ab8:	430b      	orrs	r3, r1
  402aba:	1b3f      	subs	r7, r7, r4
  402abc:	4082      	lsls	r2, r0
  402abe:	e773      	b.n	4029a8 <__ieee754_sqrt+0x1c>
  402ac0:	4602      	mov	r2, r0
  402ac2:	460b      	mov	r3, r1
  402ac4:	f000 fafa 	bl	4030bc <__aeabi_dmul>
  402ac8:	462a      	mov	r2, r5
  402aca:	4623      	mov	r3, r4
  402acc:	f000 f944 	bl	402d58 <__adddf3>
  402ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ad4:	f1bc 0f00 	cmp.w	ip, #0
  402ad8:	daae      	bge.n	402a38 <__ieee754_sqrt+0xac>
  402ada:	e7b6      	b.n	402a4a <__ieee754_sqrt+0xbe>
  402adc:	3601      	adds	r6, #1
  402ade:	4620      	mov	r0, r4
  402ae0:	e7b9      	b.n	402a56 <__ieee754_sqrt+0xca>
  402ae2:	2000      	movs	r0, #0
  402ae4:	2120      	movs	r1, #32
  402ae6:	f04f 34ff 	mov.w	r4, #4294967295
  402aea:	e7e3      	b.n	402ab4 <__ieee754_sqrt+0x128>
  402aec:	4602      	mov	r2, r0
  402aee:	460b      	mov	r3, r1
  402af0:	f000 f930 	bl	402d54 <__aeabi_dsub>
  402af4:	4602      	mov	r2, r0
  402af6:	460b      	mov	r3, r1
  402af8:	f000 fc0a 	bl	403310 <__aeabi_ddiv>
  402afc:	e7b7      	b.n	402a6e <__ieee754_sqrt+0xe2>
  402afe:	bf00      	nop
  402b00:	7ff00000 	.word	0x7ff00000

00402b04 <fabs>:
  402b04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402b08:	4770      	bx	lr
  402b0a:	bf00      	nop

00402b0c <finite>:
  402b0c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  402b10:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
  402b14:	0fc0      	lsrs	r0, r0, #31
  402b16:	4770      	bx	lr

00402b18 <matherr>:
  402b18:	2000      	movs	r0, #0
  402b1a:	4770      	bx	lr

00402b1c <nan>:
  402b1c:	2000      	movs	r0, #0
  402b1e:	4901      	ldr	r1, [pc, #4]	; (402b24 <nan+0x8>)
  402b20:	4770      	bx	lr
  402b22:	bf00      	nop
  402b24:	7ff80000 	.word	0x7ff80000

00402b28 <rint>:
  402b28:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b2a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
  402b2e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
  402b32:	2e13      	cmp	r6, #19
  402b34:	b083      	sub	sp, #12
  402b36:	4602      	mov	r2, r0
  402b38:	460b      	mov	r3, r1
  402b3a:	460c      	mov	r4, r1
  402b3c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
  402b40:	4607      	mov	r7, r0
  402b42:	dc2e      	bgt.n	402ba2 <rint+0x7a>
  402b44:	2e00      	cmp	r6, #0
  402b46:	db49      	blt.n	402bdc <rint+0xb4>
  402b48:	493a      	ldr	r1, [pc, #232]	; (402c34 <rint+0x10c>)
  402b4a:	4131      	asrs	r1, r6
  402b4c:	ea03 0001 	and.w	r0, r3, r1
  402b50:	4310      	orrs	r0, r2
  402b52:	d02b      	beq.n	402bac <rint+0x84>
  402b54:	0849      	lsrs	r1, r1, #1
  402b56:	400b      	ands	r3, r1
  402b58:	ea53 0702 	orrs.w	r7, r3, r2
  402b5c:	d00c      	beq.n	402b78 <rint+0x50>
  402b5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  402b62:	2e13      	cmp	r6, #19
  402b64:	ea24 0101 	bic.w	r1, r4, r1
  402b68:	fa43 f406 	asr.w	r4, r3, r6
  402b6c:	ea44 0401 	orr.w	r4, r4, r1
  402b70:	bf0c      	ite	eq
  402b72:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
  402b76:	2700      	movne	r7, #0
  402b78:	4b2f      	ldr	r3, [pc, #188]	; (402c38 <rint+0x110>)
  402b7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  402b7e:	4621      	mov	r1, r4
  402b80:	e9d5 4500 	ldrd	r4, r5, [r5]
  402b84:	4638      	mov	r0, r7
  402b86:	4622      	mov	r2, r4
  402b88:	462b      	mov	r3, r5
  402b8a:	f000 f8e5 	bl	402d58 <__adddf3>
  402b8e:	e9cd 0100 	strd	r0, r1, [sp]
  402b92:	4622      	mov	r2, r4
  402b94:	462b      	mov	r3, r5
  402b96:	e9dd 0100 	ldrd	r0, r1, [sp]
  402b9a:	f000 f8db 	bl	402d54 <__aeabi_dsub>
  402b9e:	b003      	add	sp, #12
  402ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ba2:	2e33      	cmp	r6, #51	; 0x33
  402ba4:	dd06      	ble.n	402bb4 <rint+0x8c>
  402ba6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  402baa:	d040      	beq.n	402c2e <rint+0x106>
  402bac:	4610      	mov	r0, r2
  402bae:	4619      	mov	r1, r3
  402bb0:	b003      	add	sp, #12
  402bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402bb4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
  402bb8:	f04f 31ff 	mov.w	r1, #4294967295
  402bbc:	fa21 f10e 	lsr.w	r1, r1, lr
  402bc0:	4208      	tst	r0, r1
  402bc2:	d0f3      	beq.n	402bac <rint+0x84>
  402bc4:	0849      	lsrs	r1, r1, #1
  402bc6:	4208      	tst	r0, r1
  402bc8:	d0d6      	beq.n	402b78 <rint+0x50>
  402bca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402bce:	ea20 0101 	bic.w	r1, r0, r1
  402bd2:	fa43 fe0e 	asr.w	lr, r3, lr
  402bd6:	ea4e 0701 	orr.w	r7, lr, r1
  402bda:	e7cd      	b.n	402b78 <rint+0x50>
  402bdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402be0:	4301      	orrs	r1, r0
  402be2:	d0e3      	beq.n	402bac <rint+0x84>
  402be4:	f3c3 0113 	ubfx	r1, r3, #0, #20
  402be8:	4e13      	ldr	r6, [pc, #76]	; (402c38 <rint+0x110>)
  402bea:	4301      	orrs	r1, r0
  402bec:	f1c1 0c00 	rsb	ip, r1, #0
  402bf0:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
  402bf4:	e9d6 6700 	ldrd	r6, r7, [r6]
  402bf8:	ea4c 0c01 	orr.w	ip, ip, r1
  402bfc:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
  402c00:	0c5c      	lsrs	r4, r3, #17
  402c02:	0464      	lsls	r4, r4, #17
  402c04:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
  402c08:	ea43 0104 	orr.w	r1, r3, r4
  402c0c:	4632      	mov	r2, r6
  402c0e:	463b      	mov	r3, r7
  402c10:	f000 f8a2 	bl	402d58 <__adddf3>
  402c14:	e9cd 0100 	strd	r0, r1, [sp]
  402c18:	4632      	mov	r2, r6
  402c1a:	463b      	mov	r3, r7
  402c1c:	e9dd 0100 	ldrd	r0, r1, [sp]
  402c20:	f000 f898 	bl	402d54 <__aeabi_dsub>
  402c24:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  402c28:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
  402c2c:	e7c0      	b.n	402bb0 <rint+0x88>
  402c2e:	f000 f893 	bl	402d58 <__adddf3>
  402c32:	e7bd      	b.n	402bb0 <rint+0x88>
  402c34:	000fffff 	.word	0x000fffff
  402c38:	00406730 	.word	0x00406730
  402c3c:	00000000 	.word	0x00000000

00402c40 <scalbn>:
  402c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402c42:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402c46:	4604      	mov	r4, r0
  402c48:	460d      	mov	r5, r1
  402c4a:	460b      	mov	r3, r1
  402c4c:	4617      	mov	r7, r2
  402c4e:	bb0e      	cbnz	r6, 402c94 <scalbn+0x54>
  402c50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402c54:	4303      	orrs	r3, r0
  402c56:	4686      	mov	lr, r0
  402c58:	d025      	beq.n	402ca6 <scalbn+0x66>
  402c5a:	2200      	movs	r2, #0
  402c5c:	4b34      	ldr	r3, [pc, #208]	; (402d30 <scalbn+0xf0>)
  402c5e:	f000 fa2d 	bl	4030bc <__aeabi_dmul>
  402c62:	4a34      	ldr	r2, [pc, #208]	; (402d34 <scalbn+0xf4>)
  402c64:	4297      	cmp	r7, r2
  402c66:	4604      	mov	r4, r0
  402c68:	460d      	mov	r5, r1
  402c6a:	460b      	mov	r3, r1
  402c6c:	db2a      	blt.n	402cc4 <scalbn+0x84>
  402c6e:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402c72:	3e36      	subs	r6, #54	; 0x36
  402c74:	443e      	add	r6, r7
  402c76:	f240 72fe 	movw	r2, #2046	; 0x7fe
  402c7a:	4296      	cmp	r6, r2
  402c7c:	dc28      	bgt.n	402cd0 <scalbn+0x90>
  402c7e:	2e00      	cmp	r6, #0
  402c80:	dd12      	ble.n	402ca8 <scalbn+0x68>
  402c82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402c86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402c8a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402c8e:	4620      	mov	r0, r4
  402c90:	4629      	mov	r1, r5
  402c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c94:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402c98:	4296      	cmp	r6, r2
  402c9a:	d1eb      	bne.n	402c74 <scalbn+0x34>
  402c9c:	4602      	mov	r2, r0
  402c9e:	460b      	mov	r3, r1
  402ca0:	f000 f85a 	bl	402d58 <__adddf3>
  402ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ca8:	f116 0f35 	cmn.w	r6, #53	; 0x35
  402cac:	da1d      	bge.n	402cea <scalbn+0xaa>
  402cae:	f24c 3350 	movw	r3, #50000	; 0xc350
  402cb2:	429f      	cmp	r7, r3
  402cb4:	4622      	mov	r2, r4
  402cb6:	462b      	mov	r3, r5
  402cb8:	dc25      	bgt.n	402d06 <scalbn+0xc6>
  402cba:	a119      	add	r1, pc, #100	; (adr r1, 402d20 <scalbn+0xe0>)
  402cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
  402cc0:	f000 f83c 	bl	402d3c <copysign>
  402cc4:	a316      	add	r3, pc, #88	; (adr r3, 402d20 <scalbn+0xe0>)
  402cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
  402cca:	f000 f9f7 	bl	4030bc <__aeabi_dmul>
  402cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cd0:	4622      	mov	r2, r4
  402cd2:	462b      	mov	r3, r5
  402cd4:	a114      	add	r1, pc, #80	; (adr r1, 402d28 <scalbn+0xe8>)
  402cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
  402cda:	f000 f82f 	bl	402d3c <copysign>
  402cde:	a312      	add	r3, pc, #72	; (adr r3, 402d28 <scalbn+0xe8>)
  402ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ce4:	f000 f9ea 	bl	4030bc <__aeabi_dmul>
  402ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402cee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402cf2:	3636      	adds	r6, #54	; 0x36
  402cf4:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402cf8:	4620      	mov	r0, r4
  402cfa:	4629      	mov	r1, r5
  402cfc:	2200      	movs	r2, #0
  402cfe:	4b0e      	ldr	r3, [pc, #56]	; (402d38 <scalbn+0xf8>)
  402d00:	f000 f9dc 	bl	4030bc <__aeabi_dmul>
  402d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d06:	a108      	add	r1, pc, #32	; (adr r1, 402d28 <scalbn+0xe8>)
  402d08:	e9d1 0100 	ldrd	r0, r1, [r1]
  402d0c:	f000 f816 	bl	402d3c <copysign>
  402d10:	a305      	add	r3, pc, #20	; (adr r3, 402d28 <scalbn+0xe8>)
  402d12:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d16:	f000 f9d1 	bl	4030bc <__aeabi_dmul>
  402d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d1c:	f3af 8000 	nop.w
  402d20:	c2f8f359 	.word	0xc2f8f359
  402d24:	01a56e1f 	.word	0x01a56e1f
  402d28:	8800759c 	.word	0x8800759c
  402d2c:	7e37e43c 	.word	0x7e37e43c
  402d30:	43500000 	.word	0x43500000
  402d34:	ffff3cb0 	.word	0xffff3cb0
  402d38:	3c900000 	.word	0x3c900000

00402d3c <copysign>:
  402d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  402d40:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  402d44:	ea42 0103 	orr.w	r1, r2, r3
  402d48:	4770      	bx	lr
  402d4a:	bf00      	nop

00402d4c <__aeabi_drsub>:
  402d4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402d50:	e002      	b.n	402d58 <__adddf3>
  402d52:	bf00      	nop

00402d54 <__aeabi_dsub>:
  402d54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402d58 <__adddf3>:
  402d58:	b530      	push	{r4, r5, lr}
  402d5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402d5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402d62:	ea94 0f05 	teq	r4, r5
  402d66:	bf08      	it	eq
  402d68:	ea90 0f02 	teqeq	r0, r2
  402d6c:	bf1f      	itttt	ne
  402d6e:	ea54 0c00 	orrsne.w	ip, r4, r0
  402d72:	ea55 0c02 	orrsne.w	ip, r5, r2
  402d76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402d7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402d7e:	f000 80e2 	beq.w	402f46 <__adddf3+0x1ee>
  402d82:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402d86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402d8a:	bfb8      	it	lt
  402d8c:	426d      	neglt	r5, r5
  402d8e:	dd0c      	ble.n	402daa <__adddf3+0x52>
  402d90:	442c      	add	r4, r5
  402d92:	ea80 0202 	eor.w	r2, r0, r2
  402d96:	ea81 0303 	eor.w	r3, r1, r3
  402d9a:	ea82 0000 	eor.w	r0, r2, r0
  402d9e:	ea83 0101 	eor.w	r1, r3, r1
  402da2:	ea80 0202 	eor.w	r2, r0, r2
  402da6:	ea81 0303 	eor.w	r3, r1, r3
  402daa:	2d36      	cmp	r5, #54	; 0x36
  402dac:	bf88      	it	hi
  402dae:	bd30      	pophi	{r4, r5, pc}
  402db0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402db4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402db8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402dbc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402dc0:	d002      	beq.n	402dc8 <__adddf3+0x70>
  402dc2:	4240      	negs	r0, r0
  402dc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402dc8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402dcc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402dd0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402dd4:	d002      	beq.n	402ddc <__adddf3+0x84>
  402dd6:	4252      	negs	r2, r2
  402dd8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402ddc:	ea94 0f05 	teq	r4, r5
  402de0:	f000 80a7 	beq.w	402f32 <__adddf3+0x1da>
  402de4:	f1a4 0401 	sub.w	r4, r4, #1
  402de8:	f1d5 0e20 	rsbs	lr, r5, #32
  402dec:	db0d      	blt.n	402e0a <__adddf3+0xb2>
  402dee:	fa02 fc0e 	lsl.w	ip, r2, lr
  402df2:	fa22 f205 	lsr.w	r2, r2, r5
  402df6:	1880      	adds	r0, r0, r2
  402df8:	f141 0100 	adc.w	r1, r1, #0
  402dfc:	fa03 f20e 	lsl.w	r2, r3, lr
  402e00:	1880      	adds	r0, r0, r2
  402e02:	fa43 f305 	asr.w	r3, r3, r5
  402e06:	4159      	adcs	r1, r3
  402e08:	e00e      	b.n	402e28 <__adddf3+0xd0>
  402e0a:	f1a5 0520 	sub.w	r5, r5, #32
  402e0e:	f10e 0e20 	add.w	lr, lr, #32
  402e12:	2a01      	cmp	r2, #1
  402e14:	fa03 fc0e 	lsl.w	ip, r3, lr
  402e18:	bf28      	it	cs
  402e1a:	f04c 0c02 	orrcs.w	ip, ip, #2
  402e1e:	fa43 f305 	asr.w	r3, r3, r5
  402e22:	18c0      	adds	r0, r0, r3
  402e24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402e28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402e2c:	d507      	bpl.n	402e3e <__adddf3+0xe6>
  402e2e:	f04f 0e00 	mov.w	lr, #0
  402e32:	f1dc 0c00 	rsbs	ip, ip, #0
  402e36:	eb7e 0000 	sbcs.w	r0, lr, r0
  402e3a:	eb6e 0101 	sbc.w	r1, lr, r1
  402e3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402e42:	d31b      	bcc.n	402e7c <__adddf3+0x124>
  402e44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402e48:	d30c      	bcc.n	402e64 <__adddf3+0x10c>
  402e4a:	0849      	lsrs	r1, r1, #1
  402e4c:	ea5f 0030 	movs.w	r0, r0, rrx
  402e50:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402e54:	f104 0401 	add.w	r4, r4, #1
  402e58:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402e5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402e60:	f080 809a 	bcs.w	402f98 <__adddf3+0x240>
  402e64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402e68:	bf08      	it	eq
  402e6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402e6e:	f150 0000 	adcs.w	r0, r0, #0
  402e72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402e76:	ea41 0105 	orr.w	r1, r1, r5
  402e7a:	bd30      	pop	{r4, r5, pc}
  402e7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402e80:	4140      	adcs	r0, r0
  402e82:	eb41 0101 	adc.w	r1, r1, r1
  402e86:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402e8a:	f1a4 0401 	sub.w	r4, r4, #1
  402e8e:	d1e9      	bne.n	402e64 <__adddf3+0x10c>
  402e90:	f091 0f00 	teq	r1, #0
  402e94:	bf04      	itt	eq
  402e96:	4601      	moveq	r1, r0
  402e98:	2000      	moveq	r0, #0
  402e9a:	fab1 f381 	clz	r3, r1
  402e9e:	bf08      	it	eq
  402ea0:	3320      	addeq	r3, #32
  402ea2:	f1a3 030b 	sub.w	r3, r3, #11
  402ea6:	f1b3 0220 	subs.w	r2, r3, #32
  402eaa:	da0c      	bge.n	402ec6 <__adddf3+0x16e>
  402eac:	320c      	adds	r2, #12
  402eae:	dd08      	ble.n	402ec2 <__adddf3+0x16a>
  402eb0:	f102 0c14 	add.w	ip, r2, #20
  402eb4:	f1c2 020c 	rsb	r2, r2, #12
  402eb8:	fa01 f00c 	lsl.w	r0, r1, ip
  402ebc:	fa21 f102 	lsr.w	r1, r1, r2
  402ec0:	e00c      	b.n	402edc <__adddf3+0x184>
  402ec2:	f102 0214 	add.w	r2, r2, #20
  402ec6:	bfd8      	it	le
  402ec8:	f1c2 0c20 	rsble	ip, r2, #32
  402ecc:	fa01 f102 	lsl.w	r1, r1, r2
  402ed0:	fa20 fc0c 	lsr.w	ip, r0, ip
  402ed4:	bfdc      	itt	le
  402ed6:	ea41 010c 	orrle.w	r1, r1, ip
  402eda:	4090      	lslle	r0, r2
  402edc:	1ae4      	subs	r4, r4, r3
  402ede:	bfa2      	ittt	ge
  402ee0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402ee4:	4329      	orrge	r1, r5
  402ee6:	bd30      	popge	{r4, r5, pc}
  402ee8:	ea6f 0404 	mvn.w	r4, r4
  402eec:	3c1f      	subs	r4, #31
  402eee:	da1c      	bge.n	402f2a <__adddf3+0x1d2>
  402ef0:	340c      	adds	r4, #12
  402ef2:	dc0e      	bgt.n	402f12 <__adddf3+0x1ba>
  402ef4:	f104 0414 	add.w	r4, r4, #20
  402ef8:	f1c4 0220 	rsb	r2, r4, #32
  402efc:	fa20 f004 	lsr.w	r0, r0, r4
  402f00:	fa01 f302 	lsl.w	r3, r1, r2
  402f04:	ea40 0003 	orr.w	r0, r0, r3
  402f08:	fa21 f304 	lsr.w	r3, r1, r4
  402f0c:	ea45 0103 	orr.w	r1, r5, r3
  402f10:	bd30      	pop	{r4, r5, pc}
  402f12:	f1c4 040c 	rsb	r4, r4, #12
  402f16:	f1c4 0220 	rsb	r2, r4, #32
  402f1a:	fa20 f002 	lsr.w	r0, r0, r2
  402f1e:	fa01 f304 	lsl.w	r3, r1, r4
  402f22:	ea40 0003 	orr.w	r0, r0, r3
  402f26:	4629      	mov	r1, r5
  402f28:	bd30      	pop	{r4, r5, pc}
  402f2a:	fa21 f004 	lsr.w	r0, r1, r4
  402f2e:	4629      	mov	r1, r5
  402f30:	bd30      	pop	{r4, r5, pc}
  402f32:	f094 0f00 	teq	r4, #0
  402f36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402f3a:	bf06      	itte	eq
  402f3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402f40:	3401      	addeq	r4, #1
  402f42:	3d01      	subne	r5, #1
  402f44:	e74e      	b.n	402de4 <__adddf3+0x8c>
  402f46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402f4a:	bf18      	it	ne
  402f4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402f50:	d029      	beq.n	402fa6 <__adddf3+0x24e>
  402f52:	ea94 0f05 	teq	r4, r5
  402f56:	bf08      	it	eq
  402f58:	ea90 0f02 	teqeq	r0, r2
  402f5c:	d005      	beq.n	402f6a <__adddf3+0x212>
  402f5e:	ea54 0c00 	orrs.w	ip, r4, r0
  402f62:	bf04      	itt	eq
  402f64:	4619      	moveq	r1, r3
  402f66:	4610      	moveq	r0, r2
  402f68:	bd30      	pop	{r4, r5, pc}
  402f6a:	ea91 0f03 	teq	r1, r3
  402f6e:	bf1e      	ittt	ne
  402f70:	2100      	movne	r1, #0
  402f72:	2000      	movne	r0, #0
  402f74:	bd30      	popne	{r4, r5, pc}
  402f76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402f7a:	d105      	bne.n	402f88 <__adddf3+0x230>
  402f7c:	0040      	lsls	r0, r0, #1
  402f7e:	4149      	adcs	r1, r1
  402f80:	bf28      	it	cs
  402f82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402f86:	bd30      	pop	{r4, r5, pc}
  402f88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402f8c:	bf3c      	itt	cc
  402f8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402f92:	bd30      	popcc	{r4, r5, pc}
  402f94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402f98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402f9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402fa0:	f04f 0000 	mov.w	r0, #0
  402fa4:	bd30      	pop	{r4, r5, pc}
  402fa6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402faa:	bf1a      	itte	ne
  402fac:	4619      	movne	r1, r3
  402fae:	4610      	movne	r0, r2
  402fb0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402fb4:	bf1c      	itt	ne
  402fb6:	460b      	movne	r3, r1
  402fb8:	4602      	movne	r2, r0
  402fba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402fbe:	bf06      	itte	eq
  402fc0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402fc4:	ea91 0f03 	teqeq	r1, r3
  402fc8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402fcc:	bd30      	pop	{r4, r5, pc}
  402fce:	bf00      	nop

00402fd0 <__aeabi_ui2d>:
  402fd0:	f090 0f00 	teq	r0, #0
  402fd4:	bf04      	itt	eq
  402fd6:	2100      	moveq	r1, #0
  402fd8:	4770      	bxeq	lr
  402fda:	b530      	push	{r4, r5, lr}
  402fdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402fe0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402fe4:	f04f 0500 	mov.w	r5, #0
  402fe8:	f04f 0100 	mov.w	r1, #0
  402fec:	e750      	b.n	402e90 <__adddf3+0x138>
  402fee:	bf00      	nop

00402ff0 <__aeabi_i2d>:
  402ff0:	f090 0f00 	teq	r0, #0
  402ff4:	bf04      	itt	eq
  402ff6:	2100      	moveq	r1, #0
  402ff8:	4770      	bxeq	lr
  402ffa:	b530      	push	{r4, r5, lr}
  402ffc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403000:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403004:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403008:	bf48      	it	mi
  40300a:	4240      	negmi	r0, r0
  40300c:	f04f 0100 	mov.w	r1, #0
  403010:	e73e      	b.n	402e90 <__adddf3+0x138>
  403012:	bf00      	nop

00403014 <__aeabi_f2d>:
  403014:	0042      	lsls	r2, r0, #1
  403016:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40301a:	ea4f 0131 	mov.w	r1, r1, rrx
  40301e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403022:	bf1f      	itttt	ne
  403024:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403028:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40302c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403030:	4770      	bxne	lr
  403032:	f092 0f00 	teq	r2, #0
  403036:	bf14      	ite	ne
  403038:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40303c:	4770      	bxeq	lr
  40303e:	b530      	push	{r4, r5, lr}
  403040:	f44f 7460 	mov.w	r4, #896	; 0x380
  403044:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403048:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40304c:	e720      	b.n	402e90 <__adddf3+0x138>
  40304e:	bf00      	nop

00403050 <__aeabi_ul2d>:
  403050:	ea50 0201 	orrs.w	r2, r0, r1
  403054:	bf08      	it	eq
  403056:	4770      	bxeq	lr
  403058:	b530      	push	{r4, r5, lr}
  40305a:	f04f 0500 	mov.w	r5, #0
  40305e:	e00a      	b.n	403076 <__aeabi_l2d+0x16>

00403060 <__aeabi_l2d>:
  403060:	ea50 0201 	orrs.w	r2, r0, r1
  403064:	bf08      	it	eq
  403066:	4770      	bxeq	lr
  403068:	b530      	push	{r4, r5, lr}
  40306a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40306e:	d502      	bpl.n	403076 <__aeabi_l2d+0x16>
  403070:	4240      	negs	r0, r0
  403072:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403076:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40307a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40307e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403082:	f43f aedc 	beq.w	402e3e <__adddf3+0xe6>
  403086:	f04f 0203 	mov.w	r2, #3
  40308a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40308e:	bf18      	it	ne
  403090:	3203      	addne	r2, #3
  403092:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403096:	bf18      	it	ne
  403098:	3203      	addne	r2, #3
  40309a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40309e:	f1c2 0320 	rsb	r3, r2, #32
  4030a2:	fa00 fc03 	lsl.w	ip, r0, r3
  4030a6:	fa20 f002 	lsr.w	r0, r0, r2
  4030aa:	fa01 fe03 	lsl.w	lr, r1, r3
  4030ae:	ea40 000e 	orr.w	r0, r0, lr
  4030b2:	fa21 f102 	lsr.w	r1, r1, r2
  4030b6:	4414      	add	r4, r2
  4030b8:	e6c1      	b.n	402e3e <__adddf3+0xe6>
  4030ba:	bf00      	nop

004030bc <__aeabi_dmul>:
  4030bc:	b570      	push	{r4, r5, r6, lr}
  4030be:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4030c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4030c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4030ca:	bf1d      	ittte	ne
  4030cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4030d0:	ea94 0f0c 	teqne	r4, ip
  4030d4:	ea95 0f0c 	teqne	r5, ip
  4030d8:	f000 f8de 	bleq	403298 <__aeabi_dmul+0x1dc>
  4030dc:	442c      	add	r4, r5
  4030de:	ea81 0603 	eor.w	r6, r1, r3
  4030e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4030e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4030ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4030ee:	bf18      	it	ne
  4030f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4030f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4030f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4030fc:	d038      	beq.n	403170 <__aeabi_dmul+0xb4>
  4030fe:	fba0 ce02 	umull	ip, lr, r0, r2
  403102:	f04f 0500 	mov.w	r5, #0
  403106:	fbe1 e502 	umlal	lr, r5, r1, r2
  40310a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40310e:	fbe0 e503 	umlal	lr, r5, r0, r3
  403112:	f04f 0600 	mov.w	r6, #0
  403116:	fbe1 5603 	umlal	r5, r6, r1, r3
  40311a:	f09c 0f00 	teq	ip, #0
  40311e:	bf18      	it	ne
  403120:	f04e 0e01 	orrne.w	lr, lr, #1
  403124:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403128:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40312c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403130:	d204      	bcs.n	40313c <__aeabi_dmul+0x80>
  403132:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403136:	416d      	adcs	r5, r5
  403138:	eb46 0606 	adc.w	r6, r6, r6
  40313c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403140:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403144:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403148:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40314c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403150:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403154:	bf88      	it	hi
  403156:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40315a:	d81e      	bhi.n	40319a <__aeabi_dmul+0xde>
  40315c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403160:	bf08      	it	eq
  403162:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403166:	f150 0000 	adcs.w	r0, r0, #0
  40316a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40316e:	bd70      	pop	{r4, r5, r6, pc}
  403170:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403174:	ea46 0101 	orr.w	r1, r6, r1
  403178:	ea40 0002 	orr.w	r0, r0, r2
  40317c:	ea81 0103 	eor.w	r1, r1, r3
  403180:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403184:	bfc2      	ittt	gt
  403186:	ebd4 050c 	rsbsgt	r5, r4, ip
  40318a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40318e:	bd70      	popgt	{r4, r5, r6, pc}
  403190:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403194:	f04f 0e00 	mov.w	lr, #0
  403198:	3c01      	subs	r4, #1
  40319a:	f300 80ab 	bgt.w	4032f4 <__aeabi_dmul+0x238>
  40319e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4031a2:	bfde      	ittt	le
  4031a4:	2000      	movle	r0, #0
  4031a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4031aa:	bd70      	pople	{r4, r5, r6, pc}
  4031ac:	f1c4 0400 	rsb	r4, r4, #0
  4031b0:	3c20      	subs	r4, #32
  4031b2:	da35      	bge.n	403220 <__aeabi_dmul+0x164>
  4031b4:	340c      	adds	r4, #12
  4031b6:	dc1b      	bgt.n	4031f0 <__aeabi_dmul+0x134>
  4031b8:	f104 0414 	add.w	r4, r4, #20
  4031bc:	f1c4 0520 	rsb	r5, r4, #32
  4031c0:	fa00 f305 	lsl.w	r3, r0, r5
  4031c4:	fa20 f004 	lsr.w	r0, r0, r4
  4031c8:	fa01 f205 	lsl.w	r2, r1, r5
  4031cc:	ea40 0002 	orr.w	r0, r0, r2
  4031d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4031d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4031d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4031dc:	fa21 f604 	lsr.w	r6, r1, r4
  4031e0:	eb42 0106 	adc.w	r1, r2, r6
  4031e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4031e8:	bf08      	it	eq
  4031ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4031ee:	bd70      	pop	{r4, r5, r6, pc}
  4031f0:	f1c4 040c 	rsb	r4, r4, #12
  4031f4:	f1c4 0520 	rsb	r5, r4, #32
  4031f8:	fa00 f304 	lsl.w	r3, r0, r4
  4031fc:	fa20 f005 	lsr.w	r0, r0, r5
  403200:	fa01 f204 	lsl.w	r2, r1, r4
  403204:	ea40 0002 	orr.w	r0, r0, r2
  403208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40320c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403210:	f141 0100 	adc.w	r1, r1, #0
  403214:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403218:	bf08      	it	eq
  40321a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40321e:	bd70      	pop	{r4, r5, r6, pc}
  403220:	f1c4 0520 	rsb	r5, r4, #32
  403224:	fa00 f205 	lsl.w	r2, r0, r5
  403228:	ea4e 0e02 	orr.w	lr, lr, r2
  40322c:	fa20 f304 	lsr.w	r3, r0, r4
  403230:	fa01 f205 	lsl.w	r2, r1, r5
  403234:	ea43 0302 	orr.w	r3, r3, r2
  403238:	fa21 f004 	lsr.w	r0, r1, r4
  40323c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403240:	fa21 f204 	lsr.w	r2, r1, r4
  403244:	ea20 0002 	bic.w	r0, r0, r2
  403248:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40324c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403250:	bf08      	it	eq
  403252:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403256:	bd70      	pop	{r4, r5, r6, pc}
  403258:	f094 0f00 	teq	r4, #0
  40325c:	d10f      	bne.n	40327e <__aeabi_dmul+0x1c2>
  40325e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403262:	0040      	lsls	r0, r0, #1
  403264:	eb41 0101 	adc.w	r1, r1, r1
  403268:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40326c:	bf08      	it	eq
  40326e:	3c01      	subeq	r4, #1
  403270:	d0f7      	beq.n	403262 <__aeabi_dmul+0x1a6>
  403272:	ea41 0106 	orr.w	r1, r1, r6
  403276:	f095 0f00 	teq	r5, #0
  40327a:	bf18      	it	ne
  40327c:	4770      	bxne	lr
  40327e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403282:	0052      	lsls	r2, r2, #1
  403284:	eb43 0303 	adc.w	r3, r3, r3
  403288:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40328c:	bf08      	it	eq
  40328e:	3d01      	subeq	r5, #1
  403290:	d0f7      	beq.n	403282 <__aeabi_dmul+0x1c6>
  403292:	ea43 0306 	orr.w	r3, r3, r6
  403296:	4770      	bx	lr
  403298:	ea94 0f0c 	teq	r4, ip
  40329c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4032a0:	bf18      	it	ne
  4032a2:	ea95 0f0c 	teqne	r5, ip
  4032a6:	d00c      	beq.n	4032c2 <__aeabi_dmul+0x206>
  4032a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4032ac:	bf18      	it	ne
  4032ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4032b2:	d1d1      	bne.n	403258 <__aeabi_dmul+0x19c>
  4032b4:	ea81 0103 	eor.w	r1, r1, r3
  4032b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4032bc:	f04f 0000 	mov.w	r0, #0
  4032c0:	bd70      	pop	{r4, r5, r6, pc}
  4032c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4032c6:	bf06      	itte	eq
  4032c8:	4610      	moveq	r0, r2
  4032ca:	4619      	moveq	r1, r3
  4032cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4032d0:	d019      	beq.n	403306 <__aeabi_dmul+0x24a>
  4032d2:	ea94 0f0c 	teq	r4, ip
  4032d6:	d102      	bne.n	4032de <__aeabi_dmul+0x222>
  4032d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4032dc:	d113      	bne.n	403306 <__aeabi_dmul+0x24a>
  4032de:	ea95 0f0c 	teq	r5, ip
  4032e2:	d105      	bne.n	4032f0 <__aeabi_dmul+0x234>
  4032e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4032e8:	bf1c      	itt	ne
  4032ea:	4610      	movne	r0, r2
  4032ec:	4619      	movne	r1, r3
  4032ee:	d10a      	bne.n	403306 <__aeabi_dmul+0x24a>
  4032f0:	ea81 0103 	eor.w	r1, r1, r3
  4032f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4032f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4032fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403300:	f04f 0000 	mov.w	r0, #0
  403304:	bd70      	pop	{r4, r5, r6, pc}
  403306:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40330a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40330e:	bd70      	pop	{r4, r5, r6, pc}

00403310 <__aeabi_ddiv>:
  403310:	b570      	push	{r4, r5, r6, lr}
  403312:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403316:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40331a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40331e:	bf1d      	ittte	ne
  403320:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403324:	ea94 0f0c 	teqne	r4, ip
  403328:	ea95 0f0c 	teqne	r5, ip
  40332c:	f000 f8a7 	bleq	40347e <__aeabi_ddiv+0x16e>
  403330:	eba4 0405 	sub.w	r4, r4, r5
  403334:	ea81 0e03 	eor.w	lr, r1, r3
  403338:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40333c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403340:	f000 8088 	beq.w	403454 <__aeabi_ddiv+0x144>
  403344:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403348:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40334c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403350:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403354:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403358:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40335c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403360:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403364:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403368:	429d      	cmp	r5, r3
  40336a:	bf08      	it	eq
  40336c:	4296      	cmpeq	r6, r2
  40336e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403372:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403376:	d202      	bcs.n	40337e <__aeabi_ddiv+0x6e>
  403378:	085b      	lsrs	r3, r3, #1
  40337a:	ea4f 0232 	mov.w	r2, r2, rrx
  40337e:	1ab6      	subs	r6, r6, r2
  403380:	eb65 0503 	sbc.w	r5, r5, r3
  403384:	085b      	lsrs	r3, r3, #1
  403386:	ea4f 0232 	mov.w	r2, r2, rrx
  40338a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40338e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403392:	ebb6 0e02 	subs.w	lr, r6, r2
  403396:	eb75 0e03 	sbcs.w	lr, r5, r3
  40339a:	bf22      	ittt	cs
  40339c:	1ab6      	subcs	r6, r6, r2
  40339e:	4675      	movcs	r5, lr
  4033a0:	ea40 000c 	orrcs.w	r0, r0, ip
  4033a4:	085b      	lsrs	r3, r3, #1
  4033a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4033aa:	ebb6 0e02 	subs.w	lr, r6, r2
  4033ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  4033b2:	bf22      	ittt	cs
  4033b4:	1ab6      	subcs	r6, r6, r2
  4033b6:	4675      	movcs	r5, lr
  4033b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4033bc:	085b      	lsrs	r3, r3, #1
  4033be:	ea4f 0232 	mov.w	r2, r2, rrx
  4033c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4033c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4033ca:	bf22      	ittt	cs
  4033cc:	1ab6      	subcs	r6, r6, r2
  4033ce:	4675      	movcs	r5, lr
  4033d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4033d4:	085b      	lsrs	r3, r3, #1
  4033d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4033da:	ebb6 0e02 	subs.w	lr, r6, r2
  4033de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4033e2:	bf22      	ittt	cs
  4033e4:	1ab6      	subcs	r6, r6, r2
  4033e6:	4675      	movcs	r5, lr
  4033e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4033ec:	ea55 0e06 	orrs.w	lr, r5, r6
  4033f0:	d018      	beq.n	403424 <__aeabi_ddiv+0x114>
  4033f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4033f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4033fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4033fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403402:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403406:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40340a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40340e:	d1c0      	bne.n	403392 <__aeabi_ddiv+0x82>
  403410:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403414:	d10b      	bne.n	40342e <__aeabi_ddiv+0x11e>
  403416:	ea41 0100 	orr.w	r1, r1, r0
  40341a:	f04f 0000 	mov.w	r0, #0
  40341e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403422:	e7b6      	b.n	403392 <__aeabi_ddiv+0x82>
  403424:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403428:	bf04      	itt	eq
  40342a:	4301      	orreq	r1, r0
  40342c:	2000      	moveq	r0, #0
  40342e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403432:	bf88      	it	hi
  403434:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403438:	f63f aeaf 	bhi.w	40319a <__aeabi_dmul+0xde>
  40343c:	ebb5 0c03 	subs.w	ip, r5, r3
  403440:	bf04      	itt	eq
  403442:	ebb6 0c02 	subseq.w	ip, r6, r2
  403446:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40344a:	f150 0000 	adcs.w	r0, r0, #0
  40344e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403452:	bd70      	pop	{r4, r5, r6, pc}
  403454:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403458:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40345c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403460:	bfc2      	ittt	gt
  403462:	ebd4 050c 	rsbsgt	r5, r4, ip
  403466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40346a:	bd70      	popgt	{r4, r5, r6, pc}
  40346c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403470:	f04f 0e00 	mov.w	lr, #0
  403474:	3c01      	subs	r4, #1
  403476:	e690      	b.n	40319a <__aeabi_dmul+0xde>
  403478:	ea45 0e06 	orr.w	lr, r5, r6
  40347c:	e68d      	b.n	40319a <__aeabi_dmul+0xde>
  40347e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403482:	ea94 0f0c 	teq	r4, ip
  403486:	bf08      	it	eq
  403488:	ea95 0f0c 	teqeq	r5, ip
  40348c:	f43f af3b 	beq.w	403306 <__aeabi_dmul+0x24a>
  403490:	ea94 0f0c 	teq	r4, ip
  403494:	d10a      	bne.n	4034ac <__aeabi_ddiv+0x19c>
  403496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40349a:	f47f af34 	bne.w	403306 <__aeabi_dmul+0x24a>
  40349e:	ea95 0f0c 	teq	r5, ip
  4034a2:	f47f af25 	bne.w	4032f0 <__aeabi_dmul+0x234>
  4034a6:	4610      	mov	r0, r2
  4034a8:	4619      	mov	r1, r3
  4034aa:	e72c      	b.n	403306 <__aeabi_dmul+0x24a>
  4034ac:	ea95 0f0c 	teq	r5, ip
  4034b0:	d106      	bne.n	4034c0 <__aeabi_ddiv+0x1b0>
  4034b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4034b6:	f43f aefd 	beq.w	4032b4 <__aeabi_dmul+0x1f8>
  4034ba:	4610      	mov	r0, r2
  4034bc:	4619      	mov	r1, r3
  4034be:	e722      	b.n	403306 <__aeabi_dmul+0x24a>
  4034c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4034c4:	bf18      	it	ne
  4034c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4034ca:	f47f aec5 	bne.w	403258 <__aeabi_dmul+0x19c>
  4034ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4034d2:	f47f af0d 	bne.w	4032f0 <__aeabi_dmul+0x234>
  4034d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4034da:	f47f aeeb 	bne.w	4032b4 <__aeabi_dmul+0x1f8>
  4034de:	e712      	b.n	403306 <__aeabi_dmul+0x24a>

004034e0 <__gedf2>:
  4034e0:	f04f 3cff 	mov.w	ip, #4294967295
  4034e4:	e006      	b.n	4034f4 <__cmpdf2+0x4>
  4034e6:	bf00      	nop

004034e8 <__ledf2>:
  4034e8:	f04f 0c01 	mov.w	ip, #1
  4034ec:	e002      	b.n	4034f4 <__cmpdf2+0x4>
  4034ee:	bf00      	nop

004034f0 <__cmpdf2>:
  4034f0:	f04f 0c01 	mov.w	ip, #1
  4034f4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4034f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4034fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403500:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403504:	bf18      	it	ne
  403506:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40350a:	d01b      	beq.n	403544 <__cmpdf2+0x54>
  40350c:	b001      	add	sp, #4
  40350e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403512:	bf0c      	ite	eq
  403514:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403518:	ea91 0f03 	teqne	r1, r3
  40351c:	bf02      	ittt	eq
  40351e:	ea90 0f02 	teqeq	r0, r2
  403522:	2000      	moveq	r0, #0
  403524:	4770      	bxeq	lr
  403526:	f110 0f00 	cmn.w	r0, #0
  40352a:	ea91 0f03 	teq	r1, r3
  40352e:	bf58      	it	pl
  403530:	4299      	cmppl	r1, r3
  403532:	bf08      	it	eq
  403534:	4290      	cmpeq	r0, r2
  403536:	bf2c      	ite	cs
  403538:	17d8      	asrcs	r0, r3, #31
  40353a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40353e:	f040 0001 	orr.w	r0, r0, #1
  403542:	4770      	bx	lr
  403544:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403548:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40354c:	d102      	bne.n	403554 <__cmpdf2+0x64>
  40354e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403552:	d107      	bne.n	403564 <__cmpdf2+0x74>
  403554:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403558:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40355c:	d1d6      	bne.n	40350c <__cmpdf2+0x1c>
  40355e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403562:	d0d3      	beq.n	40350c <__cmpdf2+0x1c>
  403564:	f85d 0b04 	ldr.w	r0, [sp], #4
  403568:	4770      	bx	lr
  40356a:	bf00      	nop

0040356c <__aeabi_cdrcmple>:
  40356c:	4684      	mov	ip, r0
  40356e:	4610      	mov	r0, r2
  403570:	4662      	mov	r2, ip
  403572:	468c      	mov	ip, r1
  403574:	4619      	mov	r1, r3
  403576:	4663      	mov	r3, ip
  403578:	e000      	b.n	40357c <__aeabi_cdcmpeq>
  40357a:	bf00      	nop

0040357c <__aeabi_cdcmpeq>:
  40357c:	b501      	push	{r0, lr}
  40357e:	f7ff ffb7 	bl	4034f0 <__cmpdf2>
  403582:	2800      	cmp	r0, #0
  403584:	bf48      	it	mi
  403586:	f110 0f00 	cmnmi.w	r0, #0
  40358a:	bd01      	pop	{r0, pc}

0040358c <__aeabi_dcmpeq>:
  40358c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403590:	f7ff fff4 	bl	40357c <__aeabi_cdcmpeq>
  403594:	bf0c      	ite	eq
  403596:	2001      	moveq	r0, #1
  403598:	2000      	movne	r0, #0
  40359a:	f85d fb08 	ldr.w	pc, [sp], #8
  40359e:	bf00      	nop

004035a0 <__aeabi_dcmplt>:
  4035a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4035a4:	f7ff ffea 	bl	40357c <__aeabi_cdcmpeq>
  4035a8:	bf34      	ite	cc
  4035aa:	2001      	movcc	r0, #1
  4035ac:	2000      	movcs	r0, #0
  4035ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4035b2:	bf00      	nop

004035b4 <__aeabi_dcmple>:
  4035b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4035b8:	f7ff ffe0 	bl	40357c <__aeabi_cdcmpeq>
  4035bc:	bf94      	ite	ls
  4035be:	2001      	movls	r0, #1
  4035c0:	2000      	movhi	r0, #0
  4035c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4035c6:	bf00      	nop

004035c8 <__aeabi_dcmpge>:
  4035c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4035cc:	f7ff ffce 	bl	40356c <__aeabi_cdrcmple>
  4035d0:	bf94      	ite	ls
  4035d2:	2001      	movls	r0, #1
  4035d4:	2000      	movhi	r0, #0
  4035d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4035da:	bf00      	nop

004035dc <__aeabi_dcmpgt>:
  4035dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4035e0:	f7ff ffc4 	bl	40356c <__aeabi_cdrcmple>
  4035e4:	bf34      	ite	cc
  4035e6:	2001      	movcc	r0, #1
  4035e8:	2000      	movcs	r0, #0
  4035ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4035ee:	bf00      	nop

004035f0 <__aeabi_dcmpun>:
  4035f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4035f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4035f8:	d102      	bne.n	403600 <__aeabi_dcmpun+0x10>
  4035fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4035fe:	d10a      	bne.n	403616 <__aeabi_dcmpun+0x26>
  403600:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403608:	d102      	bne.n	403610 <__aeabi_dcmpun+0x20>
  40360a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40360e:	d102      	bne.n	403616 <__aeabi_dcmpun+0x26>
  403610:	f04f 0000 	mov.w	r0, #0
  403614:	4770      	bx	lr
  403616:	f04f 0001 	mov.w	r0, #1
  40361a:	4770      	bx	lr

0040361c <__aeabi_d2uiz>:
  40361c:	004a      	lsls	r2, r1, #1
  40361e:	d211      	bcs.n	403644 <__aeabi_d2uiz+0x28>
  403620:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403624:	d211      	bcs.n	40364a <__aeabi_d2uiz+0x2e>
  403626:	d50d      	bpl.n	403644 <__aeabi_d2uiz+0x28>
  403628:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40362c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403630:	d40e      	bmi.n	403650 <__aeabi_d2uiz+0x34>
  403632:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40363a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40363e:	fa23 f002 	lsr.w	r0, r3, r2
  403642:	4770      	bx	lr
  403644:	f04f 0000 	mov.w	r0, #0
  403648:	4770      	bx	lr
  40364a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40364e:	d102      	bne.n	403656 <__aeabi_d2uiz+0x3a>
  403650:	f04f 30ff 	mov.w	r0, #4294967295
  403654:	4770      	bx	lr
  403656:	f04f 0000 	mov.w	r0, #0
  40365a:	4770      	bx	lr

0040365c <__aeabi_ldivmod>:
  40365c:	b97b      	cbnz	r3, 40367e <__aeabi_ldivmod+0x22>
  40365e:	b972      	cbnz	r2, 40367e <__aeabi_ldivmod+0x22>
  403660:	2900      	cmp	r1, #0
  403662:	bfbe      	ittt	lt
  403664:	2000      	movlt	r0, #0
  403666:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
  40366a:	e006      	blt.n	40367a <__aeabi_ldivmod+0x1e>
  40366c:	bf08      	it	eq
  40366e:	2800      	cmpeq	r0, #0
  403670:	bf1c      	itt	ne
  403672:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
  403676:	f04f 30ff 	movne.w	r0, #4294967295
  40367a:	f000 b9eb 	b.w	403a54 <__aeabi_idiv0>
  40367e:	f1ad 0c08 	sub.w	ip, sp, #8
  403682:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403686:	2900      	cmp	r1, #0
  403688:	db09      	blt.n	40369e <__aeabi_ldivmod+0x42>
  40368a:	2b00      	cmp	r3, #0
  40368c:	db1a      	blt.n	4036c4 <__aeabi_ldivmod+0x68>
  40368e:	f000 f873 	bl	403778 <__udivmoddi4>
  403692:	f8dd e004 	ldr.w	lr, [sp, #4]
  403696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40369a:	b004      	add	sp, #16
  40369c:	4770      	bx	lr
  40369e:	4240      	negs	r0, r0
  4036a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4036a4:	2b00      	cmp	r3, #0
  4036a6:	db1b      	blt.n	4036e0 <__aeabi_ldivmod+0x84>
  4036a8:	f000 f866 	bl	403778 <__udivmoddi4>
  4036ac:	f8dd e004 	ldr.w	lr, [sp, #4]
  4036b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4036b4:	b004      	add	sp, #16
  4036b6:	4240      	negs	r0, r0
  4036b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4036bc:	4252      	negs	r2, r2
  4036be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4036c2:	4770      	bx	lr
  4036c4:	4252      	negs	r2, r2
  4036c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4036ca:	f000 f855 	bl	403778 <__udivmoddi4>
  4036ce:	f8dd e004 	ldr.w	lr, [sp, #4]
  4036d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4036d6:	b004      	add	sp, #16
  4036d8:	4240      	negs	r0, r0
  4036da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4036de:	4770      	bx	lr
  4036e0:	4252      	negs	r2, r2
  4036e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4036e6:	f000 f847 	bl	403778 <__udivmoddi4>
  4036ea:	f8dd e004 	ldr.w	lr, [sp, #4]
  4036ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4036f2:	b004      	add	sp, #16
  4036f4:	4252      	negs	r2, r2
  4036f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4036fa:	4770      	bx	lr

004036fc <__aeabi_d2lz>:
  4036fc:	b538      	push	{r3, r4, r5, lr}
  4036fe:	4605      	mov	r5, r0
  403700:	460c      	mov	r4, r1
  403702:	4628      	mov	r0, r5
  403704:	4621      	mov	r1, r4
  403706:	2200      	movs	r2, #0
  403708:	2300      	movs	r3, #0
  40370a:	f7ff ff49 	bl	4035a0 <__aeabi_dcmplt>
  40370e:	b928      	cbnz	r0, 40371c <__aeabi_d2lz+0x20>
  403710:	4628      	mov	r0, r5
  403712:	4621      	mov	r1, r4
  403714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403718:	f000 b80a 	b.w	403730 <__aeabi_d2ulz>
  40371c:	4628      	mov	r0, r5
  40371e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  403722:	f000 f805 	bl	403730 <__aeabi_d2ulz>
  403726:	4240      	negs	r0, r0
  403728:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40372c:	bd38      	pop	{r3, r4, r5, pc}
  40372e:	bf00      	nop

00403730 <__aeabi_d2ulz>:
  403730:	b5d0      	push	{r4, r6, r7, lr}
  403732:	2200      	movs	r2, #0
  403734:	4b0e      	ldr	r3, [pc, #56]	; (403770 <__aeabi_d2ulz+0x40>)
  403736:	4606      	mov	r6, r0
  403738:	460f      	mov	r7, r1
  40373a:	f7ff fcbf 	bl	4030bc <__aeabi_dmul>
  40373e:	f7ff ff6d 	bl	40361c <__aeabi_d2uiz>
  403742:	4604      	mov	r4, r0
  403744:	f7ff fc44 	bl	402fd0 <__aeabi_ui2d>
  403748:	2200      	movs	r2, #0
  40374a:	4b0a      	ldr	r3, [pc, #40]	; (403774 <__aeabi_d2ulz+0x44>)
  40374c:	f7ff fcb6 	bl	4030bc <__aeabi_dmul>
  403750:	4602      	mov	r2, r0
  403752:	460b      	mov	r3, r1
  403754:	4630      	mov	r0, r6
  403756:	4639      	mov	r1, r7
  403758:	f7ff fafc 	bl	402d54 <__aeabi_dsub>
  40375c:	f7ff ff5e 	bl	40361c <__aeabi_d2uiz>
  403760:	4623      	mov	r3, r4
  403762:	2200      	movs	r2, #0
  403764:	ea42 0200 	orr.w	r2, r2, r0
  403768:	4610      	mov	r0, r2
  40376a:	4619      	mov	r1, r3
  40376c:	bdd0      	pop	{r4, r6, r7, pc}
  40376e:	bf00      	nop
  403770:	3df00000 	.word	0x3df00000
  403774:	41f00000 	.word	0x41f00000

00403778 <__udivmoddi4>:
  403778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40377c:	468c      	mov	ip, r1
  40377e:	460d      	mov	r5, r1
  403780:	4604      	mov	r4, r0
  403782:	9e08      	ldr	r6, [sp, #32]
  403784:	2b00      	cmp	r3, #0
  403786:	d151      	bne.n	40382c <__udivmoddi4+0xb4>
  403788:	428a      	cmp	r2, r1
  40378a:	4617      	mov	r7, r2
  40378c:	d96d      	bls.n	40386a <__udivmoddi4+0xf2>
  40378e:	fab2 fe82 	clz	lr, r2
  403792:	f1be 0f00 	cmp.w	lr, #0
  403796:	d00b      	beq.n	4037b0 <__udivmoddi4+0x38>
  403798:	f1ce 0c20 	rsb	ip, lr, #32
  40379c:	fa01 f50e 	lsl.w	r5, r1, lr
  4037a0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4037a4:	fa02 f70e 	lsl.w	r7, r2, lr
  4037a8:	ea4c 0c05 	orr.w	ip, ip, r5
  4037ac:	fa00 f40e 	lsl.w	r4, r0, lr
  4037b0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4037b4:	0c25      	lsrs	r5, r4, #16
  4037b6:	fbbc f8fa 	udiv	r8, ip, sl
  4037ba:	fa1f f987 	uxth.w	r9, r7
  4037be:	fb0a cc18 	mls	ip, sl, r8, ip
  4037c2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4037c6:	fb08 f309 	mul.w	r3, r8, r9
  4037ca:	42ab      	cmp	r3, r5
  4037cc:	d90a      	bls.n	4037e4 <__udivmoddi4+0x6c>
  4037ce:	19ed      	adds	r5, r5, r7
  4037d0:	f108 32ff 	add.w	r2, r8, #4294967295
  4037d4:	f080 8123 	bcs.w	403a1e <__udivmoddi4+0x2a6>
  4037d8:	42ab      	cmp	r3, r5
  4037da:	f240 8120 	bls.w	403a1e <__udivmoddi4+0x2a6>
  4037de:	f1a8 0802 	sub.w	r8, r8, #2
  4037e2:	443d      	add	r5, r7
  4037e4:	1aed      	subs	r5, r5, r3
  4037e6:	b2a4      	uxth	r4, r4
  4037e8:	fbb5 f0fa 	udiv	r0, r5, sl
  4037ec:	fb0a 5510 	mls	r5, sl, r0, r5
  4037f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4037f4:	fb00 f909 	mul.w	r9, r0, r9
  4037f8:	45a1      	cmp	r9, r4
  4037fa:	d909      	bls.n	403810 <__udivmoddi4+0x98>
  4037fc:	19e4      	adds	r4, r4, r7
  4037fe:	f100 33ff 	add.w	r3, r0, #4294967295
  403802:	f080 810a 	bcs.w	403a1a <__udivmoddi4+0x2a2>
  403806:	45a1      	cmp	r9, r4
  403808:	f240 8107 	bls.w	403a1a <__udivmoddi4+0x2a2>
  40380c:	3802      	subs	r0, #2
  40380e:	443c      	add	r4, r7
  403810:	eba4 0409 	sub.w	r4, r4, r9
  403814:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403818:	2100      	movs	r1, #0
  40381a:	2e00      	cmp	r6, #0
  40381c:	d061      	beq.n	4038e2 <__udivmoddi4+0x16a>
  40381e:	fa24 f40e 	lsr.w	r4, r4, lr
  403822:	2300      	movs	r3, #0
  403824:	6034      	str	r4, [r6, #0]
  403826:	6073      	str	r3, [r6, #4]
  403828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40382c:	428b      	cmp	r3, r1
  40382e:	d907      	bls.n	403840 <__udivmoddi4+0xc8>
  403830:	2e00      	cmp	r6, #0
  403832:	d054      	beq.n	4038de <__udivmoddi4+0x166>
  403834:	2100      	movs	r1, #0
  403836:	e886 0021 	stmia.w	r6, {r0, r5}
  40383a:	4608      	mov	r0, r1
  40383c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403840:	fab3 f183 	clz	r1, r3
  403844:	2900      	cmp	r1, #0
  403846:	f040 808e 	bne.w	403966 <__udivmoddi4+0x1ee>
  40384a:	42ab      	cmp	r3, r5
  40384c:	d302      	bcc.n	403854 <__udivmoddi4+0xdc>
  40384e:	4282      	cmp	r2, r0
  403850:	f200 80fa 	bhi.w	403a48 <__udivmoddi4+0x2d0>
  403854:	1a84      	subs	r4, r0, r2
  403856:	eb65 0503 	sbc.w	r5, r5, r3
  40385a:	2001      	movs	r0, #1
  40385c:	46ac      	mov	ip, r5
  40385e:	2e00      	cmp	r6, #0
  403860:	d03f      	beq.n	4038e2 <__udivmoddi4+0x16a>
  403862:	e886 1010 	stmia.w	r6, {r4, ip}
  403866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40386a:	b912      	cbnz	r2, 403872 <__udivmoddi4+0xfa>
  40386c:	2701      	movs	r7, #1
  40386e:	fbb7 f7f2 	udiv	r7, r7, r2
  403872:	fab7 fe87 	clz	lr, r7
  403876:	f1be 0f00 	cmp.w	lr, #0
  40387a:	d134      	bne.n	4038e6 <__udivmoddi4+0x16e>
  40387c:	1beb      	subs	r3, r5, r7
  40387e:	0c3a      	lsrs	r2, r7, #16
  403880:	fa1f fc87 	uxth.w	ip, r7
  403884:	2101      	movs	r1, #1
  403886:	fbb3 f8f2 	udiv	r8, r3, r2
  40388a:	0c25      	lsrs	r5, r4, #16
  40388c:	fb02 3318 	mls	r3, r2, r8, r3
  403890:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403894:	fb0c f308 	mul.w	r3, ip, r8
  403898:	42ab      	cmp	r3, r5
  40389a:	d907      	bls.n	4038ac <__udivmoddi4+0x134>
  40389c:	19ed      	adds	r5, r5, r7
  40389e:	f108 30ff 	add.w	r0, r8, #4294967295
  4038a2:	d202      	bcs.n	4038aa <__udivmoddi4+0x132>
  4038a4:	42ab      	cmp	r3, r5
  4038a6:	f200 80d1 	bhi.w	403a4c <__udivmoddi4+0x2d4>
  4038aa:	4680      	mov	r8, r0
  4038ac:	1aed      	subs	r5, r5, r3
  4038ae:	b2a3      	uxth	r3, r4
  4038b0:	fbb5 f0f2 	udiv	r0, r5, r2
  4038b4:	fb02 5510 	mls	r5, r2, r0, r5
  4038b8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4038bc:	fb0c fc00 	mul.w	ip, ip, r0
  4038c0:	45a4      	cmp	ip, r4
  4038c2:	d907      	bls.n	4038d4 <__udivmoddi4+0x15c>
  4038c4:	19e4      	adds	r4, r4, r7
  4038c6:	f100 33ff 	add.w	r3, r0, #4294967295
  4038ca:	d202      	bcs.n	4038d2 <__udivmoddi4+0x15a>
  4038cc:	45a4      	cmp	ip, r4
  4038ce:	f200 80b8 	bhi.w	403a42 <__udivmoddi4+0x2ca>
  4038d2:	4618      	mov	r0, r3
  4038d4:	eba4 040c 	sub.w	r4, r4, ip
  4038d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4038dc:	e79d      	b.n	40381a <__udivmoddi4+0xa2>
  4038de:	4631      	mov	r1, r6
  4038e0:	4630      	mov	r0, r6
  4038e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4038e6:	f1ce 0420 	rsb	r4, lr, #32
  4038ea:	fa05 f30e 	lsl.w	r3, r5, lr
  4038ee:	fa07 f70e 	lsl.w	r7, r7, lr
  4038f2:	fa20 f804 	lsr.w	r8, r0, r4
  4038f6:	0c3a      	lsrs	r2, r7, #16
  4038f8:	fa25 f404 	lsr.w	r4, r5, r4
  4038fc:	ea48 0803 	orr.w	r8, r8, r3
  403900:	fbb4 f1f2 	udiv	r1, r4, r2
  403904:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403908:	fb02 4411 	mls	r4, r2, r1, r4
  40390c:	fa1f fc87 	uxth.w	ip, r7
  403910:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403914:	fb01 f30c 	mul.w	r3, r1, ip
  403918:	42ab      	cmp	r3, r5
  40391a:	fa00 f40e 	lsl.w	r4, r0, lr
  40391e:	d909      	bls.n	403934 <__udivmoddi4+0x1bc>
  403920:	19ed      	adds	r5, r5, r7
  403922:	f101 30ff 	add.w	r0, r1, #4294967295
  403926:	f080 808a 	bcs.w	403a3e <__udivmoddi4+0x2c6>
  40392a:	42ab      	cmp	r3, r5
  40392c:	f240 8087 	bls.w	403a3e <__udivmoddi4+0x2c6>
  403930:	3902      	subs	r1, #2
  403932:	443d      	add	r5, r7
  403934:	1aeb      	subs	r3, r5, r3
  403936:	fa1f f588 	uxth.w	r5, r8
  40393a:	fbb3 f0f2 	udiv	r0, r3, r2
  40393e:	fb02 3310 	mls	r3, r2, r0, r3
  403942:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403946:	fb00 f30c 	mul.w	r3, r0, ip
  40394a:	42ab      	cmp	r3, r5
  40394c:	d907      	bls.n	40395e <__udivmoddi4+0x1e6>
  40394e:	19ed      	adds	r5, r5, r7
  403950:	f100 38ff 	add.w	r8, r0, #4294967295
  403954:	d26f      	bcs.n	403a36 <__udivmoddi4+0x2be>
  403956:	42ab      	cmp	r3, r5
  403958:	d96d      	bls.n	403a36 <__udivmoddi4+0x2be>
  40395a:	3802      	subs	r0, #2
  40395c:	443d      	add	r5, r7
  40395e:	1aeb      	subs	r3, r5, r3
  403960:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403964:	e78f      	b.n	403886 <__udivmoddi4+0x10e>
  403966:	f1c1 0720 	rsb	r7, r1, #32
  40396a:	fa22 f807 	lsr.w	r8, r2, r7
  40396e:	408b      	lsls	r3, r1
  403970:	fa05 f401 	lsl.w	r4, r5, r1
  403974:	ea48 0303 	orr.w	r3, r8, r3
  403978:	fa20 fe07 	lsr.w	lr, r0, r7
  40397c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403980:	40fd      	lsrs	r5, r7
  403982:	ea4e 0e04 	orr.w	lr, lr, r4
  403986:	fbb5 f9fc 	udiv	r9, r5, ip
  40398a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40398e:	fb0c 5519 	mls	r5, ip, r9, r5
  403992:	fa1f f883 	uxth.w	r8, r3
  403996:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40399a:	fb09 f408 	mul.w	r4, r9, r8
  40399e:	42ac      	cmp	r4, r5
  4039a0:	fa02 f201 	lsl.w	r2, r2, r1
  4039a4:	fa00 fa01 	lsl.w	sl, r0, r1
  4039a8:	d908      	bls.n	4039bc <__udivmoddi4+0x244>
  4039aa:	18ed      	adds	r5, r5, r3
  4039ac:	f109 30ff 	add.w	r0, r9, #4294967295
  4039b0:	d243      	bcs.n	403a3a <__udivmoddi4+0x2c2>
  4039b2:	42ac      	cmp	r4, r5
  4039b4:	d941      	bls.n	403a3a <__udivmoddi4+0x2c2>
  4039b6:	f1a9 0902 	sub.w	r9, r9, #2
  4039ba:	441d      	add	r5, r3
  4039bc:	1b2d      	subs	r5, r5, r4
  4039be:	fa1f fe8e 	uxth.w	lr, lr
  4039c2:	fbb5 f0fc 	udiv	r0, r5, ip
  4039c6:	fb0c 5510 	mls	r5, ip, r0, r5
  4039ca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4039ce:	fb00 f808 	mul.w	r8, r0, r8
  4039d2:	45a0      	cmp	r8, r4
  4039d4:	d907      	bls.n	4039e6 <__udivmoddi4+0x26e>
  4039d6:	18e4      	adds	r4, r4, r3
  4039d8:	f100 35ff 	add.w	r5, r0, #4294967295
  4039dc:	d229      	bcs.n	403a32 <__udivmoddi4+0x2ba>
  4039de:	45a0      	cmp	r8, r4
  4039e0:	d927      	bls.n	403a32 <__udivmoddi4+0x2ba>
  4039e2:	3802      	subs	r0, #2
  4039e4:	441c      	add	r4, r3
  4039e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4039ea:	eba4 0408 	sub.w	r4, r4, r8
  4039ee:	fba0 8902 	umull	r8, r9, r0, r2
  4039f2:	454c      	cmp	r4, r9
  4039f4:	46c6      	mov	lr, r8
  4039f6:	464d      	mov	r5, r9
  4039f8:	d315      	bcc.n	403a26 <__udivmoddi4+0x2ae>
  4039fa:	d012      	beq.n	403a22 <__udivmoddi4+0x2aa>
  4039fc:	b156      	cbz	r6, 403a14 <__udivmoddi4+0x29c>
  4039fe:	ebba 030e 	subs.w	r3, sl, lr
  403a02:	eb64 0405 	sbc.w	r4, r4, r5
  403a06:	fa04 f707 	lsl.w	r7, r4, r7
  403a0a:	40cb      	lsrs	r3, r1
  403a0c:	431f      	orrs	r7, r3
  403a0e:	40cc      	lsrs	r4, r1
  403a10:	6037      	str	r7, [r6, #0]
  403a12:	6074      	str	r4, [r6, #4]
  403a14:	2100      	movs	r1, #0
  403a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a1a:	4618      	mov	r0, r3
  403a1c:	e6f8      	b.n	403810 <__udivmoddi4+0x98>
  403a1e:	4690      	mov	r8, r2
  403a20:	e6e0      	b.n	4037e4 <__udivmoddi4+0x6c>
  403a22:	45c2      	cmp	sl, r8
  403a24:	d2ea      	bcs.n	4039fc <__udivmoddi4+0x284>
  403a26:	ebb8 0e02 	subs.w	lr, r8, r2
  403a2a:	eb69 0503 	sbc.w	r5, r9, r3
  403a2e:	3801      	subs	r0, #1
  403a30:	e7e4      	b.n	4039fc <__udivmoddi4+0x284>
  403a32:	4628      	mov	r0, r5
  403a34:	e7d7      	b.n	4039e6 <__udivmoddi4+0x26e>
  403a36:	4640      	mov	r0, r8
  403a38:	e791      	b.n	40395e <__udivmoddi4+0x1e6>
  403a3a:	4681      	mov	r9, r0
  403a3c:	e7be      	b.n	4039bc <__udivmoddi4+0x244>
  403a3e:	4601      	mov	r1, r0
  403a40:	e778      	b.n	403934 <__udivmoddi4+0x1bc>
  403a42:	3802      	subs	r0, #2
  403a44:	443c      	add	r4, r7
  403a46:	e745      	b.n	4038d4 <__udivmoddi4+0x15c>
  403a48:	4608      	mov	r0, r1
  403a4a:	e708      	b.n	40385e <__udivmoddi4+0xe6>
  403a4c:	f1a8 0802 	sub.w	r8, r8, #2
  403a50:	443d      	add	r5, r7
  403a52:	e72b      	b.n	4038ac <__udivmoddi4+0x134>

00403a54 <__aeabi_idiv0>:
  403a54:	4770      	bx	lr
  403a56:	bf00      	nop

00403a58 <__errno>:
  403a58:	4b01      	ldr	r3, [pc, #4]	; (403a60 <__errno+0x8>)
  403a5a:	6818      	ldr	r0, [r3, #0]
  403a5c:	4770      	bx	lr
  403a5e:	bf00      	nop
  403a60:	20000010 	.word	0x20000010

00403a64 <__libc_init_array>:
  403a64:	b570      	push	{r4, r5, r6, lr}
  403a66:	4e0f      	ldr	r6, [pc, #60]	; (403aa4 <__libc_init_array+0x40>)
  403a68:	4d0f      	ldr	r5, [pc, #60]	; (403aa8 <__libc_init_array+0x44>)
  403a6a:	1b76      	subs	r6, r6, r5
  403a6c:	10b6      	asrs	r6, r6, #2
  403a6e:	bf18      	it	ne
  403a70:	2400      	movne	r4, #0
  403a72:	d005      	beq.n	403a80 <__libc_init_array+0x1c>
  403a74:	3401      	adds	r4, #1
  403a76:	f855 3b04 	ldr.w	r3, [r5], #4
  403a7a:	4798      	blx	r3
  403a7c:	42a6      	cmp	r6, r4
  403a7e:	d1f9      	bne.n	403a74 <__libc_init_array+0x10>
  403a80:	4e0a      	ldr	r6, [pc, #40]	; (403aac <__libc_init_array+0x48>)
  403a82:	4d0b      	ldr	r5, [pc, #44]	; (403ab0 <__libc_init_array+0x4c>)
  403a84:	1b76      	subs	r6, r6, r5
  403a86:	f002 ff0f 	bl	4068a8 <_init>
  403a8a:	10b6      	asrs	r6, r6, #2
  403a8c:	bf18      	it	ne
  403a8e:	2400      	movne	r4, #0
  403a90:	d006      	beq.n	403aa0 <__libc_init_array+0x3c>
  403a92:	3401      	adds	r4, #1
  403a94:	f855 3b04 	ldr.w	r3, [r5], #4
  403a98:	4798      	blx	r3
  403a9a:	42a6      	cmp	r6, r4
  403a9c:	d1f9      	bne.n	403a92 <__libc_init_array+0x2e>
  403a9e:	bd70      	pop	{r4, r5, r6, pc}
  403aa0:	bd70      	pop	{r4, r5, r6, pc}
  403aa2:	bf00      	nop
  403aa4:	004068b4 	.word	0x004068b4
  403aa8:	004068b4 	.word	0x004068b4
  403aac:	004068bc 	.word	0x004068bc
  403ab0:	004068b4 	.word	0x004068b4

00403ab4 <iprintf>:
  403ab4:	b40f      	push	{r0, r1, r2, r3}
  403ab6:	b500      	push	{lr}
  403ab8:	4907      	ldr	r1, [pc, #28]	; (403ad8 <iprintf+0x24>)
  403aba:	b083      	sub	sp, #12
  403abc:	ab04      	add	r3, sp, #16
  403abe:	6808      	ldr	r0, [r1, #0]
  403ac0:	f853 2b04 	ldr.w	r2, [r3], #4
  403ac4:	6881      	ldr	r1, [r0, #8]
  403ac6:	9301      	str	r3, [sp, #4]
  403ac8:	f000 f9e8 	bl	403e9c <_vfiprintf_r>
  403acc:	b003      	add	sp, #12
  403ace:	f85d eb04 	ldr.w	lr, [sp], #4
  403ad2:	b004      	add	sp, #16
  403ad4:	4770      	bx	lr
  403ad6:	bf00      	nop
  403ad8:	20000010 	.word	0x20000010

00403adc <memset>:
  403adc:	b470      	push	{r4, r5, r6}
  403ade:	0786      	lsls	r6, r0, #30
  403ae0:	d046      	beq.n	403b70 <memset+0x94>
  403ae2:	1e54      	subs	r4, r2, #1
  403ae4:	2a00      	cmp	r2, #0
  403ae6:	d041      	beq.n	403b6c <memset+0x90>
  403ae8:	b2ca      	uxtb	r2, r1
  403aea:	4603      	mov	r3, r0
  403aec:	e002      	b.n	403af4 <memset+0x18>
  403aee:	f114 34ff 	adds.w	r4, r4, #4294967295
  403af2:	d33b      	bcc.n	403b6c <memset+0x90>
  403af4:	f803 2b01 	strb.w	r2, [r3], #1
  403af8:	079d      	lsls	r5, r3, #30
  403afa:	d1f8      	bne.n	403aee <memset+0x12>
  403afc:	2c03      	cmp	r4, #3
  403afe:	d92e      	bls.n	403b5e <memset+0x82>
  403b00:	b2cd      	uxtb	r5, r1
  403b02:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403b06:	2c0f      	cmp	r4, #15
  403b08:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403b0c:	d919      	bls.n	403b42 <memset+0x66>
  403b0e:	f103 0210 	add.w	r2, r3, #16
  403b12:	4626      	mov	r6, r4
  403b14:	3e10      	subs	r6, #16
  403b16:	2e0f      	cmp	r6, #15
  403b18:	f842 5c10 	str.w	r5, [r2, #-16]
  403b1c:	f842 5c0c 	str.w	r5, [r2, #-12]
  403b20:	f842 5c08 	str.w	r5, [r2, #-8]
  403b24:	f842 5c04 	str.w	r5, [r2, #-4]
  403b28:	f102 0210 	add.w	r2, r2, #16
  403b2c:	d8f2      	bhi.n	403b14 <memset+0x38>
  403b2e:	f1a4 0210 	sub.w	r2, r4, #16
  403b32:	f022 020f 	bic.w	r2, r2, #15
  403b36:	f004 040f 	and.w	r4, r4, #15
  403b3a:	3210      	adds	r2, #16
  403b3c:	2c03      	cmp	r4, #3
  403b3e:	4413      	add	r3, r2
  403b40:	d90d      	bls.n	403b5e <memset+0x82>
  403b42:	461e      	mov	r6, r3
  403b44:	4622      	mov	r2, r4
  403b46:	3a04      	subs	r2, #4
  403b48:	2a03      	cmp	r2, #3
  403b4a:	f846 5b04 	str.w	r5, [r6], #4
  403b4e:	d8fa      	bhi.n	403b46 <memset+0x6a>
  403b50:	1f22      	subs	r2, r4, #4
  403b52:	f022 0203 	bic.w	r2, r2, #3
  403b56:	3204      	adds	r2, #4
  403b58:	4413      	add	r3, r2
  403b5a:	f004 0403 	and.w	r4, r4, #3
  403b5e:	b12c      	cbz	r4, 403b6c <memset+0x90>
  403b60:	b2c9      	uxtb	r1, r1
  403b62:	441c      	add	r4, r3
  403b64:	f803 1b01 	strb.w	r1, [r3], #1
  403b68:	429c      	cmp	r4, r3
  403b6a:	d1fb      	bne.n	403b64 <memset+0x88>
  403b6c:	bc70      	pop	{r4, r5, r6}
  403b6e:	4770      	bx	lr
  403b70:	4614      	mov	r4, r2
  403b72:	4603      	mov	r3, r0
  403b74:	e7c2      	b.n	403afc <memset+0x20>
  403b76:	bf00      	nop

00403b78 <setbuf>:
  403b78:	2900      	cmp	r1, #0
  403b7a:	bf0c      	ite	eq
  403b7c:	2202      	moveq	r2, #2
  403b7e:	2200      	movne	r2, #0
  403b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403b84:	f000 b800 	b.w	403b88 <setvbuf>

00403b88 <setvbuf>:
  403b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403b8c:	4c61      	ldr	r4, [pc, #388]	; (403d14 <setvbuf+0x18c>)
  403b8e:	6825      	ldr	r5, [r4, #0]
  403b90:	b083      	sub	sp, #12
  403b92:	4604      	mov	r4, r0
  403b94:	460f      	mov	r7, r1
  403b96:	4690      	mov	r8, r2
  403b98:	461e      	mov	r6, r3
  403b9a:	b115      	cbz	r5, 403ba2 <setvbuf+0x1a>
  403b9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403b9e:	2b00      	cmp	r3, #0
  403ba0:	d064      	beq.n	403c6c <setvbuf+0xe4>
  403ba2:	f1b8 0f02 	cmp.w	r8, #2
  403ba6:	d006      	beq.n	403bb6 <setvbuf+0x2e>
  403ba8:	f1b8 0f01 	cmp.w	r8, #1
  403bac:	f200 809f 	bhi.w	403cee <setvbuf+0x166>
  403bb0:	2e00      	cmp	r6, #0
  403bb2:	f2c0 809c 	blt.w	403cee <setvbuf+0x166>
  403bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403bb8:	07d8      	lsls	r0, r3, #31
  403bba:	d534      	bpl.n	403c26 <setvbuf+0x9e>
  403bbc:	4621      	mov	r1, r4
  403bbe:	4628      	mov	r0, r5
  403bc0:	f001 f90a 	bl	404dd8 <_fflush_r>
  403bc4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403bc6:	b141      	cbz	r1, 403bda <setvbuf+0x52>
  403bc8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403bcc:	4299      	cmp	r1, r3
  403bce:	d002      	beq.n	403bd6 <setvbuf+0x4e>
  403bd0:	4628      	mov	r0, r5
  403bd2:	f001 fa7f 	bl	4050d4 <_free_r>
  403bd6:	2300      	movs	r3, #0
  403bd8:	6323      	str	r3, [r4, #48]	; 0x30
  403bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403bde:	2200      	movs	r2, #0
  403be0:	61a2      	str	r2, [r4, #24]
  403be2:	6062      	str	r2, [r4, #4]
  403be4:	061a      	lsls	r2, r3, #24
  403be6:	d43a      	bmi.n	403c5e <setvbuf+0xd6>
  403be8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403bec:	f023 0303 	bic.w	r3, r3, #3
  403bf0:	f1b8 0f02 	cmp.w	r8, #2
  403bf4:	81a3      	strh	r3, [r4, #12]
  403bf6:	d01d      	beq.n	403c34 <setvbuf+0xac>
  403bf8:	ab01      	add	r3, sp, #4
  403bfa:	466a      	mov	r2, sp
  403bfc:	4621      	mov	r1, r4
  403bfe:	4628      	mov	r0, r5
  403c00:	f001 fd06 	bl	405610 <__swhatbuf_r>
  403c04:	89a3      	ldrh	r3, [r4, #12]
  403c06:	4318      	orrs	r0, r3
  403c08:	81a0      	strh	r0, [r4, #12]
  403c0a:	2e00      	cmp	r6, #0
  403c0c:	d132      	bne.n	403c74 <setvbuf+0xec>
  403c0e:	9e00      	ldr	r6, [sp, #0]
  403c10:	4630      	mov	r0, r6
  403c12:	f001 fd75 	bl	405700 <malloc>
  403c16:	4607      	mov	r7, r0
  403c18:	2800      	cmp	r0, #0
  403c1a:	d06b      	beq.n	403cf4 <setvbuf+0x16c>
  403c1c:	89a3      	ldrh	r3, [r4, #12]
  403c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403c22:	81a3      	strh	r3, [r4, #12]
  403c24:	e028      	b.n	403c78 <setvbuf+0xf0>
  403c26:	89a3      	ldrh	r3, [r4, #12]
  403c28:	0599      	lsls	r1, r3, #22
  403c2a:	d4c7      	bmi.n	403bbc <setvbuf+0x34>
  403c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c2e:	f001 fceb 	bl	405608 <__retarget_lock_acquire_recursive>
  403c32:	e7c3      	b.n	403bbc <setvbuf+0x34>
  403c34:	2500      	movs	r5, #0
  403c36:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403c38:	2600      	movs	r6, #0
  403c3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403c3e:	f043 0302 	orr.w	r3, r3, #2
  403c42:	2001      	movs	r0, #1
  403c44:	60a6      	str	r6, [r4, #8]
  403c46:	07ce      	lsls	r6, r1, #31
  403c48:	81a3      	strh	r3, [r4, #12]
  403c4a:	6022      	str	r2, [r4, #0]
  403c4c:	6122      	str	r2, [r4, #16]
  403c4e:	6160      	str	r0, [r4, #20]
  403c50:	d401      	bmi.n	403c56 <setvbuf+0xce>
  403c52:	0598      	lsls	r0, r3, #22
  403c54:	d53e      	bpl.n	403cd4 <setvbuf+0x14c>
  403c56:	4628      	mov	r0, r5
  403c58:	b003      	add	sp, #12
  403c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403c5e:	6921      	ldr	r1, [r4, #16]
  403c60:	4628      	mov	r0, r5
  403c62:	f001 fa37 	bl	4050d4 <_free_r>
  403c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c6a:	e7bd      	b.n	403be8 <setvbuf+0x60>
  403c6c:	4628      	mov	r0, r5
  403c6e:	f001 f90b 	bl	404e88 <__sinit>
  403c72:	e796      	b.n	403ba2 <setvbuf+0x1a>
  403c74:	2f00      	cmp	r7, #0
  403c76:	d0cb      	beq.n	403c10 <setvbuf+0x88>
  403c78:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403c7a:	2b00      	cmp	r3, #0
  403c7c:	d033      	beq.n	403ce6 <setvbuf+0x15e>
  403c7e:	9b00      	ldr	r3, [sp, #0]
  403c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403c84:	6027      	str	r7, [r4, #0]
  403c86:	429e      	cmp	r6, r3
  403c88:	bf1c      	itt	ne
  403c8a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403c8e:	81a2      	strhne	r2, [r4, #12]
  403c90:	f1b8 0f01 	cmp.w	r8, #1
  403c94:	bf04      	itt	eq
  403c96:	f042 0201 	orreq.w	r2, r2, #1
  403c9a:	81a2      	strheq	r2, [r4, #12]
  403c9c:	b292      	uxth	r2, r2
  403c9e:	f012 0308 	ands.w	r3, r2, #8
  403ca2:	6127      	str	r7, [r4, #16]
  403ca4:	6166      	str	r6, [r4, #20]
  403ca6:	d00e      	beq.n	403cc6 <setvbuf+0x13e>
  403ca8:	07d1      	lsls	r1, r2, #31
  403caa:	d51a      	bpl.n	403ce2 <setvbuf+0x15a>
  403cac:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403cae:	4276      	negs	r6, r6
  403cb0:	2300      	movs	r3, #0
  403cb2:	f015 0501 	ands.w	r5, r5, #1
  403cb6:	61a6      	str	r6, [r4, #24]
  403cb8:	60a3      	str	r3, [r4, #8]
  403cba:	d009      	beq.n	403cd0 <setvbuf+0x148>
  403cbc:	2500      	movs	r5, #0
  403cbe:	4628      	mov	r0, r5
  403cc0:	b003      	add	sp, #12
  403cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403cc6:	60a3      	str	r3, [r4, #8]
  403cc8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403cca:	f015 0501 	ands.w	r5, r5, #1
  403cce:	d1f5      	bne.n	403cbc <setvbuf+0x134>
  403cd0:	0593      	lsls	r3, r2, #22
  403cd2:	d4c0      	bmi.n	403c56 <setvbuf+0xce>
  403cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403cd6:	f001 fc99 	bl	40560c <__retarget_lock_release_recursive>
  403cda:	4628      	mov	r0, r5
  403cdc:	b003      	add	sp, #12
  403cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403ce2:	60a6      	str	r6, [r4, #8]
  403ce4:	e7f0      	b.n	403cc8 <setvbuf+0x140>
  403ce6:	4628      	mov	r0, r5
  403ce8:	f001 f8ce 	bl	404e88 <__sinit>
  403cec:	e7c7      	b.n	403c7e <setvbuf+0xf6>
  403cee:	f04f 35ff 	mov.w	r5, #4294967295
  403cf2:	e7b0      	b.n	403c56 <setvbuf+0xce>
  403cf4:	f8dd 9000 	ldr.w	r9, [sp]
  403cf8:	45b1      	cmp	r9, r6
  403cfa:	d004      	beq.n	403d06 <setvbuf+0x17e>
  403cfc:	4648      	mov	r0, r9
  403cfe:	f001 fcff 	bl	405700 <malloc>
  403d02:	4607      	mov	r7, r0
  403d04:	b920      	cbnz	r0, 403d10 <setvbuf+0x188>
  403d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d0a:	f04f 35ff 	mov.w	r5, #4294967295
  403d0e:	e792      	b.n	403c36 <setvbuf+0xae>
  403d10:	464e      	mov	r6, r9
  403d12:	e783      	b.n	403c1c <setvbuf+0x94>
  403d14:	20000010 	.word	0x20000010
	...

00403d40 <strlen>:
  403d40:	f890 f000 	pld	[r0]
  403d44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403d48:	f020 0107 	bic.w	r1, r0, #7
  403d4c:	f06f 0c00 	mvn.w	ip, #0
  403d50:	f010 0407 	ands.w	r4, r0, #7
  403d54:	f891 f020 	pld	[r1, #32]
  403d58:	f040 8049 	bne.w	403dee <strlen+0xae>
  403d5c:	f04f 0400 	mov.w	r4, #0
  403d60:	f06f 0007 	mvn.w	r0, #7
  403d64:	e9d1 2300 	ldrd	r2, r3, [r1]
  403d68:	f891 f040 	pld	[r1, #64]	; 0x40
  403d6c:	f100 0008 	add.w	r0, r0, #8
  403d70:	fa82 f24c 	uadd8	r2, r2, ip
  403d74:	faa4 f28c 	sel	r2, r4, ip
  403d78:	fa83 f34c 	uadd8	r3, r3, ip
  403d7c:	faa2 f38c 	sel	r3, r2, ip
  403d80:	bb4b      	cbnz	r3, 403dd6 <strlen+0x96>
  403d82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403d86:	fa82 f24c 	uadd8	r2, r2, ip
  403d8a:	f100 0008 	add.w	r0, r0, #8
  403d8e:	faa4 f28c 	sel	r2, r4, ip
  403d92:	fa83 f34c 	uadd8	r3, r3, ip
  403d96:	faa2 f38c 	sel	r3, r2, ip
  403d9a:	b9e3      	cbnz	r3, 403dd6 <strlen+0x96>
  403d9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403da0:	fa82 f24c 	uadd8	r2, r2, ip
  403da4:	f100 0008 	add.w	r0, r0, #8
  403da8:	faa4 f28c 	sel	r2, r4, ip
  403dac:	fa83 f34c 	uadd8	r3, r3, ip
  403db0:	faa2 f38c 	sel	r3, r2, ip
  403db4:	b97b      	cbnz	r3, 403dd6 <strlen+0x96>
  403db6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403dba:	f101 0120 	add.w	r1, r1, #32
  403dbe:	fa82 f24c 	uadd8	r2, r2, ip
  403dc2:	f100 0008 	add.w	r0, r0, #8
  403dc6:	faa4 f28c 	sel	r2, r4, ip
  403dca:	fa83 f34c 	uadd8	r3, r3, ip
  403dce:	faa2 f38c 	sel	r3, r2, ip
  403dd2:	2b00      	cmp	r3, #0
  403dd4:	d0c6      	beq.n	403d64 <strlen+0x24>
  403dd6:	2a00      	cmp	r2, #0
  403dd8:	bf04      	itt	eq
  403dda:	3004      	addeq	r0, #4
  403ddc:	461a      	moveq	r2, r3
  403dde:	ba12      	rev	r2, r2
  403de0:	fab2 f282 	clz	r2, r2
  403de4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403de8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403dec:	4770      	bx	lr
  403dee:	e9d1 2300 	ldrd	r2, r3, [r1]
  403df2:	f004 0503 	and.w	r5, r4, #3
  403df6:	f1c4 0000 	rsb	r0, r4, #0
  403dfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403dfe:	f014 0f04 	tst.w	r4, #4
  403e02:	f891 f040 	pld	[r1, #64]	; 0x40
  403e06:	fa0c f505 	lsl.w	r5, ip, r5
  403e0a:	ea62 0205 	orn	r2, r2, r5
  403e0e:	bf1c      	itt	ne
  403e10:	ea63 0305 	ornne	r3, r3, r5
  403e14:	4662      	movne	r2, ip
  403e16:	f04f 0400 	mov.w	r4, #0
  403e1a:	e7a9      	b.n	403d70 <strlen+0x30>

00403e1c <__sprint_r.part.0>:
  403e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403e22:	049c      	lsls	r4, r3, #18
  403e24:	4693      	mov	fp, r2
  403e26:	d52f      	bpl.n	403e88 <__sprint_r.part.0+0x6c>
  403e28:	6893      	ldr	r3, [r2, #8]
  403e2a:	6812      	ldr	r2, [r2, #0]
  403e2c:	b353      	cbz	r3, 403e84 <__sprint_r.part.0+0x68>
  403e2e:	460e      	mov	r6, r1
  403e30:	4607      	mov	r7, r0
  403e32:	f102 0908 	add.w	r9, r2, #8
  403e36:	e919 0420 	ldmdb	r9, {r5, sl}
  403e3a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  403e3e:	d017      	beq.n	403e70 <__sprint_r.part.0+0x54>
  403e40:	3d04      	subs	r5, #4
  403e42:	2400      	movs	r4, #0
  403e44:	e001      	b.n	403e4a <__sprint_r.part.0+0x2e>
  403e46:	45a0      	cmp	r8, r4
  403e48:	d010      	beq.n	403e6c <__sprint_r.part.0+0x50>
  403e4a:	4632      	mov	r2, r6
  403e4c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403e50:	4638      	mov	r0, r7
  403e52:	f001 f8bb 	bl	404fcc <_fputwc_r>
  403e56:	1c43      	adds	r3, r0, #1
  403e58:	f104 0401 	add.w	r4, r4, #1
  403e5c:	d1f3      	bne.n	403e46 <__sprint_r.part.0+0x2a>
  403e5e:	2300      	movs	r3, #0
  403e60:	f8cb 3008 	str.w	r3, [fp, #8]
  403e64:	f8cb 3004 	str.w	r3, [fp, #4]
  403e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e6c:	f8db 3008 	ldr.w	r3, [fp, #8]
  403e70:	f02a 0a03 	bic.w	sl, sl, #3
  403e74:	eba3 030a 	sub.w	r3, r3, sl
  403e78:	f8cb 3008 	str.w	r3, [fp, #8]
  403e7c:	f109 0908 	add.w	r9, r9, #8
  403e80:	2b00      	cmp	r3, #0
  403e82:	d1d8      	bne.n	403e36 <__sprint_r.part.0+0x1a>
  403e84:	2000      	movs	r0, #0
  403e86:	e7ea      	b.n	403e5e <__sprint_r.part.0+0x42>
  403e88:	f001 fa0a 	bl	4052a0 <__sfvwrite_r>
  403e8c:	2300      	movs	r3, #0
  403e8e:	f8cb 3008 	str.w	r3, [fp, #8]
  403e92:	f8cb 3004 	str.w	r3, [fp, #4]
  403e96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e9a:	bf00      	nop

00403e9c <_vfiprintf_r>:
  403e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ea0:	b0ad      	sub	sp, #180	; 0xb4
  403ea2:	461d      	mov	r5, r3
  403ea4:	468b      	mov	fp, r1
  403ea6:	4690      	mov	r8, r2
  403ea8:	9307      	str	r3, [sp, #28]
  403eaa:	9006      	str	r0, [sp, #24]
  403eac:	b118      	cbz	r0, 403eb6 <_vfiprintf_r+0x1a>
  403eae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403eb0:	2b00      	cmp	r3, #0
  403eb2:	f000 80f3 	beq.w	40409c <_vfiprintf_r+0x200>
  403eb6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403eba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403ebe:	07df      	lsls	r7, r3, #31
  403ec0:	b281      	uxth	r1, r0
  403ec2:	d402      	bmi.n	403eca <_vfiprintf_r+0x2e>
  403ec4:	058e      	lsls	r6, r1, #22
  403ec6:	f140 80fc 	bpl.w	4040c2 <_vfiprintf_r+0x226>
  403eca:	048c      	lsls	r4, r1, #18
  403ecc:	d40a      	bmi.n	403ee4 <_vfiprintf_r+0x48>
  403ece:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403ed2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403eda:	f8ab 100c 	strh.w	r1, [fp, #12]
  403ede:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403ee2:	b289      	uxth	r1, r1
  403ee4:	0708      	lsls	r0, r1, #28
  403ee6:	f140 80b3 	bpl.w	404050 <_vfiprintf_r+0x1b4>
  403eea:	f8db 3010 	ldr.w	r3, [fp, #16]
  403eee:	2b00      	cmp	r3, #0
  403ef0:	f000 80ae 	beq.w	404050 <_vfiprintf_r+0x1b4>
  403ef4:	f001 031a 	and.w	r3, r1, #26
  403ef8:	2b0a      	cmp	r3, #10
  403efa:	f000 80b5 	beq.w	404068 <_vfiprintf_r+0x1cc>
  403efe:	2300      	movs	r3, #0
  403f00:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403f04:	930b      	str	r3, [sp, #44]	; 0x2c
  403f06:	9311      	str	r3, [sp, #68]	; 0x44
  403f08:	9310      	str	r3, [sp, #64]	; 0x40
  403f0a:	9303      	str	r3, [sp, #12]
  403f0c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403f10:	46ca      	mov	sl, r9
  403f12:	f8cd b010 	str.w	fp, [sp, #16]
  403f16:	f898 3000 	ldrb.w	r3, [r8]
  403f1a:	4644      	mov	r4, r8
  403f1c:	b1fb      	cbz	r3, 403f5e <_vfiprintf_r+0xc2>
  403f1e:	2b25      	cmp	r3, #37	; 0x25
  403f20:	d102      	bne.n	403f28 <_vfiprintf_r+0x8c>
  403f22:	e01c      	b.n	403f5e <_vfiprintf_r+0xc2>
  403f24:	2b25      	cmp	r3, #37	; 0x25
  403f26:	d003      	beq.n	403f30 <_vfiprintf_r+0x94>
  403f28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403f2c:	2b00      	cmp	r3, #0
  403f2e:	d1f9      	bne.n	403f24 <_vfiprintf_r+0x88>
  403f30:	eba4 0508 	sub.w	r5, r4, r8
  403f34:	b19d      	cbz	r5, 403f5e <_vfiprintf_r+0xc2>
  403f36:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403f38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f3a:	f8ca 8000 	str.w	r8, [sl]
  403f3e:	3301      	adds	r3, #1
  403f40:	442a      	add	r2, r5
  403f42:	2b07      	cmp	r3, #7
  403f44:	f8ca 5004 	str.w	r5, [sl, #4]
  403f48:	9211      	str	r2, [sp, #68]	; 0x44
  403f4a:	9310      	str	r3, [sp, #64]	; 0x40
  403f4c:	dd7a      	ble.n	404044 <_vfiprintf_r+0x1a8>
  403f4e:	2a00      	cmp	r2, #0
  403f50:	f040 84b0 	bne.w	4048b4 <_vfiprintf_r+0xa18>
  403f54:	9b03      	ldr	r3, [sp, #12]
  403f56:	9210      	str	r2, [sp, #64]	; 0x40
  403f58:	442b      	add	r3, r5
  403f5a:	46ca      	mov	sl, r9
  403f5c:	9303      	str	r3, [sp, #12]
  403f5e:	7823      	ldrb	r3, [r4, #0]
  403f60:	2b00      	cmp	r3, #0
  403f62:	f000 83e0 	beq.w	404726 <_vfiprintf_r+0x88a>
  403f66:	2000      	movs	r0, #0
  403f68:	f04f 0300 	mov.w	r3, #0
  403f6c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403f70:	f104 0801 	add.w	r8, r4, #1
  403f74:	7862      	ldrb	r2, [r4, #1]
  403f76:	4605      	mov	r5, r0
  403f78:	4606      	mov	r6, r0
  403f7a:	4603      	mov	r3, r0
  403f7c:	f04f 34ff 	mov.w	r4, #4294967295
  403f80:	f108 0801 	add.w	r8, r8, #1
  403f84:	f1a2 0120 	sub.w	r1, r2, #32
  403f88:	2958      	cmp	r1, #88	; 0x58
  403f8a:	f200 82de 	bhi.w	40454a <_vfiprintf_r+0x6ae>
  403f8e:	e8df f011 	tbh	[pc, r1, lsl #1]
  403f92:	0221      	.short	0x0221
  403f94:	02dc02dc 	.word	0x02dc02dc
  403f98:	02dc0229 	.word	0x02dc0229
  403f9c:	02dc02dc 	.word	0x02dc02dc
  403fa0:	02dc02dc 	.word	0x02dc02dc
  403fa4:	028902dc 	.word	0x028902dc
  403fa8:	02dc0295 	.word	0x02dc0295
  403fac:	02bd00a2 	.word	0x02bd00a2
  403fb0:	019f02dc 	.word	0x019f02dc
  403fb4:	01a401a4 	.word	0x01a401a4
  403fb8:	01a401a4 	.word	0x01a401a4
  403fbc:	01a401a4 	.word	0x01a401a4
  403fc0:	01a401a4 	.word	0x01a401a4
  403fc4:	02dc01a4 	.word	0x02dc01a4
  403fc8:	02dc02dc 	.word	0x02dc02dc
  403fcc:	02dc02dc 	.word	0x02dc02dc
  403fd0:	02dc02dc 	.word	0x02dc02dc
  403fd4:	02dc02dc 	.word	0x02dc02dc
  403fd8:	01b202dc 	.word	0x01b202dc
  403fdc:	02dc02dc 	.word	0x02dc02dc
  403fe0:	02dc02dc 	.word	0x02dc02dc
  403fe4:	02dc02dc 	.word	0x02dc02dc
  403fe8:	02dc02dc 	.word	0x02dc02dc
  403fec:	02dc02dc 	.word	0x02dc02dc
  403ff0:	02dc0197 	.word	0x02dc0197
  403ff4:	02dc02dc 	.word	0x02dc02dc
  403ff8:	02dc02dc 	.word	0x02dc02dc
  403ffc:	02dc019b 	.word	0x02dc019b
  404000:	025302dc 	.word	0x025302dc
  404004:	02dc02dc 	.word	0x02dc02dc
  404008:	02dc02dc 	.word	0x02dc02dc
  40400c:	02dc02dc 	.word	0x02dc02dc
  404010:	02dc02dc 	.word	0x02dc02dc
  404014:	02dc02dc 	.word	0x02dc02dc
  404018:	021b025a 	.word	0x021b025a
  40401c:	02dc02dc 	.word	0x02dc02dc
  404020:	026e02dc 	.word	0x026e02dc
  404024:	02dc021b 	.word	0x02dc021b
  404028:	027302dc 	.word	0x027302dc
  40402c:	01f502dc 	.word	0x01f502dc
  404030:	02090182 	.word	0x02090182
  404034:	02dc02d7 	.word	0x02dc02d7
  404038:	02dc029a 	.word	0x02dc029a
  40403c:	02dc00a7 	.word	0x02dc00a7
  404040:	022e02dc 	.word	0x022e02dc
  404044:	f10a 0a08 	add.w	sl, sl, #8
  404048:	9b03      	ldr	r3, [sp, #12]
  40404a:	442b      	add	r3, r5
  40404c:	9303      	str	r3, [sp, #12]
  40404e:	e786      	b.n	403f5e <_vfiprintf_r+0xc2>
  404050:	4659      	mov	r1, fp
  404052:	9806      	ldr	r0, [sp, #24]
  404054:	f000 fdac 	bl	404bb0 <__swsetup_r>
  404058:	bb18      	cbnz	r0, 4040a2 <_vfiprintf_r+0x206>
  40405a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40405e:	f001 031a 	and.w	r3, r1, #26
  404062:	2b0a      	cmp	r3, #10
  404064:	f47f af4b 	bne.w	403efe <_vfiprintf_r+0x62>
  404068:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40406c:	2b00      	cmp	r3, #0
  40406e:	f6ff af46 	blt.w	403efe <_vfiprintf_r+0x62>
  404072:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404076:	07db      	lsls	r3, r3, #31
  404078:	d405      	bmi.n	404086 <_vfiprintf_r+0x1ea>
  40407a:	058f      	lsls	r7, r1, #22
  40407c:	d403      	bmi.n	404086 <_vfiprintf_r+0x1ea>
  40407e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404082:	f001 fac3 	bl	40560c <__retarget_lock_release_recursive>
  404086:	462b      	mov	r3, r5
  404088:	4642      	mov	r2, r8
  40408a:	4659      	mov	r1, fp
  40408c:	9806      	ldr	r0, [sp, #24]
  40408e:	f000 fd4d 	bl	404b2c <__sbprintf>
  404092:	9003      	str	r0, [sp, #12]
  404094:	9803      	ldr	r0, [sp, #12]
  404096:	b02d      	add	sp, #180	; 0xb4
  404098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40409c:	f000 fef4 	bl	404e88 <__sinit>
  4040a0:	e709      	b.n	403eb6 <_vfiprintf_r+0x1a>
  4040a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4040a6:	07d9      	lsls	r1, r3, #31
  4040a8:	d404      	bmi.n	4040b4 <_vfiprintf_r+0x218>
  4040aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4040ae:	059a      	lsls	r2, r3, #22
  4040b0:	f140 84aa 	bpl.w	404a08 <_vfiprintf_r+0xb6c>
  4040b4:	f04f 33ff 	mov.w	r3, #4294967295
  4040b8:	9303      	str	r3, [sp, #12]
  4040ba:	9803      	ldr	r0, [sp, #12]
  4040bc:	b02d      	add	sp, #180	; 0xb4
  4040be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4040c6:	f001 fa9f 	bl	405608 <__retarget_lock_acquire_recursive>
  4040ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4040ce:	b281      	uxth	r1, r0
  4040d0:	e6fb      	b.n	403eca <_vfiprintf_r+0x2e>
  4040d2:	4276      	negs	r6, r6
  4040d4:	9207      	str	r2, [sp, #28]
  4040d6:	f043 0304 	orr.w	r3, r3, #4
  4040da:	f898 2000 	ldrb.w	r2, [r8]
  4040de:	e74f      	b.n	403f80 <_vfiprintf_r+0xe4>
  4040e0:	9608      	str	r6, [sp, #32]
  4040e2:	069e      	lsls	r6, r3, #26
  4040e4:	f100 8450 	bmi.w	404988 <_vfiprintf_r+0xaec>
  4040e8:	9907      	ldr	r1, [sp, #28]
  4040ea:	06dd      	lsls	r5, r3, #27
  4040ec:	460a      	mov	r2, r1
  4040ee:	f100 83ef 	bmi.w	4048d0 <_vfiprintf_r+0xa34>
  4040f2:	0658      	lsls	r0, r3, #25
  4040f4:	f140 83ec 	bpl.w	4048d0 <_vfiprintf_r+0xa34>
  4040f8:	880e      	ldrh	r6, [r1, #0]
  4040fa:	3104      	adds	r1, #4
  4040fc:	2700      	movs	r7, #0
  4040fe:	2201      	movs	r2, #1
  404100:	9107      	str	r1, [sp, #28]
  404102:	f04f 0100 	mov.w	r1, #0
  404106:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40410a:	2500      	movs	r5, #0
  40410c:	1c61      	adds	r1, r4, #1
  40410e:	f000 8116 	beq.w	40433e <_vfiprintf_r+0x4a2>
  404112:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404116:	9102      	str	r1, [sp, #8]
  404118:	ea56 0107 	orrs.w	r1, r6, r7
  40411c:	f040 8114 	bne.w	404348 <_vfiprintf_r+0x4ac>
  404120:	2c00      	cmp	r4, #0
  404122:	f040 835c 	bne.w	4047de <_vfiprintf_r+0x942>
  404126:	2a00      	cmp	r2, #0
  404128:	f040 83b7 	bne.w	40489a <_vfiprintf_r+0x9fe>
  40412c:	f013 0301 	ands.w	r3, r3, #1
  404130:	9305      	str	r3, [sp, #20]
  404132:	f000 8457 	beq.w	4049e4 <_vfiprintf_r+0xb48>
  404136:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40413a:	2330      	movs	r3, #48	; 0x30
  40413c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404140:	9b05      	ldr	r3, [sp, #20]
  404142:	42a3      	cmp	r3, r4
  404144:	bfb8      	it	lt
  404146:	4623      	movlt	r3, r4
  404148:	9301      	str	r3, [sp, #4]
  40414a:	b10d      	cbz	r5, 404150 <_vfiprintf_r+0x2b4>
  40414c:	3301      	adds	r3, #1
  40414e:	9301      	str	r3, [sp, #4]
  404150:	9b02      	ldr	r3, [sp, #8]
  404152:	f013 0302 	ands.w	r3, r3, #2
  404156:	9309      	str	r3, [sp, #36]	; 0x24
  404158:	d002      	beq.n	404160 <_vfiprintf_r+0x2c4>
  40415a:	9b01      	ldr	r3, [sp, #4]
  40415c:	3302      	adds	r3, #2
  40415e:	9301      	str	r3, [sp, #4]
  404160:	9b02      	ldr	r3, [sp, #8]
  404162:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404166:	930a      	str	r3, [sp, #40]	; 0x28
  404168:	f040 8217 	bne.w	40459a <_vfiprintf_r+0x6fe>
  40416c:	9b08      	ldr	r3, [sp, #32]
  40416e:	9a01      	ldr	r2, [sp, #4]
  404170:	1a9d      	subs	r5, r3, r2
  404172:	2d00      	cmp	r5, #0
  404174:	f340 8211 	ble.w	40459a <_vfiprintf_r+0x6fe>
  404178:	2d10      	cmp	r5, #16
  40417a:	f340 8490 	ble.w	404a9e <_vfiprintf_r+0xc02>
  40417e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404180:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404182:	4ec4      	ldr	r6, [pc, #784]	; (404494 <_vfiprintf_r+0x5f8>)
  404184:	46d6      	mov	lr, sl
  404186:	2710      	movs	r7, #16
  404188:	46a2      	mov	sl, r4
  40418a:	4619      	mov	r1, r3
  40418c:	9c06      	ldr	r4, [sp, #24]
  40418e:	e007      	b.n	4041a0 <_vfiprintf_r+0x304>
  404190:	f101 0c02 	add.w	ip, r1, #2
  404194:	f10e 0e08 	add.w	lr, lr, #8
  404198:	4601      	mov	r1, r0
  40419a:	3d10      	subs	r5, #16
  40419c:	2d10      	cmp	r5, #16
  40419e:	dd11      	ble.n	4041c4 <_vfiprintf_r+0x328>
  4041a0:	1c48      	adds	r0, r1, #1
  4041a2:	3210      	adds	r2, #16
  4041a4:	2807      	cmp	r0, #7
  4041a6:	9211      	str	r2, [sp, #68]	; 0x44
  4041a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4041ac:	9010      	str	r0, [sp, #64]	; 0x40
  4041ae:	ddef      	ble.n	404190 <_vfiprintf_r+0x2f4>
  4041b0:	2a00      	cmp	r2, #0
  4041b2:	f040 81e4 	bne.w	40457e <_vfiprintf_r+0x6e2>
  4041b6:	3d10      	subs	r5, #16
  4041b8:	2d10      	cmp	r5, #16
  4041ba:	4611      	mov	r1, r2
  4041bc:	f04f 0c01 	mov.w	ip, #1
  4041c0:	46ce      	mov	lr, r9
  4041c2:	dced      	bgt.n	4041a0 <_vfiprintf_r+0x304>
  4041c4:	4654      	mov	r4, sl
  4041c6:	4661      	mov	r1, ip
  4041c8:	46f2      	mov	sl, lr
  4041ca:	442a      	add	r2, r5
  4041cc:	2907      	cmp	r1, #7
  4041ce:	9211      	str	r2, [sp, #68]	; 0x44
  4041d0:	f8ca 6000 	str.w	r6, [sl]
  4041d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4041d8:	9110      	str	r1, [sp, #64]	; 0x40
  4041da:	f300 82ec 	bgt.w	4047b6 <_vfiprintf_r+0x91a>
  4041de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4041e2:	f10a 0a08 	add.w	sl, sl, #8
  4041e6:	1c48      	adds	r0, r1, #1
  4041e8:	2d00      	cmp	r5, #0
  4041ea:	f040 81de 	bne.w	4045aa <_vfiprintf_r+0x70e>
  4041ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4041f0:	2b00      	cmp	r3, #0
  4041f2:	f000 81f8 	beq.w	4045e6 <_vfiprintf_r+0x74a>
  4041f6:	3202      	adds	r2, #2
  4041f8:	a90e      	add	r1, sp, #56	; 0x38
  4041fa:	2302      	movs	r3, #2
  4041fc:	2807      	cmp	r0, #7
  4041fe:	9211      	str	r2, [sp, #68]	; 0x44
  404200:	9010      	str	r0, [sp, #64]	; 0x40
  404202:	e88a 000a 	stmia.w	sl, {r1, r3}
  404206:	f340 81ea 	ble.w	4045de <_vfiprintf_r+0x742>
  40420a:	2a00      	cmp	r2, #0
  40420c:	f040 838c 	bne.w	404928 <_vfiprintf_r+0xa8c>
  404210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404212:	2b80      	cmp	r3, #128	; 0x80
  404214:	f04f 0001 	mov.w	r0, #1
  404218:	4611      	mov	r1, r2
  40421a:	46ca      	mov	sl, r9
  40421c:	f040 81e7 	bne.w	4045ee <_vfiprintf_r+0x752>
  404220:	9b08      	ldr	r3, [sp, #32]
  404222:	9d01      	ldr	r5, [sp, #4]
  404224:	1b5e      	subs	r6, r3, r5
  404226:	2e00      	cmp	r6, #0
  404228:	f340 81e1 	ble.w	4045ee <_vfiprintf_r+0x752>
  40422c:	2e10      	cmp	r6, #16
  40422e:	4d9a      	ldr	r5, [pc, #616]	; (404498 <_vfiprintf_r+0x5fc>)
  404230:	f340 8450 	ble.w	404ad4 <_vfiprintf_r+0xc38>
  404234:	46d4      	mov	ip, sl
  404236:	2710      	movs	r7, #16
  404238:	46a2      	mov	sl, r4
  40423a:	9c06      	ldr	r4, [sp, #24]
  40423c:	e007      	b.n	40424e <_vfiprintf_r+0x3b2>
  40423e:	f101 0e02 	add.w	lr, r1, #2
  404242:	f10c 0c08 	add.w	ip, ip, #8
  404246:	4601      	mov	r1, r0
  404248:	3e10      	subs	r6, #16
  40424a:	2e10      	cmp	r6, #16
  40424c:	dd11      	ble.n	404272 <_vfiprintf_r+0x3d6>
  40424e:	1c48      	adds	r0, r1, #1
  404250:	3210      	adds	r2, #16
  404252:	2807      	cmp	r0, #7
  404254:	9211      	str	r2, [sp, #68]	; 0x44
  404256:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40425a:	9010      	str	r0, [sp, #64]	; 0x40
  40425c:	ddef      	ble.n	40423e <_vfiprintf_r+0x3a2>
  40425e:	2a00      	cmp	r2, #0
  404260:	f040 829d 	bne.w	40479e <_vfiprintf_r+0x902>
  404264:	3e10      	subs	r6, #16
  404266:	2e10      	cmp	r6, #16
  404268:	f04f 0e01 	mov.w	lr, #1
  40426c:	4611      	mov	r1, r2
  40426e:	46cc      	mov	ip, r9
  404270:	dced      	bgt.n	40424e <_vfiprintf_r+0x3b2>
  404272:	4654      	mov	r4, sl
  404274:	46e2      	mov	sl, ip
  404276:	4432      	add	r2, r6
  404278:	f1be 0f07 	cmp.w	lr, #7
  40427c:	9211      	str	r2, [sp, #68]	; 0x44
  40427e:	e88a 0060 	stmia.w	sl, {r5, r6}
  404282:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404286:	f300 8369 	bgt.w	40495c <_vfiprintf_r+0xac0>
  40428a:	f10a 0a08 	add.w	sl, sl, #8
  40428e:	f10e 0001 	add.w	r0, lr, #1
  404292:	4671      	mov	r1, lr
  404294:	e1ab      	b.n	4045ee <_vfiprintf_r+0x752>
  404296:	9608      	str	r6, [sp, #32]
  404298:	f013 0220 	ands.w	r2, r3, #32
  40429c:	f040 838c 	bne.w	4049b8 <_vfiprintf_r+0xb1c>
  4042a0:	f013 0110 	ands.w	r1, r3, #16
  4042a4:	f040 831a 	bne.w	4048dc <_vfiprintf_r+0xa40>
  4042a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4042ac:	f000 8316 	beq.w	4048dc <_vfiprintf_r+0xa40>
  4042b0:	9807      	ldr	r0, [sp, #28]
  4042b2:	460a      	mov	r2, r1
  4042b4:	4601      	mov	r1, r0
  4042b6:	3104      	adds	r1, #4
  4042b8:	8806      	ldrh	r6, [r0, #0]
  4042ba:	9107      	str	r1, [sp, #28]
  4042bc:	2700      	movs	r7, #0
  4042be:	e720      	b.n	404102 <_vfiprintf_r+0x266>
  4042c0:	9608      	str	r6, [sp, #32]
  4042c2:	f043 0310 	orr.w	r3, r3, #16
  4042c6:	e7e7      	b.n	404298 <_vfiprintf_r+0x3fc>
  4042c8:	9608      	str	r6, [sp, #32]
  4042ca:	f043 0310 	orr.w	r3, r3, #16
  4042ce:	e708      	b.n	4040e2 <_vfiprintf_r+0x246>
  4042d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4042d4:	f898 2000 	ldrb.w	r2, [r8]
  4042d8:	e652      	b.n	403f80 <_vfiprintf_r+0xe4>
  4042da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4042de:	2600      	movs	r6, #0
  4042e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4042e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4042e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4042ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4042f0:	2909      	cmp	r1, #9
  4042f2:	d9f5      	bls.n	4042e0 <_vfiprintf_r+0x444>
  4042f4:	e646      	b.n	403f84 <_vfiprintf_r+0xe8>
  4042f6:	9608      	str	r6, [sp, #32]
  4042f8:	2800      	cmp	r0, #0
  4042fa:	f040 8408 	bne.w	404b0e <_vfiprintf_r+0xc72>
  4042fe:	f043 0310 	orr.w	r3, r3, #16
  404302:	069e      	lsls	r6, r3, #26
  404304:	f100 834c 	bmi.w	4049a0 <_vfiprintf_r+0xb04>
  404308:	06dd      	lsls	r5, r3, #27
  40430a:	f100 82f3 	bmi.w	4048f4 <_vfiprintf_r+0xa58>
  40430e:	0658      	lsls	r0, r3, #25
  404310:	f140 82f0 	bpl.w	4048f4 <_vfiprintf_r+0xa58>
  404314:	9d07      	ldr	r5, [sp, #28]
  404316:	f9b5 6000 	ldrsh.w	r6, [r5]
  40431a:	462a      	mov	r2, r5
  40431c:	17f7      	asrs	r7, r6, #31
  40431e:	3204      	adds	r2, #4
  404320:	4630      	mov	r0, r6
  404322:	4639      	mov	r1, r7
  404324:	9207      	str	r2, [sp, #28]
  404326:	2800      	cmp	r0, #0
  404328:	f171 0200 	sbcs.w	r2, r1, #0
  40432c:	f2c0 835d 	blt.w	4049ea <_vfiprintf_r+0xb4e>
  404330:	1c61      	adds	r1, r4, #1
  404332:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404336:	f04f 0201 	mov.w	r2, #1
  40433a:	f47f aeea 	bne.w	404112 <_vfiprintf_r+0x276>
  40433e:	ea56 0107 	orrs.w	r1, r6, r7
  404342:	f000 824d 	beq.w	4047e0 <_vfiprintf_r+0x944>
  404346:	9302      	str	r3, [sp, #8]
  404348:	2a01      	cmp	r2, #1
  40434a:	f000 828c 	beq.w	404866 <_vfiprintf_r+0x9ca>
  40434e:	2a02      	cmp	r2, #2
  404350:	f040 825c 	bne.w	40480c <_vfiprintf_r+0x970>
  404354:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404356:	46cb      	mov	fp, r9
  404358:	0933      	lsrs	r3, r6, #4
  40435a:	f006 010f 	and.w	r1, r6, #15
  40435e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404362:	093a      	lsrs	r2, r7, #4
  404364:	461e      	mov	r6, r3
  404366:	4617      	mov	r7, r2
  404368:	5c43      	ldrb	r3, [r0, r1]
  40436a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40436e:	ea56 0307 	orrs.w	r3, r6, r7
  404372:	d1f1      	bne.n	404358 <_vfiprintf_r+0x4bc>
  404374:	eba9 030b 	sub.w	r3, r9, fp
  404378:	9305      	str	r3, [sp, #20]
  40437a:	e6e1      	b.n	404140 <_vfiprintf_r+0x2a4>
  40437c:	2800      	cmp	r0, #0
  40437e:	f040 83c0 	bne.w	404b02 <_vfiprintf_r+0xc66>
  404382:	0699      	lsls	r1, r3, #26
  404384:	f100 8367 	bmi.w	404a56 <_vfiprintf_r+0xbba>
  404388:	06da      	lsls	r2, r3, #27
  40438a:	f100 80f1 	bmi.w	404570 <_vfiprintf_r+0x6d4>
  40438e:	065b      	lsls	r3, r3, #25
  404390:	f140 80ee 	bpl.w	404570 <_vfiprintf_r+0x6d4>
  404394:	9a07      	ldr	r2, [sp, #28]
  404396:	6813      	ldr	r3, [r2, #0]
  404398:	3204      	adds	r2, #4
  40439a:	9207      	str	r2, [sp, #28]
  40439c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4043a0:	801a      	strh	r2, [r3, #0]
  4043a2:	e5b8      	b.n	403f16 <_vfiprintf_r+0x7a>
  4043a4:	9807      	ldr	r0, [sp, #28]
  4043a6:	4a3d      	ldr	r2, [pc, #244]	; (40449c <_vfiprintf_r+0x600>)
  4043a8:	9608      	str	r6, [sp, #32]
  4043aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4043ac:	6806      	ldr	r6, [r0, #0]
  4043ae:	2278      	movs	r2, #120	; 0x78
  4043b0:	2130      	movs	r1, #48	; 0x30
  4043b2:	3004      	adds	r0, #4
  4043b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4043b8:	f043 0302 	orr.w	r3, r3, #2
  4043bc:	9007      	str	r0, [sp, #28]
  4043be:	2700      	movs	r7, #0
  4043c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4043c4:	2202      	movs	r2, #2
  4043c6:	e69c      	b.n	404102 <_vfiprintf_r+0x266>
  4043c8:	9608      	str	r6, [sp, #32]
  4043ca:	2800      	cmp	r0, #0
  4043cc:	d099      	beq.n	404302 <_vfiprintf_r+0x466>
  4043ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4043d2:	e796      	b.n	404302 <_vfiprintf_r+0x466>
  4043d4:	f898 2000 	ldrb.w	r2, [r8]
  4043d8:	2d00      	cmp	r5, #0
  4043da:	f47f add1 	bne.w	403f80 <_vfiprintf_r+0xe4>
  4043de:	2001      	movs	r0, #1
  4043e0:	2520      	movs	r5, #32
  4043e2:	e5cd      	b.n	403f80 <_vfiprintf_r+0xe4>
  4043e4:	f043 0301 	orr.w	r3, r3, #1
  4043e8:	f898 2000 	ldrb.w	r2, [r8]
  4043ec:	e5c8      	b.n	403f80 <_vfiprintf_r+0xe4>
  4043ee:	9608      	str	r6, [sp, #32]
  4043f0:	2800      	cmp	r0, #0
  4043f2:	f040 8393 	bne.w	404b1c <_vfiprintf_r+0xc80>
  4043f6:	4929      	ldr	r1, [pc, #164]	; (40449c <_vfiprintf_r+0x600>)
  4043f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4043fa:	069f      	lsls	r7, r3, #26
  4043fc:	f100 82e8 	bmi.w	4049d0 <_vfiprintf_r+0xb34>
  404400:	9807      	ldr	r0, [sp, #28]
  404402:	06de      	lsls	r6, r3, #27
  404404:	4601      	mov	r1, r0
  404406:	f100 8270 	bmi.w	4048ea <_vfiprintf_r+0xa4e>
  40440a:	065d      	lsls	r5, r3, #25
  40440c:	f140 826d 	bpl.w	4048ea <_vfiprintf_r+0xa4e>
  404410:	3104      	adds	r1, #4
  404412:	8806      	ldrh	r6, [r0, #0]
  404414:	9107      	str	r1, [sp, #28]
  404416:	2700      	movs	r7, #0
  404418:	07d8      	lsls	r0, r3, #31
  40441a:	f140 8222 	bpl.w	404862 <_vfiprintf_r+0x9c6>
  40441e:	ea56 0107 	orrs.w	r1, r6, r7
  404422:	f000 821e 	beq.w	404862 <_vfiprintf_r+0x9c6>
  404426:	2130      	movs	r1, #48	; 0x30
  404428:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40442c:	f043 0302 	orr.w	r3, r3, #2
  404430:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404434:	2202      	movs	r2, #2
  404436:	e664      	b.n	404102 <_vfiprintf_r+0x266>
  404438:	9608      	str	r6, [sp, #32]
  40443a:	2800      	cmp	r0, #0
  40443c:	f040 836b 	bne.w	404b16 <_vfiprintf_r+0xc7a>
  404440:	4917      	ldr	r1, [pc, #92]	; (4044a0 <_vfiprintf_r+0x604>)
  404442:	910b      	str	r1, [sp, #44]	; 0x2c
  404444:	e7d9      	b.n	4043fa <_vfiprintf_r+0x55e>
  404446:	9907      	ldr	r1, [sp, #28]
  404448:	9608      	str	r6, [sp, #32]
  40444a:	680a      	ldr	r2, [r1, #0]
  40444c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404450:	f04f 0000 	mov.w	r0, #0
  404454:	460a      	mov	r2, r1
  404456:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40445a:	3204      	adds	r2, #4
  40445c:	2001      	movs	r0, #1
  40445e:	9001      	str	r0, [sp, #4]
  404460:	9207      	str	r2, [sp, #28]
  404462:	9005      	str	r0, [sp, #20]
  404464:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404468:	9302      	str	r3, [sp, #8]
  40446a:	2400      	movs	r4, #0
  40446c:	e670      	b.n	404150 <_vfiprintf_r+0x2b4>
  40446e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404472:	f898 2000 	ldrb.w	r2, [r8]
  404476:	e583      	b.n	403f80 <_vfiprintf_r+0xe4>
  404478:	f898 2000 	ldrb.w	r2, [r8]
  40447c:	2a6c      	cmp	r2, #108	; 0x6c
  40447e:	bf03      	ittte	eq
  404480:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404484:	f043 0320 	orreq.w	r3, r3, #32
  404488:	f108 0801 	addeq.w	r8, r8, #1
  40448c:	f043 0310 	orrne.w	r3, r3, #16
  404490:	e576      	b.n	403f80 <_vfiprintf_r+0xe4>
  404492:	bf00      	nop
  404494:	00406774 	.word	0x00406774
  404498:	00406784 	.word	0x00406784
  40449c:	00406758 	.word	0x00406758
  4044a0:	00406744 	.word	0x00406744
  4044a4:	9907      	ldr	r1, [sp, #28]
  4044a6:	680e      	ldr	r6, [r1, #0]
  4044a8:	460a      	mov	r2, r1
  4044aa:	2e00      	cmp	r6, #0
  4044ac:	f102 0204 	add.w	r2, r2, #4
  4044b0:	f6ff ae0f 	blt.w	4040d2 <_vfiprintf_r+0x236>
  4044b4:	9207      	str	r2, [sp, #28]
  4044b6:	f898 2000 	ldrb.w	r2, [r8]
  4044ba:	e561      	b.n	403f80 <_vfiprintf_r+0xe4>
  4044bc:	f898 2000 	ldrb.w	r2, [r8]
  4044c0:	2001      	movs	r0, #1
  4044c2:	252b      	movs	r5, #43	; 0x2b
  4044c4:	e55c      	b.n	403f80 <_vfiprintf_r+0xe4>
  4044c6:	9907      	ldr	r1, [sp, #28]
  4044c8:	9608      	str	r6, [sp, #32]
  4044ca:	f8d1 b000 	ldr.w	fp, [r1]
  4044ce:	f04f 0200 	mov.w	r2, #0
  4044d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4044d6:	1d0e      	adds	r6, r1, #4
  4044d8:	f1bb 0f00 	cmp.w	fp, #0
  4044dc:	f000 82e5 	beq.w	404aaa <_vfiprintf_r+0xc0e>
  4044e0:	1c67      	adds	r7, r4, #1
  4044e2:	f000 82c4 	beq.w	404a6e <_vfiprintf_r+0xbd2>
  4044e6:	4622      	mov	r2, r4
  4044e8:	2100      	movs	r1, #0
  4044ea:	4658      	mov	r0, fp
  4044ec:	9301      	str	r3, [sp, #4]
  4044ee:	f001 fbd7 	bl	405ca0 <memchr>
  4044f2:	9b01      	ldr	r3, [sp, #4]
  4044f4:	2800      	cmp	r0, #0
  4044f6:	f000 82e5 	beq.w	404ac4 <_vfiprintf_r+0xc28>
  4044fa:	eba0 020b 	sub.w	r2, r0, fp
  4044fe:	9205      	str	r2, [sp, #20]
  404500:	9607      	str	r6, [sp, #28]
  404502:	9302      	str	r3, [sp, #8]
  404504:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404508:	2400      	movs	r4, #0
  40450a:	e619      	b.n	404140 <_vfiprintf_r+0x2a4>
  40450c:	f898 2000 	ldrb.w	r2, [r8]
  404510:	2a2a      	cmp	r2, #42	; 0x2a
  404512:	f108 0701 	add.w	r7, r8, #1
  404516:	f000 82e9 	beq.w	404aec <_vfiprintf_r+0xc50>
  40451a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40451e:	2909      	cmp	r1, #9
  404520:	46b8      	mov	r8, r7
  404522:	f04f 0400 	mov.w	r4, #0
  404526:	f63f ad2d 	bhi.w	403f84 <_vfiprintf_r+0xe8>
  40452a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40452e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404532:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404536:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40453a:	2909      	cmp	r1, #9
  40453c:	d9f5      	bls.n	40452a <_vfiprintf_r+0x68e>
  40453e:	e521      	b.n	403f84 <_vfiprintf_r+0xe8>
  404540:	f043 0320 	orr.w	r3, r3, #32
  404544:	f898 2000 	ldrb.w	r2, [r8]
  404548:	e51a      	b.n	403f80 <_vfiprintf_r+0xe4>
  40454a:	9608      	str	r6, [sp, #32]
  40454c:	2800      	cmp	r0, #0
  40454e:	f040 82db 	bne.w	404b08 <_vfiprintf_r+0xc6c>
  404552:	2a00      	cmp	r2, #0
  404554:	f000 80e7 	beq.w	404726 <_vfiprintf_r+0x88a>
  404558:	2101      	movs	r1, #1
  40455a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40455e:	f04f 0200 	mov.w	r2, #0
  404562:	9101      	str	r1, [sp, #4]
  404564:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404568:	9105      	str	r1, [sp, #20]
  40456a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40456e:	e77b      	b.n	404468 <_vfiprintf_r+0x5cc>
  404570:	9a07      	ldr	r2, [sp, #28]
  404572:	6813      	ldr	r3, [r2, #0]
  404574:	3204      	adds	r2, #4
  404576:	9207      	str	r2, [sp, #28]
  404578:	9a03      	ldr	r2, [sp, #12]
  40457a:	601a      	str	r2, [r3, #0]
  40457c:	e4cb      	b.n	403f16 <_vfiprintf_r+0x7a>
  40457e:	aa0f      	add	r2, sp, #60	; 0x3c
  404580:	9904      	ldr	r1, [sp, #16]
  404582:	4620      	mov	r0, r4
  404584:	f7ff fc4a 	bl	403e1c <__sprint_r.part.0>
  404588:	2800      	cmp	r0, #0
  40458a:	f040 8139 	bne.w	404800 <_vfiprintf_r+0x964>
  40458e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404590:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404592:	f101 0c01 	add.w	ip, r1, #1
  404596:	46ce      	mov	lr, r9
  404598:	e5ff      	b.n	40419a <_vfiprintf_r+0x2fe>
  40459a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40459c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40459e:	1c48      	adds	r0, r1, #1
  4045a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4045a4:	2d00      	cmp	r5, #0
  4045a6:	f43f ae22 	beq.w	4041ee <_vfiprintf_r+0x352>
  4045aa:	3201      	adds	r2, #1
  4045ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4045b0:	2101      	movs	r1, #1
  4045b2:	2807      	cmp	r0, #7
  4045b4:	9211      	str	r2, [sp, #68]	; 0x44
  4045b6:	9010      	str	r0, [sp, #64]	; 0x40
  4045b8:	f8ca 5000 	str.w	r5, [sl]
  4045bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4045c0:	f340 8108 	ble.w	4047d4 <_vfiprintf_r+0x938>
  4045c4:	2a00      	cmp	r2, #0
  4045c6:	f040 81bc 	bne.w	404942 <_vfiprintf_r+0xaa6>
  4045ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4045cc:	2b00      	cmp	r3, #0
  4045ce:	f43f ae1f 	beq.w	404210 <_vfiprintf_r+0x374>
  4045d2:	ab0e      	add	r3, sp, #56	; 0x38
  4045d4:	2202      	movs	r2, #2
  4045d6:	4608      	mov	r0, r1
  4045d8:	931c      	str	r3, [sp, #112]	; 0x70
  4045da:	921d      	str	r2, [sp, #116]	; 0x74
  4045dc:	46ca      	mov	sl, r9
  4045de:	4601      	mov	r1, r0
  4045e0:	f10a 0a08 	add.w	sl, sl, #8
  4045e4:	3001      	adds	r0, #1
  4045e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4045e8:	2b80      	cmp	r3, #128	; 0x80
  4045ea:	f43f ae19 	beq.w	404220 <_vfiprintf_r+0x384>
  4045ee:	9b05      	ldr	r3, [sp, #20]
  4045f0:	1ae4      	subs	r4, r4, r3
  4045f2:	2c00      	cmp	r4, #0
  4045f4:	dd2e      	ble.n	404654 <_vfiprintf_r+0x7b8>
  4045f6:	2c10      	cmp	r4, #16
  4045f8:	4db3      	ldr	r5, [pc, #716]	; (4048c8 <_vfiprintf_r+0xa2c>)
  4045fa:	dd1e      	ble.n	40463a <_vfiprintf_r+0x79e>
  4045fc:	46d6      	mov	lr, sl
  4045fe:	2610      	movs	r6, #16
  404600:	9f06      	ldr	r7, [sp, #24]
  404602:	f8dd a010 	ldr.w	sl, [sp, #16]
  404606:	e006      	b.n	404616 <_vfiprintf_r+0x77a>
  404608:	1c88      	adds	r0, r1, #2
  40460a:	f10e 0e08 	add.w	lr, lr, #8
  40460e:	4619      	mov	r1, r3
  404610:	3c10      	subs	r4, #16
  404612:	2c10      	cmp	r4, #16
  404614:	dd10      	ble.n	404638 <_vfiprintf_r+0x79c>
  404616:	1c4b      	adds	r3, r1, #1
  404618:	3210      	adds	r2, #16
  40461a:	2b07      	cmp	r3, #7
  40461c:	9211      	str	r2, [sp, #68]	; 0x44
  40461e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404622:	9310      	str	r3, [sp, #64]	; 0x40
  404624:	ddf0      	ble.n	404608 <_vfiprintf_r+0x76c>
  404626:	2a00      	cmp	r2, #0
  404628:	d165      	bne.n	4046f6 <_vfiprintf_r+0x85a>
  40462a:	3c10      	subs	r4, #16
  40462c:	2c10      	cmp	r4, #16
  40462e:	f04f 0001 	mov.w	r0, #1
  404632:	4611      	mov	r1, r2
  404634:	46ce      	mov	lr, r9
  404636:	dcee      	bgt.n	404616 <_vfiprintf_r+0x77a>
  404638:	46f2      	mov	sl, lr
  40463a:	4422      	add	r2, r4
  40463c:	2807      	cmp	r0, #7
  40463e:	9211      	str	r2, [sp, #68]	; 0x44
  404640:	f8ca 5000 	str.w	r5, [sl]
  404644:	f8ca 4004 	str.w	r4, [sl, #4]
  404648:	9010      	str	r0, [sp, #64]	; 0x40
  40464a:	f300 8085 	bgt.w	404758 <_vfiprintf_r+0x8bc>
  40464e:	f10a 0a08 	add.w	sl, sl, #8
  404652:	3001      	adds	r0, #1
  404654:	9905      	ldr	r1, [sp, #20]
  404656:	f8ca b000 	str.w	fp, [sl]
  40465a:	440a      	add	r2, r1
  40465c:	2807      	cmp	r0, #7
  40465e:	9211      	str	r2, [sp, #68]	; 0x44
  404660:	f8ca 1004 	str.w	r1, [sl, #4]
  404664:	9010      	str	r0, [sp, #64]	; 0x40
  404666:	f340 8082 	ble.w	40476e <_vfiprintf_r+0x8d2>
  40466a:	2a00      	cmp	r2, #0
  40466c:	f040 8118 	bne.w	4048a0 <_vfiprintf_r+0xa04>
  404670:	9b02      	ldr	r3, [sp, #8]
  404672:	9210      	str	r2, [sp, #64]	; 0x40
  404674:	0758      	lsls	r0, r3, #29
  404676:	d535      	bpl.n	4046e4 <_vfiprintf_r+0x848>
  404678:	9b08      	ldr	r3, [sp, #32]
  40467a:	9901      	ldr	r1, [sp, #4]
  40467c:	1a5c      	subs	r4, r3, r1
  40467e:	2c00      	cmp	r4, #0
  404680:	f340 80e7 	ble.w	404852 <_vfiprintf_r+0x9b6>
  404684:	46ca      	mov	sl, r9
  404686:	2c10      	cmp	r4, #16
  404688:	f340 8218 	ble.w	404abc <_vfiprintf_r+0xc20>
  40468c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40468e:	4e8f      	ldr	r6, [pc, #572]	; (4048cc <_vfiprintf_r+0xa30>)
  404690:	9f06      	ldr	r7, [sp, #24]
  404692:	f8dd b010 	ldr.w	fp, [sp, #16]
  404696:	2510      	movs	r5, #16
  404698:	e006      	b.n	4046a8 <_vfiprintf_r+0x80c>
  40469a:	1c88      	adds	r0, r1, #2
  40469c:	f10a 0a08 	add.w	sl, sl, #8
  4046a0:	4619      	mov	r1, r3
  4046a2:	3c10      	subs	r4, #16
  4046a4:	2c10      	cmp	r4, #16
  4046a6:	dd11      	ble.n	4046cc <_vfiprintf_r+0x830>
  4046a8:	1c4b      	adds	r3, r1, #1
  4046aa:	3210      	adds	r2, #16
  4046ac:	2b07      	cmp	r3, #7
  4046ae:	9211      	str	r2, [sp, #68]	; 0x44
  4046b0:	f8ca 6000 	str.w	r6, [sl]
  4046b4:	f8ca 5004 	str.w	r5, [sl, #4]
  4046b8:	9310      	str	r3, [sp, #64]	; 0x40
  4046ba:	ddee      	ble.n	40469a <_vfiprintf_r+0x7fe>
  4046bc:	bb42      	cbnz	r2, 404710 <_vfiprintf_r+0x874>
  4046be:	3c10      	subs	r4, #16
  4046c0:	2c10      	cmp	r4, #16
  4046c2:	f04f 0001 	mov.w	r0, #1
  4046c6:	4611      	mov	r1, r2
  4046c8:	46ca      	mov	sl, r9
  4046ca:	dced      	bgt.n	4046a8 <_vfiprintf_r+0x80c>
  4046cc:	4422      	add	r2, r4
  4046ce:	2807      	cmp	r0, #7
  4046d0:	9211      	str	r2, [sp, #68]	; 0x44
  4046d2:	f8ca 6000 	str.w	r6, [sl]
  4046d6:	f8ca 4004 	str.w	r4, [sl, #4]
  4046da:	9010      	str	r0, [sp, #64]	; 0x40
  4046dc:	dd51      	ble.n	404782 <_vfiprintf_r+0x8e6>
  4046de:	2a00      	cmp	r2, #0
  4046e0:	f040 819b 	bne.w	404a1a <_vfiprintf_r+0xb7e>
  4046e4:	9b03      	ldr	r3, [sp, #12]
  4046e6:	9a08      	ldr	r2, [sp, #32]
  4046e8:	9901      	ldr	r1, [sp, #4]
  4046ea:	428a      	cmp	r2, r1
  4046ec:	bfac      	ite	ge
  4046ee:	189b      	addge	r3, r3, r2
  4046f0:	185b      	addlt	r3, r3, r1
  4046f2:	9303      	str	r3, [sp, #12]
  4046f4:	e04e      	b.n	404794 <_vfiprintf_r+0x8f8>
  4046f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4046f8:	4651      	mov	r1, sl
  4046fa:	4638      	mov	r0, r7
  4046fc:	f7ff fb8e 	bl	403e1c <__sprint_r.part.0>
  404700:	2800      	cmp	r0, #0
  404702:	f040 813f 	bne.w	404984 <_vfiprintf_r+0xae8>
  404706:	9910      	ldr	r1, [sp, #64]	; 0x40
  404708:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40470a:	1c48      	adds	r0, r1, #1
  40470c:	46ce      	mov	lr, r9
  40470e:	e77f      	b.n	404610 <_vfiprintf_r+0x774>
  404710:	aa0f      	add	r2, sp, #60	; 0x3c
  404712:	4659      	mov	r1, fp
  404714:	4638      	mov	r0, r7
  404716:	f7ff fb81 	bl	403e1c <__sprint_r.part.0>
  40471a:	b960      	cbnz	r0, 404736 <_vfiprintf_r+0x89a>
  40471c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40471e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404720:	1c48      	adds	r0, r1, #1
  404722:	46ca      	mov	sl, r9
  404724:	e7bd      	b.n	4046a2 <_vfiprintf_r+0x806>
  404726:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404728:	f8dd b010 	ldr.w	fp, [sp, #16]
  40472c:	2b00      	cmp	r3, #0
  40472e:	f040 81d4 	bne.w	404ada <_vfiprintf_r+0xc3e>
  404732:	2300      	movs	r3, #0
  404734:	9310      	str	r3, [sp, #64]	; 0x40
  404736:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40473a:	f013 0f01 	tst.w	r3, #1
  40473e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404742:	d102      	bne.n	40474a <_vfiprintf_r+0x8ae>
  404744:	059a      	lsls	r2, r3, #22
  404746:	f140 80de 	bpl.w	404906 <_vfiprintf_r+0xa6a>
  40474a:	065b      	lsls	r3, r3, #25
  40474c:	f53f acb2 	bmi.w	4040b4 <_vfiprintf_r+0x218>
  404750:	9803      	ldr	r0, [sp, #12]
  404752:	b02d      	add	sp, #180	; 0xb4
  404754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404758:	2a00      	cmp	r2, #0
  40475a:	f040 8106 	bne.w	40496a <_vfiprintf_r+0xace>
  40475e:	9a05      	ldr	r2, [sp, #20]
  404760:	921d      	str	r2, [sp, #116]	; 0x74
  404762:	2301      	movs	r3, #1
  404764:	9211      	str	r2, [sp, #68]	; 0x44
  404766:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40476a:	9310      	str	r3, [sp, #64]	; 0x40
  40476c:	46ca      	mov	sl, r9
  40476e:	f10a 0a08 	add.w	sl, sl, #8
  404772:	9b02      	ldr	r3, [sp, #8]
  404774:	0759      	lsls	r1, r3, #29
  404776:	d504      	bpl.n	404782 <_vfiprintf_r+0x8e6>
  404778:	9b08      	ldr	r3, [sp, #32]
  40477a:	9901      	ldr	r1, [sp, #4]
  40477c:	1a5c      	subs	r4, r3, r1
  40477e:	2c00      	cmp	r4, #0
  404780:	dc81      	bgt.n	404686 <_vfiprintf_r+0x7ea>
  404782:	9b03      	ldr	r3, [sp, #12]
  404784:	9908      	ldr	r1, [sp, #32]
  404786:	9801      	ldr	r0, [sp, #4]
  404788:	4281      	cmp	r1, r0
  40478a:	bfac      	ite	ge
  40478c:	185b      	addge	r3, r3, r1
  40478e:	181b      	addlt	r3, r3, r0
  404790:	9303      	str	r3, [sp, #12]
  404792:	bb72      	cbnz	r2, 4047f2 <_vfiprintf_r+0x956>
  404794:	2300      	movs	r3, #0
  404796:	9310      	str	r3, [sp, #64]	; 0x40
  404798:	46ca      	mov	sl, r9
  40479a:	f7ff bbbc 	b.w	403f16 <_vfiprintf_r+0x7a>
  40479e:	aa0f      	add	r2, sp, #60	; 0x3c
  4047a0:	9904      	ldr	r1, [sp, #16]
  4047a2:	4620      	mov	r0, r4
  4047a4:	f7ff fb3a 	bl	403e1c <__sprint_r.part.0>
  4047a8:	bb50      	cbnz	r0, 404800 <_vfiprintf_r+0x964>
  4047aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4047ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4047ae:	f101 0e01 	add.w	lr, r1, #1
  4047b2:	46cc      	mov	ip, r9
  4047b4:	e548      	b.n	404248 <_vfiprintf_r+0x3ac>
  4047b6:	2a00      	cmp	r2, #0
  4047b8:	f040 8140 	bne.w	404a3c <_vfiprintf_r+0xba0>
  4047bc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4047c0:	2900      	cmp	r1, #0
  4047c2:	f000 811b 	beq.w	4049fc <_vfiprintf_r+0xb60>
  4047c6:	2201      	movs	r2, #1
  4047c8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4047cc:	4610      	mov	r0, r2
  4047ce:	921d      	str	r2, [sp, #116]	; 0x74
  4047d0:	911c      	str	r1, [sp, #112]	; 0x70
  4047d2:	46ca      	mov	sl, r9
  4047d4:	4601      	mov	r1, r0
  4047d6:	f10a 0a08 	add.w	sl, sl, #8
  4047da:	3001      	adds	r0, #1
  4047dc:	e507      	b.n	4041ee <_vfiprintf_r+0x352>
  4047de:	9b02      	ldr	r3, [sp, #8]
  4047e0:	2a01      	cmp	r2, #1
  4047e2:	f000 8098 	beq.w	404916 <_vfiprintf_r+0xa7a>
  4047e6:	2a02      	cmp	r2, #2
  4047e8:	d10d      	bne.n	404806 <_vfiprintf_r+0x96a>
  4047ea:	9302      	str	r3, [sp, #8]
  4047ec:	2600      	movs	r6, #0
  4047ee:	2700      	movs	r7, #0
  4047f0:	e5b0      	b.n	404354 <_vfiprintf_r+0x4b8>
  4047f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4047f4:	9904      	ldr	r1, [sp, #16]
  4047f6:	9806      	ldr	r0, [sp, #24]
  4047f8:	f7ff fb10 	bl	403e1c <__sprint_r.part.0>
  4047fc:	2800      	cmp	r0, #0
  4047fe:	d0c9      	beq.n	404794 <_vfiprintf_r+0x8f8>
  404800:	f8dd b010 	ldr.w	fp, [sp, #16]
  404804:	e797      	b.n	404736 <_vfiprintf_r+0x89a>
  404806:	9302      	str	r3, [sp, #8]
  404808:	2600      	movs	r6, #0
  40480a:	2700      	movs	r7, #0
  40480c:	4649      	mov	r1, r9
  40480e:	e000      	b.n	404812 <_vfiprintf_r+0x976>
  404810:	4659      	mov	r1, fp
  404812:	08f2      	lsrs	r2, r6, #3
  404814:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404818:	08f8      	lsrs	r0, r7, #3
  40481a:	f006 0307 	and.w	r3, r6, #7
  40481e:	4607      	mov	r7, r0
  404820:	4616      	mov	r6, r2
  404822:	3330      	adds	r3, #48	; 0x30
  404824:	ea56 0207 	orrs.w	r2, r6, r7
  404828:	f801 3c01 	strb.w	r3, [r1, #-1]
  40482c:	f101 3bff 	add.w	fp, r1, #4294967295
  404830:	d1ee      	bne.n	404810 <_vfiprintf_r+0x974>
  404832:	9a02      	ldr	r2, [sp, #8]
  404834:	07d6      	lsls	r6, r2, #31
  404836:	f57f ad9d 	bpl.w	404374 <_vfiprintf_r+0x4d8>
  40483a:	2b30      	cmp	r3, #48	; 0x30
  40483c:	f43f ad9a 	beq.w	404374 <_vfiprintf_r+0x4d8>
  404840:	3902      	subs	r1, #2
  404842:	2330      	movs	r3, #48	; 0x30
  404844:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404848:	eba9 0301 	sub.w	r3, r9, r1
  40484c:	9305      	str	r3, [sp, #20]
  40484e:	468b      	mov	fp, r1
  404850:	e476      	b.n	404140 <_vfiprintf_r+0x2a4>
  404852:	9b03      	ldr	r3, [sp, #12]
  404854:	9a08      	ldr	r2, [sp, #32]
  404856:	428a      	cmp	r2, r1
  404858:	bfac      	ite	ge
  40485a:	189b      	addge	r3, r3, r2
  40485c:	185b      	addlt	r3, r3, r1
  40485e:	9303      	str	r3, [sp, #12]
  404860:	e798      	b.n	404794 <_vfiprintf_r+0x8f8>
  404862:	2202      	movs	r2, #2
  404864:	e44d      	b.n	404102 <_vfiprintf_r+0x266>
  404866:	2f00      	cmp	r7, #0
  404868:	bf08      	it	eq
  40486a:	2e0a      	cmpeq	r6, #10
  40486c:	d352      	bcc.n	404914 <_vfiprintf_r+0xa78>
  40486e:	46cb      	mov	fp, r9
  404870:	4630      	mov	r0, r6
  404872:	4639      	mov	r1, r7
  404874:	220a      	movs	r2, #10
  404876:	2300      	movs	r3, #0
  404878:	f001 ff36 	bl	4066e8 <__aeabi_uldivmod>
  40487c:	3230      	adds	r2, #48	; 0x30
  40487e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404882:	4630      	mov	r0, r6
  404884:	4639      	mov	r1, r7
  404886:	2300      	movs	r3, #0
  404888:	220a      	movs	r2, #10
  40488a:	f001 ff2d 	bl	4066e8 <__aeabi_uldivmod>
  40488e:	4606      	mov	r6, r0
  404890:	460f      	mov	r7, r1
  404892:	ea56 0307 	orrs.w	r3, r6, r7
  404896:	d1eb      	bne.n	404870 <_vfiprintf_r+0x9d4>
  404898:	e56c      	b.n	404374 <_vfiprintf_r+0x4d8>
  40489a:	9405      	str	r4, [sp, #20]
  40489c:	46cb      	mov	fp, r9
  40489e:	e44f      	b.n	404140 <_vfiprintf_r+0x2a4>
  4048a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4048a2:	9904      	ldr	r1, [sp, #16]
  4048a4:	9806      	ldr	r0, [sp, #24]
  4048a6:	f7ff fab9 	bl	403e1c <__sprint_r.part.0>
  4048aa:	2800      	cmp	r0, #0
  4048ac:	d1a8      	bne.n	404800 <_vfiprintf_r+0x964>
  4048ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4048b0:	46ca      	mov	sl, r9
  4048b2:	e75e      	b.n	404772 <_vfiprintf_r+0x8d6>
  4048b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4048b6:	9904      	ldr	r1, [sp, #16]
  4048b8:	9806      	ldr	r0, [sp, #24]
  4048ba:	f7ff faaf 	bl	403e1c <__sprint_r.part.0>
  4048be:	2800      	cmp	r0, #0
  4048c0:	d19e      	bne.n	404800 <_vfiprintf_r+0x964>
  4048c2:	46ca      	mov	sl, r9
  4048c4:	f7ff bbc0 	b.w	404048 <_vfiprintf_r+0x1ac>
  4048c8:	00406784 	.word	0x00406784
  4048cc:	00406774 	.word	0x00406774
  4048d0:	3104      	adds	r1, #4
  4048d2:	6816      	ldr	r6, [r2, #0]
  4048d4:	9107      	str	r1, [sp, #28]
  4048d6:	2201      	movs	r2, #1
  4048d8:	2700      	movs	r7, #0
  4048da:	e412      	b.n	404102 <_vfiprintf_r+0x266>
  4048dc:	9807      	ldr	r0, [sp, #28]
  4048de:	4601      	mov	r1, r0
  4048e0:	3104      	adds	r1, #4
  4048e2:	6806      	ldr	r6, [r0, #0]
  4048e4:	9107      	str	r1, [sp, #28]
  4048e6:	2700      	movs	r7, #0
  4048e8:	e40b      	b.n	404102 <_vfiprintf_r+0x266>
  4048ea:	680e      	ldr	r6, [r1, #0]
  4048ec:	3104      	adds	r1, #4
  4048ee:	9107      	str	r1, [sp, #28]
  4048f0:	2700      	movs	r7, #0
  4048f2:	e591      	b.n	404418 <_vfiprintf_r+0x57c>
  4048f4:	9907      	ldr	r1, [sp, #28]
  4048f6:	680e      	ldr	r6, [r1, #0]
  4048f8:	460a      	mov	r2, r1
  4048fa:	17f7      	asrs	r7, r6, #31
  4048fc:	3204      	adds	r2, #4
  4048fe:	9207      	str	r2, [sp, #28]
  404900:	4630      	mov	r0, r6
  404902:	4639      	mov	r1, r7
  404904:	e50f      	b.n	404326 <_vfiprintf_r+0x48a>
  404906:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40490a:	f000 fe7f 	bl	40560c <__retarget_lock_release_recursive>
  40490e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404912:	e71a      	b.n	40474a <_vfiprintf_r+0x8ae>
  404914:	9b02      	ldr	r3, [sp, #8]
  404916:	9302      	str	r3, [sp, #8]
  404918:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40491c:	3630      	adds	r6, #48	; 0x30
  40491e:	2301      	movs	r3, #1
  404920:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404924:	9305      	str	r3, [sp, #20]
  404926:	e40b      	b.n	404140 <_vfiprintf_r+0x2a4>
  404928:	aa0f      	add	r2, sp, #60	; 0x3c
  40492a:	9904      	ldr	r1, [sp, #16]
  40492c:	9806      	ldr	r0, [sp, #24]
  40492e:	f7ff fa75 	bl	403e1c <__sprint_r.part.0>
  404932:	2800      	cmp	r0, #0
  404934:	f47f af64 	bne.w	404800 <_vfiprintf_r+0x964>
  404938:	9910      	ldr	r1, [sp, #64]	; 0x40
  40493a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40493c:	1c48      	adds	r0, r1, #1
  40493e:	46ca      	mov	sl, r9
  404940:	e651      	b.n	4045e6 <_vfiprintf_r+0x74a>
  404942:	aa0f      	add	r2, sp, #60	; 0x3c
  404944:	9904      	ldr	r1, [sp, #16]
  404946:	9806      	ldr	r0, [sp, #24]
  404948:	f7ff fa68 	bl	403e1c <__sprint_r.part.0>
  40494c:	2800      	cmp	r0, #0
  40494e:	f47f af57 	bne.w	404800 <_vfiprintf_r+0x964>
  404952:	9910      	ldr	r1, [sp, #64]	; 0x40
  404954:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404956:	1c48      	adds	r0, r1, #1
  404958:	46ca      	mov	sl, r9
  40495a:	e448      	b.n	4041ee <_vfiprintf_r+0x352>
  40495c:	2a00      	cmp	r2, #0
  40495e:	f040 8091 	bne.w	404a84 <_vfiprintf_r+0xbe8>
  404962:	2001      	movs	r0, #1
  404964:	4611      	mov	r1, r2
  404966:	46ca      	mov	sl, r9
  404968:	e641      	b.n	4045ee <_vfiprintf_r+0x752>
  40496a:	aa0f      	add	r2, sp, #60	; 0x3c
  40496c:	9904      	ldr	r1, [sp, #16]
  40496e:	9806      	ldr	r0, [sp, #24]
  404970:	f7ff fa54 	bl	403e1c <__sprint_r.part.0>
  404974:	2800      	cmp	r0, #0
  404976:	f47f af43 	bne.w	404800 <_vfiprintf_r+0x964>
  40497a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40497c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40497e:	3001      	adds	r0, #1
  404980:	46ca      	mov	sl, r9
  404982:	e667      	b.n	404654 <_vfiprintf_r+0x7b8>
  404984:	46d3      	mov	fp, sl
  404986:	e6d6      	b.n	404736 <_vfiprintf_r+0x89a>
  404988:	9e07      	ldr	r6, [sp, #28]
  40498a:	3607      	adds	r6, #7
  40498c:	f026 0207 	bic.w	r2, r6, #7
  404990:	f102 0108 	add.w	r1, r2, #8
  404994:	e9d2 6700 	ldrd	r6, r7, [r2]
  404998:	9107      	str	r1, [sp, #28]
  40499a:	2201      	movs	r2, #1
  40499c:	f7ff bbb1 	b.w	404102 <_vfiprintf_r+0x266>
  4049a0:	9e07      	ldr	r6, [sp, #28]
  4049a2:	3607      	adds	r6, #7
  4049a4:	f026 0607 	bic.w	r6, r6, #7
  4049a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4049ac:	f106 0208 	add.w	r2, r6, #8
  4049b0:	9207      	str	r2, [sp, #28]
  4049b2:	4606      	mov	r6, r0
  4049b4:	460f      	mov	r7, r1
  4049b6:	e4b6      	b.n	404326 <_vfiprintf_r+0x48a>
  4049b8:	9e07      	ldr	r6, [sp, #28]
  4049ba:	3607      	adds	r6, #7
  4049bc:	f026 0207 	bic.w	r2, r6, #7
  4049c0:	f102 0108 	add.w	r1, r2, #8
  4049c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4049c8:	9107      	str	r1, [sp, #28]
  4049ca:	2200      	movs	r2, #0
  4049cc:	f7ff bb99 	b.w	404102 <_vfiprintf_r+0x266>
  4049d0:	9e07      	ldr	r6, [sp, #28]
  4049d2:	3607      	adds	r6, #7
  4049d4:	f026 0107 	bic.w	r1, r6, #7
  4049d8:	f101 0008 	add.w	r0, r1, #8
  4049dc:	9007      	str	r0, [sp, #28]
  4049de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4049e2:	e519      	b.n	404418 <_vfiprintf_r+0x57c>
  4049e4:	46cb      	mov	fp, r9
  4049e6:	f7ff bbab 	b.w	404140 <_vfiprintf_r+0x2a4>
  4049ea:	252d      	movs	r5, #45	; 0x2d
  4049ec:	4276      	negs	r6, r6
  4049ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4049f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4049f6:	2201      	movs	r2, #1
  4049f8:	f7ff bb88 	b.w	40410c <_vfiprintf_r+0x270>
  4049fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4049fe:	b9b3      	cbnz	r3, 404a2e <_vfiprintf_r+0xb92>
  404a00:	4611      	mov	r1, r2
  404a02:	2001      	movs	r0, #1
  404a04:	46ca      	mov	sl, r9
  404a06:	e5f2      	b.n	4045ee <_vfiprintf_r+0x752>
  404a08:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404a0c:	f000 fdfe 	bl	40560c <__retarget_lock_release_recursive>
  404a10:	f04f 33ff 	mov.w	r3, #4294967295
  404a14:	9303      	str	r3, [sp, #12]
  404a16:	f7ff bb50 	b.w	4040ba <_vfiprintf_r+0x21e>
  404a1a:	aa0f      	add	r2, sp, #60	; 0x3c
  404a1c:	9904      	ldr	r1, [sp, #16]
  404a1e:	9806      	ldr	r0, [sp, #24]
  404a20:	f7ff f9fc 	bl	403e1c <__sprint_r.part.0>
  404a24:	2800      	cmp	r0, #0
  404a26:	f47f aeeb 	bne.w	404800 <_vfiprintf_r+0x964>
  404a2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a2c:	e6a9      	b.n	404782 <_vfiprintf_r+0x8e6>
  404a2e:	ab0e      	add	r3, sp, #56	; 0x38
  404a30:	2202      	movs	r2, #2
  404a32:	931c      	str	r3, [sp, #112]	; 0x70
  404a34:	921d      	str	r2, [sp, #116]	; 0x74
  404a36:	2001      	movs	r0, #1
  404a38:	46ca      	mov	sl, r9
  404a3a:	e5d0      	b.n	4045de <_vfiprintf_r+0x742>
  404a3c:	aa0f      	add	r2, sp, #60	; 0x3c
  404a3e:	9904      	ldr	r1, [sp, #16]
  404a40:	9806      	ldr	r0, [sp, #24]
  404a42:	f7ff f9eb 	bl	403e1c <__sprint_r.part.0>
  404a46:	2800      	cmp	r0, #0
  404a48:	f47f aeda 	bne.w	404800 <_vfiprintf_r+0x964>
  404a4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a50:	1c48      	adds	r0, r1, #1
  404a52:	46ca      	mov	sl, r9
  404a54:	e5a4      	b.n	4045a0 <_vfiprintf_r+0x704>
  404a56:	9a07      	ldr	r2, [sp, #28]
  404a58:	9903      	ldr	r1, [sp, #12]
  404a5a:	6813      	ldr	r3, [r2, #0]
  404a5c:	17cd      	asrs	r5, r1, #31
  404a5e:	4608      	mov	r0, r1
  404a60:	3204      	adds	r2, #4
  404a62:	4629      	mov	r1, r5
  404a64:	9207      	str	r2, [sp, #28]
  404a66:	e9c3 0100 	strd	r0, r1, [r3]
  404a6a:	f7ff ba54 	b.w	403f16 <_vfiprintf_r+0x7a>
  404a6e:	4658      	mov	r0, fp
  404a70:	9607      	str	r6, [sp, #28]
  404a72:	9302      	str	r3, [sp, #8]
  404a74:	f7ff f964 	bl	403d40 <strlen>
  404a78:	2400      	movs	r4, #0
  404a7a:	9005      	str	r0, [sp, #20]
  404a7c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404a80:	f7ff bb5e 	b.w	404140 <_vfiprintf_r+0x2a4>
  404a84:	aa0f      	add	r2, sp, #60	; 0x3c
  404a86:	9904      	ldr	r1, [sp, #16]
  404a88:	9806      	ldr	r0, [sp, #24]
  404a8a:	f7ff f9c7 	bl	403e1c <__sprint_r.part.0>
  404a8e:	2800      	cmp	r0, #0
  404a90:	f47f aeb6 	bne.w	404800 <_vfiprintf_r+0x964>
  404a94:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a96:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a98:	1c48      	adds	r0, r1, #1
  404a9a:	46ca      	mov	sl, r9
  404a9c:	e5a7      	b.n	4045ee <_vfiprintf_r+0x752>
  404a9e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404aa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404aa2:	4e20      	ldr	r6, [pc, #128]	; (404b24 <_vfiprintf_r+0xc88>)
  404aa4:	3101      	adds	r1, #1
  404aa6:	f7ff bb90 	b.w	4041ca <_vfiprintf_r+0x32e>
  404aaa:	2c06      	cmp	r4, #6
  404aac:	bf28      	it	cs
  404aae:	2406      	movcs	r4, #6
  404ab0:	9405      	str	r4, [sp, #20]
  404ab2:	9607      	str	r6, [sp, #28]
  404ab4:	9401      	str	r4, [sp, #4]
  404ab6:	f8df b070 	ldr.w	fp, [pc, #112]	; 404b28 <_vfiprintf_r+0xc8c>
  404aba:	e4d5      	b.n	404468 <_vfiprintf_r+0x5cc>
  404abc:	9810      	ldr	r0, [sp, #64]	; 0x40
  404abe:	4e19      	ldr	r6, [pc, #100]	; (404b24 <_vfiprintf_r+0xc88>)
  404ac0:	3001      	adds	r0, #1
  404ac2:	e603      	b.n	4046cc <_vfiprintf_r+0x830>
  404ac4:	9405      	str	r4, [sp, #20]
  404ac6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404aca:	9607      	str	r6, [sp, #28]
  404acc:	9302      	str	r3, [sp, #8]
  404ace:	4604      	mov	r4, r0
  404ad0:	f7ff bb36 	b.w	404140 <_vfiprintf_r+0x2a4>
  404ad4:	4686      	mov	lr, r0
  404ad6:	f7ff bbce 	b.w	404276 <_vfiprintf_r+0x3da>
  404ada:	9806      	ldr	r0, [sp, #24]
  404adc:	aa0f      	add	r2, sp, #60	; 0x3c
  404ade:	4659      	mov	r1, fp
  404ae0:	f7ff f99c 	bl	403e1c <__sprint_r.part.0>
  404ae4:	2800      	cmp	r0, #0
  404ae6:	f43f ae24 	beq.w	404732 <_vfiprintf_r+0x896>
  404aea:	e624      	b.n	404736 <_vfiprintf_r+0x89a>
  404aec:	9907      	ldr	r1, [sp, #28]
  404aee:	f898 2001 	ldrb.w	r2, [r8, #1]
  404af2:	680c      	ldr	r4, [r1, #0]
  404af4:	3104      	adds	r1, #4
  404af6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404afa:	46b8      	mov	r8, r7
  404afc:	9107      	str	r1, [sp, #28]
  404afe:	f7ff ba3f 	b.w	403f80 <_vfiprintf_r+0xe4>
  404b02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b06:	e43c      	b.n	404382 <_vfiprintf_r+0x4e6>
  404b08:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b0c:	e521      	b.n	404552 <_vfiprintf_r+0x6b6>
  404b0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b12:	f7ff bbf4 	b.w	4042fe <_vfiprintf_r+0x462>
  404b16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b1a:	e491      	b.n	404440 <_vfiprintf_r+0x5a4>
  404b1c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b20:	e469      	b.n	4043f6 <_vfiprintf_r+0x55a>
  404b22:	bf00      	nop
  404b24:	00406774 	.word	0x00406774
  404b28:	0040676c 	.word	0x0040676c

00404b2c <__sbprintf>:
  404b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404b30:	460c      	mov	r4, r1
  404b32:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404b36:	8989      	ldrh	r1, [r1, #12]
  404b38:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404b3a:	89e5      	ldrh	r5, [r4, #14]
  404b3c:	9619      	str	r6, [sp, #100]	; 0x64
  404b3e:	f021 0102 	bic.w	r1, r1, #2
  404b42:	4606      	mov	r6, r0
  404b44:	69e0      	ldr	r0, [r4, #28]
  404b46:	f8ad 100c 	strh.w	r1, [sp, #12]
  404b4a:	4617      	mov	r7, r2
  404b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404b50:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404b52:	f8ad 500e 	strh.w	r5, [sp, #14]
  404b56:	4698      	mov	r8, r3
  404b58:	ad1a      	add	r5, sp, #104	; 0x68
  404b5a:	2300      	movs	r3, #0
  404b5c:	9007      	str	r0, [sp, #28]
  404b5e:	a816      	add	r0, sp, #88	; 0x58
  404b60:	9209      	str	r2, [sp, #36]	; 0x24
  404b62:	9306      	str	r3, [sp, #24]
  404b64:	9500      	str	r5, [sp, #0]
  404b66:	9504      	str	r5, [sp, #16]
  404b68:	9102      	str	r1, [sp, #8]
  404b6a:	9105      	str	r1, [sp, #20]
  404b6c:	f000 fd48 	bl	405600 <__retarget_lock_init_recursive>
  404b70:	4643      	mov	r3, r8
  404b72:	463a      	mov	r2, r7
  404b74:	4669      	mov	r1, sp
  404b76:	4630      	mov	r0, r6
  404b78:	f7ff f990 	bl	403e9c <_vfiprintf_r>
  404b7c:	1e05      	subs	r5, r0, #0
  404b7e:	db07      	blt.n	404b90 <__sbprintf+0x64>
  404b80:	4630      	mov	r0, r6
  404b82:	4669      	mov	r1, sp
  404b84:	f000 f928 	bl	404dd8 <_fflush_r>
  404b88:	2800      	cmp	r0, #0
  404b8a:	bf18      	it	ne
  404b8c:	f04f 35ff 	movne.w	r5, #4294967295
  404b90:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404b94:	065b      	lsls	r3, r3, #25
  404b96:	d503      	bpl.n	404ba0 <__sbprintf+0x74>
  404b98:	89a3      	ldrh	r3, [r4, #12]
  404b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b9e:	81a3      	strh	r3, [r4, #12]
  404ba0:	9816      	ldr	r0, [sp, #88]	; 0x58
  404ba2:	f000 fd2f 	bl	405604 <__retarget_lock_close_recursive>
  404ba6:	4628      	mov	r0, r5
  404ba8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  404bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404bb0 <__swsetup_r>:
  404bb0:	b538      	push	{r3, r4, r5, lr}
  404bb2:	4b30      	ldr	r3, [pc, #192]	; (404c74 <__swsetup_r+0xc4>)
  404bb4:	681b      	ldr	r3, [r3, #0]
  404bb6:	4605      	mov	r5, r0
  404bb8:	460c      	mov	r4, r1
  404bba:	b113      	cbz	r3, 404bc2 <__swsetup_r+0x12>
  404bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  404bbe:	2a00      	cmp	r2, #0
  404bc0:	d038      	beq.n	404c34 <__swsetup_r+0x84>
  404bc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404bc6:	b293      	uxth	r3, r2
  404bc8:	0718      	lsls	r0, r3, #28
  404bca:	d50c      	bpl.n	404be6 <__swsetup_r+0x36>
  404bcc:	6920      	ldr	r0, [r4, #16]
  404bce:	b1a8      	cbz	r0, 404bfc <__swsetup_r+0x4c>
  404bd0:	f013 0201 	ands.w	r2, r3, #1
  404bd4:	d01e      	beq.n	404c14 <__swsetup_r+0x64>
  404bd6:	6963      	ldr	r3, [r4, #20]
  404bd8:	2200      	movs	r2, #0
  404bda:	425b      	negs	r3, r3
  404bdc:	61a3      	str	r3, [r4, #24]
  404bde:	60a2      	str	r2, [r4, #8]
  404be0:	b1f0      	cbz	r0, 404c20 <__swsetup_r+0x70>
  404be2:	2000      	movs	r0, #0
  404be4:	bd38      	pop	{r3, r4, r5, pc}
  404be6:	06d9      	lsls	r1, r3, #27
  404be8:	d53c      	bpl.n	404c64 <__swsetup_r+0xb4>
  404bea:	0758      	lsls	r0, r3, #29
  404bec:	d426      	bmi.n	404c3c <__swsetup_r+0x8c>
  404bee:	6920      	ldr	r0, [r4, #16]
  404bf0:	f042 0308 	orr.w	r3, r2, #8
  404bf4:	81a3      	strh	r3, [r4, #12]
  404bf6:	b29b      	uxth	r3, r3
  404bf8:	2800      	cmp	r0, #0
  404bfa:	d1e9      	bne.n	404bd0 <__swsetup_r+0x20>
  404bfc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404c00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404c04:	d0e4      	beq.n	404bd0 <__swsetup_r+0x20>
  404c06:	4628      	mov	r0, r5
  404c08:	4621      	mov	r1, r4
  404c0a:	f000 fd2f 	bl	40566c <__smakebuf_r>
  404c0e:	89a3      	ldrh	r3, [r4, #12]
  404c10:	6920      	ldr	r0, [r4, #16]
  404c12:	e7dd      	b.n	404bd0 <__swsetup_r+0x20>
  404c14:	0799      	lsls	r1, r3, #30
  404c16:	bf58      	it	pl
  404c18:	6962      	ldrpl	r2, [r4, #20]
  404c1a:	60a2      	str	r2, [r4, #8]
  404c1c:	2800      	cmp	r0, #0
  404c1e:	d1e0      	bne.n	404be2 <__swsetup_r+0x32>
  404c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c24:	061a      	lsls	r2, r3, #24
  404c26:	d5dd      	bpl.n	404be4 <__swsetup_r+0x34>
  404c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404c2c:	81a3      	strh	r3, [r4, #12]
  404c2e:	f04f 30ff 	mov.w	r0, #4294967295
  404c32:	bd38      	pop	{r3, r4, r5, pc}
  404c34:	4618      	mov	r0, r3
  404c36:	f000 f927 	bl	404e88 <__sinit>
  404c3a:	e7c2      	b.n	404bc2 <__swsetup_r+0x12>
  404c3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404c3e:	b151      	cbz	r1, 404c56 <__swsetup_r+0xa6>
  404c40:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404c44:	4299      	cmp	r1, r3
  404c46:	d004      	beq.n	404c52 <__swsetup_r+0xa2>
  404c48:	4628      	mov	r0, r5
  404c4a:	f000 fa43 	bl	4050d4 <_free_r>
  404c4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404c52:	2300      	movs	r3, #0
  404c54:	6323      	str	r3, [r4, #48]	; 0x30
  404c56:	2300      	movs	r3, #0
  404c58:	6920      	ldr	r0, [r4, #16]
  404c5a:	6063      	str	r3, [r4, #4]
  404c5c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404c60:	6020      	str	r0, [r4, #0]
  404c62:	e7c5      	b.n	404bf0 <__swsetup_r+0x40>
  404c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404c68:	2309      	movs	r3, #9
  404c6a:	602b      	str	r3, [r5, #0]
  404c6c:	f04f 30ff 	mov.w	r0, #4294967295
  404c70:	81a2      	strh	r2, [r4, #12]
  404c72:	bd38      	pop	{r3, r4, r5, pc}
  404c74:	20000010 	.word	0x20000010

00404c78 <register_fini>:
  404c78:	4b02      	ldr	r3, [pc, #8]	; (404c84 <register_fini+0xc>)
  404c7a:	b113      	cbz	r3, 404c82 <register_fini+0xa>
  404c7c:	4802      	ldr	r0, [pc, #8]	; (404c88 <register_fini+0x10>)
  404c7e:	f000 b805 	b.w	404c8c <atexit>
  404c82:	4770      	bx	lr
  404c84:	00000000 	.word	0x00000000
  404c88:	00404ef9 	.word	0x00404ef9

00404c8c <atexit>:
  404c8c:	2300      	movs	r3, #0
  404c8e:	4601      	mov	r1, r0
  404c90:	461a      	mov	r2, r3
  404c92:	4618      	mov	r0, r3
  404c94:	f001 bc00 	b.w	406498 <__register_exitproc>

00404c98 <__sflush_r>:
  404c98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404c9c:	b29a      	uxth	r2, r3
  404c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ca2:	460d      	mov	r5, r1
  404ca4:	0711      	lsls	r1, r2, #28
  404ca6:	4680      	mov	r8, r0
  404ca8:	d43a      	bmi.n	404d20 <__sflush_r+0x88>
  404caa:	686a      	ldr	r2, [r5, #4]
  404cac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404cb0:	2a00      	cmp	r2, #0
  404cb2:	81ab      	strh	r3, [r5, #12]
  404cb4:	dd6f      	ble.n	404d96 <__sflush_r+0xfe>
  404cb6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404cb8:	2c00      	cmp	r4, #0
  404cba:	d049      	beq.n	404d50 <__sflush_r+0xb8>
  404cbc:	2200      	movs	r2, #0
  404cbe:	b29b      	uxth	r3, r3
  404cc0:	f8d8 6000 	ldr.w	r6, [r8]
  404cc4:	f8c8 2000 	str.w	r2, [r8]
  404cc8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  404ccc:	d067      	beq.n	404d9e <__sflush_r+0x106>
  404cce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404cd0:	075f      	lsls	r7, r3, #29
  404cd2:	d505      	bpl.n	404ce0 <__sflush_r+0x48>
  404cd4:	6869      	ldr	r1, [r5, #4]
  404cd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404cd8:	1a52      	subs	r2, r2, r1
  404cda:	b10b      	cbz	r3, 404ce0 <__sflush_r+0x48>
  404cdc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404cde:	1ad2      	subs	r2, r2, r3
  404ce0:	2300      	movs	r3, #0
  404ce2:	69e9      	ldr	r1, [r5, #28]
  404ce4:	4640      	mov	r0, r8
  404ce6:	47a0      	blx	r4
  404ce8:	1c44      	adds	r4, r0, #1
  404cea:	d03c      	beq.n	404d66 <__sflush_r+0xce>
  404cec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404cf0:	692a      	ldr	r2, [r5, #16]
  404cf2:	602a      	str	r2, [r5, #0]
  404cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404cf8:	2200      	movs	r2, #0
  404cfa:	81ab      	strh	r3, [r5, #12]
  404cfc:	04db      	lsls	r3, r3, #19
  404cfe:	606a      	str	r2, [r5, #4]
  404d00:	d447      	bmi.n	404d92 <__sflush_r+0xfa>
  404d02:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404d04:	f8c8 6000 	str.w	r6, [r8]
  404d08:	b311      	cbz	r1, 404d50 <__sflush_r+0xb8>
  404d0a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404d0e:	4299      	cmp	r1, r3
  404d10:	d002      	beq.n	404d18 <__sflush_r+0x80>
  404d12:	4640      	mov	r0, r8
  404d14:	f000 f9de 	bl	4050d4 <_free_r>
  404d18:	2000      	movs	r0, #0
  404d1a:	6328      	str	r0, [r5, #48]	; 0x30
  404d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d20:	692e      	ldr	r6, [r5, #16]
  404d22:	b1ae      	cbz	r6, 404d50 <__sflush_r+0xb8>
  404d24:	682c      	ldr	r4, [r5, #0]
  404d26:	602e      	str	r6, [r5, #0]
  404d28:	0791      	lsls	r1, r2, #30
  404d2a:	bf0c      	ite	eq
  404d2c:	696b      	ldreq	r3, [r5, #20]
  404d2e:	2300      	movne	r3, #0
  404d30:	1ba4      	subs	r4, r4, r6
  404d32:	60ab      	str	r3, [r5, #8]
  404d34:	e00a      	b.n	404d4c <__sflush_r+0xb4>
  404d36:	4623      	mov	r3, r4
  404d38:	4632      	mov	r2, r6
  404d3a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404d3c:	69e9      	ldr	r1, [r5, #28]
  404d3e:	4640      	mov	r0, r8
  404d40:	47b8      	blx	r7
  404d42:	2800      	cmp	r0, #0
  404d44:	eba4 0400 	sub.w	r4, r4, r0
  404d48:	4406      	add	r6, r0
  404d4a:	dd04      	ble.n	404d56 <__sflush_r+0xbe>
  404d4c:	2c00      	cmp	r4, #0
  404d4e:	dcf2      	bgt.n	404d36 <__sflush_r+0x9e>
  404d50:	2000      	movs	r0, #0
  404d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d56:	89ab      	ldrh	r3, [r5, #12]
  404d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404d5c:	81ab      	strh	r3, [r5, #12]
  404d5e:	f04f 30ff 	mov.w	r0, #4294967295
  404d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d66:	f8d8 4000 	ldr.w	r4, [r8]
  404d6a:	2c1d      	cmp	r4, #29
  404d6c:	d8f3      	bhi.n	404d56 <__sflush_r+0xbe>
  404d6e:	4b19      	ldr	r3, [pc, #100]	; (404dd4 <__sflush_r+0x13c>)
  404d70:	40e3      	lsrs	r3, r4
  404d72:	43db      	mvns	r3, r3
  404d74:	f013 0301 	ands.w	r3, r3, #1
  404d78:	d1ed      	bne.n	404d56 <__sflush_r+0xbe>
  404d7a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  404d7e:	606b      	str	r3, [r5, #4]
  404d80:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404d84:	6929      	ldr	r1, [r5, #16]
  404d86:	81ab      	strh	r3, [r5, #12]
  404d88:	04da      	lsls	r2, r3, #19
  404d8a:	6029      	str	r1, [r5, #0]
  404d8c:	d5b9      	bpl.n	404d02 <__sflush_r+0x6a>
  404d8e:	2c00      	cmp	r4, #0
  404d90:	d1b7      	bne.n	404d02 <__sflush_r+0x6a>
  404d92:	6528      	str	r0, [r5, #80]	; 0x50
  404d94:	e7b5      	b.n	404d02 <__sflush_r+0x6a>
  404d96:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404d98:	2a00      	cmp	r2, #0
  404d9a:	dc8c      	bgt.n	404cb6 <__sflush_r+0x1e>
  404d9c:	e7d8      	b.n	404d50 <__sflush_r+0xb8>
  404d9e:	2301      	movs	r3, #1
  404da0:	69e9      	ldr	r1, [r5, #28]
  404da2:	4640      	mov	r0, r8
  404da4:	47a0      	blx	r4
  404da6:	1c43      	adds	r3, r0, #1
  404da8:	4602      	mov	r2, r0
  404daa:	d002      	beq.n	404db2 <__sflush_r+0x11a>
  404dac:	89ab      	ldrh	r3, [r5, #12]
  404dae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404db0:	e78e      	b.n	404cd0 <__sflush_r+0x38>
  404db2:	f8d8 3000 	ldr.w	r3, [r8]
  404db6:	2b00      	cmp	r3, #0
  404db8:	d0f8      	beq.n	404dac <__sflush_r+0x114>
  404dba:	2b1d      	cmp	r3, #29
  404dbc:	d001      	beq.n	404dc2 <__sflush_r+0x12a>
  404dbe:	2b16      	cmp	r3, #22
  404dc0:	d102      	bne.n	404dc8 <__sflush_r+0x130>
  404dc2:	f8c8 6000 	str.w	r6, [r8]
  404dc6:	e7c3      	b.n	404d50 <__sflush_r+0xb8>
  404dc8:	89ab      	ldrh	r3, [r5, #12]
  404dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404dce:	81ab      	strh	r3, [r5, #12]
  404dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404dd4:	20400001 	.word	0x20400001

00404dd8 <_fflush_r>:
  404dd8:	b538      	push	{r3, r4, r5, lr}
  404dda:	460d      	mov	r5, r1
  404ddc:	4604      	mov	r4, r0
  404dde:	b108      	cbz	r0, 404de4 <_fflush_r+0xc>
  404de0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404de2:	b1bb      	cbz	r3, 404e14 <_fflush_r+0x3c>
  404de4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404de8:	b188      	cbz	r0, 404e0e <_fflush_r+0x36>
  404dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404dec:	07db      	lsls	r3, r3, #31
  404dee:	d401      	bmi.n	404df4 <_fflush_r+0x1c>
  404df0:	0581      	lsls	r1, r0, #22
  404df2:	d517      	bpl.n	404e24 <_fflush_r+0x4c>
  404df4:	4620      	mov	r0, r4
  404df6:	4629      	mov	r1, r5
  404df8:	f7ff ff4e 	bl	404c98 <__sflush_r>
  404dfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404dfe:	07da      	lsls	r2, r3, #31
  404e00:	4604      	mov	r4, r0
  404e02:	d402      	bmi.n	404e0a <_fflush_r+0x32>
  404e04:	89ab      	ldrh	r3, [r5, #12]
  404e06:	059b      	lsls	r3, r3, #22
  404e08:	d507      	bpl.n	404e1a <_fflush_r+0x42>
  404e0a:	4620      	mov	r0, r4
  404e0c:	bd38      	pop	{r3, r4, r5, pc}
  404e0e:	4604      	mov	r4, r0
  404e10:	4620      	mov	r0, r4
  404e12:	bd38      	pop	{r3, r4, r5, pc}
  404e14:	f000 f838 	bl	404e88 <__sinit>
  404e18:	e7e4      	b.n	404de4 <_fflush_r+0xc>
  404e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404e1c:	f000 fbf6 	bl	40560c <__retarget_lock_release_recursive>
  404e20:	4620      	mov	r0, r4
  404e22:	bd38      	pop	{r3, r4, r5, pc}
  404e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404e26:	f000 fbef 	bl	405608 <__retarget_lock_acquire_recursive>
  404e2a:	e7e3      	b.n	404df4 <_fflush_r+0x1c>

00404e2c <_cleanup_r>:
  404e2c:	4901      	ldr	r1, [pc, #4]	; (404e34 <_cleanup_r+0x8>)
  404e2e:	f000 bbaf 	b.w	405590 <_fwalk_reent>
  404e32:	bf00      	nop
  404e34:	00406581 	.word	0x00406581

00404e38 <std.isra.0>:
  404e38:	b510      	push	{r4, lr}
  404e3a:	2300      	movs	r3, #0
  404e3c:	4604      	mov	r4, r0
  404e3e:	8181      	strh	r1, [r0, #12]
  404e40:	81c2      	strh	r2, [r0, #14]
  404e42:	6003      	str	r3, [r0, #0]
  404e44:	6043      	str	r3, [r0, #4]
  404e46:	6083      	str	r3, [r0, #8]
  404e48:	6643      	str	r3, [r0, #100]	; 0x64
  404e4a:	6103      	str	r3, [r0, #16]
  404e4c:	6143      	str	r3, [r0, #20]
  404e4e:	6183      	str	r3, [r0, #24]
  404e50:	4619      	mov	r1, r3
  404e52:	2208      	movs	r2, #8
  404e54:	305c      	adds	r0, #92	; 0x5c
  404e56:	f7fe fe41 	bl	403adc <memset>
  404e5a:	4807      	ldr	r0, [pc, #28]	; (404e78 <std.isra.0+0x40>)
  404e5c:	4907      	ldr	r1, [pc, #28]	; (404e7c <std.isra.0+0x44>)
  404e5e:	4a08      	ldr	r2, [pc, #32]	; (404e80 <std.isra.0+0x48>)
  404e60:	4b08      	ldr	r3, [pc, #32]	; (404e84 <std.isra.0+0x4c>)
  404e62:	6220      	str	r0, [r4, #32]
  404e64:	61e4      	str	r4, [r4, #28]
  404e66:	6261      	str	r1, [r4, #36]	; 0x24
  404e68:	62a2      	str	r2, [r4, #40]	; 0x28
  404e6a:	62e3      	str	r3, [r4, #44]	; 0x2c
  404e6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404e74:	f000 bbc4 	b.w	405600 <__retarget_lock_init_recursive>
  404e78:	004062c5 	.word	0x004062c5
  404e7c:	004062e9 	.word	0x004062e9
  404e80:	00406325 	.word	0x00406325
  404e84:	00406345 	.word	0x00406345

00404e88 <__sinit>:
  404e88:	b510      	push	{r4, lr}
  404e8a:	4604      	mov	r4, r0
  404e8c:	4812      	ldr	r0, [pc, #72]	; (404ed8 <__sinit+0x50>)
  404e8e:	f000 fbbb 	bl	405608 <__retarget_lock_acquire_recursive>
  404e92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404e94:	b9d2      	cbnz	r2, 404ecc <__sinit+0x44>
  404e96:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  404e9a:	4810      	ldr	r0, [pc, #64]	; (404edc <__sinit+0x54>)
  404e9c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404ea0:	2103      	movs	r1, #3
  404ea2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404ea6:	63e0      	str	r0, [r4, #60]	; 0x3c
  404ea8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  404eac:	6860      	ldr	r0, [r4, #4]
  404eae:	2104      	movs	r1, #4
  404eb0:	f7ff ffc2 	bl	404e38 <std.isra.0>
  404eb4:	2201      	movs	r2, #1
  404eb6:	2109      	movs	r1, #9
  404eb8:	68a0      	ldr	r0, [r4, #8]
  404eba:	f7ff ffbd 	bl	404e38 <std.isra.0>
  404ebe:	2202      	movs	r2, #2
  404ec0:	2112      	movs	r1, #18
  404ec2:	68e0      	ldr	r0, [r4, #12]
  404ec4:	f7ff ffb8 	bl	404e38 <std.isra.0>
  404ec8:	2301      	movs	r3, #1
  404eca:	63a3      	str	r3, [r4, #56]	; 0x38
  404ecc:	4802      	ldr	r0, [pc, #8]	; (404ed8 <__sinit+0x50>)
  404ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404ed2:	f000 bb9b 	b.w	40560c <__retarget_lock_release_recursive>
  404ed6:	bf00      	nop
  404ed8:	20008e04 	.word	0x20008e04
  404edc:	00404e2d 	.word	0x00404e2d

00404ee0 <__sfp_lock_acquire>:
  404ee0:	4801      	ldr	r0, [pc, #4]	; (404ee8 <__sfp_lock_acquire+0x8>)
  404ee2:	f000 bb91 	b.w	405608 <__retarget_lock_acquire_recursive>
  404ee6:	bf00      	nop
  404ee8:	20008e18 	.word	0x20008e18

00404eec <__sfp_lock_release>:
  404eec:	4801      	ldr	r0, [pc, #4]	; (404ef4 <__sfp_lock_release+0x8>)
  404eee:	f000 bb8d 	b.w	40560c <__retarget_lock_release_recursive>
  404ef2:	bf00      	nop
  404ef4:	20008e18 	.word	0x20008e18

00404ef8 <__libc_fini_array>:
  404ef8:	b538      	push	{r3, r4, r5, lr}
  404efa:	4c0a      	ldr	r4, [pc, #40]	; (404f24 <__libc_fini_array+0x2c>)
  404efc:	4d0a      	ldr	r5, [pc, #40]	; (404f28 <__libc_fini_array+0x30>)
  404efe:	1b64      	subs	r4, r4, r5
  404f00:	10a4      	asrs	r4, r4, #2
  404f02:	d00a      	beq.n	404f1a <__libc_fini_array+0x22>
  404f04:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404f08:	3b01      	subs	r3, #1
  404f0a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404f0e:	3c01      	subs	r4, #1
  404f10:	f855 3904 	ldr.w	r3, [r5], #-4
  404f14:	4798      	blx	r3
  404f16:	2c00      	cmp	r4, #0
  404f18:	d1f9      	bne.n	404f0e <__libc_fini_array+0x16>
  404f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404f1e:	f001 bccd 	b.w	4068bc <_fini>
  404f22:	bf00      	nop
  404f24:	004068cc 	.word	0x004068cc
  404f28:	004068c8 	.word	0x004068c8

00404f2c <__fputwc>:
  404f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404f30:	b082      	sub	sp, #8
  404f32:	4680      	mov	r8, r0
  404f34:	4689      	mov	r9, r1
  404f36:	4614      	mov	r4, r2
  404f38:	f000 fb54 	bl	4055e4 <__locale_mb_cur_max>
  404f3c:	2801      	cmp	r0, #1
  404f3e:	d036      	beq.n	404fae <__fputwc+0x82>
  404f40:	464a      	mov	r2, r9
  404f42:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404f46:	a901      	add	r1, sp, #4
  404f48:	4640      	mov	r0, r8
  404f4a:	f001 fa57 	bl	4063fc <_wcrtomb_r>
  404f4e:	1c42      	adds	r2, r0, #1
  404f50:	4606      	mov	r6, r0
  404f52:	d025      	beq.n	404fa0 <__fputwc+0x74>
  404f54:	b3a8      	cbz	r0, 404fc2 <__fputwc+0x96>
  404f56:	f89d e004 	ldrb.w	lr, [sp, #4]
  404f5a:	2500      	movs	r5, #0
  404f5c:	f10d 0a04 	add.w	sl, sp, #4
  404f60:	e009      	b.n	404f76 <__fputwc+0x4a>
  404f62:	6823      	ldr	r3, [r4, #0]
  404f64:	1c5a      	adds	r2, r3, #1
  404f66:	6022      	str	r2, [r4, #0]
  404f68:	f883 e000 	strb.w	lr, [r3]
  404f6c:	3501      	adds	r5, #1
  404f6e:	42b5      	cmp	r5, r6
  404f70:	d227      	bcs.n	404fc2 <__fputwc+0x96>
  404f72:	f815 e00a 	ldrb.w	lr, [r5, sl]
  404f76:	68a3      	ldr	r3, [r4, #8]
  404f78:	3b01      	subs	r3, #1
  404f7a:	2b00      	cmp	r3, #0
  404f7c:	60a3      	str	r3, [r4, #8]
  404f7e:	daf0      	bge.n	404f62 <__fputwc+0x36>
  404f80:	69a7      	ldr	r7, [r4, #24]
  404f82:	42bb      	cmp	r3, r7
  404f84:	4671      	mov	r1, lr
  404f86:	4622      	mov	r2, r4
  404f88:	4640      	mov	r0, r8
  404f8a:	db02      	blt.n	404f92 <__fputwc+0x66>
  404f8c:	f1be 0f0a 	cmp.w	lr, #10
  404f90:	d1e7      	bne.n	404f62 <__fputwc+0x36>
  404f92:	f001 f9db 	bl	40634c <__swbuf_r>
  404f96:	1c43      	adds	r3, r0, #1
  404f98:	d1e8      	bne.n	404f6c <__fputwc+0x40>
  404f9a:	b002      	add	sp, #8
  404f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404fa0:	89a3      	ldrh	r3, [r4, #12]
  404fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404fa6:	81a3      	strh	r3, [r4, #12]
  404fa8:	b002      	add	sp, #8
  404faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404fae:	f109 33ff 	add.w	r3, r9, #4294967295
  404fb2:	2bfe      	cmp	r3, #254	; 0xfe
  404fb4:	d8c4      	bhi.n	404f40 <__fputwc+0x14>
  404fb6:	fa5f fe89 	uxtb.w	lr, r9
  404fba:	4606      	mov	r6, r0
  404fbc:	f88d e004 	strb.w	lr, [sp, #4]
  404fc0:	e7cb      	b.n	404f5a <__fputwc+0x2e>
  404fc2:	4648      	mov	r0, r9
  404fc4:	b002      	add	sp, #8
  404fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404fca:	bf00      	nop

00404fcc <_fputwc_r>:
  404fcc:	b530      	push	{r4, r5, lr}
  404fce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404fd0:	f013 0f01 	tst.w	r3, #1
  404fd4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404fd8:	4614      	mov	r4, r2
  404fda:	b083      	sub	sp, #12
  404fdc:	4605      	mov	r5, r0
  404fde:	b29a      	uxth	r2, r3
  404fe0:	d101      	bne.n	404fe6 <_fputwc_r+0x1a>
  404fe2:	0590      	lsls	r0, r2, #22
  404fe4:	d51c      	bpl.n	405020 <_fputwc_r+0x54>
  404fe6:	0490      	lsls	r0, r2, #18
  404fe8:	d406      	bmi.n	404ff8 <_fputwc_r+0x2c>
  404fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404fec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404ff4:	81a3      	strh	r3, [r4, #12]
  404ff6:	6662      	str	r2, [r4, #100]	; 0x64
  404ff8:	4628      	mov	r0, r5
  404ffa:	4622      	mov	r2, r4
  404ffc:	f7ff ff96 	bl	404f2c <__fputwc>
  405000:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405002:	07da      	lsls	r2, r3, #31
  405004:	4605      	mov	r5, r0
  405006:	d402      	bmi.n	40500e <_fputwc_r+0x42>
  405008:	89a3      	ldrh	r3, [r4, #12]
  40500a:	059b      	lsls	r3, r3, #22
  40500c:	d502      	bpl.n	405014 <_fputwc_r+0x48>
  40500e:	4628      	mov	r0, r5
  405010:	b003      	add	sp, #12
  405012:	bd30      	pop	{r4, r5, pc}
  405014:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405016:	f000 faf9 	bl	40560c <__retarget_lock_release_recursive>
  40501a:	4628      	mov	r0, r5
  40501c:	b003      	add	sp, #12
  40501e:	bd30      	pop	{r4, r5, pc}
  405020:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405022:	9101      	str	r1, [sp, #4]
  405024:	f000 faf0 	bl	405608 <__retarget_lock_acquire_recursive>
  405028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40502c:	9901      	ldr	r1, [sp, #4]
  40502e:	b29a      	uxth	r2, r3
  405030:	e7d9      	b.n	404fe6 <_fputwc_r+0x1a>
  405032:	bf00      	nop

00405034 <_malloc_trim_r>:
  405034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405036:	4f24      	ldr	r7, [pc, #144]	; (4050c8 <_malloc_trim_r+0x94>)
  405038:	460c      	mov	r4, r1
  40503a:	4606      	mov	r6, r0
  40503c:	f000 ff7e 	bl	405f3c <__malloc_lock>
  405040:	68bb      	ldr	r3, [r7, #8]
  405042:	685d      	ldr	r5, [r3, #4]
  405044:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405048:	310f      	adds	r1, #15
  40504a:	f025 0503 	bic.w	r5, r5, #3
  40504e:	4429      	add	r1, r5
  405050:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405054:	f021 010f 	bic.w	r1, r1, #15
  405058:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40505c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405060:	db07      	blt.n	405072 <_malloc_trim_r+0x3e>
  405062:	2100      	movs	r1, #0
  405064:	4630      	mov	r0, r6
  405066:	f001 f91b 	bl	4062a0 <_sbrk_r>
  40506a:	68bb      	ldr	r3, [r7, #8]
  40506c:	442b      	add	r3, r5
  40506e:	4298      	cmp	r0, r3
  405070:	d004      	beq.n	40507c <_malloc_trim_r+0x48>
  405072:	4630      	mov	r0, r6
  405074:	f000 ff68 	bl	405f48 <__malloc_unlock>
  405078:	2000      	movs	r0, #0
  40507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40507c:	4261      	negs	r1, r4
  40507e:	4630      	mov	r0, r6
  405080:	f001 f90e 	bl	4062a0 <_sbrk_r>
  405084:	3001      	adds	r0, #1
  405086:	d00d      	beq.n	4050a4 <_malloc_trim_r+0x70>
  405088:	4b10      	ldr	r3, [pc, #64]	; (4050cc <_malloc_trim_r+0x98>)
  40508a:	68ba      	ldr	r2, [r7, #8]
  40508c:	6819      	ldr	r1, [r3, #0]
  40508e:	1b2d      	subs	r5, r5, r4
  405090:	f045 0501 	orr.w	r5, r5, #1
  405094:	4630      	mov	r0, r6
  405096:	1b09      	subs	r1, r1, r4
  405098:	6055      	str	r5, [r2, #4]
  40509a:	6019      	str	r1, [r3, #0]
  40509c:	f000 ff54 	bl	405f48 <__malloc_unlock>
  4050a0:	2001      	movs	r0, #1
  4050a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4050a4:	2100      	movs	r1, #0
  4050a6:	4630      	mov	r0, r6
  4050a8:	f001 f8fa 	bl	4062a0 <_sbrk_r>
  4050ac:	68ba      	ldr	r2, [r7, #8]
  4050ae:	1a83      	subs	r3, r0, r2
  4050b0:	2b0f      	cmp	r3, #15
  4050b2:	ddde      	ble.n	405072 <_malloc_trim_r+0x3e>
  4050b4:	4c06      	ldr	r4, [pc, #24]	; (4050d0 <_malloc_trim_r+0x9c>)
  4050b6:	4905      	ldr	r1, [pc, #20]	; (4050cc <_malloc_trim_r+0x98>)
  4050b8:	6824      	ldr	r4, [r4, #0]
  4050ba:	f043 0301 	orr.w	r3, r3, #1
  4050be:	1b00      	subs	r0, r0, r4
  4050c0:	6053      	str	r3, [r2, #4]
  4050c2:	6008      	str	r0, [r1, #0]
  4050c4:	e7d5      	b.n	405072 <_malloc_trim_r+0x3e>
  4050c6:	bf00      	nop
  4050c8:	200005b0 	.word	0x200005b0
  4050cc:	20008cf4 	.word	0x20008cf4
  4050d0:	200009b8 	.word	0x200009b8

004050d4 <_free_r>:
  4050d4:	2900      	cmp	r1, #0
  4050d6:	d044      	beq.n	405162 <_free_r+0x8e>
  4050d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050dc:	460d      	mov	r5, r1
  4050de:	4680      	mov	r8, r0
  4050e0:	f000 ff2c 	bl	405f3c <__malloc_lock>
  4050e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4050e8:	4969      	ldr	r1, [pc, #420]	; (405290 <_free_r+0x1bc>)
  4050ea:	f027 0301 	bic.w	r3, r7, #1
  4050ee:	f1a5 0408 	sub.w	r4, r5, #8
  4050f2:	18e2      	adds	r2, r4, r3
  4050f4:	688e      	ldr	r6, [r1, #8]
  4050f6:	6850      	ldr	r0, [r2, #4]
  4050f8:	42b2      	cmp	r2, r6
  4050fa:	f020 0003 	bic.w	r0, r0, #3
  4050fe:	d05e      	beq.n	4051be <_free_r+0xea>
  405100:	07fe      	lsls	r6, r7, #31
  405102:	6050      	str	r0, [r2, #4]
  405104:	d40b      	bmi.n	40511e <_free_r+0x4a>
  405106:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40510a:	1be4      	subs	r4, r4, r7
  40510c:	f101 0e08 	add.w	lr, r1, #8
  405110:	68a5      	ldr	r5, [r4, #8]
  405112:	4575      	cmp	r5, lr
  405114:	443b      	add	r3, r7
  405116:	d06d      	beq.n	4051f4 <_free_r+0x120>
  405118:	68e7      	ldr	r7, [r4, #12]
  40511a:	60ef      	str	r7, [r5, #12]
  40511c:	60bd      	str	r5, [r7, #8]
  40511e:	1815      	adds	r5, r2, r0
  405120:	686d      	ldr	r5, [r5, #4]
  405122:	07ed      	lsls	r5, r5, #31
  405124:	d53e      	bpl.n	4051a4 <_free_r+0xd0>
  405126:	f043 0201 	orr.w	r2, r3, #1
  40512a:	6062      	str	r2, [r4, #4]
  40512c:	50e3      	str	r3, [r4, r3]
  40512e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405132:	d217      	bcs.n	405164 <_free_r+0x90>
  405134:	08db      	lsrs	r3, r3, #3
  405136:	1c58      	adds	r0, r3, #1
  405138:	109a      	asrs	r2, r3, #2
  40513a:	684d      	ldr	r5, [r1, #4]
  40513c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405140:	60a7      	str	r7, [r4, #8]
  405142:	2301      	movs	r3, #1
  405144:	4093      	lsls	r3, r2
  405146:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40514a:	432b      	orrs	r3, r5
  40514c:	3a08      	subs	r2, #8
  40514e:	60e2      	str	r2, [r4, #12]
  405150:	604b      	str	r3, [r1, #4]
  405152:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405156:	60fc      	str	r4, [r7, #12]
  405158:	4640      	mov	r0, r8
  40515a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40515e:	f000 bef3 	b.w	405f48 <__malloc_unlock>
  405162:	4770      	bx	lr
  405164:	0a5a      	lsrs	r2, r3, #9
  405166:	2a04      	cmp	r2, #4
  405168:	d852      	bhi.n	405210 <_free_r+0x13c>
  40516a:	099a      	lsrs	r2, r3, #6
  40516c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405170:	00ff      	lsls	r7, r7, #3
  405172:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405176:	19c8      	adds	r0, r1, r7
  405178:	59ca      	ldr	r2, [r1, r7]
  40517a:	3808      	subs	r0, #8
  40517c:	4290      	cmp	r0, r2
  40517e:	d04f      	beq.n	405220 <_free_r+0x14c>
  405180:	6851      	ldr	r1, [r2, #4]
  405182:	f021 0103 	bic.w	r1, r1, #3
  405186:	428b      	cmp	r3, r1
  405188:	d232      	bcs.n	4051f0 <_free_r+0x11c>
  40518a:	6892      	ldr	r2, [r2, #8]
  40518c:	4290      	cmp	r0, r2
  40518e:	d1f7      	bne.n	405180 <_free_r+0xac>
  405190:	68c3      	ldr	r3, [r0, #12]
  405192:	60a0      	str	r0, [r4, #8]
  405194:	60e3      	str	r3, [r4, #12]
  405196:	609c      	str	r4, [r3, #8]
  405198:	60c4      	str	r4, [r0, #12]
  40519a:	4640      	mov	r0, r8
  40519c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4051a0:	f000 bed2 	b.w	405f48 <__malloc_unlock>
  4051a4:	6895      	ldr	r5, [r2, #8]
  4051a6:	4f3b      	ldr	r7, [pc, #236]	; (405294 <_free_r+0x1c0>)
  4051a8:	42bd      	cmp	r5, r7
  4051aa:	4403      	add	r3, r0
  4051ac:	d040      	beq.n	405230 <_free_r+0x15c>
  4051ae:	68d0      	ldr	r0, [r2, #12]
  4051b0:	60e8      	str	r0, [r5, #12]
  4051b2:	f043 0201 	orr.w	r2, r3, #1
  4051b6:	6085      	str	r5, [r0, #8]
  4051b8:	6062      	str	r2, [r4, #4]
  4051ba:	50e3      	str	r3, [r4, r3]
  4051bc:	e7b7      	b.n	40512e <_free_r+0x5a>
  4051be:	07ff      	lsls	r7, r7, #31
  4051c0:	4403      	add	r3, r0
  4051c2:	d407      	bmi.n	4051d4 <_free_r+0x100>
  4051c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4051c8:	1aa4      	subs	r4, r4, r2
  4051ca:	4413      	add	r3, r2
  4051cc:	68a0      	ldr	r0, [r4, #8]
  4051ce:	68e2      	ldr	r2, [r4, #12]
  4051d0:	60c2      	str	r2, [r0, #12]
  4051d2:	6090      	str	r0, [r2, #8]
  4051d4:	4a30      	ldr	r2, [pc, #192]	; (405298 <_free_r+0x1c4>)
  4051d6:	6812      	ldr	r2, [r2, #0]
  4051d8:	f043 0001 	orr.w	r0, r3, #1
  4051dc:	4293      	cmp	r3, r2
  4051de:	6060      	str	r0, [r4, #4]
  4051e0:	608c      	str	r4, [r1, #8]
  4051e2:	d3b9      	bcc.n	405158 <_free_r+0x84>
  4051e4:	4b2d      	ldr	r3, [pc, #180]	; (40529c <_free_r+0x1c8>)
  4051e6:	4640      	mov	r0, r8
  4051e8:	6819      	ldr	r1, [r3, #0]
  4051ea:	f7ff ff23 	bl	405034 <_malloc_trim_r>
  4051ee:	e7b3      	b.n	405158 <_free_r+0x84>
  4051f0:	4610      	mov	r0, r2
  4051f2:	e7cd      	b.n	405190 <_free_r+0xbc>
  4051f4:	1811      	adds	r1, r2, r0
  4051f6:	6849      	ldr	r1, [r1, #4]
  4051f8:	07c9      	lsls	r1, r1, #31
  4051fa:	d444      	bmi.n	405286 <_free_r+0x1b2>
  4051fc:	6891      	ldr	r1, [r2, #8]
  4051fe:	68d2      	ldr	r2, [r2, #12]
  405200:	60ca      	str	r2, [r1, #12]
  405202:	4403      	add	r3, r0
  405204:	f043 0001 	orr.w	r0, r3, #1
  405208:	6091      	str	r1, [r2, #8]
  40520a:	6060      	str	r0, [r4, #4]
  40520c:	50e3      	str	r3, [r4, r3]
  40520e:	e7a3      	b.n	405158 <_free_r+0x84>
  405210:	2a14      	cmp	r2, #20
  405212:	d816      	bhi.n	405242 <_free_r+0x16e>
  405214:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405218:	00ff      	lsls	r7, r7, #3
  40521a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40521e:	e7aa      	b.n	405176 <_free_r+0xa2>
  405220:	10aa      	asrs	r2, r5, #2
  405222:	2301      	movs	r3, #1
  405224:	684d      	ldr	r5, [r1, #4]
  405226:	4093      	lsls	r3, r2
  405228:	432b      	orrs	r3, r5
  40522a:	604b      	str	r3, [r1, #4]
  40522c:	4603      	mov	r3, r0
  40522e:	e7b0      	b.n	405192 <_free_r+0xbe>
  405230:	f043 0201 	orr.w	r2, r3, #1
  405234:	614c      	str	r4, [r1, #20]
  405236:	610c      	str	r4, [r1, #16]
  405238:	60e5      	str	r5, [r4, #12]
  40523a:	60a5      	str	r5, [r4, #8]
  40523c:	6062      	str	r2, [r4, #4]
  40523e:	50e3      	str	r3, [r4, r3]
  405240:	e78a      	b.n	405158 <_free_r+0x84>
  405242:	2a54      	cmp	r2, #84	; 0x54
  405244:	d806      	bhi.n	405254 <_free_r+0x180>
  405246:	0b1a      	lsrs	r2, r3, #12
  405248:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40524c:	00ff      	lsls	r7, r7, #3
  40524e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405252:	e790      	b.n	405176 <_free_r+0xa2>
  405254:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405258:	d806      	bhi.n	405268 <_free_r+0x194>
  40525a:	0bda      	lsrs	r2, r3, #15
  40525c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405260:	00ff      	lsls	r7, r7, #3
  405262:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405266:	e786      	b.n	405176 <_free_r+0xa2>
  405268:	f240 5054 	movw	r0, #1364	; 0x554
  40526c:	4282      	cmp	r2, r0
  40526e:	d806      	bhi.n	40527e <_free_r+0x1aa>
  405270:	0c9a      	lsrs	r2, r3, #18
  405272:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405276:	00ff      	lsls	r7, r7, #3
  405278:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40527c:	e77b      	b.n	405176 <_free_r+0xa2>
  40527e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405282:	257e      	movs	r5, #126	; 0x7e
  405284:	e777      	b.n	405176 <_free_r+0xa2>
  405286:	f043 0101 	orr.w	r1, r3, #1
  40528a:	6061      	str	r1, [r4, #4]
  40528c:	6013      	str	r3, [r2, #0]
  40528e:	e763      	b.n	405158 <_free_r+0x84>
  405290:	200005b0 	.word	0x200005b0
  405294:	200005b8 	.word	0x200005b8
  405298:	200009bc 	.word	0x200009bc
  40529c:	20008d24 	.word	0x20008d24

004052a0 <__sfvwrite_r>:
  4052a0:	6893      	ldr	r3, [r2, #8]
  4052a2:	2b00      	cmp	r3, #0
  4052a4:	d073      	beq.n	40538e <__sfvwrite_r+0xee>
  4052a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052aa:	898b      	ldrh	r3, [r1, #12]
  4052ac:	b083      	sub	sp, #12
  4052ae:	460c      	mov	r4, r1
  4052b0:	0719      	lsls	r1, r3, #28
  4052b2:	9000      	str	r0, [sp, #0]
  4052b4:	4616      	mov	r6, r2
  4052b6:	d526      	bpl.n	405306 <__sfvwrite_r+0x66>
  4052b8:	6922      	ldr	r2, [r4, #16]
  4052ba:	b322      	cbz	r2, 405306 <__sfvwrite_r+0x66>
  4052bc:	f013 0002 	ands.w	r0, r3, #2
  4052c0:	6835      	ldr	r5, [r6, #0]
  4052c2:	d02c      	beq.n	40531e <__sfvwrite_r+0x7e>
  4052c4:	f04f 0900 	mov.w	r9, #0
  4052c8:	4fb0      	ldr	r7, [pc, #704]	; (40558c <__sfvwrite_r+0x2ec>)
  4052ca:	46c8      	mov	r8, r9
  4052cc:	46b2      	mov	sl, r6
  4052ce:	45b8      	cmp	r8, r7
  4052d0:	4643      	mov	r3, r8
  4052d2:	464a      	mov	r2, r9
  4052d4:	bf28      	it	cs
  4052d6:	463b      	movcs	r3, r7
  4052d8:	9800      	ldr	r0, [sp, #0]
  4052da:	f1b8 0f00 	cmp.w	r8, #0
  4052de:	d050      	beq.n	405382 <__sfvwrite_r+0xe2>
  4052e0:	69e1      	ldr	r1, [r4, #28]
  4052e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4052e4:	47b0      	blx	r6
  4052e6:	2800      	cmp	r0, #0
  4052e8:	dd58      	ble.n	40539c <__sfvwrite_r+0xfc>
  4052ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4052ee:	1a1b      	subs	r3, r3, r0
  4052f0:	4481      	add	r9, r0
  4052f2:	eba8 0800 	sub.w	r8, r8, r0
  4052f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4052fa:	2b00      	cmp	r3, #0
  4052fc:	d1e7      	bne.n	4052ce <__sfvwrite_r+0x2e>
  4052fe:	2000      	movs	r0, #0
  405300:	b003      	add	sp, #12
  405302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405306:	4621      	mov	r1, r4
  405308:	9800      	ldr	r0, [sp, #0]
  40530a:	f7ff fc51 	bl	404bb0 <__swsetup_r>
  40530e:	2800      	cmp	r0, #0
  405310:	f040 8133 	bne.w	40557a <__sfvwrite_r+0x2da>
  405314:	89a3      	ldrh	r3, [r4, #12]
  405316:	6835      	ldr	r5, [r6, #0]
  405318:	f013 0002 	ands.w	r0, r3, #2
  40531c:	d1d2      	bne.n	4052c4 <__sfvwrite_r+0x24>
  40531e:	f013 0901 	ands.w	r9, r3, #1
  405322:	d145      	bne.n	4053b0 <__sfvwrite_r+0x110>
  405324:	464f      	mov	r7, r9
  405326:	9601      	str	r6, [sp, #4]
  405328:	b337      	cbz	r7, 405378 <__sfvwrite_r+0xd8>
  40532a:	059a      	lsls	r2, r3, #22
  40532c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405330:	f140 8083 	bpl.w	40543a <__sfvwrite_r+0x19a>
  405334:	4547      	cmp	r7, r8
  405336:	46c3      	mov	fp, r8
  405338:	f0c0 80ab 	bcc.w	405492 <__sfvwrite_r+0x1f2>
  40533c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405340:	f040 80ac 	bne.w	40549c <__sfvwrite_r+0x1fc>
  405344:	6820      	ldr	r0, [r4, #0]
  405346:	46ba      	mov	sl, r7
  405348:	465a      	mov	r2, fp
  40534a:	4649      	mov	r1, r9
  40534c:	f000 fd92 	bl	405e74 <memmove>
  405350:	68a2      	ldr	r2, [r4, #8]
  405352:	6823      	ldr	r3, [r4, #0]
  405354:	eba2 0208 	sub.w	r2, r2, r8
  405358:	445b      	add	r3, fp
  40535a:	60a2      	str	r2, [r4, #8]
  40535c:	6023      	str	r3, [r4, #0]
  40535e:	9a01      	ldr	r2, [sp, #4]
  405360:	6893      	ldr	r3, [r2, #8]
  405362:	eba3 030a 	sub.w	r3, r3, sl
  405366:	44d1      	add	r9, sl
  405368:	eba7 070a 	sub.w	r7, r7, sl
  40536c:	6093      	str	r3, [r2, #8]
  40536e:	2b00      	cmp	r3, #0
  405370:	d0c5      	beq.n	4052fe <__sfvwrite_r+0x5e>
  405372:	89a3      	ldrh	r3, [r4, #12]
  405374:	2f00      	cmp	r7, #0
  405376:	d1d8      	bne.n	40532a <__sfvwrite_r+0x8a>
  405378:	f8d5 9000 	ldr.w	r9, [r5]
  40537c:	686f      	ldr	r7, [r5, #4]
  40537e:	3508      	adds	r5, #8
  405380:	e7d2      	b.n	405328 <__sfvwrite_r+0x88>
  405382:	f8d5 9000 	ldr.w	r9, [r5]
  405386:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40538a:	3508      	adds	r5, #8
  40538c:	e79f      	b.n	4052ce <__sfvwrite_r+0x2e>
  40538e:	2000      	movs	r0, #0
  405390:	4770      	bx	lr
  405392:	4621      	mov	r1, r4
  405394:	9800      	ldr	r0, [sp, #0]
  405396:	f7ff fd1f 	bl	404dd8 <_fflush_r>
  40539a:	b370      	cbz	r0, 4053fa <__sfvwrite_r+0x15a>
  40539c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053a4:	f04f 30ff 	mov.w	r0, #4294967295
  4053a8:	81a3      	strh	r3, [r4, #12]
  4053aa:	b003      	add	sp, #12
  4053ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053b0:	4681      	mov	r9, r0
  4053b2:	4633      	mov	r3, r6
  4053b4:	464e      	mov	r6, r9
  4053b6:	46a8      	mov	r8, r5
  4053b8:	469a      	mov	sl, r3
  4053ba:	464d      	mov	r5, r9
  4053bc:	b34e      	cbz	r6, 405412 <__sfvwrite_r+0x172>
  4053be:	b380      	cbz	r0, 405422 <__sfvwrite_r+0x182>
  4053c0:	6820      	ldr	r0, [r4, #0]
  4053c2:	6923      	ldr	r3, [r4, #16]
  4053c4:	6962      	ldr	r2, [r4, #20]
  4053c6:	45b1      	cmp	r9, r6
  4053c8:	46cb      	mov	fp, r9
  4053ca:	bf28      	it	cs
  4053cc:	46b3      	movcs	fp, r6
  4053ce:	4298      	cmp	r0, r3
  4053d0:	465f      	mov	r7, fp
  4053d2:	d904      	bls.n	4053de <__sfvwrite_r+0x13e>
  4053d4:	68a3      	ldr	r3, [r4, #8]
  4053d6:	4413      	add	r3, r2
  4053d8:	459b      	cmp	fp, r3
  4053da:	f300 80a6 	bgt.w	40552a <__sfvwrite_r+0x28a>
  4053de:	4593      	cmp	fp, r2
  4053e0:	db4b      	blt.n	40547a <__sfvwrite_r+0x1da>
  4053e2:	4613      	mov	r3, r2
  4053e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4053e6:	69e1      	ldr	r1, [r4, #28]
  4053e8:	9800      	ldr	r0, [sp, #0]
  4053ea:	462a      	mov	r2, r5
  4053ec:	47b8      	blx	r7
  4053ee:	1e07      	subs	r7, r0, #0
  4053f0:	ddd4      	ble.n	40539c <__sfvwrite_r+0xfc>
  4053f2:	ebb9 0907 	subs.w	r9, r9, r7
  4053f6:	d0cc      	beq.n	405392 <__sfvwrite_r+0xf2>
  4053f8:	2001      	movs	r0, #1
  4053fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4053fe:	1bdb      	subs	r3, r3, r7
  405400:	443d      	add	r5, r7
  405402:	1bf6      	subs	r6, r6, r7
  405404:	f8ca 3008 	str.w	r3, [sl, #8]
  405408:	2b00      	cmp	r3, #0
  40540a:	f43f af78 	beq.w	4052fe <__sfvwrite_r+0x5e>
  40540e:	2e00      	cmp	r6, #0
  405410:	d1d5      	bne.n	4053be <__sfvwrite_r+0x11e>
  405412:	f108 0308 	add.w	r3, r8, #8
  405416:	e913 0060 	ldmdb	r3, {r5, r6}
  40541a:	4698      	mov	r8, r3
  40541c:	3308      	adds	r3, #8
  40541e:	2e00      	cmp	r6, #0
  405420:	d0f9      	beq.n	405416 <__sfvwrite_r+0x176>
  405422:	4632      	mov	r2, r6
  405424:	210a      	movs	r1, #10
  405426:	4628      	mov	r0, r5
  405428:	f000 fc3a 	bl	405ca0 <memchr>
  40542c:	2800      	cmp	r0, #0
  40542e:	f000 80a1 	beq.w	405574 <__sfvwrite_r+0x2d4>
  405432:	3001      	adds	r0, #1
  405434:	eba0 0905 	sub.w	r9, r0, r5
  405438:	e7c2      	b.n	4053c0 <__sfvwrite_r+0x120>
  40543a:	6820      	ldr	r0, [r4, #0]
  40543c:	6923      	ldr	r3, [r4, #16]
  40543e:	4298      	cmp	r0, r3
  405440:	d802      	bhi.n	405448 <__sfvwrite_r+0x1a8>
  405442:	6963      	ldr	r3, [r4, #20]
  405444:	429f      	cmp	r7, r3
  405446:	d25d      	bcs.n	405504 <__sfvwrite_r+0x264>
  405448:	45b8      	cmp	r8, r7
  40544a:	bf28      	it	cs
  40544c:	46b8      	movcs	r8, r7
  40544e:	4642      	mov	r2, r8
  405450:	4649      	mov	r1, r9
  405452:	f000 fd0f 	bl	405e74 <memmove>
  405456:	68a3      	ldr	r3, [r4, #8]
  405458:	6822      	ldr	r2, [r4, #0]
  40545a:	eba3 0308 	sub.w	r3, r3, r8
  40545e:	4442      	add	r2, r8
  405460:	60a3      	str	r3, [r4, #8]
  405462:	6022      	str	r2, [r4, #0]
  405464:	b10b      	cbz	r3, 40546a <__sfvwrite_r+0x1ca>
  405466:	46c2      	mov	sl, r8
  405468:	e779      	b.n	40535e <__sfvwrite_r+0xbe>
  40546a:	4621      	mov	r1, r4
  40546c:	9800      	ldr	r0, [sp, #0]
  40546e:	f7ff fcb3 	bl	404dd8 <_fflush_r>
  405472:	2800      	cmp	r0, #0
  405474:	d192      	bne.n	40539c <__sfvwrite_r+0xfc>
  405476:	46c2      	mov	sl, r8
  405478:	e771      	b.n	40535e <__sfvwrite_r+0xbe>
  40547a:	465a      	mov	r2, fp
  40547c:	4629      	mov	r1, r5
  40547e:	f000 fcf9 	bl	405e74 <memmove>
  405482:	68a2      	ldr	r2, [r4, #8]
  405484:	6823      	ldr	r3, [r4, #0]
  405486:	eba2 020b 	sub.w	r2, r2, fp
  40548a:	445b      	add	r3, fp
  40548c:	60a2      	str	r2, [r4, #8]
  40548e:	6023      	str	r3, [r4, #0]
  405490:	e7af      	b.n	4053f2 <__sfvwrite_r+0x152>
  405492:	6820      	ldr	r0, [r4, #0]
  405494:	46b8      	mov	r8, r7
  405496:	46ba      	mov	sl, r7
  405498:	46bb      	mov	fp, r7
  40549a:	e755      	b.n	405348 <__sfvwrite_r+0xa8>
  40549c:	6962      	ldr	r2, [r4, #20]
  40549e:	6820      	ldr	r0, [r4, #0]
  4054a0:	6921      	ldr	r1, [r4, #16]
  4054a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4054a6:	eba0 0a01 	sub.w	sl, r0, r1
  4054aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4054ae:	f10a 0001 	add.w	r0, sl, #1
  4054b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4054b6:	4438      	add	r0, r7
  4054b8:	4540      	cmp	r0, r8
  4054ba:	4642      	mov	r2, r8
  4054bc:	bf84      	itt	hi
  4054be:	4680      	movhi	r8, r0
  4054c0:	4642      	movhi	r2, r8
  4054c2:	055b      	lsls	r3, r3, #21
  4054c4:	d544      	bpl.n	405550 <__sfvwrite_r+0x2b0>
  4054c6:	4611      	mov	r1, r2
  4054c8:	9800      	ldr	r0, [sp, #0]
  4054ca:	f000 f921 	bl	405710 <_malloc_r>
  4054ce:	4683      	mov	fp, r0
  4054d0:	2800      	cmp	r0, #0
  4054d2:	d055      	beq.n	405580 <__sfvwrite_r+0x2e0>
  4054d4:	4652      	mov	r2, sl
  4054d6:	6921      	ldr	r1, [r4, #16]
  4054d8:	f000 fc32 	bl	405d40 <memcpy>
  4054dc:	89a3      	ldrh	r3, [r4, #12]
  4054de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4054e6:	81a3      	strh	r3, [r4, #12]
  4054e8:	eb0b 000a 	add.w	r0, fp, sl
  4054ec:	eba8 030a 	sub.w	r3, r8, sl
  4054f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4054f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4054f8:	6020      	str	r0, [r4, #0]
  4054fa:	60a3      	str	r3, [r4, #8]
  4054fc:	46b8      	mov	r8, r7
  4054fe:	46ba      	mov	sl, r7
  405500:	46bb      	mov	fp, r7
  405502:	e721      	b.n	405348 <__sfvwrite_r+0xa8>
  405504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405508:	42b9      	cmp	r1, r7
  40550a:	bf28      	it	cs
  40550c:	4639      	movcs	r1, r7
  40550e:	464a      	mov	r2, r9
  405510:	fb91 f1f3 	sdiv	r1, r1, r3
  405514:	9800      	ldr	r0, [sp, #0]
  405516:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405518:	fb03 f301 	mul.w	r3, r3, r1
  40551c:	69e1      	ldr	r1, [r4, #28]
  40551e:	47b0      	blx	r6
  405520:	f1b0 0a00 	subs.w	sl, r0, #0
  405524:	f73f af1b 	bgt.w	40535e <__sfvwrite_r+0xbe>
  405528:	e738      	b.n	40539c <__sfvwrite_r+0xfc>
  40552a:	461a      	mov	r2, r3
  40552c:	4629      	mov	r1, r5
  40552e:	9301      	str	r3, [sp, #4]
  405530:	f000 fca0 	bl	405e74 <memmove>
  405534:	6822      	ldr	r2, [r4, #0]
  405536:	9b01      	ldr	r3, [sp, #4]
  405538:	9800      	ldr	r0, [sp, #0]
  40553a:	441a      	add	r2, r3
  40553c:	6022      	str	r2, [r4, #0]
  40553e:	4621      	mov	r1, r4
  405540:	f7ff fc4a 	bl	404dd8 <_fflush_r>
  405544:	9b01      	ldr	r3, [sp, #4]
  405546:	2800      	cmp	r0, #0
  405548:	f47f af28 	bne.w	40539c <__sfvwrite_r+0xfc>
  40554c:	461f      	mov	r7, r3
  40554e:	e750      	b.n	4053f2 <__sfvwrite_r+0x152>
  405550:	9800      	ldr	r0, [sp, #0]
  405552:	f000 fcff 	bl	405f54 <_realloc_r>
  405556:	4683      	mov	fp, r0
  405558:	2800      	cmp	r0, #0
  40555a:	d1c5      	bne.n	4054e8 <__sfvwrite_r+0x248>
  40555c:	9d00      	ldr	r5, [sp, #0]
  40555e:	6921      	ldr	r1, [r4, #16]
  405560:	4628      	mov	r0, r5
  405562:	f7ff fdb7 	bl	4050d4 <_free_r>
  405566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40556a:	220c      	movs	r2, #12
  40556c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405570:	602a      	str	r2, [r5, #0]
  405572:	e715      	b.n	4053a0 <__sfvwrite_r+0x100>
  405574:	f106 0901 	add.w	r9, r6, #1
  405578:	e722      	b.n	4053c0 <__sfvwrite_r+0x120>
  40557a:	f04f 30ff 	mov.w	r0, #4294967295
  40557e:	e6bf      	b.n	405300 <__sfvwrite_r+0x60>
  405580:	9a00      	ldr	r2, [sp, #0]
  405582:	230c      	movs	r3, #12
  405584:	6013      	str	r3, [r2, #0]
  405586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40558a:	e709      	b.n	4053a0 <__sfvwrite_r+0x100>
  40558c:	7ffffc00 	.word	0x7ffffc00

00405590 <_fwalk_reent>:
  405590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405594:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405598:	d01f      	beq.n	4055da <_fwalk_reent+0x4a>
  40559a:	4688      	mov	r8, r1
  40559c:	4606      	mov	r6, r0
  40559e:	f04f 0900 	mov.w	r9, #0
  4055a2:	687d      	ldr	r5, [r7, #4]
  4055a4:	68bc      	ldr	r4, [r7, #8]
  4055a6:	3d01      	subs	r5, #1
  4055a8:	d411      	bmi.n	4055ce <_fwalk_reent+0x3e>
  4055aa:	89a3      	ldrh	r3, [r4, #12]
  4055ac:	2b01      	cmp	r3, #1
  4055ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4055b2:	d908      	bls.n	4055c6 <_fwalk_reent+0x36>
  4055b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4055b8:	3301      	adds	r3, #1
  4055ba:	4621      	mov	r1, r4
  4055bc:	4630      	mov	r0, r6
  4055be:	d002      	beq.n	4055c6 <_fwalk_reent+0x36>
  4055c0:	47c0      	blx	r8
  4055c2:	ea49 0900 	orr.w	r9, r9, r0
  4055c6:	1c6b      	adds	r3, r5, #1
  4055c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4055cc:	d1ed      	bne.n	4055aa <_fwalk_reent+0x1a>
  4055ce:	683f      	ldr	r7, [r7, #0]
  4055d0:	2f00      	cmp	r7, #0
  4055d2:	d1e6      	bne.n	4055a2 <_fwalk_reent+0x12>
  4055d4:	4648      	mov	r0, r9
  4055d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4055da:	46b9      	mov	r9, r7
  4055dc:	4648      	mov	r0, r9
  4055de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4055e2:	bf00      	nop

004055e4 <__locale_mb_cur_max>:
  4055e4:	4b04      	ldr	r3, [pc, #16]	; (4055f8 <__locale_mb_cur_max+0x14>)
  4055e6:	4a05      	ldr	r2, [pc, #20]	; (4055fc <__locale_mb_cur_max+0x18>)
  4055e8:	681b      	ldr	r3, [r3, #0]
  4055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4055ec:	2b00      	cmp	r3, #0
  4055ee:	bf08      	it	eq
  4055f0:	4613      	moveq	r3, r2
  4055f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4055f6:	4770      	bx	lr
  4055f8:	20000010 	.word	0x20000010
  4055fc:	20000444 	.word	0x20000444

00405600 <__retarget_lock_init_recursive>:
  405600:	4770      	bx	lr
  405602:	bf00      	nop

00405604 <__retarget_lock_close_recursive>:
  405604:	4770      	bx	lr
  405606:	bf00      	nop

00405608 <__retarget_lock_acquire_recursive>:
  405608:	4770      	bx	lr
  40560a:	bf00      	nop

0040560c <__retarget_lock_release_recursive>:
  40560c:	4770      	bx	lr
  40560e:	bf00      	nop

00405610 <__swhatbuf_r>:
  405610:	b570      	push	{r4, r5, r6, lr}
  405612:	460c      	mov	r4, r1
  405614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405618:	2900      	cmp	r1, #0
  40561a:	b090      	sub	sp, #64	; 0x40
  40561c:	4615      	mov	r5, r2
  40561e:	461e      	mov	r6, r3
  405620:	db14      	blt.n	40564c <__swhatbuf_r+0x3c>
  405622:	aa01      	add	r2, sp, #4
  405624:	f001 f80e 	bl	406644 <_fstat_r>
  405628:	2800      	cmp	r0, #0
  40562a:	db0f      	blt.n	40564c <__swhatbuf_r+0x3c>
  40562c:	9a02      	ldr	r2, [sp, #8]
  40562e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405632:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405636:	fab2 f282 	clz	r2, r2
  40563a:	0952      	lsrs	r2, r2, #5
  40563c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405640:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405644:	6032      	str	r2, [r6, #0]
  405646:	602b      	str	r3, [r5, #0]
  405648:	b010      	add	sp, #64	; 0x40
  40564a:	bd70      	pop	{r4, r5, r6, pc}
  40564c:	89a2      	ldrh	r2, [r4, #12]
  40564e:	2300      	movs	r3, #0
  405650:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405654:	6033      	str	r3, [r6, #0]
  405656:	d004      	beq.n	405662 <__swhatbuf_r+0x52>
  405658:	2240      	movs	r2, #64	; 0x40
  40565a:	4618      	mov	r0, r3
  40565c:	602a      	str	r2, [r5, #0]
  40565e:	b010      	add	sp, #64	; 0x40
  405660:	bd70      	pop	{r4, r5, r6, pc}
  405662:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405666:	602b      	str	r3, [r5, #0]
  405668:	b010      	add	sp, #64	; 0x40
  40566a:	bd70      	pop	{r4, r5, r6, pc}

0040566c <__smakebuf_r>:
  40566c:	898a      	ldrh	r2, [r1, #12]
  40566e:	0792      	lsls	r2, r2, #30
  405670:	460b      	mov	r3, r1
  405672:	d506      	bpl.n	405682 <__smakebuf_r+0x16>
  405674:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405678:	2101      	movs	r1, #1
  40567a:	601a      	str	r2, [r3, #0]
  40567c:	611a      	str	r2, [r3, #16]
  40567e:	6159      	str	r1, [r3, #20]
  405680:	4770      	bx	lr
  405682:	b5f0      	push	{r4, r5, r6, r7, lr}
  405684:	b083      	sub	sp, #12
  405686:	ab01      	add	r3, sp, #4
  405688:	466a      	mov	r2, sp
  40568a:	460c      	mov	r4, r1
  40568c:	4606      	mov	r6, r0
  40568e:	f7ff ffbf 	bl	405610 <__swhatbuf_r>
  405692:	9900      	ldr	r1, [sp, #0]
  405694:	4605      	mov	r5, r0
  405696:	4630      	mov	r0, r6
  405698:	f000 f83a 	bl	405710 <_malloc_r>
  40569c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4056a0:	b1d8      	cbz	r0, 4056da <__smakebuf_r+0x6e>
  4056a2:	9a01      	ldr	r2, [sp, #4]
  4056a4:	4f15      	ldr	r7, [pc, #84]	; (4056fc <__smakebuf_r+0x90>)
  4056a6:	9900      	ldr	r1, [sp, #0]
  4056a8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4056aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4056ae:	81a3      	strh	r3, [r4, #12]
  4056b0:	6020      	str	r0, [r4, #0]
  4056b2:	6120      	str	r0, [r4, #16]
  4056b4:	6161      	str	r1, [r4, #20]
  4056b6:	b91a      	cbnz	r2, 4056c0 <__smakebuf_r+0x54>
  4056b8:	432b      	orrs	r3, r5
  4056ba:	81a3      	strh	r3, [r4, #12]
  4056bc:	b003      	add	sp, #12
  4056be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4056c0:	4630      	mov	r0, r6
  4056c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4056c6:	f000 ffd1 	bl	40666c <_isatty_r>
  4056ca:	b1a0      	cbz	r0, 4056f6 <__smakebuf_r+0x8a>
  4056cc:	89a3      	ldrh	r3, [r4, #12]
  4056ce:	f023 0303 	bic.w	r3, r3, #3
  4056d2:	f043 0301 	orr.w	r3, r3, #1
  4056d6:	b21b      	sxth	r3, r3
  4056d8:	e7ee      	b.n	4056b8 <__smakebuf_r+0x4c>
  4056da:	059a      	lsls	r2, r3, #22
  4056dc:	d4ee      	bmi.n	4056bc <__smakebuf_r+0x50>
  4056de:	f023 0303 	bic.w	r3, r3, #3
  4056e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4056e6:	f043 0302 	orr.w	r3, r3, #2
  4056ea:	2101      	movs	r1, #1
  4056ec:	81a3      	strh	r3, [r4, #12]
  4056ee:	6022      	str	r2, [r4, #0]
  4056f0:	6122      	str	r2, [r4, #16]
  4056f2:	6161      	str	r1, [r4, #20]
  4056f4:	e7e2      	b.n	4056bc <__smakebuf_r+0x50>
  4056f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4056fa:	e7dd      	b.n	4056b8 <__smakebuf_r+0x4c>
  4056fc:	00404e2d 	.word	0x00404e2d

00405700 <malloc>:
  405700:	4b02      	ldr	r3, [pc, #8]	; (40570c <malloc+0xc>)
  405702:	4601      	mov	r1, r0
  405704:	6818      	ldr	r0, [r3, #0]
  405706:	f000 b803 	b.w	405710 <_malloc_r>
  40570a:	bf00      	nop
  40570c:	20000010 	.word	0x20000010

00405710 <_malloc_r>:
  405710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405714:	f101 060b 	add.w	r6, r1, #11
  405718:	2e16      	cmp	r6, #22
  40571a:	b083      	sub	sp, #12
  40571c:	4605      	mov	r5, r0
  40571e:	f240 809e 	bls.w	40585e <_malloc_r+0x14e>
  405722:	f036 0607 	bics.w	r6, r6, #7
  405726:	f100 80bd 	bmi.w	4058a4 <_malloc_r+0x194>
  40572a:	42b1      	cmp	r1, r6
  40572c:	f200 80ba 	bhi.w	4058a4 <_malloc_r+0x194>
  405730:	f000 fc04 	bl	405f3c <__malloc_lock>
  405734:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405738:	f0c0 8293 	bcc.w	405c62 <_malloc_r+0x552>
  40573c:	0a73      	lsrs	r3, r6, #9
  40573e:	f000 80b8 	beq.w	4058b2 <_malloc_r+0x1a2>
  405742:	2b04      	cmp	r3, #4
  405744:	f200 8179 	bhi.w	405a3a <_malloc_r+0x32a>
  405748:	09b3      	lsrs	r3, r6, #6
  40574a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40574e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405752:	00c3      	lsls	r3, r0, #3
  405754:	4fbf      	ldr	r7, [pc, #764]	; (405a54 <_malloc_r+0x344>)
  405756:	443b      	add	r3, r7
  405758:	f1a3 0108 	sub.w	r1, r3, #8
  40575c:	685c      	ldr	r4, [r3, #4]
  40575e:	42a1      	cmp	r1, r4
  405760:	d106      	bne.n	405770 <_malloc_r+0x60>
  405762:	e00c      	b.n	40577e <_malloc_r+0x6e>
  405764:	2a00      	cmp	r2, #0
  405766:	f280 80aa 	bge.w	4058be <_malloc_r+0x1ae>
  40576a:	68e4      	ldr	r4, [r4, #12]
  40576c:	42a1      	cmp	r1, r4
  40576e:	d006      	beq.n	40577e <_malloc_r+0x6e>
  405770:	6863      	ldr	r3, [r4, #4]
  405772:	f023 0303 	bic.w	r3, r3, #3
  405776:	1b9a      	subs	r2, r3, r6
  405778:	2a0f      	cmp	r2, #15
  40577a:	ddf3      	ble.n	405764 <_malloc_r+0x54>
  40577c:	4670      	mov	r0, lr
  40577e:	693c      	ldr	r4, [r7, #16]
  405780:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405a68 <_malloc_r+0x358>
  405784:	4574      	cmp	r4, lr
  405786:	f000 81ab 	beq.w	405ae0 <_malloc_r+0x3d0>
  40578a:	6863      	ldr	r3, [r4, #4]
  40578c:	f023 0303 	bic.w	r3, r3, #3
  405790:	1b9a      	subs	r2, r3, r6
  405792:	2a0f      	cmp	r2, #15
  405794:	f300 8190 	bgt.w	405ab8 <_malloc_r+0x3a8>
  405798:	2a00      	cmp	r2, #0
  40579a:	f8c7 e014 	str.w	lr, [r7, #20]
  40579e:	f8c7 e010 	str.w	lr, [r7, #16]
  4057a2:	f280 809d 	bge.w	4058e0 <_malloc_r+0x1d0>
  4057a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4057aa:	f080 8161 	bcs.w	405a70 <_malloc_r+0x360>
  4057ae:	08db      	lsrs	r3, r3, #3
  4057b0:	f103 0c01 	add.w	ip, r3, #1
  4057b4:	1099      	asrs	r1, r3, #2
  4057b6:	687a      	ldr	r2, [r7, #4]
  4057b8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4057bc:	f8c4 8008 	str.w	r8, [r4, #8]
  4057c0:	2301      	movs	r3, #1
  4057c2:	408b      	lsls	r3, r1
  4057c4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4057c8:	4313      	orrs	r3, r2
  4057ca:	3908      	subs	r1, #8
  4057cc:	60e1      	str	r1, [r4, #12]
  4057ce:	607b      	str	r3, [r7, #4]
  4057d0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4057d4:	f8c8 400c 	str.w	r4, [r8, #12]
  4057d8:	1082      	asrs	r2, r0, #2
  4057da:	2401      	movs	r4, #1
  4057dc:	4094      	lsls	r4, r2
  4057de:	429c      	cmp	r4, r3
  4057e0:	f200 808b 	bhi.w	4058fa <_malloc_r+0x1ea>
  4057e4:	421c      	tst	r4, r3
  4057e6:	d106      	bne.n	4057f6 <_malloc_r+0xe6>
  4057e8:	f020 0003 	bic.w	r0, r0, #3
  4057ec:	0064      	lsls	r4, r4, #1
  4057ee:	421c      	tst	r4, r3
  4057f0:	f100 0004 	add.w	r0, r0, #4
  4057f4:	d0fa      	beq.n	4057ec <_malloc_r+0xdc>
  4057f6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4057fa:	46cc      	mov	ip, r9
  4057fc:	4680      	mov	r8, r0
  4057fe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405802:	459c      	cmp	ip, r3
  405804:	d107      	bne.n	405816 <_malloc_r+0x106>
  405806:	e16d      	b.n	405ae4 <_malloc_r+0x3d4>
  405808:	2a00      	cmp	r2, #0
  40580a:	f280 817b 	bge.w	405b04 <_malloc_r+0x3f4>
  40580e:	68db      	ldr	r3, [r3, #12]
  405810:	459c      	cmp	ip, r3
  405812:	f000 8167 	beq.w	405ae4 <_malloc_r+0x3d4>
  405816:	6859      	ldr	r1, [r3, #4]
  405818:	f021 0103 	bic.w	r1, r1, #3
  40581c:	1b8a      	subs	r2, r1, r6
  40581e:	2a0f      	cmp	r2, #15
  405820:	ddf2      	ble.n	405808 <_malloc_r+0xf8>
  405822:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405826:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40582a:	9300      	str	r3, [sp, #0]
  40582c:	199c      	adds	r4, r3, r6
  40582e:	4628      	mov	r0, r5
  405830:	f046 0601 	orr.w	r6, r6, #1
  405834:	f042 0501 	orr.w	r5, r2, #1
  405838:	605e      	str	r6, [r3, #4]
  40583a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40583e:	f8cc 8008 	str.w	r8, [ip, #8]
  405842:	617c      	str	r4, [r7, #20]
  405844:	613c      	str	r4, [r7, #16]
  405846:	f8c4 e00c 	str.w	lr, [r4, #12]
  40584a:	f8c4 e008 	str.w	lr, [r4, #8]
  40584e:	6065      	str	r5, [r4, #4]
  405850:	505a      	str	r2, [r3, r1]
  405852:	f000 fb79 	bl	405f48 <__malloc_unlock>
  405856:	9b00      	ldr	r3, [sp, #0]
  405858:	f103 0408 	add.w	r4, r3, #8
  40585c:	e01e      	b.n	40589c <_malloc_r+0x18c>
  40585e:	2910      	cmp	r1, #16
  405860:	d820      	bhi.n	4058a4 <_malloc_r+0x194>
  405862:	f000 fb6b 	bl	405f3c <__malloc_lock>
  405866:	2610      	movs	r6, #16
  405868:	2318      	movs	r3, #24
  40586a:	2002      	movs	r0, #2
  40586c:	4f79      	ldr	r7, [pc, #484]	; (405a54 <_malloc_r+0x344>)
  40586e:	443b      	add	r3, r7
  405870:	f1a3 0208 	sub.w	r2, r3, #8
  405874:	685c      	ldr	r4, [r3, #4]
  405876:	4294      	cmp	r4, r2
  405878:	f000 813d 	beq.w	405af6 <_malloc_r+0x3e6>
  40587c:	6863      	ldr	r3, [r4, #4]
  40587e:	68e1      	ldr	r1, [r4, #12]
  405880:	68a6      	ldr	r6, [r4, #8]
  405882:	f023 0303 	bic.w	r3, r3, #3
  405886:	4423      	add	r3, r4
  405888:	4628      	mov	r0, r5
  40588a:	685a      	ldr	r2, [r3, #4]
  40588c:	60f1      	str	r1, [r6, #12]
  40588e:	f042 0201 	orr.w	r2, r2, #1
  405892:	608e      	str	r6, [r1, #8]
  405894:	605a      	str	r2, [r3, #4]
  405896:	f000 fb57 	bl	405f48 <__malloc_unlock>
  40589a:	3408      	adds	r4, #8
  40589c:	4620      	mov	r0, r4
  40589e:	b003      	add	sp, #12
  4058a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058a4:	2400      	movs	r4, #0
  4058a6:	230c      	movs	r3, #12
  4058a8:	4620      	mov	r0, r4
  4058aa:	602b      	str	r3, [r5, #0]
  4058ac:	b003      	add	sp, #12
  4058ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058b2:	2040      	movs	r0, #64	; 0x40
  4058b4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4058b8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4058bc:	e74a      	b.n	405754 <_malloc_r+0x44>
  4058be:	4423      	add	r3, r4
  4058c0:	68e1      	ldr	r1, [r4, #12]
  4058c2:	685a      	ldr	r2, [r3, #4]
  4058c4:	68a6      	ldr	r6, [r4, #8]
  4058c6:	f042 0201 	orr.w	r2, r2, #1
  4058ca:	60f1      	str	r1, [r6, #12]
  4058cc:	4628      	mov	r0, r5
  4058ce:	608e      	str	r6, [r1, #8]
  4058d0:	605a      	str	r2, [r3, #4]
  4058d2:	f000 fb39 	bl	405f48 <__malloc_unlock>
  4058d6:	3408      	adds	r4, #8
  4058d8:	4620      	mov	r0, r4
  4058da:	b003      	add	sp, #12
  4058dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058e0:	4423      	add	r3, r4
  4058e2:	4628      	mov	r0, r5
  4058e4:	685a      	ldr	r2, [r3, #4]
  4058e6:	f042 0201 	orr.w	r2, r2, #1
  4058ea:	605a      	str	r2, [r3, #4]
  4058ec:	f000 fb2c 	bl	405f48 <__malloc_unlock>
  4058f0:	3408      	adds	r4, #8
  4058f2:	4620      	mov	r0, r4
  4058f4:	b003      	add	sp, #12
  4058f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058fa:	68bc      	ldr	r4, [r7, #8]
  4058fc:	6863      	ldr	r3, [r4, #4]
  4058fe:	f023 0803 	bic.w	r8, r3, #3
  405902:	45b0      	cmp	r8, r6
  405904:	d304      	bcc.n	405910 <_malloc_r+0x200>
  405906:	eba8 0306 	sub.w	r3, r8, r6
  40590a:	2b0f      	cmp	r3, #15
  40590c:	f300 8085 	bgt.w	405a1a <_malloc_r+0x30a>
  405910:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405a6c <_malloc_r+0x35c>
  405914:	4b50      	ldr	r3, [pc, #320]	; (405a58 <_malloc_r+0x348>)
  405916:	f8d9 2000 	ldr.w	r2, [r9]
  40591a:	681b      	ldr	r3, [r3, #0]
  40591c:	3201      	adds	r2, #1
  40591e:	4433      	add	r3, r6
  405920:	eb04 0a08 	add.w	sl, r4, r8
  405924:	f000 8155 	beq.w	405bd2 <_malloc_r+0x4c2>
  405928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40592c:	330f      	adds	r3, #15
  40592e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405932:	f02b 0b0f 	bic.w	fp, fp, #15
  405936:	4659      	mov	r1, fp
  405938:	4628      	mov	r0, r5
  40593a:	f000 fcb1 	bl	4062a0 <_sbrk_r>
  40593e:	1c41      	adds	r1, r0, #1
  405940:	4602      	mov	r2, r0
  405942:	f000 80fc 	beq.w	405b3e <_malloc_r+0x42e>
  405946:	4582      	cmp	sl, r0
  405948:	f200 80f7 	bhi.w	405b3a <_malloc_r+0x42a>
  40594c:	4b43      	ldr	r3, [pc, #268]	; (405a5c <_malloc_r+0x34c>)
  40594e:	6819      	ldr	r1, [r3, #0]
  405950:	4459      	add	r1, fp
  405952:	6019      	str	r1, [r3, #0]
  405954:	f000 814d 	beq.w	405bf2 <_malloc_r+0x4e2>
  405958:	f8d9 0000 	ldr.w	r0, [r9]
  40595c:	3001      	adds	r0, #1
  40595e:	bf1b      	ittet	ne
  405960:	eba2 0a0a 	subne.w	sl, r2, sl
  405964:	4451      	addne	r1, sl
  405966:	f8c9 2000 	streq.w	r2, [r9]
  40596a:	6019      	strne	r1, [r3, #0]
  40596c:	f012 0107 	ands.w	r1, r2, #7
  405970:	f000 8115 	beq.w	405b9e <_malloc_r+0x48e>
  405974:	f1c1 0008 	rsb	r0, r1, #8
  405978:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40597c:	4402      	add	r2, r0
  40597e:	3108      	adds	r1, #8
  405980:	eb02 090b 	add.w	r9, r2, fp
  405984:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405988:	eba1 0909 	sub.w	r9, r1, r9
  40598c:	4649      	mov	r1, r9
  40598e:	4628      	mov	r0, r5
  405990:	9301      	str	r3, [sp, #4]
  405992:	9200      	str	r2, [sp, #0]
  405994:	f000 fc84 	bl	4062a0 <_sbrk_r>
  405998:	1c43      	adds	r3, r0, #1
  40599a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40599e:	f000 8143 	beq.w	405c28 <_malloc_r+0x518>
  4059a2:	1a80      	subs	r0, r0, r2
  4059a4:	4448      	add	r0, r9
  4059a6:	f040 0001 	orr.w	r0, r0, #1
  4059aa:	6819      	ldr	r1, [r3, #0]
  4059ac:	60ba      	str	r2, [r7, #8]
  4059ae:	4449      	add	r1, r9
  4059b0:	42bc      	cmp	r4, r7
  4059b2:	6050      	str	r0, [r2, #4]
  4059b4:	6019      	str	r1, [r3, #0]
  4059b6:	d017      	beq.n	4059e8 <_malloc_r+0x2d8>
  4059b8:	f1b8 0f0f 	cmp.w	r8, #15
  4059bc:	f240 80fb 	bls.w	405bb6 <_malloc_r+0x4a6>
  4059c0:	6860      	ldr	r0, [r4, #4]
  4059c2:	f1a8 020c 	sub.w	r2, r8, #12
  4059c6:	f022 0207 	bic.w	r2, r2, #7
  4059ca:	eb04 0e02 	add.w	lr, r4, r2
  4059ce:	f000 0001 	and.w	r0, r0, #1
  4059d2:	f04f 0c05 	mov.w	ip, #5
  4059d6:	4310      	orrs	r0, r2
  4059d8:	2a0f      	cmp	r2, #15
  4059da:	6060      	str	r0, [r4, #4]
  4059dc:	f8ce c004 	str.w	ip, [lr, #4]
  4059e0:	f8ce c008 	str.w	ip, [lr, #8]
  4059e4:	f200 8117 	bhi.w	405c16 <_malloc_r+0x506>
  4059e8:	4b1d      	ldr	r3, [pc, #116]	; (405a60 <_malloc_r+0x350>)
  4059ea:	68bc      	ldr	r4, [r7, #8]
  4059ec:	681a      	ldr	r2, [r3, #0]
  4059ee:	4291      	cmp	r1, r2
  4059f0:	bf88      	it	hi
  4059f2:	6019      	strhi	r1, [r3, #0]
  4059f4:	4b1b      	ldr	r3, [pc, #108]	; (405a64 <_malloc_r+0x354>)
  4059f6:	681a      	ldr	r2, [r3, #0]
  4059f8:	4291      	cmp	r1, r2
  4059fa:	6862      	ldr	r2, [r4, #4]
  4059fc:	bf88      	it	hi
  4059fe:	6019      	strhi	r1, [r3, #0]
  405a00:	f022 0203 	bic.w	r2, r2, #3
  405a04:	4296      	cmp	r6, r2
  405a06:	eba2 0306 	sub.w	r3, r2, r6
  405a0a:	d801      	bhi.n	405a10 <_malloc_r+0x300>
  405a0c:	2b0f      	cmp	r3, #15
  405a0e:	dc04      	bgt.n	405a1a <_malloc_r+0x30a>
  405a10:	4628      	mov	r0, r5
  405a12:	f000 fa99 	bl	405f48 <__malloc_unlock>
  405a16:	2400      	movs	r4, #0
  405a18:	e740      	b.n	40589c <_malloc_r+0x18c>
  405a1a:	19a2      	adds	r2, r4, r6
  405a1c:	f043 0301 	orr.w	r3, r3, #1
  405a20:	f046 0601 	orr.w	r6, r6, #1
  405a24:	6066      	str	r6, [r4, #4]
  405a26:	4628      	mov	r0, r5
  405a28:	60ba      	str	r2, [r7, #8]
  405a2a:	6053      	str	r3, [r2, #4]
  405a2c:	f000 fa8c 	bl	405f48 <__malloc_unlock>
  405a30:	3408      	adds	r4, #8
  405a32:	4620      	mov	r0, r4
  405a34:	b003      	add	sp, #12
  405a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a3a:	2b14      	cmp	r3, #20
  405a3c:	d971      	bls.n	405b22 <_malloc_r+0x412>
  405a3e:	2b54      	cmp	r3, #84	; 0x54
  405a40:	f200 80a3 	bhi.w	405b8a <_malloc_r+0x47a>
  405a44:	0b33      	lsrs	r3, r6, #12
  405a46:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405a4a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405a4e:	00c3      	lsls	r3, r0, #3
  405a50:	e680      	b.n	405754 <_malloc_r+0x44>
  405a52:	bf00      	nop
  405a54:	200005b0 	.word	0x200005b0
  405a58:	20008d24 	.word	0x20008d24
  405a5c:	20008cf4 	.word	0x20008cf4
  405a60:	20008d1c 	.word	0x20008d1c
  405a64:	20008d20 	.word	0x20008d20
  405a68:	200005b8 	.word	0x200005b8
  405a6c:	200009b8 	.word	0x200009b8
  405a70:	0a5a      	lsrs	r2, r3, #9
  405a72:	2a04      	cmp	r2, #4
  405a74:	d95b      	bls.n	405b2e <_malloc_r+0x41e>
  405a76:	2a14      	cmp	r2, #20
  405a78:	f200 80ae 	bhi.w	405bd8 <_malloc_r+0x4c8>
  405a7c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405a80:	00c9      	lsls	r1, r1, #3
  405a82:	325b      	adds	r2, #91	; 0x5b
  405a84:	eb07 0c01 	add.w	ip, r7, r1
  405a88:	5879      	ldr	r1, [r7, r1]
  405a8a:	f1ac 0c08 	sub.w	ip, ip, #8
  405a8e:	458c      	cmp	ip, r1
  405a90:	f000 8088 	beq.w	405ba4 <_malloc_r+0x494>
  405a94:	684a      	ldr	r2, [r1, #4]
  405a96:	f022 0203 	bic.w	r2, r2, #3
  405a9a:	4293      	cmp	r3, r2
  405a9c:	d273      	bcs.n	405b86 <_malloc_r+0x476>
  405a9e:	6889      	ldr	r1, [r1, #8]
  405aa0:	458c      	cmp	ip, r1
  405aa2:	d1f7      	bne.n	405a94 <_malloc_r+0x384>
  405aa4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405aa8:	687b      	ldr	r3, [r7, #4]
  405aaa:	60e2      	str	r2, [r4, #12]
  405aac:	f8c4 c008 	str.w	ip, [r4, #8]
  405ab0:	6094      	str	r4, [r2, #8]
  405ab2:	f8cc 400c 	str.w	r4, [ip, #12]
  405ab6:	e68f      	b.n	4057d8 <_malloc_r+0xc8>
  405ab8:	19a1      	adds	r1, r4, r6
  405aba:	f046 0c01 	orr.w	ip, r6, #1
  405abe:	f042 0601 	orr.w	r6, r2, #1
  405ac2:	f8c4 c004 	str.w	ip, [r4, #4]
  405ac6:	4628      	mov	r0, r5
  405ac8:	6179      	str	r1, [r7, #20]
  405aca:	6139      	str	r1, [r7, #16]
  405acc:	f8c1 e00c 	str.w	lr, [r1, #12]
  405ad0:	f8c1 e008 	str.w	lr, [r1, #8]
  405ad4:	604e      	str	r6, [r1, #4]
  405ad6:	50e2      	str	r2, [r4, r3]
  405ad8:	f000 fa36 	bl	405f48 <__malloc_unlock>
  405adc:	3408      	adds	r4, #8
  405ade:	e6dd      	b.n	40589c <_malloc_r+0x18c>
  405ae0:	687b      	ldr	r3, [r7, #4]
  405ae2:	e679      	b.n	4057d8 <_malloc_r+0xc8>
  405ae4:	f108 0801 	add.w	r8, r8, #1
  405ae8:	f018 0f03 	tst.w	r8, #3
  405aec:	f10c 0c08 	add.w	ip, ip, #8
  405af0:	f47f ae85 	bne.w	4057fe <_malloc_r+0xee>
  405af4:	e02d      	b.n	405b52 <_malloc_r+0x442>
  405af6:	68dc      	ldr	r4, [r3, #12]
  405af8:	42a3      	cmp	r3, r4
  405afa:	bf08      	it	eq
  405afc:	3002      	addeq	r0, #2
  405afe:	f43f ae3e 	beq.w	40577e <_malloc_r+0x6e>
  405b02:	e6bb      	b.n	40587c <_malloc_r+0x16c>
  405b04:	4419      	add	r1, r3
  405b06:	461c      	mov	r4, r3
  405b08:	684a      	ldr	r2, [r1, #4]
  405b0a:	68db      	ldr	r3, [r3, #12]
  405b0c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405b10:	f042 0201 	orr.w	r2, r2, #1
  405b14:	604a      	str	r2, [r1, #4]
  405b16:	4628      	mov	r0, r5
  405b18:	60f3      	str	r3, [r6, #12]
  405b1a:	609e      	str	r6, [r3, #8]
  405b1c:	f000 fa14 	bl	405f48 <__malloc_unlock>
  405b20:	e6bc      	b.n	40589c <_malloc_r+0x18c>
  405b22:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405b26:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405b2a:	00c3      	lsls	r3, r0, #3
  405b2c:	e612      	b.n	405754 <_malloc_r+0x44>
  405b2e:	099a      	lsrs	r2, r3, #6
  405b30:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405b34:	00c9      	lsls	r1, r1, #3
  405b36:	3238      	adds	r2, #56	; 0x38
  405b38:	e7a4      	b.n	405a84 <_malloc_r+0x374>
  405b3a:	42bc      	cmp	r4, r7
  405b3c:	d054      	beq.n	405be8 <_malloc_r+0x4d8>
  405b3e:	68bc      	ldr	r4, [r7, #8]
  405b40:	6862      	ldr	r2, [r4, #4]
  405b42:	f022 0203 	bic.w	r2, r2, #3
  405b46:	e75d      	b.n	405a04 <_malloc_r+0x2f4>
  405b48:	f859 3908 	ldr.w	r3, [r9], #-8
  405b4c:	4599      	cmp	r9, r3
  405b4e:	f040 8086 	bne.w	405c5e <_malloc_r+0x54e>
  405b52:	f010 0f03 	tst.w	r0, #3
  405b56:	f100 30ff 	add.w	r0, r0, #4294967295
  405b5a:	d1f5      	bne.n	405b48 <_malloc_r+0x438>
  405b5c:	687b      	ldr	r3, [r7, #4]
  405b5e:	ea23 0304 	bic.w	r3, r3, r4
  405b62:	607b      	str	r3, [r7, #4]
  405b64:	0064      	lsls	r4, r4, #1
  405b66:	429c      	cmp	r4, r3
  405b68:	f63f aec7 	bhi.w	4058fa <_malloc_r+0x1ea>
  405b6c:	2c00      	cmp	r4, #0
  405b6e:	f43f aec4 	beq.w	4058fa <_malloc_r+0x1ea>
  405b72:	421c      	tst	r4, r3
  405b74:	4640      	mov	r0, r8
  405b76:	f47f ae3e 	bne.w	4057f6 <_malloc_r+0xe6>
  405b7a:	0064      	lsls	r4, r4, #1
  405b7c:	421c      	tst	r4, r3
  405b7e:	f100 0004 	add.w	r0, r0, #4
  405b82:	d0fa      	beq.n	405b7a <_malloc_r+0x46a>
  405b84:	e637      	b.n	4057f6 <_malloc_r+0xe6>
  405b86:	468c      	mov	ip, r1
  405b88:	e78c      	b.n	405aa4 <_malloc_r+0x394>
  405b8a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405b8e:	d815      	bhi.n	405bbc <_malloc_r+0x4ac>
  405b90:	0bf3      	lsrs	r3, r6, #15
  405b92:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405b96:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405b9a:	00c3      	lsls	r3, r0, #3
  405b9c:	e5da      	b.n	405754 <_malloc_r+0x44>
  405b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405ba2:	e6ed      	b.n	405980 <_malloc_r+0x270>
  405ba4:	687b      	ldr	r3, [r7, #4]
  405ba6:	1092      	asrs	r2, r2, #2
  405ba8:	2101      	movs	r1, #1
  405baa:	fa01 f202 	lsl.w	r2, r1, r2
  405bae:	4313      	orrs	r3, r2
  405bb0:	607b      	str	r3, [r7, #4]
  405bb2:	4662      	mov	r2, ip
  405bb4:	e779      	b.n	405aaa <_malloc_r+0x39a>
  405bb6:	2301      	movs	r3, #1
  405bb8:	6053      	str	r3, [r2, #4]
  405bba:	e729      	b.n	405a10 <_malloc_r+0x300>
  405bbc:	f240 5254 	movw	r2, #1364	; 0x554
  405bc0:	4293      	cmp	r3, r2
  405bc2:	d822      	bhi.n	405c0a <_malloc_r+0x4fa>
  405bc4:	0cb3      	lsrs	r3, r6, #18
  405bc6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405bca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405bce:	00c3      	lsls	r3, r0, #3
  405bd0:	e5c0      	b.n	405754 <_malloc_r+0x44>
  405bd2:	f103 0b10 	add.w	fp, r3, #16
  405bd6:	e6ae      	b.n	405936 <_malloc_r+0x226>
  405bd8:	2a54      	cmp	r2, #84	; 0x54
  405bda:	d829      	bhi.n	405c30 <_malloc_r+0x520>
  405bdc:	0b1a      	lsrs	r2, r3, #12
  405bde:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405be2:	00c9      	lsls	r1, r1, #3
  405be4:	326e      	adds	r2, #110	; 0x6e
  405be6:	e74d      	b.n	405a84 <_malloc_r+0x374>
  405be8:	4b20      	ldr	r3, [pc, #128]	; (405c6c <_malloc_r+0x55c>)
  405bea:	6819      	ldr	r1, [r3, #0]
  405bec:	4459      	add	r1, fp
  405bee:	6019      	str	r1, [r3, #0]
  405bf0:	e6b2      	b.n	405958 <_malloc_r+0x248>
  405bf2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405bf6:	2800      	cmp	r0, #0
  405bf8:	f47f aeae 	bne.w	405958 <_malloc_r+0x248>
  405bfc:	eb08 030b 	add.w	r3, r8, fp
  405c00:	68ba      	ldr	r2, [r7, #8]
  405c02:	f043 0301 	orr.w	r3, r3, #1
  405c06:	6053      	str	r3, [r2, #4]
  405c08:	e6ee      	b.n	4059e8 <_malloc_r+0x2d8>
  405c0a:	207f      	movs	r0, #127	; 0x7f
  405c0c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405c10:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405c14:	e59e      	b.n	405754 <_malloc_r+0x44>
  405c16:	f104 0108 	add.w	r1, r4, #8
  405c1a:	4628      	mov	r0, r5
  405c1c:	9300      	str	r3, [sp, #0]
  405c1e:	f7ff fa59 	bl	4050d4 <_free_r>
  405c22:	9b00      	ldr	r3, [sp, #0]
  405c24:	6819      	ldr	r1, [r3, #0]
  405c26:	e6df      	b.n	4059e8 <_malloc_r+0x2d8>
  405c28:	2001      	movs	r0, #1
  405c2a:	f04f 0900 	mov.w	r9, #0
  405c2e:	e6bc      	b.n	4059aa <_malloc_r+0x29a>
  405c30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405c34:	d805      	bhi.n	405c42 <_malloc_r+0x532>
  405c36:	0bda      	lsrs	r2, r3, #15
  405c38:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405c3c:	00c9      	lsls	r1, r1, #3
  405c3e:	3277      	adds	r2, #119	; 0x77
  405c40:	e720      	b.n	405a84 <_malloc_r+0x374>
  405c42:	f240 5154 	movw	r1, #1364	; 0x554
  405c46:	428a      	cmp	r2, r1
  405c48:	d805      	bhi.n	405c56 <_malloc_r+0x546>
  405c4a:	0c9a      	lsrs	r2, r3, #18
  405c4c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405c50:	00c9      	lsls	r1, r1, #3
  405c52:	327c      	adds	r2, #124	; 0x7c
  405c54:	e716      	b.n	405a84 <_malloc_r+0x374>
  405c56:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405c5a:	227e      	movs	r2, #126	; 0x7e
  405c5c:	e712      	b.n	405a84 <_malloc_r+0x374>
  405c5e:	687b      	ldr	r3, [r7, #4]
  405c60:	e780      	b.n	405b64 <_malloc_r+0x454>
  405c62:	08f0      	lsrs	r0, r6, #3
  405c64:	f106 0308 	add.w	r3, r6, #8
  405c68:	e600      	b.n	40586c <_malloc_r+0x15c>
  405c6a:	bf00      	nop
  405c6c:	20008cf4 	.word	0x20008cf4

00405c70 <__ascii_mbtowc>:
  405c70:	b082      	sub	sp, #8
  405c72:	b149      	cbz	r1, 405c88 <__ascii_mbtowc+0x18>
  405c74:	b15a      	cbz	r2, 405c8e <__ascii_mbtowc+0x1e>
  405c76:	b16b      	cbz	r3, 405c94 <__ascii_mbtowc+0x24>
  405c78:	7813      	ldrb	r3, [r2, #0]
  405c7a:	600b      	str	r3, [r1, #0]
  405c7c:	7812      	ldrb	r2, [r2, #0]
  405c7e:	1c10      	adds	r0, r2, #0
  405c80:	bf18      	it	ne
  405c82:	2001      	movne	r0, #1
  405c84:	b002      	add	sp, #8
  405c86:	4770      	bx	lr
  405c88:	a901      	add	r1, sp, #4
  405c8a:	2a00      	cmp	r2, #0
  405c8c:	d1f3      	bne.n	405c76 <__ascii_mbtowc+0x6>
  405c8e:	4610      	mov	r0, r2
  405c90:	b002      	add	sp, #8
  405c92:	4770      	bx	lr
  405c94:	f06f 0001 	mvn.w	r0, #1
  405c98:	e7f4      	b.n	405c84 <__ascii_mbtowc+0x14>
  405c9a:	bf00      	nop
  405c9c:	0000      	movs	r0, r0
	...

00405ca0 <memchr>:
  405ca0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405ca4:	2a10      	cmp	r2, #16
  405ca6:	db2b      	blt.n	405d00 <memchr+0x60>
  405ca8:	f010 0f07 	tst.w	r0, #7
  405cac:	d008      	beq.n	405cc0 <memchr+0x20>
  405cae:	f810 3b01 	ldrb.w	r3, [r0], #1
  405cb2:	3a01      	subs	r2, #1
  405cb4:	428b      	cmp	r3, r1
  405cb6:	d02d      	beq.n	405d14 <memchr+0x74>
  405cb8:	f010 0f07 	tst.w	r0, #7
  405cbc:	b342      	cbz	r2, 405d10 <memchr+0x70>
  405cbe:	d1f6      	bne.n	405cae <memchr+0xe>
  405cc0:	b4f0      	push	{r4, r5, r6, r7}
  405cc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405cc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405cca:	f022 0407 	bic.w	r4, r2, #7
  405cce:	f07f 0700 	mvns.w	r7, #0
  405cd2:	2300      	movs	r3, #0
  405cd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405cd8:	3c08      	subs	r4, #8
  405cda:	ea85 0501 	eor.w	r5, r5, r1
  405cde:	ea86 0601 	eor.w	r6, r6, r1
  405ce2:	fa85 f547 	uadd8	r5, r5, r7
  405ce6:	faa3 f587 	sel	r5, r3, r7
  405cea:	fa86 f647 	uadd8	r6, r6, r7
  405cee:	faa5 f687 	sel	r6, r5, r7
  405cf2:	b98e      	cbnz	r6, 405d18 <memchr+0x78>
  405cf4:	d1ee      	bne.n	405cd4 <memchr+0x34>
  405cf6:	bcf0      	pop	{r4, r5, r6, r7}
  405cf8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405cfc:	f002 0207 	and.w	r2, r2, #7
  405d00:	b132      	cbz	r2, 405d10 <memchr+0x70>
  405d02:	f810 3b01 	ldrb.w	r3, [r0], #1
  405d06:	3a01      	subs	r2, #1
  405d08:	ea83 0301 	eor.w	r3, r3, r1
  405d0c:	b113      	cbz	r3, 405d14 <memchr+0x74>
  405d0e:	d1f8      	bne.n	405d02 <memchr+0x62>
  405d10:	2000      	movs	r0, #0
  405d12:	4770      	bx	lr
  405d14:	3801      	subs	r0, #1
  405d16:	4770      	bx	lr
  405d18:	2d00      	cmp	r5, #0
  405d1a:	bf06      	itte	eq
  405d1c:	4635      	moveq	r5, r6
  405d1e:	3803      	subeq	r0, #3
  405d20:	3807      	subne	r0, #7
  405d22:	f015 0f01 	tst.w	r5, #1
  405d26:	d107      	bne.n	405d38 <memchr+0x98>
  405d28:	3001      	adds	r0, #1
  405d2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405d2e:	bf02      	ittt	eq
  405d30:	3001      	addeq	r0, #1
  405d32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405d36:	3001      	addeq	r0, #1
  405d38:	bcf0      	pop	{r4, r5, r6, r7}
  405d3a:	3801      	subs	r0, #1
  405d3c:	4770      	bx	lr
  405d3e:	bf00      	nop

00405d40 <memcpy>:
  405d40:	4684      	mov	ip, r0
  405d42:	ea41 0300 	orr.w	r3, r1, r0
  405d46:	f013 0303 	ands.w	r3, r3, #3
  405d4a:	d16d      	bne.n	405e28 <memcpy+0xe8>
  405d4c:	3a40      	subs	r2, #64	; 0x40
  405d4e:	d341      	bcc.n	405dd4 <memcpy+0x94>
  405d50:	f851 3b04 	ldr.w	r3, [r1], #4
  405d54:	f840 3b04 	str.w	r3, [r0], #4
  405d58:	f851 3b04 	ldr.w	r3, [r1], #4
  405d5c:	f840 3b04 	str.w	r3, [r0], #4
  405d60:	f851 3b04 	ldr.w	r3, [r1], #4
  405d64:	f840 3b04 	str.w	r3, [r0], #4
  405d68:	f851 3b04 	ldr.w	r3, [r1], #4
  405d6c:	f840 3b04 	str.w	r3, [r0], #4
  405d70:	f851 3b04 	ldr.w	r3, [r1], #4
  405d74:	f840 3b04 	str.w	r3, [r0], #4
  405d78:	f851 3b04 	ldr.w	r3, [r1], #4
  405d7c:	f840 3b04 	str.w	r3, [r0], #4
  405d80:	f851 3b04 	ldr.w	r3, [r1], #4
  405d84:	f840 3b04 	str.w	r3, [r0], #4
  405d88:	f851 3b04 	ldr.w	r3, [r1], #4
  405d8c:	f840 3b04 	str.w	r3, [r0], #4
  405d90:	f851 3b04 	ldr.w	r3, [r1], #4
  405d94:	f840 3b04 	str.w	r3, [r0], #4
  405d98:	f851 3b04 	ldr.w	r3, [r1], #4
  405d9c:	f840 3b04 	str.w	r3, [r0], #4
  405da0:	f851 3b04 	ldr.w	r3, [r1], #4
  405da4:	f840 3b04 	str.w	r3, [r0], #4
  405da8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dac:	f840 3b04 	str.w	r3, [r0], #4
  405db0:	f851 3b04 	ldr.w	r3, [r1], #4
  405db4:	f840 3b04 	str.w	r3, [r0], #4
  405db8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dbc:	f840 3b04 	str.w	r3, [r0], #4
  405dc0:	f851 3b04 	ldr.w	r3, [r1], #4
  405dc4:	f840 3b04 	str.w	r3, [r0], #4
  405dc8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dcc:	f840 3b04 	str.w	r3, [r0], #4
  405dd0:	3a40      	subs	r2, #64	; 0x40
  405dd2:	d2bd      	bcs.n	405d50 <memcpy+0x10>
  405dd4:	3230      	adds	r2, #48	; 0x30
  405dd6:	d311      	bcc.n	405dfc <memcpy+0xbc>
  405dd8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ddc:	f840 3b04 	str.w	r3, [r0], #4
  405de0:	f851 3b04 	ldr.w	r3, [r1], #4
  405de4:	f840 3b04 	str.w	r3, [r0], #4
  405de8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dec:	f840 3b04 	str.w	r3, [r0], #4
  405df0:	f851 3b04 	ldr.w	r3, [r1], #4
  405df4:	f840 3b04 	str.w	r3, [r0], #4
  405df8:	3a10      	subs	r2, #16
  405dfa:	d2ed      	bcs.n	405dd8 <memcpy+0x98>
  405dfc:	320c      	adds	r2, #12
  405dfe:	d305      	bcc.n	405e0c <memcpy+0xcc>
  405e00:	f851 3b04 	ldr.w	r3, [r1], #4
  405e04:	f840 3b04 	str.w	r3, [r0], #4
  405e08:	3a04      	subs	r2, #4
  405e0a:	d2f9      	bcs.n	405e00 <memcpy+0xc0>
  405e0c:	3204      	adds	r2, #4
  405e0e:	d008      	beq.n	405e22 <memcpy+0xe2>
  405e10:	07d2      	lsls	r2, r2, #31
  405e12:	bf1c      	itt	ne
  405e14:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405e18:	f800 3b01 	strbne.w	r3, [r0], #1
  405e1c:	d301      	bcc.n	405e22 <memcpy+0xe2>
  405e1e:	880b      	ldrh	r3, [r1, #0]
  405e20:	8003      	strh	r3, [r0, #0]
  405e22:	4660      	mov	r0, ip
  405e24:	4770      	bx	lr
  405e26:	bf00      	nop
  405e28:	2a08      	cmp	r2, #8
  405e2a:	d313      	bcc.n	405e54 <memcpy+0x114>
  405e2c:	078b      	lsls	r3, r1, #30
  405e2e:	d08d      	beq.n	405d4c <memcpy+0xc>
  405e30:	f010 0303 	ands.w	r3, r0, #3
  405e34:	d08a      	beq.n	405d4c <memcpy+0xc>
  405e36:	f1c3 0304 	rsb	r3, r3, #4
  405e3a:	1ad2      	subs	r2, r2, r3
  405e3c:	07db      	lsls	r3, r3, #31
  405e3e:	bf1c      	itt	ne
  405e40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405e44:	f800 3b01 	strbne.w	r3, [r0], #1
  405e48:	d380      	bcc.n	405d4c <memcpy+0xc>
  405e4a:	f831 3b02 	ldrh.w	r3, [r1], #2
  405e4e:	f820 3b02 	strh.w	r3, [r0], #2
  405e52:	e77b      	b.n	405d4c <memcpy+0xc>
  405e54:	3a04      	subs	r2, #4
  405e56:	d3d9      	bcc.n	405e0c <memcpy+0xcc>
  405e58:	3a01      	subs	r2, #1
  405e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
  405e5e:	f800 3b01 	strb.w	r3, [r0], #1
  405e62:	d2f9      	bcs.n	405e58 <memcpy+0x118>
  405e64:	780b      	ldrb	r3, [r1, #0]
  405e66:	7003      	strb	r3, [r0, #0]
  405e68:	784b      	ldrb	r3, [r1, #1]
  405e6a:	7043      	strb	r3, [r0, #1]
  405e6c:	788b      	ldrb	r3, [r1, #2]
  405e6e:	7083      	strb	r3, [r0, #2]
  405e70:	4660      	mov	r0, ip
  405e72:	4770      	bx	lr

00405e74 <memmove>:
  405e74:	4288      	cmp	r0, r1
  405e76:	b5f0      	push	{r4, r5, r6, r7, lr}
  405e78:	d90d      	bls.n	405e96 <memmove+0x22>
  405e7a:	188b      	adds	r3, r1, r2
  405e7c:	4298      	cmp	r0, r3
  405e7e:	d20a      	bcs.n	405e96 <memmove+0x22>
  405e80:	1884      	adds	r4, r0, r2
  405e82:	2a00      	cmp	r2, #0
  405e84:	d051      	beq.n	405f2a <memmove+0xb6>
  405e86:	4622      	mov	r2, r4
  405e88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405e8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405e90:	4299      	cmp	r1, r3
  405e92:	d1f9      	bne.n	405e88 <memmove+0x14>
  405e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405e96:	2a0f      	cmp	r2, #15
  405e98:	d948      	bls.n	405f2c <memmove+0xb8>
  405e9a:	ea41 0300 	orr.w	r3, r1, r0
  405e9e:	079b      	lsls	r3, r3, #30
  405ea0:	d146      	bne.n	405f30 <memmove+0xbc>
  405ea2:	f100 0410 	add.w	r4, r0, #16
  405ea6:	f101 0310 	add.w	r3, r1, #16
  405eaa:	4615      	mov	r5, r2
  405eac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405eb0:	f844 6c10 	str.w	r6, [r4, #-16]
  405eb4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405eb8:	f844 6c0c 	str.w	r6, [r4, #-12]
  405ebc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405ec0:	f844 6c08 	str.w	r6, [r4, #-8]
  405ec4:	3d10      	subs	r5, #16
  405ec6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405eca:	f844 6c04 	str.w	r6, [r4, #-4]
  405ece:	2d0f      	cmp	r5, #15
  405ed0:	f103 0310 	add.w	r3, r3, #16
  405ed4:	f104 0410 	add.w	r4, r4, #16
  405ed8:	d8e8      	bhi.n	405eac <memmove+0x38>
  405eda:	f1a2 0310 	sub.w	r3, r2, #16
  405ede:	f023 030f 	bic.w	r3, r3, #15
  405ee2:	f002 0e0f 	and.w	lr, r2, #15
  405ee6:	3310      	adds	r3, #16
  405ee8:	f1be 0f03 	cmp.w	lr, #3
  405eec:	4419      	add	r1, r3
  405eee:	4403      	add	r3, r0
  405ef0:	d921      	bls.n	405f36 <memmove+0xc2>
  405ef2:	1f1e      	subs	r6, r3, #4
  405ef4:	460d      	mov	r5, r1
  405ef6:	4674      	mov	r4, lr
  405ef8:	3c04      	subs	r4, #4
  405efa:	f855 7b04 	ldr.w	r7, [r5], #4
  405efe:	f846 7f04 	str.w	r7, [r6, #4]!
  405f02:	2c03      	cmp	r4, #3
  405f04:	d8f8      	bhi.n	405ef8 <memmove+0x84>
  405f06:	f1ae 0404 	sub.w	r4, lr, #4
  405f0a:	f024 0403 	bic.w	r4, r4, #3
  405f0e:	3404      	adds	r4, #4
  405f10:	4421      	add	r1, r4
  405f12:	4423      	add	r3, r4
  405f14:	f002 0203 	and.w	r2, r2, #3
  405f18:	b162      	cbz	r2, 405f34 <memmove+0xc0>
  405f1a:	3b01      	subs	r3, #1
  405f1c:	440a      	add	r2, r1
  405f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405f22:	f803 4f01 	strb.w	r4, [r3, #1]!
  405f26:	428a      	cmp	r2, r1
  405f28:	d1f9      	bne.n	405f1e <memmove+0xaa>
  405f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405f2c:	4603      	mov	r3, r0
  405f2e:	e7f3      	b.n	405f18 <memmove+0xa4>
  405f30:	4603      	mov	r3, r0
  405f32:	e7f2      	b.n	405f1a <memmove+0xa6>
  405f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405f36:	4672      	mov	r2, lr
  405f38:	e7ee      	b.n	405f18 <memmove+0xa4>
  405f3a:	bf00      	nop

00405f3c <__malloc_lock>:
  405f3c:	4801      	ldr	r0, [pc, #4]	; (405f44 <__malloc_lock+0x8>)
  405f3e:	f7ff bb63 	b.w	405608 <__retarget_lock_acquire_recursive>
  405f42:	bf00      	nop
  405f44:	20008e08 	.word	0x20008e08

00405f48 <__malloc_unlock>:
  405f48:	4801      	ldr	r0, [pc, #4]	; (405f50 <__malloc_unlock+0x8>)
  405f4a:	f7ff bb5f 	b.w	40560c <__retarget_lock_release_recursive>
  405f4e:	bf00      	nop
  405f50:	20008e08 	.word	0x20008e08

00405f54 <_realloc_r>:
  405f54:	2900      	cmp	r1, #0
  405f56:	f000 8095 	beq.w	406084 <_realloc_r+0x130>
  405f5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405f5e:	460d      	mov	r5, r1
  405f60:	4616      	mov	r6, r2
  405f62:	b083      	sub	sp, #12
  405f64:	4680      	mov	r8, r0
  405f66:	f106 070b 	add.w	r7, r6, #11
  405f6a:	f7ff ffe7 	bl	405f3c <__malloc_lock>
  405f6e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405f72:	2f16      	cmp	r7, #22
  405f74:	f02e 0403 	bic.w	r4, lr, #3
  405f78:	f1a5 0908 	sub.w	r9, r5, #8
  405f7c:	d83c      	bhi.n	405ff8 <_realloc_r+0xa4>
  405f7e:	2210      	movs	r2, #16
  405f80:	4617      	mov	r7, r2
  405f82:	42be      	cmp	r6, r7
  405f84:	d83d      	bhi.n	406002 <_realloc_r+0xae>
  405f86:	4294      	cmp	r4, r2
  405f88:	da43      	bge.n	406012 <_realloc_r+0xbe>
  405f8a:	4bc4      	ldr	r3, [pc, #784]	; (40629c <_realloc_r+0x348>)
  405f8c:	6899      	ldr	r1, [r3, #8]
  405f8e:	eb09 0004 	add.w	r0, r9, r4
  405f92:	4288      	cmp	r0, r1
  405f94:	f000 80b4 	beq.w	406100 <_realloc_r+0x1ac>
  405f98:	6843      	ldr	r3, [r0, #4]
  405f9a:	f023 0101 	bic.w	r1, r3, #1
  405f9e:	4401      	add	r1, r0
  405fa0:	6849      	ldr	r1, [r1, #4]
  405fa2:	07c9      	lsls	r1, r1, #31
  405fa4:	d54c      	bpl.n	406040 <_realloc_r+0xec>
  405fa6:	f01e 0f01 	tst.w	lr, #1
  405faa:	f000 809b 	beq.w	4060e4 <_realloc_r+0x190>
  405fae:	4631      	mov	r1, r6
  405fb0:	4640      	mov	r0, r8
  405fb2:	f7ff fbad 	bl	405710 <_malloc_r>
  405fb6:	4606      	mov	r6, r0
  405fb8:	2800      	cmp	r0, #0
  405fba:	d03a      	beq.n	406032 <_realloc_r+0xde>
  405fbc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405fc0:	f023 0301 	bic.w	r3, r3, #1
  405fc4:	444b      	add	r3, r9
  405fc6:	f1a0 0208 	sub.w	r2, r0, #8
  405fca:	429a      	cmp	r2, r3
  405fcc:	f000 8121 	beq.w	406212 <_realloc_r+0x2be>
  405fd0:	1f22      	subs	r2, r4, #4
  405fd2:	2a24      	cmp	r2, #36	; 0x24
  405fd4:	f200 8107 	bhi.w	4061e6 <_realloc_r+0x292>
  405fd8:	2a13      	cmp	r2, #19
  405fda:	f200 80db 	bhi.w	406194 <_realloc_r+0x240>
  405fde:	4603      	mov	r3, r0
  405fe0:	462a      	mov	r2, r5
  405fe2:	6811      	ldr	r1, [r2, #0]
  405fe4:	6019      	str	r1, [r3, #0]
  405fe6:	6851      	ldr	r1, [r2, #4]
  405fe8:	6059      	str	r1, [r3, #4]
  405fea:	6892      	ldr	r2, [r2, #8]
  405fec:	609a      	str	r2, [r3, #8]
  405fee:	4629      	mov	r1, r5
  405ff0:	4640      	mov	r0, r8
  405ff2:	f7ff f86f 	bl	4050d4 <_free_r>
  405ff6:	e01c      	b.n	406032 <_realloc_r+0xde>
  405ff8:	f027 0707 	bic.w	r7, r7, #7
  405ffc:	2f00      	cmp	r7, #0
  405ffe:	463a      	mov	r2, r7
  406000:	dabf      	bge.n	405f82 <_realloc_r+0x2e>
  406002:	2600      	movs	r6, #0
  406004:	230c      	movs	r3, #12
  406006:	4630      	mov	r0, r6
  406008:	f8c8 3000 	str.w	r3, [r8]
  40600c:	b003      	add	sp, #12
  40600e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406012:	462e      	mov	r6, r5
  406014:	1be3      	subs	r3, r4, r7
  406016:	2b0f      	cmp	r3, #15
  406018:	d81e      	bhi.n	406058 <_realloc_r+0x104>
  40601a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40601e:	f003 0301 	and.w	r3, r3, #1
  406022:	4323      	orrs	r3, r4
  406024:	444c      	add	r4, r9
  406026:	f8c9 3004 	str.w	r3, [r9, #4]
  40602a:	6863      	ldr	r3, [r4, #4]
  40602c:	f043 0301 	orr.w	r3, r3, #1
  406030:	6063      	str	r3, [r4, #4]
  406032:	4640      	mov	r0, r8
  406034:	f7ff ff88 	bl	405f48 <__malloc_unlock>
  406038:	4630      	mov	r0, r6
  40603a:	b003      	add	sp, #12
  40603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406040:	f023 0303 	bic.w	r3, r3, #3
  406044:	18e1      	adds	r1, r4, r3
  406046:	4291      	cmp	r1, r2
  406048:	db1f      	blt.n	40608a <_realloc_r+0x136>
  40604a:	68c3      	ldr	r3, [r0, #12]
  40604c:	6882      	ldr	r2, [r0, #8]
  40604e:	462e      	mov	r6, r5
  406050:	60d3      	str	r3, [r2, #12]
  406052:	460c      	mov	r4, r1
  406054:	609a      	str	r2, [r3, #8]
  406056:	e7dd      	b.n	406014 <_realloc_r+0xc0>
  406058:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40605c:	eb09 0107 	add.w	r1, r9, r7
  406060:	f002 0201 	and.w	r2, r2, #1
  406064:	444c      	add	r4, r9
  406066:	f043 0301 	orr.w	r3, r3, #1
  40606a:	4317      	orrs	r7, r2
  40606c:	f8c9 7004 	str.w	r7, [r9, #4]
  406070:	604b      	str	r3, [r1, #4]
  406072:	6863      	ldr	r3, [r4, #4]
  406074:	f043 0301 	orr.w	r3, r3, #1
  406078:	3108      	adds	r1, #8
  40607a:	6063      	str	r3, [r4, #4]
  40607c:	4640      	mov	r0, r8
  40607e:	f7ff f829 	bl	4050d4 <_free_r>
  406082:	e7d6      	b.n	406032 <_realloc_r+0xde>
  406084:	4611      	mov	r1, r2
  406086:	f7ff bb43 	b.w	405710 <_malloc_r>
  40608a:	f01e 0f01 	tst.w	lr, #1
  40608e:	d18e      	bne.n	405fae <_realloc_r+0x5a>
  406090:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406094:	eba9 0a01 	sub.w	sl, r9, r1
  406098:	f8da 1004 	ldr.w	r1, [sl, #4]
  40609c:	f021 0103 	bic.w	r1, r1, #3
  4060a0:	440b      	add	r3, r1
  4060a2:	4423      	add	r3, r4
  4060a4:	4293      	cmp	r3, r2
  4060a6:	db25      	blt.n	4060f4 <_realloc_r+0x1a0>
  4060a8:	68c2      	ldr	r2, [r0, #12]
  4060aa:	6881      	ldr	r1, [r0, #8]
  4060ac:	4656      	mov	r6, sl
  4060ae:	60ca      	str	r2, [r1, #12]
  4060b0:	6091      	str	r1, [r2, #8]
  4060b2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4060b6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4060ba:	1f22      	subs	r2, r4, #4
  4060bc:	2a24      	cmp	r2, #36	; 0x24
  4060be:	60c1      	str	r1, [r0, #12]
  4060c0:	6088      	str	r0, [r1, #8]
  4060c2:	f200 8094 	bhi.w	4061ee <_realloc_r+0x29a>
  4060c6:	2a13      	cmp	r2, #19
  4060c8:	d96f      	bls.n	4061aa <_realloc_r+0x256>
  4060ca:	6829      	ldr	r1, [r5, #0]
  4060cc:	f8ca 1008 	str.w	r1, [sl, #8]
  4060d0:	6869      	ldr	r1, [r5, #4]
  4060d2:	f8ca 100c 	str.w	r1, [sl, #12]
  4060d6:	2a1b      	cmp	r2, #27
  4060d8:	f200 80a2 	bhi.w	406220 <_realloc_r+0x2cc>
  4060dc:	3508      	adds	r5, #8
  4060de:	f10a 0210 	add.w	r2, sl, #16
  4060e2:	e063      	b.n	4061ac <_realloc_r+0x258>
  4060e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4060e8:	eba9 0a03 	sub.w	sl, r9, r3
  4060ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  4060f0:	f021 0103 	bic.w	r1, r1, #3
  4060f4:	1863      	adds	r3, r4, r1
  4060f6:	4293      	cmp	r3, r2
  4060f8:	f6ff af59 	blt.w	405fae <_realloc_r+0x5a>
  4060fc:	4656      	mov	r6, sl
  4060fe:	e7d8      	b.n	4060b2 <_realloc_r+0x15e>
  406100:	6841      	ldr	r1, [r0, #4]
  406102:	f021 0b03 	bic.w	fp, r1, #3
  406106:	44a3      	add	fp, r4
  406108:	f107 0010 	add.w	r0, r7, #16
  40610c:	4583      	cmp	fp, r0
  40610e:	da56      	bge.n	4061be <_realloc_r+0x26a>
  406110:	f01e 0f01 	tst.w	lr, #1
  406114:	f47f af4b 	bne.w	405fae <_realloc_r+0x5a>
  406118:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40611c:	eba9 0a01 	sub.w	sl, r9, r1
  406120:	f8da 1004 	ldr.w	r1, [sl, #4]
  406124:	f021 0103 	bic.w	r1, r1, #3
  406128:	448b      	add	fp, r1
  40612a:	4558      	cmp	r0, fp
  40612c:	dce2      	bgt.n	4060f4 <_realloc_r+0x1a0>
  40612e:	4656      	mov	r6, sl
  406130:	f8da 100c 	ldr.w	r1, [sl, #12]
  406134:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406138:	1f22      	subs	r2, r4, #4
  40613a:	2a24      	cmp	r2, #36	; 0x24
  40613c:	60c1      	str	r1, [r0, #12]
  40613e:	6088      	str	r0, [r1, #8]
  406140:	f200 808f 	bhi.w	406262 <_realloc_r+0x30e>
  406144:	2a13      	cmp	r2, #19
  406146:	f240 808a 	bls.w	40625e <_realloc_r+0x30a>
  40614a:	6829      	ldr	r1, [r5, #0]
  40614c:	f8ca 1008 	str.w	r1, [sl, #8]
  406150:	6869      	ldr	r1, [r5, #4]
  406152:	f8ca 100c 	str.w	r1, [sl, #12]
  406156:	2a1b      	cmp	r2, #27
  406158:	f200 808a 	bhi.w	406270 <_realloc_r+0x31c>
  40615c:	3508      	adds	r5, #8
  40615e:	f10a 0210 	add.w	r2, sl, #16
  406162:	6829      	ldr	r1, [r5, #0]
  406164:	6011      	str	r1, [r2, #0]
  406166:	6869      	ldr	r1, [r5, #4]
  406168:	6051      	str	r1, [r2, #4]
  40616a:	68a9      	ldr	r1, [r5, #8]
  40616c:	6091      	str	r1, [r2, #8]
  40616e:	eb0a 0107 	add.w	r1, sl, r7
  406172:	ebab 0207 	sub.w	r2, fp, r7
  406176:	f042 0201 	orr.w	r2, r2, #1
  40617a:	6099      	str	r1, [r3, #8]
  40617c:	604a      	str	r2, [r1, #4]
  40617e:	f8da 3004 	ldr.w	r3, [sl, #4]
  406182:	f003 0301 	and.w	r3, r3, #1
  406186:	431f      	orrs	r7, r3
  406188:	4640      	mov	r0, r8
  40618a:	f8ca 7004 	str.w	r7, [sl, #4]
  40618e:	f7ff fedb 	bl	405f48 <__malloc_unlock>
  406192:	e751      	b.n	406038 <_realloc_r+0xe4>
  406194:	682b      	ldr	r3, [r5, #0]
  406196:	6003      	str	r3, [r0, #0]
  406198:	686b      	ldr	r3, [r5, #4]
  40619a:	6043      	str	r3, [r0, #4]
  40619c:	2a1b      	cmp	r2, #27
  40619e:	d82d      	bhi.n	4061fc <_realloc_r+0x2a8>
  4061a0:	f100 0308 	add.w	r3, r0, #8
  4061a4:	f105 0208 	add.w	r2, r5, #8
  4061a8:	e71b      	b.n	405fe2 <_realloc_r+0x8e>
  4061aa:	4632      	mov	r2, r6
  4061ac:	6829      	ldr	r1, [r5, #0]
  4061ae:	6011      	str	r1, [r2, #0]
  4061b0:	6869      	ldr	r1, [r5, #4]
  4061b2:	6051      	str	r1, [r2, #4]
  4061b4:	68a9      	ldr	r1, [r5, #8]
  4061b6:	6091      	str	r1, [r2, #8]
  4061b8:	461c      	mov	r4, r3
  4061ba:	46d1      	mov	r9, sl
  4061bc:	e72a      	b.n	406014 <_realloc_r+0xc0>
  4061be:	eb09 0107 	add.w	r1, r9, r7
  4061c2:	ebab 0b07 	sub.w	fp, fp, r7
  4061c6:	f04b 0201 	orr.w	r2, fp, #1
  4061ca:	6099      	str	r1, [r3, #8]
  4061cc:	604a      	str	r2, [r1, #4]
  4061ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4061d2:	f003 0301 	and.w	r3, r3, #1
  4061d6:	431f      	orrs	r7, r3
  4061d8:	4640      	mov	r0, r8
  4061da:	f845 7c04 	str.w	r7, [r5, #-4]
  4061de:	f7ff feb3 	bl	405f48 <__malloc_unlock>
  4061e2:	462e      	mov	r6, r5
  4061e4:	e728      	b.n	406038 <_realloc_r+0xe4>
  4061e6:	4629      	mov	r1, r5
  4061e8:	f7ff fe44 	bl	405e74 <memmove>
  4061ec:	e6ff      	b.n	405fee <_realloc_r+0x9a>
  4061ee:	4629      	mov	r1, r5
  4061f0:	4630      	mov	r0, r6
  4061f2:	461c      	mov	r4, r3
  4061f4:	46d1      	mov	r9, sl
  4061f6:	f7ff fe3d 	bl	405e74 <memmove>
  4061fa:	e70b      	b.n	406014 <_realloc_r+0xc0>
  4061fc:	68ab      	ldr	r3, [r5, #8]
  4061fe:	6083      	str	r3, [r0, #8]
  406200:	68eb      	ldr	r3, [r5, #12]
  406202:	60c3      	str	r3, [r0, #12]
  406204:	2a24      	cmp	r2, #36	; 0x24
  406206:	d017      	beq.n	406238 <_realloc_r+0x2e4>
  406208:	f100 0310 	add.w	r3, r0, #16
  40620c:	f105 0210 	add.w	r2, r5, #16
  406210:	e6e7      	b.n	405fe2 <_realloc_r+0x8e>
  406212:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406216:	f023 0303 	bic.w	r3, r3, #3
  40621a:	441c      	add	r4, r3
  40621c:	462e      	mov	r6, r5
  40621e:	e6f9      	b.n	406014 <_realloc_r+0xc0>
  406220:	68a9      	ldr	r1, [r5, #8]
  406222:	f8ca 1010 	str.w	r1, [sl, #16]
  406226:	68e9      	ldr	r1, [r5, #12]
  406228:	f8ca 1014 	str.w	r1, [sl, #20]
  40622c:	2a24      	cmp	r2, #36	; 0x24
  40622e:	d00c      	beq.n	40624a <_realloc_r+0x2f6>
  406230:	3510      	adds	r5, #16
  406232:	f10a 0218 	add.w	r2, sl, #24
  406236:	e7b9      	b.n	4061ac <_realloc_r+0x258>
  406238:	692b      	ldr	r3, [r5, #16]
  40623a:	6103      	str	r3, [r0, #16]
  40623c:	696b      	ldr	r3, [r5, #20]
  40623e:	6143      	str	r3, [r0, #20]
  406240:	f105 0218 	add.w	r2, r5, #24
  406244:	f100 0318 	add.w	r3, r0, #24
  406248:	e6cb      	b.n	405fe2 <_realloc_r+0x8e>
  40624a:	692a      	ldr	r2, [r5, #16]
  40624c:	f8ca 2018 	str.w	r2, [sl, #24]
  406250:	696a      	ldr	r2, [r5, #20]
  406252:	f8ca 201c 	str.w	r2, [sl, #28]
  406256:	3518      	adds	r5, #24
  406258:	f10a 0220 	add.w	r2, sl, #32
  40625c:	e7a6      	b.n	4061ac <_realloc_r+0x258>
  40625e:	4632      	mov	r2, r6
  406260:	e77f      	b.n	406162 <_realloc_r+0x20e>
  406262:	4629      	mov	r1, r5
  406264:	4630      	mov	r0, r6
  406266:	9301      	str	r3, [sp, #4]
  406268:	f7ff fe04 	bl	405e74 <memmove>
  40626c:	9b01      	ldr	r3, [sp, #4]
  40626e:	e77e      	b.n	40616e <_realloc_r+0x21a>
  406270:	68a9      	ldr	r1, [r5, #8]
  406272:	f8ca 1010 	str.w	r1, [sl, #16]
  406276:	68e9      	ldr	r1, [r5, #12]
  406278:	f8ca 1014 	str.w	r1, [sl, #20]
  40627c:	2a24      	cmp	r2, #36	; 0x24
  40627e:	d003      	beq.n	406288 <_realloc_r+0x334>
  406280:	3510      	adds	r5, #16
  406282:	f10a 0218 	add.w	r2, sl, #24
  406286:	e76c      	b.n	406162 <_realloc_r+0x20e>
  406288:	692a      	ldr	r2, [r5, #16]
  40628a:	f8ca 2018 	str.w	r2, [sl, #24]
  40628e:	696a      	ldr	r2, [r5, #20]
  406290:	f8ca 201c 	str.w	r2, [sl, #28]
  406294:	3518      	adds	r5, #24
  406296:	f10a 0220 	add.w	r2, sl, #32
  40629a:	e762      	b.n	406162 <_realloc_r+0x20e>
  40629c:	200005b0 	.word	0x200005b0

004062a0 <_sbrk_r>:
  4062a0:	b538      	push	{r3, r4, r5, lr}
  4062a2:	4c07      	ldr	r4, [pc, #28]	; (4062c0 <_sbrk_r+0x20>)
  4062a4:	2300      	movs	r3, #0
  4062a6:	4605      	mov	r5, r0
  4062a8:	4608      	mov	r0, r1
  4062aa:	6023      	str	r3, [r4, #0]
  4062ac:	f7fa fd62 	bl	400d74 <_sbrk>
  4062b0:	1c43      	adds	r3, r0, #1
  4062b2:	d000      	beq.n	4062b6 <_sbrk_r+0x16>
  4062b4:	bd38      	pop	{r3, r4, r5, pc}
  4062b6:	6823      	ldr	r3, [r4, #0]
  4062b8:	2b00      	cmp	r3, #0
  4062ba:	d0fb      	beq.n	4062b4 <_sbrk_r+0x14>
  4062bc:	602b      	str	r3, [r5, #0]
  4062be:	bd38      	pop	{r3, r4, r5, pc}
  4062c0:	20008e1c 	.word	0x20008e1c

004062c4 <__sread>:
  4062c4:	b510      	push	{r4, lr}
  4062c6:	460c      	mov	r4, r1
  4062c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4062cc:	f000 f9f6 	bl	4066bc <_read_r>
  4062d0:	2800      	cmp	r0, #0
  4062d2:	db03      	blt.n	4062dc <__sread+0x18>
  4062d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4062d6:	4403      	add	r3, r0
  4062d8:	6523      	str	r3, [r4, #80]	; 0x50
  4062da:	bd10      	pop	{r4, pc}
  4062dc:	89a3      	ldrh	r3, [r4, #12]
  4062de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4062e2:	81a3      	strh	r3, [r4, #12]
  4062e4:	bd10      	pop	{r4, pc}
  4062e6:	bf00      	nop

004062e8 <__swrite>:
  4062e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4062ec:	4616      	mov	r6, r2
  4062ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4062f2:	461f      	mov	r7, r3
  4062f4:	05d3      	lsls	r3, r2, #23
  4062f6:	460c      	mov	r4, r1
  4062f8:	4605      	mov	r5, r0
  4062fa:	d507      	bpl.n	40630c <__swrite+0x24>
  4062fc:	2200      	movs	r2, #0
  4062fe:	2302      	movs	r3, #2
  406300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406304:	f000 f9c4 	bl	406690 <_lseek_r>
  406308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40630c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406310:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406314:	81a2      	strh	r2, [r4, #12]
  406316:	463b      	mov	r3, r7
  406318:	4632      	mov	r2, r6
  40631a:	4628      	mov	r0, r5
  40631c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406320:	f000 b8a4 	b.w	40646c <_write_r>

00406324 <__sseek>:
  406324:	b510      	push	{r4, lr}
  406326:	460c      	mov	r4, r1
  406328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40632c:	f000 f9b0 	bl	406690 <_lseek_r>
  406330:	89a3      	ldrh	r3, [r4, #12]
  406332:	1c42      	adds	r2, r0, #1
  406334:	bf0e      	itee	eq
  406336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40633a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40633e:	6520      	strne	r0, [r4, #80]	; 0x50
  406340:	81a3      	strh	r3, [r4, #12]
  406342:	bd10      	pop	{r4, pc}

00406344 <__sclose>:
  406344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406348:	f000 b908 	b.w	40655c <_close_r>

0040634c <__swbuf_r>:
  40634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40634e:	460d      	mov	r5, r1
  406350:	4614      	mov	r4, r2
  406352:	4606      	mov	r6, r0
  406354:	b110      	cbz	r0, 40635c <__swbuf_r+0x10>
  406356:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406358:	2b00      	cmp	r3, #0
  40635a:	d04b      	beq.n	4063f4 <__swbuf_r+0xa8>
  40635c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406360:	69a3      	ldr	r3, [r4, #24]
  406362:	60a3      	str	r3, [r4, #8]
  406364:	b291      	uxth	r1, r2
  406366:	0708      	lsls	r0, r1, #28
  406368:	d539      	bpl.n	4063de <__swbuf_r+0x92>
  40636a:	6923      	ldr	r3, [r4, #16]
  40636c:	2b00      	cmp	r3, #0
  40636e:	d036      	beq.n	4063de <__swbuf_r+0x92>
  406370:	b2ed      	uxtb	r5, r5
  406372:	0489      	lsls	r1, r1, #18
  406374:	462f      	mov	r7, r5
  406376:	d515      	bpl.n	4063a4 <__swbuf_r+0x58>
  406378:	6822      	ldr	r2, [r4, #0]
  40637a:	6961      	ldr	r1, [r4, #20]
  40637c:	1ad3      	subs	r3, r2, r3
  40637e:	428b      	cmp	r3, r1
  406380:	da1c      	bge.n	4063bc <__swbuf_r+0x70>
  406382:	3301      	adds	r3, #1
  406384:	68a1      	ldr	r1, [r4, #8]
  406386:	1c50      	adds	r0, r2, #1
  406388:	3901      	subs	r1, #1
  40638a:	60a1      	str	r1, [r4, #8]
  40638c:	6020      	str	r0, [r4, #0]
  40638e:	7015      	strb	r5, [r2, #0]
  406390:	6962      	ldr	r2, [r4, #20]
  406392:	429a      	cmp	r2, r3
  406394:	d01a      	beq.n	4063cc <__swbuf_r+0x80>
  406396:	89a3      	ldrh	r3, [r4, #12]
  406398:	07db      	lsls	r3, r3, #31
  40639a:	d501      	bpl.n	4063a0 <__swbuf_r+0x54>
  40639c:	2d0a      	cmp	r5, #10
  40639e:	d015      	beq.n	4063cc <__swbuf_r+0x80>
  4063a0:	4638      	mov	r0, r7
  4063a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4063a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4063a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4063aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4063ae:	81a2      	strh	r2, [r4, #12]
  4063b0:	6822      	ldr	r2, [r4, #0]
  4063b2:	6661      	str	r1, [r4, #100]	; 0x64
  4063b4:	6961      	ldr	r1, [r4, #20]
  4063b6:	1ad3      	subs	r3, r2, r3
  4063b8:	428b      	cmp	r3, r1
  4063ba:	dbe2      	blt.n	406382 <__swbuf_r+0x36>
  4063bc:	4621      	mov	r1, r4
  4063be:	4630      	mov	r0, r6
  4063c0:	f7fe fd0a 	bl	404dd8 <_fflush_r>
  4063c4:	b940      	cbnz	r0, 4063d8 <__swbuf_r+0x8c>
  4063c6:	6822      	ldr	r2, [r4, #0]
  4063c8:	2301      	movs	r3, #1
  4063ca:	e7db      	b.n	406384 <__swbuf_r+0x38>
  4063cc:	4621      	mov	r1, r4
  4063ce:	4630      	mov	r0, r6
  4063d0:	f7fe fd02 	bl	404dd8 <_fflush_r>
  4063d4:	2800      	cmp	r0, #0
  4063d6:	d0e3      	beq.n	4063a0 <__swbuf_r+0x54>
  4063d8:	f04f 37ff 	mov.w	r7, #4294967295
  4063dc:	e7e0      	b.n	4063a0 <__swbuf_r+0x54>
  4063de:	4621      	mov	r1, r4
  4063e0:	4630      	mov	r0, r6
  4063e2:	f7fe fbe5 	bl	404bb0 <__swsetup_r>
  4063e6:	2800      	cmp	r0, #0
  4063e8:	d1f6      	bne.n	4063d8 <__swbuf_r+0x8c>
  4063ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4063ee:	6923      	ldr	r3, [r4, #16]
  4063f0:	b291      	uxth	r1, r2
  4063f2:	e7bd      	b.n	406370 <__swbuf_r+0x24>
  4063f4:	f7fe fd48 	bl	404e88 <__sinit>
  4063f8:	e7b0      	b.n	40635c <__swbuf_r+0x10>
  4063fa:	bf00      	nop

004063fc <_wcrtomb_r>:
  4063fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4063fe:	4606      	mov	r6, r0
  406400:	b085      	sub	sp, #20
  406402:	461f      	mov	r7, r3
  406404:	b189      	cbz	r1, 40642a <_wcrtomb_r+0x2e>
  406406:	4c10      	ldr	r4, [pc, #64]	; (406448 <_wcrtomb_r+0x4c>)
  406408:	4d10      	ldr	r5, [pc, #64]	; (40644c <_wcrtomb_r+0x50>)
  40640a:	6824      	ldr	r4, [r4, #0]
  40640c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40640e:	2c00      	cmp	r4, #0
  406410:	bf08      	it	eq
  406412:	462c      	moveq	r4, r5
  406414:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406418:	47a0      	blx	r4
  40641a:	1c43      	adds	r3, r0, #1
  40641c:	d103      	bne.n	406426 <_wcrtomb_r+0x2a>
  40641e:	2200      	movs	r2, #0
  406420:	238a      	movs	r3, #138	; 0x8a
  406422:	603a      	str	r2, [r7, #0]
  406424:	6033      	str	r3, [r6, #0]
  406426:	b005      	add	sp, #20
  406428:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40642a:	460c      	mov	r4, r1
  40642c:	4906      	ldr	r1, [pc, #24]	; (406448 <_wcrtomb_r+0x4c>)
  40642e:	4a07      	ldr	r2, [pc, #28]	; (40644c <_wcrtomb_r+0x50>)
  406430:	6809      	ldr	r1, [r1, #0]
  406432:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406434:	2900      	cmp	r1, #0
  406436:	bf08      	it	eq
  406438:	4611      	moveq	r1, r2
  40643a:	4622      	mov	r2, r4
  40643c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406440:	a901      	add	r1, sp, #4
  406442:	47a0      	blx	r4
  406444:	e7e9      	b.n	40641a <_wcrtomb_r+0x1e>
  406446:	bf00      	nop
  406448:	20000010 	.word	0x20000010
  40644c:	20000444 	.word	0x20000444

00406450 <__ascii_wctomb>:
  406450:	b121      	cbz	r1, 40645c <__ascii_wctomb+0xc>
  406452:	2aff      	cmp	r2, #255	; 0xff
  406454:	d804      	bhi.n	406460 <__ascii_wctomb+0x10>
  406456:	700a      	strb	r2, [r1, #0]
  406458:	2001      	movs	r0, #1
  40645a:	4770      	bx	lr
  40645c:	4608      	mov	r0, r1
  40645e:	4770      	bx	lr
  406460:	238a      	movs	r3, #138	; 0x8a
  406462:	6003      	str	r3, [r0, #0]
  406464:	f04f 30ff 	mov.w	r0, #4294967295
  406468:	4770      	bx	lr
  40646a:	bf00      	nop

0040646c <_write_r>:
  40646c:	b570      	push	{r4, r5, r6, lr}
  40646e:	460d      	mov	r5, r1
  406470:	4c08      	ldr	r4, [pc, #32]	; (406494 <_write_r+0x28>)
  406472:	4611      	mov	r1, r2
  406474:	4606      	mov	r6, r0
  406476:	461a      	mov	r2, r3
  406478:	4628      	mov	r0, r5
  40647a:	2300      	movs	r3, #0
  40647c:	6023      	str	r3, [r4, #0]
  40647e:	f7f9 ff5b 	bl	400338 <_write>
  406482:	1c43      	adds	r3, r0, #1
  406484:	d000      	beq.n	406488 <_write_r+0x1c>
  406486:	bd70      	pop	{r4, r5, r6, pc}
  406488:	6823      	ldr	r3, [r4, #0]
  40648a:	2b00      	cmp	r3, #0
  40648c:	d0fb      	beq.n	406486 <_write_r+0x1a>
  40648e:	6033      	str	r3, [r6, #0]
  406490:	bd70      	pop	{r4, r5, r6, pc}
  406492:	bf00      	nop
  406494:	20008e1c 	.word	0x20008e1c

00406498 <__register_exitproc>:
  406498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40649c:	4d2c      	ldr	r5, [pc, #176]	; (406550 <__register_exitproc+0xb8>)
  40649e:	4606      	mov	r6, r0
  4064a0:	6828      	ldr	r0, [r5, #0]
  4064a2:	4698      	mov	r8, r3
  4064a4:	460f      	mov	r7, r1
  4064a6:	4691      	mov	r9, r2
  4064a8:	f7ff f8ae 	bl	405608 <__retarget_lock_acquire_recursive>
  4064ac:	4b29      	ldr	r3, [pc, #164]	; (406554 <__register_exitproc+0xbc>)
  4064ae:	681c      	ldr	r4, [r3, #0]
  4064b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4064b4:	2b00      	cmp	r3, #0
  4064b6:	d03e      	beq.n	406536 <__register_exitproc+0x9e>
  4064b8:	685a      	ldr	r2, [r3, #4]
  4064ba:	2a1f      	cmp	r2, #31
  4064bc:	dc1c      	bgt.n	4064f8 <__register_exitproc+0x60>
  4064be:	f102 0e01 	add.w	lr, r2, #1
  4064c2:	b176      	cbz	r6, 4064e2 <__register_exitproc+0x4a>
  4064c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4064c8:	2401      	movs	r4, #1
  4064ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4064ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4064d2:	4094      	lsls	r4, r2
  4064d4:	4320      	orrs	r0, r4
  4064d6:	2e02      	cmp	r6, #2
  4064d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4064dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4064e0:	d023      	beq.n	40652a <__register_exitproc+0x92>
  4064e2:	3202      	adds	r2, #2
  4064e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4064e8:	6828      	ldr	r0, [r5, #0]
  4064ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4064ee:	f7ff f88d 	bl	40560c <__retarget_lock_release_recursive>
  4064f2:	2000      	movs	r0, #0
  4064f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4064f8:	4b17      	ldr	r3, [pc, #92]	; (406558 <__register_exitproc+0xc0>)
  4064fa:	b30b      	cbz	r3, 406540 <__register_exitproc+0xa8>
  4064fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406500:	f7ff f8fe 	bl	405700 <malloc>
  406504:	4603      	mov	r3, r0
  406506:	b1d8      	cbz	r0, 406540 <__register_exitproc+0xa8>
  406508:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40650c:	6002      	str	r2, [r0, #0]
  40650e:	2100      	movs	r1, #0
  406510:	6041      	str	r1, [r0, #4]
  406512:	460a      	mov	r2, r1
  406514:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406518:	f04f 0e01 	mov.w	lr, #1
  40651c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406520:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406524:	2e00      	cmp	r6, #0
  406526:	d0dc      	beq.n	4064e2 <__register_exitproc+0x4a>
  406528:	e7cc      	b.n	4064c4 <__register_exitproc+0x2c>
  40652a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40652e:	430c      	orrs	r4, r1
  406530:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406534:	e7d5      	b.n	4064e2 <__register_exitproc+0x4a>
  406536:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40653a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40653e:	e7bb      	b.n	4064b8 <__register_exitproc+0x20>
  406540:	6828      	ldr	r0, [r5, #0]
  406542:	f7ff f863 	bl	40560c <__retarget_lock_release_recursive>
  406546:	f04f 30ff 	mov.w	r0, #4294967295
  40654a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40654e:	bf00      	nop
  406550:	20000440 	.word	0x20000440
  406554:	00406740 	.word	0x00406740
  406558:	00405701 	.word	0x00405701

0040655c <_close_r>:
  40655c:	b538      	push	{r3, r4, r5, lr}
  40655e:	4c07      	ldr	r4, [pc, #28]	; (40657c <_close_r+0x20>)
  406560:	2300      	movs	r3, #0
  406562:	4605      	mov	r5, r0
  406564:	4608      	mov	r0, r1
  406566:	6023      	str	r3, [r4, #0]
  406568:	f7fa fc20 	bl	400dac <_close>
  40656c:	1c43      	adds	r3, r0, #1
  40656e:	d000      	beq.n	406572 <_close_r+0x16>
  406570:	bd38      	pop	{r3, r4, r5, pc}
  406572:	6823      	ldr	r3, [r4, #0]
  406574:	2b00      	cmp	r3, #0
  406576:	d0fb      	beq.n	406570 <_close_r+0x14>
  406578:	602b      	str	r3, [r5, #0]
  40657a:	bd38      	pop	{r3, r4, r5, pc}
  40657c:	20008e1c 	.word	0x20008e1c

00406580 <_fclose_r>:
  406580:	b570      	push	{r4, r5, r6, lr}
  406582:	b159      	cbz	r1, 40659c <_fclose_r+0x1c>
  406584:	4605      	mov	r5, r0
  406586:	460c      	mov	r4, r1
  406588:	b110      	cbz	r0, 406590 <_fclose_r+0x10>
  40658a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40658c:	2b00      	cmp	r3, #0
  40658e:	d03c      	beq.n	40660a <_fclose_r+0x8a>
  406590:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406592:	07d8      	lsls	r0, r3, #31
  406594:	d505      	bpl.n	4065a2 <_fclose_r+0x22>
  406596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40659a:	b92b      	cbnz	r3, 4065a8 <_fclose_r+0x28>
  40659c:	2600      	movs	r6, #0
  40659e:	4630      	mov	r0, r6
  4065a0:	bd70      	pop	{r4, r5, r6, pc}
  4065a2:	89a3      	ldrh	r3, [r4, #12]
  4065a4:	0599      	lsls	r1, r3, #22
  4065a6:	d53c      	bpl.n	406622 <_fclose_r+0xa2>
  4065a8:	4621      	mov	r1, r4
  4065aa:	4628      	mov	r0, r5
  4065ac:	f7fe fb74 	bl	404c98 <__sflush_r>
  4065b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4065b2:	4606      	mov	r6, r0
  4065b4:	b133      	cbz	r3, 4065c4 <_fclose_r+0x44>
  4065b6:	69e1      	ldr	r1, [r4, #28]
  4065b8:	4628      	mov	r0, r5
  4065ba:	4798      	blx	r3
  4065bc:	2800      	cmp	r0, #0
  4065be:	bfb8      	it	lt
  4065c0:	f04f 36ff 	movlt.w	r6, #4294967295
  4065c4:	89a3      	ldrh	r3, [r4, #12]
  4065c6:	061a      	lsls	r2, r3, #24
  4065c8:	d422      	bmi.n	406610 <_fclose_r+0x90>
  4065ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4065cc:	b141      	cbz	r1, 4065e0 <_fclose_r+0x60>
  4065ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4065d2:	4299      	cmp	r1, r3
  4065d4:	d002      	beq.n	4065dc <_fclose_r+0x5c>
  4065d6:	4628      	mov	r0, r5
  4065d8:	f7fe fd7c 	bl	4050d4 <_free_r>
  4065dc:	2300      	movs	r3, #0
  4065de:	6323      	str	r3, [r4, #48]	; 0x30
  4065e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4065e2:	b121      	cbz	r1, 4065ee <_fclose_r+0x6e>
  4065e4:	4628      	mov	r0, r5
  4065e6:	f7fe fd75 	bl	4050d4 <_free_r>
  4065ea:	2300      	movs	r3, #0
  4065ec:	6463      	str	r3, [r4, #68]	; 0x44
  4065ee:	f7fe fc77 	bl	404ee0 <__sfp_lock_acquire>
  4065f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4065f4:	2200      	movs	r2, #0
  4065f6:	07db      	lsls	r3, r3, #31
  4065f8:	81a2      	strh	r2, [r4, #12]
  4065fa:	d50e      	bpl.n	40661a <_fclose_r+0x9a>
  4065fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4065fe:	f7ff f801 	bl	405604 <__retarget_lock_close_recursive>
  406602:	f7fe fc73 	bl	404eec <__sfp_lock_release>
  406606:	4630      	mov	r0, r6
  406608:	bd70      	pop	{r4, r5, r6, pc}
  40660a:	f7fe fc3d 	bl	404e88 <__sinit>
  40660e:	e7bf      	b.n	406590 <_fclose_r+0x10>
  406610:	6921      	ldr	r1, [r4, #16]
  406612:	4628      	mov	r0, r5
  406614:	f7fe fd5e 	bl	4050d4 <_free_r>
  406618:	e7d7      	b.n	4065ca <_fclose_r+0x4a>
  40661a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40661c:	f7fe fff6 	bl	40560c <__retarget_lock_release_recursive>
  406620:	e7ec      	b.n	4065fc <_fclose_r+0x7c>
  406622:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406624:	f7fe fff0 	bl	405608 <__retarget_lock_acquire_recursive>
  406628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40662c:	2b00      	cmp	r3, #0
  40662e:	d1bb      	bne.n	4065a8 <_fclose_r+0x28>
  406630:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406632:	f016 0601 	ands.w	r6, r6, #1
  406636:	d1b1      	bne.n	40659c <_fclose_r+0x1c>
  406638:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40663a:	f7fe ffe7 	bl	40560c <__retarget_lock_release_recursive>
  40663e:	4630      	mov	r0, r6
  406640:	bd70      	pop	{r4, r5, r6, pc}
  406642:	bf00      	nop

00406644 <_fstat_r>:
  406644:	b538      	push	{r3, r4, r5, lr}
  406646:	460b      	mov	r3, r1
  406648:	4c07      	ldr	r4, [pc, #28]	; (406668 <_fstat_r+0x24>)
  40664a:	4605      	mov	r5, r0
  40664c:	4611      	mov	r1, r2
  40664e:	4618      	mov	r0, r3
  406650:	2300      	movs	r3, #0
  406652:	6023      	str	r3, [r4, #0]
  406654:	f7fa fbad 	bl	400db2 <_fstat>
  406658:	1c43      	adds	r3, r0, #1
  40665a:	d000      	beq.n	40665e <_fstat_r+0x1a>
  40665c:	bd38      	pop	{r3, r4, r5, pc}
  40665e:	6823      	ldr	r3, [r4, #0]
  406660:	2b00      	cmp	r3, #0
  406662:	d0fb      	beq.n	40665c <_fstat_r+0x18>
  406664:	602b      	str	r3, [r5, #0]
  406666:	bd38      	pop	{r3, r4, r5, pc}
  406668:	20008e1c 	.word	0x20008e1c

0040666c <_isatty_r>:
  40666c:	b538      	push	{r3, r4, r5, lr}
  40666e:	4c07      	ldr	r4, [pc, #28]	; (40668c <_isatty_r+0x20>)
  406670:	2300      	movs	r3, #0
  406672:	4605      	mov	r5, r0
  406674:	4608      	mov	r0, r1
  406676:	6023      	str	r3, [r4, #0]
  406678:	f7fa fba0 	bl	400dbc <_isatty>
  40667c:	1c43      	adds	r3, r0, #1
  40667e:	d000      	beq.n	406682 <_isatty_r+0x16>
  406680:	bd38      	pop	{r3, r4, r5, pc}
  406682:	6823      	ldr	r3, [r4, #0]
  406684:	2b00      	cmp	r3, #0
  406686:	d0fb      	beq.n	406680 <_isatty_r+0x14>
  406688:	602b      	str	r3, [r5, #0]
  40668a:	bd38      	pop	{r3, r4, r5, pc}
  40668c:	20008e1c 	.word	0x20008e1c

00406690 <_lseek_r>:
  406690:	b570      	push	{r4, r5, r6, lr}
  406692:	460d      	mov	r5, r1
  406694:	4c08      	ldr	r4, [pc, #32]	; (4066b8 <_lseek_r+0x28>)
  406696:	4611      	mov	r1, r2
  406698:	4606      	mov	r6, r0
  40669a:	461a      	mov	r2, r3
  40669c:	4628      	mov	r0, r5
  40669e:	2300      	movs	r3, #0
  4066a0:	6023      	str	r3, [r4, #0]
  4066a2:	f7fa fb8d 	bl	400dc0 <_lseek>
  4066a6:	1c43      	adds	r3, r0, #1
  4066a8:	d000      	beq.n	4066ac <_lseek_r+0x1c>
  4066aa:	bd70      	pop	{r4, r5, r6, pc}
  4066ac:	6823      	ldr	r3, [r4, #0]
  4066ae:	2b00      	cmp	r3, #0
  4066b0:	d0fb      	beq.n	4066aa <_lseek_r+0x1a>
  4066b2:	6033      	str	r3, [r6, #0]
  4066b4:	bd70      	pop	{r4, r5, r6, pc}
  4066b6:	bf00      	nop
  4066b8:	20008e1c 	.word	0x20008e1c

004066bc <_read_r>:
  4066bc:	b570      	push	{r4, r5, r6, lr}
  4066be:	460d      	mov	r5, r1
  4066c0:	4c08      	ldr	r4, [pc, #32]	; (4066e4 <_read_r+0x28>)
  4066c2:	4611      	mov	r1, r2
  4066c4:	4606      	mov	r6, r0
  4066c6:	461a      	mov	r2, r3
  4066c8:	4628      	mov	r0, r5
  4066ca:	2300      	movs	r3, #0
  4066cc:	6023      	str	r3, [r4, #0]
  4066ce:	f7f9 fe15 	bl	4002fc <_read>
  4066d2:	1c43      	adds	r3, r0, #1
  4066d4:	d000      	beq.n	4066d8 <_read_r+0x1c>
  4066d6:	bd70      	pop	{r4, r5, r6, pc}
  4066d8:	6823      	ldr	r3, [r4, #0]
  4066da:	2b00      	cmp	r3, #0
  4066dc:	d0fb      	beq.n	4066d6 <_read_r+0x1a>
  4066de:	6033      	str	r3, [r6, #0]
  4066e0:	bd70      	pop	{r4, r5, r6, pc}
  4066e2:	bf00      	nop
  4066e4:	20008e1c 	.word	0x20008e1c

004066e8 <__aeabi_uldivmod>:
  4066e8:	b953      	cbnz	r3, 406700 <__aeabi_uldivmod+0x18>
  4066ea:	b94a      	cbnz	r2, 406700 <__aeabi_uldivmod+0x18>
  4066ec:	2900      	cmp	r1, #0
  4066ee:	bf08      	it	eq
  4066f0:	2800      	cmpeq	r0, #0
  4066f2:	bf1c      	itt	ne
  4066f4:	f04f 31ff 	movne.w	r1, #4294967295
  4066f8:	f04f 30ff 	movne.w	r0, #4294967295
  4066fc:	f7fd b9aa 	b.w	403a54 <__aeabi_idiv0>
  406700:	f1ad 0c08 	sub.w	ip, sp, #8
  406704:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406708:	f7fd f836 	bl	403778 <__udivmoddi4>
  40670c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406714:	b004      	add	sp, #16
  406716:	4770      	bx	lr
  406718:	0d0a6425 	.word	0x0d0a6425
  40671c:	00000000 	.word	0x00000000
  406720:	00776f70 	.word	0x00776f70
  406724:	74727173 	.word	0x74727173
	...

00406730 <TWO52>:
  406730:	00000000 43300000 00000000 c3300000     ......0C......0.

00406740 <_global_impure_ptr>:
  406740:	20000018 33323130 37363534 42413938     ... 0123456789AB
  406750:	46454443 00000000 33323130 37363534     CDEF....01234567
  406760:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406770:	0000296c                                l)..

00406774 <blanks.7217>:
  406774:	20202020 20202020 20202020 20202020                     

00406784 <zeroes.7218>:
  406784:	30303030 30303030 30303030 30303030     0000000000000000
  406794:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004067a4 <_ctype_>:
  4067a4:	20202000 20202020 28282020 20282828     .         ((((( 
  4067b4:	20202020 20202020 20202020 20202020                     
  4067c4:	10108820 10101010 10101010 10101010      ...............
  4067d4:	04040410 04040404 10040404 10101010     ................
  4067e4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4067f4:	01010101 01010101 01010101 10101010     ................
  406804:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406814:	02020202 02020202 02020202 10101010     ................
  406824:	00000020 00000000 00000000 00000000      ...............
	...

004068a8 <_init>:
  4068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4068aa:	bf00      	nop
  4068ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4068ae:	bc08      	pop	{r3}
  4068b0:	469e      	mov	lr, r3
  4068b2:	4770      	bx	lr

004068b4 <__init_array_start>:
  4068b4:	00404c79 	.word	0x00404c79

004068b8 <__frame_dummy_init_array_entry>:
  4068b8:	0040011d                                ..@.

004068bc <_fini>:
  4068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4068be:	bf00      	nop
  4068c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4068c2:	bc08      	pop	{r3}
  4068c4:	469e      	mov	lr, r3
  4068c6:	4770      	bx	lr

004068c8 <__fini_array_start>:
  4068c8:	004000f9 	.word	0x004000f9

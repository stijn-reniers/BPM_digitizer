
BPM_Digitizer_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004958  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404958  00404958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000854  20000000  00404960  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008458  20000858  004051b8  00020854  2**3
                  ALLOC
  4 .stack        00003000  20008cb0  0040d610  00020854  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020882  2**0
                  CONTENTS, READONLY
  7 .debug_info   00018752  00000000  00000000  000208db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000039ab  00000000  00000000  0003902d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005002  00000000  00000000  0003c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a98  00000000  00000000  000419da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a28  00000000  00000000  00042472  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a37c  00000000  00000000  00042e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000db1a  00000000  00000000  0005d216  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00065bed  00000000  00000000  0006ad30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023c4  00000000  00000000  000d0920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b0 bc 00 20 61 0a 40 00 5d 0a 40 00 5d 0a 40 00     ... a.@.].@.].@.
  400010:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 00 00 00 00     ].@.].@.].@.....
	...
  40002c:	5d 0a 40 00 5d 0a 40 00 00 00 00 00 5d 0a 40 00     ].@.].@.....].@.
  40003c:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 5d 0a 40 00     ].@.].@.].@.].@.
  40004c:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 5d 0a 40 00     ].@.].@.].@.].@.
  40005c:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 5d 0a 40 00     ].@.].@.].@.].@.
  40006c:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 f5 0c 40 00     ].@.].@.].@...@.
  40007c:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 5d 0a 40 00     ].@.].@.].@.].@.
  40008c:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 5d 0a 40 00     ].@.].@.].@.].@.
  40009c:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 5d 0a 40 00     ].@.].@.].@.].@.
  4000ac:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 e5 06 40 00     ].@.].@.].@...@.
  4000bc:	f9 06 40 00 5d 0a 40 00 29 16 40 00 5d 0a 40 00     ..@.].@.).@.].@.
  4000cc:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 5d 0a 40 00     ].@.].@.].@.].@.
  4000dc:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00 5d 0a 40 00     ].@.].@.].@.].@.
  4000ec:	5d 0a 40 00 5d 0a 40 00 5d 0a 40 00                 ].@.].@.].@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000858 	.word	0x20000858
  400114:	00000000 	.word	0x00000000
  400118:	00404960 	.word	0x00404960

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00404960 	.word	0x00404960
  400158:	2000085c 	.word	0x2000085c
  40015c:	00404960 	.word	0x00404960
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	480b      	ldr	r0, [pc, #44]	; (4001c8 <sysclk_init+0x64>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	00400c35 	.word	0x00400c35
  4001a8:	0040086d 	.word	0x0040086d
  4001ac:	004008c1 	.word	0x004008c1
  4001b0:	004008d1 	.word	0x004008d1
  4001b4:	200f3f01 	.word	0x200f3f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	004008e1 	.word	0x004008e1
  4001c0:	00400809 	.word	0x00400809
  4001c4:	00400b29 	.word	0x00400b29
  4001c8:	05b8d800 	.word	0x05b8d800

004001cc <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  4001cc:	2a00      	cmp	r2, #0
  4001ce:	d037      	beq.n	400240 <usart_serial_write_packet+0x74>
{
  4001d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4001d4:	4693      	mov	fp, r2
  4001d6:	4605      	mov	r5, r0
  4001d8:	460f      	mov	r7, r1
  4001da:	448b      	add	fp, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001dc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 400250 <usart_serial_write_packet+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001e0:	4e18      	ldr	r6, [pc, #96]	; (400244 <usart_serial_write_packet+0x78>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001e2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400254 <usart_serial_write_packet+0x88>
  4001e6:	e006      	b.n	4001f6 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001e8:	4621      	mov	r1, r4
  4001ea:	4640      	mov	r0, r8
  4001ec:	47b0      	blx	r6
  4001ee:	2800      	cmp	r0, #0
  4001f0:	d1fa      	bne.n	4001e8 <usart_serial_write_packet+0x1c>
	while (len) {
  4001f2:	45bb      	cmp	fp, r7
  4001f4:	d021      	beq.n	40023a <usart_serial_write_packet+0x6e>
		usart_serial_putchar(usart, *data);
  4001f6:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  4001fa:	4545      	cmp	r5, r8
  4001fc:	d0f4      	beq.n	4001e8 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  4001fe:	454d      	cmp	r5, r9
  400200:	d00d      	beq.n	40021e <usart_serial_write_packet+0x52>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400202:	4b11      	ldr	r3, [pc, #68]	; (400248 <usart_serial_write_packet+0x7c>)
  400204:	429d      	cmp	r5, r3
  400206:	d010      	beq.n	40022a <usart_serial_write_packet+0x5e>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400208:	4b10      	ldr	r3, [pc, #64]	; (40024c <usart_serial_write_packet+0x80>)
  40020a:	429d      	cmp	r5, r3
  40020c:	d1f1      	bne.n	4001f2 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40020e:	f8df a048 	ldr.w	sl, [pc, #72]	; 400258 <usart_serial_write_packet+0x8c>
  400212:	4621      	mov	r1, r4
  400214:	480d      	ldr	r0, [pc, #52]	; (40024c <usart_serial_write_packet+0x80>)
  400216:	47d0      	blx	sl
  400218:	2800      	cmp	r0, #0
  40021a:	d1fa      	bne.n	400212 <usart_serial_write_packet+0x46>
  40021c:	e7e9      	b.n	4001f2 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40021e:	4621      	mov	r1, r4
  400220:	4648      	mov	r0, r9
  400222:	47b0      	blx	r6
  400224:	2800      	cmp	r0, #0
  400226:	d1fa      	bne.n	40021e <usart_serial_write_packet+0x52>
  400228:	e7e3      	b.n	4001f2 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40022a:	f8df a02c 	ldr.w	sl, [pc, #44]	; 400258 <usart_serial_write_packet+0x8c>
  40022e:	4621      	mov	r1, r4
  400230:	4805      	ldr	r0, [pc, #20]	; (400248 <usart_serial_write_packet+0x7c>)
  400232:	47d0      	blx	sl
  400234:	2800      	cmp	r0, #0
  400236:	d1fa      	bne.n	40022e <usart_serial_write_packet+0x62>
  400238:	e7db      	b.n	4001f2 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  40023a:	2000      	movs	r0, #0
  40023c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400240:	2000      	movs	r0, #0
  400242:	4770      	bx	lr
  400244:	00400a0f 	.word	0x00400a0f
  400248:	400a0000 	.word	0x400a0000
  40024c:	400a4000 	.word	0x400a4000
  400250:	400e0600 	.word	0x400e0600
  400254:	40060600 	.word	0x40060600
  400258:	00400a31 	.word	0x00400a31

0040025c <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  40025c:	2a00      	cmp	r2, #0
  40025e:	d03f      	beq.n	4002e0 <usart_serial_read_packet+0x84>
{
  400260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400264:	b083      	sub	sp, #12
  400266:	4606      	mov	r6, r0
  400268:	460c      	mov	r4, r1
  40026a:	4693      	mov	fp, r2
  40026c:	448b      	add	fp, r1
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40026e:	4f1d      	ldr	r7, [pc, #116]	; (4002e4 <usart_serial_read_packet+0x88>)
		while (uart_read((Uart*)p_usart, data));
  400270:	4d1d      	ldr	r5, [pc, #116]	; (4002e8 <usart_serial_read_packet+0x8c>)
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400272:	f8df a080 	ldr.w	sl, [pc, #128]	; 4002f4 <usart_serial_read_packet+0x98>
  400276:	e00d      	b.n	400294 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
  400278:	4621      	mov	r1, r4
  40027a:	4638      	mov	r0, r7
  40027c:	47a8      	blx	r5
  40027e:	2800      	cmp	r0, #0
  400280:	d1fa      	bne.n	400278 <usart_serial_read_packet+0x1c>
  400282:	e010      	b.n	4002a6 <usart_serial_read_packet+0x4a>
		while (uart_read((Uart*)p_usart, data));
  400284:	4621      	mov	r1, r4
  400286:	4650      	mov	r0, sl
  400288:	47a8      	blx	r5
  40028a:	2800      	cmp	r0, #0
  40028c:	d1fa      	bne.n	400284 <usart_serial_read_packet+0x28>
		usart_serial_getchar(usart, data);
		len--;
		data++;
  40028e:	3401      	adds	r4, #1
	while (len) {
  400290:	455c      	cmp	r4, fp
  400292:	d021      	beq.n	4002d8 <usart_serial_read_packet+0x7c>
	uint32_t val = 0;
  400294:	2300      	movs	r3, #0
  400296:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400298:	42be      	cmp	r6, r7
  40029a:	d0ed      	beq.n	400278 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40029c:	4556      	cmp	r6, sl
  40029e:	d0f1      	beq.n	400284 <usart_serial_read_packet+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002a0:	4b12      	ldr	r3, [pc, #72]	; (4002ec <usart_serial_read_packet+0x90>)
  4002a2:	429e      	cmp	r6, r3
  4002a4:	d00d      	beq.n	4002c2 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002a6:	4b12      	ldr	r3, [pc, #72]	; (4002f0 <usart_serial_read_packet+0x94>)
  4002a8:	429e      	cmp	r6, r3
  4002aa:	d1f0      	bne.n	40028e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  4002ac:	4699      	mov	r9, r3
  4002ae:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4002f8 <usart_serial_read_packet+0x9c>
  4002b2:	a901      	add	r1, sp, #4
  4002b4:	4648      	mov	r0, r9
  4002b6:	47c0      	blx	r8
  4002b8:	2800      	cmp	r0, #0
  4002ba:	d1fa      	bne.n	4002b2 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  4002bc:	9b01      	ldr	r3, [sp, #4]
  4002be:	7023      	strb	r3, [r4, #0]
  4002c0:	e7e5      	b.n	40028e <usart_serial_read_packet+0x32>
		while (usart_read(p_usart, &val));
  4002c2:	4699      	mov	r9, r3
  4002c4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4002f8 <usart_serial_read_packet+0x9c>
  4002c8:	a901      	add	r1, sp, #4
  4002ca:	4648      	mov	r0, r9
  4002cc:	47c0      	blx	r8
  4002ce:	2800      	cmp	r0, #0
  4002d0:	d1fa      	bne.n	4002c8 <usart_serial_read_packet+0x6c>
		*data = (uint8_t)(val & 0xFF);
  4002d2:	9b01      	ldr	r3, [sp, #4]
  4002d4:	7023      	strb	r3, [r4, #0]
  4002d6:	e7da      	b.n	40028e <usart_serial_read_packet+0x32>
	}
	return STATUS_OK;
}
  4002d8:	2000      	movs	r0, #0
  4002da:	b003      	add	sp, #12
  4002dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002e0:	2000      	movs	r0, #0
  4002e2:	4770      	bx	lr
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	00400a1f 	.word	0x00400a1f
  4002ec:	400a0000 	.word	0x400a0000
  4002f0:	400a4000 	.word	0x400a4000
  4002f4:	40060600 	.word	0x40060600
  4002f8:	00400a45 	.word	0x00400a45

004002fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400300:	b980      	cbnz	r0, 400324 <_read+0x28>
  400302:	460c      	mov	r4, r1
  400304:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400306:	2a00      	cmp	r2, #0
  400308:	dd0f      	ble.n	40032a <_read+0x2e>
  40030a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40030c:	4e08      	ldr	r6, [pc, #32]	; (400330 <_read+0x34>)
  40030e:	4d09      	ldr	r5, [pc, #36]	; (400334 <_read+0x38>)
  400310:	6830      	ldr	r0, [r6, #0]
  400312:	4621      	mov	r1, r4
  400314:	682b      	ldr	r3, [r5, #0]
  400316:	4798      	blx	r3
		ptr++;
  400318:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40031a:	42bc      	cmp	r4, r7
  40031c:	d1f8      	bne.n	400310 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40031e:	4640      	mov	r0, r8
  400320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400324:	f04f 38ff 	mov.w	r8, #4294967295
  400328:	e7f9      	b.n	40031e <_read+0x22>
	for (; len > 0; --len) {
  40032a:	4680      	mov	r8, r0
  40032c:	e7f7      	b.n	40031e <_read+0x22>
  40032e:	bf00      	nop
  400330:	20008bc8 	.word	0x20008bc8
  400334:	20008bc0 	.word	0x20008bc0

00400338 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400338:	3801      	subs	r0, #1
  40033a:	2802      	cmp	r0, #2
  40033c:	d815      	bhi.n	40036a <_write+0x32>
{
  40033e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400342:	460e      	mov	r6, r1
  400344:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400346:	b19a      	cbz	r2, 400370 <_write+0x38>
  400348:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40034a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400384 <_write+0x4c>
  40034e:	4f0c      	ldr	r7, [pc, #48]	; (400380 <_write+0x48>)
  400350:	f8d8 0000 	ldr.w	r0, [r8]
  400354:	f815 1b01 	ldrb.w	r1, [r5], #1
  400358:	683b      	ldr	r3, [r7, #0]
  40035a:	4798      	blx	r3
  40035c:	2800      	cmp	r0, #0
  40035e:	db0a      	blt.n	400376 <_write+0x3e>
  400360:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400362:	3c01      	subs	r4, #1
  400364:	d1f4      	bne.n	400350 <_write+0x18>
  400366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40036a:	f04f 30ff 	mov.w	r0, #4294967295
  40036e:	4770      	bx	lr
	for (; len != 0; --len) {
  400370:	4610      	mov	r0, r2
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400376:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40037e:	bf00      	nop
  400380:	20008bc4 	.word	0x20008bc4
  400384:	20008bc8 	.word	0x20008bc8

00400388 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400388:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40038a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40038e:	4b21      	ldr	r3, [pc, #132]	; (400414 <board_init+0x8c>)
  400390:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	2009      	movs	r0, #9
  400394:	4c20      	ldr	r4, [pc, #128]	; (400418 <board_init+0x90>)
  400396:	47a0      	blx	r4
  400398:	200a      	movs	r0, #10
  40039a:	47a0      	blx	r4
  40039c:	200b      	movs	r0, #11
  40039e:	47a0      	blx	r4
  4003a0:	200c      	movs	r0, #12
  4003a2:	47a0      	blx	r4
  4003a4:	200d      	movs	r0, #13
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b1c      	ldr	r3, [pc, #112]	; (40041c <board_init+0x94>)
  4003aa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4003ba:	2204      	movs	r2, #4
  4003bc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003c8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003ca:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d2:	f021 0104 	bic.w	r1, r1, #4
  4003d6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003d8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003da:	f021 0104 	bic.w	r1, r1, #4
  4003de:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4003f0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003f8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400400:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400404:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400406:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400408:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40040c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40040e:	605a      	str	r2, [r3, #4]
  400410:	bd10      	pop	{r4, pc}
  400412:	bf00      	nop
  400414:	400e1850 	.word	0x400e1850
  400418:	004008f1 	.word	0x004008f1
  40041c:	400e1400 	.word	0x400e1400

00400420 <acc_init>:
		Acc *p_acc,
		uint32_t ul_select_plus,
		uint32_t ul_select_minus,
		uint32_t ul_edge_type,
		uint32_t ul_invert)
{
  400420:	b410      	push	{r4}
	/* Validate the parameters. */
	Assert(p_acc);
	
	/* Reset the controller. */
	p_acc->ACC_CR |= ACC_CR_SWRST;
  400422:	6804      	ldr	r4, [r0, #0]
  400424:	f044 0401 	orr.w	r4, r4, #1
  400428:	6004      	str	r4, [r0, #0]

	/* Write to the MR register. */
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  40042a:	9c01      	ldr	r4, [sp, #4]
  40042c:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
  400430:	f444 7480 	orr.w	r4, r4, #256	; 0x100
			((ul_edge_type) & ACC_MR_EDGETYP_Msk) | 
  400434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400438:	431c      	orrs	r4, r3
			((ul_select_minus) & ACC_MR_SELMINUS_Msk) | 
  40043a:	f002 0207 	and.w	r2, r2, #7
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  40043e:	4314      	orrs	r4, r2
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400440:	f001 0170 	and.w	r1, r1, #112	; 0x70
			((ul_invert) & ACC_MR_INV)) | ACC_MR_ACEN_EN;
  400444:	430c      	orrs	r4, r1
	p_acc->ACC_MR = (((ul_select_plus) & ACC_MR_SELPLUS_Msk) | 
  400446:	6044      	str	r4, [r0, #4]

	/* Set hysteresis and current option. */
	p_acc->ACC_ACR = (ACC_ACR_ISEL_HISP |
  400448:	2303      	movs	r3, #3
  40044a:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
			ACC_ACR_HYST(ACC_ACR_HYST_50mv_max));

	/* Automatic Output Masking Period. */
	while (p_acc->ACC_ISR & (uint32_t) ACC_ISR_MASK);
  40044e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400450:	2b00      	cmp	r3, #0
  400452:	dbfc      	blt.n	40044e <acc_init+0x2e>
}
  400454:	f85d 4b04 	ldr.w	r4, [sp], #4
  400458:	4770      	bx	lr

0040045a <acc_get_comparison_result>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	uint32_t ul_temp = p_acc->ACC_MR;
  40045a:	6843      	ldr	r3, [r0, #4]
	uint32_t ul_status = p_acc->ACC_ISR;
  40045c:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if ((ul_temp & ACC_MR_INV_EN) == ACC_MR_INV_EN) {
  40045e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		if (ul_status & ACC_ISR_SCO) {
  400462:	bf18      	it	ne
  400464:	f080 0002 	eorne.w	r0, r0, #2
			return 0;	/* inn>inp */
		} else {
			return 1;	/* inp>inn */
		}
	} else {
		if (ul_status & ACC_ISR_SCO) {
  400468:	f3c0 0040 	ubfx	r0, r0, #1, #1
			return 1;	/* inp>inn */
		} else {
			return 0;	/* inn>inp */
		}
	}
}
  40046c:	4770      	bx	lr

0040046e <acc_enable_interrupt>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	p_acc->ACC_IER = ACC_IER_CE;
  40046e:	2301      	movs	r3, #1
  400470:	6243      	str	r3, [r0, #36]	; 0x24
  400472:	4770      	bx	lr

00400474 <acc_get_interrupt_status>:
		Acc *p_acc)
{
	/* Validate the parameters. */
	Assert(p_acc);
	
	return p_acc->ACC_ISR;
  400474:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400476:	4770      	bx	lr

00400478 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400478:	b570      	push	{r4, r5, r6, lr}
  40047a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40047c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40047e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400480:	4013      	ands	r3, r2
  400482:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400484:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400486:	4d21      	ldr	r5, [pc, #132]	; (40050c <afec_process_callback+0x94>)
  400488:	42a8      	cmp	r0, r5
  40048a:	bf14      	ite	ne
  40048c:	2500      	movne	r5, #0
  40048e:	2501      	moveq	r5, #1
  400490:	006e      	lsls	r6, r5, #1
  400492:	442e      	add	r6, r5
  400494:	e00b      	b.n	4004ae <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400496:	2c14      	cmp	r4, #20
  400498:	d824      	bhi.n	4004e4 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40049a:	9a01      	ldr	r2, [sp, #4]
  40049c:	f104 0108 	add.w	r1, r4, #8
  4004a0:	2301      	movs	r3, #1
  4004a2:	408b      	lsls	r3, r1
  4004a4:	4213      	tst	r3, r2
  4004a6:	d113      	bne.n	4004d0 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4004a8:	3401      	adds	r4, #1
  4004aa:	2c17      	cmp	r4, #23
  4004ac:	d02b      	beq.n	400506 <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4004ae:	2c0f      	cmp	r4, #15
  4004b0:	d8f1      	bhi.n	400496 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4004b2:	9a01      	ldr	r2, [sp, #4]
  4004b4:	2301      	movs	r3, #1
  4004b6:	40a3      	lsls	r3, r4
  4004b8:	4213      	tst	r3, r2
  4004ba:	d0f5      	beq.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004bc:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004c0:	4423      	add	r3, r4
  4004c2:	4a13      	ldr	r2, [pc, #76]	; (400510 <afec_process_callback+0x98>)
  4004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004c8:	2b00      	cmp	r3, #0
  4004ca:	d0ed      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004cc:	4798      	blx	r3
  4004ce:	e7eb      	b.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004d0:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004d4:	4423      	add	r3, r4
  4004d6:	4a0e      	ldr	r2, [pc, #56]	; (400510 <afec_process_callback+0x98>)
  4004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004dc:	2b00      	cmp	r3, #0
  4004de:	d0e3      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004e0:	4798      	blx	r3
  4004e2:	e7e1      	b.n	4004a8 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4004e4:	9a01      	ldr	r2, [sp, #4]
  4004e6:	f104 0109 	add.w	r1, r4, #9
  4004ea:	2301      	movs	r3, #1
  4004ec:	408b      	lsls	r3, r1
  4004ee:	4213      	tst	r3, r2
  4004f0:	d0da      	beq.n	4004a8 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004f2:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4004f6:	4423      	add	r3, r4
  4004f8:	4a05      	ldr	r2, [pc, #20]	; (400510 <afec_process_callback+0x98>)
  4004fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4004fe:	2b00      	cmp	r3, #0
  400500:	d0d2      	beq.n	4004a8 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400502:	4798      	blx	r3
  400504:	e7d0      	b.n	4004a8 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400506:	b002      	add	sp, #8
  400508:	bd70      	pop	{r4, r5, r6, pc}
  40050a:	bf00      	nop
  40050c:	400b4000 	.word	0x400b4000
  400510:	20008bcc 	.word	0x20008bcc

00400514 <afec_ch_set_config>:
{
  400514:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400516:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400518:	2301      	movs	r3, #1
  40051a:	408b      	lsls	r3, r1
  40051c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400520:	7815      	ldrb	r5, [r2, #0]
  400522:	2d00      	cmp	r5, #0
  400524:	bf08      	it	eq
  400526:	2300      	moveq	r3, #0
  400528:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40052a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40052c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40052e:	004b      	lsls	r3, r1, #1
  400530:	2103      	movs	r1, #3
  400532:	4099      	lsls	r1, r3
  400534:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400538:	7851      	ldrb	r1, [r2, #1]
  40053a:	4099      	lsls	r1, r3
  40053c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40053e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400540:	bc30      	pop	{r4, r5}
  400542:	4770      	bx	lr

00400544 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400544:	2200      	movs	r2, #0
  400546:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400548:	4b08      	ldr	r3, [pc, #32]	; (40056c <afec_get_config_defaults+0x28>)
  40054a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40054c:	4b08      	ldr	r3, [pc, #32]	; (400570 <afec_get_config_defaults+0x2c>)
  40054e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400550:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400554:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400556:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400558:	2302      	movs	r3, #2
  40055a:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  40055c:	2301      	movs	r3, #1
  40055e:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400560:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400562:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400564:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400566:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400568:	7683      	strb	r3, [r0, #26]
  40056a:	4770      	bx	lr
  40056c:	05b8d800 	.word	0x05b8d800
  400570:	005b8d80 	.word	0x005b8d80

00400574 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400574:	2300      	movs	r3, #0
  400576:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400578:	2301      	movs	r3, #1
  40057a:	7043      	strb	r3, [r0, #1]
  40057c:	4770      	bx	lr
	...

00400580 <afec_init>:
	return afec->AFEC_ISR;
  400580:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400582:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400586:	d001      	beq.n	40058c <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400588:	2019      	movs	r0, #25
  40058a:	4770      	bx	lr
{
  40058c:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40058e:	2301      	movs	r3, #1
  400590:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400592:	7dcb      	ldrb	r3, [r1, #23]
  400594:	2b00      	cmp	r3, #0
  400596:	bf14      	ite	ne
  400598:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  40059c:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  40059e:	7d8b      	ldrb	r3, [r1, #22]
  4005a0:	2b00      	cmp	r3, #0
  4005a2:	bf14      	ite	ne
  4005a4:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  4005a8:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  4005aa:	7d0b      	ldrb	r3, [r1, #20]
  4005ac:	061b      	lsls	r3, r3, #24
  4005ae:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005b2:	690a      	ldr	r2, [r1, #16]
  4005b4:	68ce      	ldr	r6, [r1, #12]
  4005b6:	4332      	orrs	r2, r6
  4005b8:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4005ba:	7d4a      	ldrb	r2, [r1, #21]
  4005bc:	0712      	lsls	r2, r2, #28
  4005be:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005c2:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  4005c4:	688a      	ldr	r2, [r1, #8]
  4005c6:	0056      	lsls	r6, r2, #1
  4005c8:	684a      	ldr	r2, [r1, #4]
  4005ca:	fbb2 f2f6 	udiv	r2, r2, r6
  4005ce:	3a01      	subs	r2, #1
  4005d0:	0212      	lsls	r2, r2, #8
  4005d2:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005d4:	4313      	orrs	r3, r2
  4005d6:	432b      	orrs	r3, r5
  4005d8:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  4005da:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005dc:	7e0b      	ldrb	r3, [r1, #24]
  4005de:	2b00      	cmp	r3, #0
  4005e0:	bf14      	ite	ne
  4005e2:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4005e6:	2300      	moveq	r3, #0
  4005e8:	680a      	ldr	r2, [r1, #0]
  4005ea:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4005ec:	7e4a      	ldrb	r2, [r1, #25]
  4005ee:	2a00      	cmp	r2, #0
  4005f0:	bf14      	ite	ne
  4005f2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4005f6:	2200      	moveq	r2, #0
			(config->resolution) |
  4005f8:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005fa:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  4005fc:	7e8b      	ldrb	r3, [r1, #26]
  4005fe:	021b      	lsls	r3, r3, #8
  400600:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400604:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400608:	4b0e      	ldr	r3, [pc, #56]	; (400644 <afec_init+0xc4>)
  40060a:	4298      	cmp	r0, r3
  40060c:	d005      	beq.n	40061a <afec_init+0x9a>
	if(afec == AFEC1) {
  40060e:	4b0e      	ldr	r3, [pc, #56]	; (400648 <afec_init+0xc8>)
  400610:	4298      	cmp	r0, r3
  400612:	d00c      	beq.n	40062e <afec_init+0xae>
	return STATUS_OK;
  400614:	2000      	movs	r0, #0
}
  400616:	bc70      	pop	{r4, r5, r6}
  400618:	4770      	bx	lr
  40061a:	4b0c      	ldr	r3, [pc, #48]	; (40064c <afec_init+0xcc>)
  40061c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400620:	2200      	movs	r2, #0
  400622:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400626:	428b      	cmp	r3, r1
  400628:	d1fb      	bne.n	400622 <afec_init+0xa2>
	return STATUS_OK;
  40062a:	2000      	movs	r0, #0
  40062c:	e7f3      	b.n	400616 <afec_init+0x96>
  40062e:	4b08      	ldr	r3, [pc, #32]	; (400650 <afec_init+0xd0>)
  400630:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400634:	2200      	movs	r2, #0
  400636:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40063a:	428b      	cmp	r3, r1
  40063c:	d1fb      	bne.n	400636 <afec_init+0xb6>
	return STATUS_OK;
  40063e:	2000      	movs	r0, #0
  400640:	e7e9      	b.n	400616 <afec_init+0x96>
  400642:	bf00      	nop
  400644:	400b0000 	.word	0x400b0000
  400648:	400b4000 	.word	0x400b4000
  40064c:	20008bc8 	.word	0x20008bc8
  400650:	20008c24 	.word	0x20008c24

00400654 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400654:	4b0c      	ldr	r3, [pc, #48]	; (400688 <afec_enable_interrupt+0x34>)
  400656:	4299      	cmp	r1, r3
  400658:	d007      	beq.n	40066a <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40065a:	290f      	cmp	r1, #15
  40065c:	d80b      	bhi.n	400676 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  40065e:	d006      	beq.n	40066e <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400660:	2301      	movs	r3, #1
  400662:	fa03 f101 	lsl.w	r1, r3, r1
  400666:	6241      	str	r1, [r0, #36]	; 0x24
  400668:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40066a:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  40066c:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  40066e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400672:	6243      	str	r3, [r0, #36]	; 0x24
  400674:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400676:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400678:	bf94      	ite	ls
  40067a:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  40067c:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  40067e:	2301      	movs	r3, #1
  400680:	fa03 f101 	lsl.w	r1, r3, r1
  400684:	6241      	str	r1, [r0, #36]	; 0x24
  400686:	4770      	bx	lr
  400688:	df00ffff 	.word	0xdf00ffff

0040068c <afec_set_callback>:
{
  40068c:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  40068e:	4c11      	ldr	r4, [pc, #68]	; (4006d4 <afec_set_callback+0x48>)
  400690:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400692:	bf0c      	ite	eq
  400694:	2417      	moveq	r4, #23
  400696:	2400      	movne	r4, #0
  400698:	440c      	add	r4, r1
  40069a:	4d0f      	ldr	r5, [pc, #60]	; (4006d8 <afec_set_callback+0x4c>)
  40069c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4006a0:	d10a      	bne.n	4006b8 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006a2:	4a0e      	ldr	r2, [pc, #56]	; (4006dc <afec_set_callback+0x50>)
  4006a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  4006a8:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006ac:	011b      	lsls	r3, r3, #4
  4006ae:	b2db      	uxtb	r3, r3
  4006b0:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006b4:	6014      	str	r4, [r2, #0]
  4006b6:	e009      	b.n	4006cc <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006b8:	4a08      	ldr	r2, [pc, #32]	; (4006dc <afec_set_callback+0x50>)
  4006ba:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4006be:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006c2:	011b      	lsls	r3, r3, #4
  4006c4:	b2db      	uxtb	r3, r3
  4006c6:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006ca:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  4006cc:	4b04      	ldr	r3, [pc, #16]	; (4006e0 <afec_set_callback+0x54>)
  4006ce:	4798      	blx	r3
  4006d0:	bd38      	pop	{r3, r4, r5, pc}
  4006d2:	bf00      	nop
  4006d4:	400b4000 	.word	0x400b4000
  4006d8:	20008bcc 	.word	0x20008bcc
  4006dc:	e000e100 	.word	0xe000e100
  4006e0:	00400655 	.word	0x00400655

004006e4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4006e4:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4006e6:	4802      	ldr	r0, [pc, #8]	; (4006f0 <AFEC0_Handler+0xc>)
  4006e8:	4b02      	ldr	r3, [pc, #8]	; (4006f4 <AFEC0_Handler+0x10>)
  4006ea:	4798      	blx	r3
  4006ec:	bd08      	pop	{r3, pc}
  4006ee:	bf00      	nop
  4006f0:	400b0000 	.word	0x400b0000
  4006f4:	00400479 	.word	0x00400479

004006f8 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4006f8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4006fa:	4802      	ldr	r0, [pc, #8]	; (400704 <AFEC1_Handler+0xc>)
  4006fc:	4b02      	ldr	r3, [pc, #8]	; (400708 <AFEC1_Handler+0x10>)
  4006fe:	4798      	blx	r3
  400700:	bd08      	pop	{r3, pc}
  400702:	bf00      	nop
  400704:	400b4000 	.word	0x400b4000
  400708:	00400479 	.word	0x00400479

0040070c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40070c:	b500      	push	{lr}
  40070e:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400710:	4b13      	ldr	r3, [pc, #76]	; (400760 <afec_enable+0x54>)
  400712:	4298      	cmp	r0, r3
  400714:	bf0c      	ite	eq
  400716:	201f      	moveq	r0, #31
  400718:	201e      	movne	r0, #30
  40071a:	4b12      	ldr	r3, [pc, #72]	; (400764 <afec_enable+0x58>)
  40071c:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40071e:	4b12      	ldr	r3, [pc, #72]	; (400768 <afec_enable+0x5c>)
  400720:	789b      	ldrb	r3, [r3, #2]
  400722:	2bff      	cmp	r3, #255	; 0xff
  400724:	d01a      	beq.n	40075c <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400726:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40072a:	fab3 f383 	clz	r3, r3
  40072e:	095b      	lsrs	r3, r3, #5
  400730:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400732:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400734:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400738:	2200      	movs	r2, #0
  40073a:	4b0c      	ldr	r3, [pc, #48]	; (40076c <afec_enable+0x60>)
  40073c:	701a      	strb	r2, [r3, #0]
	return flags;
  40073e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400740:	4a09      	ldr	r2, [pc, #36]	; (400768 <afec_enable+0x5c>)
  400742:	7893      	ldrb	r3, [r2, #2]
  400744:	3301      	adds	r3, #1
  400746:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400748:	b129      	cbz	r1, 400756 <afec_enable+0x4a>
		cpu_irq_enable();
  40074a:	2201      	movs	r2, #1
  40074c:	4b07      	ldr	r3, [pc, #28]	; (40076c <afec_enable+0x60>)
  40074e:	701a      	strb	r2, [r3, #0]
  400750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400754:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400756:	b003      	add	sp, #12
  400758:	f85d fb04 	ldr.w	pc, [sp], #4
  40075c:	e7fe      	b.n	40075c <afec_enable+0x50>
  40075e:	bf00      	nop
  400760:	400b4000 	.word	0x400b4000
  400764:	004008f1 	.word	0x004008f1
  400768:	20008bb8 	.word	0x20008bb8
  40076c:	20000000 	.word	0x20000000

00400770 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  400770:	2301      	movs	r3, #1
  400772:	6003      	str	r3, [r0, #0]
  400774:	4770      	bx	lr

00400776 <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  400776:	6843      	ldr	r3, [r0, #4]
  400778:	f023 0301 	bic.w	r3, r3, #1
  40077c:	6043      	str	r3, [r0, #4]
  40077e:	4770      	bx	lr

00400780 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  400780:	b949      	cbnz	r1, 400796 <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400782:	6843      	ldr	r3, [r0, #4]
  400784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400788:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  40078a:	6843      	ldr	r3, [r0, #4]
  40078c:	f023 0310 	bic.w	r3, r3, #16
  400790:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  400792:	2000      	movs	r0, #0
  400794:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400796:	6843      	ldr	r3, [r0, #4]
  400798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40079c:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  40079e:	6843      	ldr	r3, [r0, #4]
  4007a0:	f043 0310 	orr.w	r3, r3, #16
  4007a4:	6043      	str	r3, [r0, #4]
  4007a6:	e7f4      	b.n	400792 <dacc_set_transfer_mode+0x12>

004007a8 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  4007a8:	6201      	str	r1, [r0, #32]
  4007aa:	4770      	bx	lr

004007ac <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4007ac:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4007ae:	2901      	cmp	r1, #1
  4007b0:	d901      	bls.n	4007b6 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  4007b2:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4007b4:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  4007b6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4007ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4007be:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  4007c0:	2000      	movs	r0, #0
  4007c2:	4770      	bx	lr

004007c4 <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  4007c4:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  4007c6:	b941      	cbnz	r1, 4007da <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  4007c8:	4907      	ldr	r1, [pc, #28]	; (4007e8 <dacc_set_timing+0x24>)
  4007ca:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  4007cc:	0612      	lsls	r2, r2, #24
  4007ce:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  4007d2:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  4007d4:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  4007d6:	2000      	movs	r0, #0
  4007d8:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  4007da:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  4007de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  4007e2:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  4007e6:	e7f1      	b.n	4007cc <dacc_set_timing+0x8>
  4007e8:	c0df00ff 	.word	0xc0df00ff

004007ec <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  4007ec:	2901      	cmp	r1, #1
  4007ee:	d901      	bls.n	4007f4 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  4007f0:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  4007f2:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  4007f4:	2301      	movs	r3, #1
  4007f6:	fa03 f101 	lsl.w	r1, r3, r1
  4007fa:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  4007fc:	2000      	movs	r0, #0
  4007fe:	4770      	bx	lr

00400800 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400800:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400804:	2000      	movs	r0, #0
  400806:	4770      	bx	lr

00400808 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400808:	4a17      	ldr	r2, [pc, #92]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  40080a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40080c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400810:	4318      	orrs	r0, r3
  400812:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400814:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400816:	f013 0f08 	tst.w	r3, #8
  40081a:	d10a      	bne.n	400832 <pmc_switch_mck_to_pllack+0x2a>
  40081c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400820:	4911      	ldr	r1, [pc, #68]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  400822:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400824:	f012 0f08 	tst.w	r2, #8
  400828:	d103      	bne.n	400832 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40082a:	3b01      	subs	r3, #1
  40082c:	d1f9      	bne.n	400822 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40082e:	2001      	movs	r0, #1
  400830:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400832:	4a0d      	ldr	r2, [pc, #52]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  400834:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400836:	f023 0303 	bic.w	r3, r3, #3
  40083a:	f043 0302 	orr.w	r3, r3, #2
  40083e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400840:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400842:	f013 0f08 	tst.w	r3, #8
  400846:	d10a      	bne.n	40085e <pmc_switch_mck_to_pllack+0x56>
  400848:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40084c:	4906      	ldr	r1, [pc, #24]	; (400868 <pmc_switch_mck_to_pllack+0x60>)
  40084e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400850:	f012 0f08 	tst.w	r2, #8
  400854:	d105      	bne.n	400862 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400856:	3b01      	subs	r3, #1
  400858:	d1f9      	bne.n	40084e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40085a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40085c:	4770      	bx	lr
	return 0;
  40085e:	2000      	movs	r0, #0
  400860:	4770      	bx	lr
  400862:	2000      	movs	r0, #0
  400864:	4770      	bx	lr
  400866:	bf00      	nop
  400868:	400e0400 	.word	0x400e0400

0040086c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40086c:	b9c8      	cbnz	r0, 4008a2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40086e:	4a11      	ldr	r2, [pc, #68]	; (4008b4 <pmc_switch_mainck_to_xtal+0x48>)
  400870:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400872:	0209      	lsls	r1, r1, #8
  400874:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400876:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40087a:	f023 0303 	bic.w	r3, r3, #3
  40087e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400882:	f043 0301 	orr.w	r3, r3, #1
  400886:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400888:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40088a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40088c:	f013 0f01 	tst.w	r3, #1
  400890:	d0fb      	beq.n	40088a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400892:	4a08      	ldr	r2, [pc, #32]	; (4008b4 <pmc_switch_mainck_to_xtal+0x48>)
  400894:	6a13      	ldr	r3, [r2, #32]
  400896:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40089a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40089e:	6213      	str	r3, [r2, #32]
  4008a0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008a2:	4904      	ldr	r1, [pc, #16]	; (4008b4 <pmc_switch_mainck_to_xtal+0x48>)
  4008a4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4008a6:	4a04      	ldr	r2, [pc, #16]	; (4008b8 <pmc_switch_mainck_to_xtal+0x4c>)
  4008a8:	401a      	ands	r2, r3
  4008aa:	4b04      	ldr	r3, [pc, #16]	; (4008bc <pmc_switch_mainck_to_xtal+0x50>)
  4008ac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008ae:	620b      	str	r3, [r1, #32]
  4008b0:	4770      	bx	lr
  4008b2:	bf00      	nop
  4008b4:	400e0400 	.word	0x400e0400
  4008b8:	fec8fffc 	.word	0xfec8fffc
  4008bc:	01370002 	.word	0x01370002

004008c0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4008c0:	4b02      	ldr	r3, [pc, #8]	; (4008cc <pmc_osc_is_ready_mainck+0xc>)
  4008c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008c4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4008c8:	4770      	bx	lr
  4008ca:	bf00      	nop
  4008cc:	400e0400 	.word	0x400e0400

004008d0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4008d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008d4:	4b01      	ldr	r3, [pc, #4]	; (4008dc <pmc_disable_pllack+0xc>)
  4008d6:	629a      	str	r2, [r3, #40]	; 0x28
  4008d8:	4770      	bx	lr
  4008da:	bf00      	nop
  4008dc:	400e0400 	.word	0x400e0400

004008e0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4008e0:	4b02      	ldr	r3, [pc, #8]	; (4008ec <pmc_is_locked_pllack+0xc>)
  4008e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008e4:	f000 0002 	and.w	r0, r0, #2
  4008e8:	4770      	bx	lr
  4008ea:	bf00      	nop
  4008ec:	400e0400 	.word	0x400e0400

004008f0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4008f0:	282f      	cmp	r0, #47	; 0x2f
  4008f2:	d81e      	bhi.n	400932 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4008f4:	281f      	cmp	r0, #31
  4008f6:	d80c      	bhi.n	400912 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008f8:	4b11      	ldr	r3, [pc, #68]	; (400940 <pmc_enable_periph_clk+0x50>)
  4008fa:	699a      	ldr	r2, [r3, #24]
  4008fc:	2301      	movs	r3, #1
  4008fe:	4083      	lsls	r3, r0
  400900:	4393      	bics	r3, r2
  400902:	d018      	beq.n	400936 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400904:	2301      	movs	r3, #1
  400906:	fa03 f000 	lsl.w	r0, r3, r0
  40090a:	4b0d      	ldr	r3, [pc, #52]	; (400940 <pmc_enable_periph_clk+0x50>)
  40090c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40090e:	2000      	movs	r0, #0
  400910:	4770      	bx	lr
		ul_id -= 32;
  400912:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400914:	4b0a      	ldr	r3, [pc, #40]	; (400940 <pmc_enable_periph_clk+0x50>)
  400916:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40091a:	2301      	movs	r3, #1
  40091c:	4083      	lsls	r3, r0
  40091e:	4393      	bics	r3, r2
  400920:	d00b      	beq.n	40093a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400922:	2301      	movs	r3, #1
  400924:	fa03 f000 	lsl.w	r0, r3, r0
  400928:	4b05      	ldr	r3, [pc, #20]	; (400940 <pmc_enable_periph_clk+0x50>)
  40092a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40092e:	2000      	movs	r0, #0
  400930:	4770      	bx	lr
		return 1;
  400932:	2001      	movs	r0, #1
  400934:	4770      	bx	lr
	return 0;
  400936:	2000      	movs	r0, #0
  400938:	4770      	bx	lr
  40093a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40093c:	4770      	bx	lr
  40093e:	bf00      	nop
  400940:	400e0400 	.word	0x400e0400

00400944 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400944:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400946:	0189      	lsls	r1, r1, #6
  400948:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40094a:	2402      	movs	r4, #2
  40094c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40094e:	f04f 31ff 	mov.w	r1, #4294967295
  400952:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400954:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400956:	605a      	str	r2, [r3, #4]
}
  400958:	f85d 4b04 	ldr.w	r4, [sp], #4
  40095c:	4770      	bx	lr

0040095e <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40095e:	0189      	lsls	r1, r1, #6
  400960:	2305      	movs	r3, #5
  400962:	5043      	str	r3, [r0, r1]
  400964:	4770      	bx	lr

00400966 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400966:	b4f0      	push	{r4, r5, r6, r7}
  400968:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40096a:	2402      	movs	r4, #2
  40096c:	9401      	str	r4, [sp, #4]
  40096e:	2408      	movs	r4, #8
  400970:	9402      	str	r4, [sp, #8]
  400972:	2420      	movs	r4, #32
  400974:	9403      	str	r4, [sp, #12]
  400976:	2480      	movs	r4, #128	; 0x80
  400978:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40097a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40097c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40097e:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400980:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400984:	d814      	bhi.n	4009b0 <tc_find_mck_divisor+0x4a>
  400986:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400988:	42a0      	cmp	r0, r4
  40098a:	d217      	bcs.n	4009bc <tc_find_mck_divisor+0x56>
  40098c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40098e:	af01      	add	r7, sp, #4
  400990:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400994:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400998:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  40099a:	4284      	cmp	r4, r0
  40099c:	d30a      	bcc.n	4009b4 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  40099e:	4286      	cmp	r6, r0
  4009a0:	d90d      	bls.n	4009be <tc_find_mck_divisor+0x58>
			ul_index++) {
  4009a2:	3501      	adds	r5, #1
	for (ul_index = 0;
  4009a4:	2d05      	cmp	r5, #5
  4009a6:	d1f3      	bne.n	400990 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4009a8:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4009aa:	b006      	add	sp, #24
  4009ac:	bcf0      	pop	{r4, r5, r6, r7}
  4009ae:	4770      	bx	lr
			return 0;
  4009b0:	2000      	movs	r0, #0
  4009b2:	e7fa      	b.n	4009aa <tc_find_mck_divisor+0x44>
  4009b4:	2000      	movs	r0, #0
  4009b6:	e7f8      	b.n	4009aa <tc_find_mck_divisor+0x44>
	return 1;
  4009b8:	2001      	movs	r0, #1
  4009ba:	e7f6      	b.n	4009aa <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4009bc:	2500      	movs	r5, #0
	if (p_uldiv) {
  4009be:	b12a      	cbz	r2, 4009cc <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4009c0:	a906      	add	r1, sp, #24
  4009c2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4009c6:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4009ca:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4009cc:	2b00      	cmp	r3, #0
  4009ce:	d0f3      	beq.n	4009b8 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4009d0:	601d      	str	r5, [r3, #0]
	return 1;
  4009d2:	2001      	movs	r0, #1
  4009d4:	e7e9      	b.n	4009aa <tc_find_mck_divisor+0x44>

004009d6 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4009d6:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4009d8:	23ac      	movs	r3, #172	; 0xac
  4009da:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4009dc:	680b      	ldr	r3, [r1, #0]
  4009de:	684a      	ldr	r2, [r1, #4]
  4009e0:	fbb3 f3f2 	udiv	r3, r3, r2
  4009e4:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4009e6:	1e5c      	subs	r4, r3, #1
  4009e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4009ec:	4294      	cmp	r4, r2
  4009ee:	d80c      	bhi.n	400a0a <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  4009f0:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4009f2:	688b      	ldr	r3, [r1, #8]
  4009f4:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4009f6:	f240 2302 	movw	r3, #514	; 0x202
  4009fa:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4009fe:	2350      	movs	r3, #80	; 0x50
  400a00:	6003      	str	r3, [r0, #0]

	return 0;
  400a02:	2000      	movs	r0, #0
}
  400a04:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a08:	4770      	bx	lr
		return 1;
  400a0a:	2001      	movs	r0, #1
  400a0c:	e7fa      	b.n	400a04 <uart_init+0x2e>

00400a0e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400a0e:	6943      	ldr	r3, [r0, #20]
  400a10:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400a14:	bf1a      	itte	ne
  400a16:	61c1      	strne	r1, [r0, #28]
	return 0;
  400a18:	2000      	movne	r0, #0
		return 1;
  400a1a:	2001      	moveq	r0, #1
}
  400a1c:	4770      	bx	lr

00400a1e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400a1e:	6943      	ldr	r3, [r0, #20]
  400a20:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400a24:	bf1d      	ittte	ne
  400a26:	6983      	ldrne	r3, [r0, #24]
  400a28:	700b      	strbne	r3, [r1, #0]
	return 0;
  400a2a:	2000      	movne	r0, #0
		return 1;
  400a2c:	2001      	moveq	r0, #1
}
  400a2e:	4770      	bx	lr

00400a30 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a30:	6943      	ldr	r3, [r0, #20]
  400a32:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400a36:	bf1d      	ittte	ne
  400a38:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400a3c:	61c1      	strne	r1, [r0, #28]
	return 0;
  400a3e:	2000      	movne	r0, #0
		return 1;
  400a40:	2001      	moveq	r0, #1
}
  400a42:	4770      	bx	lr

00400a44 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a44:	6943      	ldr	r3, [r0, #20]
  400a46:	f013 0f01 	tst.w	r3, #1
  400a4a:	d005      	beq.n	400a58 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a4c:	6983      	ldr	r3, [r0, #24]
  400a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a52:	600b      	str	r3, [r1, #0]

	return 0;
  400a54:	2000      	movs	r0, #0
  400a56:	4770      	bx	lr
		return 1;
  400a58:	2001      	movs	r0, #1
}
  400a5a:	4770      	bx	lr

00400a5c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400a5c:	e7fe      	b.n	400a5c <Dummy_Handler>
	...

00400a60 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400a60:	b500      	push	{lr}
  400a62:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400a64:	4b25      	ldr	r3, [pc, #148]	; (400afc <Reset_Handler+0x9c>)
  400a66:	4a26      	ldr	r2, [pc, #152]	; (400b00 <Reset_Handler+0xa0>)
  400a68:	429a      	cmp	r2, r3
  400a6a:	d010      	beq.n	400a8e <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400a6c:	4b25      	ldr	r3, [pc, #148]	; (400b04 <Reset_Handler+0xa4>)
  400a6e:	4a23      	ldr	r2, [pc, #140]	; (400afc <Reset_Handler+0x9c>)
  400a70:	429a      	cmp	r2, r3
  400a72:	d20c      	bcs.n	400a8e <Reset_Handler+0x2e>
  400a74:	3b01      	subs	r3, #1
  400a76:	1a9b      	subs	r3, r3, r2
  400a78:	f023 0303 	bic.w	r3, r3, #3
  400a7c:	3304      	adds	r3, #4
  400a7e:	4413      	add	r3, r2
  400a80:	491f      	ldr	r1, [pc, #124]	; (400b00 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400a82:	f851 0b04 	ldr.w	r0, [r1], #4
  400a86:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400a8a:	429a      	cmp	r2, r3
  400a8c:	d1f9      	bne.n	400a82 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400a8e:	4b1e      	ldr	r3, [pc, #120]	; (400b08 <Reset_Handler+0xa8>)
  400a90:	4a1e      	ldr	r2, [pc, #120]	; (400b0c <Reset_Handler+0xac>)
  400a92:	429a      	cmp	r2, r3
  400a94:	d20a      	bcs.n	400aac <Reset_Handler+0x4c>
  400a96:	3b01      	subs	r3, #1
  400a98:	1a9b      	subs	r3, r3, r2
  400a9a:	f023 0303 	bic.w	r3, r3, #3
  400a9e:	3304      	adds	r3, #4
  400aa0:	4413      	add	r3, r2
		*pDest++ = 0;
  400aa2:	2100      	movs	r1, #0
  400aa4:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400aa8:	4293      	cmp	r3, r2
  400aaa:	d1fb      	bne.n	400aa4 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400aac:	4a18      	ldr	r2, [pc, #96]	; (400b10 <Reset_Handler+0xb0>)
  400aae:	4b19      	ldr	r3, [pc, #100]	; (400b14 <Reset_Handler+0xb4>)
  400ab0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400ab4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400ab6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400aba:	fab3 f383 	clz	r3, r3
  400abe:	095b      	lsrs	r3, r3, #5
  400ac0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400ac2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400ac4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400ac8:	2200      	movs	r2, #0
  400aca:	4b13      	ldr	r3, [pc, #76]	; (400b18 <Reset_Handler+0xb8>)
  400acc:	701a      	strb	r2, [r3, #0]
	return flags;
  400ace:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400ad0:	4a12      	ldr	r2, [pc, #72]	; (400b1c <Reset_Handler+0xbc>)
  400ad2:	6813      	ldr	r3, [r2, #0]
  400ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ad8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400ada:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ade:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400ae2:	b129      	cbz	r1, 400af0 <Reset_Handler+0x90>
		cpu_irq_enable();
  400ae4:	2201      	movs	r2, #1
  400ae6:	4b0c      	ldr	r3, [pc, #48]	; (400b18 <Reset_Handler+0xb8>)
  400ae8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400aea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400aee:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400af0:	4b0b      	ldr	r3, [pc, #44]	; (400b20 <Reset_Handler+0xc0>)
  400af2:	4798      	blx	r3

	/* Branch to main function */
	main();
  400af4:	4b0b      	ldr	r3, [pc, #44]	; (400b24 <Reset_Handler+0xc4>)
  400af6:	4798      	blx	r3
  400af8:	e7fe      	b.n	400af8 <Reset_Handler+0x98>
  400afa:	bf00      	nop
  400afc:	20000000 	.word	0x20000000
  400b00:	00404960 	.word	0x00404960
  400b04:	20000854 	.word	0x20000854
  400b08:	20008cb0 	.word	0x20008cb0
  400b0c:	20000858 	.word	0x20000858
  400b10:	e000ed00 	.word	0xe000ed00
  400b14:	00400000 	.word	0x00400000
  400b18:	20000000 	.word	0x20000000
  400b1c:	e000ed88 	.word	0xe000ed88
  400b20:	0040381d 	.word	0x0040381d
  400b24:	00401691 	.word	0x00401691

00400b28 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400b28:	4b3b      	ldr	r3, [pc, #236]	; (400c18 <SystemCoreClockUpdate+0xf0>)
  400b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b2c:	f003 0303 	and.w	r3, r3, #3
  400b30:	2b01      	cmp	r3, #1
  400b32:	d01d      	beq.n	400b70 <SystemCoreClockUpdate+0x48>
  400b34:	b183      	cbz	r3, 400b58 <SystemCoreClockUpdate+0x30>
  400b36:	2b02      	cmp	r3, #2
  400b38:	d036      	beq.n	400ba8 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400b3a:	4b37      	ldr	r3, [pc, #220]	; (400c18 <SystemCoreClockUpdate+0xf0>)
  400b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b42:	2b70      	cmp	r3, #112	; 0x70
  400b44:	d05f      	beq.n	400c06 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400b46:	4b34      	ldr	r3, [pc, #208]	; (400c18 <SystemCoreClockUpdate+0xf0>)
  400b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400b4a:	4934      	ldr	r1, [pc, #208]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400b4c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400b50:	680b      	ldr	r3, [r1, #0]
  400b52:	40d3      	lsrs	r3, r2
  400b54:	600b      	str	r3, [r1, #0]
  400b56:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400b58:	4b31      	ldr	r3, [pc, #196]	; (400c20 <SystemCoreClockUpdate+0xf8>)
  400b5a:	695b      	ldr	r3, [r3, #20]
  400b5c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b60:	bf14      	ite	ne
  400b62:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b66:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400b6a:	4b2c      	ldr	r3, [pc, #176]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400b6c:	601a      	str	r2, [r3, #0]
  400b6e:	e7e4      	b.n	400b3a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400b70:	4b29      	ldr	r3, [pc, #164]	; (400c18 <SystemCoreClockUpdate+0xf0>)
  400b72:	6a1b      	ldr	r3, [r3, #32]
  400b74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b78:	d003      	beq.n	400b82 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400b7a:	4a2a      	ldr	r2, [pc, #168]	; (400c24 <SystemCoreClockUpdate+0xfc>)
  400b7c:	4b27      	ldr	r3, [pc, #156]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400b7e:	601a      	str	r2, [r3, #0]
  400b80:	e7db      	b.n	400b3a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b82:	4a29      	ldr	r2, [pc, #164]	; (400c28 <SystemCoreClockUpdate+0x100>)
  400b84:	4b25      	ldr	r3, [pc, #148]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400b86:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b88:	4b23      	ldr	r3, [pc, #140]	; (400c18 <SystemCoreClockUpdate+0xf0>)
  400b8a:	6a1b      	ldr	r3, [r3, #32]
  400b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b90:	2b10      	cmp	r3, #16
  400b92:	d005      	beq.n	400ba0 <SystemCoreClockUpdate+0x78>
  400b94:	2b20      	cmp	r3, #32
  400b96:	d1d0      	bne.n	400b3a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400b98:	4a22      	ldr	r2, [pc, #136]	; (400c24 <SystemCoreClockUpdate+0xfc>)
  400b9a:	4b20      	ldr	r3, [pc, #128]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400b9c:	601a      	str	r2, [r3, #0]
				break;
  400b9e:	e7cc      	b.n	400b3a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400ba0:	4a22      	ldr	r2, [pc, #136]	; (400c2c <SystemCoreClockUpdate+0x104>)
  400ba2:	4b1e      	ldr	r3, [pc, #120]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400ba4:	601a      	str	r2, [r3, #0]
				break;
  400ba6:	e7c8      	b.n	400b3a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400ba8:	4b1b      	ldr	r3, [pc, #108]	; (400c18 <SystemCoreClockUpdate+0xf0>)
  400baa:	6a1b      	ldr	r3, [r3, #32]
  400bac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bb0:	d016      	beq.n	400be0 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400bb2:	4a1c      	ldr	r2, [pc, #112]	; (400c24 <SystemCoreClockUpdate+0xfc>)
  400bb4:	4b19      	ldr	r3, [pc, #100]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400bb6:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400bb8:	4b17      	ldr	r3, [pc, #92]	; (400c18 <SystemCoreClockUpdate+0xf0>)
  400bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bbc:	f003 0303 	and.w	r3, r3, #3
  400bc0:	2b02      	cmp	r3, #2
  400bc2:	d1ba      	bne.n	400b3a <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bc4:	4a14      	ldr	r2, [pc, #80]	; (400c18 <SystemCoreClockUpdate+0xf0>)
  400bc6:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400bca:	4814      	ldr	r0, [pc, #80]	; (400c1c <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bcc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400bd0:	6803      	ldr	r3, [r0, #0]
  400bd2:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bd6:	b2d2      	uxtb	r2, r2
  400bd8:	fbb3 f3f2 	udiv	r3, r3, r2
  400bdc:	6003      	str	r3, [r0, #0]
  400bde:	e7ac      	b.n	400b3a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400be0:	4a11      	ldr	r2, [pc, #68]	; (400c28 <SystemCoreClockUpdate+0x100>)
  400be2:	4b0e      	ldr	r3, [pc, #56]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400be4:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400be6:	4b0c      	ldr	r3, [pc, #48]	; (400c18 <SystemCoreClockUpdate+0xf0>)
  400be8:	6a1b      	ldr	r3, [r3, #32]
  400bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bee:	2b10      	cmp	r3, #16
  400bf0:	d005      	beq.n	400bfe <SystemCoreClockUpdate+0xd6>
  400bf2:	2b20      	cmp	r3, #32
  400bf4:	d1e0      	bne.n	400bb8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400bf6:	4a0b      	ldr	r2, [pc, #44]	; (400c24 <SystemCoreClockUpdate+0xfc>)
  400bf8:	4b08      	ldr	r3, [pc, #32]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400bfa:	601a      	str	r2, [r3, #0]
				break;
  400bfc:	e7dc      	b.n	400bb8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400bfe:	4a0b      	ldr	r2, [pc, #44]	; (400c2c <SystemCoreClockUpdate+0x104>)
  400c00:	4b06      	ldr	r3, [pc, #24]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400c02:	601a      	str	r2, [r3, #0]
				break;
  400c04:	e7d8      	b.n	400bb8 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400c06:	4a05      	ldr	r2, [pc, #20]	; (400c1c <SystemCoreClockUpdate+0xf4>)
  400c08:	6813      	ldr	r3, [r2, #0]
  400c0a:	4909      	ldr	r1, [pc, #36]	; (400c30 <SystemCoreClockUpdate+0x108>)
  400c0c:	fba1 1303 	umull	r1, r3, r1, r3
  400c10:	085b      	lsrs	r3, r3, #1
  400c12:	6013      	str	r3, [r2, #0]
  400c14:	4770      	bx	lr
  400c16:	bf00      	nop
  400c18:	400e0400 	.word	0x400e0400
  400c1c:	20000004 	.word	0x20000004
  400c20:	400e1810 	.word	0x400e1810
  400c24:	00b71b00 	.word	0x00b71b00
  400c28:	003d0900 	.word	0x003d0900
  400c2c:	007a1200 	.word	0x007a1200
  400c30:	aaaaaaab 	.word	0xaaaaaaab

00400c34 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400c34:	4b12      	ldr	r3, [pc, #72]	; (400c80 <system_init_flash+0x4c>)
  400c36:	4298      	cmp	r0, r3
  400c38:	d911      	bls.n	400c5e <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400c3a:	4b12      	ldr	r3, [pc, #72]	; (400c84 <system_init_flash+0x50>)
  400c3c:	4298      	cmp	r0, r3
  400c3e:	d913      	bls.n	400c68 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400c40:	4b11      	ldr	r3, [pc, #68]	; (400c88 <system_init_flash+0x54>)
  400c42:	4298      	cmp	r0, r3
  400c44:	d914      	bls.n	400c70 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400c46:	4b11      	ldr	r3, [pc, #68]	; (400c8c <system_init_flash+0x58>)
  400c48:	4298      	cmp	r0, r3
  400c4a:	d915      	bls.n	400c78 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400c4c:	4b10      	ldr	r3, [pc, #64]	; (400c90 <system_init_flash+0x5c>)
  400c4e:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400c50:	bf94      	ite	ls
  400c52:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c56:	4a0f      	ldrhi	r2, [pc, #60]	; (400c94 <system_init_flash+0x60>)
  400c58:	4b0f      	ldr	r3, [pc, #60]	; (400c98 <system_init_flash+0x64>)
  400c5a:	601a      	str	r2, [r3, #0]
  400c5c:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c62:	4b0d      	ldr	r3, [pc, #52]	; (400c98 <system_init_flash+0x64>)
  400c64:	601a      	str	r2, [r3, #0]
  400c66:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c68:	4a0c      	ldr	r2, [pc, #48]	; (400c9c <system_init_flash+0x68>)
  400c6a:	4b0b      	ldr	r3, [pc, #44]	; (400c98 <system_init_flash+0x64>)
  400c6c:	601a      	str	r2, [r3, #0]
  400c6e:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c70:	4a0b      	ldr	r2, [pc, #44]	; (400ca0 <system_init_flash+0x6c>)
  400c72:	4b09      	ldr	r3, [pc, #36]	; (400c98 <system_init_flash+0x64>)
  400c74:	601a      	str	r2, [r3, #0]
  400c76:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400c78:	4a0a      	ldr	r2, [pc, #40]	; (400ca4 <system_init_flash+0x70>)
  400c7a:	4b07      	ldr	r3, [pc, #28]	; (400c98 <system_init_flash+0x64>)
  400c7c:	601a      	str	r2, [r3, #0]
  400c7e:	4770      	bx	lr
  400c80:	01312cff 	.word	0x01312cff
  400c84:	026259ff 	.word	0x026259ff
  400c88:	039386ff 	.word	0x039386ff
  400c8c:	04c4b3ff 	.word	0x04c4b3ff
  400c90:	05f5e0ff 	.word	0x05f5e0ff
  400c94:	04000500 	.word	0x04000500
  400c98:	400e0a00 	.word	0x400e0a00
  400c9c:	04000100 	.word	0x04000100
  400ca0:	04000200 	.word	0x04000200
  400ca4:	04000300 	.word	0x04000300

00400ca8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400ca8:	4b0a      	ldr	r3, [pc, #40]	; (400cd4 <_sbrk+0x2c>)
  400caa:	681b      	ldr	r3, [r3, #0]
  400cac:	b153      	cbz	r3, 400cc4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400cae:	4b09      	ldr	r3, [pc, #36]	; (400cd4 <_sbrk+0x2c>)
  400cb0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400cb2:	181a      	adds	r2, r3, r0
  400cb4:	4908      	ldr	r1, [pc, #32]	; (400cd8 <_sbrk+0x30>)
  400cb6:	4291      	cmp	r1, r2
  400cb8:	db08      	blt.n	400ccc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400cba:	4610      	mov	r0, r2
  400cbc:	4a05      	ldr	r2, [pc, #20]	; (400cd4 <_sbrk+0x2c>)
  400cbe:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400cc0:	4618      	mov	r0, r3
  400cc2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400cc4:	4a05      	ldr	r2, [pc, #20]	; (400cdc <_sbrk+0x34>)
  400cc6:	4b03      	ldr	r3, [pc, #12]	; (400cd4 <_sbrk+0x2c>)
  400cc8:	601a      	str	r2, [r3, #0]
  400cca:	e7f0      	b.n	400cae <_sbrk+0x6>
		return (caddr_t) -1;	
  400ccc:	f04f 30ff 	mov.w	r0, #4294967295
}
  400cd0:	4770      	bx	lr
  400cd2:	bf00      	nop
  400cd4:	20000874 	.word	0x20000874
  400cd8:	2001fffc 	.word	0x2001fffc
  400cdc:	2000bcb0 	.word	0x2000bcb0

00400ce0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400ce0:	f04f 30ff 	mov.w	r0, #4294967295
  400ce4:	4770      	bx	lr

00400ce6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400cea:	604b      	str	r3, [r1, #4]

	return 0;
}
  400cec:	2000      	movs	r0, #0
  400cee:	4770      	bx	lr

00400cf0 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400cf0:	2000      	movs	r0, #0
  400cf2:	4770      	bx	lr

00400cf4 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
  400cf4:	b500      	push	{lr}
  400cf6:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
  400cf8:	2201      	movs	r2, #1
  400cfa:	f10d 0107 	add.w	r1, sp, #7
  400cfe:	4810      	ldr	r0, [pc, #64]	; (400d40 <USART0_Handler+0x4c>)
  400d00:	4b10      	ldr	r3, [pc, #64]	; (400d44 <USART0_Handler+0x50>)
  400d02:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400d04:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d06:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  400d0a:	2200      	movs	r2, #0
  400d0c:	4b0e      	ldr	r3, [pc, #56]	; (400d48 <USART0_Handler+0x54>)
  400d0e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
  400d10:	4b0e      	ldr	r3, [pc, #56]	; (400d4c <USART0_Handler+0x58>)
  400d12:	781b      	ldrb	r3, [r3, #0]
  400d14:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400d18:	4a0d      	ldr	r2, [pc, #52]	; (400d50 <USART0_Handler+0x5c>)
  400d1a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
  400d1c:	2b9b      	cmp	r3, #155	; 0x9b
  400d1e:	d00b      	beq.n	400d38 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
  400d20:	3301      	adds	r3, #1
  400d22:	4a0a      	ldr	r2, [pc, #40]	; (400d4c <USART0_Handler+0x58>)
  400d24:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
  400d26:	2201      	movs	r2, #1
  400d28:	4b07      	ldr	r3, [pc, #28]	; (400d48 <USART0_Handler+0x54>)
  400d2a:	701a      	strb	r2, [r3, #0]
  400d2c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d30:	b662      	cpsie	i
}
  400d32:	b003      	add	sp, #12
  400d34:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
  400d38:	2200      	movs	r2, #0
  400d3a:	4b04      	ldr	r3, [pc, #16]	; (400d4c <USART0_Handler+0x58>)
  400d3c:	701a      	strb	r2, [r3, #0]
  400d3e:	e7f2      	b.n	400d26 <USART0_Handler+0x32>
  400d40:	400a0000 	.word	0x400a0000
  400d44:	0040025d 	.word	0x0040025d
  400d48:	20000000 	.word	0x20000000
  400d4c:	20000914 	.word	0x20000914
  400d50:	20000878 	.word	0x20000878

00400d54 <addSample>:
bool currentbuffer=false;
bool printed=false;


void addSample(uint16_t sample){
	if (bufferIndex<buffersize)
  400d54:	4b07      	ldr	r3, [pc, #28]	; (400d74 <addSample+0x20>)
  400d56:	881b      	ldrh	r3, [r3, #0]
  400d58:	f242 028d 	movw	r2, #8333	; 0x208d
  400d5c:	4293      	cmp	r3, r2
  400d5e:	d807      	bhi.n	400d70 <addSample+0x1c>
	{
		fillBuffer[bufferIndex]= sample;
  400d60:	4a05      	ldr	r2, [pc, #20]	; (400d78 <addSample+0x24>)
  400d62:	6812      	ldr	r2, [r2, #0]
  400d64:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
		bufferIndex++;
  400d68:	4a02      	ldr	r2, [pc, #8]	; (400d74 <addSample+0x20>)
  400d6a:	8813      	ldrh	r3, [r2, #0]
  400d6c:	3301      	adds	r3, #1
  400d6e:	8013      	strh	r3, [r2, #0]
  400d70:	4770      	bx	lr
  400d72:	bf00      	nop
  400d74:	20008b50 	.word	0x20008b50
  400d78:	2000000c 	.word	0x2000000c

00400d7c <switchBuffer>:
	x=y;
	y=temp;
}
volatile void switchBuffer(void){
	
	buffersFilled++;
  400d7c:	4b07      	ldr	r3, [pc, #28]	; (400d9c <switchBuffer+0x20>)
  400d7e:	881b      	ldrh	r3, [r3, #0]
  400d80:	3301      	adds	r3, #1
  400d82:	b29b      	uxth	r3, r3
	if (buffersFilled>15)
  400d84:	2b0f      	cmp	r3, #15
  400d86:	d906      	bls.n	400d96 <switchBuffer+0x1a>
	{
		buffersFilled=0;
  400d88:	2200      	movs	r2, #0
  400d8a:	4b04      	ldr	r3, [pc, #16]	; (400d9c <switchBuffer+0x20>)
  400d8c:	801a      	strh	r2, [r3, #0]
		swap(calculateBuffer,transmitBuffer);
	}
	bufferIndex=0;
  400d8e:	2200      	movs	r2, #0
  400d90:	4b03      	ldr	r3, [pc, #12]	; (400da0 <switchBuffer+0x24>)
  400d92:	801a      	strh	r2, [r3, #0]
  400d94:	4770      	bx	lr
	buffersFilled++;
  400d96:	4a01      	ldr	r2, [pc, #4]	; (400d9c <switchBuffer+0x20>)
  400d98:	8013      	strh	r3, [r2, #0]
  400d9a:	e7f8      	b.n	400d8e <switchBuffer+0x12>
  400d9c:	20008b52 	.word	0x20008b52
  400da0:	20008b50 	.word	0x20008b50

00400da4 <cycleEnded>:
	swap(fillBuffer,calculateBuffer);
}

void cycleEnded(void){
  400da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("%u\n\r", bufferIndex);
	if (bufferIndex<buffersize)
  400da6:	4b0a      	ldr	r3, [pc, #40]	; (400dd0 <cycleEnded+0x2c>)
  400da8:	881b      	ldrh	r3, [r3, #0]
  400daa:	f242 028d 	movw	r2, #8333	; 0x208d
  400dae:	4293      	cmp	r3, r2
  400db0:	d80a      	bhi.n	400dc8 <cycleEnded+0x24>
	{
		for (int i=bufferIndex;i<buffersize;i++)
  400db2:	461c      	mov	r4, r3
  400db4:	dc08      	bgt.n	400dc8 <cycleEnded+0x24>
		{
			addSample(0);
  400db6:	2700      	movs	r7, #0
  400db8:	4e06      	ldr	r6, [pc, #24]	; (400dd4 <cycleEnded+0x30>)
		for (int i=bufferIndex;i<buffersize;i++)
  400dba:	f242 058e 	movw	r5, #8334	; 0x208e
			addSample(0);
  400dbe:	4638      	mov	r0, r7
  400dc0:	47b0      	blx	r6
		for (int i=bufferIndex;i<buffersize;i++)
  400dc2:	3401      	adds	r4, #1
  400dc4:	42ac      	cmp	r4, r5
  400dc6:	d1fa      	bne.n	400dbe <cycleEnded+0x1a>
		}
	} 
	
	switchBuffer();
  400dc8:	4b03      	ldr	r3, [pc, #12]	; (400dd8 <cycleEnded+0x34>)
  400dca:	4798      	blx	r3
  400dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400dce:	bf00      	nop
  400dd0:	20008b50 	.word	0x20008b50
  400dd4:	00400d55 	.word	0x00400d55
  400dd8:	00400d7d 	.word	0x00400d7d

00400ddc <getbuffersFilled>:
	
}

uint16_t getbuffersFilled(){
	return buffersFilled;
}
  400ddc:	4b01      	ldr	r3, [pc, #4]	; (400de4 <getbuffersFilled+0x8>)
  400dde:	8818      	ldrh	r0, [r3, #0]
  400de0:	4770      	bx	lr
  400de2:	bf00      	nop
  400de4:	20008b52 	.word	0x20008b52

00400de8 <getFilledBuffer>:


uint16_t* getFilledBuffer(void){
	return calculateBuffer;
}
  400de8:	4b01      	ldr	r3, [pc, #4]	; (400df0 <getFilledBuffer+0x8>)
  400dea:	6818      	ldr	r0, [r3, #0]
  400dec:	4770      	bx	lr
  400dee:	bf00      	nop
  400df0:	20000008 	.word	0x20000008

00400df4 <usart_serial_getchar>:
{
  400df4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400df6:	b083      	sub	sp, #12
  400df8:	4605      	mov	r5, r0
  400dfa:	460c      	mov	r4, r1
	uint32_t val = 0;
  400dfc:	2300      	movs	r3, #0
  400dfe:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  400e00:	4b18      	ldr	r3, [pc, #96]	; (400e64 <usart_serial_getchar+0x70>)
  400e02:	4298      	cmp	r0, r3
  400e04:	d00a      	beq.n	400e1c <usart_serial_getchar+0x28>
	if (UART1 == (Uart*)p_usart) {
  400e06:	4b18      	ldr	r3, [pc, #96]	; (400e68 <usart_serial_getchar+0x74>)
  400e08:	4298      	cmp	r0, r3
  400e0a:	d00f      	beq.n	400e2c <usart_serial_getchar+0x38>
	if (USART0 == p_usart) {
  400e0c:	4b17      	ldr	r3, [pc, #92]	; (400e6c <usart_serial_getchar+0x78>)
  400e0e:	4298      	cmp	r0, r3
  400e10:	d014      	beq.n	400e3c <usart_serial_getchar+0x48>
	if (USART1 == p_usart) {
  400e12:	4b17      	ldr	r3, [pc, #92]	; (400e70 <usart_serial_getchar+0x7c>)
  400e14:	429d      	cmp	r5, r3
  400e16:	d01b      	beq.n	400e50 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400e18:	b003      	add	sp, #12
  400e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400e1c:	461f      	mov	r7, r3
  400e1e:	4e15      	ldr	r6, [pc, #84]	; (400e74 <usart_serial_getchar+0x80>)
  400e20:	4621      	mov	r1, r4
  400e22:	4638      	mov	r0, r7
  400e24:	47b0      	blx	r6
  400e26:	2800      	cmp	r0, #0
  400e28:	d1fa      	bne.n	400e20 <usart_serial_getchar+0x2c>
  400e2a:	e7f2      	b.n	400e12 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400e2c:	461e      	mov	r6, r3
  400e2e:	4d11      	ldr	r5, [pc, #68]	; (400e74 <usart_serial_getchar+0x80>)
  400e30:	4621      	mov	r1, r4
  400e32:	4630      	mov	r0, r6
  400e34:	47a8      	blx	r5
  400e36:	2800      	cmp	r0, #0
  400e38:	d1fa      	bne.n	400e30 <usart_serial_getchar+0x3c>
  400e3a:	e7ed      	b.n	400e18 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400e3c:	461e      	mov	r6, r3
  400e3e:	4d0e      	ldr	r5, [pc, #56]	; (400e78 <usart_serial_getchar+0x84>)
  400e40:	a901      	add	r1, sp, #4
  400e42:	4630      	mov	r0, r6
  400e44:	47a8      	blx	r5
  400e46:	2800      	cmp	r0, #0
  400e48:	d1fa      	bne.n	400e40 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400e4a:	9b01      	ldr	r3, [sp, #4]
  400e4c:	7023      	strb	r3, [r4, #0]
  400e4e:	e7e3      	b.n	400e18 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400e50:	461e      	mov	r6, r3
  400e52:	4d09      	ldr	r5, [pc, #36]	; (400e78 <usart_serial_getchar+0x84>)
  400e54:	a901      	add	r1, sp, #4
  400e56:	4630      	mov	r0, r6
  400e58:	47a8      	blx	r5
  400e5a:	2800      	cmp	r0, #0
  400e5c:	d1fa      	bne.n	400e54 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400e5e:	9b01      	ldr	r3, [sp, #4]
  400e60:	7023      	strb	r3, [r4, #0]
}
  400e62:	e7d9      	b.n	400e18 <usart_serial_getchar+0x24>
  400e64:	400e0600 	.word	0x400e0600
  400e68:	40060600 	.word	0x40060600
  400e6c:	400a0000 	.word	0x400a0000
  400e70:	400a4000 	.word	0x400a4000
  400e74:	00400a1f 	.word	0x00400a1f
  400e78:	00400a45 	.word	0x00400a45

00400e7c <usart_serial_putchar>:
{
  400e7c:	b570      	push	{r4, r5, r6, lr}
  400e7e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400e80:	4b18      	ldr	r3, [pc, #96]	; (400ee4 <usart_serial_putchar+0x68>)
  400e82:	4298      	cmp	r0, r3
  400e84:	d00a      	beq.n	400e9c <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400e86:	4b18      	ldr	r3, [pc, #96]	; (400ee8 <usart_serial_putchar+0x6c>)
  400e88:	4298      	cmp	r0, r3
  400e8a:	d010      	beq.n	400eae <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400e8c:	4b17      	ldr	r3, [pc, #92]	; (400eec <usart_serial_putchar+0x70>)
  400e8e:	4298      	cmp	r0, r3
  400e90:	d016      	beq.n	400ec0 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400e92:	4b17      	ldr	r3, [pc, #92]	; (400ef0 <usart_serial_putchar+0x74>)
  400e94:	4298      	cmp	r0, r3
  400e96:	d01c      	beq.n	400ed2 <usart_serial_putchar+0x56>
	return 0;
  400e98:	2000      	movs	r0, #0
}
  400e9a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400e9c:	461e      	mov	r6, r3
  400e9e:	4d15      	ldr	r5, [pc, #84]	; (400ef4 <usart_serial_putchar+0x78>)
  400ea0:	4621      	mov	r1, r4
  400ea2:	4630      	mov	r0, r6
  400ea4:	47a8      	blx	r5
  400ea6:	2800      	cmp	r0, #0
  400ea8:	d1fa      	bne.n	400ea0 <usart_serial_putchar+0x24>
		return 1;
  400eaa:	2001      	movs	r0, #1
  400eac:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400eae:	461e      	mov	r6, r3
  400eb0:	4d10      	ldr	r5, [pc, #64]	; (400ef4 <usart_serial_putchar+0x78>)
  400eb2:	4621      	mov	r1, r4
  400eb4:	4630      	mov	r0, r6
  400eb6:	47a8      	blx	r5
  400eb8:	2800      	cmp	r0, #0
  400eba:	d1fa      	bne.n	400eb2 <usart_serial_putchar+0x36>
		return 1;
  400ebc:	2001      	movs	r0, #1
  400ebe:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400ec0:	461e      	mov	r6, r3
  400ec2:	4d0d      	ldr	r5, [pc, #52]	; (400ef8 <usart_serial_putchar+0x7c>)
  400ec4:	4621      	mov	r1, r4
  400ec6:	4630      	mov	r0, r6
  400ec8:	47a8      	blx	r5
  400eca:	2800      	cmp	r0, #0
  400ecc:	d1fa      	bne.n	400ec4 <usart_serial_putchar+0x48>
		return 1;
  400ece:	2001      	movs	r0, #1
  400ed0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400ed2:	461e      	mov	r6, r3
  400ed4:	4d08      	ldr	r5, [pc, #32]	; (400ef8 <usart_serial_putchar+0x7c>)
  400ed6:	4621      	mov	r1, r4
  400ed8:	4630      	mov	r0, r6
  400eda:	47a8      	blx	r5
  400edc:	2800      	cmp	r0, #0
  400ede:	d1fa      	bne.n	400ed6 <usart_serial_putchar+0x5a>
		return 1;
  400ee0:	2001      	movs	r0, #1
  400ee2:	bd70      	pop	{r4, r5, r6, pc}
  400ee4:	400e0600 	.word	0x400e0600
  400ee8:	40060600 	.word	0x40060600
  400eec:	400a0000 	.word	0x400a0000
  400ef0:	400a4000 	.word	0x400a4000
  400ef4:	00400a0f 	.word	0x00400a0f
  400ef8:	00400a31 	.word	0x00400a31

00400efc <afec0_data_ready>:
}

/* brief AFEC0 DRDY interrupt callback function. */

static void afec0_data_ready(void)
{
  400efc:	b508      	push	{r3, lr}
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  400efe:	4b04      	ldr	r3, [pc, #16]	; (400f10 <afec0_data_ready+0x14>)
  400f00:	6a18      	ldr	r0, [r3, #32]
	g_afec0_sample_data = afec_get_latest_value(AFEC0);					// Obtain latest sample from COLLECTOR signal (EXT3 - pin4 (ch6))
  400f02:	b280      	uxth	r0, r0
  400f04:	4b03      	ldr	r3, [pc, #12]	; (400f14 <afec0_data_ready+0x18>)
  400f06:	8018      	strh	r0, [r3, #0]
	addSample(g_afec0_sample_data);
  400f08:	4b03      	ldr	r3, [pc, #12]	; (400f18 <afec0_data_ready+0x1c>)
  400f0a:	4798      	blx	r3
  400f0c:	bd08      	pop	{r3, pc}
  400f0e:	bf00      	nop
  400f10:	400b0000 	.word	0x400b0000
  400f14:	20008c84 	.word	0x20008c84
  400f18:	00400d55 	.word	0x00400d55

00400f1c <sample_average>:
 ***************************** BEAM PARAMETER ALGORITHMS ****************************************
 **************************************************************************************************/

/*	Compute average/mean from given sample data within a certain window  */

uint16_t sample_average(uint16_t start, uint16_t end, uint16_t* buffer) {
  400f1c:	b4f0      	push	{r4, r5, r6, r7}
		
	uint32_t sample_avg = 0;
	uint32_t total_frequency = 0;
	
	for (uint16_t i = start; i < end; i++)
  400f1e:	4288      	cmp	r0, r1
  400f20:	d21e      	bcs.n	400f60 <sample_average+0x44>
  400f22:	eb02 0440 	add.w	r4, r2, r0, lsl #1
  400f26:	4603      	mov	r3, r0
  400f28:	4626      	mov	r6, r4
  400f2a:	2500      	movs	r5, #0
	{
		sample_avg += (uint32_t)buffer[i]*i;
  400f2c:	f836 7b02 	ldrh.w	r7, [r6], #2
  400f30:	fb03 5507 	mla	r5, r3, r7, r5
  400f34:	3301      	adds	r3, #1
	for (uint16_t i = start; i < end; i++)
  400f36:	b29f      	uxth	r7, r3
  400f38:	42b9      	cmp	r1, r7
  400f3a:	d8f7      	bhi.n	400f2c <sample_average+0x10>
  400f3c:	3901      	subs	r1, #1
  400f3e:	1a09      	subs	r1, r1, r0
  400f40:	3001      	adds	r0, #1
  400f42:	fa10 f181 	uxtah	r1, r0, r1
  400f46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  400f4a:	2000      	movs	r0, #0
	}
	
	for (uint16_t i = start; i < end; i++)
	{
		total_frequency += (uint32_t)buffer[i];
  400f4c:	f834 3b02 	ldrh.w	r3, [r4], #2
  400f50:	4418      	add	r0, r3
	for (uint16_t i = start; i < end; i++)
  400f52:	428c      	cmp	r4, r1
  400f54:	d1fa      	bne.n	400f4c <sample_average+0x30>
	}
	
	return sample_avg/total_frequency;
  400f56:	fbb5 f0f0 	udiv	r0, r5, r0
}
  400f5a:	b280      	uxth	r0, r0
  400f5c:	bcf0      	pop	{r4, r5, r6, r7}
  400f5e:	4770      	bx	lr
	uint32_t sample_avg = 0;
  400f60:	2500      	movs	r5, #0
	for (uint16_t i = start; i < end; i++)
  400f62:	4628      	mov	r0, r5
  400f64:	e7f7      	b.n	400f56 <sample_average+0x3a>

00400f66 <find_max>:


/* Find the maximum of the BPM-80 data half cycle and return its index*/

uint16_t find_max(uint16_t* halfcycle, uint16_t length)
{
  400f66:	b470      	push	{r4, r5, r6}
	uint16_t maximum = 0;
	uint16_t max_index = 0;
									
	for (uint16_t i = 0; i < length; i++)
  400f68:	460e      	mov	r6, r1
  400f6a:	b181      	cbz	r1, 400f8e <find_max+0x28>
  400f6c:	1e81      	subs	r1, r0, #2
  400f6e:	2300      	movs	r3, #0
  400f70:	4618      	mov	r0, r3
  400f72:	461c      	mov	r4, r3
  400f74:	b29d      	uxth	r5, r3
	{
		if (halfcycle[i] > maximum) 
  400f76:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  400f7a:	42a2      	cmp	r2, r4
  400f7c:	bf84      	itt	hi
  400f7e:	4628      	movhi	r0, r5
		{
			max_index = i;
			maximum = halfcycle[i];
  400f80:	4614      	movhi	r4, r2
  400f82:	3301      	adds	r3, #1
	for (uint16_t i = 0; i < length; i++)
  400f84:	b29a      	uxth	r2, r3
  400f86:	4296      	cmp	r6, r2
  400f88:	d8f4      	bhi.n	400f74 <find_max+0xe>
		}
	}
	
	
	return max_index;
}
  400f8a:	bc70      	pop	{r4, r5, r6}
  400f8c:	4770      	bx	lr
	uint16_t max_index = 0;
  400f8e:	4608      	mov	r0, r1
  400f90:	e7fb      	b.n	400f8a <find_max+0x24>
	...

00400f94 <detect_peaks>:
/* Find beam peak locations and peak widths X and Y using the dispersion-based algorithm */
/* Returns an array of 6 elements : 1. peak position X  2. peak edge left X  3. peak edge right X 
									4. peak position Y  5. peak edge left Y  6. peak edge right Y */

void detect_peaks(uint16_t threshold, uint16_t* buffer)
{
  400f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f98:	4605      	mov	r5, r0
  400f9a:	460c      	mov	r4, r1
	uint16_t peak1 = find_max(buffer, half_cycle_length);
  400f9c:	4b3a      	ldr	r3, [pc, #232]	; (401088 <detect_peaks+0xf4>)
  400f9e:	881f      	ldrh	r7, [r3, #0]
  400fa0:	4639      	mov	r1, r7
  400fa2:	4620      	mov	r0, r4
  400fa4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 401090 <detect_peaks+0xfc>
  400fa8:	47c0      	blx	r8
  400faa:	4606      	mov	r6, r0
	uint16_t peak2 = half_cycle_length + find_max(buffer+half_cycle_length, half_cycle_length);
  400fac:	4639      	mov	r1, r7
  400fae:	eb04 0047 	add.w	r0, r4, r7, lsl #1
  400fb2:	47c0      	blx	r8
  400fb4:	4438      	add	r0, r7
  400fb6:	b280      	uxth	r0, r0
	
	// Use peak1 and peak2 to find the 4 corner points of the beams, possibly combine with dispersion-based algorithm
	
	peaks_localization[0] = peak1;
  400fb8:	4b34      	ldr	r3, [pc, #208]	; (40108c <detect_peaks+0xf8>)
  400fba:	801e      	strh	r6, [r3, #0]
	peaks_localization[3] = peak2;
  400fbc:	80d8      	strh	r0, [r3, #6]
			
	// find left corner of X peak
		
	for (uint16_t i = 0; i <= peak1; i++)
	{
		if(buffer[peak1 - i] < threshold) 
  400fbe:	4631      	mov	r1, r6
  400fc0:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  400fc4:	42ab      	cmp	r3, r5
  400fc6:	d349      	bcc.n	40105c <detect_peaks+0xc8>
  400fc8:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak1; i++)
  400fca:	3301      	adds	r3, #1
  400fcc:	b29b      	uxth	r3, r3
  400fce:	429e      	cmp	r6, r3
  400fd0:	d350      	bcc.n	401074 <detect_peaks+0xe0>
		if(buffer[peak1 - i] < threshold) 
  400fd2:	1aca      	subs	r2, r1, r3
  400fd4:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  400fd8:	42aa      	cmp	r2, r5
  400fda:	d2f6      	bcs.n	400fca <detect_peaks+0x36>
		{
			peaks_localization[1] = peak1-i;
  400fdc:	1af3      	subs	r3, r6, r3
  400fde:	4a2b      	ldr	r2, [pc, #172]	; (40108c <detect_peaks+0xf8>)
  400fe0:	8053      	strh	r3, [r2, #2]
		}
	}
	
	// find right corner of X peak
	
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  400fe2:	1bbf      	subs	r7, r7, r6
  400fe4:	d410      	bmi.n	401008 <detect_peaks+0x74>
	{
		if(buffer[peak1 + i] < threshold) 
  400fe6:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
  400fea:	42ab      	cmp	r3, r5
  400fec:	d338      	bcc.n	401060 <detect_peaks+0xcc>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  400fee:	2200      	movs	r2, #0
  400ff0:	3201      	adds	r2, #1
  400ff2:	b292      	uxth	r2, r2
  400ff4:	42ba      	cmp	r2, r7
  400ff6:	dc07      	bgt.n	401008 <detect_peaks+0x74>
		if(buffer[peak1 + i] < threshold) 
  400ff8:	1853      	adds	r3, r2, r1
  400ffa:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
  400ffe:	42ab      	cmp	r3, r5
  401000:	d2f6      	bcs.n	400ff0 <detect_peaks+0x5c>
		{
			peaks_localization[2] = peak1+i;
  401002:	4432      	add	r2, r6
  401004:	4b21      	ldr	r3, [pc, #132]	; (40108c <detect_peaks+0xf8>)
  401006:	809a      	strh	r2, [r3, #4]
	
	// find left corner of Y peak
	
	for (uint16_t i = 0; i <= peak2; i++)
	{
		if(buffer[peak2 - i] < threshold)
  401008:	4602      	mov	r2, r0
  40100a:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  40100e:	42ab      	cmp	r3, r5
  401010:	d328      	bcc.n	401064 <detect_peaks+0xd0>
  401012:	2300      	movs	r3, #0
	for (uint16_t i = 0; i <= peak2; i++)
  401014:	3301      	adds	r3, #1
  401016:	b29b      	uxth	r3, r3
  401018:	4298      	cmp	r0, r3
  40101a:	d32e      	bcc.n	40107a <detect_peaks+0xe6>
		if(buffer[peak2 - i] < threshold)
  40101c:	1ad1      	subs	r1, r2, r3
  40101e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  401022:	42a9      	cmp	r1, r5
  401024:	d2f6      	bcs.n	401014 <detect_peaks+0x80>
		{
			peaks_localization[4] = peak2-i;
  401026:	1ac3      	subs	r3, r0, r3
  401028:	4918      	ldr	r1, [pc, #96]	; (40108c <detect_peaks+0xf8>)
  40102a:	810b      	strh	r3, [r1, #8]
		}
	}
	
	// find right corner of Y peak
	
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  40102c:	f5c0 5602 	rsb	r6, r0, #8320	; 0x2080
  401030:	360e      	adds	r6, #14
  401032:	2e00      	cmp	r6, #0
  401034:	db18      	blt.n	401068 <detect_peaks+0xd4>
	{
		if(buffer[peak2 + i] < threshold)
  401036:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
  40103a:	42ab      	cmp	r3, r5
  40103c:	d316      	bcc.n	40106c <detect_peaks+0xd8>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  40103e:	2300      	movs	r3, #0
  401040:	3301      	adds	r3, #1
  401042:	b29b      	uxth	r3, r3
  401044:	42b3      	cmp	r3, r6
  401046:	dc13      	bgt.n	401070 <detect_peaks+0xdc>
		if(buffer[peak2 + i] < threshold)
  401048:	1899      	adds	r1, r3, r2
  40104a:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
  40104e:	42a9      	cmp	r1, r5
  401050:	d2f6      	bcs.n	401040 <detect_peaks+0xac>
		{
			peaks_localization[5] = peak2+i;
  401052:	4403      	add	r3, r0
  401054:	4a0d      	ldr	r2, [pc, #52]	; (40108c <detect_peaks+0xf8>)
  401056:	8153      	strh	r3, [r2, #10]
			break;
  401058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= peak1; i++)
  40105c:	2300      	movs	r3, #0
  40105e:	e7bd      	b.n	400fdc <detect_peaks+0x48>
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  401060:	2200      	movs	r2, #0
  401062:	e7ce      	b.n	401002 <detect_peaks+0x6e>
	for (uint16_t i = 0; i <= peak2; i++)
  401064:	2300      	movs	r3, #0
  401066:	e7de      	b.n	401026 <detect_peaks+0x92>
  401068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  40106c:	2300      	movs	r3, #0
  40106e:	e7f0      	b.n	401052 <detect_peaks+0xbe>
  401070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint16_t i = 0; i <= half_cycle_length-peak1; i++)
  401074:	1bbf      	subs	r7, r7, r6
  401076:	d5ba      	bpl.n	400fee <detect_peaks+0x5a>
  401078:	e7c6      	b.n	401008 <detect_peaks+0x74>
	for (uint16_t i = 0; i <= buffersize-peak2; i++)
  40107a:	f5c0 5602 	rsb	r6, r0, #8320	; 0x2080
  40107e:	360e      	adds	r6, #14
  401080:	2e00      	cmp	r6, #0
  401082:	dadc      	bge.n	40103e <detect_peaks+0xaa>
  401084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401088:	20000010 	.word	0x20000010
  40108c:	20008b60 	.word	0x20008b60
  401090:	00400f67 	.word	0x00400f67

00401094 <compute_beam_intensity>:
/* Compute beam intensity of a cycle in X and Y cross section */
/* Takes as input the borders of both peaks*/
/* Outputs beam intensity of X and Y crossection, so that higher level data representation can choose whether to multiply or sum them*/

void compute_beam_intensity(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right, uint16_t* buffer)
{
  401094:	b4f0      	push	{r4, r5, r6, r7}
  401096:	9f04      	ldr	r7, [sp, #16]
	beam_intensity[0] = 0;
  401098:	4c15      	ldr	r4, [pc, #84]	; (4010f0 <compute_beam_intensity+0x5c>)
  40109a:	2500      	movs	r5, #0
  40109c:	8025      	strh	r5, [r4, #0]
	beam_intensity[1] = 0;
  40109e:	8065      	strh	r5, [r4, #2]
	
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  4010a0:	4288      	cmp	r0, r1
  4010a2:	d210      	bcs.n	4010c6 <compute_beam_intensity+0x32>
  4010a4:	eb07 0440 	add.w	r4, r7, r0, lsl #1
  4010a8:	1e4e      	subs	r6, r1, #1
  4010aa:	1a36      	subs	r6, r6, r0
  4010ac:	3001      	adds	r0, #1
  4010ae:	fa10 f686 	uxtah	r6, r0, r6
  4010b2:	eb07 0646 	add.w	r6, r7, r6, lsl #1
	{
		beam_intensity[0] += (uint32_t)buffer[i];
  4010b6:	480e      	ldr	r0, [pc, #56]	; (4010f0 <compute_beam_intensity+0x5c>)
  4010b8:	f834 1b02 	ldrh.w	r1, [r4], #2
  4010bc:	8805      	ldrh	r5, [r0, #0]
  4010be:	4429      	add	r1, r5
  4010c0:	8001      	strh	r1, [r0, #0]
	for (uint16_t i = peak1_left; i < peak1_right ; i++)
  4010c2:	42b4      	cmp	r4, r6
  4010c4:	d1f8      	bne.n	4010b8 <compute_beam_intensity+0x24>
	}
	
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  4010c6:	429a      	cmp	r2, r3
  4010c8:	d210      	bcs.n	4010ec <compute_beam_intensity+0x58>
  4010ca:	eb07 0142 	add.w	r1, r7, r2, lsl #1
  4010ce:	1e5c      	subs	r4, r3, #1
  4010d0:	1aa4      	subs	r4, r4, r2
  4010d2:	3201      	adds	r2, #1
  4010d4:	fa12 f484 	uxtah	r4, r2, r4
  4010d8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
	{
		beam_intensity[1] += (uint32_t)buffer[i];
  4010dc:	4a04      	ldr	r2, [pc, #16]	; (4010f0 <compute_beam_intensity+0x5c>)
  4010de:	f831 3b02 	ldrh.w	r3, [r1], #2
  4010e2:	8850      	ldrh	r0, [r2, #2]
  4010e4:	4403      	add	r3, r0
  4010e6:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = peak2_left; i < peak2_right ; i++)
  4010e8:	42a1      	cmp	r1, r4
  4010ea:	d1f8      	bne.n	4010de <compute_beam_intensity+0x4a>
	}
	
}
  4010ec:	bcf0      	pop	{r4, r5, r6, r7}
  4010ee:	4770      	bx	lr
  4010f0:	20008b54 	.word	0x20008b54

004010f4 <sum>:

 uint16_t sum(uint16_t start, uint16_t end, uint16_t* buffer)
 {
	 uint16_t result=0;
	 for (uint16_t i=start; i< end; i++ )
  4010f4:	4288      	cmp	r0, r1
  4010f6:	d210      	bcs.n	40111a <sum+0x26>
  4010f8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
  4010fc:	3901      	subs	r1, #1
  4010fe:	1a09      	subs	r1, r1, r0
  401100:	3001      	adds	r0, #1
  401102:	fa10 f181 	uxtah	r1, r0, r1
  401106:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  40110a:	2000      	movs	r0, #0
	 {
		 result+=buffer[i];
  40110c:	f833 1b02 	ldrh.w	r1, [r3], #2
  401110:	4408      	add	r0, r1
  401112:	b280      	uxth	r0, r0
	 for (uint16_t i=start; i< end; i++ )
  401114:	4293      	cmp	r3, r2
  401116:	d1f9      	bne.n	40110c <sum+0x18>
  401118:	4770      	bx	lr
	 uint16_t result=0;
  40111a:	2000      	movs	r0, #0
	 }
	 return result;
 }
  40111c:	4770      	bx	lr
	...

00401120 <compute_fwhm>:
 
 /* Compute FWHM X and Y */

 void compute_fwhm(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right,uint16_t* buffer)
 {
  401120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401124:	b08b      	sub	sp, #44	; 0x2c
  401126:	4680      	mov	r8, r0
  401128:	9007      	str	r0, [sp, #28]
  40112a:	460f      	mov	r7, r1
  40112c:	9108      	str	r1, [sp, #32]
  40112e:	4616      	mov	r6, r2
  401130:	9205      	str	r2, [sp, #20]
  401132:	461d      	mov	r5, r3
  401134:	9306      	str	r3, [sp, #24]
	 
	 uint16_t mean[2] = {0,0};
	 long long summed=0;
	 int variance=0;
	 
	 mean[0] = sample_average(peak1_left, peak1_right,buffer);
  401136:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401138:	4c63      	ldr	r4, [pc, #396]	; (4012c8 <compute_fwhm+0x1a8>)
  40113a:	47a0      	blx	r4
  40113c:	4682      	mov	sl, r0
	 mean[1] = sample_average(peak2_left, peak2_right,buffer);
  40113e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401140:	4629      	mov	r1, r5
  401142:	4630      	mov	r0, r6
  401144:	47a0      	blx	r4
  401146:	9009      	str	r0, [sp, #36]	; 0x24
	 
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  401148:	45b8      	cmp	r8, r7
  40114a:	f080 80ae 	bcs.w	4012aa <compute_fwhm+0x18a>
  40114e:	4638      	mov	r0, r7
  401150:	eba8 040a 	sub.w	r4, r8, sl
  401154:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401156:	4615      	mov	r5, r2
  401158:	4642      	mov	r2, r8
  40115a:	eb05 0748 	add.w	r7, r5, r8, lsl #1
  40115e:	1e43      	subs	r3, r0, #1
  401160:	1a9b      	subs	r3, r3, r2
  401162:	3201      	adds	r2, #1
  401164:	fa12 f383 	uxtah	r3, r2, r3
  401168:	eba3 0a0a 	sub.w	sl, r3, sl
  40116c:	2200      	movs	r2, #0
  40116e:	2300      	movs	r3, #0
  401170:	e9cd 2300 	strd	r2, r3, [sp]
	 {
		 summed+= (pow((i-mean[0]),2)*buffer[i]);
  401174:	4e55      	ldr	r6, [pc, #340]	; (4012cc <compute_fwhm+0x1ac>)
  401176:	4d56      	ldr	r5, [pc, #344]	; (4012d0 <compute_fwhm+0x1b0>)
  401178:	f8df 8170 	ldr.w	r8, [pc, #368]	; 4012ec <compute_fwhm+0x1cc>
  40117c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 4012f0 <compute_fwhm+0x1d0>
  401180:	46d3      	mov	fp, sl
  401182:	46ba      	mov	sl, r7
  401184:	4620      	mov	r0, r4
  401186:	47b0      	blx	r6
  401188:	f83a 7b02 	ldrh.w	r7, [sl], #2
  40118c:	4602      	mov	r2, r0
  40118e:	460b      	mov	r3, r1
  401190:	47a8      	blx	r5
  401192:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401196:	4638      	mov	r0, r7
  401198:	47b0      	blx	r6
  40119a:	4602      	mov	r2, r0
  40119c:	460b      	mov	r3, r1
  40119e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4011a2:	47a8      	blx	r5
  4011a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4011a8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4011ac:	4b49      	ldr	r3, [pc, #292]	; (4012d4 <compute_fwhm+0x1b4>)
  4011ae:	4798      	blx	r3
  4011b0:	4602      	mov	r2, r0
  4011b2:	460b      	mov	r3, r1
  4011b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4011b8:	47c0      	blx	r8
  4011ba:	47c8      	blx	r9
  4011bc:	e9cd 0100 	strd	r0, r1, [sp]
  4011c0:	3401      	adds	r4, #1
	 for (uint16_t i=peak1_left;i<peak1_right;i++ )
  4011c2:	455c      	cmp	r4, fp
  4011c4:	d1de      	bne.n	401184 <compute_fwhm+0x64>
	 }
	 variance=summed/sum(peak1_left,peak1_right,buffer);
  4011c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4011c8:	9908      	ldr	r1, [sp, #32]
  4011ca:	9807      	ldr	r0, [sp, #28]
  4011cc:	4b42      	ldr	r3, [pc, #264]	; (4012d8 <compute_fwhm+0x1b8>)
  4011ce:	4798      	blx	r3
  4011d0:	b282      	uxth	r2, r0
  4011d2:	2300      	movs	r3, #0
  4011d4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4011d8:	4c40      	ldr	r4, [pc, #256]	; (4012dc <compute_fwhm+0x1bc>)
  4011da:	47a0      	blx	r4
	
	 fwhm[0]= (uint16_t)(sqrt(variance)*2.355);
  4011dc:	4b3b      	ldr	r3, [pc, #236]	; (4012cc <compute_fwhm+0x1ac>)
  4011de:	4798      	blx	r3
  4011e0:	4b3f      	ldr	r3, [pc, #252]	; (4012e0 <compute_fwhm+0x1c0>)
  4011e2:	4798      	blx	r3
  4011e4:	a336      	add	r3, pc, #216	; (adr r3, 4012c0 <compute_fwhm+0x1a0>)
  4011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4011ea:	4c39      	ldr	r4, [pc, #228]	; (4012d0 <compute_fwhm+0x1b0>)
  4011ec:	47a0      	blx	r4
  4011ee:	4b3d      	ldr	r3, [pc, #244]	; (4012e4 <compute_fwhm+0x1c4>)
  4011f0:	4798      	blx	r3
  4011f2:	4b3d      	ldr	r3, [pc, #244]	; (4012e8 <compute_fwhm+0x1c8>)
  4011f4:	8018      	strh	r0, [r3, #0]
	 summed=0;
	 variance=0;
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  4011f6:	9a05      	ldr	r2, [sp, #20]
  4011f8:	4613      	mov	r3, r2
  4011fa:	9806      	ldr	r0, [sp, #24]
  4011fc:	4282      	cmp	r2, r0
  4011fe:	d259      	bcs.n	4012b4 <compute_fwhm+0x194>
  401200:	9d09      	ldr	r5, [sp, #36]	; 0x24
  401202:	1b5c      	subs	r4, r3, r5
  401204:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401206:	4611      	mov	r1, r2
  401208:	eb01 0743 	add.w	r7, r1, r3, lsl #1
  40120c:	f100 3aff 	add.w	sl, r0, #4294967295
  401210:	ebaa 0a03 	sub.w	sl, sl, r3
  401214:	3301      	adds	r3, #1
  401216:	fa13 fa8a 	uxtah	sl, r3, sl
  40121a:	ebaa 0a05 	sub.w	sl, sl, r5
  40121e:	2200      	movs	r2, #0
  401220:	2300      	movs	r3, #0
  401222:	e9cd 2300 	strd	r2, r3, [sp]
	 {
		 summed+= (pow((i-mean[1]),2)*buffer[i]);
  401226:	4e29      	ldr	r6, [pc, #164]	; (4012cc <compute_fwhm+0x1ac>)
  401228:	4d29      	ldr	r5, [pc, #164]	; (4012d0 <compute_fwhm+0x1b0>)
  40122a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4012ec <compute_fwhm+0x1cc>
  40122e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 4012f0 <compute_fwhm+0x1d0>
  401232:	4620      	mov	r0, r4
  401234:	47b0      	blx	r6
  401236:	f837 bb02 	ldrh.w	fp, [r7], #2
  40123a:	4602      	mov	r2, r0
  40123c:	460b      	mov	r3, r1
  40123e:	47a8      	blx	r5
  401240:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401244:	4658      	mov	r0, fp
  401246:	47b0      	blx	r6
  401248:	4602      	mov	r2, r0
  40124a:	460b      	mov	r3, r1
  40124c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401250:	47a8      	blx	r5
  401252:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401256:	e9dd 0100 	ldrd	r0, r1, [sp]
  40125a:	4b1e      	ldr	r3, [pc, #120]	; (4012d4 <compute_fwhm+0x1b4>)
  40125c:	4798      	blx	r3
  40125e:	4602      	mov	r2, r0
  401260:	460b      	mov	r3, r1
  401262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401266:	47c8      	blx	r9
  401268:	47c0      	blx	r8
  40126a:	e9cd 0100 	strd	r0, r1, [sp]
  40126e:	3401      	adds	r4, #1
	 for (uint16_t i=peak2_left;i<peak2_right;i++ )
  401270:	4554      	cmp	r4, sl
  401272:	d1de      	bne.n	401232 <compute_fwhm+0x112>
	 }
	 variance=summed/sum(peak2_left,peak2_right,buffer);
  401274:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401276:	9906      	ldr	r1, [sp, #24]
  401278:	9805      	ldr	r0, [sp, #20]
  40127a:	4b17      	ldr	r3, [pc, #92]	; (4012d8 <compute_fwhm+0x1b8>)
  40127c:	4798      	blx	r3
  40127e:	b282      	uxth	r2, r0
  401280:	2300      	movs	r3, #0
  401282:	e9dd 0100 	ldrd	r0, r1, [sp]
  401286:	4c15      	ldr	r4, [pc, #84]	; (4012dc <compute_fwhm+0x1bc>)
  401288:	47a0      	blx	r4
	 fwhm[1]=(uint16_t) (sqrt(variance)*2.355);
  40128a:	4b10      	ldr	r3, [pc, #64]	; (4012cc <compute_fwhm+0x1ac>)
  40128c:	4798      	blx	r3
  40128e:	4b14      	ldr	r3, [pc, #80]	; (4012e0 <compute_fwhm+0x1c0>)
  401290:	4798      	blx	r3
  401292:	a30b      	add	r3, pc, #44	; (adr r3, 4012c0 <compute_fwhm+0x1a0>)
  401294:	e9d3 2300 	ldrd	r2, r3, [r3]
  401298:	4c0d      	ldr	r4, [pc, #52]	; (4012d0 <compute_fwhm+0x1b0>)
  40129a:	47a0      	blx	r4
  40129c:	4b11      	ldr	r3, [pc, #68]	; (4012e4 <compute_fwhm+0x1c4>)
  40129e:	4798      	blx	r3
  4012a0:	4b11      	ldr	r3, [pc, #68]	; (4012e8 <compute_fwhm+0x1c8>)
  4012a2:	8058      	strh	r0, [r3, #2]
 }
  4012a4:	b00b      	add	sp, #44	; 0x2c
  4012a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 long long summed=0;
  4012aa:	2300      	movs	r3, #0
  4012ac:	2400      	movs	r4, #0
  4012ae:	e9cd 3400 	strd	r3, r4, [sp]
  4012b2:	e788      	b.n	4011c6 <compute_fwhm+0xa6>
	 summed=0;
  4012b4:	2300      	movs	r3, #0
  4012b6:	2400      	movs	r4, #0
  4012b8:	e9cd 3400 	strd	r3, r4, [sp]
  4012bc:	e7da      	b.n	401274 <compute_fwhm+0x154>
  4012be:	bf00      	nop
  4012c0:	3d70a3d7 	.word	0x3d70a3d7
  4012c4:	4002d70a 	.word	0x4002d70a
  4012c8:	00400f1d 	.word	0x00400f1d
  4012cc:	00402da9 	.word	0x00402da9
  4012d0:	00402e75 	.word	0x00402e75
  4012d4:	00402e19 	.word	0x00402e19
  4012d8:	004010f5 	.word	0x004010f5
  4012dc:	00403415 	.word	0x00403415
  4012e0:	00401bf9 	.word	0x00401bf9
  4012e4:	004033d5 	.word	0x004033d5
  4012e8:	20008b5c 	.word	0x20008b5c
  4012ec:	00402b11 	.word	0x00402b11
  4012f0:	004034b5 	.word	0x004034b5
  4012f4:	00000000 	.word	0x00000000

004012f8 <compute_skewness>:


/* Compute skewness of the beam  X and Y */

void compute_skewness(uint16_t peak1_left, uint16_t peak1_right, uint16_t peak2_left, uint16_t peak2_right,uint16_t* buffer)
{
  4012f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012fc:	ed2d 8b02 	vpush	{d8}
  401300:	b085      	sub	sp, #20
  401302:	4680      	mov	r8, r0
  401304:	4689      	mov	r9, r1
  401306:	4617      	mov	r7, r2
  401308:	9202      	str	r2, [sp, #8]
  40130a:	461e      	mov	r6, r3
  40130c:	9303      	str	r3, [sp, #12]
	int first_peak_mean  =  sample_average(peak1_left, peak1_right,buffer);
  40130e:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401310:	4c39      	ldr	r4, [pc, #228]	; (4013f8 <compute_skewness+0x100>)
  401312:	47a0      	blx	r4
  401314:	4605      	mov	r5, r0
	int second_peak_mean =  sample_average(peak2_left, peak2_right,buffer);
  401316:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401318:	4631      	mov	r1, r6
  40131a:	4638      	mov	r0, r7
  40131c:	47a0      	blx	r4
  40131e:	4604      	mov	r4, r0
	
	double third_central = 0;
	uint32_t second_central = 0;
	
	 for (int i=peak1_left;i<peak1_right;i++ )
  401320:	45c8      	cmp	r8, r9
  401322:	da0f      	bge.n	401344 <compute_skewness+0x4c>
  401324:	4646      	mov	r6, r8
  401326:	464f      	mov	r7, r9
  401328:	eba8 0505 	sub.w	r5, r8, r5
	 {
		 third_central = (double)i-1054;//(pow((i-first_peak_mean),3)*buffer[i]);
		 second_central += (pow((i-first_peak_mean),2)*buffer[i]);
  40132c:	ed9f 8b30 	vldr	d8, [pc, #192]	; 4013f0 <compute_skewness+0xf8>
  401330:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 401404 <compute_skewness+0x10c>
  401334:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 401414 <compute_skewness+0x11c>
  401338:	2d00      	cmp	r5, #0
  40133a:	dd4d      	ble.n	4013d8 <compute_skewness+0xe0>
	 for (int i=peak1_left;i<peak1_right;i++ )
  40133c:	3601      	adds	r6, #1
  40133e:	3501      	adds	r5, #1
  401340:	42be      	cmp	r6, r7
  401342:	dbf9      	blt.n	401338 <compute_skewness+0x40>
	 }
	 
	 second_central = second_central / sum(peak1_left,peak1_right,buffer);
	 //third_central = third_central / sum(peak1_left,peak1_right,buffer);
	
	skewness[0] = peak1_left;
  401344:	4640      	mov	r0, r8
  401346:	4b2d      	ldr	r3, [pc, #180]	; (4013fc <compute_skewness+0x104>)
  401348:	4798      	blx	r3
  40134a:	4b2d      	ldr	r3, [pc, #180]	; (401400 <compute_skewness+0x108>)
  40134c:	e9c3 0100 	strd	r0, r1, [r3]
	
	third_central = 0;
	second_central = 0;
	
	
	 for (int i=peak2_left;i<peak2_right;i++ )
  401350:	9a02      	ldr	r2, [sp, #8]
  401352:	4613      	mov	r3, r2
  401354:	9803      	ldr	r0, [sp, #12]
  401356:	4282      	cmp	r2, r0
  401358:	da44      	bge.n	4013e4 <compute_skewness+0xec>
  40135a:	1b14      	subs	r4, r2, r4
  40135c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40135e:	eb02 0543 	add.w	r5, r2, r3, lsl #1
  401362:	eb02 0840 	add.w	r8, r2, r0, lsl #1
  401366:	2300      	movs	r3, #0
  401368:	461e      	mov	r6, r3
	 {
		 second_central += (pow((i-second_peak_mean),2)*buffer[i]);
  40136a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4013fc <compute_skewness+0x104>
  40136e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 401418 <compute_skewness+0x120>
  401372:	4620      	mov	r0, r4
  401374:	4b23      	ldr	r3, [pc, #140]	; (401404 <compute_skewness+0x10c>)
  401376:	4798      	blx	r3
  401378:	f835 bb02 	ldrh.w	fp, [r5], #2
  40137c:	4602      	mov	r2, r0
  40137e:	460b      	mov	r3, r1
  401380:	4f21      	ldr	r7, [pc, #132]	; (401408 <compute_skewness+0x110>)
  401382:	47b8      	blx	r7
  401384:	e9cd 0100 	strd	r0, r1, [sp]
  401388:	4658      	mov	r0, fp
  40138a:	4b1e      	ldr	r3, [pc, #120]	; (401404 <compute_skewness+0x10c>)
  40138c:	4798      	blx	r3
  40138e:	4602      	mov	r2, r0
  401390:	460b      	mov	r3, r1
  401392:	e9dd 0100 	ldrd	r0, r1, [sp]
  401396:	47b8      	blx	r7
  401398:	e9cd 0100 	strd	r0, r1, [sp]
  40139c:	4630      	mov	r0, r6
  40139e:	47c8      	blx	r9
  4013a0:	4602      	mov	r2, r0
  4013a2:	460b      	mov	r3, r1
  4013a4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4013a8:	4e18      	ldr	r6, [pc, #96]	; (40140c <compute_skewness+0x114>)
  4013aa:	47b0      	blx	r6
  4013ac:	47d0      	blx	sl
  4013ae:	4606      	mov	r6, r0
  4013b0:	3401      	adds	r4, #1
	 for (int i=peak2_left;i<peak2_right;i++ )
  4013b2:	4545      	cmp	r5, r8
  4013b4:	d1dd      	bne.n	401372 <compute_skewness+0x7a>
	 }
	 
	 second_central = second_central / sum(peak2_left,peak2_right,buffer);
  4013b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4013b8:	9903      	ldr	r1, [sp, #12]
  4013ba:	9802      	ldr	r0, [sp, #8]
  4013bc:	4b14      	ldr	r3, [pc, #80]	; (401410 <compute_skewness+0x118>)
  4013be:	4798      	blx	r3
	
	skewness[1] = second_central;
  4013c0:	fbb6 f0f0 	udiv	r0, r6, r0
  4013c4:	4b0d      	ldr	r3, [pc, #52]	; (4013fc <compute_skewness+0x104>)
  4013c6:	4798      	blx	r3
  4013c8:	4b0d      	ldr	r3, [pc, #52]	; (401400 <compute_skewness+0x108>)
  4013ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
	
}
  4013ce:	b005      	add	sp, #20
  4013d0:	ecbd 8b02 	vpop	{d8}
  4013d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 second_central += (pow((i-first_peak_mean),2)*buffer[i]);
  4013d8:	4628      	mov	r0, r5
  4013da:	47d0      	blx	sl
  4013dc:	ec53 2b18 	vmov	r2, r3, d8
  4013e0:	47c8      	blx	r9
  4013e2:	e7ab      	b.n	40133c <compute_skewness+0x44>
	second_central = 0;
  4013e4:	2300      	movs	r3, #0
  4013e6:	461e      	mov	r6, r3
  4013e8:	e7e5      	b.n	4013b6 <compute_skewness+0xbe>
  4013ea:	bf00      	nop
  4013ec:	f3af 8000 	nop.w
  4013f0:	00000000 	.word	0x00000000
  4013f4:	40000000 	.word	0x40000000
  4013f8:	00400f1d 	.word	0x00400f1d
  4013fc:	00402d89 	.word	0x00402d89
  401400:	20008b70 	.word	0x20008b70
  401404:	00402da9 	.word	0x00402da9
  401408:	00402e75 	.word	0x00402e75
  40140c:	00402b11 	.word	0x00402b11
  401410:	004010f5 	.word	0x004010f5
  401414:	004018fd 	.word	0x004018fd
  401418:	004033d5 	.word	0x004033d5

0040141c <show_beam_parameters>:


/* Present beam parameters on terminal*/

void show_beam_parameters(uint16_t* buffer)
{
  40141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401420:	b08b      	sub	sp, #44	; 0x2c
  401422:	af02      	add	r7, sp, #8
  401424:	4682      	mov	sl, r0
	
 	detect_peaks(20, buffer);
  401426:	4601      	mov	r1, r0
  401428:	2014      	movs	r0, #20
  40142a:	4b75      	ldr	r3, [pc, #468]	; (401600 <show_beam_parameters+0x1e4>)
  40142c:	4798      	blx	r3
 	compute_beam_intensity(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5], buffer);
  40142e:	4d75      	ldr	r5, [pc, #468]	; (401604 <show_beam_parameters+0x1e8>)
  401430:	896b      	ldrh	r3, [r5, #10]
  401432:	892a      	ldrh	r2, [r5, #8]
  401434:	88a9      	ldrh	r1, [r5, #4]
  401436:	8868      	ldrh	r0, [r5, #2]
  401438:	f8cd a000 	str.w	sl, [sp]
  40143c:	4c72      	ldr	r4, [pc, #456]	; (401608 <show_beam_parameters+0x1ec>)
  40143e:	47a0      	blx	r4
 	compute_fwhm(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5],buffer);
  401440:	896b      	ldrh	r3, [r5, #10]
  401442:	892a      	ldrh	r2, [r5, #8]
  401444:	88a9      	ldrh	r1, [r5, #4]
  401446:	8868      	ldrh	r0, [r5, #2]
  401448:	f8cd a000 	str.w	sl, [sp]
  40144c:	4c6f      	ldr	r4, [pc, #444]	; (40160c <show_beam_parameters+0x1f0>)
  40144e:	47a0      	blx	r4
 	compute_skewness(peaks_localization[1], peaks_localization[2], peaks_localization[4], peaks_localization[5],buffer);
  401450:	896b      	ldrh	r3, [r5, #10]
  401452:	892a      	ldrh	r2, [r5, #8]
  401454:	88a9      	ldrh	r1, [r5, #4]
  401456:	8868      	ldrh	r0, [r5, #2]
  401458:	f8cd a000 	str.w	sl, [sp]
  40145c:	4c6c      	ldr	r4, [pc, #432]	; (401610 <show_beam_parameters+0x1f4>)
  40145e:	47a0      	blx	r4

	
	uint16_t peak_info[7] = {0,0,0,0,0,0,9999};
  401460:	2300      	movs	r3, #0
  401462:	823b      	strh	r3, [r7, #16]
  401464:	827b      	strh	r3, [r7, #18]
  401466:	82bb      	strh	r3, [r7, #20]
  401468:	82fb      	strh	r3, [r7, #22]
  40146a:	833b      	strh	r3, [r7, #24]
  40146c:	837b      	strh	r3, [r7, #26]
  40146e:	f242 730f 	movw	r3, #9999	; 0x270f
  401472:	83bb      	strh	r3, [r7, #28]
  401474:	462b      	mov	r3, r5
  401476:	f107 0410 	add.w	r4, r7, #16
  40147a:	350c      	adds	r5, #12
  40147c:	4622      	mov	r2, r4
	
	
	
	for (uint16_t i = 0; i < 6; i++)
	{
		 peak_info[i] = peaks_localization[i];
  40147e:	f833 1b02 	ldrh.w	r1, [r3], #2
  401482:	f822 1b02 	strh.w	r1, [r2], #2
	for (uint16_t i = 0; i < 6; i++)
  401486:	42ab      	cmp	r3, r5
  401488:	d1f9      	bne.n	40147e <show_beam_parameters+0x62>
	}
	
	uint16_t peak_width1 = peak_info[2] - peak_info[1] + 1;
  40148a:	f8b7 c012 	ldrh.w	ip, [r7, #18]
  40148e:	f8b7 9014 	ldrh.w	r9, [r7, #20]
  401492:	f109 0901 	add.w	r9, r9, #1
  401496:	eba9 090c 	sub.w	r9, r9, ip
  40149a:	fa1f f989 	uxth.w	r9, r9
	uint16_t peak_one_plot_data[peak_width1];
  40149e:	f109 31ff 	add.w	r1, r9, #4294967295
  4014a2:	ea4f 0349 	mov.w	r3, r9, lsl #1
  4014a6:	3308      	adds	r3, #8
  4014a8:	f023 0307 	bic.w	r3, r3, #7
  4014ac:	ebad 0d03 	sub.w	sp, sp, r3
  4014b0:	ae02      	add	r6, sp, #8
	uint16_t peak_width2 = peak_info[5] - peak_info[4] + 1;
  4014b2:	f8b7 e018 	ldrh.w	lr, [r7, #24]
  4014b6:	f8b7 801a 	ldrh.w	r8, [r7, #26]
  4014ba:	f108 0801 	add.w	r8, r8, #1
  4014be:	eba8 080e 	sub.w	r8, r8, lr
  4014c2:	fa1f f888 	uxth.w	r8, r8
	uint16_t peak_two_plot_data[peak_width2];
  4014c6:	f108 30ff 	add.w	r0, r8, #4294967295
  4014ca:	ea4f 0348 	mov.w	r3, r8, lsl #1
  4014ce:	3308      	adds	r3, #8
  4014d0:	f023 0307 	bic.w	r3, r3, #7
  4014d4:	ebad 0d03 	sub.w	sp, sp, r3
  4014d8:	ad02      	add	r5, sp, #8
	
	
	for (uint16_t i = 0; i < peak_width1-1; i++)
  4014da:	2900      	cmp	r1, #0
  4014dc:	dd0c      	ble.n	4014f8 <show_beam_parameters+0xdc>
  4014de:	2200      	movs	r2, #0
  4014e0:	4613      	mov	r3, r2
	{
		peak_one_plot_data[i] =  buffer[peak_info[1] + i];
  4014e2:	eb0c 0b02 	add.w	fp, ip, r2
  4014e6:	f83a b01b 	ldrh.w	fp, [sl, fp, lsl #1]
  4014ea:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
	for (uint16_t i = 0; i < peak_width1-1; i++)
  4014ee:	3301      	adds	r3, #1
  4014f0:	b29b      	uxth	r3, r3
  4014f2:	461a      	mov	r2, r3
  4014f4:	4299      	cmp	r1, r3
  4014f6:	dcf4      	bgt.n	4014e2 <show_beam_parameters+0xc6>
	}
	
	peak_one_plot_data[peak_width1-1] = 8888; 
  4014f8:	f242 23b8 	movw	r3, #8888	; 0x22b8
  4014fc:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
	
	for (uint16_t i = 0; i < peak_width2-1; i++)
  401500:	2800      	cmp	r0, #0
  401502:	dd0c      	ble.n	40151e <show_beam_parameters+0x102>
  401504:	2200      	movs	r2, #0
  401506:	4613      	mov	r3, r2
	{
		peak_two_plot_data[i] =  buffer[peak_info[4] + i];
  401508:	eb0e 0102 	add.w	r1, lr, r2
  40150c:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
  401510:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
	for (uint16_t i = 0; i < peak_width2-1; i++)
  401514:	3301      	adds	r3, #1
  401516:	b29b      	uxth	r3, r3
  401518:	461a      	mov	r2, r3
  40151a:	4298      	cmp	r0, r3
  40151c:	dcf4      	bgt.n	401508 <show_beam_parameters+0xec>
	}
	
	peak_two_plot_data[peak_width2-1] = 7777; 
  40151e:	f641 6361 	movw	r3, #7777	; 0x1e61
  401522:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
	
	
	
	uint16_t beam_parameters[4] = {0,0,0,0};
	
	beam_parameters[0] = beam_intensity[0];
  401526:	4b3b      	ldr	r3, [pc, #236]	; (401614 <show_beam_parameters+0x1f8>)
  401528:	881a      	ldrh	r2, [r3, #0]
  40152a:	813a      	strh	r2, [r7, #8]
	beam_parameters[1] = beam_intensity[1];
  40152c:	885b      	ldrh	r3, [r3, #2]
  40152e:	817b      	strh	r3, [r7, #10]
	beam_parameters[2] = fwhm[0];
  401530:	4b39      	ldr	r3, [pc, #228]	; (401618 <show_beam_parameters+0x1fc>)
  401532:	881a      	ldrh	r2, [r3, #0]
  401534:	81ba      	strh	r2, [r7, #12]
	beam_parameters[3] = fwhm[1];
  401536:	885b      	ldrh	r3, [r3, #2]
  401538:	81fb      	strh	r3, [r7, #14]
  40153a:	f107 0b1e 	add.w	fp, r7, #30
	
	
	
	for (uint16_t i = 0; i < 7; i++)
    {
		usart_serial_write_packet(CONF_UART, peak_info+i,2);
  40153e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 401620 <show_beam_parameters+0x204>
  401542:	2202      	movs	r2, #2
  401544:	4621      	mov	r1, r4
  401546:	4835      	ldr	r0, [pc, #212]	; (40161c <show_beam_parameters+0x200>)
  401548:	47d0      	blx	sl
  40154a:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < 7; i++)
  40154c:	455c      	cmp	r4, fp
  40154e:	d1f8      	bne.n	401542 <show_beam_parameters+0x126>
				
	}
	
	for (uint16_t i = 0; i < peak_width1; i++)
  401550:	f1b9 0f00 	cmp.w	r9, #0
  401554:	d015      	beq.n	401582 <show_beam_parameters+0x166>
  401556:	4634      	mov	r4, r6
  401558:	f109 39ff 	add.w	r9, r9, #4294967295
  40155c:	fa1f f989 	uxth.w	r9, r9
  401560:	f109 0901 	add.w	r9, r9, #1
  401564:	eb06 0649 	add.w	r6, r6, r9, lsl #1
	{
		usart_serial_write_packet(CONF_UART, peak_one_plot_data + i,2);
  401568:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 40161c <show_beam_parameters+0x200>
  40156c:	f04f 0a02 	mov.w	sl, #2
  401570:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 401620 <show_beam_parameters+0x204>
  401574:	4652      	mov	r2, sl
  401576:	4621      	mov	r1, r4
  401578:	4658      	mov	r0, fp
  40157a:	47c8      	blx	r9
  40157c:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < peak_width1; i++)
  40157e:	42b4      	cmp	r4, r6
  401580:	d1f8      	bne.n	401574 <show_beam_parameters+0x158>
	}
	
	for (uint16_t i = 0; i < peak_width2; i++)
  401582:	f1b8 0f00 	cmp.w	r8, #0
  401586:	d014      	beq.n	4015b2 <show_beam_parameters+0x196>
  401588:	462c      	mov	r4, r5
  40158a:	f108 38ff 	add.w	r8, r8, #4294967295
  40158e:	fa1f f888 	uxth.w	r8, r8
  401592:	f108 0801 	add.w	r8, r8, #1
  401596:	eb05 0548 	add.w	r5, r5, r8, lsl #1
	{
		usart_serial_write_packet(CONF_UART, peak_two_plot_data + i,2);
  40159a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 40161c <show_beam_parameters+0x200>
  40159e:	f04f 0802 	mov.w	r8, #2
  4015a2:	4e1f      	ldr	r6, [pc, #124]	; (401620 <show_beam_parameters+0x204>)
  4015a4:	4642      	mov	r2, r8
  4015a6:	4621      	mov	r1, r4
  4015a8:	4648      	mov	r0, r9
  4015aa:	47b0      	blx	r6
  4015ac:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < peak_width2; i++)
  4015ae:	42a5      	cmp	r5, r4
  4015b0:	d1f8      	bne.n	4015a4 <show_beam_parameters+0x188>
  4015b2:	f107 0408 	add.w	r4, r7, #8
  4015b6:	f107 0910 	add.w	r9, r7, #16
	}
	
	for (uint16_t i = 0; i < 4; i++)
	{
		usart_serial_write_packet(CONF_UART, beam_parameters + i,2);
  4015ba:	f8df 8060 	ldr.w	r8, [pc, #96]	; 40161c <show_beam_parameters+0x200>
  4015be:	2602      	movs	r6, #2
  4015c0:	4d17      	ldr	r5, [pc, #92]	; (401620 <show_beam_parameters+0x204>)
  4015c2:	4632      	mov	r2, r6
  4015c4:	4621      	mov	r1, r4
  4015c6:	4640      	mov	r0, r8
  4015c8:	47a8      	blx	r5
  4015ca:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < 4; i++)
  4015cc:	45a1      	cmp	r9, r4
  4015ce:	d1f8      	bne.n	4015c2 <show_beam_parameters+0x1a6>
	}
	
	for (uint16_t i = 0; i < 2; i++)
	{
		usart_serial_write_packet(CONF_UART, skewness + i,8);
  4015d0:	4e14      	ldr	r6, [pc, #80]	; (401624 <show_beam_parameters+0x208>)
  4015d2:	4d12      	ldr	r5, [pc, #72]	; (40161c <show_beam_parameters+0x200>)
  4015d4:	2208      	movs	r2, #8
  4015d6:	4631      	mov	r1, r6
  4015d8:	4628      	mov	r0, r5
  4015da:	4c11      	ldr	r4, [pc, #68]	; (401620 <show_beam_parameters+0x204>)
  4015dc:	47a0      	blx	r4
  4015de:	2208      	movs	r2, #8
  4015e0:	18b1      	adds	r1, r6, r2
  4015e2:	4628      	mov	r0, r5
  4015e4:	47a0      	blx	r4
	}
	
	uint16_t delimiter = 6666;
  4015e6:	f107 0120 	add.w	r1, r7, #32
  4015ea:	f641 230a 	movw	r3, #6666	; 0x1a0a
  4015ee:	f821 3d1a 	strh.w	r3, [r1, #-26]!
	usart_serial_write_packet(CONF_UART, &delimiter,2);
  4015f2:	2202      	movs	r2, #2
  4015f4:	4628      	mov	r0, r5
  4015f6:	47a0      	blx	r4
	
	printf("Y skewness : ");
	print_float(skewness[1]);
	
	*/
}
  4015f8:	3724      	adds	r7, #36	; 0x24
  4015fa:	46bd      	mov	sp, r7
  4015fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401600:	00400f95 	.word	0x00400f95
  401604:	20008b60 	.word	0x20008b60
  401608:	00401095 	.word	0x00401095
  40160c:	00401121 	.word	0x00401121
  401610:	004012f9 	.word	0x004012f9
  401614:	20008b54 	.word	0x20008b54
  401618:	20008b5c 	.word	0x20008b5c
  40161c:	400e0600 	.word	0x400e0600
  401620:	004001cd 	.word	0x004001cd
  401624:	20008b70 	.word	0x20008b70

00401628 <ACC_Handler>:
{
  401628:	b508      	push	{r3, lr}
	ul_status = acc_get_interrupt_status(ACC);
  40162a:	4811      	ldr	r0, [pc, #68]	; (401670 <ACC_Handler+0x48>)
  40162c:	4b11      	ldr	r3, [pc, #68]	; (401674 <ACC_Handler+0x4c>)
  40162e:	4798      	blx	r3
	if ((ul_status & ACC_ISR_CE) == ACC_ISR_CE) {
  401630:	f010 0f01 	tst.w	r0, #1
  401634:	d100      	bne.n	401638 <ACC_Handler+0x10>
  401636:	bd08      	pop	{r3, pc}
		if (acc_get_comparison_result(ACC)) {
  401638:	480d      	ldr	r0, [pc, #52]	; (401670 <ACC_Handler+0x48>)
  40163a:	4b0f      	ldr	r3, [pc, #60]	; (401678 <ACC_Handler+0x50>)
  40163c:	4798      	blx	r3
  40163e:	b178      	cbz	r0, 401660 <ACC_Handler+0x38>
			if(!triggered){
  401640:	4b0e      	ldr	r3, [pc, #56]	; (40167c <ACC_Handler+0x54>)
  401642:	781b      	ldrb	r3, [r3, #0]
  401644:	2b00      	cmp	r3, #0
  401646:	d1f6      	bne.n	401636 <ACC_Handler+0xe>
				cycleEnded();
  401648:	4b0d      	ldr	r3, [pc, #52]	; (401680 <ACC_Handler+0x58>)
  40164a:	4798      	blx	r3
				fullBuffer=true;
  40164c:	2301      	movs	r3, #1
  40164e:	4a0d      	ldr	r2, [pc, #52]	; (401684 <ACC_Handler+0x5c>)
  401650:	7013      	strb	r3, [r2, #0]
				triggered= true;
  401652:	4a0a      	ldr	r2, [pc, #40]	; (40167c <ACC_Handler+0x54>)
  401654:	7013      	strb	r3, [r2, #0]
				tc_start(TC0,0);
  401656:	2100      	movs	r1, #0
  401658:	480b      	ldr	r0, [pc, #44]	; (401688 <ACC_Handler+0x60>)
  40165a:	4b0c      	ldr	r3, [pc, #48]	; (40168c <ACC_Handler+0x64>)
  40165c:	4798      	blx	r3
  40165e:	bd08      	pop	{r3, pc}
			if(triggered)
  401660:	4b06      	ldr	r3, [pc, #24]	; (40167c <ACC_Handler+0x54>)
  401662:	781b      	ldrb	r3, [r3, #0]
  401664:	2b00      	cmp	r3, #0
  401666:	d0e6      	beq.n	401636 <ACC_Handler+0xe>
				triggered=false;
  401668:	2200      	movs	r2, #0
  40166a:	4b04      	ldr	r3, [pc, #16]	; (40167c <ACC_Handler+0x54>)
  40166c:	701a      	strb	r2, [r3, #0]
}
  40166e:	e7e2      	b.n	401636 <ACC_Handler+0xe>
  401670:	400bc000 	.word	0x400bc000
  401674:	00400475 	.word	0x00400475
  401678:	0040045b 	.word	0x0040045b
  40167c:	20008b80 	.word	0x20008b80
  401680:	00400da5 	.word	0x00400da5
  401684:	20008b58 	.word	0x20008b58
  401688:	40090000 	.word	0x40090000
  40168c:	0040095f 	.word	0x0040095f

00401690 <main>:
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
	dacc_write_conversion_data(DACC, 3100);
}

int main (void)
{
  401690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401694:	b08c      	sub	sp, #48	; 0x30
	/* Initialize the SAM system. */
	sysclk_init();
  401696:	4b6c      	ldr	r3, [pc, #432]	; (401848 <main+0x1b8>)
  401698:	4798      	blx	r3
	board_init();
  40169a:	4b6c      	ldr	r3, [pc, #432]	; (40184c <main+0x1bc>)
  40169c:	4798      	blx	r3
  40169e:	2007      	movs	r0, #7
  4016a0:	f8df 8224 	ldr.w	r8, [pc, #548]	; 4018c8 <main+0x238>
  4016a4:	47c0      	blx	r8
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4016a6:	4c6a      	ldr	r4, [pc, #424]	; (401850 <main+0x1c0>)
  4016a8:	4b6a      	ldr	r3, [pc, #424]	; (401854 <main+0x1c4>)
  4016aa:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4016ac:	4a6a      	ldr	r2, [pc, #424]	; (401858 <main+0x1c8>)
  4016ae:	4b6b      	ldr	r3, [pc, #428]	; (40185c <main+0x1cc>)
  4016b0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4016b2:	4a6b      	ldr	r2, [pc, #428]	; (401860 <main+0x1d0>)
  4016b4:	4b6b      	ldr	r3, [pc, #428]	; (401864 <main+0x1d4>)
  4016b6:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4016b8:	4d6b      	ldr	r5, [pc, #428]	; (401868 <main+0x1d8>)
  4016ba:	9505      	str	r5, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
  4016bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4016c0:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
  4016c2:	f44f 6900 	mov.w	r9, #2048	; 0x800
  4016c6:	f8cd 901c 	str.w	r9, [sp, #28]
  4016ca:	2007      	movs	r0, #7
  4016cc:	47c0      	blx	r8
		uart_init((Uart*)p_usart, &uart_settings);
  4016ce:	a905      	add	r1, sp, #20
  4016d0:	4620      	mov	r0, r4
  4016d2:	4b66      	ldr	r3, [pc, #408]	; (40186c <main+0x1dc>)
  4016d4:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4016d6:	4e66      	ldr	r6, [pc, #408]	; (401870 <main+0x1e0>)
  4016d8:	6833      	ldr	r3, [r6, #0]
  4016da:	2100      	movs	r1, #0
  4016dc:	6898      	ldr	r0, [r3, #8]
  4016de:	4c65      	ldr	r4, [pc, #404]	; (401874 <main+0x1e4>)
  4016e0:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4016e2:	6833      	ldr	r3, [r6, #0]
  4016e4:	2100      	movs	r1, #0
  4016e6:	6858      	ldr	r0, [r3, #4]
  4016e8:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_DACC);
  4016ea:	2020      	movs	r0, #32
  4016ec:	47c0      	blx	r8
	dacc_reset(DACC);
  4016ee:	4c62      	ldr	r4, [pc, #392]	; (401878 <main+0x1e8>)
  4016f0:	4620      	mov	r0, r4
  4016f2:	4b62      	ldr	r3, [pc, #392]	; (40187c <main+0x1ec>)
  4016f4:	4798      	blx	r3
	dacc_disable_trigger(DACC);
  4016f6:	4620      	mov	r0, r4
  4016f8:	4b61      	ldr	r3, [pc, #388]	; (401880 <main+0x1f0>)
  4016fa:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
  4016fc:	2100      	movs	r1, #0
  4016fe:	4620      	mov	r0, r4
  401700:	4b60      	ldr	r3, [pc, #384]	; (401884 <main+0x1f4>)
  401702:	4798      	blx	r3
	dacc_set_timing(DACC, 0, 0xf);
  401704:	220f      	movs	r2, #15
  401706:	2100      	movs	r1, #0
  401708:	4620      	mov	r0, r4
  40170a:	4b5f      	ldr	r3, [pc, #380]	; (401888 <main+0x1f8>)
  40170c:	4798      	blx	r3
	dacc_set_channel_selection(DACC, DACC_CHANNEL_0);
  40170e:	2100      	movs	r1, #0
  401710:	4620      	mov	r0, r4
  401712:	4b5e      	ldr	r3, [pc, #376]	; (40188c <main+0x1fc>)
  401714:	4798      	blx	r3
	dacc_enable_channel(DACC, DACC_CHANNEL_0);	
  401716:	2100      	movs	r1, #0
  401718:	4620      	mov	r0, r4
  40171a:	4b5d      	ldr	r3, [pc, #372]	; (401890 <main+0x200>)
  40171c:	4798      	blx	r3
	dacc_set_analog_control(DACC, DACC_ANALOG_CONTROL);
  40171e:	f44f 7185 	mov.w	r1, #266	; 0x10a
  401722:	4620      	mov	r0, r4
  401724:	4b5b      	ldr	r3, [pc, #364]	; (401894 <main+0x204>)
  401726:	4798      	blx	r3
	dacc_write_conversion_data(DACC, 3100);
  401728:	f640 411c 	movw	r1, #3100	; 0xc1c
  40172c:	4620      	mov	r0, r4
  40172e:	4b5a      	ldr	r3, [pc, #360]	; (401898 <main+0x208>)
  401730:	4798      	blx	r3
	configure_console();

	/* Output example information. */
	//puts(STRING_HEADER);
	configureDACC();
	g_afec0_sample_data = 0;
  401732:	2700      	movs	r7, #0
  401734:	4b59      	ldr	r3, [pc, #356]	; (40189c <main+0x20c>)
  401736:	801f      	strh	r7, [r3, #0]
	afec_enable(AFEC0);
  401738:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
  40173c:	4620      	mov	r0, r4
  40173e:	4b58      	ldr	r3, [pc, #352]	; (4018a0 <main+0x210>)
  401740:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  401742:	a805      	add	r0, sp, #20
  401744:	4b57      	ldr	r3, [pc, #348]	; (4018a4 <main+0x214>)
  401746:	4798      	blx	r3
	afec_ch_get_config_defaults(&afec_ch_cfg);
  401748:	a802      	add	r0, sp, #8
  40174a:	4b57      	ldr	r3, [pc, #348]	; (4018a8 <main+0x218>)
  40174c:	4798      	blx	r3
		afec_init(AFEC0, &afec_cfg);
  40174e:	a905      	add	r1, sp, #20
  401750:	4620      	mov	r0, r4
  401752:	f8df a198 	ldr.w	sl, [pc, #408]	; 4018ec <main+0x25c>
  401756:	47d0      	blx	sl
		afec_init(AFEC1, &afec_cfg);
  401758:	4e54      	ldr	r6, [pc, #336]	; (4018ac <main+0x21c>)
  40175a:	a905      	add	r1, sp, #20
  40175c:	4630      	mov	r0, r6
  40175e:	47d0      	blx	sl
		afec_ch_set_config(AFEC0, AFEC_CHANNEL_6, &afec_ch_cfg);
  401760:	aa02      	add	r2, sp, #8
  401762:	2106      	movs	r1, #6
  401764:	4620      	mov	r0, r4
  401766:	f8df a188 	ldr.w	sl, [pc, #392]	; 4018f0 <main+0x260>
  40176a:	47d0      	blx	sl
		afec_ch_set_config(AFEC1, AFEC_CHANNEL_0, &afec_ch_cfg);
  40176c:	aa02      	add	r2, sp, #8
  40176e:	4639      	mov	r1, r7
  401770:	4630      	mov	r0, r6
  401772:	47d0      	blx	sl
	afec->AFEC_CSELR = afec_ch;
  401774:	6677      	str	r7, [r6, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  401776:	f8c6 906c 	str.w	r9, [r6, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  40177a:	2306      	movs	r3, #6
  40177c:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40177e:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	reg = afec->AFEC_MR;
  401782:	6873      	ldr	r3, [r6, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  401784:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  401788:	6073      	str	r3, [r6, #4]
    uint32_t ul_div = 0;
  40178a:	9703      	str	r7, [sp, #12]
	uint32_t ul_tc_clks = 0;
  40178c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  401790:	f849 7d20 	str.w	r7, [r9, #-32]!
	pmc_enable_periph_clk(ID_TC0);														// Enable peripheral clock of timer counter 0
  401794:	2015      	movs	r0, #21
  401796:	47c0      	blx	r8
	tc_find_mck_divisor(sampleFreq, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  401798:	9500      	str	r5, [sp, #0]
  40179a:	464b      	mov	r3, r9
  40179c:	aa03      	add	r2, sp, #12
  40179e:	4629      	mov	r1, r5
  4017a0:	4843      	ldr	r0, [pc, #268]	; (4018b0 <main+0x220>)
  4017a2:	f8df 8150 	ldr.w	r8, [pc, #336]	; 4018f4 <main+0x264>
  4017a6:	47c0      	blx	r8
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  4017a8:	f8df 814c 	ldr.w	r8, [pc, #332]	; 4018f8 <main+0x268>
  4017ac:	9a04      	ldr	r2, [sp, #16]
  4017ae:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  4017b2:	4639      	mov	r1, r7
  4017b4:	4640      	mov	r0, r8
  4017b6:	4b3f      	ldr	r3, [pc, #252]	; (4018b4 <main+0x224>)
  4017b8:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / (sampleFreq*2);
  4017ba:	9b03      	ldr	r3, [sp, #12]
  4017bc:	fbb5 f3f3 	udiv	r3, r5, r3
  4017c0:	4a3d      	ldr	r2, [pc, #244]	; (4018b8 <main+0x228>)
  4017c2:	fba2 2303 	umull	r2, r3, r2, r3
  4017c6:	0c5a      	lsrs	r2, r3, #17
  4017c8:	f8c8 2014 	str.w	r2, [r8, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / sampleFreq;
  4017cc:	0c1b      	lsrs	r3, r3, #16
  4017ce:	f8c8 301c 	str.w	r3, [r8, #28]
	reg = afec->AFEC_MR;
  4017d2:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4017d4:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
  4017d8:	f043 0303 	orr.w	r3, r3, #3
	afec->AFEC_MR = reg;
  4017dc:	6063      	str	r3, [r4, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4017de:	2301      	movs	r3, #1
  4017e0:	6173      	str	r3, [r6, #20]
  4017e2:	2240      	movs	r2, #64	; 0x40
  4017e4:	6162      	str	r2, [r4, #20]
		afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  4017e6:	4a35      	ldr	r2, [pc, #212]	; (4018bc <main+0x22c>)
  4017e8:	2110      	movs	r1, #16
  4017ea:	4620      	mov	r0, r4
  4017ec:	4d34      	ldr	r5, [pc, #208]	; (4018c0 <main+0x230>)
  4017ee:	47a8      	blx	r5
 */
static inline enum status_code afec_start_calibration(Afec *const afec)
{
	uint32_t reg;

	reg = afec->AFEC_CHSR;
  4017f0:	69e3      	ldr	r3, [r4, #28]
	afec->AFEC_CDOR = reg;
  4017f2:	65e3      	str	r3, [r4, #92]	; 0x5c

	if ((afec->AFEC_MR & AFEC_MR_FREERUN) == AFEC_MR_FREERUN_ON) {
  4017f4:	6863      	ldr	r3, [r4, #4]
  4017f6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4017fa:	d101      	bne.n	401800 <main+0x170>
		return STATUS_ERR_BUSY;
	}
	afec->AFEC_CR = AFEC_CR_AUTOCAL;
  4017fc:	2208      	movs	r2, #8
  4017fe:	6022      	str	r2, [r4, #0]
	return afec->AFEC_ISR;
  401800:	4b30      	ldr	r3, [pc, #192]	; (4018c4 <main+0x234>)
  401802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
  401804:	2a00      	cmp	r2, #0
  401806:	dafc      	bge.n	401802 <main+0x172>
	g_max_digital = MAX_DIGITAL_12_BIT;
	bool test;
	set_afec_test();
	/* Enable clock for ACC */
	pmc_enable_periph_clk(ID_ACC);
  401808:	2021      	movs	r0, #33	; 0x21
  40180a:	4b2f      	ldr	r3, [pc, #188]	; (4018c8 <main+0x238>)
  40180c:	4798      	blx	r3
	/* Initialize ACC */
	acc_init(ACC, ACC_MR_SELPLUS_AD7, ACC_MR_SELMINUS_DAC1,
  40180e:	4c2f      	ldr	r4, [pc, #188]	; (4018cc <main+0x23c>)
  401810:	2300      	movs	r3, #0
  401812:	9300      	str	r3, [sp, #0]
  401814:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401818:	2203      	movs	r2, #3
  40181a:	2170      	movs	r1, #112	; 0x70
  40181c:	4620      	mov	r0, r4
  40181e:	4d2c      	ldr	r5, [pc, #176]	; (4018d0 <main+0x240>)
  401820:	47a8      	blx	r5
  401822:	2202      	movs	r2, #2
  401824:	4b2b      	ldr	r3, [pc, #172]	; (4018d4 <main+0x244>)
  401826:	605a      	str	r2, [r3, #4]

	/* Enable ACC interrupt */
	NVIC_EnableIRQ(ACC_IRQn);

	/* Enable */
	acc_enable_interrupt(ACC);
  401828:	4620      	mov	r0, r4
  40182a:	4b2b      	ldr	r3, [pc, #172]	; (4018d8 <main+0x248>)
  40182c:	4798      	blx	r3
	bool loop=true;
	while (1) {
		if(getbuffersFilled()==100){
  40182e:	4d2b      	ldr	r5, [pc, #172]	; (4018dc <main+0x24c>)
			//break;
		}
		if(fullBuffer){
  401830:	4c2b      	ldr	r4, [pc, #172]	; (4018e0 <main+0x250>)
			fullBuffer=false;
			show_beam_parameters(getFilledBuffer());
  401832:	4e2c      	ldr	r6, [pc, #176]	; (4018e4 <main+0x254>)
		if(getbuffersFilled()==100){
  401834:	47a8      	blx	r5
		if(fullBuffer){
  401836:	7823      	ldrb	r3, [r4, #0]
  401838:	2b00      	cmp	r3, #0
  40183a:	d0fb      	beq.n	401834 <main+0x1a4>
			fullBuffer=false;
  40183c:	2300      	movs	r3, #0
  40183e:	7023      	strb	r3, [r4, #0]
			show_beam_parameters(getFilledBuffer());
  401840:	47b0      	blx	r6
  401842:	4b29      	ldr	r3, [pc, #164]	; (4018e8 <main+0x258>)
  401844:	4798      	blx	r3
  401846:	e7f5      	b.n	401834 <main+0x1a4>
  401848:	00400165 	.word	0x00400165
  40184c:	00400389 	.word	0x00400389
  401850:	400e0600 	.word	0x400e0600
  401854:	20008bc8 	.word	0x20008bc8
  401858:	00400e7d 	.word	0x00400e7d
  40185c:	20008bc4 	.word	0x20008bc4
  401860:	00400df5 	.word	0x00400df5
  401864:	20008bc0 	.word	0x20008bc0
  401868:	05b8d800 	.word	0x05b8d800
  40186c:	004009d7 	.word	0x004009d7
  401870:	20000014 	.word	0x20000014
  401874:	00403909 	.word	0x00403909
  401878:	400b8000 	.word	0x400b8000
  40187c:	00400771 	.word	0x00400771
  401880:	00400777 	.word	0x00400777
  401884:	00400781 	.word	0x00400781
  401888:	004007c5 	.word	0x004007c5
  40188c:	004007ad 	.word	0x004007ad
  401890:	004007ed 	.word	0x004007ed
  401894:	00400801 	.word	0x00400801
  401898:	004007a9 	.word	0x004007a9
  40189c:	20008c84 	.word	0x20008c84
  4018a0:	0040070d 	.word	0x0040070d
  4018a4:	00400545 	.word	0x00400545
  4018a8:	00400575 	.word	0x00400575
  4018ac:	400b4000 	.word	0x400b4000
  4018b0:	0003d090 	.word	0x0003d090
  4018b4:	00400945 	.word	0x00400945
  4018b8:	431bde83 	.word	0x431bde83
  4018bc:	00400efd 	.word	0x00400efd
  4018c0:	0040068d 	.word	0x0040068d
  4018c4:	400b0000 	.word	0x400b0000
  4018c8:	004008f1 	.word	0x004008f1
  4018cc:	400bc000 	.word	0x400bc000
  4018d0:	00400421 	.word	0x00400421
  4018d4:	e000e100 	.word	0xe000e100
  4018d8:	0040046f 	.word	0x0040046f
  4018dc:	00400ddd 	.word	0x00400ddd
  4018e0:	20008b58 	.word	0x20008b58
  4018e4:	00400de9 	.word	0x00400de9
  4018e8:	0040141d 	.word	0x0040141d
  4018ec:	00400581 	.word	0x00400581
  4018f0:	00400515 	.word	0x00400515
  4018f4:	00400967 	.word	0x00400967
  4018f8:	40090000 	.word	0x40090000

004018fc <pow>:
  4018fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401900:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 401bf4 <pow+0x2f8>
  401904:	b08d      	sub	sp, #52	; 0x34
  401906:	4606      	mov	r6, r0
  401908:	460f      	mov	r7, r1
  40190a:	4614      	mov	r4, r2
  40190c:	461d      	mov	r5, r3
  40190e:	f000 f9d3 	bl	401cb8 <__ieee754_pow>
  401912:	f999 8000 	ldrsb.w	r8, [r9]
  401916:	f1b8 3fff 	cmp.w	r8, #4294967295
  40191a:	e9cd 0100 	strd	r0, r1, [sp]
  40191e:	d036      	beq.n	40198e <pow+0x92>
  401920:	4622      	mov	r2, r4
  401922:	462b      	mov	r3, r5
  401924:	4620      	mov	r0, r4
  401926:	4629      	mov	r1, r5
  401928:	f001 fd3e 	bl	4033a8 <__aeabi_dcmpun>
  40192c:	4683      	mov	fp, r0
  40192e:	bb70      	cbnz	r0, 40198e <pow+0x92>
  401930:	4632      	mov	r2, r6
  401932:	463b      	mov	r3, r7
  401934:	4630      	mov	r0, r6
  401936:	4639      	mov	r1, r7
  401938:	f001 fd36 	bl	4033a8 <__aeabi_dcmpun>
  40193c:	2200      	movs	r2, #0
  40193e:	4682      	mov	sl, r0
  401940:	2300      	movs	r3, #0
  401942:	2800      	cmp	r0, #0
  401944:	f040 80a0 	bne.w	401a88 <pow+0x18c>
  401948:	4630      	mov	r0, r6
  40194a:	4639      	mov	r1, r7
  40194c:	f001 fcfa 	bl	403344 <__aeabi_dcmpeq>
  401950:	b310      	cbz	r0, 401998 <pow+0x9c>
  401952:	2200      	movs	r2, #0
  401954:	2300      	movs	r3, #0
  401956:	4620      	mov	r0, r4
  401958:	4629      	mov	r1, r5
  40195a:	f001 fcf3 	bl	403344 <__aeabi_dcmpeq>
  40195e:	4683      	mov	fp, r0
  401960:	2800      	cmp	r0, #0
  401962:	d06a      	beq.n	401a3a <pow+0x13e>
  401964:	2201      	movs	r2, #1
  401966:	4b9c      	ldr	r3, [pc, #624]	; (401bd8 <pow+0x2dc>)
  401968:	9202      	str	r2, [sp, #8]
  40196a:	2100      	movs	r1, #0
  40196c:	2200      	movs	r2, #0
  40196e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  401972:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401976:	e9cd 4506 	strd	r4, r5, [sp, #24]
  40197a:	e9cd 1208 	strd	r1, r2, [sp, #32]
  40197e:	9303      	str	r3, [sp, #12]
  401980:	f1b8 0f00 	cmp.w	r8, #0
  401984:	d045      	beq.n	401a12 <pow+0x116>
  401986:	4c95      	ldr	r4, [pc, #596]	; (401bdc <pow+0x2e0>)
  401988:	2300      	movs	r3, #0
  40198a:	e9cd 3400 	strd	r3, r4, [sp]
  40198e:	e9dd 0100 	ldrd	r0, r1, [sp]
  401992:	b00d      	add	sp, #52	; 0x34
  401994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401998:	e9dd 0100 	ldrd	r0, r1, [sp]
  40199c:	f000 ff92 	bl	4028c4 <finite>
  4019a0:	4680      	mov	r8, r0
  4019a2:	2800      	cmp	r0, #0
  4019a4:	f000 808b 	beq.w	401abe <pow+0x1c2>
  4019a8:	f04f 0a00 	mov.w	sl, #0
  4019ac:	f04f 0b00 	mov.w	fp, #0
  4019b0:	4652      	mov	r2, sl
  4019b2:	465b      	mov	r3, fp
  4019b4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4019b8:	f001 fcc4 	bl	403344 <__aeabi_dcmpeq>
  4019bc:	2800      	cmp	r0, #0
  4019be:	d0e6      	beq.n	40198e <pow+0x92>
  4019c0:	4630      	mov	r0, r6
  4019c2:	4639      	mov	r1, r7
  4019c4:	f000 ff7e 	bl	4028c4 <finite>
  4019c8:	2800      	cmp	r0, #0
  4019ca:	d0e0      	beq.n	40198e <pow+0x92>
  4019cc:	4620      	mov	r0, r4
  4019ce:	4629      	mov	r1, r5
  4019d0:	f000 ff78 	bl	4028c4 <finite>
  4019d4:	2800      	cmp	r0, #0
  4019d6:	d0da      	beq.n	40198e <pow+0x92>
  4019d8:	f999 3000 	ldrsb.w	r3, [r9]
  4019dc:	4a7e      	ldr	r2, [pc, #504]	; (401bd8 <pow+0x2dc>)
  4019de:	9203      	str	r2, [sp, #12]
  4019e0:	2104      	movs	r1, #4
  4019e2:	2200      	movs	r2, #0
  4019e4:	2b02      	cmp	r3, #2
  4019e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  4019ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
  4019ee:	e9cd ab08 	strd	sl, fp, [sp, #32]
  4019f2:	9102      	str	r1, [sp, #8]
  4019f4:	920a      	str	r2, [sp, #40]	; 0x28
  4019f6:	d003      	beq.n	401a00 <pow+0x104>
  4019f8:	a802      	add	r0, sp, #8
  4019fa:	f000 ff69 	bl	4028d0 <matherr>
  4019fe:	b968      	cbnz	r0, 401a1c <pow+0x120>
  401a00:	f001 ff06 	bl	403810 <__errno>
  401a04:	2322      	movs	r3, #34	; 0x22
  401a06:	6003      	str	r3, [r0, #0]
  401a08:	e008      	b.n	401a1c <pow+0x120>
  401a0a:	2300      	movs	r3, #0
  401a0c:	2400      	movs	r4, #0
  401a0e:	e9cd 3408 	strd	r3, r4, [sp, #32]
  401a12:	a802      	add	r0, sp, #8
  401a14:	f000 ff5c 	bl	4028d0 <matherr>
  401a18:	2800      	cmp	r0, #0
  401a1a:	d030      	beq.n	401a7e <pow+0x182>
  401a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401a1e:	b11b      	cbz	r3, 401a28 <pow+0x12c>
  401a20:	f001 fef6 	bl	403810 <__errno>
  401a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401a26:	6003      	str	r3, [r0, #0]
  401a28:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
  401a2c:	e9cd 3400 	strd	r3, r4, [sp]
  401a30:	e9dd 0100 	ldrd	r0, r1, [sp]
  401a34:	b00d      	add	sp, #52	; 0x34
  401a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a3a:	4620      	mov	r0, r4
  401a3c:	4629      	mov	r1, r5
  401a3e:	f000 ff41 	bl	4028c4 <finite>
  401a42:	2800      	cmp	r0, #0
  401a44:	d0a3      	beq.n	40198e <pow+0x92>
  401a46:	2200      	movs	r2, #0
  401a48:	2300      	movs	r3, #0
  401a4a:	4620      	mov	r0, r4
  401a4c:	4629      	mov	r1, r5
  401a4e:	f001 fc83 	bl	403358 <__aeabi_dcmplt>
  401a52:	2800      	cmp	r0, #0
  401a54:	d09b      	beq.n	40198e <pow+0x92>
  401a56:	f999 3000 	ldrsb.w	r3, [r9]
  401a5a:	4a5f      	ldr	r2, [pc, #380]	; (401bd8 <pow+0x2dc>)
  401a5c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401a60:	2101      	movs	r1, #1
  401a62:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401a66:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401a6a:	9102      	str	r1, [sp, #8]
  401a6c:	9203      	str	r2, [sp, #12]
  401a6e:	2b00      	cmp	r3, #0
  401a70:	d0cb      	beq.n	401a0a <pow+0x10e>
  401a72:	495b      	ldr	r1, [pc, #364]	; (401be0 <pow+0x2e4>)
  401a74:	2000      	movs	r0, #0
  401a76:	2b02      	cmp	r3, #2
  401a78:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401a7c:	d1c9      	bne.n	401a12 <pow+0x116>
  401a7e:	f001 fec7 	bl	403810 <__errno>
  401a82:	2321      	movs	r3, #33	; 0x21
  401a84:	6003      	str	r3, [r0, #0]
  401a86:	e7c9      	b.n	401a1c <pow+0x120>
  401a88:	4620      	mov	r0, r4
  401a8a:	4629      	mov	r1, r5
  401a8c:	f001 fc5a 	bl	403344 <__aeabi_dcmpeq>
  401a90:	2800      	cmp	r0, #0
  401a92:	f43f af7c 	beq.w	40198e <pow+0x92>
  401a96:	4b51      	ldr	r3, [pc, #324]	; (401bdc <pow+0x2e0>)
  401a98:	494f      	ldr	r1, [pc, #316]	; (401bd8 <pow+0x2dc>)
  401a9a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  401a9e:	2001      	movs	r0, #1
  401aa0:	2200      	movs	r2, #0
  401aa2:	f1b8 0f02 	cmp.w	r8, #2
  401aa6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401aaa:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401aae:	9002      	str	r0, [sp, #8]
  401ab0:	9103      	str	r1, [sp, #12]
  401ab2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401ab6:	d1ac      	bne.n	401a12 <pow+0x116>
  401ab8:	e9cd 2300 	strd	r2, r3, [sp]
  401abc:	e767      	b.n	40198e <pow+0x92>
  401abe:	4630      	mov	r0, r6
  401ac0:	4639      	mov	r1, r7
  401ac2:	f000 feff 	bl	4028c4 <finite>
  401ac6:	2800      	cmp	r0, #0
  401ac8:	f43f af6e 	beq.w	4019a8 <pow+0xac>
  401acc:	4620      	mov	r0, r4
  401ace:	4629      	mov	r1, r5
  401ad0:	f000 fef8 	bl	4028c4 <finite>
  401ad4:	2800      	cmp	r0, #0
  401ad6:	f43f af67 	beq.w	4019a8 <pow+0xac>
  401ada:	e9dd 2300 	ldrd	r2, r3, [sp]
  401ade:	4610      	mov	r0, r2
  401ae0:	4619      	mov	r1, r3
  401ae2:	f001 fc61 	bl	4033a8 <__aeabi_dcmpun>
  401ae6:	2800      	cmp	r0, #0
  401ae8:	d158      	bne.n	401b9c <pow+0x2a0>
  401aea:	2303      	movs	r3, #3
  401aec:	f999 8000 	ldrsb.w	r8, [r9]
  401af0:	9302      	str	r3, [sp, #8]
  401af2:	4b39      	ldr	r3, [pc, #228]	; (401bd8 <pow+0x2dc>)
  401af4:	900a      	str	r0, [sp, #40]	; 0x28
  401af6:	9303      	str	r3, [sp, #12]
  401af8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401afc:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401b00:	2200      	movs	r2, #0
  401b02:	2300      	movs	r3, #0
  401b04:	4630      	mov	r0, r6
  401b06:	4639      	mov	r1, r7
  401b08:	f1b8 0f00 	cmp.w	r8, #0
  401b0c:	d126      	bne.n	401b5c <pow+0x260>
  401b0e:	4f35      	ldr	r7, [pc, #212]	; (401be4 <pow+0x2e8>)
  401b10:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
  401b14:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401b18:	f001 fc1e 	bl	403358 <__aeabi_dcmplt>
  401b1c:	2800      	cmp	r0, #0
  401b1e:	f43f af6b 	beq.w	4019f8 <pow+0xfc>
  401b22:	2200      	movs	r2, #0
  401b24:	4b30      	ldr	r3, [pc, #192]	; (401be8 <pow+0x2ec>)
  401b26:	4620      	mov	r0, r4
  401b28:	4629      	mov	r1, r5
  401b2a:	f001 f9a3 	bl	402e74 <__aeabi_dmul>
  401b2e:	4604      	mov	r4, r0
  401b30:	460d      	mov	r5, r1
  401b32:	f000 fed5 	bl	4028e0 <rint>
  401b36:	4602      	mov	r2, r0
  401b38:	460b      	mov	r3, r1
  401b3a:	4620      	mov	r0, r4
  401b3c:	4629      	mov	r1, r5
  401b3e:	f001 fc01 	bl	403344 <__aeabi_dcmpeq>
  401b42:	bb40      	cbnz	r0, 401b96 <pow+0x29a>
  401b44:	4b29      	ldr	r3, [pc, #164]	; (401bec <pow+0x2f0>)
  401b46:	f999 8000 	ldrsb.w	r8, [r9]
  401b4a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  401b4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401b52:	f1b8 0f02 	cmp.w	r8, #2
  401b56:	f47f af4f 	bne.w	4019f8 <pow+0xfc>
  401b5a:	e751      	b.n	401a00 <pow+0x104>
  401b5c:	4f24      	ldr	r7, [pc, #144]	; (401bf0 <pow+0x2f4>)
  401b5e:	2600      	movs	r6, #0
  401b60:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401b64:	f001 fbf8 	bl	403358 <__aeabi_dcmplt>
  401b68:	2800      	cmp	r0, #0
  401b6a:	d0f2      	beq.n	401b52 <pow+0x256>
  401b6c:	2200      	movs	r2, #0
  401b6e:	4b1e      	ldr	r3, [pc, #120]	; (401be8 <pow+0x2ec>)
  401b70:	4620      	mov	r0, r4
  401b72:	4629      	mov	r1, r5
  401b74:	f001 f97e 	bl	402e74 <__aeabi_dmul>
  401b78:	4604      	mov	r4, r0
  401b7a:	460d      	mov	r5, r1
  401b7c:	f000 feb0 	bl	4028e0 <rint>
  401b80:	4602      	mov	r2, r0
  401b82:	460b      	mov	r3, r1
  401b84:	4620      	mov	r0, r4
  401b86:	4629      	mov	r1, r5
  401b88:	f001 fbdc 	bl	403344 <__aeabi_dcmpeq>
  401b8c:	b918      	cbnz	r0, 401b96 <pow+0x29a>
  401b8e:	4b14      	ldr	r3, [pc, #80]	; (401be0 <pow+0x2e4>)
  401b90:	2200      	movs	r2, #0
  401b92:	e9cd 2308 	strd	r2, r3, [sp, #32]
  401b96:	f999 8000 	ldrsb.w	r8, [r9]
  401b9a:	e7da      	b.n	401b52 <pow+0x256>
  401b9c:	f999 9000 	ldrsb.w	r9, [r9]
  401ba0:	4b0d      	ldr	r3, [pc, #52]	; (401bd8 <pow+0x2dc>)
  401ba2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  401ba6:	2201      	movs	r2, #1
  401ba8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401bac:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401bb0:	9202      	str	r2, [sp, #8]
  401bb2:	9303      	str	r3, [sp, #12]
  401bb4:	f1b9 0f00 	cmp.w	r9, #0
  401bb8:	f43f af27 	beq.w	401a0a <pow+0x10e>
  401bbc:	2200      	movs	r2, #0
  401bbe:	2300      	movs	r3, #0
  401bc0:	4610      	mov	r0, r2
  401bc2:	4619      	mov	r1, r3
  401bc4:	f001 fa80 	bl	4030c8 <__aeabi_ddiv>
  401bc8:	f1b9 0f02 	cmp.w	r9, #2
  401bcc:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401bd0:	f43f af55 	beq.w	401a7e <pow+0x182>
  401bd4:	e71d      	b.n	401a12 <pow+0x116>
  401bd6:	bf00      	nop
  401bd8:	00404914 	.word	0x00404914
  401bdc:	3ff00000 	.word	0x3ff00000
  401be0:	fff00000 	.word	0xfff00000
  401be4:	47efffff 	.word	0x47efffff
  401be8:	3fe00000 	.word	0x3fe00000
  401bec:	c7efffff 	.word	0xc7efffff
  401bf0:	7ff00000 	.word	0x7ff00000
  401bf4:	20000012 	.word	0x20000012

00401bf8 <sqrt>:
  401bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bfc:	b08b      	sub	sp, #44	; 0x2c
  401bfe:	4604      	mov	r4, r0
  401c00:	460d      	mov	r5, r1
  401c02:	f000 fd9f 	bl	402744 <__ieee754_sqrt>
  401c06:	4b29      	ldr	r3, [pc, #164]	; (401cac <sqrt+0xb4>)
  401c08:	f993 a000 	ldrsb.w	sl, [r3]
  401c0c:	f1ba 3fff 	cmp.w	sl, #4294967295
  401c10:	4606      	mov	r6, r0
  401c12:	460f      	mov	r7, r1
  401c14:	d012      	beq.n	401c3c <sqrt+0x44>
  401c16:	4622      	mov	r2, r4
  401c18:	462b      	mov	r3, r5
  401c1a:	4620      	mov	r0, r4
  401c1c:	4629      	mov	r1, r5
  401c1e:	f001 fbc3 	bl	4033a8 <__aeabi_dcmpun>
  401c22:	4683      	mov	fp, r0
  401c24:	b950      	cbnz	r0, 401c3c <sqrt+0x44>
  401c26:	f04f 0800 	mov.w	r8, #0
  401c2a:	f04f 0900 	mov.w	r9, #0
  401c2e:	4642      	mov	r2, r8
  401c30:	464b      	mov	r3, r9
  401c32:	4620      	mov	r0, r4
  401c34:	4629      	mov	r1, r5
  401c36:	f001 fb8f 	bl	403358 <__aeabi_dcmplt>
  401c3a:	b920      	cbnz	r0, 401c46 <sqrt+0x4e>
  401c3c:	4630      	mov	r0, r6
  401c3e:	4639      	mov	r1, r7
  401c40:	b00b      	add	sp, #44	; 0x2c
  401c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c46:	4b1a      	ldr	r3, [pc, #104]	; (401cb0 <sqrt+0xb8>)
  401c48:	f8cd b020 	str.w	fp, [sp, #32]
  401c4c:	2201      	movs	r2, #1
  401c4e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401c52:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401c56:	e88d 000c 	stmia.w	sp, {r2, r3}
  401c5a:	f1ba 0f00 	cmp.w	sl, #0
  401c5e:	d017      	beq.n	401c90 <sqrt+0x98>
  401c60:	4642      	mov	r2, r8
  401c62:	464b      	mov	r3, r9
  401c64:	4640      	mov	r0, r8
  401c66:	4649      	mov	r1, r9
  401c68:	f001 fa2e 	bl	4030c8 <__aeabi_ddiv>
  401c6c:	f1ba 0f02 	cmp.w	sl, #2
  401c70:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401c74:	d10e      	bne.n	401c94 <sqrt+0x9c>
  401c76:	f001 fdcb 	bl	403810 <__errno>
  401c7a:	2321      	movs	r3, #33	; 0x21
  401c7c:	6003      	str	r3, [r0, #0]
  401c7e:	9b08      	ldr	r3, [sp, #32]
  401c80:	b973      	cbnz	r3, 401ca0 <sqrt+0xa8>
  401c82:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  401c86:	4630      	mov	r0, r6
  401c88:	4639      	mov	r1, r7
  401c8a:	b00b      	add	sp, #44	; 0x2c
  401c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c90:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401c94:	4668      	mov	r0, sp
  401c96:	f000 fe1b 	bl	4028d0 <matherr>
  401c9a:	2800      	cmp	r0, #0
  401c9c:	d1ef      	bne.n	401c7e <sqrt+0x86>
  401c9e:	e7ea      	b.n	401c76 <sqrt+0x7e>
  401ca0:	f001 fdb6 	bl	403810 <__errno>
  401ca4:	9b08      	ldr	r3, [sp, #32]
  401ca6:	6003      	str	r3, [r0, #0]
  401ca8:	e7eb      	b.n	401c82 <sqrt+0x8a>
  401caa:	bf00      	nop
  401cac:	20000012 	.word	0x20000012
  401cb0:	00404918 	.word	0x00404918
  401cb4:	00000000 	.word	0x00000000

00401cb8 <__ieee754_pow>:
  401cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401cbc:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  401cc0:	ea57 0402 	orrs.w	r4, r7, r2
  401cc4:	b093      	sub	sp, #76	; 0x4c
  401cc6:	d037      	beq.n	401d38 <__ieee754_pow+0x80>
  401cc8:	4c67      	ldr	r4, [pc, #412]	; (401e68 <__ieee754_pow+0x1b0>)
  401cca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  401cce:	42a6      	cmp	r6, r4
  401cd0:	4683      	mov	fp, r0
  401cd2:	460d      	mov	r5, r1
  401cd4:	dc29      	bgt.n	401d2a <__ieee754_pow+0x72>
  401cd6:	469a      	mov	sl, r3
  401cd8:	4696      	mov	lr, r2
  401cda:	d025      	beq.n	401d28 <__ieee754_pow+0x70>
  401cdc:	42a7      	cmp	r7, r4
  401cde:	dc24      	bgt.n	401d2a <__ieee754_pow+0x72>
  401ce0:	4c61      	ldr	r4, [pc, #388]	; (401e68 <__ieee754_pow+0x1b0>)
  401ce2:	42a7      	cmp	r7, r4
  401ce4:	d079      	beq.n	401dda <__ieee754_pow+0x122>
  401ce6:	2d00      	cmp	r5, #0
  401ce8:	4689      	mov	r9, r1
  401cea:	4680      	mov	r8, r0
  401cec:	e9cd 2300 	strd	r2, r3, [sp]
  401cf0:	db77      	blt.n	401de2 <__ieee754_pow+0x12a>
  401cf2:	2400      	movs	r4, #0
  401cf4:	f1be 0f00 	cmp.w	lr, #0
  401cf8:	d12c      	bne.n	401d54 <__ieee754_pow+0x9c>
  401cfa:	4b5b      	ldr	r3, [pc, #364]	; (401e68 <__ieee754_pow+0x1b0>)
  401cfc:	429f      	cmp	r7, r3
  401cfe:	f000 808b 	beq.w	401e18 <__ieee754_pow+0x160>
  401d02:	4b5a      	ldr	r3, [pc, #360]	; (401e6c <__ieee754_pow+0x1b4>)
  401d04:	429f      	cmp	r7, r3
  401d06:	d061      	beq.n	401dcc <__ieee754_pow+0x114>
  401d08:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
  401d0c:	f000 83ba 	beq.w	402484 <__ieee754_pow+0x7cc>
  401d10:	4b57      	ldr	r3, [pc, #348]	; (401e70 <__ieee754_pow+0x1b8>)
  401d12:	459a      	cmp	sl, r3
  401d14:	d11e      	bne.n	401d54 <__ieee754_pow+0x9c>
  401d16:	2d00      	cmp	r5, #0
  401d18:	db1c      	blt.n	401d54 <__ieee754_pow+0x9c>
  401d1a:	4640      	mov	r0, r8
  401d1c:	4649      	mov	r1, r9
  401d1e:	b013      	add	sp, #76	; 0x4c
  401d20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d24:	f000 bd0e 	b.w	402744 <__ieee754_sqrt>
  401d28:	b158      	cbz	r0, 401d42 <__ieee754_pow+0x8a>
  401d2a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  401d2e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  401d32:	ea56 030b 	orrs.w	r3, r6, fp
  401d36:	d106      	bne.n	401d46 <__ieee754_pow+0x8e>
  401d38:	494c      	ldr	r1, [pc, #304]	; (401e6c <__ieee754_pow+0x1b4>)
  401d3a:	2000      	movs	r0, #0
  401d3c:	b013      	add	sp, #76	; 0x4c
  401d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d42:	42b7      	cmp	r7, r6
  401d44:	ddcc      	ble.n	401ce0 <__ieee754_pow+0x28>
  401d46:	484b      	ldr	r0, [pc, #300]	; (401e74 <__ieee754_pow+0x1bc>)
  401d48:	b013      	add	sp, #76	; 0x4c
  401d4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d4e:	f000 bdc1 	b.w	4028d4 <nan>
  401d52:	2400      	movs	r4, #0
  401d54:	4640      	mov	r0, r8
  401d56:	4649      	mov	r1, r9
  401d58:	f000 fdb0 	bl	4028bc <fabs>
  401d5c:	f1bb 0f00 	cmp.w	fp, #0
  401d60:	d119      	bne.n	401d96 <__ieee754_pow+0xde>
  401d62:	b126      	cbz	r6, 401d6e <__ieee754_pow+0xb6>
  401d64:	4b41      	ldr	r3, [pc, #260]	; (401e6c <__ieee754_pow+0x1b4>)
  401d66:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
  401d6a:	429a      	cmp	r2, r3
  401d6c:	d113      	bne.n	401d96 <__ieee754_pow+0xde>
  401d6e:	f1ba 0f00 	cmp.w	sl, #0
  401d72:	f2c0 83bc 	blt.w	4024ee <__ieee754_pow+0x836>
  401d76:	2d00      	cmp	r5, #0
  401d78:	dae0      	bge.n	401d3c <__ieee754_pow+0x84>
  401d7a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  401d7e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  401d82:	ea56 0304 	orrs.w	r3, r6, r4
  401d86:	f000 848f 	beq.w	4026a8 <__ieee754_pow+0x9f0>
  401d8a:	2c01      	cmp	r4, #1
  401d8c:	d1d6      	bne.n	401d3c <__ieee754_pow+0x84>
  401d8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  401d92:	4619      	mov	r1, r3
  401d94:	e7d2      	b.n	401d3c <__ieee754_pow+0x84>
  401d96:	0fed      	lsrs	r5, r5, #31
  401d98:	3d01      	subs	r5, #1
  401d9a:	ea54 0305 	orrs.w	r3, r4, r5
  401d9e:	d04e      	beq.n	401e3e <__ieee754_pow+0x186>
  401da0:	4b35      	ldr	r3, [pc, #212]	; (401e78 <__ieee754_pow+0x1c0>)
  401da2:	429f      	cmp	r7, r3
  401da4:	dd6e      	ble.n	401e84 <__ieee754_pow+0x1cc>
  401da6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
  401daa:	429f      	cmp	r7, r3
  401dac:	f340 83e8 	ble.w	402580 <__ieee754_pow+0x8c8>
  401db0:	4b32      	ldr	r3, [pc, #200]	; (401e7c <__ieee754_pow+0x1c4>)
  401db2:	429e      	cmp	r6, r3
  401db4:	dd4e      	ble.n	401e54 <__ieee754_pow+0x19c>
  401db6:	f1ba 0f00 	cmp.w	sl, #0
  401dba:	dd4e      	ble.n	401e5a <__ieee754_pow+0x1a2>
  401dbc:	a328      	add	r3, pc, #160	; (adr r3, 401e60 <__ieee754_pow+0x1a8>)
  401dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  401dc2:	4610      	mov	r0, r2
  401dc4:	4619      	mov	r1, r3
  401dc6:	f001 f855 	bl	402e74 <__aeabi_dmul>
  401dca:	e7b7      	b.n	401d3c <__ieee754_pow+0x84>
  401dcc:	f1ba 0f00 	cmp.w	sl, #0
  401dd0:	f2c0 843c 	blt.w	40264c <__ieee754_pow+0x994>
  401dd4:	4640      	mov	r0, r8
  401dd6:	4649      	mov	r1, r9
  401dd8:	e7b0      	b.n	401d3c <__ieee754_pow+0x84>
  401dda:	f1be 0f00 	cmp.w	lr, #0
  401dde:	d082      	beq.n	401ce6 <__ieee754_pow+0x2e>
  401de0:	e7a3      	b.n	401d2a <__ieee754_pow+0x72>
  401de2:	4b27      	ldr	r3, [pc, #156]	; (401e80 <__ieee754_pow+0x1c8>)
  401de4:	429f      	cmp	r7, r3
  401de6:	dc28      	bgt.n	401e3a <__ieee754_pow+0x182>
  401de8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  401dec:	429f      	cmp	r7, r3
  401dee:	dd80      	ble.n	401cf2 <__ieee754_pow+0x3a>
  401df0:	153b      	asrs	r3, r7, #20
  401df2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  401df6:	2b14      	cmp	r3, #20
  401df8:	f340 843e 	ble.w	402678 <__ieee754_pow+0x9c0>
  401dfc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
  401e00:	fa2e f203 	lsr.w	r2, lr, r3
  401e04:	fa02 f303 	lsl.w	r3, r2, r3
  401e08:	459e      	cmp	lr, r3
  401e0a:	f47f af72 	bne.w	401cf2 <__ieee754_pow+0x3a>
  401e0e:	f002 0201 	and.w	r2, r2, #1
  401e12:	f1c2 0402 	rsb	r4, r2, #2
  401e16:	e76d      	b.n	401cf4 <__ieee754_pow+0x3c>
  401e18:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
  401e1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  401e20:	ea53 030b 	orrs.w	r3, r3, fp
  401e24:	d088      	beq.n	401d38 <__ieee754_pow+0x80>
  401e26:	4b15      	ldr	r3, [pc, #84]	; (401e7c <__ieee754_pow+0x1c4>)
  401e28:	429e      	cmp	r6, r3
  401e2a:	f340 8332 	ble.w	402492 <__ieee754_pow+0x7da>
  401e2e:	f1ba 0f00 	cmp.w	sl, #0
  401e32:	db12      	blt.n	401e5a <__ieee754_pow+0x1a2>
  401e34:	e9dd 0100 	ldrd	r0, r1, [sp]
  401e38:	e780      	b.n	401d3c <__ieee754_pow+0x84>
  401e3a:	2402      	movs	r4, #2
  401e3c:	e75a      	b.n	401cf4 <__ieee754_pow+0x3c>
  401e3e:	4642      	mov	r2, r8
  401e40:	464b      	mov	r3, r9
  401e42:	4640      	mov	r0, r8
  401e44:	4649      	mov	r1, r9
  401e46:	f000 fe61 	bl	402b0c <__aeabi_dsub>
  401e4a:	4602      	mov	r2, r0
  401e4c:	460b      	mov	r3, r1
  401e4e:	f001 f93b 	bl	4030c8 <__aeabi_ddiv>
  401e52:	e773      	b.n	401d3c <__ieee754_pow+0x84>
  401e54:	f1ba 0f00 	cmp.w	sl, #0
  401e58:	dbb0      	blt.n	401dbc <__ieee754_pow+0x104>
  401e5a:	2000      	movs	r0, #0
  401e5c:	2100      	movs	r1, #0
  401e5e:	e76d      	b.n	401d3c <__ieee754_pow+0x84>
  401e60:	8800759c 	.word	0x8800759c
  401e64:	7e37e43c 	.word	0x7e37e43c
  401e68:	7ff00000 	.word	0x7ff00000
  401e6c:	3ff00000 	.word	0x3ff00000
  401e70:	3fe00000 	.word	0x3fe00000
  401e74:	0040491c 	.word	0x0040491c
  401e78:	41e00000 	.word	0x41e00000
  401e7c:	3fefffff 	.word	0x3fefffff
  401e80:	433fffff 	.word	0x433fffff
  401e84:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
  401e88:	f04f 0200 	mov.w	r2, #0
  401e8c:	da05      	bge.n	401e9a <__ieee754_pow+0x1e2>
  401e8e:	4bd4      	ldr	r3, [pc, #848]	; (4021e0 <__ieee754_pow+0x528>)
  401e90:	f000 fff0 	bl	402e74 <__aeabi_dmul>
  401e94:	f06f 0234 	mvn.w	r2, #52	; 0x34
  401e98:	460e      	mov	r6, r1
  401e9a:	1533      	asrs	r3, r6, #20
  401e9c:	4fd1      	ldr	r7, [pc, #836]	; (4021e4 <__ieee754_pow+0x52c>)
  401e9e:	f3c6 0613 	ubfx	r6, r6, #0, #20
  401ea2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
  401ea6:	4413      	add	r3, r2
  401ea8:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
  401eac:	42be      	cmp	r6, r7
  401eae:	461a      	mov	r2, r3
  401eb0:	930d      	str	r3, [sp, #52]	; 0x34
  401eb2:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
  401eb6:	f340 8321 	ble.w	4024fc <__ieee754_pow+0x844>
  401eba:	4bcb      	ldr	r3, [pc, #812]	; (4021e8 <__ieee754_pow+0x530>)
  401ebc:	429e      	cmp	r6, r3
  401ebe:	f340 83fd 	ble.w	4026bc <__ieee754_pow+0xa04>
  401ec2:	4613      	mov	r3, r2
  401ec4:	3301      	adds	r3, #1
  401ec6:	930d      	str	r3, [sp, #52]	; 0x34
  401ec8:	4bc8      	ldr	r3, [pc, #800]	; (4021ec <__ieee754_pow+0x534>)
  401eca:	2200      	movs	r2, #0
  401ecc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  401ed0:	2700      	movs	r7, #0
  401ed2:	2600      	movs	r6, #0
  401ed4:	e9cd 6708 	strd	r6, r7, [sp, #32]
  401ed8:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  401edc:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
  401ee0:	2700      	movs	r7, #0
  401ee2:	4602      	mov	r2, r0
  401ee4:	4653      	mov	r3, sl
  401ee6:	4651      	mov	r1, sl
  401ee8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  401eec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401ef0:	f000 fe0c 	bl	402b0c <__aeabi_dsub>
  401ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401ef8:	4680      	mov	r8, r0
  401efa:	4689      	mov	r9, r1
  401efc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401f00:	f000 fe06 	bl	402b10 <__adddf3>
  401f04:	4602      	mov	r2, r0
  401f06:	460b      	mov	r3, r1
  401f08:	2000      	movs	r0, #0
  401f0a:	49b8      	ldr	r1, [pc, #736]	; (4021ec <__ieee754_pow+0x534>)
  401f0c:	f001 f8dc 	bl	4030c8 <__aeabi_ddiv>
  401f10:	460a      	mov	r2, r1
  401f12:	4601      	mov	r1, r0
  401f14:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  401f18:	4613      	mov	r3, r2
  401f1a:	4649      	mov	r1, r9
  401f1c:	4602      	mov	r2, r0
  401f1e:	4640      	mov	r0, r8
  401f20:	f000 ffa8 	bl	402e74 <__aeabi_dmul>
  401f24:	ea4f 036a 	mov.w	r3, sl, asr #1
  401f28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401f2c:	468c      	mov	ip, r1
  401f2e:	4683      	mov	fp, r0
  401f30:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
  401f34:	e9cd bc04 	strd	fp, ip, [sp, #16]
  401f38:	46da      	mov	sl, fp
  401f3a:	468b      	mov	fp, r1
  401f3c:	19d9      	adds	r1, r3, r7
  401f3e:	2300      	movs	r3, #0
  401f40:	e9cd ab02 	strd	sl, fp, [sp, #8]
  401f44:	9302      	str	r3, [sp, #8]
  401f46:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  401f4a:	2000      	movs	r0, #0
  401f4c:	4606      	mov	r6, r0
  401f4e:	460f      	mov	r7, r1
  401f50:	4602      	mov	r2, r0
  401f52:	460b      	mov	r3, r1
  401f54:	4650      	mov	r0, sl
  401f56:	4659      	mov	r1, fp
  401f58:	f000 ff8c 	bl	402e74 <__aeabi_dmul>
  401f5c:	4602      	mov	r2, r0
  401f5e:	460b      	mov	r3, r1
  401f60:	4640      	mov	r0, r8
  401f62:	4649      	mov	r1, r9
  401f64:	f000 fdd2 	bl	402b0c <__aeabi_dsub>
  401f68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401f6c:	4680      	mov	r8, r0
  401f6e:	4689      	mov	r9, r1
  401f70:	4630      	mov	r0, r6
  401f72:	4639      	mov	r1, r7
  401f74:	f000 fdca 	bl	402b0c <__aeabi_dsub>
  401f78:	4602      	mov	r2, r0
  401f7a:	460b      	mov	r3, r1
  401f7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401f80:	f000 fdc4 	bl	402b0c <__aeabi_dsub>
  401f84:	4652      	mov	r2, sl
  401f86:	465b      	mov	r3, fp
  401f88:	f000 ff74 	bl	402e74 <__aeabi_dmul>
  401f8c:	4602      	mov	r2, r0
  401f8e:	460b      	mov	r3, r1
  401f90:	4640      	mov	r0, r8
  401f92:	4649      	mov	r1, r9
  401f94:	f000 fdba 	bl	402b0c <__aeabi_dsub>
  401f98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  401f9c:	f000 ff6a 	bl	402e74 <__aeabi_dmul>
  401fa0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  401fa4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401fa8:	4632      	mov	r2, r6
  401faa:	463b      	mov	r3, r7
  401fac:	4630      	mov	r0, r6
  401fae:	4639      	mov	r1, r7
  401fb0:	f000 ff60 	bl	402e74 <__aeabi_dmul>
  401fb4:	a378      	add	r3, pc, #480	; (adr r3, 402198 <__ieee754_pow+0x4e0>)
  401fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
  401fba:	4606      	mov	r6, r0
  401fbc:	460f      	mov	r7, r1
  401fbe:	f000 ff59 	bl	402e74 <__aeabi_dmul>
  401fc2:	a377      	add	r3, pc, #476	; (adr r3, 4021a0 <__ieee754_pow+0x4e8>)
  401fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
  401fc8:	f000 fda2 	bl	402b10 <__adddf3>
  401fcc:	4632      	mov	r2, r6
  401fce:	463b      	mov	r3, r7
  401fd0:	f000 ff50 	bl	402e74 <__aeabi_dmul>
  401fd4:	a374      	add	r3, pc, #464	; (adr r3, 4021a8 <__ieee754_pow+0x4f0>)
  401fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
  401fda:	f000 fd99 	bl	402b10 <__adddf3>
  401fde:	4632      	mov	r2, r6
  401fe0:	463b      	mov	r3, r7
  401fe2:	f000 ff47 	bl	402e74 <__aeabi_dmul>
  401fe6:	a372      	add	r3, pc, #456	; (adr r3, 4021b0 <__ieee754_pow+0x4f8>)
  401fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401fec:	f000 fd90 	bl	402b10 <__adddf3>
  401ff0:	4632      	mov	r2, r6
  401ff2:	463b      	mov	r3, r7
  401ff4:	f000 ff3e 	bl	402e74 <__aeabi_dmul>
  401ff8:	a36f      	add	r3, pc, #444	; (adr r3, 4021b8 <__ieee754_pow+0x500>)
  401ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ffe:	f000 fd87 	bl	402b10 <__adddf3>
  402002:	4632      	mov	r2, r6
  402004:	463b      	mov	r3, r7
  402006:	f000 ff35 	bl	402e74 <__aeabi_dmul>
  40200a:	a36d      	add	r3, pc, #436	; (adr r3, 4021c0 <__ieee754_pow+0x508>)
  40200c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402010:	f000 fd7e 	bl	402b10 <__adddf3>
  402014:	4632      	mov	r2, r6
  402016:	4680      	mov	r8, r0
  402018:	4689      	mov	r9, r1
  40201a:	463b      	mov	r3, r7
  40201c:	4630      	mov	r0, r6
  40201e:	4639      	mov	r1, r7
  402020:	f000 ff28 	bl	402e74 <__aeabi_dmul>
  402024:	4602      	mov	r2, r0
  402026:	460b      	mov	r3, r1
  402028:	4640      	mov	r0, r8
  40202a:	4649      	mov	r1, r9
  40202c:	f000 ff22 	bl	402e74 <__aeabi_dmul>
  402030:	4652      	mov	r2, sl
  402032:	4606      	mov	r6, r0
  402034:	460f      	mov	r7, r1
  402036:	465b      	mov	r3, fp
  402038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40203c:	f000 fd68 	bl	402b10 <__adddf3>
  402040:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402044:	f000 ff16 	bl	402e74 <__aeabi_dmul>
  402048:	4632      	mov	r2, r6
  40204a:	463b      	mov	r3, r7
  40204c:	f000 fd60 	bl	402b10 <__adddf3>
  402050:	4652      	mov	r2, sl
  402052:	4680      	mov	r8, r0
  402054:	4689      	mov	r9, r1
  402056:	465b      	mov	r3, fp
  402058:	4650      	mov	r0, sl
  40205a:	4659      	mov	r1, fp
  40205c:	f000 ff0a 	bl	402e74 <__aeabi_dmul>
  402060:	2200      	movs	r2, #0
  402062:	4b63      	ldr	r3, [pc, #396]	; (4021f0 <__ieee754_pow+0x538>)
  402064:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  402068:	f000 fd52 	bl	402b10 <__adddf3>
  40206c:	4642      	mov	r2, r8
  40206e:	464b      	mov	r3, r9
  402070:	f000 fd4e 	bl	402b10 <__adddf3>
  402074:	9802      	ldr	r0, [sp, #8]
  402076:	460f      	mov	r7, r1
  402078:	4606      	mov	r6, r0
  40207a:	4632      	mov	r2, r6
  40207c:	463b      	mov	r3, r7
  40207e:	4650      	mov	r0, sl
  402080:	4659      	mov	r1, fp
  402082:	f000 fef7 	bl	402e74 <__aeabi_dmul>
  402086:	2200      	movs	r2, #0
  402088:	4682      	mov	sl, r0
  40208a:	468b      	mov	fp, r1
  40208c:	4b58      	ldr	r3, [pc, #352]	; (4021f0 <__ieee754_pow+0x538>)
  40208e:	4630      	mov	r0, r6
  402090:	4639      	mov	r1, r7
  402092:	f000 fd3b 	bl	402b0c <__aeabi_dsub>
  402096:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40209a:	f000 fd37 	bl	402b0c <__aeabi_dsub>
  40209e:	4602      	mov	r2, r0
  4020a0:	460b      	mov	r3, r1
  4020a2:	4640      	mov	r0, r8
  4020a4:	4649      	mov	r1, r9
  4020a6:	f000 fd31 	bl	402b0c <__aeabi_dsub>
  4020aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4020ae:	f000 fee1 	bl	402e74 <__aeabi_dmul>
  4020b2:	4632      	mov	r2, r6
  4020b4:	4680      	mov	r8, r0
  4020b6:	4689      	mov	r9, r1
  4020b8:	463b      	mov	r3, r7
  4020ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4020be:	f000 fed9 	bl	402e74 <__aeabi_dmul>
  4020c2:	4602      	mov	r2, r0
  4020c4:	460b      	mov	r3, r1
  4020c6:	4640      	mov	r0, r8
  4020c8:	4649      	mov	r1, r9
  4020ca:	f000 fd21 	bl	402b10 <__adddf3>
  4020ce:	4680      	mov	r8, r0
  4020d0:	4689      	mov	r9, r1
  4020d2:	4602      	mov	r2, r0
  4020d4:	460b      	mov	r3, r1
  4020d6:	4650      	mov	r0, sl
  4020d8:	4659      	mov	r1, fp
  4020da:	e9cd ab04 	strd	sl, fp, [sp, #16]
  4020de:	f000 fd17 	bl	402b10 <__adddf3>
  4020e2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  4020e6:	a338      	add	r3, pc, #224	; (adr r3, 4021c8 <__ieee754_pow+0x510>)
  4020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020ec:	4650      	mov	r0, sl
  4020ee:	460f      	mov	r7, r1
  4020f0:	f000 fec0 	bl	402e74 <__aeabi_dmul>
  4020f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4020f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4020fc:	4639      	mov	r1, r7
  4020fe:	4650      	mov	r0, sl
  402100:	f000 fd04 	bl	402b0c <__aeabi_dsub>
  402104:	4602      	mov	r2, r0
  402106:	460b      	mov	r3, r1
  402108:	4640      	mov	r0, r8
  40210a:	4649      	mov	r1, r9
  40210c:	f000 fcfe 	bl	402b0c <__aeabi_dsub>
  402110:	a32f      	add	r3, pc, #188	; (adr r3, 4021d0 <__ieee754_pow+0x518>)
  402112:	e9d3 2300 	ldrd	r2, r3, [r3]
  402116:	f000 fead 	bl	402e74 <__aeabi_dmul>
  40211a:	a32f      	add	r3, pc, #188	; (adr r3, 4021d8 <__ieee754_pow+0x520>)
  40211c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402120:	4680      	mov	r8, r0
  402122:	4689      	mov	r9, r1
  402124:	4650      	mov	r0, sl
  402126:	4639      	mov	r1, r7
  402128:	f000 fea4 	bl	402e74 <__aeabi_dmul>
  40212c:	4602      	mov	r2, r0
  40212e:	460b      	mov	r3, r1
  402130:	4640      	mov	r0, r8
  402132:	4649      	mov	r1, r9
  402134:	f000 fcec 	bl	402b10 <__adddf3>
  402138:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40213c:	f000 fce8 	bl	402b10 <__adddf3>
  402140:	4680      	mov	r8, r0
  402142:	980d      	ldr	r0, [sp, #52]	; 0x34
  402144:	4689      	mov	r9, r1
  402146:	f000 fe2f 	bl	402da8 <__aeabi_i2d>
  40214a:	4642      	mov	r2, r8
  40214c:	4606      	mov	r6, r0
  40214e:	460f      	mov	r7, r1
  402150:	464b      	mov	r3, r9
  402152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402156:	f000 fcdb 	bl	402b10 <__adddf3>
  40215a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40215e:	f000 fcd7 	bl	402b10 <__adddf3>
  402162:	4632      	mov	r2, r6
  402164:	463b      	mov	r3, r7
  402166:	f000 fcd3 	bl	402b10 <__adddf3>
  40216a:	4632      	mov	r2, r6
  40216c:	463b      	mov	r3, r7
  40216e:	4650      	mov	r0, sl
  402170:	468b      	mov	fp, r1
  402172:	f000 fccb 	bl	402b0c <__aeabi_dsub>
  402176:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40217a:	f000 fcc7 	bl	402b0c <__aeabi_dsub>
  40217e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402182:	f000 fcc3 	bl	402b0c <__aeabi_dsub>
  402186:	4602      	mov	r2, r0
  402188:	460b      	mov	r3, r1
  40218a:	4640      	mov	r0, r8
  40218c:	4649      	mov	r1, r9
  40218e:	f000 fcbd 	bl	402b0c <__aeabi_dsub>
  402192:	4680      	mov	r8, r0
  402194:	e02e      	b.n	4021f4 <__ieee754_pow+0x53c>
  402196:	bf00      	nop
  402198:	4a454eef 	.word	0x4a454eef
  40219c:	3fca7e28 	.word	0x3fca7e28
  4021a0:	93c9db65 	.word	0x93c9db65
  4021a4:	3fcd864a 	.word	0x3fcd864a
  4021a8:	a91d4101 	.word	0xa91d4101
  4021ac:	3fd17460 	.word	0x3fd17460
  4021b0:	518f264d 	.word	0x518f264d
  4021b4:	3fd55555 	.word	0x3fd55555
  4021b8:	db6fabff 	.word	0xdb6fabff
  4021bc:	3fdb6db6 	.word	0x3fdb6db6
  4021c0:	33333303 	.word	0x33333303
  4021c4:	3fe33333 	.word	0x3fe33333
  4021c8:	e0000000 	.word	0xe0000000
  4021cc:	3feec709 	.word	0x3feec709
  4021d0:	dc3a03fd 	.word	0xdc3a03fd
  4021d4:	3feec709 	.word	0x3feec709
  4021d8:	145b01f5 	.word	0x145b01f5
  4021dc:	be3e2fe0 	.word	0xbe3e2fe0
  4021e0:	43400000 	.word	0x43400000
  4021e4:	0003988e 	.word	0x0003988e
  4021e8:	000bb679 	.word	0x000bb679
  4021ec:	3ff00000 	.word	0x3ff00000
  4021f0:	40080000 	.word	0x40080000
  4021f4:	4689      	mov	r9, r1
  4021f6:	3c01      	subs	r4, #1
  4021f8:	ea54 0305 	orrs.w	r3, r4, r5
  4021fc:	e9dd 0100 	ldrd	r0, r1, [sp]
  402200:	bf14      	ite	ne
  402202:	4cd9      	ldrne	r4, [pc, #868]	; (402568 <__ieee754_pow+0x8b0>)
  402204:	4cd9      	ldreq	r4, [pc, #868]	; (40256c <__ieee754_pow+0x8b4>)
  402206:	2300      	movs	r3, #0
  402208:	e9cd 3404 	strd	r3, r4, [sp, #16]
  40220c:	4603      	mov	r3, r0
  40220e:	460c      	mov	r4, r1
  402210:	e9cd 3402 	strd	r3, r4, [sp, #8]
  402214:	2300      	movs	r3, #0
  402216:	9302      	str	r3, [sp, #8]
  402218:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  40221c:	4622      	mov	r2, r4
  40221e:	462b      	mov	r3, r5
  402220:	f000 fc74 	bl	402b0c <__aeabi_dsub>
  402224:	4652      	mov	r2, sl
  402226:	465b      	mov	r3, fp
  402228:	f000 fe24 	bl	402e74 <__aeabi_dmul>
  40222c:	e9dd 2300 	ldrd	r2, r3, [sp]
  402230:	4606      	mov	r6, r0
  402232:	460f      	mov	r7, r1
  402234:	4640      	mov	r0, r8
  402236:	4649      	mov	r1, r9
  402238:	f000 fe1c 	bl	402e74 <__aeabi_dmul>
  40223c:	4602      	mov	r2, r0
  40223e:	460b      	mov	r3, r1
  402240:	4630      	mov	r0, r6
  402242:	4639      	mov	r1, r7
  402244:	f000 fc64 	bl	402b10 <__adddf3>
  402248:	4622      	mov	r2, r4
  40224a:	4680      	mov	r8, r0
  40224c:	4689      	mov	r9, r1
  40224e:	462b      	mov	r3, r5
  402250:	4650      	mov	r0, sl
  402252:	4659      	mov	r1, fp
  402254:	e9cd 8900 	strd	r8, r9, [sp]
  402258:	f000 fe0c 	bl	402e74 <__aeabi_dmul>
  40225c:	460b      	mov	r3, r1
  40225e:	4602      	mov	r2, r0
  402260:	4606      	mov	r6, r0
  402262:	460f      	mov	r7, r1
  402264:	4640      	mov	r0, r8
  402266:	4649      	mov	r1, r9
  402268:	f000 fc52 	bl	402b10 <__adddf3>
  40226c:	4bc0      	ldr	r3, [pc, #768]	; (402570 <__ieee754_pow+0x8b8>)
  40226e:	4299      	cmp	r1, r3
  402270:	4604      	mov	r4, r0
  402272:	460d      	mov	r5, r1
  402274:	468a      	mov	sl, r1
  402276:	f340 8116 	ble.w	4024a6 <__ieee754_pow+0x7ee>
  40227a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
  40227e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
  402282:	4303      	orrs	r3, r0
  402284:	f040 81ea 	bne.w	40265c <__ieee754_pow+0x9a4>
  402288:	a3a3      	add	r3, pc, #652	; (adr r3, 402518 <__ieee754_pow+0x860>)
  40228a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40228e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402292:	f000 fc3d 	bl	402b10 <__adddf3>
  402296:	4632      	mov	r2, r6
  402298:	4680      	mov	r8, r0
  40229a:	4689      	mov	r9, r1
  40229c:	463b      	mov	r3, r7
  40229e:	4620      	mov	r0, r4
  4022a0:	4629      	mov	r1, r5
  4022a2:	f000 fc33 	bl	402b0c <__aeabi_dsub>
  4022a6:	4602      	mov	r2, r0
  4022a8:	460b      	mov	r3, r1
  4022aa:	4640      	mov	r0, r8
  4022ac:	4649      	mov	r1, r9
  4022ae:	f001 f871 	bl	403394 <__aeabi_dcmpgt>
  4022b2:	2800      	cmp	r0, #0
  4022b4:	f040 81d2 	bne.w	40265c <__ieee754_pow+0x9a4>
  4022b8:	46a8      	mov	r8, r5
  4022ba:	ea4f 5328 	mov.w	r3, r8, asr #20
  4022be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4022c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
  4022c6:	fa42 f303 	asr.w	r3, r2, r3
  4022ca:	4453      	add	r3, sl
  4022cc:	f3c3 520a 	ubfx	r2, r3, #20, #11
  4022d0:	4da8      	ldr	r5, [pc, #672]	; (402574 <__ieee754_pow+0x8bc>)
  4022d2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
  4022d6:	4115      	asrs	r5, r2
  4022d8:	f3c3 0413 	ubfx	r4, r3, #0, #20
  4022dc:	ea23 0105 	bic.w	r1, r3, r5
  4022e0:	2000      	movs	r0, #0
  4022e2:	f1c2 0b14 	rsb	fp, r2, #20
  4022e6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4022ea:	f1ba 0f00 	cmp.w	sl, #0
  4022ee:	4602      	mov	r2, r0
  4022f0:	460b      	mov	r3, r1
  4022f2:	fa44 fb0b 	asr.w	fp, r4, fp
  4022f6:	4630      	mov	r0, r6
  4022f8:	4639      	mov	r1, r7
  4022fa:	bfb8      	it	lt
  4022fc:	f1cb 0b00 	rsblt	fp, fp, #0
  402300:	f000 fc04 	bl	402b0c <__aeabi_dsub>
  402304:	4602      	mov	r2, r0
  402306:	460b      	mov	r3, r1
  402308:	4606      	mov	r6, r0
  40230a:	460f      	mov	r7, r1
  40230c:	e9dd 0100 	ldrd	r0, r1, [sp]
  402310:	f000 fbfe 	bl	402b10 <__adddf3>
  402314:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
  402318:	460d      	mov	r5, r1
  40231a:	2400      	movs	r4, #0
  40231c:	a380      	add	r3, pc, #512	; (adr r3, 402520 <__ieee754_pow+0x868>)
  40231e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402322:	4620      	mov	r0, r4
  402324:	4629      	mov	r1, r5
  402326:	f000 fda5 	bl	402e74 <__aeabi_dmul>
  40232a:	4632      	mov	r2, r6
  40232c:	4680      	mov	r8, r0
  40232e:	4689      	mov	r9, r1
  402330:	463b      	mov	r3, r7
  402332:	4620      	mov	r0, r4
  402334:	4629      	mov	r1, r5
  402336:	f000 fbe9 	bl	402b0c <__aeabi_dsub>
  40233a:	4602      	mov	r2, r0
  40233c:	460b      	mov	r3, r1
  40233e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402342:	f000 fbe3 	bl	402b0c <__aeabi_dsub>
  402346:	a378      	add	r3, pc, #480	; (adr r3, 402528 <__ieee754_pow+0x870>)
  402348:	e9d3 2300 	ldrd	r2, r3, [r3]
  40234c:	f000 fd92 	bl	402e74 <__aeabi_dmul>
  402350:	a377      	add	r3, pc, #476	; (adr r3, 402530 <__ieee754_pow+0x878>)
  402352:	e9d3 2300 	ldrd	r2, r3, [r3]
  402356:	4606      	mov	r6, r0
  402358:	460f      	mov	r7, r1
  40235a:	4620      	mov	r0, r4
  40235c:	4629      	mov	r1, r5
  40235e:	f000 fd89 	bl	402e74 <__aeabi_dmul>
  402362:	4602      	mov	r2, r0
  402364:	460b      	mov	r3, r1
  402366:	4630      	mov	r0, r6
  402368:	4639      	mov	r1, r7
  40236a:	f000 fbd1 	bl	402b10 <__adddf3>
  40236e:	4606      	mov	r6, r0
  402370:	460f      	mov	r7, r1
  402372:	4602      	mov	r2, r0
  402374:	460b      	mov	r3, r1
  402376:	4640      	mov	r0, r8
  402378:	4649      	mov	r1, r9
  40237a:	f000 fbc9 	bl	402b10 <__adddf3>
  40237e:	4642      	mov	r2, r8
  402380:	464b      	mov	r3, r9
  402382:	4604      	mov	r4, r0
  402384:	460d      	mov	r5, r1
  402386:	f000 fbc1 	bl	402b0c <__aeabi_dsub>
  40238a:	4602      	mov	r2, r0
  40238c:	460b      	mov	r3, r1
  40238e:	4630      	mov	r0, r6
  402390:	4639      	mov	r1, r7
  402392:	f000 fbbb 	bl	402b0c <__aeabi_dsub>
  402396:	4622      	mov	r2, r4
  402398:	4680      	mov	r8, r0
  40239a:	4689      	mov	r9, r1
  40239c:	462b      	mov	r3, r5
  40239e:	4620      	mov	r0, r4
  4023a0:	4629      	mov	r1, r5
  4023a2:	f000 fd67 	bl	402e74 <__aeabi_dmul>
  4023a6:	a364      	add	r3, pc, #400	; (adr r3, 402538 <__ieee754_pow+0x880>)
  4023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023ac:	4606      	mov	r6, r0
  4023ae:	460f      	mov	r7, r1
  4023b0:	f000 fd60 	bl	402e74 <__aeabi_dmul>
  4023b4:	a362      	add	r3, pc, #392	; (adr r3, 402540 <__ieee754_pow+0x888>)
  4023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023ba:	f000 fba7 	bl	402b0c <__aeabi_dsub>
  4023be:	4632      	mov	r2, r6
  4023c0:	463b      	mov	r3, r7
  4023c2:	f000 fd57 	bl	402e74 <__aeabi_dmul>
  4023c6:	a360      	add	r3, pc, #384	; (adr r3, 402548 <__ieee754_pow+0x890>)
  4023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023cc:	f000 fba0 	bl	402b10 <__adddf3>
  4023d0:	4632      	mov	r2, r6
  4023d2:	463b      	mov	r3, r7
  4023d4:	f000 fd4e 	bl	402e74 <__aeabi_dmul>
  4023d8:	a35d      	add	r3, pc, #372	; (adr r3, 402550 <__ieee754_pow+0x898>)
  4023da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023de:	f000 fb95 	bl	402b0c <__aeabi_dsub>
  4023e2:	4632      	mov	r2, r6
  4023e4:	463b      	mov	r3, r7
  4023e6:	f000 fd45 	bl	402e74 <__aeabi_dmul>
  4023ea:	a35b      	add	r3, pc, #364	; (adr r3, 402558 <__ieee754_pow+0x8a0>)
  4023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023f0:	f000 fb8e 	bl	402b10 <__adddf3>
  4023f4:	4632      	mov	r2, r6
  4023f6:	463b      	mov	r3, r7
  4023f8:	f000 fd3c 	bl	402e74 <__aeabi_dmul>
  4023fc:	4602      	mov	r2, r0
  4023fe:	460b      	mov	r3, r1
  402400:	4620      	mov	r0, r4
  402402:	4629      	mov	r1, r5
  402404:	f000 fb82 	bl	402b0c <__aeabi_dsub>
  402408:	4606      	mov	r6, r0
  40240a:	460f      	mov	r7, r1
  40240c:	4602      	mov	r2, r0
  40240e:	460b      	mov	r3, r1
  402410:	4620      	mov	r0, r4
  402412:	4629      	mov	r1, r5
  402414:	f000 fd2e 	bl	402e74 <__aeabi_dmul>
  402418:	2200      	movs	r2, #0
  40241a:	e9cd 0100 	strd	r0, r1, [sp]
  40241e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402422:	4630      	mov	r0, r6
  402424:	4639      	mov	r1, r7
  402426:	f000 fb71 	bl	402b0c <__aeabi_dsub>
  40242a:	4602      	mov	r2, r0
  40242c:	460b      	mov	r3, r1
  40242e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402432:	f000 fe49 	bl	4030c8 <__aeabi_ddiv>
  402436:	4642      	mov	r2, r8
  402438:	4606      	mov	r6, r0
  40243a:	460f      	mov	r7, r1
  40243c:	464b      	mov	r3, r9
  40243e:	4620      	mov	r0, r4
  402440:	4629      	mov	r1, r5
  402442:	f000 fd17 	bl	402e74 <__aeabi_dmul>
  402446:	4642      	mov	r2, r8
  402448:	464b      	mov	r3, r9
  40244a:	f000 fb61 	bl	402b10 <__adddf3>
  40244e:	4602      	mov	r2, r0
  402450:	460b      	mov	r3, r1
  402452:	4630      	mov	r0, r6
  402454:	4639      	mov	r1, r7
  402456:	f000 fb59 	bl	402b0c <__aeabi_dsub>
  40245a:	4622      	mov	r2, r4
  40245c:	462b      	mov	r3, r5
  40245e:	f000 fb55 	bl	402b0c <__aeabi_dsub>
  402462:	4602      	mov	r2, r0
  402464:	460b      	mov	r3, r1
  402466:	2000      	movs	r0, #0
  402468:	493f      	ldr	r1, [pc, #252]	; (402568 <__ieee754_pow+0x8b0>)
  40246a:	f000 fb4f 	bl	402b0c <__aeabi_dsub>
  40246e:	448a      	add	sl, r1
  402470:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
  402474:	f2c0 8133 	blt.w	4026de <__ieee754_pow+0xa26>
  402478:	4651      	mov	r1, sl
  40247a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40247e:	f000 fcf9 	bl	402e74 <__aeabi_dmul>
  402482:	e45b      	b.n	401d3c <__ieee754_pow+0x84>
  402484:	4642      	mov	r2, r8
  402486:	4640      	mov	r0, r8
  402488:	464b      	mov	r3, r9
  40248a:	4649      	mov	r1, r9
  40248c:	f000 fcf2 	bl	402e74 <__aeabi_dmul>
  402490:	e454      	b.n	401d3c <__ieee754_pow+0x84>
  402492:	f1ba 0f00 	cmp.w	sl, #0
  402496:	f6bf ace0 	bge.w	401e5a <__ieee754_pow+0x1a2>
  40249a:	e9dd 3400 	ldrd	r3, r4, [sp]
  40249e:	4618      	mov	r0, r3
  4024a0:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  4024a4:	e44a      	b.n	401d3c <__ieee754_pow+0x84>
  4024a6:	4b34      	ldr	r3, [pc, #208]	; (402578 <__ieee754_pow+0x8c0>)
  4024a8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  4024ac:	4598      	cmp	r8, r3
  4024ae:	f340 80f2 	ble.w	402696 <__ieee754_pow+0x9de>
  4024b2:	4b32      	ldr	r3, [pc, #200]	; (40257c <__ieee754_pow+0x8c4>)
  4024b4:	440b      	add	r3, r1
  4024b6:	4303      	orrs	r3, r0
  4024b8:	d10c      	bne.n	4024d4 <__ieee754_pow+0x81c>
  4024ba:	4632      	mov	r2, r6
  4024bc:	463b      	mov	r3, r7
  4024be:	f000 fb25 	bl	402b0c <__aeabi_dsub>
  4024c2:	4602      	mov	r2, r0
  4024c4:	460b      	mov	r3, r1
  4024c6:	e9dd 0100 	ldrd	r0, r1, [sp]
  4024ca:	f000 ff4f 	bl	40336c <__aeabi_dcmple>
  4024ce:	2800      	cmp	r0, #0
  4024d0:	f43f aef3 	beq.w	4022ba <__ieee754_pow+0x602>
  4024d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4024d8:	a321      	add	r3, pc, #132	; (adr r3, 402560 <__ieee754_pow+0x8a8>)
  4024da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024de:	f000 fcc9 	bl	402e74 <__aeabi_dmul>
  4024e2:	a31f      	add	r3, pc, #124	; (adr r3, 402560 <__ieee754_pow+0x8a8>)
  4024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024e8:	f000 fcc4 	bl	402e74 <__aeabi_dmul>
  4024ec:	e426      	b.n	401d3c <__ieee754_pow+0x84>
  4024ee:	4602      	mov	r2, r0
  4024f0:	460b      	mov	r3, r1
  4024f2:	2000      	movs	r0, #0
  4024f4:	491c      	ldr	r1, [pc, #112]	; (402568 <__ieee754_pow+0x8b0>)
  4024f6:	f000 fde7 	bl	4030c8 <__aeabi_ddiv>
  4024fa:	e43c      	b.n	401d76 <__ieee754_pow+0xbe>
  4024fc:	2200      	movs	r2, #0
  4024fe:	2300      	movs	r3, #0
  402500:	e9cd 2308 	strd	r2, r3, [sp, #32]
  402504:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402508:	4b17      	ldr	r3, [pc, #92]	; (402568 <__ieee754_pow+0x8b0>)
  40250a:	2200      	movs	r2, #0
  40250c:	2700      	movs	r7, #0
  40250e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  402512:	e4e6      	b.n	401ee2 <__ieee754_pow+0x22a>
  402514:	f3af 8000 	nop.w
  402518:	652b82fe 	.word	0x652b82fe
  40251c:	3c971547 	.word	0x3c971547
  402520:	00000000 	.word	0x00000000
  402524:	3fe62e43 	.word	0x3fe62e43
  402528:	fefa39ef 	.word	0xfefa39ef
  40252c:	3fe62e42 	.word	0x3fe62e42
  402530:	0ca86c39 	.word	0x0ca86c39
  402534:	be205c61 	.word	0xbe205c61
  402538:	72bea4d0 	.word	0x72bea4d0
  40253c:	3e663769 	.word	0x3e663769
  402540:	c5d26bf1 	.word	0xc5d26bf1
  402544:	3ebbbd41 	.word	0x3ebbbd41
  402548:	af25de2c 	.word	0xaf25de2c
  40254c:	3f11566a 	.word	0x3f11566a
  402550:	16bebd93 	.word	0x16bebd93
  402554:	3f66c16c 	.word	0x3f66c16c
  402558:	5555553e 	.word	0x5555553e
  40255c:	3fc55555 	.word	0x3fc55555
  402560:	c2f8f359 	.word	0xc2f8f359
  402564:	01a56e1f 	.word	0x01a56e1f
  402568:	3ff00000 	.word	0x3ff00000
  40256c:	bff00000 	.word	0xbff00000
  402570:	408fffff 	.word	0x408fffff
  402574:	000fffff 	.word	0x000fffff
  402578:	4090cbff 	.word	0x4090cbff
  40257c:	3f6f3400 	.word	0x3f6f3400
  402580:	4b6b      	ldr	r3, [pc, #428]	; (402730 <__ieee754_pow+0xa78>)
  402582:	429e      	cmp	r6, r3
  402584:	f77f ac66 	ble.w	401e54 <__ieee754_pow+0x19c>
  402588:	4b6a      	ldr	r3, [pc, #424]	; (402734 <__ieee754_pow+0xa7c>)
  40258a:	429e      	cmp	r6, r3
  40258c:	f73f ac13 	bgt.w	401db6 <__ieee754_pow+0xfe>
  402590:	2200      	movs	r2, #0
  402592:	4b68      	ldr	r3, [pc, #416]	; (402734 <__ieee754_pow+0xa7c>)
  402594:	f000 faba 	bl	402b0c <__aeabi_dsub>
  402598:	a357      	add	r3, pc, #348	; (adr r3, 4026f8 <__ieee754_pow+0xa40>)
  40259a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40259e:	4606      	mov	r6, r0
  4025a0:	460f      	mov	r7, r1
  4025a2:	f000 fc67 	bl	402e74 <__aeabi_dmul>
  4025a6:	a356      	add	r3, pc, #344	; (adr r3, 402700 <__ieee754_pow+0xa48>)
  4025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025ac:	4680      	mov	r8, r0
  4025ae:	4689      	mov	r9, r1
  4025b0:	4630      	mov	r0, r6
  4025b2:	4639      	mov	r1, r7
  4025b4:	f000 fc5e 	bl	402e74 <__aeabi_dmul>
  4025b8:	2200      	movs	r2, #0
  4025ba:	4682      	mov	sl, r0
  4025bc:	468b      	mov	fp, r1
  4025be:	4b5e      	ldr	r3, [pc, #376]	; (402738 <__ieee754_pow+0xa80>)
  4025c0:	4630      	mov	r0, r6
  4025c2:	4639      	mov	r1, r7
  4025c4:	f000 fc56 	bl	402e74 <__aeabi_dmul>
  4025c8:	4602      	mov	r2, r0
  4025ca:	460b      	mov	r3, r1
  4025cc:	a14e      	add	r1, pc, #312	; (adr r1, 402708 <__ieee754_pow+0xa50>)
  4025ce:	e9d1 0100 	ldrd	r0, r1, [r1]
  4025d2:	f000 fa9b 	bl	402b0c <__aeabi_dsub>
  4025d6:	4632      	mov	r2, r6
  4025d8:	463b      	mov	r3, r7
  4025da:	f000 fc4b 	bl	402e74 <__aeabi_dmul>
  4025de:	4602      	mov	r2, r0
  4025e0:	460b      	mov	r3, r1
  4025e2:	2000      	movs	r0, #0
  4025e4:	4955      	ldr	r1, [pc, #340]	; (40273c <__ieee754_pow+0xa84>)
  4025e6:	f000 fa91 	bl	402b0c <__aeabi_dsub>
  4025ea:	4632      	mov	r2, r6
  4025ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4025f0:	463b      	mov	r3, r7
  4025f2:	4630      	mov	r0, r6
  4025f4:	4639      	mov	r1, r7
  4025f6:	f000 fc3d 	bl	402e74 <__aeabi_dmul>
  4025fa:	4602      	mov	r2, r0
  4025fc:	460b      	mov	r3, r1
  4025fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402602:	f000 fc37 	bl	402e74 <__aeabi_dmul>
  402606:	a342      	add	r3, pc, #264	; (adr r3, 402710 <__ieee754_pow+0xa58>)
  402608:	e9d3 2300 	ldrd	r2, r3, [r3]
  40260c:	f000 fc32 	bl	402e74 <__aeabi_dmul>
  402610:	4602      	mov	r2, r0
  402612:	460b      	mov	r3, r1
  402614:	4650      	mov	r0, sl
  402616:	4659      	mov	r1, fp
  402618:	f000 fa78 	bl	402b0c <__aeabi_dsub>
  40261c:	4602      	mov	r2, r0
  40261e:	460b      	mov	r3, r1
  402620:	4606      	mov	r6, r0
  402622:	460f      	mov	r7, r1
  402624:	4640      	mov	r0, r8
  402626:	4649      	mov	r1, r9
  402628:	f000 fa72 	bl	402b10 <__adddf3>
  40262c:	4642      	mov	r2, r8
  40262e:	464b      	mov	r3, r9
  402630:	2000      	movs	r0, #0
  402632:	4682      	mov	sl, r0
  402634:	468b      	mov	fp, r1
  402636:	f000 fa69 	bl	402b0c <__aeabi_dsub>
  40263a:	4602      	mov	r2, r0
  40263c:	460b      	mov	r3, r1
  40263e:	4630      	mov	r0, r6
  402640:	4639      	mov	r1, r7
  402642:	f000 fa63 	bl	402b0c <__aeabi_dsub>
  402646:	4680      	mov	r8, r0
  402648:	4689      	mov	r9, r1
  40264a:	e5d4      	b.n	4021f6 <__ieee754_pow+0x53e>
  40264c:	4642      	mov	r2, r8
  40264e:	464b      	mov	r3, r9
  402650:	2000      	movs	r0, #0
  402652:	4938      	ldr	r1, [pc, #224]	; (402734 <__ieee754_pow+0xa7c>)
  402654:	f000 fd38 	bl	4030c8 <__aeabi_ddiv>
  402658:	f7ff bb70 	b.w	401d3c <__ieee754_pow+0x84>
  40265c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402660:	a32d      	add	r3, pc, #180	; (adr r3, 402718 <__ieee754_pow+0xa60>)
  402662:	e9d3 2300 	ldrd	r2, r3, [r3]
  402666:	f000 fc05 	bl	402e74 <__aeabi_dmul>
  40266a:	a32b      	add	r3, pc, #172	; (adr r3, 402718 <__ieee754_pow+0xa60>)
  40266c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402670:	f000 fc00 	bl	402e74 <__aeabi_dmul>
  402674:	f7ff bb62 	b.w	401d3c <__ieee754_pow+0x84>
  402678:	f1be 0f00 	cmp.w	lr, #0
  40267c:	f47f ab69 	bne.w	401d52 <__ieee754_pow+0x9a>
  402680:	f1c3 0314 	rsb	r3, r3, #20
  402684:	fa47 f203 	asr.w	r2, r7, r3
  402688:	fa02 f303 	lsl.w	r3, r2, r3
  40268c:	429f      	cmp	r7, r3
  40268e:	d02a      	beq.n	4026e6 <__ieee754_pow+0xa2e>
  402690:	4674      	mov	r4, lr
  402692:	f7ff bb36 	b.w	401d02 <__ieee754_pow+0x4a>
  402696:	4b29      	ldr	r3, [pc, #164]	; (40273c <__ieee754_pow+0xa84>)
  402698:	4598      	cmp	r8, r3
  40269a:	f73f ae0e 	bgt.w	4022ba <__ieee754_pow+0x602>
  40269e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4026a2:	4692      	mov	sl, r2
  4026a4:	4693      	mov	fp, r2
  4026a6:	e638      	b.n	40231a <__ieee754_pow+0x662>
  4026a8:	4602      	mov	r2, r0
  4026aa:	460b      	mov	r3, r1
  4026ac:	f000 fa2e 	bl	402b0c <__aeabi_dsub>
  4026b0:	4602      	mov	r2, r0
  4026b2:	460b      	mov	r3, r1
  4026b4:	f000 fd08 	bl	4030c8 <__aeabi_ddiv>
  4026b8:	f7ff bb40 	b.w	401d3c <__ieee754_pow+0x84>
  4026bc:	a318      	add	r3, pc, #96	; (adr r3, 402720 <__ieee754_pow+0xa68>)
  4026be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4026c6:	a318      	add	r3, pc, #96	; (adr r3, 402728 <__ieee754_pow+0xa70>)
  4026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4026d0:	4b1b      	ldr	r3, [pc, #108]	; (402740 <__ieee754_pow+0xa88>)
  4026d2:	2200      	movs	r2, #0
  4026d4:	f44f 2780 	mov.w	r7, #262144	; 0x40000
  4026d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  4026dc:	e401      	b.n	401ee2 <__ieee754_pow+0x22a>
  4026de:	465a      	mov	r2, fp
  4026e0:	f000 f98a 	bl	4029f8 <scalbn>
  4026e4:	e6c9      	b.n	40247a <__ieee754_pow+0x7c2>
  4026e6:	f002 0201 	and.w	r2, r2, #1
  4026ea:	f1c2 0402 	rsb	r4, r2, #2
  4026ee:	f7ff bb08 	b.w	401d02 <__ieee754_pow+0x4a>
  4026f2:	bf00      	nop
  4026f4:	f3af 8000 	nop.w
  4026f8:	60000000 	.word	0x60000000
  4026fc:	3ff71547 	.word	0x3ff71547
  402700:	f85ddf44 	.word	0xf85ddf44
  402704:	3e54ae0b 	.word	0x3e54ae0b
  402708:	55555555 	.word	0x55555555
  40270c:	3fd55555 	.word	0x3fd55555
  402710:	652b82fe 	.word	0x652b82fe
  402714:	3ff71547 	.word	0x3ff71547
  402718:	8800759c 	.word	0x8800759c
  40271c:	7e37e43c 	.word	0x7e37e43c
  402720:	40000000 	.word	0x40000000
  402724:	3fe2b803 	.word	0x3fe2b803
  402728:	43cfd006 	.word	0x43cfd006
  40272c:	3e4cfdeb 	.word	0x3e4cfdeb
  402730:	3feffffe 	.word	0x3feffffe
  402734:	3ff00000 	.word	0x3ff00000
  402738:	3fd00000 	.word	0x3fd00000
  40273c:	3fe00000 	.word	0x3fe00000
  402740:	3ff80000 	.word	0x3ff80000

00402744 <__ieee754_sqrt>:
  402744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402748:	4f5b      	ldr	r7, [pc, #364]	; (4028b8 <__ieee754_sqrt+0x174>)
  40274a:	438f      	bics	r7, r1
  40274c:	4605      	mov	r5, r0
  40274e:	460c      	mov	r4, r1
  402750:	f000 8092 	beq.w	402878 <__ieee754_sqrt+0x134>
  402754:	2900      	cmp	r1, #0
  402756:	460b      	mov	r3, r1
  402758:	4602      	mov	r2, r0
  40275a:	dd6f      	ble.n	40283c <__ieee754_sqrt+0xf8>
  40275c:	150f      	asrs	r7, r1, #20
  40275e:	d07b      	beq.n	402858 <__ieee754_sqrt+0x114>
  402760:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  402764:	f3c3 0313 	ubfx	r3, r3, #0, #20
  402768:	07f8      	lsls	r0, r7, #31
  40276a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40276e:	d45c      	bmi.n	40282a <__ieee754_sqrt+0xe6>
  402770:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  402774:	2600      	movs	r6, #0
  402776:	440b      	add	r3, r1
  402778:	107f      	asrs	r7, r7, #1
  40277a:	0052      	lsls	r2, r2, #1
  40277c:	46b6      	mov	lr, r6
  40277e:	2016      	movs	r0, #22
  402780:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402784:	eb0e 0401 	add.w	r4, lr, r1
  402788:	429c      	cmp	r4, r3
  40278a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  40278e:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402792:	dc03      	bgt.n	40279c <__ieee754_sqrt+0x58>
  402794:	1b1b      	subs	r3, r3, r4
  402796:	eb04 0e01 	add.w	lr, r4, r1
  40279a:	440e      	add	r6, r1
  40279c:	3801      	subs	r0, #1
  40279e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  4027a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4027a6:	d1ed      	bne.n	402784 <__ieee754_sqrt+0x40>
  4027a8:	4684      	mov	ip, r0
  4027aa:	2420      	movs	r4, #32
  4027ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4027b0:	e009      	b.n	4027c6 <__ieee754_sqrt+0x82>
  4027b2:	d020      	beq.n	4027f6 <__ieee754_sqrt+0xb2>
  4027b4:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  4027b8:	3c01      	subs	r4, #1
  4027ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4027be:	442b      	add	r3, r5
  4027c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4027c4:	d020      	beq.n	402808 <__ieee754_sqrt+0xc4>
  4027c6:	4573      	cmp	r3, lr
  4027c8:	eb01 050c 	add.w	r5, r1, ip
  4027cc:	ddf1      	ble.n	4027b2 <__ieee754_sqrt+0x6e>
  4027ce:	2d00      	cmp	r5, #0
  4027d0:	eb05 0c01 	add.w	ip, r5, r1
  4027d4:	db09      	blt.n	4027ea <__ieee754_sqrt+0xa6>
  4027d6:	46f0      	mov	r8, lr
  4027d8:	4295      	cmp	r5, r2
  4027da:	eba3 030e 	sub.w	r3, r3, lr
  4027de:	d900      	bls.n	4027e2 <__ieee754_sqrt+0x9e>
  4027e0:	3b01      	subs	r3, #1
  4027e2:	1b52      	subs	r2, r2, r5
  4027e4:	4408      	add	r0, r1
  4027e6:	46c6      	mov	lr, r8
  4027e8:	e7e4      	b.n	4027b4 <__ieee754_sqrt+0x70>
  4027ea:	f1bc 0f00 	cmp.w	ip, #0
  4027ee:	dbf2      	blt.n	4027d6 <__ieee754_sqrt+0x92>
  4027f0:	f10e 0801 	add.w	r8, lr, #1
  4027f4:	e7f0      	b.n	4027d8 <__ieee754_sqrt+0x94>
  4027f6:	4295      	cmp	r5, r2
  4027f8:	d8dc      	bhi.n	4027b4 <__ieee754_sqrt+0x70>
  4027fa:	2d00      	cmp	r5, #0
  4027fc:	eb05 0c01 	add.w	ip, r5, r1
  402800:	db44      	blt.n	40288c <__ieee754_sqrt+0x148>
  402802:	4698      	mov	r8, r3
  402804:	2300      	movs	r3, #0
  402806:	e7ec      	b.n	4027e2 <__ieee754_sqrt+0x9e>
  402808:	4313      	orrs	r3, r2
  40280a:	d113      	bne.n	402834 <__ieee754_sqrt+0xf0>
  40280c:	0840      	lsrs	r0, r0, #1
  40280e:	1073      	asrs	r3, r6, #1
  402810:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402814:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402818:	07f2      	lsls	r2, r6, #31
  40281a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  40281e:	bf48      	it	mi
  402820:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402824:	4649      	mov	r1, r9
  402826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40282a:	005b      	lsls	r3, r3, #1
  40282c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  402830:	0052      	lsls	r2, r2, #1
  402832:	e79d      	b.n	402770 <__ieee754_sqrt+0x2c>
  402834:	1c41      	adds	r1, r0, #1
  402836:	d02d      	beq.n	402894 <__ieee754_sqrt+0x150>
  402838:	3001      	adds	r0, #1
  40283a:	e7e7      	b.n	40280c <__ieee754_sqrt+0xc8>
  40283c:	4606      	mov	r6, r0
  40283e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  402842:	433e      	orrs	r6, r7
  402844:	d0ef      	beq.n	402826 <__ieee754_sqrt+0xe2>
  402846:	bb69      	cbnz	r1, 4028a4 <__ieee754_sqrt+0x160>
  402848:	460f      	mov	r7, r1
  40284a:	0ad3      	lsrs	r3, r2, #11
  40284c:	3f15      	subs	r7, #21
  40284e:	0552      	lsls	r2, r2, #21
  402850:	2b00      	cmp	r3, #0
  402852:	d0fa      	beq.n	40284a <__ieee754_sqrt+0x106>
  402854:	02de      	lsls	r6, r3, #11
  402856:	d420      	bmi.n	40289a <__ieee754_sqrt+0x156>
  402858:	2400      	movs	r4, #0
  40285a:	e000      	b.n	40285e <__ieee754_sqrt+0x11a>
  40285c:	4604      	mov	r4, r0
  40285e:	005b      	lsls	r3, r3, #1
  402860:	02dd      	lsls	r5, r3, #11
  402862:	f104 0001 	add.w	r0, r4, #1
  402866:	d5f9      	bpl.n	40285c <__ieee754_sqrt+0x118>
  402868:	f1c0 0120 	rsb	r1, r0, #32
  40286c:	fa22 f101 	lsr.w	r1, r2, r1
  402870:	430b      	orrs	r3, r1
  402872:	1b3f      	subs	r7, r7, r4
  402874:	4082      	lsls	r2, r0
  402876:	e773      	b.n	402760 <__ieee754_sqrt+0x1c>
  402878:	4602      	mov	r2, r0
  40287a:	460b      	mov	r3, r1
  40287c:	f000 fafa 	bl	402e74 <__aeabi_dmul>
  402880:	462a      	mov	r2, r5
  402882:	4623      	mov	r3, r4
  402884:	f000 f944 	bl	402b10 <__adddf3>
  402888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40288c:	f1bc 0f00 	cmp.w	ip, #0
  402890:	daae      	bge.n	4027f0 <__ieee754_sqrt+0xac>
  402892:	e7b6      	b.n	402802 <__ieee754_sqrt+0xbe>
  402894:	3601      	adds	r6, #1
  402896:	4620      	mov	r0, r4
  402898:	e7b9      	b.n	40280e <__ieee754_sqrt+0xca>
  40289a:	2000      	movs	r0, #0
  40289c:	2120      	movs	r1, #32
  40289e:	f04f 34ff 	mov.w	r4, #4294967295
  4028a2:	e7e3      	b.n	40286c <__ieee754_sqrt+0x128>
  4028a4:	4602      	mov	r2, r0
  4028a6:	460b      	mov	r3, r1
  4028a8:	f000 f930 	bl	402b0c <__aeabi_dsub>
  4028ac:	4602      	mov	r2, r0
  4028ae:	460b      	mov	r3, r1
  4028b0:	f000 fc0a 	bl	4030c8 <__aeabi_ddiv>
  4028b4:	e7b7      	b.n	402826 <__ieee754_sqrt+0xe2>
  4028b6:	bf00      	nop
  4028b8:	7ff00000 	.word	0x7ff00000

004028bc <fabs>:
  4028bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4028c0:	4770      	bx	lr
  4028c2:	bf00      	nop

004028c4 <finite>:
  4028c4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  4028c8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
  4028cc:	0fc0      	lsrs	r0, r0, #31
  4028ce:	4770      	bx	lr

004028d0 <matherr>:
  4028d0:	2000      	movs	r0, #0
  4028d2:	4770      	bx	lr

004028d4 <nan>:
  4028d4:	2000      	movs	r0, #0
  4028d6:	4901      	ldr	r1, [pc, #4]	; (4028dc <nan+0x8>)
  4028d8:	4770      	bx	lr
  4028da:	bf00      	nop
  4028dc:	7ff80000 	.word	0x7ff80000

004028e0 <rint>:
  4028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4028e2:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
  4028e6:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
  4028ea:	2e13      	cmp	r6, #19
  4028ec:	b083      	sub	sp, #12
  4028ee:	4602      	mov	r2, r0
  4028f0:	460b      	mov	r3, r1
  4028f2:	460c      	mov	r4, r1
  4028f4:	ea4f 75d1 	mov.w	r5, r1, lsr #31
  4028f8:	4607      	mov	r7, r0
  4028fa:	dc2e      	bgt.n	40295a <rint+0x7a>
  4028fc:	2e00      	cmp	r6, #0
  4028fe:	db49      	blt.n	402994 <rint+0xb4>
  402900:	493a      	ldr	r1, [pc, #232]	; (4029ec <rint+0x10c>)
  402902:	4131      	asrs	r1, r6
  402904:	ea03 0001 	and.w	r0, r3, r1
  402908:	4310      	orrs	r0, r2
  40290a:	d02b      	beq.n	402964 <rint+0x84>
  40290c:	0849      	lsrs	r1, r1, #1
  40290e:	400b      	ands	r3, r1
  402910:	ea53 0702 	orrs.w	r7, r3, r2
  402914:	d00c      	beq.n	402930 <rint+0x50>
  402916:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  40291a:	2e13      	cmp	r6, #19
  40291c:	ea24 0101 	bic.w	r1, r4, r1
  402920:	fa43 f406 	asr.w	r4, r3, r6
  402924:	ea44 0401 	orr.w	r4, r4, r1
  402928:	bf0c      	ite	eq
  40292a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
  40292e:	2700      	movne	r7, #0
  402930:	4b2f      	ldr	r3, [pc, #188]	; (4029f0 <rint+0x110>)
  402932:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  402936:	4621      	mov	r1, r4
  402938:	e9d5 4500 	ldrd	r4, r5, [r5]
  40293c:	4638      	mov	r0, r7
  40293e:	4622      	mov	r2, r4
  402940:	462b      	mov	r3, r5
  402942:	f000 f8e5 	bl	402b10 <__adddf3>
  402946:	e9cd 0100 	strd	r0, r1, [sp]
  40294a:	4622      	mov	r2, r4
  40294c:	462b      	mov	r3, r5
  40294e:	e9dd 0100 	ldrd	r0, r1, [sp]
  402952:	f000 f8db 	bl	402b0c <__aeabi_dsub>
  402956:	b003      	add	sp, #12
  402958:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40295a:	2e33      	cmp	r6, #51	; 0x33
  40295c:	dd06      	ble.n	40296c <rint+0x8c>
  40295e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  402962:	d040      	beq.n	4029e6 <rint+0x106>
  402964:	4610      	mov	r0, r2
  402966:	4619      	mov	r1, r3
  402968:	b003      	add	sp, #12
  40296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40296c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
  402970:	f04f 31ff 	mov.w	r1, #4294967295
  402974:	fa21 f10e 	lsr.w	r1, r1, lr
  402978:	4208      	tst	r0, r1
  40297a:	d0f3      	beq.n	402964 <rint+0x84>
  40297c:	0849      	lsrs	r1, r1, #1
  40297e:	4208      	tst	r0, r1
  402980:	d0d6      	beq.n	402930 <rint+0x50>
  402982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402986:	ea20 0101 	bic.w	r1, r0, r1
  40298a:	fa43 fe0e 	asr.w	lr, r3, lr
  40298e:	ea4e 0701 	orr.w	r7, lr, r1
  402992:	e7cd      	b.n	402930 <rint+0x50>
  402994:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402998:	4301      	orrs	r1, r0
  40299a:	d0e3      	beq.n	402964 <rint+0x84>
  40299c:	f3c3 0113 	ubfx	r1, r3, #0, #20
  4029a0:	4e13      	ldr	r6, [pc, #76]	; (4029f0 <rint+0x110>)
  4029a2:	4301      	orrs	r1, r0
  4029a4:	f1c1 0c00 	rsb	ip, r1, #0
  4029a8:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
  4029ac:	e9d6 6700 	ldrd	r6, r7, [r6]
  4029b0:	ea4c 0c01 	orr.w	ip, ip, r1
  4029b4:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
  4029b8:	0c5c      	lsrs	r4, r3, #17
  4029ba:	0464      	lsls	r4, r4, #17
  4029bc:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
  4029c0:	ea43 0104 	orr.w	r1, r3, r4
  4029c4:	4632      	mov	r2, r6
  4029c6:	463b      	mov	r3, r7
  4029c8:	f000 f8a2 	bl	402b10 <__adddf3>
  4029cc:	e9cd 0100 	strd	r0, r1, [sp]
  4029d0:	4632      	mov	r2, r6
  4029d2:	463b      	mov	r3, r7
  4029d4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4029d8:	f000 f898 	bl	402b0c <__aeabi_dsub>
  4029dc:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  4029e0:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
  4029e4:	e7c0      	b.n	402968 <rint+0x88>
  4029e6:	f000 f893 	bl	402b10 <__adddf3>
  4029ea:	e7bd      	b.n	402968 <rint+0x88>
  4029ec:	000fffff 	.word	0x000fffff
  4029f0:	00404920 	.word	0x00404920
  4029f4:	00000000 	.word	0x00000000

004029f8 <scalbn>:
  4029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4029fa:	f3c1 560a 	ubfx	r6, r1, #20, #11
  4029fe:	4604      	mov	r4, r0
  402a00:	460d      	mov	r5, r1
  402a02:	460b      	mov	r3, r1
  402a04:	4617      	mov	r7, r2
  402a06:	bb0e      	cbnz	r6, 402a4c <scalbn+0x54>
  402a08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402a0c:	4303      	orrs	r3, r0
  402a0e:	4686      	mov	lr, r0
  402a10:	d025      	beq.n	402a5e <scalbn+0x66>
  402a12:	2200      	movs	r2, #0
  402a14:	4b34      	ldr	r3, [pc, #208]	; (402ae8 <scalbn+0xf0>)
  402a16:	f000 fa2d 	bl	402e74 <__aeabi_dmul>
  402a1a:	4a34      	ldr	r2, [pc, #208]	; (402aec <scalbn+0xf4>)
  402a1c:	4297      	cmp	r7, r2
  402a1e:	4604      	mov	r4, r0
  402a20:	460d      	mov	r5, r1
  402a22:	460b      	mov	r3, r1
  402a24:	db2a      	blt.n	402a7c <scalbn+0x84>
  402a26:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402a2a:	3e36      	subs	r6, #54	; 0x36
  402a2c:	443e      	add	r6, r7
  402a2e:	f240 72fe 	movw	r2, #2046	; 0x7fe
  402a32:	4296      	cmp	r6, r2
  402a34:	dc28      	bgt.n	402a88 <scalbn+0x90>
  402a36:	2e00      	cmp	r6, #0
  402a38:	dd12      	ble.n	402a60 <scalbn+0x68>
  402a3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402a3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402a42:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402a46:	4620      	mov	r0, r4
  402a48:	4629      	mov	r1, r5
  402a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a4c:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402a50:	4296      	cmp	r6, r2
  402a52:	d1eb      	bne.n	402a2c <scalbn+0x34>
  402a54:	4602      	mov	r2, r0
  402a56:	460b      	mov	r3, r1
  402a58:	f000 f85a 	bl	402b10 <__adddf3>
  402a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a60:	f116 0f35 	cmn.w	r6, #53	; 0x35
  402a64:	da1d      	bge.n	402aa2 <scalbn+0xaa>
  402a66:	f24c 3350 	movw	r3, #50000	; 0xc350
  402a6a:	429f      	cmp	r7, r3
  402a6c:	4622      	mov	r2, r4
  402a6e:	462b      	mov	r3, r5
  402a70:	dc25      	bgt.n	402abe <scalbn+0xc6>
  402a72:	a119      	add	r1, pc, #100	; (adr r1, 402ad8 <scalbn+0xe0>)
  402a74:	e9d1 0100 	ldrd	r0, r1, [r1]
  402a78:	f000 f83c 	bl	402af4 <copysign>
  402a7c:	a316      	add	r3, pc, #88	; (adr r3, 402ad8 <scalbn+0xe0>)
  402a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a82:	f000 f9f7 	bl	402e74 <__aeabi_dmul>
  402a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a88:	4622      	mov	r2, r4
  402a8a:	462b      	mov	r3, r5
  402a8c:	a114      	add	r1, pc, #80	; (adr r1, 402ae0 <scalbn+0xe8>)
  402a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
  402a92:	f000 f82f 	bl	402af4 <copysign>
  402a96:	a312      	add	r3, pc, #72	; (adr r3, 402ae0 <scalbn+0xe8>)
  402a98:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a9c:	f000 f9ea 	bl	402e74 <__aeabi_dmul>
  402aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402aa2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402aa6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402aaa:	3636      	adds	r6, #54	; 0x36
  402aac:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402ab0:	4620      	mov	r0, r4
  402ab2:	4629      	mov	r1, r5
  402ab4:	2200      	movs	r2, #0
  402ab6:	4b0e      	ldr	r3, [pc, #56]	; (402af0 <scalbn+0xf8>)
  402ab8:	f000 f9dc 	bl	402e74 <__aeabi_dmul>
  402abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402abe:	a108      	add	r1, pc, #32	; (adr r1, 402ae0 <scalbn+0xe8>)
  402ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
  402ac4:	f000 f816 	bl	402af4 <copysign>
  402ac8:	a305      	add	r3, pc, #20	; (adr r3, 402ae0 <scalbn+0xe8>)
  402aca:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ace:	f000 f9d1 	bl	402e74 <__aeabi_dmul>
  402ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ad4:	f3af 8000 	nop.w
  402ad8:	c2f8f359 	.word	0xc2f8f359
  402adc:	01a56e1f 	.word	0x01a56e1f
  402ae0:	8800759c 	.word	0x8800759c
  402ae4:	7e37e43c 	.word	0x7e37e43c
  402ae8:	43500000 	.word	0x43500000
  402aec:	ffff3cb0 	.word	0xffff3cb0
  402af0:	3c900000 	.word	0x3c900000

00402af4 <copysign>:
  402af4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  402af8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  402afc:	ea42 0103 	orr.w	r1, r2, r3
  402b00:	4770      	bx	lr
  402b02:	bf00      	nop

00402b04 <__aeabi_drsub>:
  402b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402b08:	e002      	b.n	402b10 <__adddf3>
  402b0a:	bf00      	nop

00402b0c <__aeabi_dsub>:
  402b0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402b10 <__adddf3>:
  402b10:	b530      	push	{r4, r5, lr}
  402b12:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402b16:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402b1a:	ea94 0f05 	teq	r4, r5
  402b1e:	bf08      	it	eq
  402b20:	ea90 0f02 	teqeq	r0, r2
  402b24:	bf1f      	itttt	ne
  402b26:	ea54 0c00 	orrsne.w	ip, r4, r0
  402b2a:	ea55 0c02 	orrsne.w	ip, r5, r2
  402b2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402b32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402b36:	f000 80e2 	beq.w	402cfe <__adddf3+0x1ee>
  402b3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402b3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402b42:	bfb8      	it	lt
  402b44:	426d      	neglt	r5, r5
  402b46:	dd0c      	ble.n	402b62 <__adddf3+0x52>
  402b48:	442c      	add	r4, r5
  402b4a:	ea80 0202 	eor.w	r2, r0, r2
  402b4e:	ea81 0303 	eor.w	r3, r1, r3
  402b52:	ea82 0000 	eor.w	r0, r2, r0
  402b56:	ea83 0101 	eor.w	r1, r3, r1
  402b5a:	ea80 0202 	eor.w	r2, r0, r2
  402b5e:	ea81 0303 	eor.w	r3, r1, r3
  402b62:	2d36      	cmp	r5, #54	; 0x36
  402b64:	bf88      	it	hi
  402b66:	bd30      	pophi	{r4, r5, pc}
  402b68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402b6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402b70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402b74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402b78:	d002      	beq.n	402b80 <__adddf3+0x70>
  402b7a:	4240      	negs	r0, r0
  402b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402b80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402b84:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402b88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402b8c:	d002      	beq.n	402b94 <__adddf3+0x84>
  402b8e:	4252      	negs	r2, r2
  402b90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402b94:	ea94 0f05 	teq	r4, r5
  402b98:	f000 80a7 	beq.w	402cea <__adddf3+0x1da>
  402b9c:	f1a4 0401 	sub.w	r4, r4, #1
  402ba0:	f1d5 0e20 	rsbs	lr, r5, #32
  402ba4:	db0d      	blt.n	402bc2 <__adddf3+0xb2>
  402ba6:	fa02 fc0e 	lsl.w	ip, r2, lr
  402baa:	fa22 f205 	lsr.w	r2, r2, r5
  402bae:	1880      	adds	r0, r0, r2
  402bb0:	f141 0100 	adc.w	r1, r1, #0
  402bb4:	fa03 f20e 	lsl.w	r2, r3, lr
  402bb8:	1880      	adds	r0, r0, r2
  402bba:	fa43 f305 	asr.w	r3, r3, r5
  402bbe:	4159      	adcs	r1, r3
  402bc0:	e00e      	b.n	402be0 <__adddf3+0xd0>
  402bc2:	f1a5 0520 	sub.w	r5, r5, #32
  402bc6:	f10e 0e20 	add.w	lr, lr, #32
  402bca:	2a01      	cmp	r2, #1
  402bcc:	fa03 fc0e 	lsl.w	ip, r3, lr
  402bd0:	bf28      	it	cs
  402bd2:	f04c 0c02 	orrcs.w	ip, ip, #2
  402bd6:	fa43 f305 	asr.w	r3, r3, r5
  402bda:	18c0      	adds	r0, r0, r3
  402bdc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402be0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402be4:	d507      	bpl.n	402bf6 <__adddf3+0xe6>
  402be6:	f04f 0e00 	mov.w	lr, #0
  402bea:	f1dc 0c00 	rsbs	ip, ip, #0
  402bee:	eb7e 0000 	sbcs.w	r0, lr, r0
  402bf2:	eb6e 0101 	sbc.w	r1, lr, r1
  402bf6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402bfa:	d31b      	bcc.n	402c34 <__adddf3+0x124>
  402bfc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402c00:	d30c      	bcc.n	402c1c <__adddf3+0x10c>
  402c02:	0849      	lsrs	r1, r1, #1
  402c04:	ea5f 0030 	movs.w	r0, r0, rrx
  402c08:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402c0c:	f104 0401 	add.w	r4, r4, #1
  402c10:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402c14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402c18:	f080 809a 	bcs.w	402d50 <__adddf3+0x240>
  402c1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402c20:	bf08      	it	eq
  402c22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402c26:	f150 0000 	adcs.w	r0, r0, #0
  402c2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402c2e:	ea41 0105 	orr.w	r1, r1, r5
  402c32:	bd30      	pop	{r4, r5, pc}
  402c34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402c38:	4140      	adcs	r0, r0
  402c3a:	eb41 0101 	adc.w	r1, r1, r1
  402c3e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402c42:	f1a4 0401 	sub.w	r4, r4, #1
  402c46:	d1e9      	bne.n	402c1c <__adddf3+0x10c>
  402c48:	f091 0f00 	teq	r1, #0
  402c4c:	bf04      	itt	eq
  402c4e:	4601      	moveq	r1, r0
  402c50:	2000      	moveq	r0, #0
  402c52:	fab1 f381 	clz	r3, r1
  402c56:	bf08      	it	eq
  402c58:	3320      	addeq	r3, #32
  402c5a:	f1a3 030b 	sub.w	r3, r3, #11
  402c5e:	f1b3 0220 	subs.w	r2, r3, #32
  402c62:	da0c      	bge.n	402c7e <__adddf3+0x16e>
  402c64:	320c      	adds	r2, #12
  402c66:	dd08      	ble.n	402c7a <__adddf3+0x16a>
  402c68:	f102 0c14 	add.w	ip, r2, #20
  402c6c:	f1c2 020c 	rsb	r2, r2, #12
  402c70:	fa01 f00c 	lsl.w	r0, r1, ip
  402c74:	fa21 f102 	lsr.w	r1, r1, r2
  402c78:	e00c      	b.n	402c94 <__adddf3+0x184>
  402c7a:	f102 0214 	add.w	r2, r2, #20
  402c7e:	bfd8      	it	le
  402c80:	f1c2 0c20 	rsble	ip, r2, #32
  402c84:	fa01 f102 	lsl.w	r1, r1, r2
  402c88:	fa20 fc0c 	lsr.w	ip, r0, ip
  402c8c:	bfdc      	itt	le
  402c8e:	ea41 010c 	orrle.w	r1, r1, ip
  402c92:	4090      	lslle	r0, r2
  402c94:	1ae4      	subs	r4, r4, r3
  402c96:	bfa2      	ittt	ge
  402c98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402c9c:	4329      	orrge	r1, r5
  402c9e:	bd30      	popge	{r4, r5, pc}
  402ca0:	ea6f 0404 	mvn.w	r4, r4
  402ca4:	3c1f      	subs	r4, #31
  402ca6:	da1c      	bge.n	402ce2 <__adddf3+0x1d2>
  402ca8:	340c      	adds	r4, #12
  402caa:	dc0e      	bgt.n	402cca <__adddf3+0x1ba>
  402cac:	f104 0414 	add.w	r4, r4, #20
  402cb0:	f1c4 0220 	rsb	r2, r4, #32
  402cb4:	fa20 f004 	lsr.w	r0, r0, r4
  402cb8:	fa01 f302 	lsl.w	r3, r1, r2
  402cbc:	ea40 0003 	orr.w	r0, r0, r3
  402cc0:	fa21 f304 	lsr.w	r3, r1, r4
  402cc4:	ea45 0103 	orr.w	r1, r5, r3
  402cc8:	bd30      	pop	{r4, r5, pc}
  402cca:	f1c4 040c 	rsb	r4, r4, #12
  402cce:	f1c4 0220 	rsb	r2, r4, #32
  402cd2:	fa20 f002 	lsr.w	r0, r0, r2
  402cd6:	fa01 f304 	lsl.w	r3, r1, r4
  402cda:	ea40 0003 	orr.w	r0, r0, r3
  402cde:	4629      	mov	r1, r5
  402ce0:	bd30      	pop	{r4, r5, pc}
  402ce2:	fa21 f004 	lsr.w	r0, r1, r4
  402ce6:	4629      	mov	r1, r5
  402ce8:	bd30      	pop	{r4, r5, pc}
  402cea:	f094 0f00 	teq	r4, #0
  402cee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402cf2:	bf06      	itte	eq
  402cf4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402cf8:	3401      	addeq	r4, #1
  402cfa:	3d01      	subne	r5, #1
  402cfc:	e74e      	b.n	402b9c <__adddf3+0x8c>
  402cfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402d02:	bf18      	it	ne
  402d04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402d08:	d029      	beq.n	402d5e <__adddf3+0x24e>
  402d0a:	ea94 0f05 	teq	r4, r5
  402d0e:	bf08      	it	eq
  402d10:	ea90 0f02 	teqeq	r0, r2
  402d14:	d005      	beq.n	402d22 <__adddf3+0x212>
  402d16:	ea54 0c00 	orrs.w	ip, r4, r0
  402d1a:	bf04      	itt	eq
  402d1c:	4619      	moveq	r1, r3
  402d1e:	4610      	moveq	r0, r2
  402d20:	bd30      	pop	{r4, r5, pc}
  402d22:	ea91 0f03 	teq	r1, r3
  402d26:	bf1e      	ittt	ne
  402d28:	2100      	movne	r1, #0
  402d2a:	2000      	movne	r0, #0
  402d2c:	bd30      	popne	{r4, r5, pc}
  402d2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402d32:	d105      	bne.n	402d40 <__adddf3+0x230>
  402d34:	0040      	lsls	r0, r0, #1
  402d36:	4149      	adcs	r1, r1
  402d38:	bf28      	it	cs
  402d3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402d3e:	bd30      	pop	{r4, r5, pc}
  402d40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402d44:	bf3c      	itt	cc
  402d46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402d4a:	bd30      	popcc	{r4, r5, pc}
  402d4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402d50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402d54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402d58:	f04f 0000 	mov.w	r0, #0
  402d5c:	bd30      	pop	{r4, r5, pc}
  402d5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402d62:	bf1a      	itte	ne
  402d64:	4619      	movne	r1, r3
  402d66:	4610      	movne	r0, r2
  402d68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402d6c:	bf1c      	itt	ne
  402d6e:	460b      	movne	r3, r1
  402d70:	4602      	movne	r2, r0
  402d72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402d76:	bf06      	itte	eq
  402d78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402d7c:	ea91 0f03 	teqeq	r1, r3
  402d80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402d84:	bd30      	pop	{r4, r5, pc}
  402d86:	bf00      	nop

00402d88 <__aeabi_ui2d>:
  402d88:	f090 0f00 	teq	r0, #0
  402d8c:	bf04      	itt	eq
  402d8e:	2100      	moveq	r1, #0
  402d90:	4770      	bxeq	lr
  402d92:	b530      	push	{r4, r5, lr}
  402d94:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402d98:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402d9c:	f04f 0500 	mov.w	r5, #0
  402da0:	f04f 0100 	mov.w	r1, #0
  402da4:	e750      	b.n	402c48 <__adddf3+0x138>
  402da6:	bf00      	nop

00402da8 <__aeabi_i2d>:
  402da8:	f090 0f00 	teq	r0, #0
  402dac:	bf04      	itt	eq
  402dae:	2100      	moveq	r1, #0
  402db0:	4770      	bxeq	lr
  402db2:	b530      	push	{r4, r5, lr}
  402db4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402db8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402dbc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402dc0:	bf48      	it	mi
  402dc2:	4240      	negmi	r0, r0
  402dc4:	f04f 0100 	mov.w	r1, #0
  402dc8:	e73e      	b.n	402c48 <__adddf3+0x138>
  402dca:	bf00      	nop

00402dcc <__aeabi_f2d>:
  402dcc:	0042      	lsls	r2, r0, #1
  402dce:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402dd2:	ea4f 0131 	mov.w	r1, r1, rrx
  402dd6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402dda:	bf1f      	itttt	ne
  402ddc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402de0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402de4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402de8:	4770      	bxne	lr
  402dea:	f092 0f00 	teq	r2, #0
  402dee:	bf14      	ite	ne
  402df0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402df4:	4770      	bxeq	lr
  402df6:	b530      	push	{r4, r5, lr}
  402df8:	f44f 7460 	mov.w	r4, #896	; 0x380
  402dfc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402e00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402e04:	e720      	b.n	402c48 <__adddf3+0x138>
  402e06:	bf00      	nop

00402e08 <__aeabi_ul2d>:
  402e08:	ea50 0201 	orrs.w	r2, r0, r1
  402e0c:	bf08      	it	eq
  402e0e:	4770      	bxeq	lr
  402e10:	b530      	push	{r4, r5, lr}
  402e12:	f04f 0500 	mov.w	r5, #0
  402e16:	e00a      	b.n	402e2e <__aeabi_l2d+0x16>

00402e18 <__aeabi_l2d>:
  402e18:	ea50 0201 	orrs.w	r2, r0, r1
  402e1c:	bf08      	it	eq
  402e1e:	4770      	bxeq	lr
  402e20:	b530      	push	{r4, r5, lr}
  402e22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402e26:	d502      	bpl.n	402e2e <__aeabi_l2d+0x16>
  402e28:	4240      	negs	r0, r0
  402e2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402e2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e32:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402e3a:	f43f aedc 	beq.w	402bf6 <__adddf3+0xe6>
  402e3e:	f04f 0203 	mov.w	r2, #3
  402e42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402e46:	bf18      	it	ne
  402e48:	3203      	addne	r2, #3
  402e4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402e4e:	bf18      	it	ne
  402e50:	3203      	addne	r2, #3
  402e52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402e56:	f1c2 0320 	rsb	r3, r2, #32
  402e5a:	fa00 fc03 	lsl.w	ip, r0, r3
  402e5e:	fa20 f002 	lsr.w	r0, r0, r2
  402e62:	fa01 fe03 	lsl.w	lr, r1, r3
  402e66:	ea40 000e 	orr.w	r0, r0, lr
  402e6a:	fa21 f102 	lsr.w	r1, r1, r2
  402e6e:	4414      	add	r4, r2
  402e70:	e6c1      	b.n	402bf6 <__adddf3+0xe6>
  402e72:	bf00      	nop

00402e74 <__aeabi_dmul>:
  402e74:	b570      	push	{r4, r5, r6, lr}
  402e76:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402e7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402e7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402e82:	bf1d      	ittte	ne
  402e84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402e88:	ea94 0f0c 	teqne	r4, ip
  402e8c:	ea95 0f0c 	teqne	r5, ip
  402e90:	f000 f8de 	bleq	403050 <__aeabi_dmul+0x1dc>
  402e94:	442c      	add	r4, r5
  402e96:	ea81 0603 	eor.w	r6, r1, r3
  402e9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402e9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402ea2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402ea6:	bf18      	it	ne
  402ea8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402eac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402eb4:	d038      	beq.n	402f28 <__aeabi_dmul+0xb4>
  402eb6:	fba0 ce02 	umull	ip, lr, r0, r2
  402eba:	f04f 0500 	mov.w	r5, #0
  402ebe:	fbe1 e502 	umlal	lr, r5, r1, r2
  402ec2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402ec6:	fbe0 e503 	umlal	lr, r5, r0, r3
  402eca:	f04f 0600 	mov.w	r6, #0
  402ece:	fbe1 5603 	umlal	r5, r6, r1, r3
  402ed2:	f09c 0f00 	teq	ip, #0
  402ed6:	bf18      	it	ne
  402ed8:	f04e 0e01 	orrne.w	lr, lr, #1
  402edc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402ee0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402ee4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402ee8:	d204      	bcs.n	402ef4 <__aeabi_dmul+0x80>
  402eea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402eee:	416d      	adcs	r5, r5
  402ef0:	eb46 0606 	adc.w	r6, r6, r6
  402ef4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402ef8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402efc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402f00:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402f04:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402f08:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402f0c:	bf88      	it	hi
  402f0e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402f12:	d81e      	bhi.n	402f52 <__aeabi_dmul+0xde>
  402f14:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402f18:	bf08      	it	eq
  402f1a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402f1e:	f150 0000 	adcs.w	r0, r0, #0
  402f22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402f26:	bd70      	pop	{r4, r5, r6, pc}
  402f28:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402f2c:	ea46 0101 	orr.w	r1, r6, r1
  402f30:	ea40 0002 	orr.w	r0, r0, r2
  402f34:	ea81 0103 	eor.w	r1, r1, r3
  402f38:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402f3c:	bfc2      	ittt	gt
  402f3e:	ebd4 050c 	rsbsgt	r5, r4, ip
  402f42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402f46:	bd70      	popgt	{r4, r5, r6, pc}
  402f48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402f4c:	f04f 0e00 	mov.w	lr, #0
  402f50:	3c01      	subs	r4, #1
  402f52:	f300 80ab 	bgt.w	4030ac <__aeabi_dmul+0x238>
  402f56:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402f5a:	bfde      	ittt	le
  402f5c:	2000      	movle	r0, #0
  402f5e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402f62:	bd70      	pople	{r4, r5, r6, pc}
  402f64:	f1c4 0400 	rsb	r4, r4, #0
  402f68:	3c20      	subs	r4, #32
  402f6a:	da35      	bge.n	402fd8 <__aeabi_dmul+0x164>
  402f6c:	340c      	adds	r4, #12
  402f6e:	dc1b      	bgt.n	402fa8 <__aeabi_dmul+0x134>
  402f70:	f104 0414 	add.w	r4, r4, #20
  402f74:	f1c4 0520 	rsb	r5, r4, #32
  402f78:	fa00 f305 	lsl.w	r3, r0, r5
  402f7c:	fa20 f004 	lsr.w	r0, r0, r4
  402f80:	fa01 f205 	lsl.w	r2, r1, r5
  402f84:	ea40 0002 	orr.w	r0, r0, r2
  402f88:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402f8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402f90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402f94:	fa21 f604 	lsr.w	r6, r1, r4
  402f98:	eb42 0106 	adc.w	r1, r2, r6
  402f9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402fa0:	bf08      	it	eq
  402fa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402fa6:	bd70      	pop	{r4, r5, r6, pc}
  402fa8:	f1c4 040c 	rsb	r4, r4, #12
  402fac:	f1c4 0520 	rsb	r5, r4, #32
  402fb0:	fa00 f304 	lsl.w	r3, r0, r4
  402fb4:	fa20 f005 	lsr.w	r0, r0, r5
  402fb8:	fa01 f204 	lsl.w	r2, r1, r4
  402fbc:	ea40 0002 	orr.w	r0, r0, r2
  402fc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402fc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402fc8:	f141 0100 	adc.w	r1, r1, #0
  402fcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402fd0:	bf08      	it	eq
  402fd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402fd6:	bd70      	pop	{r4, r5, r6, pc}
  402fd8:	f1c4 0520 	rsb	r5, r4, #32
  402fdc:	fa00 f205 	lsl.w	r2, r0, r5
  402fe0:	ea4e 0e02 	orr.w	lr, lr, r2
  402fe4:	fa20 f304 	lsr.w	r3, r0, r4
  402fe8:	fa01 f205 	lsl.w	r2, r1, r5
  402fec:	ea43 0302 	orr.w	r3, r3, r2
  402ff0:	fa21 f004 	lsr.w	r0, r1, r4
  402ff4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402ff8:	fa21 f204 	lsr.w	r2, r1, r4
  402ffc:	ea20 0002 	bic.w	r0, r0, r2
  403000:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403004:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403008:	bf08      	it	eq
  40300a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40300e:	bd70      	pop	{r4, r5, r6, pc}
  403010:	f094 0f00 	teq	r4, #0
  403014:	d10f      	bne.n	403036 <__aeabi_dmul+0x1c2>
  403016:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40301a:	0040      	lsls	r0, r0, #1
  40301c:	eb41 0101 	adc.w	r1, r1, r1
  403020:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403024:	bf08      	it	eq
  403026:	3c01      	subeq	r4, #1
  403028:	d0f7      	beq.n	40301a <__aeabi_dmul+0x1a6>
  40302a:	ea41 0106 	orr.w	r1, r1, r6
  40302e:	f095 0f00 	teq	r5, #0
  403032:	bf18      	it	ne
  403034:	4770      	bxne	lr
  403036:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40303a:	0052      	lsls	r2, r2, #1
  40303c:	eb43 0303 	adc.w	r3, r3, r3
  403040:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403044:	bf08      	it	eq
  403046:	3d01      	subeq	r5, #1
  403048:	d0f7      	beq.n	40303a <__aeabi_dmul+0x1c6>
  40304a:	ea43 0306 	orr.w	r3, r3, r6
  40304e:	4770      	bx	lr
  403050:	ea94 0f0c 	teq	r4, ip
  403054:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403058:	bf18      	it	ne
  40305a:	ea95 0f0c 	teqne	r5, ip
  40305e:	d00c      	beq.n	40307a <__aeabi_dmul+0x206>
  403060:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403064:	bf18      	it	ne
  403066:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40306a:	d1d1      	bne.n	403010 <__aeabi_dmul+0x19c>
  40306c:	ea81 0103 	eor.w	r1, r1, r3
  403070:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403074:	f04f 0000 	mov.w	r0, #0
  403078:	bd70      	pop	{r4, r5, r6, pc}
  40307a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40307e:	bf06      	itte	eq
  403080:	4610      	moveq	r0, r2
  403082:	4619      	moveq	r1, r3
  403084:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403088:	d019      	beq.n	4030be <__aeabi_dmul+0x24a>
  40308a:	ea94 0f0c 	teq	r4, ip
  40308e:	d102      	bne.n	403096 <__aeabi_dmul+0x222>
  403090:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403094:	d113      	bne.n	4030be <__aeabi_dmul+0x24a>
  403096:	ea95 0f0c 	teq	r5, ip
  40309a:	d105      	bne.n	4030a8 <__aeabi_dmul+0x234>
  40309c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4030a0:	bf1c      	itt	ne
  4030a2:	4610      	movne	r0, r2
  4030a4:	4619      	movne	r1, r3
  4030a6:	d10a      	bne.n	4030be <__aeabi_dmul+0x24a>
  4030a8:	ea81 0103 	eor.w	r1, r1, r3
  4030ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4030b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4030b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4030b8:	f04f 0000 	mov.w	r0, #0
  4030bc:	bd70      	pop	{r4, r5, r6, pc}
  4030be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4030c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4030c6:	bd70      	pop	{r4, r5, r6, pc}

004030c8 <__aeabi_ddiv>:
  4030c8:	b570      	push	{r4, r5, r6, lr}
  4030ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4030ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4030d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4030d6:	bf1d      	ittte	ne
  4030d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4030dc:	ea94 0f0c 	teqne	r4, ip
  4030e0:	ea95 0f0c 	teqne	r5, ip
  4030e4:	f000 f8a7 	bleq	403236 <__aeabi_ddiv+0x16e>
  4030e8:	eba4 0405 	sub.w	r4, r4, r5
  4030ec:	ea81 0e03 	eor.w	lr, r1, r3
  4030f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4030f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4030f8:	f000 8088 	beq.w	40320c <__aeabi_ddiv+0x144>
  4030fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403100:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403104:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403108:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40310c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403110:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403114:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403118:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40311c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403120:	429d      	cmp	r5, r3
  403122:	bf08      	it	eq
  403124:	4296      	cmpeq	r6, r2
  403126:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40312a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40312e:	d202      	bcs.n	403136 <__aeabi_ddiv+0x6e>
  403130:	085b      	lsrs	r3, r3, #1
  403132:	ea4f 0232 	mov.w	r2, r2, rrx
  403136:	1ab6      	subs	r6, r6, r2
  403138:	eb65 0503 	sbc.w	r5, r5, r3
  40313c:	085b      	lsrs	r3, r3, #1
  40313e:	ea4f 0232 	mov.w	r2, r2, rrx
  403142:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403146:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40314a:	ebb6 0e02 	subs.w	lr, r6, r2
  40314e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403152:	bf22      	ittt	cs
  403154:	1ab6      	subcs	r6, r6, r2
  403156:	4675      	movcs	r5, lr
  403158:	ea40 000c 	orrcs.w	r0, r0, ip
  40315c:	085b      	lsrs	r3, r3, #1
  40315e:	ea4f 0232 	mov.w	r2, r2, rrx
  403162:	ebb6 0e02 	subs.w	lr, r6, r2
  403166:	eb75 0e03 	sbcs.w	lr, r5, r3
  40316a:	bf22      	ittt	cs
  40316c:	1ab6      	subcs	r6, r6, r2
  40316e:	4675      	movcs	r5, lr
  403170:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403174:	085b      	lsrs	r3, r3, #1
  403176:	ea4f 0232 	mov.w	r2, r2, rrx
  40317a:	ebb6 0e02 	subs.w	lr, r6, r2
  40317e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403182:	bf22      	ittt	cs
  403184:	1ab6      	subcs	r6, r6, r2
  403186:	4675      	movcs	r5, lr
  403188:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40318c:	085b      	lsrs	r3, r3, #1
  40318e:	ea4f 0232 	mov.w	r2, r2, rrx
  403192:	ebb6 0e02 	subs.w	lr, r6, r2
  403196:	eb75 0e03 	sbcs.w	lr, r5, r3
  40319a:	bf22      	ittt	cs
  40319c:	1ab6      	subcs	r6, r6, r2
  40319e:	4675      	movcs	r5, lr
  4031a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4031a4:	ea55 0e06 	orrs.w	lr, r5, r6
  4031a8:	d018      	beq.n	4031dc <__aeabi_ddiv+0x114>
  4031aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4031ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4031b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4031b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4031ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4031be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4031c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4031c6:	d1c0      	bne.n	40314a <__aeabi_ddiv+0x82>
  4031c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4031cc:	d10b      	bne.n	4031e6 <__aeabi_ddiv+0x11e>
  4031ce:	ea41 0100 	orr.w	r1, r1, r0
  4031d2:	f04f 0000 	mov.w	r0, #0
  4031d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4031da:	e7b6      	b.n	40314a <__aeabi_ddiv+0x82>
  4031dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4031e0:	bf04      	itt	eq
  4031e2:	4301      	orreq	r1, r0
  4031e4:	2000      	moveq	r0, #0
  4031e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4031ea:	bf88      	it	hi
  4031ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4031f0:	f63f aeaf 	bhi.w	402f52 <__aeabi_dmul+0xde>
  4031f4:	ebb5 0c03 	subs.w	ip, r5, r3
  4031f8:	bf04      	itt	eq
  4031fa:	ebb6 0c02 	subseq.w	ip, r6, r2
  4031fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403202:	f150 0000 	adcs.w	r0, r0, #0
  403206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40320a:	bd70      	pop	{r4, r5, r6, pc}
  40320c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403210:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403214:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403218:	bfc2      	ittt	gt
  40321a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40321e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403222:	bd70      	popgt	{r4, r5, r6, pc}
  403224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403228:	f04f 0e00 	mov.w	lr, #0
  40322c:	3c01      	subs	r4, #1
  40322e:	e690      	b.n	402f52 <__aeabi_dmul+0xde>
  403230:	ea45 0e06 	orr.w	lr, r5, r6
  403234:	e68d      	b.n	402f52 <__aeabi_dmul+0xde>
  403236:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40323a:	ea94 0f0c 	teq	r4, ip
  40323e:	bf08      	it	eq
  403240:	ea95 0f0c 	teqeq	r5, ip
  403244:	f43f af3b 	beq.w	4030be <__aeabi_dmul+0x24a>
  403248:	ea94 0f0c 	teq	r4, ip
  40324c:	d10a      	bne.n	403264 <__aeabi_ddiv+0x19c>
  40324e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403252:	f47f af34 	bne.w	4030be <__aeabi_dmul+0x24a>
  403256:	ea95 0f0c 	teq	r5, ip
  40325a:	f47f af25 	bne.w	4030a8 <__aeabi_dmul+0x234>
  40325e:	4610      	mov	r0, r2
  403260:	4619      	mov	r1, r3
  403262:	e72c      	b.n	4030be <__aeabi_dmul+0x24a>
  403264:	ea95 0f0c 	teq	r5, ip
  403268:	d106      	bne.n	403278 <__aeabi_ddiv+0x1b0>
  40326a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40326e:	f43f aefd 	beq.w	40306c <__aeabi_dmul+0x1f8>
  403272:	4610      	mov	r0, r2
  403274:	4619      	mov	r1, r3
  403276:	e722      	b.n	4030be <__aeabi_dmul+0x24a>
  403278:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40327c:	bf18      	it	ne
  40327e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403282:	f47f aec5 	bne.w	403010 <__aeabi_dmul+0x19c>
  403286:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40328a:	f47f af0d 	bne.w	4030a8 <__aeabi_dmul+0x234>
  40328e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403292:	f47f aeeb 	bne.w	40306c <__aeabi_dmul+0x1f8>
  403296:	e712      	b.n	4030be <__aeabi_dmul+0x24a>

00403298 <__gedf2>:
  403298:	f04f 3cff 	mov.w	ip, #4294967295
  40329c:	e006      	b.n	4032ac <__cmpdf2+0x4>
  40329e:	bf00      	nop

004032a0 <__ledf2>:
  4032a0:	f04f 0c01 	mov.w	ip, #1
  4032a4:	e002      	b.n	4032ac <__cmpdf2+0x4>
  4032a6:	bf00      	nop

004032a8 <__cmpdf2>:
  4032a8:	f04f 0c01 	mov.w	ip, #1
  4032ac:	f84d cd04 	str.w	ip, [sp, #-4]!
  4032b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4032b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4032b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4032bc:	bf18      	it	ne
  4032be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4032c2:	d01b      	beq.n	4032fc <__cmpdf2+0x54>
  4032c4:	b001      	add	sp, #4
  4032c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4032ca:	bf0c      	ite	eq
  4032cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4032d0:	ea91 0f03 	teqne	r1, r3
  4032d4:	bf02      	ittt	eq
  4032d6:	ea90 0f02 	teqeq	r0, r2
  4032da:	2000      	moveq	r0, #0
  4032dc:	4770      	bxeq	lr
  4032de:	f110 0f00 	cmn.w	r0, #0
  4032e2:	ea91 0f03 	teq	r1, r3
  4032e6:	bf58      	it	pl
  4032e8:	4299      	cmppl	r1, r3
  4032ea:	bf08      	it	eq
  4032ec:	4290      	cmpeq	r0, r2
  4032ee:	bf2c      	ite	cs
  4032f0:	17d8      	asrcs	r0, r3, #31
  4032f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4032f6:	f040 0001 	orr.w	r0, r0, #1
  4032fa:	4770      	bx	lr
  4032fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403300:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403304:	d102      	bne.n	40330c <__cmpdf2+0x64>
  403306:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40330a:	d107      	bne.n	40331c <__cmpdf2+0x74>
  40330c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403310:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403314:	d1d6      	bne.n	4032c4 <__cmpdf2+0x1c>
  403316:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40331a:	d0d3      	beq.n	4032c4 <__cmpdf2+0x1c>
  40331c:	f85d 0b04 	ldr.w	r0, [sp], #4
  403320:	4770      	bx	lr
  403322:	bf00      	nop

00403324 <__aeabi_cdrcmple>:
  403324:	4684      	mov	ip, r0
  403326:	4610      	mov	r0, r2
  403328:	4662      	mov	r2, ip
  40332a:	468c      	mov	ip, r1
  40332c:	4619      	mov	r1, r3
  40332e:	4663      	mov	r3, ip
  403330:	e000      	b.n	403334 <__aeabi_cdcmpeq>
  403332:	bf00      	nop

00403334 <__aeabi_cdcmpeq>:
  403334:	b501      	push	{r0, lr}
  403336:	f7ff ffb7 	bl	4032a8 <__cmpdf2>
  40333a:	2800      	cmp	r0, #0
  40333c:	bf48      	it	mi
  40333e:	f110 0f00 	cmnmi.w	r0, #0
  403342:	bd01      	pop	{r0, pc}

00403344 <__aeabi_dcmpeq>:
  403344:	f84d ed08 	str.w	lr, [sp, #-8]!
  403348:	f7ff fff4 	bl	403334 <__aeabi_cdcmpeq>
  40334c:	bf0c      	ite	eq
  40334e:	2001      	moveq	r0, #1
  403350:	2000      	movne	r0, #0
  403352:	f85d fb08 	ldr.w	pc, [sp], #8
  403356:	bf00      	nop

00403358 <__aeabi_dcmplt>:
  403358:	f84d ed08 	str.w	lr, [sp, #-8]!
  40335c:	f7ff ffea 	bl	403334 <__aeabi_cdcmpeq>
  403360:	bf34      	ite	cc
  403362:	2001      	movcc	r0, #1
  403364:	2000      	movcs	r0, #0
  403366:	f85d fb08 	ldr.w	pc, [sp], #8
  40336a:	bf00      	nop

0040336c <__aeabi_dcmple>:
  40336c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403370:	f7ff ffe0 	bl	403334 <__aeabi_cdcmpeq>
  403374:	bf94      	ite	ls
  403376:	2001      	movls	r0, #1
  403378:	2000      	movhi	r0, #0
  40337a:	f85d fb08 	ldr.w	pc, [sp], #8
  40337e:	bf00      	nop

00403380 <__aeabi_dcmpge>:
  403380:	f84d ed08 	str.w	lr, [sp, #-8]!
  403384:	f7ff ffce 	bl	403324 <__aeabi_cdrcmple>
  403388:	bf94      	ite	ls
  40338a:	2001      	movls	r0, #1
  40338c:	2000      	movhi	r0, #0
  40338e:	f85d fb08 	ldr.w	pc, [sp], #8
  403392:	bf00      	nop

00403394 <__aeabi_dcmpgt>:
  403394:	f84d ed08 	str.w	lr, [sp, #-8]!
  403398:	f7ff ffc4 	bl	403324 <__aeabi_cdrcmple>
  40339c:	bf34      	ite	cc
  40339e:	2001      	movcc	r0, #1
  4033a0:	2000      	movcs	r0, #0
  4033a2:	f85d fb08 	ldr.w	pc, [sp], #8
  4033a6:	bf00      	nop

004033a8 <__aeabi_dcmpun>:
  4033a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4033ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4033b0:	d102      	bne.n	4033b8 <__aeabi_dcmpun+0x10>
  4033b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4033b6:	d10a      	bne.n	4033ce <__aeabi_dcmpun+0x26>
  4033b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4033bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4033c0:	d102      	bne.n	4033c8 <__aeabi_dcmpun+0x20>
  4033c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4033c6:	d102      	bne.n	4033ce <__aeabi_dcmpun+0x26>
  4033c8:	f04f 0000 	mov.w	r0, #0
  4033cc:	4770      	bx	lr
  4033ce:	f04f 0001 	mov.w	r0, #1
  4033d2:	4770      	bx	lr

004033d4 <__aeabi_d2uiz>:
  4033d4:	004a      	lsls	r2, r1, #1
  4033d6:	d211      	bcs.n	4033fc <__aeabi_d2uiz+0x28>
  4033d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4033dc:	d211      	bcs.n	403402 <__aeabi_d2uiz+0x2e>
  4033de:	d50d      	bpl.n	4033fc <__aeabi_d2uiz+0x28>
  4033e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4033e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4033e8:	d40e      	bmi.n	403408 <__aeabi_d2uiz+0x34>
  4033ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4033ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4033f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4033f6:	fa23 f002 	lsr.w	r0, r3, r2
  4033fa:	4770      	bx	lr
  4033fc:	f04f 0000 	mov.w	r0, #0
  403400:	4770      	bx	lr
  403402:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403406:	d102      	bne.n	40340e <__aeabi_d2uiz+0x3a>
  403408:	f04f 30ff 	mov.w	r0, #4294967295
  40340c:	4770      	bx	lr
  40340e:	f04f 0000 	mov.w	r0, #0
  403412:	4770      	bx	lr

00403414 <__aeabi_ldivmod>:
  403414:	b97b      	cbnz	r3, 403436 <__aeabi_ldivmod+0x22>
  403416:	b972      	cbnz	r2, 403436 <__aeabi_ldivmod+0x22>
  403418:	2900      	cmp	r1, #0
  40341a:	bfbe      	ittt	lt
  40341c:	2000      	movlt	r0, #0
  40341e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
  403422:	e006      	blt.n	403432 <__aeabi_ldivmod+0x1e>
  403424:	bf08      	it	eq
  403426:	2800      	cmpeq	r0, #0
  403428:	bf1c      	itt	ne
  40342a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
  40342e:	f04f 30ff 	movne.w	r0, #4294967295
  403432:	f000 b9eb 	b.w	40380c <__aeabi_idiv0>
  403436:	f1ad 0c08 	sub.w	ip, sp, #8
  40343a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40343e:	2900      	cmp	r1, #0
  403440:	db09      	blt.n	403456 <__aeabi_ldivmod+0x42>
  403442:	2b00      	cmp	r3, #0
  403444:	db1a      	blt.n	40347c <__aeabi_ldivmod+0x68>
  403446:	f000 f873 	bl	403530 <__udivmoddi4>
  40344a:	f8dd e004 	ldr.w	lr, [sp, #4]
  40344e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403452:	b004      	add	sp, #16
  403454:	4770      	bx	lr
  403456:	4240      	negs	r0, r0
  403458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40345c:	2b00      	cmp	r3, #0
  40345e:	db1b      	blt.n	403498 <__aeabi_ldivmod+0x84>
  403460:	f000 f866 	bl	403530 <__udivmoddi4>
  403464:	f8dd e004 	ldr.w	lr, [sp, #4]
  403468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40346c:	b004      	add	sp, #16
  40346e:	4240      	negs	r0, r0
  403470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403474:	4252      	negs	r2, r2
  403476:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40347a:	4770      	bx	lr
  40347c:	4252      	negs	r2, r2
  40347e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403482:	f000 f855 	bl	403530 <__udivmoddi4>
  403486:	f8dd e004 	ldr.w	lr, [sp, #4]
  40348a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40348e:	b004      	add	sp, #16
  403490:	4240      	negs	r0, r0
  403492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403496:	4770      	bx	lr
  403498:	4252      	negs	r2, r2
  40349a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40349e:	f000 f847 	bl	403530 <__udivmoddi4>
  4034a2:	f8dd e004 	ldr.w	lr, [sp, #4]
  4034a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4034aa:	b004      	add	sp, #16
  4034ac:	4252      	negs	r2, r2
  4034ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4034b2:	4770      	bx	lr

004034b4 <__aeabi_d2lz>:
  4034b4:	b538      	push	{r3, r4, r5, lr}
  4034b6:	4605      	mov	r5, r0
  4034b8:	460c      	mov	r4, r1
  4034ba:	4628      	mov	r0, r5
  4034bc:	4621      	mov	r1, r4
  4034be:	2200      	movs	r2, #0
  4034c0:	2300      	movs	r3, #0
  4034c2:	f7ff ff49 	bl	403358 <__aeabi_dcmplt>
  4034c6:	b928      	cbnz	r0, 4034d4 <__aeabi_d2lz+0x20>
  4034c8:	4628      	mov	r0, r5
  4034ca:	4621      	mov	r1, r4
  4034cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4034d0:	f000 b80a 	b.w	4034e8 <__aeabi_d2ulz>
  4034d4:	4628      	mov	r0, r5
  4034d6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  4034da:	f000 f805 	bl	4034e8 <__aeabi_d2ulz>
  4034de:	4240      	negs	r0, r0
  4034e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4034e4:	bd38      	pop	{r3, r4, r5, pc}
  4034e6:	bf00      	nop

004034e8 <__aeabi_d2ulz>:
  4034e8:	b5d0      	push	{r4, r6, r7, lr}
  4034ea:	2200      	movs	r2, #0
  4034ec:	4b0e      	ldr	r3, [pc, #56]	; (403528 <__aeabi_d2ulz+0x40>)
  4034ee:	4606      	mov	r6, r0
  4034f0:	460f      	mov	r7, r1
  4034f2:	f7ff fcbf 	bl	402e74 <__aeabi_dmul>
  4034f6:	f7ff ff6d 	bl	4033d4 <__aeabi_d2uiz>
  4034fa:	4604      	mov	r4, r0
  4034fc:	f7ff fc44 	bl	402d88 <__aeabi_ui2d>
  403500:	2200      	movs	r2, #0
  403502:	4b0a      	ldr	r3, [pc, #40]	; (40352c <__aeabi_d2ulz+0x44>)
  403504:	f7ff fcb6 	bl	402e74 <__aeabi_dmul>
  403508:	4602      	mov	r2, r0
  40350a:	460b      	mov	r3, r1
  40350c:	4630      	mov	r0, r6
  40350e:	4639      	mov	r1, r7
  403510:	f7ff fafc 	bl	402b0c <__aeabi_dsub>
  403514:	f7ff ff5e 	bl	4033d4 <__aeabi_d2uiz>
  403518:	4623      	mov	r3, r4
  40351a:	2200      	movs	r2, #0
  40351c:	ea42 0200 	orr.w	r2, r2, r0
  403520:	4610      	mov	r0, r2
  403522:	4619      	mov	r1, r3
  403524:	bdd0      	pop	{r4, r6, r7, pc}
  403526:	bf00      	nop
  403528:	3df00000 	.word	0x3df00000
  40352c:	41f00000 	.word	0x41f00000

00403530 <__udivmoddi4>:
  403530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403534:	468c      	mov	ip, r1
  403536:	460d      	mov	r5, r1
  403538:	4604      	mov	r4, r0
  40353a:	9e08      	ldr	r6, [sp, #32]
  40353c:	2b00      	cmp	r3, #0
  40353e:	d151      	bne.n	4035e4 <__udivmoddi4+0xb4>
  403540:	428a      	cmp	r2, r1
  403542:	4617      	mov	r7, r2
  403544:	d96d      	bls.n	403622 <__udivmoddi4+0xf2>
  403546:	fab2 fe82 	clz	lr, r2
  40354a:	f1be 0f00 	cmp.w	lr, #0
  40354e:	d00b      	beq.n	403568 <__udivmoddi4+0x38>
  403550:	f1ce 0c20 	rsb	ip, lr, #32
  403554:	fa01 f50e 	lsl.w	r5, r1, lr
  403558:	fa20 fc0c 	lsr.w	ip, r0, ip
  40355c:	fa02 f70e 	lsl.w	r7, r2, lr
  403560:	ea4c 0c05 	orr.w	ip, ip, r5
  403564:	fa00 f40e 	lsl.w	r4, r0, lr
  403568:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40356c:	0c25      	lsrs	r5, r4, #16
  40356e:	fbbc f8fa 	udiv	r8, ip, sl
  403572:	fa1f f987 	uxth.w	r9, r7
  403576:	fb0a cc18 	mls	ip, sl, r8, ip
  40357a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40357e:	fb08 f309 	mul.w	r3, r8, r9
  403582:	42ab      	cmp	r3, r5
  403584:	d90a      	bls.n	40359c <__udivmoddi4+0x6c>
  403586:	19ed      	adds	r5, r5, r7
  403588:	f108 32ff 	add.w	r2, r8, #4294967295
  40358c:	f080 8123 	bcs.w	4037d6 <__udivmoddi4+0x2a6>
  403590:	42ab      	cmp	r3, r5
  403592:	f240 8120 	bls.w	4037d6 <__udivmoddi4+0x2a6>
  403596:	f1a8 0802 	sub.w	r8, r8, #2
  40359a:	443d      	add	r5, r7
  40359c:	1aed      	subs	r5, r5, r3
  40359e:	b2a4      	uxth	r4, r4
  4035a0:	fbb5 f0fa 	udiv	r0, r5, sl
  4035a4:	fb0a 5510 	mls	r5, sl, r0, r5
  4035a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4035ac:	fb00 f909 	mul.w	r9, r0, r9
  4035b0:	45a1      	cmp	r9, r4
  4035b2:	d909      	bls.n	4035c8 <__udivmoddi4+0x98>
  4035b4:	19e4      	adds	r4, r4, r7
  4035b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4035ba:	f080 810a 	bcs.w	4037d2 <__udivmoddi4+0x2a2>
  4035be:	45a1      	cmp	r9, r4
  4035c0:	f240 8107 	bls.w	4037d2 <__udivmoddi4+0x2a2>
  4035c4:	3802      	subs	r0, #2
  4035c6:	443c      	add	r4, r7
  4035c8:	eba4 0409 	sub.w	r4, r4, r9
  4035cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4035d0:	2100      	movs	r1, #0
  4035d2:	2e00      	cmp	r6, #0
  4035d4:	d061      	beq.n	40369a <__udivmoddi4+0x16a>
  4035d6:	fa24 f40e 	lsr.w	r4, r4, lr
  4035da:	2300      	movs	r3, #0
  4035dc:	6034      	str	r4, [r6, #0]
  4035de:	6073      	str	r3, [r6, #4]
  4035e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4035e4:	428b      	cmp	r3, r1
  4035e6:	d907      	bls.n	4035f8 <__udivmoddi4+0xc8>
  4035e8:	2e00      	cmp	r6, #0
  4035ea:	d054      	beq.n	403696 <__udivmoddi4+0x166>
  4035ec:	2100      	movs	r1, #0
  4035ee:	e886 0021 	stmia.w	r6, {r0, r5}
  4035f2:	4608      	mov	r0, r1
  4035f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4035f8:	fab3 f183 	clz	r1, r3
  4035fc:	2900      	cmp	r1, #0
  4035fe:	f040 808e 	bne.w	40371e <__udivmoddi4+0x1ee>
  403602:	42ab      	cmp	r3, r5
  403604:	d302      	bcc.n	40360c <__udivmoddi4+0xdc>
  403606:	4282      	cmp	r2, r0
  403608:	f200 80fa 	bhi.w	403800 <__udivmoddi4+0x2d0>
  40360c:	1a84      	subs	r4, r0, r2
  40360e:	eb65 0503 	sbc.w	r5, r5, r3
  403612:	2001      	movs	r0, #1
  403614:	46ac      	mov	ip, r5
  403616:	2e00      	cmp	r6, #0
  403618:	d03f      	beq.n	40369a <__udivmoddi4+0x16a>
  40361a:	e886 1010 	stmia.w	r6, {r4, ip}
  40361e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403622:	b912      	cbnz	r2, 40362a <__udivmoddi4+0xfa>
  403624:	2701      	movs	r7, #1
  403626:	fbb7 f7f2 	udiv	r7, r7, r2
  40362a:	fab7 fe87 	clz	lr, r7
  40362e:	f1be 0f00 	cmp.w	lr, #0
  403632:	d134      	bne.n	40369e <__udivmoddi4+0x16e>
  403634:	1beb      	subs	r3, r5, r7
  403636:	0c3a      	lsrs	r2, r7, #16
  403638:	fa1f fc87 	uxth.w	ip, r7
  40363c:	2101      	movs	r1, #1
  40363e:	fbb3 f8f2 	udiv	r8, r3, r2
  403642:	0c25      	lsrs	r5, r4, #16
  403644:	fb02 3318 	mls	r3, r2, r8, r3
  403648:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40364c:	fb0c f308 	mul.w	r3, ip, r8
  403650:	42ab      	cmp	r3, r5
  403652:	d907      	bls.n	403664 <__udivmoddi4+0x134>
  403654:	19ed      	adds	r5, r5, r7
  403656:	f108 30ff 	add.w	r0, r8, #4294967295
  40365a:	d202      	bcs.n	403662 <__udivmoddi4+0x132>
  40365c:	42ab      	cmp	r3, r5
  40365e:	f200 80d1 	bhi.w	403804 <__udivmoddi4+0x2d4>
  403662:	4680      	mov	r8, r0
  403664:	1aed      	subs	r5, r5, r3
  403666:	b2a3      	uxth	r3, r4
  403668:	fbb5 f0f2 	udiv	r0, r5, r2
  40366c:	fb02 5510 	mls	r5, r2, r0, r5
  403670:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403674:	fb0c fc00 	mul.w	ip, ip, r0
  403678:	45a4      	cmp	ip, r4
  40367a:	d907      	bls.n	40368c <__udivmoddi4+0x15c>
  40367c:	19e4      	adds	r4, r4, r7
  40367e:	f100 33ff 	add.w	r3, r0, #4294967295
  403682:	d202      	bcs.n	40368a <__udivmoddi4+0x15a>
  403684:	45a4      	cmp	ip, r4
  403686:	f200 80b8 	bhi.w	4037fa <__udivmoddi4+0x2ca>
  40368a:	4618      	mov	r0, r3
  40368c:	eba4 040c 	sub.w	r4, r4, ip
  403690:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403694:	e79d      	b.n	4035d2 <__udivmoddi4+0xa2>
  403696:	4631      	mov	r1, r6
  403698:	4630      	mov	r0, r6
  40369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40369e:	f1ce 0420 	rsb	r4, lr, #32
  4036a2:	fa05 f30e 	lsl.w	r3, r5, lr
  4036a6:	fa07 f70e 	lsl.w	r7, r7, lr
  4036aa:	fa20 f804 	lsr.w	r8, r0, r4
  4036ae:	0c3a      	lsrs	r2, r7, #16
  4036b0:	fa25 f404 	lsr.w	r4, r5, r4
  4036b4:	ea48 0803 	orr.w	r8, r8, r3
  4036b8:	fbb4 f1f2 	udiv	r1, r4, r2
  4036bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4036c0:	fb02 4411 	mls	r4, r2, r1, r4
  4036c4:	fa1f fc87 	uxth.w	ip, r7
  4036c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4036cc:	fb01 f30c 	mul.w	r3, r1, ip
  4036d0:	42ab      	cmp	r3, r5
  4036d2:	fa00 f40e 	lsl.w	r4, r0, lr
  4036d6:	d909      	bls.n	4036ec <__udivmoddi4+0x1bc>
  4036d8:	19ed      	adds	r5, r5, r7
  4036da:	f101 30ff 	add.w	r0, r1, #4294967295
  4036de:	f080 808a 	bcs.w	4037f6 <__udivmoddi4+0x2c6>
  4036e2:	42ab      	cmp	r3, r5
  4036e4:	f240 8087 	bls.w	4037f6 <__udivmoddi4+0x2c6>
  4036e8:	3902      	subs	r1, #2
  4036ea:	443d      	add	r5, r7
  4036ec:	1aeb      	subs	r3, r5, r3
  4036ee:	fa1f f588 	uxth.w	r5, r8
  4036f2:	fbb3 f0f2 	udiv	r0, r3, r2
  4036f6:	fb02 3310 	mls	r3, r2, r0, r3
  4036fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4036fe:	fb00 f30c 	mul.w	r3, r0, ip
  403702:	42ab      	cmp	r3, r5
  403704:	d907      	bls.n	403716 <__udivmoddi4+0x1e6>
  403706:	19ed      	adds	r5, r5, r7
  403708:	f100 38ff 	add.w	r8, r0, #4294967295
  40370c:	d26f      	bcs.n	4037ee <__udivmoddi4+0x2be>
  40370e:	42ab      	cmp	r3, r5
  403710:	d96d      	bls.n	4037ee <__udivmoddi4+0x2be>
  403712:	3802      	subs	r0, #2
  403714:	443d      	add	r5, r7
  403716:	1aeb      	subs	r3, r5, r3
  403718:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40371c:	e78f      	b.n	40363e <__udivmoddi4+0x10e>
  40371e:	f1c1 0720 	rsb	r7, r1, #32
  403722:	fa22 f807 	lsr.w	r8, r2, r7
  403726:	408b      	lsls	r3, r1
  403728:	fa05 f401 	lsl.w	r4, r5, r1
  40372c:	ea48 0303 	orr.w	r3, r8, r3
  403730:	fa20 fe07 	lsr.w	lr, r0, r7
  403734:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403738:	40fd      	lsrs	r5, r7
  40373a:	ea4e 0e04 	orr.w	lr, lr, r4
  40373e:	fbb5 f9fc 	udiv	r9, r5, ip
  403742:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403746:	fb0c 5519 	mls	r5, ip, r9, r5
  40374a:	fa1f f883 	uxth.w	r8, r3
  40374e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403752:	fb09 f408 	mul.w	r4, r9, r8
  403756:	42ac      	cmp	r4, r5
  403758:	fa02 f201 	lsl.w	r2, r2, r1
  40375c:	fa00 fa01 	lsl.w	sl, r0, r1
  403760:	d908      	bls.n	403774 <__udivmoddi4+0x244>
  403762:	18ed      	adds	r5, r5, r3
  403764:	f109 30ff 	add.w	r0, r9, #4294967295
  403768:	d243      	bcs.n	4037f2 <__udivmoddi4+0x2c2>
  40376a:	42ac      	cmp	r4, r5
  40376c:	d941      	bls.n	4037f2 <__udivmoddi4+0x2c2>
  40376e:	f1a9 0902 	sub.w	r9, r9, #2
  403772:	441d      	add	r5, r3
  403774:	1b2d      	subs	r5, r5, r4
  403776:	fa1f fe8e 	uxth.w	lr, lr
  40377a:	fbb5 f0fc 	udiv	r0, r5, ip
  40377e:	fb0c 5510 	mls	r5, ip, r0, r5
  403782:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403786:	fb00 f808 	mul.w	r8, r0, r8
  40378a:	45a0      	cmp	r8, r4
  40378c:	d907      	bls.n	40379e <__udivmoddi4+0x26e>
  40378e:	18e4      	adds	r4, r4, r3
  403790:	f100 35ff 	add.w	r5, r0, #4294967295
  403794:	d229      	bcs.n	4037ea <__udivmoddi4+0x2ba>
  403796:	45a0      	cmp	r8, r4
  403798:	d927      	bls.n	4037ea <__udivmoddi4+0x2ba>
  40379a:	3802      	subs	r0, #2
  40379c:	441c      	add	r4, r3
  40379e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4037a2:	eba4 0408 	sub.w	r4, r4, r8
  4037a6:	fba0 8902 	umull	r8, r9, r0, r2
  4037aa:	454c      	cmp	r4, r9
  4037ac:	46c6      	mov	lr, r8
  4037ae:	464d      	mov	r5, r9
  4037b0:	d315      	bcc.n	4037de <__udivmoddi4+0x2ae>
  4037b2:	d012      	beq.n	4037da <__udivmoddi4+0x2aa>
  4037b4:	b156      	cbz	r6, 4037cc <__udivmoddi4+0x29c>
  4037b6:	ebba 030e 	subs.w	r3, sl, lr
  4037ba:	eb64 0405 	sbc.w	r4, r4, r5
  4037be:	fa04 f707 	lsl.w	r7, r4, r7
  4037c2:	40cb      	lsrs	r3, r1
  4037c4:	431f      	orrs	r7, r3
  4037c6:	40cc      	lsrs	r4, r1
  4037c8:	6037      	str	r7, [r6, #0]
  4037ca:	6074      	str	r4, [r6, #4]
  4037cc:	2100      	movs	r1, #0
  4037ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037d2:	4618      	mov	r0, r3
  4037d4:	e6f8      	b.n	4035c8 <__udivmoddi4+0x98>
  4037d6:	4690      	mov	r8, r2
  4037d8:	e6e0      	b.n	40359c <__udivmoddi4+0x6c>
  4037da:	45c2      	cmp	sl, r8
  4037dc:	d2ea      	bcs.n	4037b4 <__udivmoddi4+0x284>
  4037de:	ebb8 0e02 	subs.w	lr, r8, r2
  4037e2:	eb69 0503 	sbc.w	r5, r9, r3
  4037e6:	3801      	subs	r0, #1
  4037e8:	e7e4      	b.n	4037b4 <__udivmoddi4+0x284>
  4037ea:	4628      	mov	r0, r5
  4037ec:	e7d7      	b.n	40379e <__udivmoddi4+0x26e>
  4037ee:	4640      	mov	r0, r8
  4037f0:	e791      	b.n	403716 <__udivmoddi4+0x1e6>
  4037f2:	4681      	mov	r9, r0
  4037f4:	e7be      	b.n	403774 <__udivmoddi4+0x244>
  4037f6:	4601      	mov	r1, r0
  4037f8:	e778      	b.n	4036ec <__udivmoddi4+0x1bc>
  4037fa:	3802      	subs	r0, #2
  4037fc:	443c      	add	r4, r7
  4037fe:	e745      	b.n	40368c <__udivmoddi4+0x15c>
  403800:	4608      	mov	r0, r1
  403802:	e708      	b.n	403616 <__udivmoddi4+0xe6>
  403804:	f1a8 0802 	sub.w	r8, r8, #2
  403808:	443d      	add	r5, r7
  40380a:	e72b      	b.n	403664 <__udivmoddi4+0x134>

0040380c <__aeabi_idiv0>:
  40380c:	4770      	bx	lr
  40380e:	bf00      	nop

00403810 <__errno>:
  403810:	4b01      	ldr	r3, [pc, #4]	; (403818 <__errno+0x8>)
  403812:	6818      	ldr	r0, [r3, #0]
  403814:	4770      	bx	lr
  403816:	bf00      	nop
  403818:	20000014 	.word	0x20000014

0040381c <__libc_init_array>:
  40381c:	b570      	push	{r4, r5, r6, lr}
  40381e:	4e0f      	ldr	r6, [pc, #60]	; (40385c <__libc_init_array+0x40>)
  403820:	4d0f      	ldr	r5, [pc, #60]	; (403860 <__libc_init_array+0x44>)
  403822:	1b76      	subs	r6, r6, r5
  403824:	10b6      	asrs	r6, r6, #2
  403826:	bf18      	it	ne
  403828:	2400      	movne	r4, #0
  40382a:	d005      	beq.n	403838 <__libc_init_array+0x1c>
  40382c:	3401      	adds	r4, #1
  40382e:	f855 3b04 	ldr.w	r3, [r5], #4
  403832:	4798      	blx	r3
  403834:	42a6      	cmp	r6, r4
  403836:	d1f9      	bne.n	40382c <__libc_init_array+0x10>
  403838:	4e0a      	ldr	r6, [pc, #40]	; (403864 <__libc_init_array+0x48>)
  40383a:	4d0b      	ldr	r5, [pc, #44]	; (403868 <__libc_init_array+0x4c>)
  40383c:	1b76      	subs	r6, r6, r5
  40383e:	f001 f879 	bl	404934 <_init>
  403842:	10b6      	asrs	r6, r6, #2
  403844:	bf18      	it	ne
  403846:	2400      	movne	r4, #0
  403848:	d006      	beq.n	403858 <__libc_init_array+0x3c>
  40384a:	3401      	adds	r4, #1
  40384c:	f855 3b04 	ldr.w	r3, [r5], #4
  403850:	4798      	blx	r3
  403852:	42a6      	cmp	r6, r4
  403854:	d1f9      	bne.n	40384a <__libc_init_array+0x2e>
  403856:	bd70      	pop	{r4, r5, r6, pc}
  403858:	bd70      	pop	{r4, r5, r6, pc}
  40385a:	bf00      	nop
  40385c:	00404940 	.word	0x00404940
  403860:	00404940 	.word	0x00404940
  403864:	00404948 	.word	0x00404948
  403868:	00404940 	.word	0x00404940

0040386c <memset>:
  40386c:	b470      	push	{r4, r5, r6}
  40386e:	0786      	lsls	r6, r0, #30
  403870:	d046      	beq.n	403900 <memset+0x94>
  403872:	1e54      	subs	r4, r2, #1
  403874:	2a00      	cmp	r2, #0
  403876:	d041      	beq.n	4038fc <memset+0x90>
  403878:	b2ca      	uxtb	r2, r1
  40387a:	4603      	mov	r3, r0
  40387c:	e002      	b.n	403884 <memset+0x18>
  40387e:	f114 34ff 	adds.w	r4, r4, #4294967295
  403882:	d33b      	bcc.n	4038fc <memset+0x90>
  403884:	f803 2b01 	strb.w	r2, [r3], #1
  403888:	079d      	lsls	r5, r3, #30
  40388a:	d1f8      	bne.n	40387e <memset+0x12>
  40388c:	2c03      	cmp	r4, #3
  40388e:	d92e      	bls.n	4038ee <memset+0x82>
  403890:	b2cd      	uxtb	r5, r1
  403892:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403896:	2c0f      	cmp	r4, #15
  403898:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40389c:	d919      	bls.n	4038d2 <memset+0x66>
  40389e:	f103 0210 	add.w	r2, r3, #16
  4038a2:	4626      	mov	r6, r4
  4038a4:	3e10      	subs	r6, #16
  4038a6:	2e0f      	cmp	r6, #15
  4038a8:	f842 5c10 	str.w	r5, [r2, #-16]
  4038ac:	f842 5c0c 	str.w	r5, [r2, #-12]
  4038b0:	f842 5c08 	str.w	r5, [r2, #-8]
  4038b4:	f842 5c04 	str.w	r5, [r2, #-4]
  4038b8:	f102 0210 	add.w	r2, r2, #16
  4038bc:	d8f2      	bhi.n	4038a4 <memset+0x38>
  4038be:	f1a4 0210 	sub.w	r2, r4, #16
  4038c2:	f022 020f 	bic.w	r2, r2, #15
  4038c6:	f004 040f 	and.w	r4, r4, #15
  4038ca:	3210      	adds	r2, #16
  4038cc:	2c03      	cmp	r4, #3
  4038ce:	4413      	add	r3, r2
  4038d0:	d90d      	bls.n	4038ee <memset+0x82>
  4038d2:	461e      	mov	r6, r3
  4038d4:	4622      	mov	r2, r4
  4038d6:	3a04      	subs	r2, #4
  4038d8:	2a03      	cmp	r2, #3
  4038da:	f846 5b04 	str.w	r5, [r6], #4
  4038de:	d8fa      	bhi.n	4038d6 <memset+0x6a>
  4038e0:	1f22      	subs	r2, r4, #4
  4038e2:	f022 0203 	bic.w	r2, r2, #3
  4038e6:	3204      	adds	r2, #4
  4038e8:	4413      	add	r3, r2
  4038ea:	f004 0403 	and.w	r4, r4, #3
  4038ee:	b12c      	cbz	r4, 4038fc <memset+0x90>
  4038f0:	b2c9      	uxtb	r1, r1
  4038f2:	441c      	add	r4, r3
  4038f4:	f803 1b01 	strb.w	r1, [r3], #1
  4038f8:	429c      	cmp	r4, r3
  4038fa:	d1fb      	bne.n	4038f4 <memset+0x88>
  4038fc:	bc70      	pop	{r4, r5, r6}
  4038fe:	4770      	bx	lr
  403900:	4614      	mov	r4, r2
  403902:	4603      	mov	r3, r0
  403904:	e7c2      	b.n	40388c <memset+0x20>
  403906:	bf00      	nop

00403908 <setbuf>:
  403908:	2900      	cmp	r1, #0
  40390a:	bf0c      	ite	eq
  40390c:	2202      	moveq	r2, #2
  40390e:	2200      	movne	r2, #0
  403910:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403914:	f000 b800 	b.w	403918 <setvbuf>

00403918 <setvbuf>:
  403918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40391c:	4c61      	ldr	r4, [pc, #388]	; (403aa4 <setvbuf+0x18c>)
  40391e:	6825      	ldr	r5, [r4, #0]
  403920:	b083      	sub	sp, #12
  403922:	4604      	mov	r4, r0
  403924:	460f      	mov	r7, r1
  403926:	4690      	mov	r8, r2
  403928:	461e      	mov	r6, r3
  40392a:	b115      	cbz	r5, 403932 <setvbuf+0x1a>
  40392c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40392e:	2b00      	cmp	r3, #0
  403930:	d064      	beq.n	4039fc <setvbuf+0xe4>
  403932:	f1b8 0f02 	cmp.w	r8, #2
  403936:	d006      	beq.n	403946 <setvbuf+0x2e>
  403938:	f1b8 0f01 	cmp.w	r8, #1
  40393c:	f200 809f 	bhi.w	403a7e <setvbuf+0x166>
  403940:	2e00      	cmp	r6, #0
  403942:	f2c0 809c 	blt.w	403a7e <setvbuf+0x166>
  403946:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403948:	07d8      	lsls	r0, r3, #31
  40394a:	d534      	bpl.n	4039b6 <setvbuf+0x9e>
  40394c:	4621      	mov	r1, r4
  40394e:	4628      	mov	r0, r5
  403950:	f000 f95a 	bl	403c08 <_fflush_r>
  403954:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403956:	b141      	cbz	r1, 40396a <setvbuf+0x52>
  403958:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40395c:	4299      	cmp	r1, r3
  40395e:	d002      	beq.n	403966 <setvbuf+0x4e>
  403960:	4628      	mov	r0, r5
  403962:	f000 fa4b 	bl	403dfc <_free_r>
  403966:	2300      	movs	r3, #0
  403968:	6323      	str	r3, [r4, #48]	; 0x30
  40396a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40396e:	2200      	movs	r2, #0
  403970:	61a2      	str	r2, [r4, #24]
  403972:	6062      	str	r2, [r4, #4]
  403974:	061a      	lsls	r2, r3, #24
  403976:	d43a      	bmi.n	4039ee <setvbuf+0xd6>
  403978:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40397c:	f023 0303 	bic.w	r3, r3, #3
  403980:	f1b8 0f02 	cmp.w	r8, #2
  403984:	81a3      	strh	r3, [r4, #12]
  403986:	d01d      	beq.n	4039c4 <setvbuf+0xac>
  403988:	ab01      	add	r3, sp, #4
  40398a:	466a      	mov	r2, sp
  40398c:	4621      	mov	r1, r4
  40398e:	4628      	mov	r0, r5
  403990:	f000 fb4c 	bl	40402c <__swhatbuf_r>
  403994:	89a3      	ldrh	r3, [r4, #12]
  403996:	4318      	orrs	r0, r3
  403998:	81a0      	strh	r0, [r4, #12]
  40399a:	2e00      	cmp	r6, #0
  40399c:	d132      	bne.n	403a04 <setvbuf+0xec>
  40399e:	9e00      	ldr	r6, [sp, #0]
  4039a0:	4630      	mov	r0, r6
  4039a2:	f000 fb71 	bl	404088 <malloc>
  4039a6:	4607      	mov	r7, r0
  4039a8:	2800      	cmp	r0, #0
  4039aa:	d06b      	beq.n	403a84 <setvbuf+0x16c>
  4039ac:	89a3      	ldrh	r3, [r4, #12]
  4039ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4039b2:	81a3      	strh	r3, [r4, #12]
  4039b4:	e028      	b.n	403a08 <setvbuf+0xf0>
  4039b6:	89a3      	ldrh	r3, [r4, #12]
  4039b8:	0599      	lsls	r1, r3, #22
  4039ba:	d4c7      	bmi.n	40394c <setvbuf+0x34>
  4039bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4039be:	f000 fb31 	bl	404024 <__retarget_lock_acquire_recursive>
  4039c2:	e7c3      	b.n	40394c <setvbuf+0x34>
  4039c4:	2500      	movs	r5, #0
  4039c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4039c8:	2600      	movs	r6, #0
  4039ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4039ce:	f043 0302 	orr.w	r3, r3, #2
  4039d2:	2001      	movs	r0, #1
  4039d4:	60a6      	str	r6, [r4, #8]
  4039d6:	07ce      	lsls	r6, r1, #31
  4039d8:	81a3      	strh	r3, [r4, #12]
  4039da:	6022      	str	r2, [r4, #0]
  4039dc:	6122      	str	r2, [r4, #16]
  4039de:	6160      	str	r0, [r4, #20]
  4039e0:	d401      	bmi.n	4039e6 <setvbuf+0xce>
  4039e2:	0598      	lsls	r0, r3, #22
  4039e4:	d53e      	bpl.n	403a64 <setvbuf+0x14c>
  4039e6:	4628      	mov	r0, r5
  4039e8:	b003      	add	sp, #12
  4039ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4039ee:	6921      	ldr	r1, [r4, #16]
  4039f0:	4628      	mov	r0, r5
  4039f2:	f000 fa03 	bl	403dfc <_free_r>
  4039f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039fa:	e7bd      	b.n	403978 <setvbuf+0x60>
  4039fc:	4628      	mov	r0, r5
  4039fe:	f000 f95b 	bl	403cb8 <__sinit>
  403a02:	e796      	b.n	403932 <setvbuf+0x1a>
  403a04:	2f00      	cmp	r7, #0
  403a06:	d0cb      	beq.n	4039a0 <setvbuf+0x88>
  403a08:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403a0a:	2b00      	cmp	r3, #0
  403a0c:	d033      	beq.n	403a76 <setvbuf+0x15e>
  403a0e:	9b00      	ldr	r3, [sp, #0]
  403a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a14:	6027      	str	r7, [r4, #0]
  403a16:	429e      	cmp	r6, r3
  403a18:	bf1c      	itt	ne
  403a1a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403a1e:	81a2      	strhne	r2, [r4, #12]
  403a20:	f1b8 0f01 	cmp.w	r8, #1
  403a24:	bf04      	itt	eq
  403a26:	f042 0201 	orreq.w	r2, r2, #1
  403a2a:	81a2      	strheq	r2, [r4, #12]
  403a2c:	b292      	uxth	r2, r2
  403a2e:	f012 0308 	ands.w	r3, r2, #8
  403a32:	6127      	str	r7, [r4, #16]
  403a34:	6166      	str	r6, [r4, #20]
  403a36:	d00e      	beq.n	403a56 <setvbuf+0x13e>
  403a38:	07d1      	lsls	r1, r2, #31
  403a3a:	d51a      	bpl.n	403a72 <setvbuf+0x15a>
  403a3c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403a3e:	4276      	negs	r6, r6
  403a40:	2300      	movs	r3, #0
  403a42:	f015 0501 	ands.w	r5, r5, #1
  403a46:	61a6      	str	r6, [r4, #24]
  403a48:	60a3      	str	r3, [r4, #8]
  403a4a:	d009      	beq.n	403a60 <setvbuf+0x148>
  403a4c:	2500      	movs	r5, #0
  403a4e:	4628      	mov	r0, r5
  403a50:	b003      	add	sp, #12
  403a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403a56:	60a3      	str	r3, [r4, #8]
  403a58:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403a5a:	f015 0501 	ands.w	r5, r5, #1
  403a5e:	d1f5      	bne.n	403a4c <setvbuf+0x134>
  403a60:	0593      	lsls	r3, r2, #22
  403a62:	d4c0      	bmi.n	4039e6 <setvbuf+0xce>
  403a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a66:	f000 fadf 	bl	404028 <__retarget_lock_release_recursive>
  403a6a:	4628      	mov	r0, r5
  403a6c:	b003      	add	sp, #12
  403a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403a72:	60a6      	str	r6, [r4, #8]
  403a74:	e7f0      	b.n	403a58 <setvbuf+0x140>
  403a76:	4628      	mov	r0, r5
  403a78:	f000 f91e 	bl	403cb8 <__sinit>
  403a7c:	e7c7      	b.n	403a0e <setvbuf+0xf6>
  403a7e:	f04f 35ff 	mov.w	r5, #4294967295
  403a82:	e7b0      	b.n	4039e6 <setvbuf+0xce>
  403a84:	f8dd 9000 	ldr.w	r9, [sp]
  403a88:	45b1      	cmp	r9, r6
  403a8a:	d004      	beq.n	403a96 <setvbuf+0x17e>
  403a8c:	4648      	mov	r0, r9
  403a8e:	f000 fafb 	bl	404088 <malloc>
  403a92:	4607      	mov	r7, r0
  403a94:	b920      	cbnz	r0, 403aa0 <setvbuf+0x188>
  403a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a9a:	f04f 35ff 	mov.w	r5, #4294967295
  403a9e:	e792      	b.n	4039c6 <setvbuf+0xae>
  403aa0:	464e      	mov	r6, r9
  403aa2:	e783      	b.n	4039ac <setvbuf+0x94>
  403aa4:	20000014 	.word	0x20000014

00403aa8 <register_fini>:
  403aa8:	4b02      	ldr	r3, [pc, #8]	; (403ab4 <register_fini+0xc>)
  403aaa:	b113      	cbz	r3, 403ab2 <register_fini+0xa>
  403aac:	4802      	ldr	r0, [pc, #8]	; (403ab8 <register_fini+0x10>)
  403aae:	f000 b805 	b.w	403abc <atexit>
  403ab2:	4770      	bx	lr
  403ab4:	00000000 	.word	0x00000000
  403ab8:	00403d29 	.word	0x00403d29

00403abc <atexit>:
  403abc:	2300      	movs	r3, #0
  403abe:	4601      	mov	r1, r0
  403ac0:	461a      	mov	r2, r3
  403ac2:	4618      	mov	r0, r3
  403ac4:	f000 be10 	b.w	4046e8 <__register_exitproc>

00403ac8 <__sflush_r>:
  403ac8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403acc:	b29a      	uxth	r2, r3
  403ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ad2:	460d      	mov	r5, r1
  403ad4:	0711      	lsls	r1, r2, #28
  403ad6:	4680      	mov	r8, r0
  403ad8:	d43a      	bmi.n	403b50 <__sflush_r+0x88>
  403ada:	686a      	ldr	r2, [r5, #4]
  403adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403ae0:	2a00      	cmp	r2, #0
  403ae2:	81ab      	strh	r3, [r5, #12]
  403ae4:	dd6f      	ble.n	403bc6 <__sflush_r+0xfe>
  403ae6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403ae8:	2c00      	cmp	r4, #0
  403aea:	d049      	beq.n	403b80 <__sflush_r+0xb8>
  403aec:	2200      	movs	r2, #0
  403aee:	b29b      	uxth	r3, r3
  403af0:	f8d8 6000 	ldr.w	r6, [r8]
  403af4:	f8c8 2000 	str.w	r2, [r8]
  403af8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403afc:	d067      	beq.n	403bce <__sflush_r+0x106>
  403afe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403b00:	075f      	lsls	r7, r3, #29
  403b02:	d505      	bpl.n	403b10 <__sflush_r+0x48>
  403b04:	6869      	ldr	r1, [r5, #4]
  403b06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403b08:	1a52      	subs	r2, r2, r1
  403b0a:	b10b      	cbz	r3, 403b10 <__sflush_r+0x48>
  403b0c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403b0e:	1ad2      	subs	r2, r2, r3
  403b10:	2300      	movs	r3, #0
  403b12:	69e9      	ldr	r1, [r5, #28]
  403b14:	4640      	mov	r0, r8
  403b16:	47a0      	blx	r4
  403b18:	1c44      	adds	r4, r0, #1
  403b1a:	d03c      	beq.n	403b96 <__sflush_r+0xce>
  403b1c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403b20:	692a      	ldr	r2, [r5, #16]
  403b22:	602a      	str	r2, [r5, #0]
  403b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403b28:	2200      	movs	r2, #0
  403b2a:	81ab      	strh	r3, [r5, #12]
  403b2c:	04db      	lsls	r3, r3, #19
  403b2e:	606a      	str	r2, [r5, #4]
  403b30:	d447      	bmi.n	403bc2 <__sflush_r+0xfa>
  403b32:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403b34:	f8c8 6000 	str.w	r6, [r8]
  403b38:	b311      	cbz	r1, 403b80 <__sflush_r+0xb8>
  403b3a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403b3e:	4299      	cmp	r1, r3
  403b40:	d002      	beq.n	403b48 <__sflush_r+0x80>
  403b42:	4640      	mov	r0, r8
  403b44:	f000 f95a 	bl	403dfc <_free_r>
  403b48:	2000      	movs	r0, #0
  403b4a:	6328      	str	r0, [r5, #48]	; 0x30
  403b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b50:	692e      	ldr	r6, [r5, #16]
  403b52:	b1ae      	cbz	r6, 403b80 <__sflush_r+0xb8>
  403b54:	682c      	ldr	r4, [r5, #0]
  403b56:	602e      	str	r6, [r5, #0]
  403b58:	0791      	lsls	r1, r2, #30
  403b5a:	bf0c      	ite	eq
  403b5c:	696b      	ldreq	r3, [r5, #20]
  403b5e:	2300      	movne	r3, #0
  403b60:	1ba4      	subs	r4, r4, r6
  403b62:	60ab      	str	r3, [r5, #8]
  403b64:	e00a      	b.n	403b7c <__sflush_r+0xb4>
  403b66:	4623      	mov	r3, r4
  403b68:	4632      	mov	r2, r6
  403b6a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403b6c:	69e9      	ldr	r1, [r5, #28]
  403b6e:	4640      	mov	r0, r8
  403b70:	47b8      	blx	r7
  403b72:	2800      	cmp	r0, #0
  403b74:	eba4 0400 	sub.w	r4, r4, r0
  403b78:	4406      	add	r6, r0
  403b7a:	dd04      	ble.n	403b86 <__sflush_r+0xbe>
  403b7c:	2c00      	cmp	r4, #0
  403b7e:	dcf2      	bgt.n	403b66 <__sflush_r+0x9e>
  403b80:	2000      	movs	r0, #0
  403b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b86:	89ab      	ldrh	r3, [r5, #12]
  403b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403b8c:	81ab      	strh	r3, [r5, #12]
  403b8e:	f04f 30ff 	mov.w	r0, #4294967295
  403b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b96:	f8d8 4000 	ldr.w	r4, [r8]
  403b9a:	2c1d      	cmp	r4, #29
  403b9c:	d8f3      	bhi.n	403b86 <__sflush_r+0xbe>
  403b9e:	4b19      	ldr	r3, [pc, #100]	; (403c04 <__sflush_r+0x13c>)
  403ba0:	40e3      	lsrs	r3, r4
  403ba2:	43db      	mvns	r3, r3
  403ba4:	f013 0301 	ands.w	r3, r3, #1
  403ba8:	d1ed      	bne.n	403b86 <__sflush_r+0xbe>
  403baa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403bae:	606b      	str	r3, [r5, #4]
  403bb0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403bb4:	6929      	ldr	r1, [r5, #16]
  403bb6:	81ab      	strh	r3, [r5, #12]
  403bb8:	04da      	lsls	r2, r3, #19
  403bba:	6029      	str	r1, [r5, #0]
  403bbc:	d5b9      	bpl.n	403b32 <__sflush_r+0x6a>
  403bbe:	2c00      	cmp	r4, #0
  403bc0:	d1b7      	bne.n	403b32 <__sflush_r+0x6a>
  403bc2:	6528      	str	r0, [r5, #80]	; 0x50
  403bc4:	e7b5      	b.n	403b32 <__sflush_r+0x6a>
  403bc6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403bc8:	2a00      	cmp	r2, #0
  403bca:	dc8c      	bgt.n	403ae6 <__sflush_r+0x1e>
  403bcc:	e7d8      	b.n	403b80 <__sflush_r+0xb8>
  403bce:	2301      	movs	r3, #1
  403bd0:	69e9      	ldr	r1, [r5, #28]
  403bd2:	4640      	mov	r0, r8
  403bd4:	47a0      	blx	r4
  403bd6:	1c43      	adds	r3, r0, #1
  403bd8:	4602      	mov	r2, r0
  403bda:	d002      	beq.n	403be2 <__sflush_r+0x11a>
  403bdc:	89ab      	ldrh	r3, [r5, #12]
  403bde:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403be0:	e78e      	b.n	403b00 <__sflush_r+0x38>
  403be2:	f8d8 3000 	ldr.w	r3, [r8]
  403be6:	2b00      	cmp	r3, #0
  403be8:	d0f8      	beq.n	403bdc <__sflush_r+0x114>
  403bea:	2b1d      	cmp	r3, #29
  403bec:	d001      	beq.n	403bf2 <__sflush_r+0x12a>
  403bee:	2b16      	cmp	r3, #22
  403bf0:	d102      	bne.n	403bf8 <__sflush_r+0x130>
  403bf2:	f8c8 6000 	str.w	r6, [r8]
  403bf6:	e7c3      	b.n	403b80 <__sflush_r+0xb8>
  403bf8:	89ab      	ldrh	r3, [r5, #12]
  403bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403bfe:	81ab      	strh	r3, [r5, #12]
  403c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c04:	20400001 	.word	0x20400001

00403c08 <_fflush_r>:
  403c08:	b538      	push	{r3, r4, r5, lr}
  403c0a:	460d      	mov	r5, r1
  403c0c:	4604      	mov	r4, r0
  403c0e:	b108      	cbz	r0, 403c14 <_fflush_r+0xc>
  403c10:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403c12:	b1bb      	cbz	r3, 403c44 <_fflush_r+0x3c>
  403c14:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403c18:	b188      	cbz	r0, 403c3e <_fflush_r+0x36>
  403c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403c1c:	07db      	lsls	r3, r3, #31
  403c1e:	d401      	bmi.n	403c24 <_fflush_r+0x1c>
  403c20:	0581      	lsls	r1, r0, #22
  403c22:	d517      	bpl.n	403c54 <_fflush_r+0x4c>
  403c24:	4620      	mov	r0, r4
  403c26:	4629      	mov	r1, r5
  403c28:	f7ff ff4e 	bl	403ac8 <__sflush_r>
  403c2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403c2e:	07da      	lsls	r2, r3, #31
  403c30:	4604      	mov	r4, r0
  403c32:	d402      	bmi.n	403c3a <_fflush_r+0x32>
  403c34:	89ab      	ldrh	r3, [r5, #12]
  403c36:	059b      	lsls	r3, r3, #22
  403c38:	d507      	bpl.n	403c4a <_fflush_r+0x42>
  403c3a:	4620      	mov	r0, r4
  403c3c:	bd38      	pop	{r3, r4, r5, pc}
  403c3e:	4604      	mov	r4, r0
  403c40:	4620      	mov	r0, r4
  403c42:	bd38      	pop	{r3, r4, r5, pc}
  403c44:	f000 f838 	bl	403cb8 <__sinit>
  403c48:	e7e4      	b.n	403c14 <_fflush_r+0xc>
  403c4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403c4c:	f000 f9ec 	bl	404028 <__retarget_lock_release_recursive>
  403c50:	4620      	mov	r0, r4
  403c52:	bd38      	pop	{r3, r4, r5, pc}
  403c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403c56:	f000 f9e5 	bl	404024 <__retarget_lock_acquire_recursive>
  403c5a:	e7e3      	b.n	403c24 <_fflush_r+0x1c>

00403c5c <_cleanup_r>:
  403c5c:	4901      	ldr	r1, [pc, #4]	; (403c64 <_cleanup_r+0x8>)
  403c5e:	f000 b9b3 	b.w	403fc8 <_fwalk_reent>
  403c62:	bf00      	nop
  403c64:	004047d1 	.word	0x004047d1

00403c68 <std.isra.0>:
  403c68:	b510      	push	{r4, lr}
  403c6a:	2300      	movs	r3, #0
  403c6c:	4604      	mov	r4, r0
  403c6e:	8181      	strh	r1, [r0, #12]
  403c70:	81c2      	strh	r2, [r0, #14]
  403c72:	6003      	str	r3, [r0, #0]
  403c74:	6043      	str	r3, [r0, #4]
  403c76:	6083      	str	r3, [r0, #8]
  403c78:	6643      	str	r3, [r0, #100]	; 0x64
  403c7a:	6103      	str	r3, [r0, #16]
  403c7c:	6143      	str	r3, [r0, #20]
  403c7e:	6183      	str	r3, [r0, #24]
  403c80:	4619      	mov	r1, r3
  403c82:	2208      	movs	r2, #8
  403c84:	305c      	adds	r0, #92	; 0x5c
  403c86:	f7ff fdf1 	bl	40386c <memset>
  403c8a:	4807      	ldr	r0, [pc, #28]	; (403ca8 <std.isra.0+0x40>)
  403c8c:	4907      	ldr	r1, [pc, #28]	; (403cac <std.isra.0+0x44>)
  403c8e:	4a08      	ldr	r2, [pc, #32]	; (403cb0 <std.isra.0+0x48>)
  403c90:	4b08      	ldr	r3, [pc, #32]	; (403cb4 <std.isra.0+0x4c>)
  403c92:	6220      	str	r0, [r4, #32]
  403c94:	61e4      	str	r4, [r4, #28]
  403c96:	6261      	str	r1, [r4, #36]	; 0x24
  403c98:	62a2      	str	r2, [r4, #40]	; 0x28
  403c9a:	62e3      	str	r3, [r4, #44]	; 0x2c
  403c9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403ca4:	f000 b9ba 	b.w	40401c <__retarget_lock_init_recursive>
  403ca8:	00404635 	.word	0x00404635
  403cac:	00404659 	.word	0x00404659
  403cb0:	00404695 	.word	0x00404695
  403cb4:	004046b5 	.word	0x004046b5

00403cb8 <__sinit>:
  403cb8:	b510      	push	{r4, lr}
  403cba:	4604      	mov	r4, r0
  403cbc:	4812      	ldr	r0, [pc, #72]	; (403d08 <__sinit+0x50>)
  403cbe:	f000 f9b1 	bl	404024 <__retarget_lock_acquire_recursive>
  403cc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403cc4:	b9d2      	cbnz	r2, 403cfc <__sinit+0x44>
  403cc6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403cca:	4810      	ldr	r0, [pc, #64]	; (403d0c <__sinit+0x54>)
  403ccc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403cd0:	2103      	movs	r1, #3
  403cd2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403cd6:	63e0      	str	r0, [r4, #60]	; 0x3c
  403cd8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403cdc:	6860      	ldr	r0, [r4, #4]
  403cde:	2104      	movs	r1, #4
  403ce0:	f7ff ffc2 	bl	403c68 <std.isra.0>
  403ce4:	2201      	movs	r2, #1
  403ce6:	2109      	movs	r1, #9
  403ce8:	68a0      	ldr	r0, [r4, #8]
  403cea:	f7ff ffbd 	bl	403c68 <std.isra.0>
  403cee:	2202      	movs	r2, #2
  403cf0:	2112      	movs	r1, #18
  403cf2:	68e0      	ldr	r0, [r4, #12]
  403cf4:	f7ff ffb8 	bl	403c68 <std.isra.0>
  403cf8:	2301      	movs	r3, #1
  403cfa:	63a3      	str	r3, [r4, #56]	; 0x38
  403cfc:	4802      	ldr	r0, [pc, #8]	; (403d08 <__sinit+0x50>)
  403cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403d02:	f000 b991 	b.w	404028 <__retarget_lock_release_recursive>
  403d06:	bf00      	nop
  403d08:	20008c94 	.word	0x20008c94
  403d0c:	00403c5d 	.word	0x00403c5d

00403d10 <__sfp_lock_acquire>:
  403d10:	4801      	ldr	r0, [pc, #4]	; (403d18 <__sfp_lock_acquire+0x8>)
  403d12:	f000 b987 	b.w	404024 <__retarget_lock_acquire_recursive>
  403d16:	bf00      	nop
  403d18:	20008ca8 	.word	0x20008ca8

00403d1c <__sfp_lock_release>:
  403d1c:	4801      	ldr	r0, [pc, #4]	; (403d24 <__sfp_lock_release+0x8>)
  403d1e:	f000 b983 	b.w	404028 <__retarget_lock_release_recursive>
  403d22:	bf00      	nop
  403d24:	20008ca8 	.word	0x20008ca8

00403d28 <__libc_fini_array>:
  403d28:	b538      	push	{r3, r4, r5, lr}
  403d2a:	4c0a      	ldr	r4, [pc, #40]	; (403d54 <__libc_fini_array+0x2c>)
  403d2c:	4d0a      	ldr	r5, [pc, #40]	; (403d58 <__libc_fini_array+0x30>)
  403d2e:	1b64      	subs	r4, r4, r5
  403d30:	10a4      	asrs	r4, r4, #2
  403d32:	d00a      	beq.n	403d4a <__libc_fini_array+0x22>
  403d34:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403d38:	3b01      	subs	r3, #1
  403d3a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403d3e:	3c01      	subs	r4, #1
  403d40:	f855 3904 	ldr.w	r3, [r5], #-4
  403d44:	4798      	blx	r3
  403d46:	2c00      	cmp	r4, #0
  403d48:	d1f9      	bne.n	403d3e <__libc_fini_array+0x16>
  403d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403d4e:	f000 bdfb 	b.w	404948 <_fini>
  403d52:	bf00      	nop
  403d54:	00404958 	.word	0x00404958
  403d58:	00404954 	.word	0x00404954

00403d5c <_malloc_trim_r>:
  403d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403d5e:	4f24      	ldr	r7, [pc, #144]	; (403df0 <_malloc_trim_r+0x94>)
  403d60:	460c      	mov	r4, r1
  403d62:	4606      	mov	r6, r0
  403d64:	f000 fc48 	bl	4045f8 <__malloc_lock>
  403d68:	68bb      	ldr	r3, [r7, #8]
  403d6a:	685d      	ldr	r5, [r3, #4]
  403d6c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403d70:	310f      	adds	r1, #15
  403d72:	f025 0503 	bic.w	r5, r5, #3
  403d76:	4429      	add	r1, r5
  403d78:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403d7c:	f021 010f 	bic.w	r1, r1, #15
  403d80:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403d84:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403d88:	db07      	blt.n	403d9a <_malloc_trim_r+0x3e>
  403d8a:	2100      	movs	r1, #0
  403d8c:	4630      	mov	r0, r6
  403d8e:	f000 fc3f 	bl	404610 <_sbrk_r>
  403d92:	68bb      	ldr	r3, [r7, #8]
  403d94:	442b      	add	r3, r5
  403d96:	4298      	cmp	r0, r3
  403d98:	d004      	beq.n	403da4 <_malloc_trim_r+0x48>
  403d9a:	4630      	mov	r0, r6
  403d9c:	f000 fc32 	bl	404604 <__malloc_unlock>
  403da0:	2000      	movs	r0, #0
  403da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403da4:	4261      	negs	r1, r4
  403da6:	4630      	mov	r0, r6
  403da8:	f000 fc32 	bl	404610 <_sbrk_r>
  403dac:	3001      	adds	r0, #1
  403dae:	d00d      	beq.n	403dcc <_malloc_trim_r+0x70>
  403db0:	4b10      	ldr	r3, [pc, #64]	; (403df4 <_malloc_trim_r+0x98>)
  403db2:	68ba      	ldr	r2, [r7, #8]
  403db4:	6819      	ldr	r1, [r3, #0]
  403db6:	1b2d      	subs	r5, r5, r4
  403db8:	f045 0501 	orr.w	r5, r5, #1
  403dbc:	4630      	mov	r0, r6
  403dbe:	1b09      	subs	r1, r1, r4
  403dc0:	6055      	str	r5, [r2, #4]
  403dc2:	6019      	str	r1, [r3, #0]
  403dc4:	f000 fc1e 	bl	404604 <__malloc_unlock>
  403dc8:	2001      	movs	r0, #1
  403dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403dcc:	2100      	movs	r1, #0
  403dce:	4630      	mov	r0, r6
  403dd0:	f000 fc1e 	bl	404610 <_sbrk_r>
  403dd4:	68ba      	ldr	r2, [r7, #8]
  403dd6:	1a83      	subs	r3, r0, r2
  403dd8:	2b0f      	cmp	r3, #15
  403dda:	ddde      	ble.n	403d9a <_malloc_trim_r+0x3e>
  403ddc:	4c06      	ldr	r4, [pc, #24]	; (403df8 <_malloc_trim_r+0x9c>)
  403dde:	4905      	ldr	r1, [pc, #20]	; (403df4 <_malloc_trim_r+0x98>)
  403de0:	6824      	ldr	r4, [r4, #0]
  403de2:	f043 0301 	orr.w	r3, r3, #1
  403de6:	1b00      	subs	r0, r0, r4
  403de8:	6053      	str	r3, [r2, #4]
  403dea:	6008      	str	r0, [r1, #0]
  403dec:	e7d5      	b.n	403d9a <_malloc_trim_r+0x3e>
  403dee:	bf00      	nop
  403df0:	20000444 	.word	0x20000444
  403df4:	20008b84 	.word	0x20008b84
  403df8:	2000084c 	.word	0x2000084c

00403dfc <_free_r>:
  403dfc:	2900      	cmp	r1, #0
  403dfe:	d044      	beq.n	403e8a <_free_r+0x8e>
  403e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403e04:	460d      	mov	r5, r1
  403e06:	4680      	mov	r8, r0
  403e08:	f000 fbf6 	bl	4045f8 <__malloc_lock>
  403e0c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403e10:	4969      	ldr	r1, [pc, #420]	; (403fb8 <_free_r+0x1bc>)
  403e12:	f027 0301 	bic.w	r3, r7, #1
  403e16:	f1a5 0408 	sub.w	r4, r5, #8
  403e1a:	18e2      	adds	r2, r4, r3
  403e1c:	688e      	ldr	r6, [r1, #8]
  403e1e:	6850      	ldr	r0, [r2, #4]
  403e20:	42b2      	cmp	r2, r6
  403e22:	f020 0003 	bic.w	r0, r0, #3
  403e26:	d05e      	beq.n	403ee6 <_free_r+0xea>
  403e28:	07fe      	lsls	r6, r7, #31
  403e2a:	6050      	str	r0, [r2, #4]
  403e2c:	d40b      	bmi.n	403e46 <_free_r+0x4a>
  403e2e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403e32:	1be4      	subs	r4, r4, r7
  403e34:	f101 0e08 	add.w	lr, r1, #8
  403e38:	68a5      	ldr	r5, [r4, #8]
  403e3a:	4575      	cmp	r5, lr
  403e3c:	443b      	add	r3, r7
  403e3e:	d06d      	beq.n	403f1c <_free_r+0x120>
  403e40:	68e7      	ldr	r7, [r4, #12]
  403e42:	60ef      	str	r7, [r5, #12]
  403e44:	60bd      	str	r5, [r7, #8]
  403e46:	1815      	adds	r5, r2, r0
  403e48:	686d      	ldr	r5, [r5, #4]
  403e4a:	07ed      	lsls	r5, r5, #31
  403e4c:	d53e      	bpl.n	403ecc <_free_r+0xd0>
  403e4e:	f043 0201 	orr.w	r2, r3, #1
  403e52:	6062      	str	r2, [r4, #4]
  403e54:	50e3      	str	r3, [r4, r3]
  403e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403e5a:	d217      	bcs.n	403e8c <_free_r+0x90>
  403e5c:	08db      	lsrs	r3, r3, #3
  403e5e:	1c58      	adds	r0, r3, #1
  403e60:	109a      	asrs	r2, r3, #2
  403e62:	684d      	ldr	r5, [r1, #4]
  403e64:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403e68:	60a7      	str	r7, [r4, #8]
  403e6a:	2301      	movs	r3, #1
  403e6c:	4093      	lsls	r3, r2
  403e6e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  403e72:	432b      	orrs	r3, r5
  403e74:	3a08      	subs	r2, #8
  403e76:	60e2      	str	r2, [r4, #12]
  403e78:	604b      	str	r3, [r1, #4]
  403e7a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403e7e:	60fc      	str	r4, [r7, #12]
  403e80:	4640      	mov	r0, r8
  403e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403e86:	f000 bbbd 	b.w	404604 <__malloc_unlock>
  403e8a:	4770      	bx	lr
  403e8c:	0a5a      	lsrs	r2, r3, #9
  403e8e:	2a04      	cmp	r2, #4
  403e90:	d852      	bhi.n	403f38 <_free_r+0x13c>
  403e92:	099a      	lsrs	r2, r3, #6
  403e94:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403e98:	00ff      	lsls	r7, r7, #3
  403e9a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403e9e:	19c8      	adds	r0, r1, r7
  403ea0:	59ca      	ldr	r2, [r1, r7]
  403ea2:	3808      	subs	r0, #8
  403ea4:	4290      	cmp	r0, r2
  403ea6:	d04f      	beq.n	403f48 <_free_r+0x14c>
  403ea8:	6851      	ldr	r1, [r2, #4]
  403eaa:	f021 0103 	bic.w	r1, r1, #3
  403eae:	428b      	cmp	r3, r1
  403eb0:	d232      	bcs.n	403f18 <_free_r+0x11c>
  403eb2:	6892      	ldr	r2, [r2, #8]
  403eb4:	4290      	cmp	r0, r2
  403eb6:	d1f7      	bne.n	403ea8 <_free_r+0xac>
  403eb8:	68c3      	ldr	r3, [r0, #12]
  403eba:	60a0      	str	r0, [r4, #8]
  403ebc:	60e3      	str	r3, [r4, #12]
  403ebe:	609c      	str	r4, [r3, #8]
  403ec0:	60c4      	str	r4, [r0, #12]
  403ec2:	4640      	mov	r0, r8
  403ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403ec8:	f000 bb9c 	b.w	404604 <__malloc_unlock>
  403ecc:	6895      	ldr	r5, [r2, #8]
  403ece:	4f3b      	ldr	r7, [pc, #236]	; (403fbc <_free_r+0x1c0>)
  403ed0:	42bd      	cmp	r5, r7
  403ed2:	4403      	add	r3, r0
  403ed4:	d040      	beq.n	403f58 <_free_r+0x15c>
  403ed6:	68d0      	ldr	r0, [r2, #12]
  403ed8:	60e8      	str	r0, [r5, #12]
  403eda:	f043 0201 	orr.w	r2, r3, #1
  403ede:	6085      	str	r5, [r0, #8]
  403ee0:	6062      	str	r2, [r4, #4]
  403ee2:	50e3      	str	r3, [r4, r3]
  403ee4:	e7b7      	b.n	403e56 <_free_r+0x5a>
  403ee6:	07ff      	lsls	r7, r7, #31
  403ee8:	4403      	add	r3, r0
  403eea:	d407      	bmi.n	403efc <_free_r+0x100>
  403eec:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403ef0:	1aa4      	subs	r4, r4, r2
  403ef2:	4413      	add	r3, r2
  403ef4:	68a0      	ldr	r0, [r4, #8]
  403ef6:	68e2      	ldr	r2, [r4, #12]
  403ef8:	60c2      	str	r2, [r0, #12]
  403efa:	6090      	str	r0, [r2, #8]
  403efc:	4a30      	ldr	r2, [pc, #192]	; (403fc0 <_free_r+0x1c4>)
  403efe:	6812      	ldr	r2, [r2, #0]
  403f00:	f043 0001 	orr.w	r0, r3, #1
  403f04:	4293      	cmp	r3, r2
  403f06:	6060      	str	r0, [r4, #4]
  403f08:	608c      	str	r4, [r1, #8]
  403f0a:	d3b9      	bcc.n	403e80 <_free_r+0x84>
  403f0c:	4b2d      	ldr	r3, [pc, #180]	; (403fc4 <_free_r+0x1c8>)
  403f0e:	4640      	mov	r0, r8
  403f10:	6819      	ldr	r1, [r3, #0]
  403f12:	f7ff ff23 	bl	403d5c <_malloc_trim_r>
  403f16:	e7b3      	b.n	403e80 <_free_r+0x84>
  403f18:	4610      	mov	r0, r2
  403f1a:	e7cd      	b.n	403eb8 <_free_r+0xbc>
  403f1c:	1811      	adds	r1, r2, r0
  403f1e:	6849      	ldr	r1, [r1, #4]
  403f20:	07c9      	lsls	r1, r1, #31
  403f22:	d444      	bmi.n	403fae <_free_r+0x1b2>
  403f24:	6891      	ldr	r1, [r2, #8]
  403f26:	68d2      	ldr	r2, [r2, #12]
  403f28:	60ca      	str	r2, [r1, #12]
  403f2a:	4403      	add	r3, r0
  403f2c:	f043 0001 	orr.w	r0, r3, #1
  403f30:	6091      	str	r1, [r2, #8]
  403f32:	6060      	str	r0, [r4, #4]
  403f34:	50e3      	str	r3, [r4, r3]
  403f36:	e7a3      	b.n	403e80 <_free_r+0x84>
  403f38:	2a14      	cmp	r2, #20
  403f3a:	d816      	bhi.n	403f6a <_free_r+0x16e>
  403f3c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403f40:	00ff      	lsls	r7, r7, #3
  403f42:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403f46:	e7aa      	b.n	403e9e <_free_r+0xa2>
  403f48:	10aa      	asrs	r2, r5, #2
  403f4a:	2301      	movs	r3, #1
  403f4c:	684d      	ldr	r5, [r1, #4]
  403f4e:	4093      	lsls	r3, r2
  403f50:	432b      	orrs	r3, r5
  403f52:	604b      	str	r3, [r1, #4]
  403f54:	4603      	mov	r3, r0
  403f56:	e7b0      	b.n	403eba <_free_r+0xbe>
  403f58:	f043 0201 	orr.w	r2, r3, #1
  403f5c:	614c      	str	r4, [r1, #20]
  403f5e:	610c      	str	r4, [r1, #16]
  403f60:	60e5      	str	r5, [r4, #12]
  403f62:	60a5      	str	r5, [r4, #8]
  403f64:	6062      	str	r2, [r4, #4]
  403f66:	50e3      	str	r3, [r4, r3]
  403f68:	e78a      	b.n	403e80 <_free_r+0x84>
  403f6a:	2a54      	cmp	r2, #84	; 0x54
  403f6c:	d806      	bhi.n	403f7c <_free_r+0x180>
  403f6e:	0b1a      	lsrs	r2, r3, #12
  403f70:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403f74:	00ff      	lsls	r7, r7, #3
  403f76:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403f7a:	e790      	b.n	403e9e <_free_r+0xa2>
  403f7c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403f80:	d806      	bhi.n	403f90 <_free_r+0x194>
  403f82:	0bda      	lsrs	r2, r3, #15
  403f84:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403f88:	00ff      	lsls	r7, r7, #3
  403f8a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403f8e:	e786      	b.n	403e9e <_free_r+0xa2>
  403f90:	f240 5054 	movw	r0, #1364	; 0x554
  403f94:	4282      	cmp	r2, r0
  403f96:	d806      	bhi.n	403fa6 <_free_r+0x1aa>
  403f98:	0c9a      	lsrs	r2, r3, #18
  403f9a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403f9e:	00ff      	lsls	r7, r7, #3
  403fa0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403fa4:	e77b      	b.n	403e9e <_free_r+0xa2>
  403fa6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403faa:	257e      	movs	r5, #126	; 0x7e
  403fac:	e777      	b.n	403e9e <_free_r+0xa2>
  403fae:	f043 0101 	orr.w	r1, r3, #1
  403fb2:	6061      	str	r1, [r4, #4]
  403fb4:	6013      	str	r3, [r2, #0]
  403fb6:	e763      	b.n	403e80 <_free_r+0x84>
  403fb8:	20000444 	.word	0x20000444
  403fbc:	2000044c 	.word	0x2000044c
  403fc0:	20000850 	.word	0x20000850
  403fc4:	20008bb4 	.word	0x20008bb4

00403fc8 <_fwalk_reent>:
  403fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403fcc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403fd0:	d01f      	beq.n	404012 <_fwalk_reent+0x4a>
  403fd2:	4688      	mov	r8, r1
  403fd4:	4606      	mov	r6, r0
  403fd6:	f04f 0900 	mov.w	r9, #0
  403fda:	687d      	ldr	r5, [r7, #4]
  403fdc:	68bc      	ldr	r4, [r7, #8]
  403fde:	3d01      	subs	r5, #1
  403fe0:	d411      	bmi.n	404006 <_fwalk_reent+0x3e>
  403fe2:	89a3      	ldrh	r3, [r4, #12]
  403fe4:	2b01      	cmp	r3, #1
  403fe6:	f105 35ff 	add.w	r5, r5, #4294967295
  403fea:	d908      	bls.n	403ffe <_fwalk_reent+0x36>
  403fec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403ff0:	3301      	adds	r3, #1
  403ff2:	4621      	mov	r1, r4
  403ff4:	4630      	mov	r0, r6
  403ff6:	d002      	beq.n	403ffe <_fwalk_reent+0x36>
  403ff8:	47c0      	blx	r8
  403ffa:	ea49 0900 	orr.w	r9, r9, r0
  403ffe:	1c6b      	adds	r3, r5, #1
  404000:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404004:	d1ed      	bne.n	403fe2 <_fwalk_reent+0x1a>
  404006:	683f      	ldr	r7, [r7, #0]
  404008:	2f00      	cmp	r7, #0
  40400a:	d1e6      	bne.n	403fda <_fwalk_reent+0x12>
  40400c:	4648      	mov	r0, r9
  40400e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404012:	46b9      	mov	r9, r7
  404014:	4648      	mov	r0, r9
  404016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40401a:	bf00      	nop

0040401c <__retarget_lock_init_recursive>:
  40401c:	4770      	bx	lr
  40401e:	bf00      	nop

00404020 <__retarget_lock_close_recursive>:
  404020:	4770      	bx	lr
  404022:	bf00      	nop

00404024 <__retarget_lock_acquire_recursive>:
  404024:	4770      	bx	lr
  404026:	bf00      	nop

00404028 <__retarget_lock_release_recursive>:
  404028:	4770      	bx	lr
  40402a:	bf00      	nop

0040402c <__swhatbuf_r>:
  40402c:	b570      	push	{r4, r5, r6, lr}
  40402e:	460c      	mov	r4, r1
  404030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404034:	2900      	cmp	r1, #0
  404036:	b090      	sub	sp, #64	; 0x40
  404038:	4615      	mov	r5, r2
  40403a:	461e      	mov	r6, r3
  40403c:	db14      	blt.n	404068 <__swhatbuf_r+0x3c>
  40403e:	aa01      	add	r2, sp, #4
  404040:	f000 fc28 	bl	404894 <_fstat_r>
  404044:	2800      	cmp	r0, #0
  404046:	db0f      	blt.n	404068 <__swhatbuf_r+0x3c>
  404048:	9a02      	ldr	r2, [sp, #8]
  40404a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40404e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404052:	fab2 f282 	clz	r2, r2
  404056:	0952      	lsrs	r2, r2, #5
  404058:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40405c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404060:	6032      	str	r2, [r6, #0]
  404062:	602b      	str	r3, [r5, #0]
  404064:	b010      	add	sp, #64	; 0x40
  404066:	bd70      	pop	{r4, r5, r6, pc}
  404068:	89a2      	ldrh	r2, [r4, #12]
  40406a:	2300      	movs	r3, #0
  40406c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404070:	6033      	str	r3, [r6, #0]
  404072:	d004      	beq.n	40407e <__swhatbuf_r+0x52>
  404074:	2240      	movs	r2, #64	; 0x40
  404076:	4618      	mov	r0, r3
  404078:	602a      	str	r2, [r5, #0]
  40407a:	b010      	add	sp, #64	; 0x40
  40407c:	bd70      	pop	{r4, r5, r6, pc}
  40407e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404082:	602b      	str	r3, [r5, #0]
  404084:	b010      	add	sp, #64	; 0x40
  404086:	bd70      	pop	{r4, r5, r6, pc}

00404088 <malloc>:
  404088:	4b02      	ldr	r3, [pc, #8]	; (404094 <malloc+0xc>)
  40408a:	4601      	mov	r1, r0
  40408c:	6818      	ldr	r0, [r3, #0]
  40408e:	f000 b803 	b.w	404098 <_malloc_r>
  404092:	bf00      	nop
  404094:	20000014 	.word	0x20000014

00404098 <_malloc_r>:
  404098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40409c:	f101 060b 	add.w	r6, r1, #11
  4040a0:	2e16      	cmp	r6, #22
  4040a2:	b083      	sub	sp, #12
  4040a4:	4605      	mov	r5, r0
  4040a6:	f240 809e 	bls.w	4041e6 <_malloc_r+0x14e>
  4040aa:	f036 0607 	bics.w	r6, r6, #7
  4040ae:	f100 80bd 	bmi.w	40422c <_malloc_r+0x194>
  4040b2:	42b1      	cmp	r1, r6
  4040b4:	f200 80ba 	bhi.w	40422c <_malloc_r+0x194>
  4040b8:	f000 fa9e 	bl	4045f8 <__malloc_lock>
  4040bc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4040c0:	f0c0 8293 	bcc.w	4045ea <_malloc_r+0x552>
  4040c4:	0a73      	lsrs	r3, r6, #9
  4040c6:	f000 80b8 	beq.w	40423a <_malloc_r+0x1a2>
  4040ca:	2b04      	cmp	r3, #4
  4040cc:	f200 8179 	bhi.w	4043c2 <_malloc_r+0x32a>
  4040d0:	09b3      	lsrs	r3, r6, #6
  4040d2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4040d6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4040da:	00c3      	lsls	r3, r0, #3
  4040dc:	4fbf      	ldr	r7, [pc, #764]	; (4043dc <_malloc_r+0x344>)
  4040de:	443b      	add	r3, r7
  4040e0:	f1a3 0108 	sub.w	r1, r3, #8
  4040e4:	685c      	ldr	r4, [r3, #4]
  4040e6:	42a1      	cmp	r1, r4
  4040e8:	d106      	bne.n	4040f8 <_malloc_r+0x60>
  4040ea:	e00c      	b.n	404106 <_malloc_r+0x6e>
  4040ec:	2a00      	cmp	r2, #0
  4040ee:	f280 80aa 	bge.w	404246 <_malloc_r+0x1ae>
  4040f2:	68e4      	ldr	r4, [r4, #12]
  4040f4:	42a1      	cmp	r1, r4
  4040f6:	d006      	beq.n	404106 <_malloc_r+0x6e>
  4040f8:	6863      	ldr	r3, [r4, #4]
  4040fa:	f023 0303 	bic.w	r3, r3, #3
  4040fe:	1b9a      	subs	r2, r3, r6
  404100:	2a0f      	cmp	r2, #15
  404102:	ddf3      	ble.n	4040ec <_malloc_r+0x54>
  404104:	4670      	mov	r0, lr
  404106:	693c      	ldr	r4, [r7, #16]
  404108:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4043f0 <_malloc_r+0x358>
  40410c:	4574      	cmp	r4, lr
  40410e:	f000 81ab 	beq.w	404468 <_malloc_r+0x3d0>
  404112:	6863      	ldr	r3, [r4, #4]
  404114:	f023 0303 	bic.w	r3, r3, #3
  404118:	1b9a      	subs	r2, r3, r6
  40411a:	2a0f      	cmp	r2, #15
  40411c:	f300 8190 	bgt.w	404440 <_malloc_r+0x3a8>
  404120:	2a00      	cmp	r2, #0
  404122:	f8c7 e014 	str.w	lr, [r7, #20]
  404126:	f8c7 e010 	str.w	lr, [r7, #16]
  40412a:	f280 809d 	bge.w	404268 <_malloc_r+0x1d0>
  40412e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404132:	f080 8161 	bcs.w	4043f8 <_malloc_r+0x360>
  404136:	08db      	lsrs	r3, r3, #3
  404138:	f103 0c01 	add.w	ip, r3, #1
  40413c:	1099      	asrs	r1, r3, #2
  40413e:	687a      	ldr	r2, [r7, #4]
  404140:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404144:	f8c4 8008 	str.w	r8, [r4, #8]
  404148:	2301      	movs	r3, #1
  40414a:	408b      	lsls	r3, r1
  40414c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404150:	4313      	orrs	r3, r2
  404152:	3908      	subs	r1, #8
  404154:	60e1      	str	r1, [r4, #12]
  404156:	607b      	str	r3, [r7, #4]
  404158:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40415c:	f8c8 400c 	str.w	r4, [r8, #12]
  404160:	1082      	asrs	r2, r0, #2
  404162:	2401      	movs	r4, #1
  404164:	4094      	lsls	r4, r2
  404166:	429c      	cmp	r4, r3
  404168:	f200 808b 	bhi.w	404282 <_malloc_r+0x1ea>
  40416c:	421c      	tst	r4, r3
  40416e:	d106      	bne.n	40417e <_malloc_r+0xe6>
  404170:	f020 0003 	bic.w	r0, r0, #3
  404174:	0064      	lsls	r4, r4, #1
  404176:	421c      	tst	r4, r3
  404178:	f100 0004 	add.w	r0, r0, #4
  40417c:	d0fa      	beq.n	404174 <_malloc_r+0xdc>
  40417e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404182:	46cc      	mov	ip, r9
  404184:	4680      	mov	r8, r0
  404186:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40418a:	459c      	cmp	ip, r3
  40418c:	d107      	bne.n	40419e <_malloc_r+0x106>
  40418e:	e16d      	b.n	40446c <_malloc_r+0x3d4>
  404190:	2a00      	cmp	r2, #0
  404192:	f280 817b 	bge.w	40448c <_malloc_r+0x3f4>
  404196:	68db      	ldr	r3, [r3, #12]
  404198:	459c      	cmp	ip, r3
  40419a:	f000 8167 	beq.w	40446c <_malloc_r+0x3d4>
  40419e:	6859      	ldr	r1, [r3, #4]
  4041a0:	f021 0103 	bic.w	r1, r1, #3
  4041a4:	1b8a      	subs	r2, r1, r6
  4041a6:	2a0f      	cmp	r2, #15
  4041a8:	ddf2      	ble.n	404190 <_malloc_r+0xf8>
  4041aa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4041ae:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4041b2:	9300      	str	r3, [sp, #0]
  4041b4:	199c      	adds	r4, r3, r6
  4041b6:	4628      	mov	r0, r5
  4041b8:	f046 0601 	orr.w	r6, r6, #1
  4041bc:	f042 0501 	orr.w	r5, r2, #1
  4041c0:	605e      	str	r6, [r3, #4]
  4041c2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4041c6:	f8cc 8008 	str.w	r8, [ip, #8]
  4041ca:	617c      	str	r4, [r7, #20]
  4041cc:	613c      	str	r4, [r7, #16]
  4041ce:	f8c4 e00c 	str.w	lr, [r4, #12]
  4041d2:	f8c4 e008 	str.w	lr, [r4, #8]
  4041d6:	6065      	str	r5, [r4, #4]
  4041d8:	505a      	str	r2, [r3, r1]
  4041da:	f000 fa13 	bl	404604 <__malloc_unlock>
  4041de:	9b00      	ldr	r3, [sp, #0]
  4041e0:	f103 0408 	add.w	r4, r3, #8
  4041e4:	e01e      	b.n	404224 <_malloc_r+0x18c>
  4041e6:	2910      	cmp	r1, #16
  4041e8:	d820      	bhi.n	40422c <_malloc_r+0x194>
  4041ea:	f000 fa05 	bl	4045f8 <__malloc_lock>
  4041ee:	2610      	movs	r6, #16
  4041f0:	2318      	movs	r3, #24
  4041f2:	2002      	movs	r0, #2
  4041f4:	4f79      	ldr	r7, [pc, #484]	; (4043dc <_malloc_r+0x344>)
  4041f6:	443b      	add	r3, r7
  4041f8:	f1a3 0208 	sub.w	r2, r3, #8
  4041fc:	685c      	ldr	r4, [r3, #4]
  4041fe:	4294      	cmp	r4, r2
  404200:	f000 813d 	beq.w	40447e <_malloc_r+0x3e6>
  404204:	6863      	ldr	r3, [r4, #4]
  404206:	68e1      	ldr	r1, [r4, #12]
  404208:	68a6      	ldr	r6, [r4, #8]
  40420a:	f023 0303 	bic.w	r3, r3, #3
  40420e:	4423      	add	r3, r4
  404210:	4628      	mov	r0, r5
  404212:	685a      	ldr	r2, [r3, #4]
  404214:	60f1      	str	r1, [r6, #12]
  404216:	f042 0201 	orr.w	r2, r2, #1
  40421a:	608e      	str	r6, [r1, #8]
  40421c:	605a      	str	r2, [r3, #4]
  40421e:	f000 f9f1 	bl	404604 <__malloc_unlock>
  404222:	3408      	adds	r4, #8
  404224:	4620      	mov	r0, r4
  404226:	b003      	add	sp, #12
  404228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40422c:	2400      	movs	r4, #0
  40422e:	230c      	movs	r3, #12
  404230:	4620      	mov	r0, r4
  404232:	602b      	str	r3, [r5, #0]
  404234:	b003      	add	sp, #12
  404236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40423a:	2040      	movs	r0, #64	; 0x40
  40423c:	f44f 7300 	mov.w	r3, #512	; 0x200
  404240:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404244:	e74a      	b.n	4040dc <_malloc_r+0x44>
  404246:	4423      	add	r3, r4
  404248:	68e1      	ldr	r1, [r4, #12]
  40424a:	685a      	ldr	r2, [r3, #4]
  40424c:	68a6      	ldr	r6, [r4, #8]
  40424e:	f042 0201 	orr.w	r2, r2, #1
  404252:	60f1      	str	r1, [r6, #12]
  404254:	4628      	mov	r0, r5
  404256:	608e      	str	r6, [r1, #8]
  404258:	605a      	str	r2, [r3, #4]
  40425a:	f000 f9d3 	bl	404604 <__malloc_unlock>
  40425e:	3408      	adds	r4, #8
  404260:	4620      	mov	r0, r4
  404262:	b003      	add	sp, #12
  404264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404268:	4423      	add	r3, r4
  40426a:	4628      	mov	r0, r5
  40426c:	685a      	ldr	r2, [r3, #4]
  40426e:	f042 0201 	orr.w	r2, r2, #1
  404272:	605a      	str	r2, [r3, #4]
  404274:	f000 f9c6 	bl	404604 <__malloc_unlock>
  404278:	3408      	adds	r4, #8
  40427a:	4620      	mov	r0, r4
  40427c:	b003      	add	sp, #12
  40427e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404282:	68bc      	ldr	r4, [r7, #8]
  404284:	6863      	ldr	r3, [r4, #4]
  404286:	f023 0803 	bic.w	r8, r3, #3
  40428a:	45b0      	cmp	r8, r6
  40428c:	d304      	bcc.n	404298 <_malloc_r+0x200>
  40428e:	eba8 0306 	sub.w	r3, r8, r6
  404292:	2b0f      	cmp	r3, #15
  404294:	f300 8085 	bgt.w	4043a2 <_malloc_r+0x30a>
  404298:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4043f4 <_malloc_r+0x35c>
  40429c:	4b50      	ldr	r3, [pc, #320]	; (4043e0 <_malloc_r+0x348>)
  40429e:	f8d9 2000 	ldr.w	r2, [r9]
  4042a2:	681b      	ldr	r3, [r3, #0]
  4042a4:	3201      	adds	r2, #1
  4042a6:	4433      	add	r3, r6
  4042a8:	eb04 0a08 	add.w	sl, r4, r8
  4042ac:	f000 8155 	beq.w	40455a <_malloc_r+0x4c2>
  4042b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4042b4:	330f      	adds	r3, #15
  4042b6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4042ba:	f02b 0b0f 	bic.w	fp, fp, #15
  4042be:	4659      	mov	r1, fp
  4042c0:	4628      	mov	r0, r5
  4042c2:	f000 f9a5 	bl	404610 <_sbrk_r>
  4042c6:	1c41      	adds	r1, r0, #1
  4042c8:	4602      	mov	r2, r0
  4042ca:	f000 80fc 	beq.w	4044c6 <_malloc_r+0x42e>
  4042ce:	4582      	cmp	sl, r0
  4042d0:	f200 80f7 	bhi.w	4044c2 <_malloc_r+0x42a>
  4042d4:	4b43      	ldr	r3, [pc, #268]	; (4043e4 <_malloc_r+0x34c>)
  4042d6:	6819      	ldr	r1, [r3, #0]
  4042d8:	4459      	add	r1, fp
  4042da:	6019      	str	r1, [r3, #0]
  4042dc:	f000 814d 	beq.w	40457a <_malloc_r+0x4e2>
  4042e0:	f8d9 0000 	ldr.w	r0, [r9]
  4042e4:	3001      	adds	r0, #1
  4042e6:	bf1b      	ittet	ne
  4042e8:	eba2 0a0a 	subne.w	sl, r2, sl
  4042ec:	4451      	addne	r1, sl
  4042ee:	f8c9 2000 	streq.w	r2, [r9]
  4042f2:	6019      	strne	r1, [r3, #0]
  4042f4:	f012 0107 	ands.w	r1, r2, #7
  4042f8:	f000 8115 	beq.w	404526 <_malloc_r+0x48e>
  4042fc:	f1c1 0008 	rsb	r0, r1, #8
  404300:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404304:	4402      	add	r2, r0
  404306:	3108      	adds	r1, #8
  404308:	eb02 090b 	add.w	r9, r2, fp
  40430c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404310:	eba1 0909 	sub.w	r9, r1, r9
  404314:	4649      	mov	r1, r9
  404316:	4628      	mov	r0, r5
  404318:	9301      	str	r3, [sp, #4]
  40431a:	9200      	str	r2, [sp, #0]
  40431c:	f000 f978 	bl	404610 <_sbrk_r>
  404320:	1c43      	adds	r3, r0, #1
  404322:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404326:	f000 8143 	beq.w	4045b0 <_malloc_r+0x518>
  40432a:	1a80      	subs	r0, r0, r2
  40432c:	4448      	add	r0, r9
  40432e:	f040 0001 	orr.w	r0, r0, #1
  404332:	6819      	ldr	r1, [r3, #0]
  404334:	60ba      	str	r2, [r7, #8]
  404336:	4449      	add	r1, r9
  404338:	42bc      	cmp	r4, r7
  40433a:	6050      	str	r0, [r2, #4]
  40433c:	6019      	str	r1, [r3, #0]
  40433e:	d017      	beq.n	404370 <_malloc_r+0x2d8>
  404340:	f1b8 0f0f 	cmp.w	r8, #15
  404344:	f240 80fb 	bls.w	40453e <_malloc_r+0x4a6>
  404348:	6860      	ldr	r0, [r4, #4]
  40434a:	f1a8 020c 	sub.w	r2, r8, #12
  40434e:	f022 0207 	bic.w	r2, r2, #7
  404352:	eb04 0e02 	add.w	lr, r4, r2
  404356:	f000 0001 	and.w	r0, r0, #1
  40435a:	f04f 0c05 	mov.w	ip, #5
  40435e:	4310      	orrs	r0, r2
  404360:	2a0f      	cmp	r2, #15
  404362:	6060      	str	r0, [r4, #4]
  404364:	f8ce c004 	str.w	ip, [lr, #4]
  404368:	f8ce c008 	str.w	ip, [lr, #8]
  40436c:	f200 8117 	bhi.w	40459e <_malloc_r+0x506>
  404370:	4b1d      	ldr	r3, [pc, #116]	; (4043e8 <_malloc_r+0x350>)
  404372:	68bc      	ldr	r4, [r7, #8]
  404374:	681a      	ldr	r2, [r3, #0]
  404376:	4291      	cmp	r1, r2
  404378:	bf88      	it	hi
  40437a:	6019      	strhi	r1, [r3, #0]
  40437c:	4b1b      	ldr	r3, [pc, #108]	; (4043ec <_malloc_r+0x354>)
  40437e:	681a      	ldr	r2, [r3, #0]
  404380:	4291      	cmp	r1, r2
  404382:	6862      	ldr	r2, [r4, #4]
  404384:	bf88      	it	hi
  404386:	6019      	strhi	r1, [r3, #0]
  404388:	f022 0203 	bic.w	r2, r2, #3
  40438c:	4296      	cmp	r6, r2
  40438e:	eba2 0306 	sub.w	r3, r2, r6
  404392:	d801      	bhi.n	404398 <_malloc_r+0x300>
  404394:	2b0f      	cmp	r3, #15
  404396:	dc04      	bgt.n	4043a2 <_malloc_r+0x30a>
  404398:	4628      	mov	r0, r5
  40439a:	f000 f933 	bl	404604 <__malloc_unlock>
  40439e:	2400      	movs	r4, #0
  4043a0:	e740      	b.n	404224 <_malloc_r+0x18c>
  4043a2:	19a2      	adds	r2, r4, r6
  4043a4:	f043 0301 	orr.w	r3, r3, #1
  4043a8:	f046 0601 	orr.w	r6, r6, #1
  4043ac:	6066      	str	r6, [r4, #4]
  4043ae:	4628      	mov	r0, r5
  4043b0:	60ba      	str	r2, [r7, #8]
  4043b2:	6053      	str	r3, [r2, #4]
  4043b4:	f000 f926 	bl	404604 <__malloc_unlock>
  4043b8:	3408      	adds	r4, #8
  4043ba:	4620      	mov	r0, r4
  4043bc:	b003      	add	sp, #12
  4043be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043c2:	2b14      	cmp	r3, #20
  4043c4:	d971      	bls.n	4044aa <_malloc_r+0x412>
  4043c6:	2b54      	cmp	r3, #84	; 0x54
  4043c8:	f200 80a3 	bhi.w	404512 <_malloc_r+0x47a>
  4043cc:	0b33      	lsrs	r3, r6, #12
  4043ce:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4043d2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4043d6:	00c3      	lsls	r3, r0, #3
  4043d8:	e680      	b.n	4040dc <_malloc_r+0x44>
  4043da:	bf00      	nop
  4043dc:	20000444 	.word	0x20000444
  4043e0:	20008bb4 	.word	0x20008bb4
  4043e4:	20008b84 	.word	0x20008b84
  4043e8:	20008bac 	.word	0x20008bac
  4043ec:	20008bb0 	.word	0x20008bb0
  4043f0:	2000044c 	.word	0x2000044c
  4043f4:	2000084c 	.word	0x2000084c
  4043f8:	0a5a      	lsrs	r2, r3, #9
  4043fa:	2a04      	cmp	r2, #4
  4043fc:	d95b      	bls.n	4044b6 <_malloc_r+0x41e>
  4043fe:	2a14      	cmp	r2, #20
  404400:	f200 80ae 	bhi.w	404560 <_malloc_r+0x4c8>
  404404:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404408:	00c9      	lsls	r1, r1, #3
  40440a:	325b      	adds	r2, #91	; 0x5b
  40440c:	eb07 0c01 	add.w	ip, r7, r1
  404410:	5879      	ldr	r1, [r7, r1]
  404412:	f1ac 0c08 	sub.w	ip, ip, #8
  404416:	458c      	cmp	ip, r1
  404418:	f000 8088 	beq.w	40452c <_malloc_r+0x494>
  40441c:	684a      	ldr	r2, [r1, #4]
  40441e:	f022 0203 	bic.w	r2, r2, #3
  404422:	4293      	cmp	r3, r2
  404424:	d273      	bcs.n	40450e <_malloc_r+0x476>
  404426:	6889      	ldr	r1, [r1, #8]
  404428:	458c      	cmp	ip, r1
  40442a:	d1f7      	bne.n	40441c <_malloc_r+0x384>
  40442c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404430:	687b      	ldr	r3, [r7, #4]
  404432:	60e2      	str	r2, [r4, #12]
  404434:	f8c4 c008 	str.w	ip, [r4, #8]
  404438:	6094      	str	r4, [r2, #8]
  40443a:	f8cc 400c 	str.w	r4, [ip, #12]
  40443e:	e68f      	b.n	404160 <_malloc_r+0xc8>
  404440:	19a1      	adds	r1, r4, r6
  404442:	f046 0c01 	orr.w	ip, r6, #1
  404446:	f042 0601 	orr.w	r6, r2, #1
  40444a:	f8c4 c004 	str.w	ip, [r4, #4]
  40444e:	4628      	mov	r0, r5
  404450:	6179      	str	r1, [r7, #20]
  404452:	6139      	str	r1, [r7, #16]
  404454:	f8c1 e00c 	str.w	lr, [r1, #12]
  404458:	f8c1 e008 	str.w	lr, [r1, #8]
  40445c:	604e      	str	r6, [r1, #4]
  40445e:	50e2      	str	r2, [r4, r3]
  404460:	f000 f8d0 	bl	404604 <__malloc_unlock>
  404464:	3408      	adds	r4, #8
  404466:	e6dd      	b.n	404224 <_malloc_r+0x18c>
  404468:	687b      	ldr	r3, [r7, #4]
  40446a:	e679      	b.n	404160 <_malloc_r+0xc8>
  40446c:	f108 0801 	add.w	r8, r8, #1
  404470:	f018 0f03 	tst.w	r8, #3
  404474:	f10c 0c08 	add.w	ip, ip, #8
  404478:	f47f ae85 	bne.w	404186 <_malloc_r+0xee>
  40447c:	e02d      	b.n	4044da <_malloc_r+0x442>
  40447e:	68dc      	ldr	r4, [r3, #12]
  404480:	42a3      	cmp	r3, r4
  404482:	bf08      	it	eq
  404484:	3002      	addeq	r0, #2
  404486:	f43f ae3e 	beq.w	404106 <_malloc_r+0x6e>
  40448a:	e6bb      	b.n	404204 <_malloc_r+0x16c>
  40448c:	4419      	add	r1, r3
  40448e:	461c      	mov	r4, r3
  404490:	684a      	ldr	r2, [r1, #4]
  404492:	68db      	ldr	r3, [r3, #12]
  404494:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404498:	f042 0201 	orr.w	r2, r2, #1
  40449c:	604a      	str	r2, [r1, #4]
  40449e:	4628      	mov	r0, r5
  4044a0:	60f3      	str	r3, [r6, #12]
  4044a2:	609e      	str	r6, [r3, #8]
  4044a4:	f000 f8ae 	bl	404604 <__malloc_unlock>
  4044a8:	e6bc      	b.n	404224 <_malloc_r+0x18c>
  4044aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4044ae:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4044b2:	00c3      	lsls	r3, r0, #3
  4044b4:	e612      	b.n	4040dc <_malloc_r+0x44>
  4044b6:	099a      	lsrs	r2, r3, #6
  4044b8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4044bc:	00c9      	lsls	r1, r1, #3
  4044be:	3238      	adds	r2, #56	; 0x38
  4044c0:	e7a4      	b.n	40440c <_malloc_r+0x374>
  4044c2:	42bc      	cmp	r4, r7
  4044c4:	d054      	beq.n	404570 <_malloc_r+0x4d8>
  4044c6:	68bc      	ldr	r4, [r7, #8]
  4044c8:	6862      	ldr	r2, [r4, #4]
  4044ca:	f022 0203 	bic.w	r2, r2, #3
  4044ce:	e75d      	b.n	40438c <_malloc_r+0x2f4>
  4044d0:	f859 3908 	ldr.w	r3, [r9], #-8
  4044d4:	4599      	cmp	r9, r3
  4044d6:	f040 8086 	bne.w	4045e6 <_malloc_r+0x54e>
  4044da:	f010 0f03 	tst.w	r0, #3
  4044de:	f100 30ff 	add.w	r0, r0, #4294967295
  4044e2:	d1f5      	bne.n	4044d0 <_malloc_r+0x438>
  4044e4:	687b      	ldr	r3, [r7, #4]
  4044e6:	ea23 0304 	bic.w	r3, r3, r4
  4044ea:	607b      	str	r3, [r7, #4]
  4044ec:	0064      	lsls	r4, r4, #1
  4044ee:	429c      	cmp	r4, r3
  4044f0:	f63f aec7 	bhi.w	404282 <_malloc_r+0x1ea>
  4044f4:	2c00      	cmp	r4, #0
  4044f6:	f43f aec4 	beq.w	404282 <_malloc_r+0x1ea>
  4044fa:	421c      	tst	r4, r3
  4044fc:	4640      	mov	r0, r8
  4044fe:	f47f ae3e 	bne.w	40417e <_malloc_r+0xe6>
  404502:	0064      	lsls	r4, r4, #1
  404504:	421c      	tst	r4, r3
  404506:	f100 0004 	add.w	r0, r0, #4
  40450a:	d0fa      	beq.n	404502 <_malloc_r+0x46a>
  40450c:	e637      	b.n	40417e <_malloc_r+0xe6>
  40450e:	468c      	mov	ip, r1
  404510:	e78c      	b.n	40442c <_malloc_r+0x394>
  404512:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404516:	d815      	bhi.n	404544 <_malloc_r+0x4ac>
  404518:	0bf3      	lsrs	r3, r6, #15
  40451a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40451e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404522:	00c3      	lsls	r3, r0, #3
  404524:	e5da      	b.n	4040dc <_malloc_r+0x44>
  404526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40452a:	e6ed      	b.n	404308 <_malloc_r+0x270>
  40452c:	687b      	ldr	r3, [r7, #4]
  40452e:	1092      	asrs	r2, r2, #2
  404530:	2101      	movs	r1, #1
  404532:	fa01 f202 	lsl.w	r2, r1, r2
  404536:	4313      	orrs	r3, r2
  404538:	607b      	str	r3, [r7, #4]
  40453a:	4662      	mov	r2, ip
  40453c:	e779      	b.n	404432 <_malloc_r+0x39a>
  40453e:	2301      	movs	r3, #1
  404540:	6053      	str	r3, [r2, #4]
  404542:	e729      	b.n	404398 <_malloc_r+0x300>
  404544:	f240 5254 	movw	r2, #1364	; 0x554
  404548:	4293      	cmp	r3, r2
  40454a:	d822      	bhi.n	404592 <_malloc_r+0x4fa>
  40454c:	0cb3      	lsrs	r3, r6, #18
  40454e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404552:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404556:	00c3      	lsls	r3, r0, #3
  404558:	e5c0      	b.n	4040dc <_malloc_r+0x44>
  40455a:	f103 0b10 	add.w	fp, r3, #16
  40455e:	e6ae      	b.n	4042be <_malloc_r+0x226>
  404560:	2a54      	cmp	r2, #84	; 0x54
  404562:	d829      	bhi.n	4045b8 <_malloc_r+0x520>
  404564:	0b1a      	lsrs	r2, r3, #12
  404566:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40456a:	00c9      	lsls	r1, r1, #3
  40456c:	326e      	adds	r2, #110	; 0x6e
  40456e:	e74d      	b.n	40440c <_malloc_r+0x374>
  404570:	4b20      	ldr	r3, [pc, #128]	; (4045f4 <_malloc_r+0x55c>)
  404572:	6819      	ldr	r1, [r3, #0]
  404574:	4459      	add	r1, fp
  404576:	6019      	str	r1, [r3, #0]
  404578:	e6b2      	b.n	4042e0 <_malloc_r+0x248>
  40457a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40457e:	2800      	cmp	r0, #0
  404580:	f47f aeae 	bne.w	4042e0 <_malloc_r+0x248>
  404584:	eb08 030b 	add.w	r3, r8, fp
  404588:	68ba      	ldr	r2, [r7, #8]
  40458a:	f043 0301 	orr.w	r3, r3, #1
  40458e:	6053      	str	r3, [r2, #4]
  404590:	e6ee      	b.n	404370 <_malloc_r+0x2d8>
  404592:	207f      	movs	r0, #127	; 0x7f
  404594:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404598:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40459c:	e59e      	b.n	4040dc <_malloc_r+0x44>
  40459e:	f104 0108 	add.w	r1, r4, #8
  4045a2:	4628      	mov	r0, r5
  4045a4:	9300      	str	r3, [sp, #0]
  4045a6:	f7ff fc29 	bl	403dfc <_free_r>
  4045aa:	9b00      	ldr	r3, [sp, #0]
  4045ac:	6819      	ldr	r1, [r3, #0]
  4045ae:	e6df      	b.n	404370 <_malloc_r+0x2d8>
  4045b0:	2001      	movs	r0, #1
  4045b2:	f04f 0900 	mov.w	r9, #0
  4045b6:	e6bc      	b.n	404332 <_malloc_r+0x29a>
  4045b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4045bc:	d805      	bhi.n	4045ca <_malloc_r+0x532>
  4045be:	0bda      	lsrs	r2, r3, #15
  4045c0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4045c4:	00c9      	lsls	r1, r1, #3
  4045c6:	3277      	adds	r2, #119	; 0x77
  4045c8:	e720      	b.n	40440c <_malloc_r+0x374>
  4045ca:	f240 5154 	movw	r1, #1364	; 0x554
  4045ce:	428a      	cmp	r2, r1
  4045d0:	d805      	bhi.n	4045de <_malloc_r+0x546>
  4045d2:	0c9a      	lsrs	r2, r3, #18
  4045d4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4045d8:	00c9      	lsls	r1, r1, #3
  4045da:	327c      	adds	r2, #124	; 0x7c
  4045dc:	e716      	b.n	40440c <_malloc_r+0x374>
  4045de:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4045e2:	227e      	movs	r2, #126	; 0x7e
  4045e4:	e712      	b.n	40440c <_malloc_r+0x374>
  4045e6:	687b      	ldr	r3, [r7, #4]
  4045e8:	e780      	b.n	4044ec <_malloc_r+0x454>
  4045ea:	08f0      	lsrs	r0, r6, #3
  4045ec:	f106 0308 	add.w	r3, r6, #8
  4045f0:	e600      	b.n	4041f4 <_malloc_r+0x15c>
  4045f2:	bf00      	nop
  4045f4:	20008b84 	.word	0x20008b84

004045f8 <__malloc_lock>:
  4045f8:	4801      	ldr	r0, [pc, #4]	; (404600 <__malloc_lock+0x8>)
  4045fa:	f7ff bd13 	b.w	404024 <__retarget_lock_acquire_recursive>
  4045fe:	bf00      	nop
  404600:	20008c98 	.word	0x20008c98

00404604 <__malloc_unlock>:
  404604:	4801      	ldr	r0, [pc, #4]	; (40460c <__malloc_unlock+0x8>)
  404606:	f7ff bd0f 	b.w	404028 <__retarget_lock_release_recursive>
  40460a:	bf00      	nop
  40460c:	20008c98 	.word	0x20008c98

00404610 <_sbrk_r>:
  404610:	b538      	push	{r3, r4, r5, lr}
  404612:	4c07      	ldr	r4, [pc, #28]	; (404630 <_sbrk_r+0x20>)
  404614:	2300      	movs	r3, #0
  404616:	4605      	mov	r5, r0
  404618:	4608      	mov	r0, r1
  40461a:	6023      	str	r3, [r4, #0]
  40461c:	f7fc fb44 	bl	400ca8 <_sbrk>
  404620:	1c43      	adds	r3, r0, #1
  404622:	d000      	beq.n	404626 <_sbrk_r+0x16>
  404624:	bd38      	pop	{r3, r4, r5, pc}
  404626:	6823      	ldr	r3, [r4, #0]
  404628:	2b00      	cmp	r3, #0
  40462a:	d0fb      	beq.n	404624 <_sbrk_r+0x14>
  40462c:	602b      	str	r3, [r5, #0]
  40462e:	bd38      	pop	{r3, r4, r5, pc}
  404630:	20008cac 	.word	0x20008cac

00404634 <__sread>:
  404634:	b510      	push	{r4, lr}
  404636:	460c      	mov	r4, r1
  404638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40463c:	f000 f954 	bl	4048e8 <_read_r>
  404640:	2800      	cmp	r0, #0
  404642:	db03      	blt.n	40464c <__sread+0x18>
  404644:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404646:	4403      	add	r3, r0
  404648:	6523      	str	r3, [r4, #80]	; 0x50
  40464a:	bd10      	pop	{r4, pc}
  40464c:	89a3      	ldrh	r3, [r4, #12]
  40464e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404652:	81a3      	strh	r3, [r4, #12]
  404654:	bd10      	pop	{r4, pc}
  404656:	bf00      	nop

00404658 <__swrite>:
  404658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40465c:	4616      	mov	r6, r2
  40465e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404662:	461f      	mov	r7, r3
  404664:	05d3      	lsls	r3, r2, #23
  404666:	460c      	mov	r4, r1
  404668:	4605      	mov	r5, r0
  40466a:	d507      	bpl.n	40467c <__swrite+0x24>
  40466c:	2200      	movs	r2, #0
  40466e:	2302      	movs	r3, #2
  404670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404674:	f000 f922 	bl	4048bc <_lseek_r>
  404678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40467c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404680:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404684:	81a2      	strh	r2, [r4, #12]
  404686:	463b      	mov	r3, r7
  404688:	4632      	mov	r2, r6
  40468a:	4628      	mov	r0, r5
  40468c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404690:	f000 b814 	b.w	4046bc <_write_r>

00404694 <__sseek>:
  404694:	b510      	push	{r4, lr}
  404696:	460c      	mov	r4, r1
  404698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40469c:	f000 f90e 	bl	4048bc <_lseek_r>
  4046a0:	89a3      	ldrh	r3, [r4, #12]
  4046a2:	1c42      	adds	r2, r0, #1
  4046a4:	bf0e      	itee	eq
  4046a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4046aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4046ae:	6520      	strne	r0, [r4, #80]	; 0x50
  4046b0:	81a3      	strh	r3, [r4, #12]
  4046b2:	bd10      	pop	{r4, pc}

004046b4 <__sclose>:
  4046b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4046b8:	f000 b878 	b.w	4047ac <_close_r>

004046bc <_write_r>:
  4046bc:	b570      	push	{r4, r5, r6, lr}
  4046be:	460d      	mov	r5, r1
  4046c0:	4c08      	ldr	r4, [pc, #32]	; (4046e4 <_write_r+0x28>)
  4046c2:	4611      	mov	r1, r2
  4046c4:	4606      	mov	r6, r0
  4046c6:	461a      	mov	r2, r3
  4046c8:	4628      	mov	r0, r5
  4046ca:	2300      	movs	r3, #0
  4046cc:	6023      	str	r3, [r4, #0]
  4046ce:	f7fb fe33 	bl	400338 <_write>
  4046d2:	1c43      	adds	r3, r0, #1
  4046d4:	d000      	beq.n	4046d8 <_write_r+0x1c>
  4046d6:	bd70      	pop	{r4, r5, r6, pc}
  4046d8:	6823      	ldr	r3, [r4, #0]
  4046da:	2b00      	cmp	r3, #0
  4046dc:	d0fb      	beq.n	4046d6 <_write_r+0x1a>
  4046de:	6033      	str	r3, [r6, #0]
  4046e0:	bd70      	pop	{r4, r5, r6, pc}
  4046e2:	bf00      	nop
  4046e4:	20008cac 	.word	0x20008cac

004046e8 <__register_exitproc>:
  4046e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4046ec:	4d2c      	ldr	r5, [pc, #176]	; (4047a0 <__register_exitproc+0xb8>)
  4046ee:	4606      	mov	r6, r0
  4046f0:	6828      	ldr	r0, [r5, #0]
  4046f2:	4698      	mov	r8, r3
  4046f4:	460f      	mov	r7, r1
  4046f6:	4691      	mov	r9, r2
  4046f8:	f7ff fc94 	bl	404024 <__retarget_lock_acquire_recursive>
  4046fc:	4b29      	ldr	r3, [pc, #164]	; (4047a4 <__register_exitproc+0xbc>)
  4046fe:	681c      	ldr	r4, [r3, #0]
  404700:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404704:	2b00      	cmp	r3, #0
  404706:	d03e      	beq.n	404786 <__register_exitproc+0x9e>
  404708:	685a      	ldr	r2, [r3, #4]
  40470a:	2a1f      	cmp	r2, #31
  40470c:	dc1c      	bgt.n	404748 <__register_exitproc+0x60>
  40470e:	f102 0e01 	add.w	lr, r2, #1
  404712:	b176      	cbz	r6, 404732 <__register_exitproc+0x4a>
  404714:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404718:	2401      	movs	r4, #1
  40471a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40471e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404722:	4094      	lsls	r4, r2
  404724:	4320      	orrs	r0, r4
  404726:	2e02      	cmp	r6, #2
  404728:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40472c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404730:	d023      	beq.n	40477a <__register_exitproc+0x92>
  404732:	3202      	adds	r2, #2
  404734:	f8c3 e004 	str.w	lr, [r3, #4]
  404738:	6828      	ldr	r0, [r5, #0]
  40473a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40473e:	f7ff fc73 	bl	404028 <__retarget_lock_release_recursive>
  404742:	2000      	movs	r0, #0
  404744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404748:	4b17      	ldr	r3, [pc, #92]	; (4047a8 <__register_exitproc+0xc0>)
  40474a:	b30b      	cbz	r3, 404790 <__register_exitproc+0xa8>
  40474c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404750:	f7ff fc9a 	bl	404088 <malloc>
  404754:	4603      	mov	r3, r0
  404756:	b1d8      	cbz	r0, 404790 <__register_exitproc+0xa8>
  404758:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40475c:	6002      	str	r2, [r0, #0]
  40475e:	2100      	movs	r1, #0
  404760:	6041      	str	r1, [r0, #4]
  404762:	460a      	mov	r2, r1
  404764:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404768:	f04f 0e01 	mov.w	lr, #1
  40476c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404770:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404774:	2e00      	cmp	r6, #0
  404776:	d0dc      	beq.n	404732 <__register_exitproc+0x4a>
  404778:	e7cc      	b.n	404714 <__register_exitproc+0x2c>
  40477a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40477e:	430c      	orrs	r4, r1
  404780:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404784:	e7d5      	b.n	404732 <__register_exitproc+0x4a>
  404786:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40478a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40478e:	e7bb      	b.n	404708 <__register_exitproc+0x20>
  404790:	6828      	ldr	r0, [r5, #0]
  404792:	f7ff fc49 	bl	404028 <__retarget_lock_release_recursive>
  404796:	f04f 30ff 	mov.w	r0, #4294967295
  40479a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40479e:	bf00      	nop
  4047a0:	20000440 	.word	0x20000440
  4047a4:	00404930 	.word	0x00404930
  4047a8:	00404089 	.word	0x00404089

004047ac <_close_r>:
  4047ac:	b538      	push	{r3, r4, r5, lr}
  4047ae:	4c07      	ldr	r4, [pc, #28]	; (4047cc <_close_r+0x20>)
  4047b0:	2300      	movs	r3, #0
  4047b2:	4605      	mov	r5, r0
  4047b4:	4608      	mov	r0, r1
  4047b6:	6023      	str	r3, [r4, #0]
  4047b8:	f7fc fa92 	bl	400ce0 <_close>
  4047bc:	1c43      	adds	r3, r0, #1
  4047be:	d000      	beq.n	4047c2 <_close_r+0x16>
  4047c0:	bd38      	pop	{r3, r4, r5, pc}
  4047c2:	6823      	ldr	r3, [r4, #0]
  4047c4:	2b00      	cmp	r3, #0
  4047c6:	d0fb      	beq.n	4047c0 <_close_r+0x14>
  4047c8:	602b      	str	r3, [r5, #0]
  4047ca:	bd38      	pop	{r3, r4, r5, pc}
  4047cc:	20008cac 	.word	0x20008cac

004047d0 <_fclose_r>:
  4047d0:	b570      	push	{r4, r5, r6, lr}
  4047d2:	b159      	cbz	r1, 4047ec <_fclose_r+0x1c>
  4047d4:	4605      	mov	r5, r0
  4047d6:	460c      	mov	r4, r1
  4047d8:	b110      	cbz	r0, 4047e0 <_fclose_r+0x10>
  4047da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4047dc:	2b00      	cmp	r3, #0
  4047de:	d03c      	beq.n	40485a <_fclose_r+0x8a>
  4047e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4047e2:	07d8      	lsls	r0, r3, #31
  4047e4:	d505      	bpl.n	4047f2 <_fclose_r+0x22>
  4047e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047ea:	b92b      	cbnz	r3, 4047f8 <_fclose_r+0x28>
  4047ec:	2600      	movs	r6, #0
  4047ee:	4630      	mov	r0, r6
  4047f0:	bd70      	pop	{r4, r5, r6, pc}
  4047f2:	89a3      	ldrh	r3, [r4, #12]
  4047f4:	0599      	lsls	r1, r3, #22
  4047f6:	d53c      	bpl.n	404872 <_fclose_r+0xa2>
  4047f8:	4621      	mov	r1, r4
  4047fa:	4628      	mov	r0, r5
  4047fc:	f7ff f964 	bl	403ac8 <__sflush_r>
  404800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404802:	4606      	mov	r6, r0
  404804:	b133      	cbz	r3, 404814 <_fclose_r+0x44>
  404806:	69e1      	ldr	r1, [r4, #28]
  404808:	4628      	mov	r0, r5
  40480a:	4798      	blx	r3
  40480c:	2800      	cmp	r0, #0
  40480e:	bfb8      	it	lt
  404810:	f04f 36ff 	movlt.w	r6, #4294967295
  404814:	89a3      	ldrh	r3, [r4, #12]
  404816:	061a      	lsls	r2, r3, #24
  404818:	d422      	bmi.n	404860 <_fclose_r+0x90>
  40481a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40481c:	b141      	cbz	r1, 404830 <_fclose_r+0x60>
  40481e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404822:	4299      	cmp	r1, r3
  404824:	d002      	beq.n	40482c <_fclose_r+0x5c>
  404826:	4628      	mov	r0, r5
  404828:	f7ff fae8 	bl	403dfc <_free_r>
  40482c:	2300      	movs	r3, #0
  40482e:	6323      	str	r3, [r4, #48]	; 0x30
  404830:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404832:	b121      	cbz	r1, 40483e <_fclose_r+0x6e>
  404834:	4628      	mov	r0, r5
  404836:	f7ff fae1 	bl	403dfc <_free_r>
  40483a:	2300      	movs	r3, #0
  40483c:	6463      	str	r3, [r4, #68]	; 0x44
  40483e:	f7ff fa67 	bl	403d10 <__sfp_lock_acquire>
  404842:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404844:	2200      	movs	r2, #0
  404846:	07db      	lsls	r3, r3, #31
  404848:	81a2      	strh	r2, [r4, #12]
  40484a:	d50e      	bpl.n	40486a <_fclose_r+0x9a>
  40484c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40484e:	f7ff fbe7 	bl	404020 <__retarget_lock_close_recursive>
  404852:	f7ff fa63 	bl	403d1c <__sfp_lock_release>
  404856:	4630      	mov	r0, r6
  404858:	bd70      	pop	{r4, r5, r6, pc}
  40485a:	f7ff fa2d 	bl	403cb8 <__sinit>
  40485e:	e7bf      	b.n	4047e0 <_fclose_r+0x10>
  404860:	6921      	ldr	r1, [r4, #16]
  404862:	4628      	mov	r0, r5
  404864:	f7ff faca 	bl	403dfc <_free_r>
  404868:	e7d7      	b.n	40481a <_fclose_r+0x4a>
  40486a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40486c:	f7ff fbdc 	bl	404028 <__retarget_lock_release_recursive>
  404870:	e7ec      	b.n	40484c <_fclose_r+0x7c>
  404872:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404874:	f7ff fbd6 	bl	404024 <__retarget_lock_acquire_recursive>
  404878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40487c:	2b00      	cmp	r3, #0
  40487e:	d1bb      	bne.n	4047f8 <_fclose_r+0x28>
  404880:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404882:	f016 0601 	ands.w	r6, r6, #1
  404886:	d1b1      	bne.n	4047ec <_fclose_r+0x1c>
  404888:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40488a:	f7ff fbcd 	bl	404028 <__retarget_lock_release_recursive>
  40488e:	4630      	mov	r0, r6
  404890:	bd70      	pop	{r4, r5, r6, pc}
  404892:	bf00      	nop

00404894 <_fstat_r>:
  404894:	b538      	push	{r3, r4, r5, lr}
  404896:	460b      	mov	r3, r1
  404898:	4c07      	ldr	r4, [pc, #28]	; (4048b8 <_fstat_r+0x24>)
  40489a:	4605      	mov	r5, r0
  40489c:	4611      	mov	r1, r2
  40489e:	4618      	mov	r0, r3
  4048a0:	2300      	movs	r3, #0
  4048a2:	6023      	str	r3, [r4, #0]
  4048a4:	f7fc fa1f 	bl	400ce6 <_fstat>
  4048a8:	1c43      	adds	r3, r0, #1
  4048aa:	d000      	beq.n	4048ae <_fstat_r+0x1a>
  4048ac:	bd38      	pop	{r3, r4, r5, pc}
  4048ae:	6823      	ldr	r3, [r4, #0]
  4048b0:	2b00      	cmp	r3, #0
  4048b2:	d0fb      	beq.n	4048ac <_fstat_r+0x18>
  4048b4:	602b      	str	r3, [r5, #0]
  4048b6:	bd38      	pop	{r3, r4, r5, pc}
  4048b8:	20008cac 	.word	0x20008cac

004048bc <_lseek_r>:
  4048bc:	b570      	push	{r4, r5, r6, lr}
  4048be:	460d      	mov	r5, r1
  4048c0:	4c08      	ldr	r4, [pc, #32]	; (4048e4 <_lseek_r+0x28>)
  4048c2:	4611      	mov	r1, r2
  4048c4:	4606      	mov	r6, r0
  4048c6:	461a      	mov	r2, r3
  4048c8:	4628      	mov	r0, r5
  4048ca:	2300      	movs	r3, #0
  4048cc:	6023      	str	r3, [r4, #0]
  4048ce:	f7fc fa0f 	bl	400cf0 <_lseek>
  4048d2:	1c43      	adds	r3, r0, #1
  4048d4:	d000      	beq.n	4048d8 <_lseek_r+0x1c>
  4048d6:	bd70      	pop	{r4, r5, r6, pc}
  4048d8:	6823      	ldr	r3, [r4, #0]
  4048da:	2b00      	cmp	r3, #0
  4048dc:	d0fb      	beq.n	4048d6 <_lseek_r+0x1a>
  4048de:	6033      	str	r3, [r6, #0]
  4048e0:	bd70      	pop	{r4, r5, r6, pc}
  4048e2:	bf00      	nop
  4048e4:	20008cac 	.word	0x20008cac

004048e8 <_read_r>:
  4048e8:	b570      	push	{r4, r5, r6, lr}
  4048ea:	460d      	mov	r5, r1
  4048ec:	4c08      	ldr	r4, [pc, #32]	; (404910 <_read_r+0x28>)
  4048ee:	4611      	mov	r1, r2
  4048f0:	4606      	mov	r6, r0
  4048f2:	461a      	mov	r2, r3
  4048f4:	4628      	mov	r0, r5
  4048f6:	2300      	movs	r3, #0
  4048f8:	6023      	str	r3, [r4, #0]
  4048fa:	f7fb fcff 	bl	4002fc <_read>
  4048fe:	1c43      	adds	r3, r0, #1
  404900:	d000      	beq.n	404904 <_read_r+0x1c>
  404902:	bd70      	pop	{r4, r5, r6, pc}
  404904:	6823      	ldr	r3, [r4, #0]
  404906:	2b00      	cmp	r3, #0
  404908:	d0fb      	beq.n	404902 <_read_r+0x1a>
  40490a:	6033      	str	r3, [r6, #0]
  40490c:	bd70      	pop	{r4, r5, r6, pc}
  40490e:	bf00      	nop
  404910:	20008cac 	.word	0x20008cac
  404914:	00776f70 	.word	0x00776f70
  404918:	74727173 	.word	0x74727173
  40491c:	00000000 	.word	0x00000000

00404920 <TWO52>:
  404920:	00000000 43300000 00000000 c3300000     ......0C......0.

00404930 <_global_impure_ptr>:
  404930:	20000018                                ... 

00404934 <_init>:
  404934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404936:	bf00      	nop
  404938:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40493a:	bc08      	pop	{r3}
  40493c:	469e      	mov	lr, r3
  40493e:	4770      	bx	lr

00404940 <__init_array_start>:
  404940:	00403aa9 	.word	0x00403aa9

00404944 <__frame_dummy_init_array_entry>:
  404944:	0040011d                                ..@.

00404948 <_fini>:
  404948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40494a:	bf00      	nop
  40494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40494e:	bc08      	pop	{r3}
  404950:	469e      	mov	lr, r3
  404952:	4770      	bx	lr

00404954 <__fini_array_start>:
  404954:	004000f9 	.word	0x004000f9
